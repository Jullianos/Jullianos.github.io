{"version":3,"sources":["globals.js","actions/api_urls.js","actions/types.js","models.js","components/layout/sounds.jsx","reducers/anime.js","reducers/manga.js","actions/messages.js","actions/auth.js","components/layout/filters/field_names.js","actions/cookies.js","components/functions.js","actions/anime.js","actions/manga.js","actions/eroge.js","actions/users.js","reducers/auth.js","reducers/errors.js","reducers/characters.js","reducers/eroge.js","components/cookies/load_cookies.js","reducers/cookies.js","reducers/success.js","reducers/users.js","reducers/requiem.js","actions/characters.js","reducers/people.js","reducers/industry.js","reducers/index.js","store.js","reportWebVitals.js","urls.js","components/layout/navbar/menus.jsx","components/layout/navbar/CyberHeader.jsx","components/layout/navbar/CyberNavbar.jsx","components/layout/footer/CyberFooter.js","components/layout/common/Loading.js","components/layout/common/common.js","actions/people.js","actions/requiem.js","components/requiem/snippets/snippets.js","components/layout/pagination/goToPageDialog.js","components/requiem/snippets/News.js","components/home/functions.js","components/home/Home.js","components/anime/home/statistics.js","components/anime/home/AnimeStatistics.js","components/display/snippets.js","components/display/TabsRoot.js","components/user/forms/anime/AnimeEntryModalForm.js","components/display/Display.js","components/anime/display/tabs/GeneralTab.js","components/manga/display/tabs/GeneralTab.js","components/characters/display/tabs/GeneralTab.js","components/people/display/tabs/GeneralTab.js","components/eroge/display/tabs/GeneralTab.js","components/anime/display/tabs/CharactersTab.js","components/manga/display/tabs/CharactersTab.js","components/manga/display/tabs/RelationsTab.js","components/requiem/forms/DownloadTorrentForm.js","components/requiem/forms/EditAnimeOnServerModalForm.js","components/requiem/forms/forms.js","components/anime/display/tabs/ServerTab.js","components/user/forms/anime/UpdateAnimeEpisodeButton.js","components/user/forms/anime/AnimeEpisodeHistoryModal.js","components/user/forms/shortForms.js","components/user/forms/manga/forms.js","components/user/forms/manga/MangaEntryModalForm.js","components/user/forms/manga/UpdateMangaVolumeChapterButtons.js","components/user/forms/manga/MangaVolumeChapterHistoryModal.js","components/anime/display/tabs/RelationsTab.js","components/franchises/display/FranchiseTree.js","components/franchises/display/helpers.js","components/anime/display/tabs/FranchiseTab.js","components/requiem/forms/DownloadTorrentModalForm.js","components/requiem/snippets/DisplayTorrentProgress.js","components/people/display/tabs/VoiceActorRolesTab.js","components/people/display/tabs/AnimeStaffPositionsTab.js","components/people/display/tabs/PublishedMangaTab.js","components/anime/utils.js","components/anime/display/tabs/AirOrderTab.js","components/user/forms/snippets.js","components/display/functions.js","components/user/forms/anime/forms.js","components/layout/cards/CardUserEditTitleEntry.js","components/layout/cards/functions.js","components/layout/cards/TitleCard.js","components/anime/seasons/AnimeCurrentSeason.js","components/anime/home/tabs/TopAnimeTabs.js","components/anime/home/TopAnime.js","components/anime/home/AnimeHome.js","components/auth/functions.js","components/auth/LoginForm.js","components/auth/Login.js","components/auth/RegisterForm.js","components/auth/Register.js","components/layout/filters/functions.js","components/layout/filters/PresetFilters.js","components/layout/filters/UserBrowseDisplaySettings.js","components/layout/filters/TitlesFilter.js","components/layout/filters/anime/AnimeFilters.js","components/layout/filters/manga/MangaFilters.js","components/layout/filters/eroge/ErogeFilters.js","components/layout/filters/characters/CharactersFilters.js","components/layout/filters/people/PeopleFilters.js","components/browse/functions.js","components/layout/rows/TitleRow.js","components/layout/rows/functions.js","components/browse/utils.js","components/browse/Browse.js","components/anime/browse/AnimeBrowse.js","components/index/snippets.js","components/index/Index.js","components/user/statistics/statistics_snippets.js","components/user/statistics/favorites_snippets.js","components/user/settings/bbcode_editor/xbbcode.js","components/user/settings/bbcode_editor/parser.js","components/user/profile/tabs/AboutTab.js","components/user/profile/tabs/AnimeTab.js","components/user/profile/tabs/MangaTab.js","components/user/achievements/achievements.js","components/user/profile/tabs/AchievementsTab.js","components/user/profile/tabs/ProfileTabs.js","components/user/forms/UploadProfileImageButton.js","components/user/profile/Profile.js","components/user/settings/tabs/UserSettings.js","components/user/settings/tabs/ProfileSettings.js","components/user/forms/list_privacy/listPrivacyForms.js","components/user/settings/tabs/ListSettings.js","components/user/settings/tabs/SettingsTabs.js","components/user/settings/Settings.js","components/manga/browse/MangaBrowse.js","components/anime/display/AnimeDisplay.js","components/manga/display/MangaDisplay.js","components/characters/browse/CharactersBrowse.js","components/characters/display/CharacterDisplay.js","components/eroge/browse/ErogeBrowse.js","components/eroge/display/ErogeDisplay.js","components/seasons/functions.js","components/seasons/BrowseSeasons.js","components/anime/seasons/BrowseAnimeSeasons.js","components/manga/seasons/BrowseMangaSeasons.js","components/layout/404/404.js","components/layout/alerts/Alerts.js","components/seasons/DisplaySeason.js","components/user/user_list/functions.js","components/user/user_list/anime/tableView.js","components/user/user_list/manga/tableView.js","components/user/user_list/user_settings/userListDesignSettingsDialogFields.js","components/user/user_list/user_settings/user_list_settings_schema.js","components/user/user_list/user_settings/tabs/GeneralTab.js","components/user/user_list/user_settings/tabs/CoverImgTab.js","components/user/user_list/user_settings/tabs/BackgroundImgTab.js","components/user/user_list/user_settings/tabs/MessageTab.js","components/user/user_list/user_settings/tabs/ListTab.js","components/user/user_list/user_settings/tabs/OverlayImgTab.js","components/user/user_list/user_settings/tabs/userListDesignSettingsDialogTabs.js","components/user/user_list/user_settings/userListDesignSettings.js","components/user/user_list/utils.js","components/user/user_list/user_settings/settings_functions.js","components/user/user_list/UserList.js","components/user/user_list/PrivateList.js","components/user/user_list/anime/AnimeList.js","components/user/statistics/data_calculations.js","components/user/statistics/Statistics.js","components/user/history/DisplayUserHistory.js","components/user/history/History.js","components/user/user_list/manga/MangaList.js","components/franchises/display/DisplayFranchise.js","components/manga/home/tabs/TopMangaTabs.js","components/manga/home/TopManga.js","components/manga/home/MangaHome.js","components/characters/home/TopCharacters.js","components/characters/home/CharactersHome.js","actions/industry.js","components/eroge/home/tabs/TopErogeTabs.js","components/eroge/home/TopEroge.js","components/eroge/home/ErogeHome.js","components/people/browse/PeopleBrowse.js","components/people/display/PersonDisplay.js","components/user/settings/bbcode_editor/templates.js","components/user/settings/bbcode_editor/tabs/BBCodeEditorTab.js","components/user/settings/bbcode_editor/tabs/BackgroundEditorTab.js","components/user/settings/bbcode_editor/tabs/bbCodeTabs.js","components/user/settings/bbcode_editor/BBCodeEditor.js","components/requiem/home/ActiveScrapers.js","components/requiem/home/Drawer.js","components/requiem/home/Dashboard.js","components/requiem/home/Torrents.js","components/requiem/home/Components.js","components/requiem/home/Requiem.js","components/App.js","index.js","components/layout/alerts/AlertTemplate.js"],"names":["CYBER_GENESIS_URL","store_reducers","window","location","host","store_reducer_users","store_reducer_cookies","BRANCH_ANIME","BRANCH_MANGA","BRANCH_EROGE","BRANCH_PEOPLE","BRANCH_CHARACTERS","TYPE_BROWSE","TYPE_LIST","TYPE_SEASON","LANGUAGES","FILTER_ANIME_INITIAL_VALUES","VALUES","search","downloaded","is_downloading","cannot_download","deleted_by_MAL","pending_by_MAL","anime_on_server__english_sub","anime_on_server__english_dub","anime_on_server__japanese_dub","anime_on_server__japanese_sub","episodes_range","length_range","genres","type","status","rating_short","video_quality","audio_channel","user_exclude","ordering","ANIME_ORDERINGS","USER_ANIME_ORDERINGS","ANIME_TYPES","ANIME_STATUSES","ANIME_RATING_SHORT","ANIME_VIDEO_QUALITIES","USER_ANIME_STATUSES_ARRAY","USER_MANGA_STATUSES_ARRAY","ANIME_AUDIO_CHANNELS","ANIME_GENRES","sort","USER_ANIME_STATUSES","USER_MANGA_STATUSES","FILTER_MANGA_INITIAL_VALUES","volumes_range","chapters_range","MANGA_ORDERINGS","USER_MANGA_ORDERINGS","MANGA_TYPES","MANGA_STATUSES","MANGA_GENRES","FILTER_EROGE_INITIAL_VALUES","platforms","language","censorship","tags","EROGE_ORDERINGS","EROGE_TYPES","EROGE_PLATFORMS","EROGE_CENSORSHIPS","EROGE_LANGUAGES","EROGE_TAGS","FILTER_CHARACTERS_INITIAL_VALUES","CHARACTERS_ORDERINGS","PEOPLE_ORDERINGS","BASE_URL","API_GET_OPEN_APPLICATIONS_STATUS","API_AUTH_USER","API_LOGIN","API_REGISTER","API_LOGOUT","API_GET_ALL_USERS","API_USER_ANIME_FILTERS_PRESET","API_USER_MANGA_FILTERS_PRESET","API_USER_EROGE_FILTERS_PRESET","API_CHANGE_USER_PROFILE_IMAGE","API_IMPORT_MAL_XML_FOR_ANIME_LIST","API_IMPORT_MAL_XML_FOR_MANGA_LIST","API_EDIT_USER_BIO","API_EDIT_USER_ABOUT_ME_BBCODE","API_EDIT_USER_ABOUT_ME_BACKGROUND","API_SCRAPE_EPISODE_HISTORY_FROM_MAL","API_CHANGE_CYBER_SOUND_STATUS","API_USER_ANIME_ENTRY_NOID","API_USER_MANGA_ENTRY_NOID","API_USER_ANIME_ENTRY_STATUSES","API_USER_MANGA_ENTRY_STATUSES","API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS","API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES","API_SET_ANIME_LIST_TO_PRIVATE","API_SET_ANIME_LIST_TO_PUBLIC","API_SET_ANIME_HISTORY_TO_PRIVATE","API_SET_ANIME_HISTORY_TO_PUBLIC","API_SET_MANGA_LIST_TO_PRIVATE","API_SET_MANGA_LIST_TO_PUBLIC","API_SET_MANGA_HISTORY_TO_PRIVATE","API_SET_MANGA_HISTORY_TO_PUBLIC","API_UPDATE_USER_ANIME_DISPLAY_SETTINGS","API_UPDATE_USER_ANIME_LIST_SETTINGS","API_UPDATE_USER_MANGA_DISPLAY_SETTINGS","API_UPDATE_USER_MANGA_LIST_SETTINGS","API_UPDATE_USER_EROGE_DISPLAY_SETTINGS","API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE","id","API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_ANIME_ENTRY","API_USER_MANGA_ENTRY","API_GET_ANIME_DATA","API_GET_ANIME_DATA_FOR_HOME_PAGE","API_GET_ANIME_DATA_WITH_STATISTICS","API_GET_ANIME_ACHIEVEMENT_THRESHOLDS","API_FILTER_ANIME","API_GET_PENDING_SERVER_ANIME","API_GET_MANGA_DATA","API_GET_MANGA_DATA_FOR_HOME_PAGE","API_FILTER_MANGA","API_FILTER_CHARACTERS","API_FILTER_PEOPLE","API_FILTER_EROGE","API_GET_EROGE_DATA_FOR_HOME_PAGE","API_GET_REQUIEM","API_GET_TARGETS","API_GET_SCRAPERS_PROGRESS","API_REQUIEM_GET_STORAGE_INFO","API_ADD_ANIME_TO_SERVER","API_GET_NEWS","API_GET_ACTIVE_TORRENTS_PROGRESS","API_UPDATE_ANIME_TO_SERVER","API_APPROVE_ANIME_ON_SERVER","API_GET_INDUSTRY_DATA_FOR_HOME_PAGE","SET_ANIME_FILTERS","SET_MANGA_FILTERS","SET_CHARACTERS_FILTERS","SET_PEOPLE_FILTERS","SET_EROGE_FILTERS","SET_COOKIE_SHOW_FILTERS","USER_LOADING","AUTH_USER","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","SET_REDIRECT_URL","GET_REQUIEM","REQUIEM_LOADING","GET_REPORTS","REPORTS_LOADING","GET_NEWS","NEWS_LOADING","GET_TORRENT_PROGRESS","GET_ACTIVE_TORRENTS_PROGRESS","CLEAR_ANIME_TORRENT_PROGRESS","GET_STORAGE_INFO","GET_TARGETS","GET_SCRAPERS_PROGRESS","USERS_LOADING","USER_LIST_LOADING","CANCEL_USER_LIST_LOADING","SET_OPEN_APPLICATIONS_STATUS","GET_USER","GET_ALL_USERS","USER_ENTRY_LOADING","FINISH_LOADING_USER_ENTRY","GET_USER_ANIME_ENTRY","AUTH_ERROR_CLEAR_USER_INFO","CLEAR_USER_ANIME_ENTRY","GET_USER_MANGA_ENTRY","CLEAR_USER_MANGA_ENTRY","GET_USER_LIST","UPDATE_USER_LIST","USER_STATISTICS_LOADING","UPDATE_USER_ANIME_STATISTICS","UPLOADING_FILE","FINISH_UPLOADING_FILE","UPLOAD_ANIME_LIST_MAL_XML","UPLOAD_MANGA_LIST_MAL_XML","USER_INFO_LOADING","USER_ACHIEVEMENTS_LOADING","CANCEL_USER_ACHIEVEMENTS_LOADING","GET_USER_ACHIEVEMENTS","CLEAR_USER_ACHIEVEMENTS","GET_VISITED_USER_ANIME_HISTORY","GET_VISITED_USER_MANGA_HISTORY","GET_ANIME_FILTER_PRESETS","GET_MANGA_FILTER_PRESETS","GET_EROGE_FILTER_PRESETS","SET_ANIME_PRESET","SET_MANGA_PRESET","SET_EROGE_PRESET","GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES","GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES","UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES","UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES","GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS","GET_PROFILE_PRIVACY_SETTINGS","UPDATE_USER_DISPLAY_SETTINGS_STORE","UPDATE_USER_LIST_DESIGN_SETTINGS_STORE","UPDATE_USER_ANIME_BROWSE_SETTINGS","UPDATE_USER_ANIME_LIST_SETTINGS","UPDATE_USER_MANGA_BROWSE_SETTINGS","UPDATE_USER_MANGA_LIST_SETTINGS","UPDATE_USER_EROGE_BROWSE_SETTINGS","GET_ANIME_DATA","GET_ANIME_DATA_STATISTICS","GET_ANIME_ACHIEVEMENT_THRESHOLDS","GET_ANIME","GET_ALL_CHARACTERS_FOR_ANIME","GET_RELATIONS_FOR_ANIME","FILTER_ANIME","ANIME_LOADING","CANCEL_ANIME_LOADING","ANIME_FRANCHISE_LOADING","GET_CURRENT_ANIME_FRANCHISE","GET_ANIME_SEARCHABLE_TITLES","GET_ANIME_ON_SERVER","ANIME_ON_SERVER_LOADING","GET_PENDING_ANIME_SERVER_INFO","GET_MANGA_DATA","GET_MANGA","GET_ALL_CHARACTERS_FOR_MANGA","GET_RELATIONS_FOR_MANGA","FILTER_MANGA","MANGA_LOADING","CANCEL_MANGA_LOADING","GET_CHARACTER","FILTER_CHARACTERS","CHARACTERS_LOADING","CANCEL_CHARACTERS_LOADING","GET_PERSON","GET_VOICE_ACTOR_ROLES_FOR_PERSON","GET_ANIME_STAFF_POSITIONS_FOR_PERSON","GET_PUBLISHED_MANGA_FOR_PERSON","FILTER_PEOPLE","PEOPLE_LOADING","CANCEL_PEOPLE_LOADING","GET_EROGE","GET_EROGE_DATA","FILTER_EROGE","EROGE_LOADING","CANCEL_EROGE_LOADING","CREATE_MESSAGE","CLEAR_MESSAGE","GET_ERRORS","CLEAN_ERRORS","GET_INDUSTRY_DATA","INDUSTRY_DATA_LOADING","Cookie","show_filters","sound_effects","anime_browse_filters","anime_season_filters","anime_list_filters","manga_browse_filters","manga_season_filters","manga_list_filters","characters_filters","people_filters","eroge_browse_filters","Alert","type_success","type_info","type_error","ApiResult","count","next","previous","results","CyberAdmin","open_applications","User","username","profile","email","is_superuser","date_joined","last_login","first_name","last_name","is_staff","is_active","UserStatistics","the_crusade","the_crusade_progress","romance_progress","romance_1","romance_2","romance_3","romance_4","pervert_progress","pervert_1","pervert_2","pervert_3","pervert_4","classics_progress","classics_1","classics_2","classics_3","classics_4","dementia_psychological_progress","dementia_psychological_1","dementia_psychological_2","dementia_psychological_3","dementia_psychological_4","horror_thriller_progress","horror_thriller_1","horror_thriller_2","horror_thriller_3","horror_thriller_4","mystery_progress","mystery_1","mystery_2","mystery_3","mystery_4","Profile","avatar","profile_cover","profile_image","title","bio","user","favorite_anime","favorite_manga","favorite_characters","favorite_people","active_theme","theme_sounds","show_adult","about_section_bbcode","about_section_background_style","is_profile_private","is_anime_list_private","is_anime_history_private","is_manga_list_private","is_manga_history_private","user_anime_display_settings","user_manga_display_settings","user_eroge_display_settings","user_anime_list_design_settings","user_manga_list_design_settings","UserList","owner","is_updating","is_scraping_episode_history_from_mal","scraping_episode_history_from_mal_progress","xml_mal_anime_list","anime_watching","anime_completed","anime_on_hold","anime_dropped","anime_plan_to_watch","anime_total_finished","anime_total_entries","anime_mean_score","anime_episodes_watched","anime_mins_spent_watching","anime_started_watching_on","manga_reading","manga_completed","manga_on_hold","manga_dropped","manga_plan_to_read","manga_total_finished","manga_mean_score","manga_total_entries","manga_volumes_read","manga_chapters_read","manga_mins_spent_reading","manga_started_reading_on","UserAnimeEntry","anime","episode_history","watched_episodes","start_date","finish_date","score","times_watched","comments","priority","rewatching","rewatching_episode","date_added","date_last_modified","anime_list","UserMangaEntry","manga","volume_history","chapter_history","read_volumes","read_chapters","times_read","rereading","rereading_chapter","rereading_volume","AnimeData","total_anime_per_season_json","current_anime_season","top_scored_anime","top_upcoming_anime","most_popular_anime","top_70s_anime","top_80s_anime","top_90s_anime","top_2000s_anime","top_2010s_anime","recently_added_anime","recently_downloaded_anime","MangaData","total_manga_per_season_json","current_manga_season","top_scored_manga","top_upcoming_manga","most_popular_manga","top_70s_manga","top_80s_manga","top_90s_manga","top_2000s_manga","top_2010s_manga","recently_added_manga","recently_downloaded_manga","IndustryData","most_popular_characters","recently_added_characters","ErogeData","top_scored_eroge","most_popular_eroge","top_windows_eroge","top_android_eroge","largest_size_eroge","recently_added_eroge","SeasonYear","seasons","year","Anime","title_english","title_synonyms","title_japanese","anime_cover_images","anime_cdn_cover_images","anime_on_server","air_end","air_end_known","air_start","air_start_known","aired_string","airing","approved","background","broadcast","duration","ending_theme","episodes","favorites","franchise","genres_csv","licensor","mal_id","mal_link","members","minutes_per_episode","opening_theme","popularity","premiered","producer","rank","rating","scored_by","source","studio","synopsis","total_time_mins","uuid_name","anime_roles","main_characters","all_characters","anime_relations","VALID_ANIME_RELATIONS","VALID_ANIME_RELATION_NAMES","ANIME_SHORT_STATUS","label","color","MANGA_SHORT_STATUS","AnimeOnServer","additional_dubs","additional_info","additional_subtitles","arabic_dub","arabic_sub","bulgarian_dub","bulgarian_sub","catalan_dub","catalan_sub","chinese_dub","chinese_sub","czech_dub","czech_sub","danish_dub","danish_sub","downloading","dutch_dub","dutch_sub","english_dub","english_sub","english_subs","extract_subs","finnish_dub","finnish_sub","franchise_folder_name","french_dub","french_sub","german_dub","german_sub","greek_dub","greek_sub","hebrew_dub","hebrew_sub","hungarian_dub","hungarian_sub","incomplete","incomplete_progress","indonesian_dub","indonesian_sub","italian_dub","italian_sub","japanese_dub","japanese_sub","korean_dub","korean_sub","main_torrent_info","malay_dub","malay_sub","norwegian_dub","norwegian_sub","persian_dub","persian_sub","polish_dub","polish_sub","portuguese_dub","portuguese_sub","requiem","romanian_dub","romanian_sub","russian_dub","russian_sub","shared_torrent_with","size_on_HDD_GB","slovak_dub","slovak_sub","spanish_dub","spanish_sub","swedish_dub","swedish_sub","thai_dub","thai_sub","torrent_file","torrent_hash","torrent_magnet","turkish_dub","turkish_sub","video_resolution","vietnamese_dub","vietnamese_sub","AnimeFranchise","cover_image","total_titles","top_members","total_members","top_score","average_score","total_minutes","total_episodes","anime_franchise","Manga","active_image_name","anidb_image_url","ann_image_url","authors","chapters","image_url","manga_cover_images","manga_cdn_cover_images","manga_on_server","published_string","publishing","related","serialization","volumes","manga_roles","manga_relations","VALID_MANGA_RELATIONS","VALID_MANGA_RELATION_NAMES","Character","character_cover_images","character_cdn_cover_images","character_name","nickname","short_name","description","voice_actors","role","anime_roles_defined","manga_roles_defined","Person","person_cover_images","person_cdn_cover_images","person_name","given_name","family_name","alternative_names","birthday","website","more_info","has_roles","voice_actor_roles","voice_actor_anime_roles","anime_staff_positions","anime_staff_positions_roles","published_manga","published_manga_roles","Eroge","date_updated","download_url","eroge_cover_images","eroge_screenshots","game_location","game_url","eroge_name","rated_by","scraped_from","size","CoverImages","image","CDNCoverImages","thumbnail_url","width","height","FiltersPreset","preset_name","filters","AnimeDataStatistics","anime_data","total_anime","total_anime_deleted_mal","total_anime_pending_mal","total_anime_downloaded","total_anime_downloading","total_downloaded_size","mean_score","total_quality_2160p","total_quality_1080p","total_quality_960p","total_quality_720p","total_quality_576p","total_quality_560p","total_quality_540p","total_quality_528p","total_quality_480p","total_quality_396p","total_quality_360p","total_quality_288p","total_quality_240p","total_original_anime","total_original_anime_mean","total_anime_from_light_novel","total_anime_from_light_novel_mean","total_anime_from_music","total_anime_from_music_mean","total_anime_from_manga","total_anime_from_manga_mean","total_anime_from_other","total_anime_from_other_mean","total_anime_from_visual_novel","total_anime_from_visual_novel_mean","total_anime_from_book","total_anime_from_book_mean","total_anime_from_game","total_anime_from_game_mean","total_anime_from_web_manga","total_anime_from_web_manga_mean","total_anime_from_novel","total_anime_from_novel_mean","total_anime_from_picture_book","total_anime_from_picture_book_mean","total_anime_from_card_game","total_anime_from_card_game_mean","total_anime_from_4_kom_manga","total_anime_from_4_kom_manga_mean","total_anime_from_digital_manga","total_anime_from_digital_manga_mean","total_anime_from_radio","total_anime_from_radio_mean","total_movie","total_music","total_ona","total_ova","total_special","total_tv","total_finished_airing","total_currently_airing","total_not_yet_aired","total_rated_g","total_rated_pgc","total_rated_pg13","total_rated_r","total_rated_r_plus","total_rated_rx","total_rated_none","total_genre_action","total_genre_adventure","total_genre_cars","total_genre_comedy","total_genre_dementia","total_genre_demons","total_genre_drama","total_genre_ecchi","total_genre_fantasy","total_genre_game","total_genre_harem","total_genre_hentai","total_genre_historical","total_genre_horror","total_genre_josei","total_genre_kids","total_genre_magic","total_genre_martial_arts","total_genre_mecha","total_genre_military","total_genre_music","total_genre_mystery","total_genre_parody","total_genre_police","total_genre_psychological","total_genre_romance","total_genre_samurai","total_genre_school","total_genre_sci_fi","total_genre_seinen","total_genre_shoujo","total_genre_shoujo_ai","total_genre_shounen","total_genre_shounen_ai","total_genre_slice_of_life","total_genre_space","total_genre_sports","total_genre_super_power","total_genre_supernatural","total_genre_thriller","total_genre_vampire","total_genre_yaoi","total_genre_yuri","anime_achievement_romance_thresholds","anime_achievement_romance_info","anime_achievement_classics_thresholds","anime_achievement_classics_info","anime_achievement_pervert_thresholds","anime_achievement_pervert_info","anime_achievement_dementia_psychological_thresholds","anime_achievement_dementia_psychological_info","anime_achievement_horror_thriller_thresholds","anime_achievement_horror_thriller_info","anime_achievement_mystery_thresholds","anime_achievement_mystery_info","AchievementInfo","requirement","tier_1","tier_2","tier_3","tier_4","AchievementTier","UserAnimeDisplaySettingsSchema","cards","mins_per_ep","mal_score","aired","UserMangaDisplaySettingsSchema","UserErogeDisplaySettingsSchema","hg_score","Requiem","valid","scrape_threshold","seasonal_threshold","update_threshold","mal_session_expired","mal_cookie_malhlogsessid","mal_cookie_malsessionid","mal_anime_in_a_row","mal_anime_scrape_time","mal_anime_update_time","mal_anime_seasonal_update_time","last_mal_anime_scrape","last_mal_anime_update","last_mal_anime_seasonal_update","mal_anime_updating_in_progress","mal_manga_in_a_row","mal_manga_scrape_time","mal_manga_update_time","mal_manga_seasonal_update_time","last_mal_manga_scrape","last_mal_manga_update","last_mal_manga_seasonal_update","mal_manga_updating_in_progress","mal_characters_in_a_row","mal_characters_scrape_time","mal_characters_update_time","last_mal_characters_scrape","last_mal_characters_update","mal_characters_updating_in_progress","mal_people_in_a_row","Target","target","branch","active","end_threshold","scrape_time","update_time","seasonal_update_time","last_scrape","last_update","last_seasonal_update","active_scrape","history","Report","active_target","history_of_target","finish_threshold","target_url","images_folder","main_file","started_id","finished_id","code_404","code_429","code_other","total_added","total_removed","progress","eta_seconds","message","other_info","operation_duration_sec","finished","error","datetime_created","datetime_finished","StorageDisk","loadSounds","playClickSound","playHoverSound","playExpand3Sound","playExpand2Sound","playExpandSound","v","store","getState","auth","e","vol","Number","isFinite","Howl","src","volume","play","undefined","playErrorSound","playWarningSound","playDeploySound","letter","total","used","free","initialState","searchable_titles","anime_loading","anime_loaded","anime_data_statistics","anime_data_loaded","anime_on_server_loading","filtered_anime","filtered_anime_loaded","anime_franchise_loading","pending_anime_server_infos","manga_loading","manga_loaded","manga_data","manga_data_loaded","filtered_manga","filtered_manga_loaded","createMessage","msg","payload","clearMessage","returnErrors","cleanErrors","getUser","dispatch","axios","get","API_GET_USER","tokenConfig","then","res","data","catch","err","response","authUser","updateUserDisplaySettingsStore","settings","updateUserListDesignSettingsStore","token","config","headers","AnimeFilterNames","season","user_list_pk","user_list_filter","MangaFilterNames","ErogeFilterNames","CharactersFilterNames","PeopleFilterNames","FilterLabels","FilterSchema","filter_name","content","marks","max","min","FilterSchemaType","standard","component","wide","slider","setCookieAnimeFilters","value","page_type","setCookieMangaFilters","hasOwnProperty","Object","prototype","isEmpty","obj","length","key","call","formatContentDateByKnown","date","known_date","str","indexOf","moment","format","getBrowseGridListCols","offset","innerWidth","formatBytes","terabyte","gigabyte","toFixed","Math","ceil","getSeasonLabelFromSeasonNumber","getTitleCoverImage","cdn_cover_images","cover_images","thumbnail","img_url","len_cdn_images","len_images","largest","x","userTitlePriorityNumberToText","REFERENCE","TODAY","clone","startOf","YESTERDAY","subtract","A_WEEK_OLD","A_MONTH_OLD","SIX_MONTHS_OLD","A_YEAR_OLD","TWO_YEARS_OLD","getAnime","API_GET_ONE_ANIME","cancelAnimeLoading","getAnimeFranchise","API_GET_ANIME_FRANCHISE","filterAnime","page","list","loading","save_cookie","pagination","params","setAnimeFilterParams","setAnimeSeasonParams","replace","setAnimeListParams","isNaN","getPendingAnimeServerInfos","join","getManga","API_GET_ONE_MANGA","filterManga","setMangaFilterParams","setMangaSeasonParams","setMangaListParams","getEroge","API_GET_ONE_EROGE","filterEroge","no_loading","setErogeFilterParams","editUserAboutMeBBCode","bbcode","formData","FormData","append","post","getUserList","API_GET_USER_LIST","getUserAnimeEntry","addAnimeEntry","entryInfo","body","JSON","stringify","updateAnimeEntry","entry_info","put","updateAnimeEpisode","API_USER_ANIME_UPDATE_EPISODE","deleteAnimeEntry","delete","deleteAnimeHistoryEntry","history_id","anime_id","getUserMangaEntry","addMangaEntry","updateMangaEntry","updateMangaVolume","API_USER_MANGA_UPDATE_VOLUME","updateMangaChapter","API_USER_MANGA_UPDATE_CHAPTER","deleteMangaEntry","deleteMangaVolumeChapterHistoryEntry","manga_id","url","API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY","getLoggedInUserAnimeEntryStatuses","getLoggedInUserMangaEntryStatuses","addToFavorites","toLowerCase","API_ADD_TO_FAVORITES","removeFromFavorites","API_REMOVE_FROM_FAVORITES","setUserTitleDisplaySettings","update","api_url","dispatch_type","setUserListDesignSettings","localStorage","getItem","initial_auth","user_loading","user_authenticated","visited_user_loaded","visited_user","redirect_url","open_applications_status","characters_loading","character","characters_loaded","filtered_characters","filtered_characters_loaded","eroge_loading","eroge","eroge_loaded","filtered_eroge","filtered_eroge_loaded","eroge_data","eroge_data_statistics","eroge_data_loaded","FILTER_PEOPLE_INITIAL_VALUES","loaded_cookies","Cookies","set","new_anime_values","parse","new_manga_values","new_characters_values","new_people_values","new_eroge_values","eroge_filters","loadCookies","update_anime_filter_state","state","action","update_manga_filter_state","all_users","users_loading","all_users_loaded","entry_loading","user_anime_entry","user_anime_entry_loaded","user_manga_entry","user_manga_entry_loaded","uploading_file","user_list","user_list_loading","user_statistics_loading","user_anime_statistics","user_manga_statistics","user_info_loading","user_anime_history","user_manga_history","anime_filter_presets","manga_filter_presets","eroge_filter_presets","selected_anime_preset","selected_manga_preset","selected_eroge_preset","user_anime_entry_statuses","user_manga_entry_statuses","user_achievements_loading","user_achievements","requiem_is_loading","targets","active_reports","reports","news","storage","torrent_progress","active_torrents","getCharacter","API_GET_ONE_CHARACTER","filterCharacters","setCharactersFilterParams","people_loading","person","people_loaded","people_data","people_data_statistics","people_data_loaded","filtered_people","filtered_people_loaded","industry_data","industry_data_loading","industry_data_statistics","industry_data_loaded","combineReducers","cookies","updated_user","assign","setItem","removeItem","users","current_statuses","current_manga_statuses","this_user_list","current_settings","current_anime_entry","current_manga_entry","errors","success","reports_is_loading","news_is_loading","anime_achievement_thresholds","characters","people","industry","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INDEX","NOT_FOUND","HOME","REQUIEM_HOME","ADMIN","ADMIN_EDIT_ANIME","ADMIN_EDIT_MANGA","ADMIN_EDIT_CHARACTER","ADMIN_EDIT_EROGE","ADMIN_EDIT_PERSON","LOGIN","REGISTER","SETTINGS","BBCODE_EDITOR","PROFILE","USER_ANIME_LIST","USER_MANGA_LIST","USER_EROGE_LIST","USER_ANIME_STATISTICS","USER_ANIME_HISTORY","USER_MANGA_HISTORY","ANIME_HOME","ANIME_BROWSE","ANIME_SEASONS","ANIME_SEASON_DISPLAY","ANIME_FRANCHISES","ANIME_DISPLAY","ANIME_FRANCHISE_DISPLAY","MANGA_HOME","MANGA_BROWSE","MANGA_SEASONS","MANGA_SEASON_DISPLAY","MANGA_FRANCHISES","MANGA_DISPLAY","CHARACTERS_HOME","CHARACTERS_BROWSE","CHARACTERS_DISPLAY","PEOPLE_BROWSE","PERSON_DISPLAY","EROGE_HOME","EROGE_BROWSE","EROGE_DISPLAY","AnimeMenu","props","show","onLeave","className","style","pointerEvents","onMouseLeave","to","onMouseEnter","onClick","icon","faHome","faSearch","faCalendarAlt","faSitemap","MangaMenu","CharactersMenu","ErogeMenu","AuthMenu","user_id","faThList","faChartLine","faCog","faSignOutAlt","STYLE","top","left","useStyles","makeStyles","theme","root","flexGrow","zIndex","grow","appBar","toolbar","minHeight","marginRight","spacing","fontFamily","fontVariant","userSelect","menuButton","fontSize","menuButtonLink","textDecoration","menuLinks","sectionDesktop","display","breakpoints","up","sectionMobile","MenuAppBar","classNames","superuser","classes","React","useState","profileAnchorEl","animeAnchorEl","setAnimeAnchorEl","mobileAnchorEl","setMobileAnchorEl","isAnimeOpen","Boolean","isMobileMenuOpen","desktopAnimeMenu","setDesktopAnimeMenu","desktopMangaMenu","setDesktopMangaMenu","desktopCharactersMenu","setDesktopCharactersMenu","desktopErogeMenu","setDesktopErogeMenu","desktopAuthMenu","setDesktopAuthMenu","handleAnimeClose","handleMobileClose","onDesktopMenuLeave","onDesktopMenuEnter","menuName","animeMobileMenu","renderAnimeMenu","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","onClose","MenuItem","renderMobileMenu","event","currentTarget","Button","aria-label","aria-controls","aria-haspopup","document","addEventListener","navbar","getElementById","scrollY","classList","add","remove","AppBar","position","Toolbar","IconButton","edge","Typography","variant","onMouseOver","href","faUser","CyberNavbar","this","Component","connect","CyberFooter","margin","marginTop","blur","bgImage","bgImageAlt","strength","alt","Loading","text","block","no_text","viewBox","fill","stroke","strokeWidth","points","toUpperCase","CyberButton","disabled","children","CyberLink","PreLoadImage","loaded","setLoaded","onLoad","LoadGifs","console","log","opacity","map","genre","getPerson","API_GET_ONE_PERSON","filterPeople","setPeopleFilterParams","scrapeUpdateTitleApiUrl","API_REQUIEM_UPDATE_ANIME_MAL","API_REQUIEM_UPDATE_MANGA_MAL","API_REQUIEM_UPDATE_CHARACTER_MAL","API_REQUIEM_UPDATE_PERSON_MAL","API_REQUIEM_UPDATE_EROGE_HENTAIGAMER","scrapeUpdateTitle","getStorageInfo","deleteAnimeServerInfoAndTorrents","API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS","openAnimeFolder","API_OPEN_ANIME_FOLDER","getBytesToSize","getTime","sec","hrs","floor","seconds","result","round","getProgress","getSpeed","speed","TorrentProgressInfo","status_icon","torrent","days","parseInt","utc","hours","minutes","eta_str","faArrowDown","faArrowUp","faPause","faSpinner","faBan","faClock","faHdd","faDownload","faUpload","faPuzzlePiece","faUsers","faInfinity","colSpan","LinearProgress","GoToPageDialog","current_page","total_pages","goToPage","GoToPageSchema","Yup","shape","page_number","required","Dialog","aria-labelledby","DialogTitle","initialValues","validationSchema","onSubmit","values","setSubmitting","isSubmitting","touched","handleChange","handleBlur","TextField","name","onChange","onBlur","helperText","News","arguments","closePageDialog","bind","page_dialog_open","getNews","setState","news_results","Grid","container","i","item","xs","Pagination","siblingCount","particles_params","Home","updateGridListCols","gridlist_cols","scrollTo","getAllUsers","GridList","cellHeight","cols","GridListTile","ProfileModel","compareByStat","a","b","first","second","comparison","getDataSources","statistics","stat","meanScore","stat_data","mean_score_data","labels","push","datasets","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","borderWidth","maintainAspectRatio","responsive","tooltips","mode","elements","line","scales","yAxes","gridLines","ticks","stepSize","AnimeStatistics","getAnimeDataWithStatistics","data_types","hoverColor","getDataTypes","data_sources","data_sources_options","data_statuses","data_rated","getDataRated","data_genres","getDataGenres","data_qualities","getDataQualities","data_years","parsed_data","parsed_data_keys","keys","element","getDataYears","Divider","xl","md","lg","options","CopyTextToClipboard","setOpen","handleTooltipClose","ClickAwayListener","onClickAway","Tooltip","PopperProps","disablePortal","disableFocusListener","disableHoverListener","disableTouchListener","TabPanel","index","other","hidden","Box","p","DisplayTabs","tabs","useTheme","setValue","Tabs","newValue","indicatorColor","textColor","tab","Tab","axis","direction","onChangeIndex","dir","AnimeEntryModalForm","handleClickOpen","handleClose","edit","initial_values","getUserAnimeEntryFormInitialValues","faEdit","faPlus","DialogContent","UserAnimeEntryForm","NONE","Display","getTitle","param_id","getUserTitleStatus","prevProps","prevState","snapshot","display_title","title_loaded","formatTitle","tabs_margin","primary_set","primary_set_wide","secondary_set","marginBottom","AdminModalForms","UserModalForms","entry","user_title_status","title_1","title_2","title_3","info_set","info","db_info_set","users_info_set","getUserTitleStatusSummary","title_loading","getSynopsys","synopsys","GeneralTab","Grow","in","timeout","DisplayVoiceActors","formatted","split","expand","setExpand","faExpandArrowsAlt","getDescription","plugins","reactPreset","images","original","items","CharactersTab","getAllCharactersForAnime","API_GET_ALL_CHARACTERS_FOR_ANIME","getAllCharactersForManga","API_GET_ALL_CHARACTERS_FOR_MANGA","RelationsTab","getRelationsForManga","user_status","relation_name","y","API_GET_RELATIONS_FOR_MANGA","DownloadTorrentForm","handleAddIdToExtraIds","clearExtraIds","toggleAddExtra","extra","extra_ids","splice","field_names","disk","files","magnet","downloadTorrent","setFieldValue","setValues","InputLabel","Select","labelId","Checkbox","inputProps","autoComplete","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","file","faCheck","faTrash","faPlusCircle","mini","multiline","API_REQUIEM_DOWNLOAD_ANIME_TORRENT","AnimeOnServerForm","toggleExpandLanguages","expand_languages","getAnimeOnServerInfo","CircularProgress","languages","forEach","lang","updateAnimeToServer","alternative_callback","addAnimeToServer","checked","API_GET_ANIME_ON_SERVER","animeInfo","AnimeOnServerModalForm","OpenAnimeFolderButton","faFolder","DeleteAnimeOnServerButton","confirm","ApproveAnimeOnServerButton","approveAnimeOnServer","AdminEditAnimeOnServerButton","faUserEdit","ServerTab","TableContainer","TableBody","TableRow","TableCell","endsWith","Chip","faMagnet","UpdateAnimeEpisodeButton","setLoading","thickness","AnimeEpisodeHistoryModal","faHistory","DialogContentText","DeleteAnimeEpisodeHistoryButton","DialogActions","AddRemoveFromFavorites","initial","isTitleInFavorites","inFavorites","setInFavorites","faStarSolid","faStar","EditBioForm","closeBio","editUserBio","handleSubmit","onKeyPress","shiftKey","preventDefault","ScrapeEpisodeHistoryFromMalForm","closeForm","MALHLOGSESSID","MALSESSIONID","malhlogsessid","malsessionid","ScrapeEpisodeHistoryFromMalDialog","ImportAnimeListFromMal","uploading","accept","multiple","htmlFor","faFileUpload","ImportMangaListFromMal","AddAnimeEntryInstantDropButton","Date","faLevelDownAlt","AddMangaEntryInstantDropButton","FIELD_NAMES","getUserMangaEntryFormInitialValues","UserMangaEntryForm","utils","DateFnsUtils","KeyboardButtonProps","deleteEntry","MangaEntryModalForm","UpdateMangaVolumeButton","UpdateMangaChapterButton","MangaVolumeChapterHistoryModal","DeleteMangaVolumeHistoryButton","DeleteMangaChapterHistoryButton","getRelationsForAnime","API_GET_RELATIONS_FOR_ANIME","TITLES","LOCAL_VALID_ANIME_RELATIONS","FINAL_TREE","compareByAired","now","a_value","b_value","date_a","abs","date_b","compare","getFullAnime","markAnimeAsAdded","isAdded","getChildren","parent_node","z","relation","node","attributes","parent_relation","checkChildrenForFixingSequel","sequel_to_find","node_to_return","fixSequelPriority","parent_anime","in_children","sequel_anime","node_to_fix","TreeBuilder","user_statuses","defaultTranslate","translate","setTranslate","containerRef","useCallback","containerElem","getBoundingClientRect","useCenteredTree","nodeSize","foreignObjectProps","ref","pathFunc","renderCustomNodeElement","rd3tProps","nodeDatum","toggleNode","toString","__rd3t","collapsed","faAngleDoubleDown","faAngleDoubleUp","renderForeignObjectNode","orientation","FranchiseTree","titles","setTitles","reverse","root_node","_continue","check","getRootNode","TreeData","missing","FranchiseTab","DownloadTorrentModalForm","DisplayTorrentProgress","torrent_progress_reading","update_interval","getTorrentProgress","setTimeout","torrent_filters","API_REQUIEM_GET_TORRENT_PROGRESS","VoiceActorRolesTab","getVoiceActorRolesForPerson","containerClassNames","API_GET_VOICE_ACTOR_ROLES_FOR_PERSON","AnimeStaffPositionsTab","getAnimeStaffPositionsForPerson","positions_roles","API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON","PublishedMangaTab","getPublishedMangaForPerson","API_GET_PUBLISHED_MANGA_FOR_PERSON","AnimeStatuses","finished_airing","currently_airing","not_yet_aired","AirOrderTab","updateOrdering","newest_first","faArrowRight","Timeline","align","TimelineItem","TimelineOppositeContent","user_buttons","user_entry_statuses","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","UserScoreBadge","classname","getClassFromScore","UserAnimeEntryStatus","status_classname","UserMangaEntryStatus","checkFavorites","favoriteTitles","currentTitleId","in_favorites","faPlusSquare","faSyncAlt","faInfo","faUserFriends","faCodeBranch","faPlay","faServer","tag","faUserCog","faBookOpen","getTitleNameFromTitle","QuickUserAnimeEntryForm","QuickUserMangaEntryForm","InstantDropTitleButton","title_id","CardUserEditTitleEntry","getUserTitleEntry","getQuickUserTitleEntryForm","hideUserButtons","add_button_title","getUserStatusChip","UserCardButtons","TitleCard","showUserButtons","cssHideUserButtons","img_loaded","show_user_buttons","css_hide_buttons","card_title","user_status_param","design_settings","end_date","link","chipset_header","chipset_one","chipset_two","chipset_three","chipset_four","user_settings","title_type","title_episodes","title_mins_per_ep","title_rating","title_genres","title_mal_score","title_aired","title_status","title_volumes","title_chapters","trim","class_names","container_class_names","backgroundImage","skip_img_preload","chip","horizontalScroll","deltaY","scrollLeft","AnimeCurrentSeason","current_year","getFullYear","current_month","getMonth","current_season","current_season_number","season_filter","addHorizontalScrollEventListener","removeEventListener","removeHorizontalScrollEventListener","season_icon_and_class","faSeedling","faSun","faLeaf","faSnowflake","getIconAndClassFromSeasonNumber","RecentlyAdded","RecentlyDownloaded","TopUpcoming","TopScoredMal","MostPopularMal","Top2010s","Top2000s","Top90s","Top80s","Top70s","a11yProps","TopAnimeTabs","CurrentSeason","TopAnime","AnimeHome","getAnimeDataForHomePage","LoginSchema","password","RegisterSchema","password2","test","parent","RegisterSchemaWithInvitationCode","invitation_code","LoginForm","login","Login","RegisterForm","new_user","register","Register","getOpenApplicationsStatus","setPreset","preset","new_values","setSelectedAnimePreset","setSelectedMangaPreset","setSelectedErogePreset","updateFilterPreset","preset_id","updateAnimeFilterPreset","updateMangaFilterPreset","updateErogeFilterPreset","saveFilterPreset","saveAnimeFilterPreset","saveMangaFilterPreset","saveErogeFilterPreset","deleteFilterPreset","deleteMangaFilterPreset","deleteErogeFilterPreset","getSelectedPreset","PresetFilters","onPresetChange","onPresetNew","onPresetUpdate","onPresetDelete","presets","getResetValuesFromBranch","prompt","faSave","UserDisplaySettingsDialog","UserBrowseAnimeDisplaySettingsDialog","user_display_settings","UserBrowseMangaDisplaySettingsDialog","UserBrowseErogeDisplaySettingsDialog","setCards","setType","setEpisodes","setMinsPerEp","setRating","setGenres","setMalScore","setAired","reset","previous_settings","aria-describedby","faThLarge","setVolumes","setChapters","setCensorship","setLanguage","setPlatforms","setTags","setHgScore","getSliderLabel","label_name","value_2","getGenreImgSrc","img_name","replaceAll","ext","getOrderIcon","order","faSortAmountDown","faSortAmountDownAlt","getOrderValue","TitlesFilter","onGenreEnter","onGenreLeave","onGenreChange","checkFormValuesFromCookies","onReset","title_filters","cookie_filters","genreFilter","img","contains","slice","nextSibling","firstChild","filterTitles","reset_values","uses_presets","active_filters","childNodes","parentNode","changeHeightOfActiveFiltersWrapperOnChange","sm","titles_loading","filtered_titles","faTimes","faUndoAlt","faFilter","main_filters","regular_filters","field","filter","wide_filters","Slider","valueLabelDisplay","order_filters","offsetWidth","setAttribute","AnimeFilters","orderings","concat","anime_filters","filtered_titles_loaded","user_anime_list_display_settings","MangaFilters","manga_filters","user_manga_list_display_settings","ErogeFilters","CharactersFilters","PeopleFilters","getFiltersFromBranch","getItemsPerPageFromBranch","TitleRow","row_title","column_set","formatTitleForRows","scope","BrowseCardsView","items_per_page","BrowseTableView","BrowseTableHead","TableHead","faImage","Browse","getTabName","updateCurrentPage","AnimeBrowse","NonAuthIndexHero","imageSrc","transitionDuration","AuthIndexHero","autoPlay","muted","loop","Index","img_1_loaded","img_2_loaded","listIsEmpty","getData","pie_data","legend","AnimeSimpleChartStats","useSelector","faCalendarTimes","end","faStop","faCircle","MangaSimpleChartStats","FavoriteTitles","limit","parsed","getTitlesFromBranch","XBBCODE","tagList","bbRegExp","pbbRegExp","pbbRegExp2","openTags","closeTags","me","urlPattern","colorNamePattern","colorCodePattern","emailPattern","fontFacePattern","tagsNoParseList","initTags","prop","ii","len","noParse","validChildLookup","validParentLookup","restrictParentsTo","restrictChildrenTo","RegExp","closeTagList","checkParentChildRestrictions","parentTag","bbcodeLevel","tagName","tagParams","tagContents","errQueue","cInfo","errStr","childTag","reTagNames","reTagNamesParts","matchingTags","match","pInfo","lastIndex","matchStr","updateTagDepths","subMatchStr","m1","m2","openTag","closeTag","colorCode","substr","myEmail","faceCode","myUrl","displayContent","mySize","replaceFunct","processedContent","addTags","newtags","process","ret","html","openB","contents","closeB","endTag","innerListTxt","fixStarTag","addBbcodeLevels","output","removeMisalignedTags","addInLineBreaks","escapeHtml","ReactHtmlParser","errorQueue","URL_PATTERN","parseWidthHeightFromParams","w_unit","h_unit","parse_width","parse_height","parseLimitFromParams","parse_limit","new_tags","center","cyberBBCodeParser","bbcode_string","AboutTab","toggleEditorButton","show_editor_button","background_color","backgroundRepeat","repeat","backgroundSize","backgroundPosition","position_1","position_2","position_x","backgroundPositionX","position_y","backgroundPositionY","faTools","getMinsPerDay","total_mins","date1","date2","time_diff","total_days","AnimeTab","Chart","defaults","global","raw","beginAtZero","justify","alignItems","MangaTab","unknown","parseGenreAchievementFromResult","tiers","achievements_info","user_progress","user_tier_1","user_tier_2","user_tier_3","user_tier_4","user_completed","threshold","getActiveGenreDescription","achievement","GenreAchievementSegment","tier_1_value","tier_1_buffer","previous_completed","tier_number","new_threshold","valueBuffer","faCheckCircle","GenreAchievement","AchievementsTab","achievements_loaded","getAnimeAchievementsThresholds","getUserAchievements","clearUserAchievements","genre_achievements","achievement_thresholds","achievements","getUserGenreAchievements","API_GET_USER_ACHIEVEMENTS","ProfileTabs","faTv","faGamepad","faTrophy","UploadProfileImageButton","onUpdateProfile","updateUserProfileImage","loader_classnames","faCamera","getLastLoginLabel","last_login_date","newDate","getTimezoneOffset","getHours","setHours","convertUTCDateToLocalDate","isTimeLessThanAnHourAgo","ONE_HOUR","isTimeLessThanSixHoursAgo","isSame","isYesterday","isAfter","isWithinAWeek","isWithinAMonth","isWithinSixMonths","isWithinAYear","isMoreThanAYear","img_cover_loaded","current_id","updateUserList","ListItem","ListItemText","primary","secondary","button","API_UPDATE_USER_LIST","UserSettings","editBio","finishEditingBio","edit_bio","Switch","ProfileSettings","openBBCodeDialog","closeBBCodeDialog","bbcode_dialog_open","FormControl","muteUnmuteThemeSounds","faVolumeUp","faVolumeMute","ToggleUserAnimeListPrivacyForm","IsPrivate","setIsPrivate","to_private","ToggleUserAnimeHistoryPrivacyForm","ToggleUserMangaListPrivacyForm","ToggleUserMangaHistoryPrivacyForm","ListSettings","openScrapeHistoryDialog","closeScrapeHistoryDialog","scrape_episode_history_dialog_open","scraping_info_reading","scraping_history_info_modal_open","getUserEpisodeHistoryScraperProgress","setInterval","clearInterval","faCloudDownloadAlt","faQuestion","paragraph","fixUserStartAndFinishDateForAnimeEntries","SettingsTabs","Settings","MangaBrowse","AnimeDisplay","MangaDisplay","CharactersBrowse","CharacterDisplay","ErogeBrowse","getSeasonIcon","getTitleData","browseSeasonTitlesFromBranch","getPrevSeasonUrl","prev_year","prev_season","getNextSeasonUrl","next_year","next_season","formatData","display_data","total_titles_per_season_json","getSeasonUrl","BrowseSeasons","data_loaded","BrowseAnimeSeasons","data_loading","BrowseMangaSeasons","NotFound","Alerts","alert","onOpen","withAlert","DisplaySeason","season_num","season_name","faArrowLeft","getDaysFromDate","start","diff","asDays","AnimeListStatusButtons","selected","setSelected","UserListTableHead","list_table_show_images","title_edit_button","list_owner","title_user_score","title_progress","title_priority","title_comments","title_tags","title_started","title_finished","title_added","title_days","title_progress_2","UserListTableRow","list_table_text_bubbles","progress_volumes","progress_chapters","formatTitleForUserListRows","getTitleAndStatusKeysFromBranch","title_key","status_key","MangaListStatusButtons","CSS_FONTS","NumberWithUnitField","key_2","key_1","getInitialUnit","unit","setUnit","classnames","with_units","html_id_prefix","OutlinedInput","labelWidth","endAdornment","InputAdornment","parseFloat","units","unit_choice","SimpleTextField","SelectWithOptionsField","option","ColorPickerField","hex","CheckBoxField","FormControlLabel","control","labelPlacement","UserListDesignSettings","type_cards","results_per_page","list_margin_top","color_dark","about_text","overlay_image","background_image","apply_custom_css","table","title_info","AboutText","header","font_family","margin_top","header_left","header_right","header_font_color","header_font_size","header_align","header_font_style","header_font_variant","header_font_weight","text_left","text_right","text_font_color","text_font_size","text_align","text_font_style","text_font_variant","text_font_weight","CoverImage","object_fit","parallax","border_top_left","border_top_right","border_bottom_left","border_bottom_right","OverlayImage","repeat_x","repeat_y","BackgroundImage","attachment","Cards","round_borders","Table","backdrop_filter_blur","show_images","row_lines","text_bubbles","List","padding_left","padding_right","TitleInfoAnime","user_score","edit_button","started","added","TitleInfoManga","CoverImgTab","BackgroundImgTab","MessageTab","ListTab","volumes_progress","progress_key","progress_label","chapters_progress","OverlayImgTab","setWithUnits","UserListDesignSettingsDialogTabs","scrollButtons","UserListDesignSettingsDialog","setSettings","prevSettings","getTitleAndUserStatusFromBranch","noResult","UserListCardsView","id_key","list_cards_round_borders","padding","list_cards_spacing","UserListTableView","titles_container_styles","list_table_background_color","backdropFilter","list_table_backdrop_filter_blur","list_table_round_borders","list_table_row_lines","getInitialSelected","getUserListResultsPerPageFromBranch","number","list_pk","cards_offset","is_mp4","anime_settings","manga_settings","getUserListDesignSettingsFromBranch","list_type_cards","list_items_per_page","list_color_dark","about_header","about_font_family","about_margin_top","about_header_left","about_header_right","about_header_font_color","about_header_font_size","about_header_align","about_header_font_style","about_header_font_variant","about_header_font_weight","about_text_left","about_text_right","about_text_font_color","about_text_font_size","about_text_align","about_text_font_style","about_text_font_variant","about_text_font_weight","cover_image_show","cover_image_margin_top","cover_image_url","cover_image_object_fit","cover_image_align","cover_image_height","cover_image_width","cover_image_parallax","cover_image_border_top_left","cover_image_border_top_right","cover_image_border_bottom_left","cover_image_border_bottom_right","overlay_image_show","overlay_image_url","overlay_image_size","overlay_image_position_x","overlay_image_position_y","overlay_image_repeat_x","overlay_image_repeat_y","background_image_show","background_image_url","background_image_size","background_image_attachment","background_image_position_x","background_image_position_y","background_image_repeat_x","background_image_repeat_y","list_titles_margin_top","list_titles_padding_left","list_titles_padding_right","cover_border_top_left","cover_border_top_right","cover_border_bottom_left","cover_border_bottom_right","formatUserListDesignSettingsFromBranch","paddingLeft","paddingRight","background_style","paddingTop","background_video_style","objectPosition","backgroundAttachment","backgroundRepeatX","backgroundRepeatY","textAlign","fontStyle","fontWeight","objectFit","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","PrivatePage","AnimeList","compareByTotal","compareByMean","Statistics","getFavoriteGenres","sortFavoriteGenres","favorite_genres_sorted_by","data_favorite_genres","data_favorite_genres_options","updated","updateAndGetUserAnimeStatistics","data_and_options","stat_mean_score","getDataFavoriteGenres","data_completed_history","hours_watching","data_rated_vs_time_spent","data_rated_vs_episode_count","data_rated_vs_episode_count_options","data_favorite_years","data_favorite_years_options","data_favorite_types","data_favorite_types_options","getDataScoreDistribution","getDataRatedVsTimeSpent","months","sum","month_keys","bordered","month","getTableHistory","getDataRatedVsEpisodeCount","getDataFavoriteYears","getDataFavoriteTypes","API_UPDATE_AND_GET_USER_ANIME_STATISTICS","displayHistory","user_history","lastId","newId","lastMonth","lastDate","lastYear","nextYear","nextMonth","nextDate","entries","timestamp","last","lastHistory","DisplayUserHistory","getVisitedUserAnimeHistory","visited_user_id","getVisitedUserMangaHistory","API_GET_VISITED_USER_ANIME_HISTORY","API_GET_VISITED_USER_MANGA_HISTORY","History","isHistoryPrivate","MangaList","FranchisesHome","TopMangaTabs","TopManga","MangaHome","getMangaDataForHomePage","TopCharacters","CharactersHome","getIndustryDataForHomePage","TopScored","MostPopular","TopWindows","TopAndroid","LargestSize","TopErogeTabs","TopEroge","ErogeHome","getErogeDataForHomePage","PeopleBrowse","PersonDisplay","TEMPLATE_NAME_NONE","TEMPLATE_NAME_DEFAULT","TEMPLATE_NAME_HIGH_CONTRAST","TEMPLATE_NONE_BACKGROUND","TEMPLATE_DEFAULT_BACKGROUND","TEMPLATE_MAL_BACKGROUND","TEMPLATE_HIGH_CONTRAST_BACKGROUND","compareImageObject","BBCodeEditor","updateSelectedPreset","selected_template","updateEditor","updateBackgroundImage","submitAboutMe","BackgroundEditorTab","contaienr","BBCodeEditorTabs","BBCodeEditorTab","attribute","bg_img","editUserAboutMeBackground","user_loaded","isScrapeUpToDate","today","prev","FormatScraperProgress","report","maxValue","minValue","TargetSummary","logo_url","getLogoFromTarget","scrape_up_to_date","seasonal_up_to_date","update_up_to_date","xsDown","useMediaQuery","down","SidePanelItem","selected_tab","setSelectedTab","ListItemIcon","RequiemDrawer","Fragment","SwipeableDrawer","anchor","SidePanelTabs","dashboard","scrapers","torrents","Dashboard","smDown","active_reports_refresh_timeout","TorrentFilter","StorageContainer","TorrentClientFilterButton","filters_key","setTorrentFilters","btn_classname","ActiveTorrents","default_filters","_name","dl_speed","up_speed","remaining","seeds","leeches","eta","checkIfAllSharedTitlesAreApproved","PendingAnime","pending_anime","setCurrentPage","setPageDialogOpen","server_info","SharedTitle","Torrents","get_active_torrents_interval","getActiveTorrentsProgress","interval","total_size","total_free","anime_size","anime_free","getTotalSizeAndFreeSpace","GuestView","AdminView","getTimeoutFromReports","RequiemHome","get_scrapers_progress_interval","getRequiem","getTargets","getScrapersProgress","checkForRedirectUrl","pathname","setRedirectUrl","App","exact","path","render","DisplayFranchise","ErogeDisplay","createMuiTheme","yourRawTheme","ReactDOM","StrictMode","ThemeProvider","template","close","severity","AlertTitle"],"mappings":"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","file":"static/js/main.efa2f4a9.chunk.js","sourcesContent":["// export const CYBER_GENESIS_URL = 'http://127.0.0.1:80';\r\nexport const CYBER_GENESIS_URL = 'https://cybergenesis.pagekite.me';\r\n// export const CYBER_GENESIS_URL = 'https://ae386a726a57.ngrok.io';\r\nexport const CYBER_SPACE_URL = window.location.host;\r\n\r\nexport const BROWSE_ANIME_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_MANGA_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_CHARACTERS_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_EROGE_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_PEOPLE_ITEMS_PER_PAGE = 100;\r\n\r\nexport const TARGET_MAL = 'MyAnimeList'\r\nexport const TARGET_ANIDB = 'AniDB'\r\nexport const TARGET_HENTAIGAMER = 'HentaiGamer'\r\nexport const TARGET_NYAA = 'Nyaa.si'\r\n\r\nexport const TYPE_SCRAPE = 'Scrape'\r\nexport const TYPE_UPDATE = 'Update'\r\nexport const TYPE_UPDATE_SINGLE = 'Single'\r\nexport const TYPE_UPDATE_SEASONAL = 'Seasonal'\r\nexport const TYPE_DOWNLOAD = 'Download'\r\nexport const TYPE_DEBUG_SINGLE = 'Debug-Single'\r\n\r\n\r\nexport const store_reducers = {\r\n    cookies: 'cookies',\r\n    auth: 'auth',\r\n    users: 'users',\r\n    errors: 'errors',\r\n    success: 'success',\r\n    anime: 'anime',\r\n    manga: 'manga',\r\n    characters: 'characters',\r\n    eroge: 'eroge',\r\n};\r\n\r\nexport const store_reducer_users = {\r\n    all_users: 'all_users',\r\n    users_loading: 'users_loading',\r\n    all_users_loaded: 'all_users_loaded',\r\n    entry_loading: 'entry_loading',\r\n    user_anime_entry: 'user_anime_entry',\r\n    user_anime_entry_loaded: 'user_anime_entry_loaded',\r\n    user_manga_entry: 'user_manga_entry',\r\n    user_manga_entry_loaded: 'user_manga_entry_loaded',\r\n    uploading_file: 'uploading_file',\r\n};\r\n\r\nexport const store_reducer_cookies = {\r\n    show_filters: 'show_filters',\r\n    anime_browse_filters: 'anime_browse_filters',\r\n    anime_season_filters: 'anime_season_filters',\r\n    anime_list_filters: 'anime_list_filters',\r\n    manga_browse_filters: 'manga_browse_filters',\r\n    manga_season_filters: 'manga_season_filters',\r\n    manga_list_filters: 'manga_list_filters',\r\n    characters_filters: 'characters_filters',\r\n    eroge_browse_filters: 'eroge_browse_filters',\r\n};\r\n\r\n// Content Branches\r\nexport const BRANCH_ANIME = 'Anime';\r\nexport const BRANCH_MANGA = 'Manga';\r\nexport const BRANCH_EROGE = 'Eroge';\r\nexport const BRANCH_PEOPLE = 'People';\r\nexport const BRANCH_CHARACTERS = 'Characters';\r\n\r\n// Filter Types\r\nexport const TYPE_BROWSE = 'Browse';\r\nexport const TYPE_LIST = 'List';\r\nexport const TYPE_SEASON = 'Season';\r\n\r\n// Tab titles\r\nexport const CYBER_GENESIS_TAB_NAME = 'Cyber Genesis';\r\nexport const PROFILE_TAB_NAME = 'Profile';\r\nexport const ANIME_TAB_NAME = 'Anime';\r\nexport const ANIME_BROWSE_TAB_NAME = 'Browse Anime';\r\nexport const MANGA_BROWSE_TAB_NAME = 'Browse Manga';\r\nexport const EROGE_TAB_NAME = 'Eroge';\r\nexport const EROGE_BROWSE_TAB_NAME = 'Browse Eroge';\r\nexport const PEOPLE_BROWSE_TAB_NAME = 'Browse People';\r\nexport const CHARACTERS_TAB_NAME = 'Characters';\r\nexport const INDUSTRY_TAB_NAME = 'Industry';\r\nexport const CHARACTERS_BROWSE_TAB_NAME = 'Browse Characters';\r\nexport const MANGA_TAB_NAME = 'Manga';\r\nexport const BROWSE_TAB_NAME = 'Browse';\r\nexport const FRANCHISES_TAB_NAME = 'Franchises';\r\nexport const SEASONS_TAB_NAME = 'Seasons';\r\nexport const SETTINGS_TAB_NAME = 'Settings';\r\nexport const NOT_FOUND_404_TAB_NAME = 'Code: 404';\r\nexport const REGISTER_TAB_NAME = 'Register';\r\n\r\n// Colors\r\nexport const COLOR_PRIMARY = '#156BB7';\r\nexport const COLOR_SECONDARY = '#E14ECA';\r\nexport const COLOR_INFO = '#00FFFF';\r\nexport const COLOR_SUCCESS = '#00A057';\r\nexport const COLOR_WARNING = '#D09C00';\r\nexport const COLOR_DANGER = '#FF0000';\r\nexport const COLOR_GRAY = '#7B7B7B';\r\nexport const COLOR_WHITE = '#FFFFFF';\r\n\r\nexport const LANGUAGES = ['Japanese', 'English', 'Russian', 'Portuguese', 'German', 'French', 'Italian', 'Spanish',\r\n    'Chinese', 'Arabic', 'Korean', 'Malay', 'Polish', 'Turkish', 'Swedish', 'Danish', 'Finnish', 'Dutch', 'Norwegian',\r\n    'Bulgarian', 'Greek', 'Hebrew', 'Romanian', 'Thai', 'Vietnamese', 'Czech', 'Slovak', 'Persian', 'Indonesian',\r\n    'Catalan', 'Hungarian'];\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_ANIME_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        anime_on_server__english_sub: false,\r\n        anime_on_server__english_dub: false,\r\n        anime_on_server__japanese_dub: false,\r\n        anime_on_server__japanese_sub: false,\r\n        episodes_range: [0, 53],\r\n        length_range: [0, 61],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        rating_short: [],\r\n        video_quality: [],\r\n        audio_channel: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\nexport const ANIME_ORDERINGS = [\r\n    'members', 'score', 'id', 'type', 'episodes', 'scored_by', 'favorites', 'rating', 'air_start', 'air_end'\r\n];\r\nexport const USER_ANIME_ORDERINGS = [\r\n    'watched_episodes', 'my_score', 'times_watched', 'priority', 'start_date', 'finish_date'\r\n];\r\nexport const ANIME_TYPES = ['TV', 'Movie', 'OVA', 'Special', 'Music', 'ONA'];\r\nexport const ANIME_STATUSES = ['Finished Airing', 'Currently Airing', 'Not yet aired'];\r\nexport const ANIME_RATING_SHORT = ['G', 'PG-C', 'PG-13', 'R', 'R+', 'Rx'];\r\nexport const ANIME_VIDEO_QUALITIES = ['2160p', '1080p', '720p', '580p', '480p', '360p', '240p'];\r\nexport const USER_ANIME_STATUSES_ARRAY = ['Watching', 'Completed', 'On Hold', 'Dropped', 'Plan to Watch'];\r\nexport const USER_MANGA_STATUSES_ARRAY = ['Reading', 'Completed', 'On Hold', 'Dropped', 'Plan to Read'];\r\nexport const ANIME_AUDIO_CHANNELS = ['2.0', '5.1'];\r\nexport const ANIME_GENRES = [\r\n    'Comedy', 'Drama', 'Romance', 'School', 'Slice of Life', 'Adventure', 'Ecchi', 'Fantasy', 'Magic', 'Mystery',\r\n    'Shoujo Ai', 'Action', 'Mecha', 'Military', 'Police', 'Sci-Fi', 'Parody', 'Shounen', 'Super Power', 'Supernatural',\r\n    'Vampire', 'Seinen', 'Shoujo', 'Historical', 'Samurai', 'Harem', 'Psychological', 'Shounen Ai', 'Space', 'Josei',\r\n    'Dementia', 'Thriller', 'Sports', 'Game', 'Music', 'Horror', 'Kids', 'Martial Arts', 'Hentai', 'Demons', 'Cars',\r\n    'Yaoi', 'Yuri'\r\n].sort();\r\nexport const USER_ANIME_STATUSES = {\r\n    watching: 'Watching',\r\n    completed: 'Completed',\r\n    on_hold: 'On Hold',\r\n    dropped: 'Dropped',\r\n    plan_to_watch: 'Plan to Watch',\r\n};\r\nexport const USER_MANGA_STATUSES = {\r\n    reading: 'Reading',\r\n    completed: 'Completed',\r\n    on_hold: 'On Hold',\r\n    dropped: 'Dropped',\r\n    plan_to_read: 'Plan to Read',\r\n};\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_MANGA_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        volumes_range: [0, 53],\r\n        chapters_range: [0, 53],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\nexport const MANGA_ORDERINGS = [\r\n    'members', 'score', 'id', 'type', 'volumes', 'chapters', 'scored_by', 'favorites', 'air_start', 'air_end'\r\n];\r\nexport const USER_MANGA_ORDERINGS = [\r\n    'read_volumes', 'read_chapters', 'my_score', 'times_read', 'start_date', 'finish_date'\r\n];\r\nexport const MANGA_TYPES = ['Manga', 'Manhwa', 'Novel', 'Doujinshi', 'One-shot', 'Manhua', 'OEL', 'LightNovel'];\r\nexport const MANGA_STATUSES = ['Publishing', 'Finished', 'Not yet published', 'Discontinued', 'On Hiatus'];\r\nexport const MANGA_GENRES = [\r\n    'Fantasy', 'Sci-Fi', 'Comedy', 'Drama', 'Romance', 'School', 'Slice of Life', 'Josei', 'Hentai', 'Doujinshi',\r\n    'Yaoi', 'Historical', 'Shoujo Ai', 'Shoujo', 'Supernatural', 'Seinen', 'Shounen', 'Shounen Ai', 'Action',\r\n    'Adventure', 'Ecchi', 'Harem', 'Mystery', 'Vampire', 'Gender Bender', 'Magic', 'Military', 'Psychological',\r\n    'Demons', 'Horror', 'Martial Arts', 'Game', 'Thriller', 'Sports', 'Yuri', 'Parody', 'Space', 'Super Power',\r\n    'Mecha', 'Kids', 'Police', 'Samurai', 'Music', 'Dementia', 'Cars'\r\n].sort();\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_EROGE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        type: [],\r\n        downloaded: '',\r\n        platforms: [],\r\n        language: [],\r\n        censorship: [],\r\n        tags: [],\r\n        ordering: '-date_added',\r\n    };\r\n}\r\nexport const EROGE_ORDERINGS = ['rating', 'rated_by', 'size', 'date_added'];\r\nexport const EROGE_TYPES = ['Adventure', 'Visual Novel', 'RPG', 'Puzzle', 'Simulation'];\r\nexport const EROGE_PLATFORMS = ['Android', 'Windows'];\r\nexport const EROGE_CENSORSHIPS = ['Censored', 'Uncensored', 'Mosaic'];\r\nexport const EROGE_LANGUAGES = ['English', 'Japanese'];\r\nexport const EROGE_TAGS = [\r\n    '3D', 'Female Protagonist', 'Animated', 'Futanari', 'Incest', 'Corruption', 'Harem', 'BDSM', 'Big Breasts', 'Milf',\r\n    'Bestiality', 'Romance', 'Pregnancy', 'Male Protagonist', 'Group Sex', 'School', 'NTR', 'Mind Control', 'Femdom',\r\n    'Exhibitionism', 'Yuri', 'Fantasy', 'Blackmail', 'Tentacles', 'Rape', 'Urination', 'Voyeurism', 'Witches',\r\n    'Seduction', 'Peeping', 'Hypnosis', 'Prostitution', 'Gangbang', 'Bukkake', 'Dark Skin', 'Voyeur', 'Netori', 'Touch',\r\n    'Paizuri', 'Footjob', 'Parody', 'Combat', 'Defloration', 'Cunnilingus', 'Masturbation', 'Tiny Breasts', 'Blow Job',\r\n    'Big Boobs', 'Nukige', 'Stripping'\r\n];\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_CHARACTERS_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\nexport const CHARACTERS_ORDERINGS = ['favorites', 'id'];\r\n\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_PEOPLE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\nexport const PEOPLE_ORDERINGS = ['favorites', 'id', 'birthday'];\r\n\r\n\r\nexport function getPriorityLabel(priority) {\r\n    switch (priority) {\r\n        case 0:\r\n            return 'Very Low';\r\n        case 1:\r\n            return 'Low';\r\n        case 2:\r\n            return 'Medium';\r\n        case 3:\r\n            return 'High';\r\n        case 4:\r\n            return 'Very High';\r\n        default:\r\n            return 'Very Low'\r\n    }\r\n}\r\n","import {CYBER_GENESIS_URL} from \"../globals\";\r\n\r\nexport const BASE_URL = CYBER_GENESIS_URL;\r\n\r\n\r\n// AUTH\r\nexport const API_GET_OPEN_APPLICATIONS_STATUS = `${BASE_URL}/api/cyber-admin/open_applications_status`;\r\nexport const API_AUTH_USER = `${BASE_URL}/api/auth/user`;\r\nexport const API_LOGIN = `${BASE_URL}/api/auth/login`;\r\nexport const API_REGISTER = `${BASE_URL}/api/auth/register`;\r\nexport const API_LOGOUT = `${BASE_URL}/api/auth/logout/`;\r\nexport function API_GET_USER(id) {\r\n    return `${BASE_URL}/api/users-api/${id}/`;\r\n}\r\n\r\n// USERS\r\nexport const API_GET_ALL_USERS = `${BASE_URL}/api/users-api/`;\r\nexport const API_USER_ANIME_FILTERS_PRESET = `${BASE_URL}/api/anime-filter-preset/`;\r\nexport const API_USER_MANGA_FILTERS_PRESET = `${BASE_URL}/api/manga-filter-preset/`;\r\nexport const API_USER_EROGE_FILTERS_PRESET = `${BASE_URL}/api/eroge-filter-preset/`;\r\nexport const API_CHANGE_USER_PROFILE_IMAGE = `${BASE_URL}/api/profile/change_profile_image/`;\r\nexport const API_IMPORT_MAL_XML_FOR_ANIME_LIST = `${BASE_URL}/api/user-list/upload_anime_list_mal_xml_file/`;\r\nexport const API_IMPORT_MAL_XML_FOR_MANGA_LIST = `${BASE_URL}/api/user-list/upload_manga_list_mal_xml_file/`;\r\nexport const API_EDIT_USER_BIO = `${BASE_URL}/api/profile/edit_bio/`;\r\nexport const API_EDIT_USER_ABOUT_ME_BBCODE = `${BASE_URL}/api/profile/edit_about_me_bbcode/`;\r\nexport const API_EDIT_USER_ABOUT_ME_BACKGROUND = `${BASE_URL}/api/profile/edit_about_me_background/`;\r\nexport const API_SCRAPE_EPISODE_HISTORY_FROM_MAL = `${BASE_URL}/api/user-list/scrape_and_update_user_episode_history_from_mal/`;\r\nexport const API_CHANGE_CYBER_SOUND_STATUS = `${BASE_URL}/api/profile/change_cyber_sound_status/`;\r\nexport const API_USER_ANIME_ENTRY_NOID = `${BASE_URL}/api/anime-entry/`;\r\nexport const API_USER_MANGA_ENTRY_NOID = `${BASE_URL}/api/manga-entry/`;\r\nexport const API_USER_ANIME_ENTRY_STATUSES = `${BASE_URL}/api/user-list/user_anime_statuses/`;\r\nexport const API_USER_MANGA_ENTRY_STATUSES = `${BASE_URL}/api/user-list/user_manga_statuses/`;\r\nexport const API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS = `${BASE_URL}/api/user-list/get_user_episode_history_scrape_progress`;\r\nexport const API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES = `${BASE_URL}/api/anime-entry/fix_user_start_and_finished_date`;\r\nexport const API_SET_PROFILE_TO_PRIVATE = `${BASE_URL}/api/profile/set_profile_to_private`;\r\nexport const API_SET_PROFILE_TO_PUBLIC = `${BASE_URL}/api/profile/set_profile_to_public`;\r\nexport const API_SET_ANIME_LIST_TO_PRIVATE = `${BASE_URL}/api/profile/set_anime_list_to_private`;\r\nexport const API_SET_ANIME_LIST_TO_PUBLIC = `${BASE_URL}/api/profile/set_anime_list_to_public`;\r\nexport const API_SET_ANIME_HISTORY_TO_PRIVATE = `${BASE_URL}/api/profile/set_anime_history_to_private`;\r\nexport const API_SET_ANIME_HISTORY_TO_PUBLIC = `${BASE_URL}/api/profile/set_anime_history_to_public`;\r\nexport const API_SET_MANGA_LIST_TO_PRIVATE = `${BASE_URL}/api/profile/set_manga_list_to_private`;\r\nexport const API_SET_MANGA_LIST_TO_PUBLIC = `${BASE_URL}/api/profile/set_manga_list_to_public`;\r\nexport const API_SET_MANGA_HISTORY_TO_PRIVATE = `${BASE_URL}/api/profile/set_manga_history_to_private`;\r\nexport const API_SET_MANGA_HISTORY_TO_PUBLIC = `${BASE_URL}/api/profile/set_manga_history_to_public`;\r\nexport const API_UPDATE_USER_ANIME_DISPLAY_SETTINGS = `${BASE_URL}/api/profile/update_user_anime_display_settings/`;\r\nexport const API_UPDATE_USER_ANIME_LIST_SETTINGS = `${BASE_URL}/api/profile/update_user_anime_list_settings/`;\r\nexport const API_UPDATE_USER_MANGA_DISPLAY_SETTINGS = `${BASE_URL}/api/profile/update_user_manga_display_settings/`;\r\nexport const API_UPDATE_USER_MANGA_LIST_SETTINGS = `${BASE_URL}/api/profile/update_user_manga_list_settings/`;\r\nexport const API_UPDATE_USER_EROGE_DISPLAY_SETTINGS = `${BASE_URL}/api/profile/update_user_eroge_display_settings/`;\r\nexport function API_ADD_TO_FAVORITES(branch) {\r\n    return `${BASE_URL}/api/profile/${branch.toLowerCase()}/add_to_favorites/`;\r\n}\r\nexport function API_REMOVE_FROM_FAVORITES(branch) {\r\n    return `${BASE_URL}/api/profile/${branch.toLowerCase()}/remove_from_favorites/`;\r\n}\r\nexport function API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/anime-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/manga-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/eroge-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_ANIME_ENTRY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/`;\r\n}\r\nexport function API_USER_ANIME_UPDATE_EPISODE(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/update_anime_episode/`;\r\n}\r\nexport function API_USER_MANGA_UPDATE_VOLUME(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/update_manga_volume/`;\r\n}\r\nexport function API_USER_MANGA_UPDATE_CHAPTER(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/update_manga_chapter/`;\r\n}\r\nexport function API_DELETE_ANIME_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/delete_anime_history_entry/`;\r\n}\r\nexport function API_DELETE_MANGA_VOLUME_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/delete_manga_history_volume_entry/`;\r\n}\r\nexport function API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/delete_manga_history_chapter_entry/`;\r\n}\r\nexport function API_USER_MANGA_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/`;\r\n}\r\nexport function API_UPDATE_AND_GET_USER_ANIME_STATISTICS(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/update_anime_statistics/`;\r\n}\r\nexport function API_GET_USER_LIST(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/`;\r\n}\r\nexport function API_UPDATE_USER_LIST(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/update_user_list/`;\r\n}\r\nexport function API_GET_VISITED_USER_ANIME_HISTORY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/get_visited_user_anime_history/`;\r\n}\r\nexport function API_GET_VISITED_USER_MANGA_HISTORY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/get_visited_user_manga_history/`;\r\n}\r\nexport function API_GET_USER_ACHIEVEMENTS(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/get_user_achievements/`;\r\n}\r\n\r\n// ANIME\r\nexport const API_GET_ANIME_DATA = `${BASE_URL}/api/anime-data-api/`;\r\nexport const API_GET_ANIME_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/anime-data-api/anime_home`;\r\nexport const API_GET_ANIME_DATA_WITH_STATISTICS = `${BASE_URL}/api/anime-data-api/statistics/`;\r\nexport const API_GET_ANIME_ACHIEVEMENT_THRESHOLDS = `${BASE_URL}/api/anime-data-api/achievement_thresholds/`;\r\nexport const API_FILTER_ANIME = `${BASE_URL}/api/anime-api/`;\r\nexport const API_GET_ANIME_SEARCHABLE_TITLES = `${BASE_URL}/api/anime-api/searchable_titles/`;\r\nexport const API_GET_PENDING_SERVER_ANIME = `${BASE_URL}/api/anime-server-api/get_pending_server_anime/`;\r\nexport function API_GET_ONE_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}`;\r\n}\r\nexport function API_GET_ANIME_ON_SERVER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}`;\r\n}\r\nexport function API_GET_ALL_CHARACTERS_FOR_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/get_all_characters_for_anime`;\r\n}\r\nexport function API_GET_RELATIONS_FOR_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/get_relations_for_anime`;\r\n}\r\nexport function API_GET_ANIME_FRANCHISE(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/franchise`;\r\n}\r\n\r\n// MANGA\r\nexport const API_GET_MANGA_DATA = `${BASE_URL}/api/manga-data-api/`;\r\nexport const API_GET_MANGA_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/manga-data-api/manga_home`;\r\nexport const API_FILTER_MANGA = `${BASE_URL}/api/manga-api/`;\r\nexport function API_GET_ONE_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}`;\r\n}\r\nexport function API_GET_ALL_CHARACTERS_FOR_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}/get_all_characters_for_manga`;\r\n}\r\nexport function API_GET_RELATIONS_FOR_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}/get_relations_for_manga`;\r\n}\r\n\r\n// CHARACTERS\r\nexport const API_FILTER_CHARACTERS = `${BASE_URL}/api/characters-api/`;\r\nexport function API_GET_ONE_CHARACTER(id) {\r\n    return `${BASE_URL}/api/characters-api/${id}`;\r\n}\r\n\r\n// PEOPLE\r\nexport const API_FILTER_PEOPLE = `${BASE_URL}/api/people/`;\r\nexport function API_GET_ONE_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}`;\r\n}\r\nexport function API_GET_VOICE_ACTOR_ROLES_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/voice_actor_roles`;\r\n}\r\nexport function API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/anime_staff_positions`;\r\n}\r\nexport function API_GET_PUBLISHED_MANGA_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/published_manga`;\r\n}\r\n\r\n// EROGE\r\nexport const API_FILTER_EROGE = `${BASE_URL}/api/eroge-api/`;\r\nexport const API_GET_EROGE_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/eroge-data-api/eroge_home`;\r\nexport function API_GET_ONE_EROGE(id) {\r\n    return `${BASE_URL}/api/eroge-api/${id}`;\r\n}\r\n\r\n// REQUIEM\r\nexport const API_GET_REQUIEM = `${BASE_URL}/api/requiem-api/`;\r\nexport const API_GET_TARGETS = `${BASE_URL}/api/target-api/`;\r\nexport const API_GET_SCRAPERS_PROGRESS = `${BASE_URL}/api/report-api/get_scrapers_progress/`;\r\nexport const API_REQUIEM_GET_STORAGE_INFO = `${BASE_URL}/api/requiem-api/get_storage_info/`;\r\nexport const API_ADD_ANIME_TO_SERVER = `${BASE_URL}/api/anime-server-api/`;\r\nexport const API_GET_NEWS = `${BASE_URL}/api/news-api/`;\r\nexport const API_GET_ACTIVE_TORRENTS_PROGRESS = `${BASE_URL}/api/requiem-api/get_active_torrents_progress/`;\r\nexport function API_UPDATE_ANIME_TO_SERVER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/`;\r\n}\r\nexport function API_APPROVE_ANIME_ON_SERVER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/approve_anime_on_server/`;\r\n}\r\nexport function API_OPEN_ANIME_FOLDER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/open_anime_folder/`;\r\n}\r\nexport function API_OPEN_EROGE_FOLDER(id) {\r\n    return `${BASE_URL}/api/eroge-api/${id}/open_eroge_folder/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_ANIME_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_anime_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_MANGA_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_manga_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_CHARACTER_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_character_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_PERSON_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_person_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_EROGE_HENTAIGAMER(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_eroge_hentaigamer/`;\r\n}\r\nexport function API_REQUIEM_DOWNLOAD_ANIME_TORRENT(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/download_torrent/`;\r\n}\r\nexport function API_REQUIEM_GET_ANIME_TORRENT_PROGRESS(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/get_torrent_progress/`;\r\n}\r\nexport function API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/delete_anime_server_info_and_torrent/`;\r\n}\r\nexport function API_REQUIEM_GET_TORRENT_PROGRESS(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/get_torrent_progress/`;\r\n}\r\n\r\n// INDUSTRY\r\nexport const API_GET_INDUSTRY_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/industry-data/industry_home`;\r\n","// COOKIES\r\nimport {API_GET_ANIME_SEARCHABLE_TITLES, API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON} from \"./api_urls\";\r\n\r\nexport const SET_ANIME_FILTERS = 'SET_ANIME_FILTERS';\r\nexport const SET_MANGA_FILTERS = 'SET_MANGA_FILTERS';\r\nexport const SET_CHARACTERS_FILTERS = 'SET_CHARACTERS_FILTERS';\r\nexport const SET_PEOPLE_FILTERS = 'SET_PEOPLE_FILTERS';\r\nexport const SET_EROGE_FILTERS = 'SET_EROGE_FILTERS';\r\nexport const SET_COOKIE_SHOW_FILTERS = 'SET_COOKIE_SHOW_FILTERS';\r\n\r\n\r\nexport const SET_SELECTED_SEASON = 'SET_SELECTED_SEASON';\r\nexport const CLEAR_SELECTED_SEASON = 'CLEAR_SELECTED_SEASON';\r\n\r\n// AUTH\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const AUTH_USER = 'AUTH_USER';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const SET_REDIRECT_URL = 'SET_REDIRECT_URL';\r\n\r\n// REQUIEM\r\nexport const GET_REQUIEM = \"GET_REQUIEM\";\r\nexport const REQUIEM_LOADING = \"REQUIEM_LOADING\";\r\nexport const GET_REPORTS = \"GET_REPORTS\";\r\nexport const REPORTS_LOADING = \"REPORTS_LOADING\";\r\nexport const GET_NEWS = \"GET_NEWS\";\r\nexport const NEWS_LOADING = \"NEWS_LOADING\";\r\nexport const DOWNLOAD_TORRENT = \"DOWNLOAD_TORRENT\";\r\nexport const GET_TORRENT_PROGRESS = \"GET_TORRENT_PROGRESS\";\r\nexport const GET_ACTIVE_TORRENTS_PROGRESS = \"GET_ACTIVE_TORRENTS_PROGRESS\";\r\nexport const CLEAR_ANIME_TORRENT_PROGRESS = \"CLEAR_ANIME_TORRENT_PROGRESS\";\r\nexport const GET_STORAGE_INFO = \"GET_STORAGE_INFO\";\r\nexport const GET_TARGETS = \"GET_TARGETS\";\r\nexport const GET_SCRAPERS_PROGRESS = \"GET_SCRAPERS_PROGRESS\";\r\n\r\n// USERS\r\nexport const USERS_LOADING = 'USERS_LOADING';\r\nexport const USER_LIST_LOADING = 'USER_LIST_LOADING';\r\nexport const CANCEL_USER_LIST_LOADING = 'CANCEL_USER_LIST_LOADING';\r\nexport const SET_OPEN_APPLICATIONS_STATUS = 'SET_OPEN_APPLICATIONS_STATUS';\r\nexport const GET_USER = 'GET_USER';\r\nexport const GET_ALL_USERS = 'GET_ALL_USERS';\r\nexport const UPDATE_USER_PROFILE_IMAGE = 'UPDATE_USER_PROFILE_IMAGE';\r\nexport const USER_ENTRY_LOADING = 'USER_ENTRY_LOADING';\r\nexport const FINISH_LOADING_USER_ENTRY = 'FINISH_LOADING_USER_ENTRY';\r\nexport const GET_USER_ANIME_ENTRY = 'GET_USER_ANIME_ENTRY';\r\nexport const AUTH_ERROR_CLEAR_USER_INFO = 'AUTH_ERROR_CLEAR_USER_INFO';\r\nexport const CLEAR_USER_ANIME_ENTRY = 'CLEAR_USER_ANIME_ENTRY';\r\nexport const GET_USER_MANGA_ENTRY = 'GET_USER_MANGA_ENTRY';\r\nexport const CLEAR_USER_MANGA_ENTRY = 'CLEAR_USER_MANGA_ENTRY';\r\nexport const GET_USER_LIST = 'GET_USER_LIST';\r\nexport const UPDATE_USER_LIST = 'UPDATE_USER_LIST';\r\nexport const USER_STATISTICS_LOADING = 'USER_STATISTICS_LOADING';\r\nexport const UPDATE_USER_ANIME_STATISTICS = 'UPDATE_USER_ANIME_STATISTICS';\r\nexport const UPLOADING_FILE = 'UPLOADING_FILE';\r\nexport const FINISH_UPLOADING_FILE = 'FINISH_UPLOADING_FILE';\r\nexport const UPLOAD_ANIME_LIST_MAL_XML = 'UPLOAD_ANIME_LIST_MAL_XML';\r\nexport const UPLOAD_MANGA_LIST_MAL_XML = 'UPLOAD_MANGA_LIST_MAL_XML';\r\nexport const USER_INFO_LOADING = 'USER_INFO_LOADING';\r\nexport const USER_ACHIEVEMENTS_LOADING = 'USER_ACHIEVEMENTS_LOADING';\r\nexport const CANCEL_USER_ACHIEVEMENTS_LOADING = 'CANCEL_USER_ACHIEVEMENTS_LOADING';\r\nexport const GET_USER_ACHIEVEMENTS = 'GET_USER_ACHIEVEMENTS';\r\nexport const CLEAR_USER_ACHIEVEMENTS = 'CLEAR_USER_ACHIEVEMENTS';\r\nexport const GET_VISITED_USER_ANIME_HISTORY = 'GET_VISITED_USER_ANIME_HISTORY';\r\nexport const GET_VISITED_USER_MANGA_HISTORY = 'GET_VISITED_USER_MANGA_HISTORY';\r\nexport const GET_ANIME_FILTER_PRESETS = 'GET_ANIME_FILTER_PRESETS';\r\nexport const GET_MANGA_FILTER_PRESETS = 'GET_MANGA_FILTER_PRESETS';\r\nexport const GET_EROGE_FILTER_PRESETS = 'GET_EROGE_FILTER_PRESETS';\r\nexport const SET_ANIME_PRESET = 'SET_ANIME_PRESET';\r\nexport const SET_MANGA_PRESET = 'SET_MANGA_PRESET';\r\nexport const SET_EROGE_PRESET = 'SET_EROGE_PRESET';\r\nexport const GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES = 'GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES';\r\nexport const GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES = 'GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES';\r\nexport const UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES = 'UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES';\r\nexport const UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES = 'UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES';\r\nexport const GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS = 'GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS';\r\nexport const GET_PROFILE_PRIVACY_SETTINGS = 'GET_PROFILE_PRIVACY_SETTINGS';\r\nexport const UPDATE_USER_DISPLAY_SETTINGS_STORE = 'UPDATE_USER_DISPLAY_SETTINGS_STORE';\r\nexport const UPDATE_USER_LIST_DESIGN_SETTINGS_STORE = 'UPDATE_USER_LIST_DESIGN_SETTINGS_STORE';\r\nexport const UPDATE_USER_ANIME_BROWSE_SETTINGS = 'UPDATE_USER_ANIME_BROWSE_SETTINGS';\r\nexport const UPDATE_USER_ANIME_LIST_SETTINGS = 'UPDATE_USER_ANIME_LIST_SETTINGS';\r\nexport const UPDATE_USER_MANGA_BROWSE_SETTINGS = 'UPDATE_USER_MANGA_BROWSE_SETTINGS';\r\nexport const UPDATE_USER_MANGA_LIST_SETTINGS = 'UPDATE_USER_MANGA_LIST_SETTINGS';\r\nexport const UPDATE_USER_EROGE_BROWSE_SETTINGS = 'UPDATE_USER_EROGE_BROWSE_SETTINGS';\r\n\r\n// ANIME\r\nexport const GET_ANIME_DATA = 'GET_ANIME_DATA';\r\nexport const GET_ANIME_DATA_STATISTICS = 'GET_ANIME_DATA_STATISTICS';\r\nexport const GET_ANIME_ACHIEVEMENT_THRESHOLDS = 'GET_ANIME_ACHIEVEMENT_THRESHOLDS';\r\nexport const GET_ANIME = 'GET_ANIME';\r\nexport const GET_ALL_CHARACTERS_FOR_ANIME = 'GET_ALL_CHARACTERS_FOR_ANIME';\r\nexport const GET_RELATIONS_FOR_ANIME = 'GET_RELATIONS_FOR_ANIME';\r\nexport const FILTER_ANIME = 'FILTER_ANIME';\r\nexport const ANIME_LOADING = 'ANIME_LOADING';\r\nexport const CANCEL_ANIME_LOADING = 'CANCEL_ANIME_LOADING';\r\nexport const ANIME_FRANCHISE_LOADING = 'ANIME_FRANCHISE_LOADING';\r\nexport const GET_CURRENT_ANIME_FRANCHISE = 'GET_CURRENT_ANIME_FRANCHISE';\r\nexport const GET_ANIME_SEARCHABLE_TITLES = 'GET_ANIME_SEARCHABLE_TITLES';\r\nexport const GET_ANIME_ON_SERVER = 'GET_ANIME_ON_SERVER';\r\nexport const ANIME_ON_SERVER_LOADING = 'ANIME_ON_SERVER_LOADING';\r\nexport const GET_PENDING_ANIME_SERVER_INFO = 'GET_PENDING_ANIME_SERVER_INFO';\r\n\r\n// MANGA\r\nexport const GET_MANGA_DATA = 'GET_MANGA_DATA';\r\nexport const GET_MANGA = 'GET_MANGA';\r\nexport const GET_ALL_CHARACTERS_FOR_MANGA = 'GET_ALL_CHARACTERS_FOR_MANGA';\r\nexport const GET_RELATIONS_FOR_MANGA = 'GET_RELATIONS_FOR_MANGA';\r\nexport const FILTER_MANGA = 'FILTER_MANGA';\r\nexport const MANGA_LOADING = 'MANGA_LOADING';\r\nexport const CANCEL_MANGA_LOADING = 'CANCEL_MANGA_LOADING';\r\n\r\n// CHARACTERS\r\nexport const GET_CHARACTER = 'GET_CHARACTER';\r\nexport const FILTER_CHARACTERS = 'FILTER_CHARACTERS';\r\nexport const CHARACTERS_LOADING = 'CHARACTERS_LOADING';\r\nexport const CANCEL_CHARACTERS_LOADING = 'CANCEL_CHARACTERS_LOADING';\r\n\r\n// PEOPLE\r\nexport const GET_PERSON = 'GET_PERSON';\r\nexport const GET_PEOPLE_DATA = 'GET_PEOPLE_DATA';\r\nexport const GET_VOICE_ACTOR_ROLES_FOR_PERSON = 'GET_VOICE_ACTOR_ROLES_FOR_PERSON';\r\nexport const GET_ANIME_STAFF_POSITIONS_FOR_PERSON = 'GET_ANIME_STAFF_POSITIONS_FOR_PERSON';\r\nexport const GET_PUBLISHED_MANGA_FOR_PERSON = 'GET_PUBLISHED_MANGA_FOR_PERSON';\r\nexport const FILTER_PEOPLE = 'FILTER_PEOPLE';\r\nexport const PEOPLE_LOADING = 'PEOPLE_LOADING';\r\nexport const CANCEL_PEOPLE_LOADING = 'CANCEL_PEOPLE_LOADING';\r\n\r\n// EROGE\r\nexport const GET_EROGE = 'GET_EROGE';\r\nexport const GET_EROGE_DATA = 'GET_EROGE_DATA';\r\nexport const FILTER_EROGE = 'FILTER_EROGE';\r\nexport const EROGE_LOADING = 'EROGE_LOADING';\r\nexport const CANCEL_EROGE_LOADING = 'CANCEL_EROGE_LOADING';\r\n\r\n// ERRORS\r\nexport const CREATE_MESSAGE = 'CREATE_MESSAGE';\r\nexport const CLEAR_MESSAGE = 'CLEAR_MESSAGE';\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAN_ERRORS = 'CLEAN_ERRORS';\r\n\r\n// BRANCHES\r\nexport const SET_BROWSE_BRANCH = 'SET_BROWSE_BRANCH';\r\nexport const SET_DISPLAY_BRANCH = 'SET_DISPLAY_BRANCH';\r\nexport const SET_TITLE_BRANCH = 'SET_TITLE_BRANCH';\r\n\r\n// INDUSTRY\r\nexport const GET_INDUSTRY_DATA = 'GET_INDUSTRY_DATA';\r\nexport const INDUSTRY_DATA_LOADING = 'INDUSTRY_DATA_LOADING';\r\n","export class Cookie {\r\n    static show_filters = 'show_filters';\r\n    static sound_effects = 'sound_effects';\r\n    static anime_browse_filters = 'anime_browse_filters';\r\n    static anime_season_filters = 'anime_season_filters';\r\n    static anime_list_filters = 'anime_list_filters';\r\n    static manga_browse_filters = 'manga_browse_filters';\r\n    static manga_season_filters = 'manga_season_filters';\r\n    static manga_list_filters = 'manga_list_filters';\r\n    static characters_filters = 'characters_filters';\r\n    static people_filters = 'people_filters';\r\n    static eroge_browse_filters = 'eroge_browse_filters';\r\n}\r\n\r\nexport class Alert {\r\n    static type_success = 'success';\r\n    static type_info = 'info';\r\n    static type_error = 'error';\r\n}\r\n\r\nexport class ApiResult {\r\n    static count = 'count';\r\n    static next = 'next';\r\n    static previous = 'previous';\r\n    static results = 'results';\r\n}\r\n\r\nexport class CyberAdmin {\r\n    static open_applications = 'open_applications';\r\n}\r\n\r\nexport class User {\r\n    static id = 'id';\r\n    static username = 'username';\r\n    static profile = 'profile';\r\n    static email = 'email';\r\n    static is_superuser = 'is_superuser';\r\n    static date_joined = 'date_joined';\r\n    static last_login = 'last_login';\r\n    static first_name = 'first_name';\r\n    static last_name = 'last_name';\r\n    static is_staff = 'is_staff';\r\n    static is_active = 'is_active';\r\n}\r\n\r\nexport class UserStatistics {\r\n    static the_crusade = 'the_crusade';\r\n    static the_crusade_progress = 'the_crusade_progress';\r\n    static romance_progress = 'romance_progress';\r\n    static romance_1 = 'romance_1';\r\n    static romance_2 = 'romance_2';\r\n    static romance_3 = 'romance_3';\r\n    static romance_4 = 'romance_4';\r\n    static pervert_progress = 'pervert_progress';\r\n    static pervert_1 = 'pervert_1';\r\n    static pervert_2 = 'pervert_2';\r\n    static pervert_3 = 'pervert_3';\r\n    static pervert_4 = 'pervert_4';\r\n    static classics_progress = 'classics_progress';\r\n    static classics_1 = 'classics_1';\r\n    static classics_2 = 'classics_2';\r\n    static classics_3 = 'classics_3';\r\n    static classics_4 = 'classics_4';\r\n    static dementia_psychological_progress = 'dementia_psychological_progress';\r\n    static dementia_psychological_1 = 'dementia_psychological_1';\r\n    static dementia_psychological_2 = 'dementia_psychological_2';\r\n    static dementia_psychological_3 = 'dementia_psychological_3';\r\n    static dementia_psychological_4 = 'dementia_psychological_4';\r\n    static horror_thriller_progress = 'horror_thriller_progress';\r\n    static horror_thriller_1 = 'horror_thriller_1';\r\n    static horror_thriller_2 = 'horror_thriller_2';\r\n    static horror_thriller_3 = 'horror_thriller_3';\r\n    static horror_thriller_4 = 'horror_thriller_4';\r\n    static mystery_progress = 'mystery_progress';\r\n    static mystery_1 = 'mystery_1';\r\n    static mystery_2 = 'mystery_2';\r\n    static mystery_3 = 'mystery_3';\r\n    static mystery_4 = 'mystery_4';\r\n}\r\n\r\n\r\nexport class Profile {\r\n    static id = 'id';\r\n    static avatar = 'avatar';\r\n    static profile_cover = 'profile_cover';\r\n    static profile_image = 'profile_image';\r\n    static title = 'title';\r\n    static bio = 'bio';\r\n    static user = 'user';\r\n    static favorite_anime = 'favorite_anime';\r\n    static favorite_manga = 'favorite_manga';\r\n    static favorite_characters = 'favorite_characters';\r\n    static favorite_people = 'favorite_people';\r\n    static active_theme = 'active_theme';\r\n    static theme_sounds = 'theme_sounds';\r\n    static show_adult = 'show_adult';\r\n    static about_section_bbcode = 'about_section_bbcode';\r\n    static about_section_background_style = 'about_section_background_style';\r\n    static is_profile_private = 'is_profile_private';\r\n    static is_anime_list_private = 'is_anime_list_private';\r\n    static is_anime_history_private = 'is_anime_history_private';\r\n    static is_manga_list_private = 'is_manga_list_private';\r\n    static is_manga_history_private = 'is_manga_history_private';\r\n    static user_anime_display_settings = 'user_anime_display_settings';\r\n    static user_manga_display_settings = 'user_manga_display_settings';\r\n    static user_eroge_display_settings = 'user_eroge_display_settings';\r\n    static user_anime_list_design_settings = 'user_anime_list_design_settings';\r\n    static user_manga_list_design_settings = 'user_manga_list_design_settings';\r\n}\r\n\r\n\r\nexport class UserList {\r\n    static owner = 'owner';\r\n    static is_updating = 'is_updating';\r\n    static is_scraping_episode_history_from_mal = 'is_scraping_episode_history_from_mal';\r\n    static scraping_episode_history_from_mal_progress = 'scraping_episode_history_from_mal_progress';\r\n    static xml_mal_anime_list = 'xml_mal_anime_list';\r\n    static anime_watching = 'anime_watching';\r\n    static anime_completed = 'anime_completed';\r\n    static anime_on_hold = 'anime_on_hold';\r\n    static anime_dropped = 'anime_dropped';\r\n    static anime_plan_to_watch = 'anime_plan_to_watch';\r\n    static anime_total_finished = 'anime_total_finished';\r\n    static anime_total_entries = 'anime_total_entries';\r\n    static anime_mean_score = 'anime_mean_score';\r\n    static anime_episodes_watched = 'anime_episodes_watched';\r\n    static anime_mins_spent_watching = 'anime_mins_spent_watching';\r\n    static anime_started_watching_on = 'anime_started_watching_on';\r\n    static manga_reading = 'manga_reading';\r\n    static manga_completed = 'manga_completed';\r\n    static manga_on_hold = 'manga_on_hold';\r\n    static manga_dropped = 'manga_dropped';\r\n    static manga_plan_to_read = 'manga_plan_to_read';\r\n    static manga_total_finished = 'manga_total_finished';\r\n    static manga_mean_score = 'manga_mean_score';\r\n    static manga_total_entries = 'manga_total_entries';\r\n    static manga_volumes_read = 'manga_volumes_read';\r\n    static manga_chapters_read = 'manga_chapters_read';\r\n    static manga_mins_spent_reading = 'manga_mins_spent_reading';\r\n    static manga_started_reading_on = 'manga_started_reading_on';\r\n}\r\n\r\nexport class UserAnimeEntry {\r\n    static id = 'id';\r\n    static anime = 'anime';\r\n    static episode_history = 'episode_history';\r\n    static watched_episodes = 'watched_episodes';\r\n    static start_date = 'start_date';\r\n    static finish_date = 'finish_date';\r\n    static score = 'score';\r\n    static status = 'status';\r\n    static times_watched = 'times_watched';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static priority = 'priority';\r\n    static rewatching = 'rewatching';\r\n    static rewatching_episode = 'rewatching_episode';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static anime_list = 'anime_list';\r\n}\r\n\r\nexport class UserMangaEntry {\r\n    static id = 'id';\r\n    static manga = 'manga';\r\n    static start_date = 'start_date';\r\n    static finish_date = 'finish_date';\r\n    static volume_history = 'volume_history';\r\n    static chapter_history = 'chapter_history';\r\n    static read_volumes = 'read_volumes';\r\n    static read_chapters = 'read_chapters';\r\n    static score = 'score';\r\n    static status = 'status';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static times_read = 'times_read';\r\n    static priority = 'priority';\r\n    static rereading = 'rereading';\r\n    static rereading_chapter = 'rereading_chapter';\r\n    static rereading_volume = 'rereading_volume';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class AnimeData {\r\n    static total_anime_per_season_json = 'total_anime_per_season_json';\r\n    static current_anime_season = 'current_anime_season';\r\n    static top_scored_anime = 'top_scored_anime';\r\n    static top_upcoming_anime = 'top_upcoming_anime';\r\n    static most_popular_anime = 'most_popular_anime';\r\n    static top_70s_anime = 'top_70s_anime';\r\n    static top_80s_anime = 'top_80s_anime';\r\n    static top_90s_anime = 'top_90s_anime';\r\n    static top_2000s_anime = 'top_2000s_anime';\r\n    static top_2010s_anime = 'top_2010s_anime';\r\n    static recently_added_anime = 'recently_added_anime';\r\n    static recently_downloaded_anime = 'recently_downloaded_anime';\r\n}\r\n\r\nexport class MangaData {\r\n    static total_manga_per_season_json = 'total_manga_per_season_json';\r\n    static current_manga_season = 'current_manga_season';\r\n    static top_scored_manga = 'top_scored_manga';\r\n    static top_upcoming_manga = 'top_upcoming_manga';\r\n    static most_popular_manga = 'most_popular_manga';\r\n    static top_70s_manga = 'top_70s_manga';\r\n    static top_80s_manga = 'top_80s_manga';\r\n    static top_90s_manga = 'top_90s_manga';\r\n    static top_2000s_manga = 'top_2000s_manga';\r\n    static top_2010s_manga = 'top_2010s_manga';\r\n    static recently_added_manga = 'recently_added_manga';\r\n    static recently_downloaded_manga = 'recently_downloaded_manga';\r\n}\r\n\r\nexport class IndustryData {\r\n    static most_popular_characters = 'most_popular_characters';\r\n    static recently_added_characters = 'recently_added_characters';\r\n}\r\n\r\nexport class ErogeData {\r\n    static top_scored_eroge = 'top_scored_eroge';\r\n    static most_popular_eroge = 'most_popular_eroge';\r\n    static top_windows_eroge = 'top_windows_eroge';\r\n    static top_android_eroge = 'top_android_eroge';\r\n    static largest_size_eroge = 'largest_size_eroge';\r\n    static recently_added_eroge = 'recently_added_eroge';\r\n}\r\n\r\nexport class SeasonYear {\r\n    static seasons = 'seasons';\r\n    static year = 'year';\r\n}\r\n\r\nexport class Anime {\r\n    static id = 'id';\r\n    static title = 'title';\r\n    static title_english = 'title_english';\r\n    static title_synonyms = 'title_synonyms';\r\n    static title_japanese = 'title_japanese';\r\n    static anime_cover_images = 'anime_cover_images';\r\n    static anime_cdn_cover_images = 'anime_cdn_cover_images';\r\n    static anime_on_server = 'anime_on_server';\r\n    static air_end = 'air_end';\r\n    static air_end_known = 'air_end_known';\r\n    static air_start = 'air_start';\r\n    static air_start_known = 'air_start_known';\r\n    static aired_string = 'aired_string';\r\n    static airing = 'airing';\r\n    static approved = 'approved';\r\n    static background = 'background';\r\n    static broadcast = 'broadcast';\r\n    static cannot_download = 'cannot_download';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static duration = 'duration';\r\n    static ending_theme = 'ending_theme';\r\n    static episodes = 'episodes';\r\n    static favorites = 'favorites';\r\n    static franchise = 'franchise';\r\n    static genres_csv = 'genres_csv';\r\n    static is_downloading = 'is_downloading';\r\n    static licensor = 'licensor';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static members = 'members';\r\n    static minutes_per_episode = 'minutes_per_episode';\r\n    static opening_theme = 'opening_theme';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static popularity = 'popularity';\r\n    static premiered = 'premiered';\r\n    static producer = 'producer';\r\n    static rank = 'rank';\r\n    static rating = 'rating';\r\n    static rating_short = 'rating_short';\r\n    static score = 'score';\r\n    static scored_by = 'scored_by';\r\n    static source = 'source';\r\n    static status = 'status';\r\n    static studio = 'studio';\r\n    static synopsis = 'synopsis';\r\n    static total_time_mins = 'total_time_mins';\r\n    static type = 'type';\r\n    static uuid_name = 'uuid_name';\r\n    static anime_roles = 'anime_roles';\r\n    static main_characters = 'main_characters';\r\n    static all_characters = 'all_characters';\r\n    static anime_relations = 'anime_relations';\r\n}\r\n\r\nexport const VALID_ANIME_RELATIONS = ['anime_relation_adaptation', 'anime_relation_alternative_setting',\r\n    'anime_relation_alternative_version', 'anime_relation_sequel', 'anime_relation_prequel',\r\n    'anime_relation_side_story', 'anime_relation_spin_off', 'anime_relation_other', 'anime_relation_summary',\r\n    'anime_relation_character', 'anime_relation_parent_story', 'anime_relation_full_story'];\r\nexport const VALID_ANIME_RELATION_NAMES = {\r\n    'anime_relation_adaptation': \"Adaptation\",\r\n    'anime_relation_alternative_setting': \"Alternative Setting\",\r\n    'anime_relation_alternative_version': \"Alternative Version\",\r\n    'anime_relation_sequel': \"Sequel\",\r\n    'anime_relation_prequel': \"Prequel\",\r\n    'anime_relation_side_story': \"Side Story\",\r\n    'anime_relation_spin_off': \"Spin Off\",\r\n    'anime_relation_other': \"Other\",\r\n    'anime_relation_summary': \"Summary\",\r\n    'anime_relation_character': \"Character\",\r\n    'anime_relation_parent_story': \"Parent Story\",\r\n    'anime_relation_full_story': \"Full Story\"\r\n};\r\n\r\nexport const ANIME_SHORT_STATUS = {\r\n    'Finished Airing': {label: 'FA', color: 'primary'},\r\n    'Not yet aired': {label: 'NA', color: 'default'},\r\n    'Currently Airing': {label: 'CA', color: 'success'},\r\n};\r\n\r\nexport const MANGA_SHORT_STATUS = {\r\n    'Finished': {label: 'F', color: 'primary'},\r\n    'Not yet published': {label: 'NP', color: 'default'},\r\n    'Publishing': {label: 'P', color: 'success'},\r\n    'Discontinued': {label: 'D', color: 'danger'},\r\n    'On Hiatus': {label: 'OH', color: 'warning'},\r\n};\r\n\r\nexport class AnimeOnServer {\r\n    static id = 'id';\r\n    static additional_dubs = 'additional_dubs';\r\n    static additional_info = 'additional_info';\r\n    static additional_subtitles = 'additional_subtitles';\r\n    static anime = 'anime';\r\n    static approved = 'approved';\r\n    static arabic_dub = 'arabic_dub';\r\n    static arabic_sub = 'arabic_sub';\r\n    static audio_channel = 'audio_channel';\r\n    static bulgarian_dub = 'bulgarian_dub';\r\n    static bulgarian_sub = 'bulgarian_sub';\r\n    static catalan_dub = 'catalan_dub';\r\n    static catalan_sub = 'catalan_sub';\r\n    static chinese_dub = 'chinese_dub';\r\n    static chinese_sub = 'chinese_sub';\r\n    static czech_dub = 'czech_dub';\r\n    static czech_sub = 'czech_sub';\r\n    static danish_dub = 'danish_dub';\r\n    static danish_sub = 'danish_sub';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static downloading = 'downloading';\r\n    static dutch_dub = 'dutch_dub';\r\n    static dutch_sub = 'dutch_sub';\r\n    static english_dub = 'english_dub';\r\n    static english_sub = 'english_sub';\r\n    static english_subs = 'english_subs';\r\n    static extract_subs = 'extract_subs';\r\n    static finnish_dub = 'finnish_dub';\r\n    static finnish_sub = 'finnish_sub';\r\n    static franchise_folder_name = 'franchise_folder_name';\r\n    static french_dub = 'french_dub';\r\n    static french_sub = 'french_sub';\r\n    static german_dub = 'german_dub';\r\n    static german_sub = 'german_sub';\r\n    static greek_dub = 'greek_dub';\r\n    static greek_sub = 'greek_sub';\r\n    static hebrew_dub = 'hebrew_dub';\r\n    static hebrew_sub = 'hebrew_sub';\r\n    static hungarian_dub = 'hungarian_dub';\r\n    static hungarian_sub = 'hungarian_sub';\r\n    static incomplete = 'incomplete';\r\n    static incomplete_progress = 'incomplete_progress';\r\n    static indonesian_dub = 'indonesian_dub';\r\n    static indonesian_sub = 'indonesian_sub';\r\n    static italian_dub = 'italian_dub';\r\n    static italian_sub = 'italian_sub';\r\n    static japanese_dub = 'japanese_dub';\r\n    static japanese_sub = 'japanese_sub';\r\n    static korean_dub = 'korean_dub';\r\n    static korean_sub = 'korean_sub';\r\n    static location = 'location';\r\n    static main_torrent_info = 'main_torrent_info';\r\n    static malay_dub = 'malay_dub';\r\n    static malay_sub = 'malay_sub';\r\n    static norwegian_dub = 'norwegian_dub';\r\n    static norwegian_sub = 'norwegian_sub';\r\n    static persian_dub = 'persian_dub';\r\n    static persian_sub = 'persian_sub';\r\n    static polish_dub = 'polish_dub';\r\n    static polish_sub = 'polish_sub';\r\n    static portuguese_dub = 'portuguese_dub';\r\n    static portuguese_sub = 'portuguese_sub';\r\n    static requiem = 'requiem';\r\n    static romanian_dub = 'romanian_dub';\r\n    static romanian_sub = 'romanian_sub';\r\n    static russian_dub = 'russian_dub';\r\n    static russian_sub = 'russian_sub';\r\n    static shared_torrent_with = 'shared_torrent_with';\r\n    static size_on_HDD_GB = 'size_on_HDD_GB';\r\n    static slovak_dub = 'slovak_dub';\r\n    static slovak_sub = 'slovak_sub';\r\n    static spanish_dub = 'spanish_dub';\r\n    static spanish_sub = 'spanish_sub';\r\n    static swedish_dub = 'swedish_dub';\r\n    static swedish_sub = 'swedish_sub';\r\n    static thai_dub = 'thai_dub';\r\n    static thai_sub = 'thai_sub';\r\n    static torrent_file = 'torrent_file';\r\n    static torrent_hash = 'torrent_hash';\r\n    static torrent_magnet = 'torrent_magnet';\r\n    static turkish_dub = 'turkish_dub';\r\n    static turkish_sub = 'turkish_sub';\r\n    static video_quality = 'video_quality';\r\n    static video_resolution = 'video_resolution';\r\n    static vietnamese_dub = 'vietnamese_dub';\r\n    static vietnamese_sub = 'vietnamese_sub';\r\n}\r\n\r\nexport class AnimeFranchise {\r\n    static id = 'id';\r\n    static title = 'title';\r\n    static cover_image = 'cover_image';\r\n    static total_titles = 'total_titles';\r\n    static top_members = 'top_members';\r\n    static total_members = 'total_members';\r\n    static top_score = 'top_score';\r\n    static average_score = 'average_score';\r\n    static total_minutes = 'total_minutes';\r\n    static total_episodes = 'total_episodes';\r\n    static anime_franchise = 'anime_franchise';\r\n}\r\n\r\nexport class Manga {\r\n    static active_image_name = 'active_image_name';\r\n    static air_end = 'air_end';\r\n    static air_end_known = 'air_end_known';\r\n    static air_start = 'air_start';\r\n    static air_start_known = 'air_start_known';\r\n    static anidb_image_url = 'anidb_image_url';\r\n    static ann_image_url = 'ann_image_url';\r\n    static approved = 'approved';\r\n    static authors = 'authors';\r\n    static background = 'background';\r\n    static cannot_download = 'cannot_download';\r\n    static chapters = 'chapters';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static favorites = 'favorites';\r\n    static genres = 'genres';\r\n    static genres_csv = 'genres_csv';\r\n    static id = 'id';\r\n    static image_url = 'image_url';\r\n    static is_downloading = 'is_downloading';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static manga_cover_images = 'manga_cover_images';\r\n    static manga_cdn_cover_images = 'manga_cdn_cover_images';\r\n    static manga_on_server = 'manga_on_server';\r\n    static members = 'members';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static popularity = 'popularity';\r\n    static published_string = 'published_string';\r\n    static publishing = 'publishing';\r\n    static rank = 'rank';\r\n    static related = 'related';\r\n    static score = 'score';\r\n    static scored_by = 'scored_by';\r\n    static serialization = 'serialization';\r\n    static status = 'status';\r\n    static synopsis = 'synopsis';\r\n    static title = 'title';\r\n    static title_english = 'title_english';\r\n    static title_japanese = 'title_japanese';\r\n    static title_synonyms = 'title_synonyms';\r\n    static type = 'type';\r\n    static uuid_name = 'uuid_name';\r\n    static volumes = 'volumes';\r\n    static manga_roles = 'manga_roles';\r\n    static main_characters = 'main_characters';\r\n    static all_characters = 'all_characters';\r\n    static manga_relations = 'manga_relations';\r\n}\r\n\r\nexport const VALID_MANGA_RELATIONS = [\r\n    'manga_relation_adaptation',\r\n    'manga_relation_alternative_setting',\r\n    'manga_relation_alternative_version',\r\n    'manga_relation_sequel',\r\n    'manga_relation_prequel',\r\n    'manga_relation_side_story',\r\n    'manga_relation_spin_off',\r\n    'manga_relation_other',\r\n    'manga_relation_summary',\r\n    'manga_relation_character',\r\n    'manga_relation_parent_story',\r\n    'manga_relation_full_story'\r\n];\r\n\r\nexport const VALID_MANGA_RELATION_NAMES = {\r\n    'manga_relation_adaptation': \"Adaptation\",\r\n    'manga_relation_alternative_setting': \"Alternative Setting\",\r\n    'manga_relation_alternative_version': \"Alternative Version\",\r\n    'manga_relation_sequel': \"Sequel\",\r\n    'manga_relation_prequel': \"Prequel\",\r\n    'manga_relation_side_story': \"Side Story\",\r\n    'manga_relation_spin_off': \"Spin Off\",\r\n    'manga_relation_other': \"Other\",\r\n    'manga_relation_summary': \"Summary\",\r\n    'manga_relation_character': \"Character\",\r\n    'manga_relation_parent_story': \"Parent Story\",\r\n    'manga_relation_full_story': \"Full Story\"\r\n};\r\n\r\nexport class Character {\r\n    static id = 'id';\r\n    static character_cover_images = 'character_cover_images';\r\n    static character_cdn_cover_images = 'character_cdn_cover_images';\r\n    static anime_roles = 'anime_roles';\r\n    static manga_roles = 'manga_roles';\r\n    static uuid_name = 'uuid_name';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static approved = 'approved';\r\n    static character_name = 'name';\r\n    static nickname = 'nickname';\r\n    static short_name = 'short_name';\r\n    static image_url = 'image_url';\r\n    static anidb_image_url = 'anidb_image_url';\r\n    static ann_image_url = 'ann_image_url';\r\n    static active_image_name = 'active_image_name';\r\n    static favorites = 'favorites';\r\n    static description = 'description';\r\n    static voice_actors = 'voice_actors';\r\n    static role = 'role';\r\n    static anime_roles_defined = 'anime_roles_defined';\r\n    static manga_roles_defined = 'manga_roles_defined';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class Person {\r\n    static id = 'id';\r\n    static uuid_name = 'uuid_name';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static approved = 'approved';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static person_cover_images = 'person_cover_images';\r\n    static person_cdn_cover_images = 'person_cdn_cover_images';\r\n    static person_name = 'name';\r\n    static given_name = 'given_name';\r\n    static family_name = 'family_name';\r\n    static alternative_names = 'alternative_names';\r\n    static image_url = 'image_url';\r\n    static birthday = 'birthday';\r\n    static website = 'website';\r\n    static favorites = 'favorites';\r\n    static more_info = 'more_info';\r\n    static has_roles = 'has_roles';\r\n    static voice_actor_roles = 'voice_actor_roles';\r\n    static voice_actor_anime_roles = 'voice_actor_anime_roles';\r\n    static anime_staff_positions = 'anime_staff_positions';\r\n    static anime_staff_positions_roles = 'anime_staff_positions_roles';\r\n    static published_manga = 'published_manga';\r\n    static published_manga_roles = 'published_manga_roles';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class Eroge {\r\n    static censorship = 'censorship';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static date_updated = 'date_updated';\r\n    static description = 'description';\r\n    static download_url = 'download_url';\r\n    static downloaded = 'downloaded';\r\n    static eroge_cover_images = 'eroge_cover_images';\r\n    static eroge_screenshots = 'eroge_screenshots';\r\n    static game_location = 'game_location';\r\n    static game_url = 'game_url';\r\n    static id = 'id';\r\n    static language = 'language';\r\n    static eroge_name = 'name';\r\n    static platforms = 'platforms';\r\n    static rated_by = 'rated_by';\r\n    static rating = 'rating';\r\n    static scraped_from = 'scraped_from';\r\n    static size = 'size';\r\n    static source = 'source';\r\n    static tags = 'tags';\r\n    static type = 'type';\r\n}\r\n\r\nexport class CoverImages {\r\n    static image = 'image';\r\n}\r\n\r\nexport class CDNCoverImages {\r\n    static image_url = 'image_url';\r\n    static thumbnail_url = 'thumbnail_url';\r\n    static size = 'size';\r\n    static width = 'width';\r\n    static height = 'height';\r\n}\r\n\r\nexport class FiltersPreset {\r\n    static id = 'id';\r\n    static preset_name = 'name';\r\n    static filters = 'filters';\r\n}\r\n\r\nexport class AnimeDataStatistics {\r\n    static anime_data = 'anime_data';\r\n    static total_anime = 'total_anime';\r\n    static total_anime_deleted_mal = 'total_anime_deleted_mal';\r\n    static total_anime_pending_mal = 'total_anime_pending_mal';\r\n    static total_anime_downloaded = 'total_anime_downloaded';\r\n    static total_anime_downloading = 'total_anime_downloading';\r\n    static total_downloaded_size = 'total_downloaded_size';\r\n    static mean_score = 'mean_score';\r\n    static total_episodes = 'total_episodes';\r\n    static total_minutes = 'total_minutes';\r\n    static total_quality_2160p = 'total_quality_2160p';\r\n    static total_quality_1080p = 'total_quality_1080p';\r\n    static total_quality_960p = 'total_quality_960p';\r\n    static total_quality_720p = 'total_quality_720p';\r\n    static total_quality_576p = 'total_quality_576p';\r\n    static total_quality_560p = 'total_quality_560p';\r\n    static total_quality_540p = 'total_quality_540p';\r\n    static total_quality_528p = 'total_quality_528p';\r\n    static total_quality_480p = 'total_quality_480p';\r\n    static total_quality_396p = 'total_quality_396p';\r\n    static total_quality_360p = 'total_quality_360p';\r\n    static total_quality_288p = 'total_quality_288p';\r\n    static total_quality_240p = 'total_quality_240p';\r\n    static total_original_anime = 'total_original_anime';\r\n    static total_original_anime_mean = 'total_original_anime_mean';\r\n    static total_anime_from_light_novel = 'total_anime_from_light_novel';\r\n    static total_anime_from_light_novel_mean = 'total_anime_from_light_novel_mean';\r\n    static total_anime_from_music = 'total_anime_from_music';\r\n    static total_anime_from_music_mean = 'total_anime_from_music_mean';\r\n    static total_anime_from_manga = 'total_anime_from_manga';\r\n    static total_anime_from_manga_mean = 'total_anime_from_manga_mean';\r\n    static total_anime_from_other = 'total_anime_from_other';\r\n    static total_anime_from_other_mean = 'total_anime_from_other_mean';\r\n    static total_anime_from_visual_novel = 'total_anime_from_visual_novel';\r\n    static total_anime_from_visual_novel_mean = 'total_anime_from_visual_novel_mean';\r\n    static total_anime_from_book = 'total_anime_from_book';\r\n    static total_anime_from_book_mean = 'total_anime_from_book_mean';\r\n    static total_anime_from_game = 'total_anime_from_game';\r\n    static total_anime_from_game_mean = 'total_anime_from_game_mean';\r\n    static total_anime_from_web_manga = 'total_anime_from_web_manga';\r\n    static total_anime_from_web_manga_mean = 'total_anime_from_web_manga_mean';\r\n    static total_anime_from_novel = 'total_anime_from_novel';\r\n    static total_anime_from_novel_mean = 'total_anime_from_novel_mean';\r\n    static total_anime_from_picture_book = 'total_anime_from_picture_book';\r\n    static total_anime_from_picture_book_mean = 'total_anime_from_picture_book_mean';\r\n    static total_anime_from_card_game = 'total_anime_from_card_game';\r\n    static total_anime_from_card_game_mean = 'total_anime_from_card_game_mean';\r\n    static total_anime_from_4_kom_manga = 'total_anime_from_4_kom_manga';\r\n    static total_anime_from_4_kom_manga_mean = 'total_anime_from_4_kom_manga_mean';\r\n    static total_anime_from_digital_manga = 'total_anime_from_digital_manga';\r\n    static total_anime_from_digital_manga_mean = 'total_anime_from_digital_manga_mean';\r\n    static total_anime_from_radio = 'total_anime_from_radio';\r\n    static total_anime_from_radio_mean = 'total_anime_from_radio_mean';\r\n    static total_movie = 'total_movie';\r\n    static total_music = 'total_music';\r\n    static total_ona = 'total_ona';\r\n    static total_ova = 'total_ova';\r\n    static total_special = 'total_special';\r\n    static total_tv = 'total_tv';\r\n    static total_finished_airing = 'total_finished_airing';\r\n    static total_currently_airing = 'total_currently_airing';\r\n    static total_not_yet_aired = 'total_not_yet_aired';\r\n    static total_rated_g = 'total_rated_g';\r\n    static total_rated_pgc = 'total_rated_pgc';\r\n    static total_rated_pg13 = 'total_rated_pg13';\r\n    static total_rated_r = 'total_rated_r';\r\n    static total_rated_r_plus = 'total_rated_r_plus';\r\n    static total_rated_rx = 'total_rated_rx';\r\n    static total_rated_none = 'total_rated_none';\r\n    static total_genre_action = 'total_genre_action';\r\n    static total_genre_adventure = 'total_genre_adventure';\r\n    static total_genre_cars = 'total_genre_cars';\r\n    static total_genre_comedy = 'total_genre_comedy';\r\n    static total_genre_dementia = 'total_genre_dementia';\r\n    static total_genre_demons = 'total_genre_demons';\r\n    static total_genre_drama = 'total_genre_drama';\r\n    static total_genre_ecchi = 'total_genre_ecchi';\r\n    static total_genre_fantasy = 'total_genre_fantasy';\r\n    static total_genre_game = 'total_genre_game';\r\n    static total_genre_harem = 'total_genre_harem';\r\n    static total_genre_hentai = 'total_genre_hentai';\r\n    static total_genre_historical = 'total_genre_historical';\r\n    static total_genre_horror = 'total_genre_horror';\r\n    static total_genre_josei = 'total_genre_josei';\r\n    static total_genre_kids = 'total_genre_kids';\r\n    static total_genre_magic = 'total_genre_magic';\r\n    static total_genre_martial_arts = 'total_genre_martial_arts';\r\n    static total_genre_mecha = 'total_genre_mecha';\r\n    static total_genre_military = 'total_genre_military';\r\n    static total_genre_music = 'total_genre_music';\r\n    static total_genre_mystery = 'total_genre_mystery';\r\n    static total_genre_parody = 'total_genre_parody';\r\n    static total_genre_police = 'total_genre_police';\r\n    static total_genre_psychological = 'total_genre_psychological';\r\n    static total_genre_romance = 'total_genre_romance';\r\n    static total_genre_samurai = 'total_genre_samurai';\r\n    static total_genre_school = 'total_genre_school';\r\n    static total_genre_sci_fi = 'total_genre_sci_fi';\r\n    static total_genre_seinen = 'total_genre_seinen';\r\n    static total_genre_shoujo = 'total_genre_shoujo';\r\n    static total_genre_shoujo_ai = 'total_genre_shoujo_ai';\r\n    static total_genre_shounen = 'total_genre_shounen';\r\n    static total_genre_shounen_ai = 'total_genre_shounen_ai';\r\n    static total_genre_slice_of_life = 'total_genre_slice_of_life';\r\n    static total_genre_space = 'total_genre_space';\r\n    static total_genre_sports = 'total_genre_sports';\r\n    static total_genre_super_power = 'total_genre_super_power';\r\n    static total_genre_supernatural = 'total_genre_supernatural';\r\n    static total_genre_thriller = 'total_genre_thriller';\r\n    static total_genre_vampire = 'total_genre_vampire';\r\n    static total_genre_yaoi = 'total_genre_yaoi';\r\n    static total_genre_yuri = 'total_genre_yuri';\r\n    static anime_achievement_romance_thresholds = 'anime_achievement_romance_thresholds';\r\n    static anime_achievement_romance_info = 'anime_achievement_romance_info';\r\n    static anime_achievement_classics_thresholds = 'anime_achievement_classics_thresholds';\r\n    static anime_achievement_classics_info = 'anime_achievement_classics_info';\r\n    static anime_achievement_pervert_thresholds = 'anime_achievement_pervert_thresholds';\r\n    static anime_achievement_pervert_info = 'anime_achievement_pervert_info';\r\n    static anime_achievement_dementia_psychological_thresholds = 'anime_achievement_dementia_psychological_thresholds';\r\n    static anime_achievement_dementia_psychological_info = 'anime_achievement_dementia_psychological_info';\r\n    static anime_achievement_horror_thriller_thresholds = 'anime_achievement_horror_thriller_thresholds';\r\n    static anime_achievement_horror_thriller_info = 'anime_achievement_horror_thriller_info';\r\n    static anime_achievement_mystery_thresholds = 'anime_achievement_mystery_thresholds';\r\n    static anime_achievement_mystery_info = 'anime_achievement_mystery_info';\r\n}\r\n\r\nexport class AchievementInfo {\r\n    static title = 'title';\r\n    static requirement = 'requirement';\r\n    static tier_1 = 'tier_1';\r\n    static tier_2 = 'tier_2';\r\n    static tier_3 = 'tier_3';\r\n    static tier_4 = 'tier_4';\r\n}\r\n\r\nexport class AchievementTier {\r\n    static title = 'title';\r\n    static description = 'description';\r\n    static image = 'image';\r\n}\r\n\r\n\r\nexport class UserAnimeDisplaySettingsSchema {\r\n    static cards = 'cards';\r\n    static type = 'type';\r\n    static episodes = 'episodes';\r\n    static mins_per_ep = 'mins_per_ep';\r\n    static rating = 'rating';\r\n    static genres = 'genres';\r\n    static mal_score = 'mal_score';\r\n    static aired = 'aired';\r\n}\r\n\r\n\r\nexport class UserMangaDisplaySettingsSchema {\r\n    static cards = 'cards';\r\n    static type = 'type';\r\n    static volumes = 'volumes';\r\n    static chapters = 'chapters';\r\n    static genres = 'genres';\r\n    static mal_score = 'mal_score';\r\n    static aired = 'aired';\r\n}\r\n\r\n\r\nexport class UserErogeDisplaySettingsSchema {\r\n    static cards = 'cards';\r\n    static type = 'type';\r\n    static censorship = 'censorship';\r\n    static language = 'language';\r\n    static platforms = 'platforms';\r\n    static tags = 'tags';\r\n    static hg_score = 'hg_score';\r\n}\r\n\r\nexport class Requiem {\r\n    static valid = 'valid';\r\n    static scrape_threshold = 'scrape_threshold';\r\n    static seasonal_threshold = 'seasonal_threshold';\r\n    static update_threshold = 'update_threshold';\r\n    static mal_session_expired = 'mal_session_expired';\r\n    static mal_cookie_malhlogsessid = 'mal_cookie_malhlogsessid';\r\n    static mal_cookie_malsessionid = 'mal_cookie_malsessionid';\r\n    static mal_anime_in_a_row = 'mal_anime_in_a_row';\r\n    static mal_anime_scrape_time = 'mal_anime_scrape_time';\r\n    static mal_anime_update_time = 'mal_anime_update_time';\r\n    static mal_anime_seasonal_update_time = 'mal_anime_seasonal_update_time';\r\n    static last_mal_anime_scrape = 'last_mal_anime_scrape';\r\n    static last_mal_anime_update = 'last_mal_anime_update';\r\n    static last_mal_anime_seasonal_update = 'last_mal_anime_seasonal_update';\r\n    static mal_anime_updating_in_progress = 'mal_anime_updating_in_progress';\r\n    static mal_manga_in_a_row = 'mal_manga_in_a_row';\r\n    static mal_manga_scrape_time = 'mal_manga_scrape_time';\r\n    static mal_manga_update_time = 'mal_manga_update_time';\r\n    static mal_manga_seasonal_update_time = 'mal_manga_seasonal_update_time';\r\n    static last_mal_manga_scrape = 'last_mal_manga_scrape';\r\n    static last_mal_manga_update = 'last_mal_manga_update';\r\n    static last_mal_manga_seasonal_update = 'last_mal_manga_seasonal_update';\r\n    static mal_manga_updating_in_progress = 'mal_manga_updating_in_progress';\r\n    static mal_characters_in_a_row = 'mal_characters_in_a_row';\r\n    static mal_characters_scrape_time = 'mal_characters_scrape_time';\r\n    static mal_characters_update_time = 'mal_characters_update_time';\r\n    static last_mal_characters_scrape = 'last_mal_characters_scrape';\r\n    static last_mal_characters_update = 'last_mal_characters_update';\r\n    static mal_characters_updating_in_progress = 'mal_characters_updating_in_progress';\r\n    static mal_people_in_a_row = 'mal_people_in_a_row';\r\n}\r\n\r\nexport class Target {\r\n    static id = 'id';\r\n    static target = 'target';\r\n    static branch = 'branch';\r\n    static type = 'type';\r\n    static active = 'active';\r\n    static end_threshold = 'end_threshold';\r\n    static scrape_time = 'scrape_time';\r\n    static update_time = 'update_time';\r\n    static seasonal_update_time = 'seasonal_update_time';\r\n    static last_scrape = 'last_scrape';\r\n    static last_update = 'last_update';\r\n    static last_seasonal_update = 'last_seasonal_update';\r\n    static active_scrape = 'active_scrape';  // Report model\r\n    static history = 'history';  // Report model\r\n}\r\n\r\nexport class Report {\r\n    static active_target = 'active_target';\r\n    static history_of_target = 'history_of_target';\r\n    static title = 'title';\r\n    static branch = 'branch';\r\n    static type = 'type';\r\n    static target = 'target';\r\n    static finish_threshold = 'finish_threshold';\r\n    static target_url = 'target_url';\r\n    static images_folder = 'images_folder';\r\n    static main_file = 'main_file';\r\n    static started_id = 'started_id';\r\n    static finished_id = 'finished_id';\r\n    static code_404 = 'code_404';\r\n    static code_429 = 'code_429';\r\n    static code_other = 'code_other';\r\n    static total_added = 'total_added';\r\n    static total_removed = 'total_removed';\r\n    static progress = 'progress';\r\n    static eta_seconds = 'eta_seconds';\r\n    static message = 'message';\r\n    static other_info = 'other_info';\r\n    static operation_duration_sec = 'operation_duration_sec';\r\n    static finished = 'finished';\r\n    static error = 'error';\r\n    static datetime_created = 'datetime_created';\r\n    static datetime_finished = 'datetime_finished';\r\n}\r\n\r\nexport class StorageDisk {\r\n    static letter = 'letter';\r\n    static branch = 'branch';\r\n    static total = 'total';\r\n    static used = 'used';\r\n    static free = 'free';\r\n    static active = 'active';\r\n    static datetime_created = 'datetime_created';\r\n}\r\n","import React from 'react';\r\nimport {Howl} from 'howler';\r\nimport {Profile, User} from \"../../models\";\r\nimport store from \"../../store\";\r\n\r\n\r\nexport function loadSounds() {\r\n    playClickSound(0);\r\n    playHoverSound(0);\r\n    playExpand3Sound(0);\r\n    playExpand2Sound(0);\r\n    playExpandSound(0);\r\n    playErrorSound(0);\r\n    playWarningSound(0);\r\n    playDeploySound(0);\r\n}\r\n\r\nexport function playWelcomeSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/welcome.ogg'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playClickSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/click.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playDeploySound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/deploy.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playHoverSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/hover.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpandSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpand2Sound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand-2.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpand3Sound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 0.05;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand-3.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playFadeSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/fade.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playErrorSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/error.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playWarningSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/warning.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n","import {\r\n    ANIME_LOADING,\r\n    GET_ANIME,\r\n    CANCEL_ANIME_LOADING,\r\n    FILTER_ANIME,\r\n    GET_ANIME_DATA,\r\n    GET_ALL_CHARACTERS_FOR_ANIME,\r\n    GET_RELATIONS_FOR_ANIME,\r\n    GET_CURRENT_ANIME_FRANCHISE,\r\n    ANIME_FRANCHISE_LOADING,\r\n    GET_ANIME_DATA_STATISTICS,\r\n    GET_ANIME_SEARCHABLE_TITLES,\r\n    GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n    GET_PENDING_ANIME_SERVER_INFO, GET_ANIME_ON_SERVER, ANIME_ON_SERVER_LOADING\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Anime} from \"../models\";\r\n\r\nconst initialState = {\r\n    searchable_titles: [],\r\n\r\n    anime_loading: false,\r\n    anime: {},\r\n    anime_loaded: false,\r\n\r\n    anime_data: {},\r\n    anime_data_statistics: {},\r\n    anime_data_loaded: false,\r\n\r\n    anime_on_server: {},\r\n    anime_on_server_loading: false,\r\n\r\n    filtered_anime: {},\r\n    filtered_anime_loaded: false,\r\n\r\n    anime_franchise_loading: false,\r\n    anime_franchise: {},\r\n\r\n    pending_anime_server_infos: {}\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case ANIME_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_loading: true,\r\n                anime_loaded: false,\r\n                anime_data_loaded: false,\r\n                filtered_anime_loaded: false,\r\n            };\r\n        case ANIME_ON_SERVER_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_on_server_loading: true,\r\n                anime_on_server: {},\r\n            };\r\n        case CANCEL_ANIME_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_loaded: false,\r\n                anime_data_loaded: false,\r\n                filtered_anime_loaded: false,\r\n            };\r\n        case GET_ANIME_SEARCHABLE_TITLES:\r\n            return {\r\n                ...state,\r\n                searchable_titles: action.payload,\r\n            };\r\n        case GET_ANIME_DATA:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_data: action.payload,\r\n                anime_data_loaded: true,\r\n            };\r\n        case GET_ANIME_DATA_STATISTICS:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_data_statistics: action.payload['anime_statistics'],\r\n                anime_data_loaded: true,\r\n            };\r\n        case GET_ANIME_ACHIEVEMENT_THRESHOLDS:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_achievement_thresholds: action.payload,\r\n            };\r\n        case GET_ANIME:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                anime: action.payload,\r\n                anime_loading: false,\r\n                anime_loaded: true\r\n            };\r\n        case FILTER_ANIME:\r\n            return {\r\n                ...state,\r\n                filtered_anime: action.payload,\r\n                anime_loading: false,\r\n                filtered_anime_loaded: true\r\n            };\r\n        case GET_ALL_CHARACTERS_FOR_ANIME:\r\n            state.anime[Anime.all_characters] = action.payload;\r\n            return {\r\n                ...state,\r\n                anime: state.anime\r\n            };\r\n        case GET_RELATIONS_FOR_ANIME:\r\n            state.anime[Anime.anime_relations] = action.payload;\r\n            return {\r\n                ...state,\r\n                anime: state.anime\r\n            };\r\n        case ANIME_FRANCHISE_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_franchise_loading: true\r\n            };\r\n        case GET_CURRENT_ANIME_FRANCHISE:\r\n            return {\r\n                ...state,\r\n                anime_franchise: action.payload,\r\n                anime_franchise_loading: false\r\n            };\r\n        case GET_ANIME_ON_SERVER:\r\n            return {\r\n                ...state,\r\n                anime_on_server: action.payload,\r\n                anime_on_server_loading: false\r\n            };\r\n        case GET_PENDING_ANIME_SERVER_INFO:\r\n            return {\r\n                ...state,\r\n                pending_anime_server_infos: action.payload,\r\n                anime_loading: false\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    MANGA_LOADING,\r\n    GET_MANGA,\r\n    CANCEL_MANGA_LOADING,\r\n    FILTER_MANGA,\r\n    GET_MANGA_DATA,\r\n    GET_ALL_CHARACTERS_FOR_MANGA,\r\n    GET_RELATIONS_FOR_MANGA\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Manga} from \"../models\";\r\n\r\nconst initialState = {\r\n    manga_loading: false,\r\n    manga: {},\r\n    manga_loaded: false,\r\n    manga_data: {},\r\n    manga_data_loaded: {},\r\n    filtered_manga: {},\r\n    filtered_manga_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case MANGA_LOADING:\r\n            return {\r\n                ...state,\r\n                manga_loading: true,\r\n                manga_loaded: false,\r\n                manga_data_loaded: false,\r\n                filtered_manga_loaded: false,\r\n            };\r\n        case CANCEL_MANGA_LOADING:\r\n            return {\r\n                ...state,\r\n                manga_loading: false,\r\n                manga_loaded: false,\r\n                manga_data_loaded: false,\r\n                filtered_manga_loaded: false,\r\n            };\r\n        case GET_MANGA_DATA:\r\n            return {\r\n                ...state,\r\n                manga_loading: false,\r\n                manga_data: action.payload,\r\n                manga_data_loaded: true,\r\n            };\r\n        case GET_MANGA:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                manga: action.payload,\r\n                manga_loading: false,\r\n                manga_loaded: true\r\n            };\r\n        case FILTER_MANGA:\r\n            return {\r\n                ...state,\r\n                filtered_manga: action.payload,\r\n                manga_loading: false,\r\n                filtered_manga_loaded: true\r\n            };\r\n        case GET_ALL_CHARACTERS_FOR_MANGA:\r\n            state.manga[Manga.all_characters] = action.payload;\r\n            return {\r\n                ...state,\r\n                manga: state.manga\r\n            };\r\n        case GET_RELATIONS_FOR_MANGA:\r\n            state.manga[Manga.manga_relations] = action.payload;\r\n            return {\r\n                ...state,\r\n                manga: state.manga\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CREATE_MESSAGE, GET_ERRORS, CLEAN_ERRORS, CLEAR_MESSAGE} from \"./types\";\n\n// CREATE MESSAGE\nexport const createMessage = (msg, type) => {\n    return {\n        type: CREATE_MESSAGE,\n        payload: {msg, type}\n    };\n};\n\n// CLEAR MESSAGE\nexport const clearMessage = () => {\n    return {\n        type: CLEAR_MESSAGE,\n    };\n};\n\n// RETURN ERRORS\nexport const returnErrors = (msg, status) => {\n    return {\n        type: GET_ERRORS,\n        payload: {msg, status}\n    };\n};\n\n// CLEAN ERRORS\nexport const cleanErrors = () => {\n    return {\n        type: CLEAN_ERRORS,\n    };\n};\n","import axios from \"axios\";\r\n\r\nimport {\r\n    AUTH_USER,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    GET_USER,\r\n    SET_REDIRECT_URL,\r\n    UPDATE_USER_DISPLAY_SETTINGS_STORE,\r\n    UPDATE_USER_LIST_DESIGN_SETTINGS_STORE,\r\n    SET_OPEN_APPLICATIONS_STATUS\r\n} from \"./types\";\r\nimport {\r\n    API_AUTH_USER,\r\n    API_LOGIN,\r\n    API_REGISTER,\r\n    API_LOGOUT,\r\n    API_GET_USER,\r\n    API_GET_OPEN_APPLICATIONS_STATUS\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\n\r\n\r\n// GET OPEN APPLICATIONS STATUS\r\nexport const getOpenApplicationsStatus = () => dispatch => {\r\n    axios\r\n        .get(API_GET_OPEN_APPLICATIONS_STATUS)\r\n        .then(res => {\r\n            dispatch({\r\n                type: SET_OPEN_APPLICATIONS_STATUS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A SPECIFIC USER\r\nexport const getUser = id => (dispatch, getState) => {\r\n    dispatch({type: USER_LOADING});\r\n    axios\r\n        .get(API_GET_USER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// CHECK TOKEN & LOAD USER (GET LOGGED-IN USER)\r\nexport const authUser = () => (dispatch, getState) => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // noinspection JSUnusedLocalSymbols\r\n    axios\r\n        .get(API_AUTH_USER, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: AUTH_USER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n        });\r\n};\r\n\r\n// LOGIN USER\r\nexport const login = (username, password) => dispatch => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    // Request Body\r\n    const body = JSON.stringify({username, password});\r\n\r\n    axios\r\n        .post(API_LOGIN, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n// REGISTER USER\r\nexport const register = (new_user) => dispatch => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    // Request Body\r\n    const body = JSON.stringify(new_user);\r\n\r\n    axios\r\n        .post(API_REGISTER, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// LOGOUT USER\r\nexport const logout = () => (dispatch, getState) => {\r\n    // noinspection JSUnusedLocalSymbols\r\n    dispatch({type: LOGOUT_SUCCESS})\r\n    axios\r\n        .post(API_LOGOUT, null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS\r\n            });\r\n        })\r\n        .catch(err => {\r\n            // if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            // else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// setRedirectUrl\r\nexport const setRedirectUrl = pathname => dispatch => {\r\n    dispatch({\r\n        type: SET_REDIRECT_URL,\r\n        payload: pathname\r\n    });\r\n};\r\n\r\n\r\n// UPDATE USER ANIME DISPLAY SETTINGS\r\nexport const updateUserDisplaySettingsStore = (branch, settings) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_USER_DISPLAY_SETTINGS_STORE,\r\n        payload: settings,\r\n        branch: branch,\r\n    });\r\n};\r\n\r\n\r\n// UPDATE USER ANIME DISPLAY SETTINGS\r\nexport const updateUserListDesignSettingsStore = (branch, settings) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_USER_LIST_DESIGN_SETTINGS_STORE,\r\n        payload: settings,\r\n        branch: branch,\r\n    });\r\n};\r\n\r\n\r\n// Setup config with token - helper function\r\nexport const tokenConfig = getState => {\r\n    const token = getState().auth.token;\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    if (token)\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    return config;\r\n};\r\n","/**\r\n * These filter names must be the same as the field names in the django api function\r\n */\r\nexport class AnimeFilterNames {\r\n    static year = 'year';\r\n    static season = 'season';\r\n    static search = 'search';\r\n    static downloaded = 'downloaded';\r\n    static is_downloading = 'is_downloading';\r\n    static cannot_download = 'cannot_download';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static anime_on_server__english_sub = 'anime_on_server__english_sub';\r\n    static anime_on_server__english_dub = 'anime_on_server__english_dub';\r\n    static anime_on_server__japanese_dub = 'anime_on_server__japanese_dub';\r\n    static anime_on_server__japanese_sub = 'anime_on_server__japanese_sub';\r\n    static type = 'type';\r\n    static status = 'status';\r\n    static rating_short = 'rating_short';\r\n    static genres = 'genres';\r\n    static episodes_range = 'episodes_range';\r\n    static length_range = 'length_range';\r\n    static video_quality = 'video_quality';\r\n    static audio_channel = 'audio_channel';\r\n    static user_exclude = 'user_exclude';\r\n    static ordering = 'ordering';\r\n\r\n    static user_list_pk = 'user_list_pk';\r\n    static user_list_filter = 'user_list_filter';\r\n}\r\n\r\nexport class MangaFilterNames {\r\n    static year = 'year';\r\n    static season = 'season';\r\n    static search = 'search';\r\n    static downloaded = 'downloaded';\r\n    static is_downloading = 'is_downloading';\r\n    static cannot_download = 'cannot_download';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static volumes_range = 'volumes_range';\r\n    static chapters_range = 'chapters_range';\r\n    static genres = 'genres';\r\n    static type = 'type';\r\n    static status = 'status';\r\n    static user_exclude = 'user_exclude';\r\n    static ordering = 'ordering';\r\n\r\n    static user_list_pk = 'user_list_pk';\r\n    static user_list_filter = 'user_list_filter';\r\n}\r\n\r\nexport class ErogeFilterNames {\r\n    static search = 'search';\r\n    static type = 'type';\r\n    static downloaded = 'downloaded';\r\n    static platforms = 'platforms';\r\n    static language = 'language';\r\n    static censorship = 'censorship';\r\n    static tags = 'tags';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class CharactersFilterNames {\r\n    static search = 'search';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class PeopleFilterNames {\r\n    static search = 'search';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class FilterLabels {\r\n    static downloaded = 'Downloaded';\r\n    static is_downloading = 'Downloading';\r\n    static cannot_download = 'Dead';\r\n    static deleted_by_MAL = 'M-DEL';\r\n    static pending_by_MAL = 'M-PEN';\r\n}\r\n\r\nexport class FilterSchema {\r\n    static filter_name = 'name';\r\n    static label = 'label';\r\n    static color = 'color';\r\n    static content = 'content';\r\n    static marks = 'marks';\r\n    static max = 'max';\r\n    static min = 'min';\r\n    static type = 'type';\r\n}\r\n\r\nexport class FilterSchemaType {\r\n    static standard = 'standard';\r\n    static component = 'component';\r\n    static wide = 'wide';\r\n    static slider = 'slider';\r\n}","import {\r\n    SET_ANIME_FILTERS, SET_CHARACTERS_FILTERS,\r\n    SET_COOKIE_SHOW_FILTERS, SET_EROGE_FILTERS,\r\n    SET_MANGA_FILTERS, SET_PEOPLE_FILTERS\r\n} from \"./types\";\r\n\r\n\r\n// SET COOKIE SHOW FILTERS\r\nexport const setCookieShowFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_COOKIE_SHOW_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE ANIME FILTERS\r\nexport const setCookieAnimeFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_ANIME_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE MANGA FILTERS\r\nexport const setCookieMangaFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_MANGA_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE CHARACTERS FILTERS\r\nexport const setCookieCharactersFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_CHARACTERS_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE CHARACTERS FILTERS\r\nexport const setCookiePeopleFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_PEOPLE_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE EROGE FILTERS\r\nexport const setCookieErogeFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_EROGE_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};","import Moment from \"react-moment\";\r\nimport React from \"react\";\r\n\r\nimport moment from 'moment'\r\nimport {CYBER_GENESIS_URL} from \"../globals\";\r\nimport {CDNCoverImages, CoverImages} from \"../models\";\r\n\r\n\r\n/**\r\n * Check if an object is empty.\r\n * @param obj {Object} Object to check\r\n * @returns {boolean} True if the object is empty.\r\n */\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport function isEmpty(obj) {\r\n    if (obj == null) return true;\r\n    if (obj.length > 0) return false;\r\n    if (obj.length === 0) return true;\r\n    if (typeof obj !== \"object\") return true;\r\n    for (let key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n /**\r\n  * Formats the date based on the known info about the date, this is used for titles from MAL\r\n  * some titles only have the year of the date, so only the year will be displayed.\r\n  * @param  {String} date          The actual date.\r\n  * @param  {String} known_date    The known date.\r\n  * @param  {Boolean} str          If the return should be string instead.\r\n  * @return {JSX.Element || String}          Moment.js component or string.\r\n  */\r\nexport function formatContentDateByKnown(date, known_date, str = false) {\r\n    if (!known_date)\r\n        return null;\r\n    if (known_date.indexOf('day') >= 0 && known_date.indexOf('month') && known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('Do MMM YYYY');\r\n        return <Moment format=\"Do MMM YYYY\" date={date}/>;\r\n    } else if (known_date.indexOf('month') >= 0 && known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('MMM YYYY');\r\n        return <Moment format=\"MMM YYYY\" date={date}/>\r\n    }\r\n    else if (known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('YYYY');\r\n        return <Moment format=\"YYYY\" date={date}/>\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * Get cols number for browse titles cards based on window width.\r\n * @returns {number}\r\n */\r\nexport function getBrowseGridListCols(offset = 0) {\r\n    if (window.innerWidth - offset >= 2800)\r\n        return 9;\r\n    if (window.innerWidth - offset >= 2400)\r\n        return 8;\r\n    else if (window.innerWidth - offset >= 1800)\r\n        return 7;\r\n    else if (window.innerWidth - offset >= 1450)\r\n        return 6;\r\n    else if (window.innerWidth - offset >= 1200)\r\n        return 5;\r\n    else if (window.innerWidth - offset >= 980)\r\n        return 4;\r\n    else if (window.innerWidth - offset >= 720)\r\n        return 3;\r\n    else if (window.innerWidth - offset >= 360)\r\n        return 2;\r\n    return 1\r\n}\r\n\r\n/**\r\n * Parse number of bytes to human readable format.\r\n * @param size {Number}\r\n * @returns {string}\r\n */\r\nexport function formatBytes(size) {\r\n    const terabyte = 1099511627776;\r\n    const gigabyte = 1073741824;\r\n    const megabyte = 1048576;\r\n\r\n    if (size >= 10995116277760)  // More than 10TB\r\n        return `${(size / terabyte).toFixed(1)}TB`;\r\n    else if (size >= 1099511627776)  // More than 1TB\r\n        return `${(size / terabyte).toFixed(2)}TB`;\r\n    else if (size >= 107374182400) // More than 100GB\r\n        return `${Math.ceil(size / gigabyte)}GB`;\r\n    else if (size >= 10737418240) // More than 10GB\r\n        return `${(size / gigabyte).toFixed(1)}GB`;\r\n    else if (size >= 1073741824) // More than 1GB\r\n        return `${(size / gigabyte).toFixed(2)}GB`;\r\n    else  // Less then 1GB\r\n        return `${Math.ceil(size / megabyte)}MB`;\r\n}\r\n\r\n\r\n/**\r\n * Returns a label representation of the season number sent.\r\n * @param season {Number} Season number.\r\n * @returns {string} Season label.\r\n */\r\nexport function getSeasonLabelFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1:\r\n            return 'Spring';\r\n        case 2:\r\n            return 'Summer';\r\n        case 3:\r\n            return 'Fall';\r\n        case 4:\r\n            return 'Winter';\r\n        default:\r\n            return 'Spring';\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * The program sleeps for the X ms provided.\r\n * @param ms {Number} Milliseconds for the program to sleep\r\n */\r\nexport function sleep(ms) {\r\n    let start = new Date().getTime();\r\n    let end = start;\r\n    while (end < start + ms) end = new Date().getTime();\r\n}\r\n\r\n\r\n/**\r\n * Converts a given date from CEST/UTC to local user time\r\n * @param date {Date} Date to convert\r\n * @returns {Date} returns a calculated Date in local user time\r\n */\r\nexport function convertUTCDateToLocalDate(date) {\r\n    let newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);\r\n\r\n    let offset = date.getTimezoneOffset() / 60;\r\n    let hours = date.getHours();\r\n\r\n    newDate.setHours(hours - offset);\r\n\r\n    return newDate;\r\n}\r\n\r\n\r\n/**\r\n * Get a cover picture for a title, prioritise the CDN image, and prioritise them by size.\r\n * @param {array} cdn_cover_images\r\n * @param {array} cover_images\r\n * @param {boolean} thumbnail: If true, try to return the thumbnail image\r\n * @returns {string}\r\n */\r\nexport function getTitleCoverImage(cdn_cover_images=[], cover_images=[], thumbnail=false) {\r\n    let img_url = `${CYBER_GENESIS_URL}/frontend/static/frontend/images/image-not-found.png`;\r\n    const len_cdn_images = cdn_cover_images.length;\r\n    const len_images = cover_images.length;\r\n\r\n    if (len_cdn_images > 0) {\r\n        if (len_cdn_images > 0) {\r\n            let largest = 0;\r\n            for (let x = 0; x < len_cdn_images; x ++) {\r\n                if (cdn_cover_images[x][CDNCoverImages.size] > largest) {\r\n                    largest = cdn_cover_images[x][CDNCoverImages.size];\r\n                    if (thumbnail)\r\n                        img_url = cdn_cover_images[x][CDNCoverImages.thumbnail_url];\r\n                    else\r\n                        img_url = cdn_cover_images[x][CDNCoverImages.image_url];\r\n                }\r\n            }\r\n        }\r\n    } else if (len_images > 0) {\r\n        if (len_images > 0) {\r\n            if (cover_images[len_images - 1][CoverImages.image][0] === '/')\r\n                img_url = `${CYBER_GENESIS_URL}${cover_images[len_images - 1][CoverImages.image]}`;\r\n            else\r\n                img_url = cover_images[len_images - 1][CoverImages.image];\r\n        }\r\n    }\r\n\r\n    return img_url\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} priority\r\n */\r\nexport function userTitlePriorityNumberToText(priority) {\r\n    if (priority === 4) return 'Very High'\r\n    if (priority === 3) return 'High'\r\n    if (priority === 2) return 'Medium'\r\n    if (priority === 1) return 'Low'\r\n    if (priority === 0) return 'Very Low'\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} statuses\r\n * @param {Number} title_id\r\n */\r\nexport function isIdInStatuses(statuses, title_id) {\r\n    return statuses.hasOwnProperty(title_id)\r\n}\r\n\r\n\r\nconst REFERENCE = moment();\r\nconst TODAY = REFERENCE.clone().startOf('day');\r\nconst YESTERDAY = REFERENCE.clone().subtract(1, 'days').startOf('day');\r\nconst A_WEEK_OLD = REFERENCE.clone().subtract(7, 'days').startOf('day');\r\nconst A_MONTH_OLD = REFERENCE.clone().subtract(30, 'days').startOf('day');\r\nconst SIX_MONTHS_OLD = REFERENCE.clone().subtract(180, 'days').startOf('day');\r\nconst A_YEAR_OLD = REFERENCE.clone().subtract(1, 'years').startOf('years');\r\nconst TWO_YEARS_OLD = REFERENCE.clone().subtract(2, 'years').startOf('years');\r\n\r\nexport function isTimeLessThanAnHourAgo(last_login) {\r\n    const ONE_HOUR = 60 * 60 * 1000; /* ms */\r\n    return ((new Date) - last_login) < ONE_HOUR;\r\n}\r\n\r\nexport function isTimeLessThanSixHoursAgo(last_login) {\r\n    const ONE_HOUR = 60 * 60 * 1000; /* ms */\r\n    return ((new Date) - last_login) < ONE_HOUR * 6;\r\n}\r\n\r\nexport function isToday(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isSame(TODAY, 'd');\r\n}\r\nexport function isYesterday(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isSame(YESTERDAY, 'd');\r\n}\r\nexport function isWithinAWeek(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_WEEK_OLD);\r\n}\r\nexport function isWithinAMonth(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_MONTH_OLD);\r\n}\r\nexport function isWithinSixMonths(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(SIX_MONTHS_OLD);\r\n}\r\nexport function isWithinAYear(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_YEAR_OLD);\r\n}\r\nexport function isMoreThanAYear(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(TWO_YEARS_OLD);\r\n}","import axios from 'axios';\r\n\r\nimport {\r\n    GET_ANIME,\r\n    ANIME_LOADING,\r\n    FILTER_ANIME,\r\n    CANCEL_ANIME_LOADING,\r\n    GET_ANIME_DATA,\r\n    GET_ALL_CHARACTERS_FOR_ANIME,\r\n    CHARACTERS_LOADING,\r\n    GET_RELATIONS_FOR_ANIME,\r\n    ANIME_FRANCHISE_LOADING,\r\n    GET_CURRENT_ANIME_FRANCHISE,\r\n    UPDATE_USER_ENTRY_IN_FILTERED_USER_ANIME_ENTRIES,\r\n    GET_ANIME_DATA_STATISTICS,\r\n    GET_ANIME_SEARCHABLE_TITLES,\r\n    GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n    GET_PENDING_ANIME_SERVER_INFO,\r\n    GET_ANIME_ON_SERVER,\r\n    ANIME_ON_SERVER_LOADING\r\n} from './types'\r\nimport {\r\n    API_FILTER_ANIME,\r\n    API_GET_ALL_CHARACTERS_FOR_ANIME, API_GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n    API_GET_ANIME_DATA,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_ANIME_DATA_WITH_STATISTICS,\r\n    API_GET_ANIME_FRANCHISE, API_GET_ANIME_ON_SERVER,\r\n    API_GET_ANIME_SEARCHABLE_TITLES,\r\n    API_GET_ONE_ANIME, API_GET_PENDING_SERVER_ANIME,\r\n    API_GET_RELATIONS_FOR_ANIME\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {AnimeFilterNames, MangaFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {setCookieAnimeFilters} from \"./cookies\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {TYPE_BROWSE, TYPE_LIST, TYPE_SEASON, USER_ANIME_ORDERINGS} from \"../globals\";\r\nimport {tokenConfig} from \"./auth\";\r\n\r\n\r\n// GET ANIME DATA\r\nexport const getAnimeData = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ANIME_DATA, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME DATA FOR ANIME HOME PAGE\r\nexport const getAnimeDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME DATA WITH STATISTICS\r\nexport const getAnimeDataWithStatistics = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ANIME_DATA_WITH_STATISTICS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA_STATISTICS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME ACHIEVEMENTS THRESHOLDS\r\nexport const getAnimeAchievementsThresholds = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_ACHIEVEMENT_THRESHOLDS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A ONE ANIME\r\nexport const getAnime = id => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ONE_ANIME(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ALL CHARACTERS FOR ANIME\r\nexport const getAllCharactersForAnime = (id, page) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ALL_CHARACTERS_FOR_ANIME(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_CHARACTERS_FOR_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET RELATIONS FOR ANIME\r\nexport const getRelationsForAnime = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_RELATIONS_FOR_ANIME(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_RELATIONS_FOR_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME SPECIFIC FRANCHISE\r\nexport const getAnimeFranchise = (id) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_FRANCHISE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_FRANCHISE(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CURRENT_ANIME_FRANCHISE,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME SEARCHABLE TITLES\r\nexport const getAnimeSearchableTitles = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_ANIME_SEARCHABLE_TITLES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_SEARCHABLE_TITLES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL ANIME\r\nexport const filterAnime = (page, filters, season, list, loading = true, save_cookie = true, pagination = undefined) => (dispatch, getState) => {\r\n    if (loading)\r\n        dispatch({type: ANIME_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n    if (season !== undefined && season !== 'undefined' && !isEmpty(season)) {\r\n        config.params = setAnimeSeasonParams(config.params, season);\r\n        page_type = TYPE_SEASON;\r\n    }\r\n    if (list !== undefined && list !== 'undefined' && !isEmpty(list)) {\r\n        config.params = setAnimeListParams(config.params, list);\r\n        page_type = TYPE_LIST;\r\n    } else if (USER_ANIME_ORDERINGS.indexOf(config.params[AnimeFilterNames.ordering].replace('-', '')) > -1)\r\n        config.params[AnimeFilterNames.ordering] = '-members';\r\n\r\n    if (pagination && !isNaN(pagination))\r\n        config.params.pagination = pagination\r\n\r\n    axios\r\n        .get(API_FILTER_ANIME, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_ANIME,\r\n                payload: res.data\r\n            });\r\n            if (save_cookie && filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieAnimeFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// GET ANIME ON SERVER INFO\r\n/**\r\n *\r\n * @param {Number} id - ID of the anime itself\r\n * @returns {(function(*, *=): void)|*}\r\n */\r\nexport const getAnimeOnServerInfo = id => (dispatch, getState) => {\r\n    dispatch({type: ANIME_ON_SERVER_LOADING});\r\n    const config = tokenConfig(getState);\r\n\r\n    axios\r\n        .get(API_GET_ANIME_ON_SERVER(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_ON_SERVER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET PENDING ANIME SERVER INFOS\r\nexport const getPendingAnimeServerInfos = (page) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_PENDING_SERVER_ANIME, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_PENDING_ANIME_SERVER_INFO,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// CANCEL ANIME LOADING\r\nexport const cancelAnimeLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_ANIME_LOADING,\r\n    })\r\n};\r\n\r\n\r\nexport function setAnimeFilterParams(params, filters) {\r\n    if (filters[AnimeFilterNames.search] && typeof filters[AnimeFilterNames.search] == 'string') params[AnimeFilterNames.search] = filters[AnimeFilterNames.search];\r\n    if (filters[AnimeFilterNames.downloaded]) params[AnimeFilterNames.downloaded] = filters[AnimeFilterNames.downloaded];\r\n    if (filters[AnimeFilterNames.is_downloading]) params[AnimeFilterNames.is_downloading] = filters[AnimeFilterNames.is_downloading];\r\n    if (filters[AnimeFilterNames.cannot_download]) params[AnimeFilterNames.cannot_download] = filters[AnimeFilterNames.cannot_download];\r\n    if (filters[AnimeFilterNames.deleted_by_MAL]) params[AnimeFilterNames.deleted_by_MAL] = filters[AnimeFilterNames.deleted_by_MAL];\r\n    if (filters[AnimeFilterNames.pending_by_MAL]) params[AnimeFilterNames.pending_by_MAL] = filters[AnimeFilterNames.pending_by_MAL];\r\n    if (filters[AnimeFilterNames.anime_on_server__english_sub])\r\n        params[AnimeFilterNames.anime_on_server__english_sub] = filters[AnimeFilterNames.anime_on_server__english_sub];\r\n    if (filters[AnimeFilterNames.anime_on_server__english_dub])\r\n        params[AnimeFilterNames.anime_on_server__english_dub] = filters[AnimeFilterNames.anime_on_server__english_dub];\r\n    if (filters[AnimeFilterNames.anime_on_server__japanese_sub])\r\n        params[AnimeFilterNames.anime_on_server__japanese_sub] = filters[AnimeFilterNames.anime_on_server__japanese_sub];\r\n    if (filters[AnimeFilterNames.anime_on_server__japanese_dub])\r\n        params[AnimeFilterNames.anime_on_server__japanese_dub] = filters[AnimeFilterNames.anime_on_server__japanese_dub];\r\n    if (filters[AnimeFilterNames.episodes_range].length > 0) params[AnimeFilterNames.episodes_range] = filters[AnimeFilterNames.episodes_range].join();\r\n    if (filters[AnimeFilterNames.length_range].length > 0) params[AnimeFilterNames.length_range] = filters[AnimeFilterNames.length_range].join();\r\n    if (filters[AnimeFilterNames.genres].length > 0) params[AnimeFilterNames.genres] = filters[AnimeFilterNames.genres].join();\r\n    if (filters[AnimeFilterNames.type].length > 0) params[AnimeFilterNames.type] = filters[AnimeFilterNames.type].join();\r\n    if (filters[AnimeFilterNames.status].length > 0) params[AnimeFilterNames.status] = filters[AnimeFilterNames.status].join();\r\n    if (filters[AnimeFilterNames.rating_short].length > 0) params[AnimeFilterNames.rating_short] = filters[AnimeFilterNames.rating_short].join();\r\n    if (filters[AnimeFilterNames.video_quality].length > 0) params[AnimeFilterNames.video_quality] = filters[AnimeFilterNames.video_quality].join();\r\n    if (filters[AnimeFilterNames.audio_channel].length > 0) params[AnimeFilterNames.audio_channel] = filters[AnimeFilterNames.audio_channel].join();\r\n    if (filters[AnimeFilterNames.user_exclude].length > 0) params[AnimeFilterNames.user_exclude] = filters[AnimeFilterNames.user_exclude].join();\r\n    if (filters[AnimeFilterNames.ordering]) params[AnimeFilterNames.ordering] = filters[AnimeFilterNames.ordering];\r\n    return params\r\n}\r\n\r\nfunction setAnimeSeasonParams(params, season) {\r\n    params[AnimeFilterNames.year] = season[AnimeFilterNames.year];\r\n    params[AnimeFilterNames.season] = season[AnimeFilterNames.season];\r\n    return params\r\n}\r\n\r\nfunction setAnimeListParams(params, list) {\r\n    params[AnimeFilterNames.user_list_filter] = list[AnimeFilterNames.user_list_filter];\r\n    params[AnimeFilterNames.user_list_pk] = list[AnimeFilterNames.user_list_pk];\r\n    if (params[AnimeFilterNames.user_exclude] && params[AnimeFilterNames.user_exclude].length > 0)\r\n        params[AnimeFilterNames.user_exclude] = null;\r\n    return params\r\n}\r\n","import {\r\n    MANGA_LOADING,\r\n    CANCEL_MANGA_LOADING,\r\n    GET_MANGA,\r\n    FILTER_MANGA,\r\n    GET_MANGA_DATA,\r\n    GET_ALL_CHARACTERS_FOR_MANGA,\r\n    GET_RELATIONS_FOR_MANGA, CANCEL_CHARACTERS_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_MANGA,\r\n    API_GET_ALL_CHARACTERS_FOR_MANGA,\r\n    API_GET_MANGA_DATA, API_GET_MANGA_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_MANGA,\r\n    API_GET_RELATIONS_FOR_MANGA\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {MangaFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {setCookieMangaFilters} from \"./cookies\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {TYPE_BROWSE, TYPE_LIST, TYPE_SEASON, USER_MANGA_ORDERINGS} from \"../globals\";\r\n\r\n\r\n// GET MANGA DATA\r\nexport const getMangaData = () => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n    axios\r\n        .get(API_GET_MANGA_DATA, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET MANGA DATA FOR MANGA HOME PAGE\r\nexport const getMangaDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_MANGA_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A ONE MANGA\r\nexport const getManga = id => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_MANGA(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ALL CHARACTERS FOR MANGA\r\nexport const getAllCharactersForManga = (id, page) => (dispatch, getState) => {\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ALL_CHARACTERS_FOR_MANGA(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_CHARACTERS_FOR_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET RELATIONS FOR MANGA\r\nexport const getRelationsForManga = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_RELATIONS_FOR_MANGA(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_RELATIONS_FOR_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL MANGA\r\nexport const filterManga = (page, filters, season, list, loading = true, save_cookie = true, pagination = undefined) => (dispatch, getState) => {\r\n    if (loading)\r\n        dispatch({type: MANGA_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n    if (season !== undefined && season !== 'undefined' && !isEmpty(season)) {\r\n        config.params = setMangaSeasonParams(config.params, season);\r\n        page_type = TYPE_SEASON;\r\n    }\r\n    if (list !== undefined && list !== 'undefined' && !isEmpty(list)) {\r\n        config.params = setMangaListParams(config.params, list);\r\n        page_type = TYPE_LIST;\r\n    } else if (USER_MANGA_ORDERINGS.indexOf(config.params[MangaFilterNames.ordering].replace('-', '')) > -1)\r\n        config.params[MangaFilterNames.ordering] = '-members';\r\n\r\n    if (pagination && !isNaN(pagination))\r\n        config.params.pagination = pagination\r\n\r\n    axios\r\n        .get(API_FILTER_MANGA, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_MANGA,\r\n                payload: res.data\r\n            });\r\n            if (save_cookie && filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieMangaFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setMangaFilterParams(params, filters) {\r\n    if (filters[MangaFilterNames.search] && typeof filters[MangaFilterNames.search] == 'string') params[MangaFilterNames.search] = filters[MangaFilterNames.search];\r\n    if (filters[MangaFilterNames.downloaded]) params[MangaFilterNames.downloaded] = filters[MangaFilterNames.downloaded];\r\n    if (filters[MangaFilterNames.is_downloading]) params[MangaFilterNames.is_downloading] = filters[MangaFilterNames.is_downloading];\r\n    if (filters[MangaFilterNames.cannot_download]) params[MangaFilterNames.cannot_download] = filters[MangaFilterNames.cannot_download];\r\n    if (filters[MangaFilterNames.deleted_by_MAL]) params[MangaFilterNames.deleted_by_MAL] = filters[MangaFilterNames.deleted_by_MAL];\r\n    if (filters[MangaFilterNames.pending_by_MAL]) params[MangaFilterNames.pending_by_MAL] = filters[MangaFilterNames.pending_by_MAL];\r\n    if (filters[MangaFilterNames.volumes_range].length > 0) params[MangaFilterNames.volumes_range] = filters[MangaFilterNames.volumes_range].join();\r\n    if (filters[MangaFilterNames.chapters_range].length > 0) params[MangaFilterNames.chapters_range] = filters[MangaFilterNames.chapters_range].join();\r\n    if (filters[MangaFilterNames.genres].length > 0) params[MangaFilterNames.genres] = filters[MangaFilterNames.genres].join();\r\n    if (filters[MangaFilterNames.type].length > 0) params[MangaFilterNames.type] = filters[MangaFilterNames.type].join();\r\n    if (filters[MangaFilterNames.status].length > 0) params[MangaFilterNames.status] = filters[MangaFilterNames.status].join();\r\n    if (filters[MangaFilterNames.user_exclude].length > 0) params[MangaFilterNames.user_exclude] = filters[MangaFilterNames.user_exclude].join();\r\n    if (filters[MangaFilterNames.ordering]) params[MangaFilterNames.ordering] = filters[MangaFilterNames.ordering];\r\n    return params\r\n}\r\n\r\nexport function setMangaSeasonParams(params, season) {\r\n    params[MangaFilterNames.year] = season[MangaFilterNames.year];\r\n    params[MangaFilterNames.season] = season[MangaFilterNames.season];\r\n    return params\r\n}\r\n\r\nexport function setMangaListParams(params, season) {\r\n    params[MangaFilterNames.user_list_filter] = season[MangaFilterNames.user_list_filter];\r\n    params[MangaFilterNames.user_list_pk] = season[MangaFilterNames.user_list_pk];\r\n    if (params[MangaFilterNames.user_exclude] && params[MangaFilterNames.user_exclude].length > 0)\r\n        params[MangaFilterNames.user_exclude] = null;\r\n    return params\r\n}\r\n\r\n\r\n// CANCEL MANGA LOADING\r\nexport const cancelMangaLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_MANGA_LOADING,\r\n    })\r\n};\r\n","import axios from \"axios\";\r\n\r\nimport {\r\n    ANIME_LOADING,\r\n    CANCEL_EROGE_LOADING,\r\n    EROGE_LOADING,\r\n    FILTER_EROGE, GET_ANIME_DATA,\r\n    GET_EROGE, GET_EROGE_DATA\r\n} from \"./types\";\r\nimport {\r\n    API_FILTER_EROGE,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_EROGE_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_EROGE\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieErogeFilters} from \"./cookies\";\r\nimport {ErogeFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {TYPE_BROWSE} from \"../globals\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\n\r\n\r\n// GET A ONE EROGE\r\nexport const getEroge = id => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_EROGE(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET EROGE DATA FOR EROGE HOME PAGE\r\nexport const getErogeDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_EROGE_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL EROGE\r\nexport const filterEroge = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_EROGE, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_EROGE,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieErogeFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setErogeFilterParams(params, filters) {\r\n    if (filters[ErogeFilterNames.search] && typeof filters[ErogeFilterNames.search] == 'string') params[ErogeFilterNames.search] = filters[ErogeFilterNames.search];\r\n    if (filters[ErogeFilterNames.downloaded]) params[ErogeFilterNames.downloaded] = filters[ErogeFilterNames.downloaded];\r\n    if (filters[ErogeFilterNames.type].length > 0) params[ErogeFilterNames.type] = filters[ErogeFilterNames.type].join();\r\n    if (filters[ErogeFilterNames.platforms].length > 0) params[ErogeFilterNames.platforms] = filters[ErogeFilterNames.platforms].join();\r\n    if (filters[ErogeFilterNames.censorship].length > 0) params[ErogeFilterNames.censorship] = filters[ErogeFilterNames.censorship].join();\r\n    if (filters[ErogeFilterNames.language].length > 0) params[ErogeFilterNames.language] = filters[ErogeFilterNames.language].join();\r\n    if (filters[ErogeFilterNames.tags].length > 0) params[ErogeFilterNames.tags] = filters[ErogeFilterNames.tags].join();\r\n    if (filters[ErogeFilterNames.ordering]) params[ErogeFilterNames.ordering] = filters[ErogeFilterNames.ordering];\r\n    return params\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA,\r\n    store_reducer_cookies,\r\n    store_reducers,\r\n    USER_ANIME_STATUSES,\r\n    USER_MANGA_STATUSES\r\n} from \"../globals\";\r\nimport {\r\n    API_CHANGE_USER_PROFILE_IMAGE,\r\n    API_DELETE_ANIME_HISTORY_ENTRY,\r\n    API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY,\r\n    API_DELETE_MANGA_VOLUME_HISTORY_ENTRY,\r\n    API_EDIT_USER_BIO,\r\n    API_GET_ALL_USERS,\r\n    API_GET_USER_LIST,\r\n    API_GET_VISITED_USER_ANIME_HISTORY,\r\n    API_GET_VISITED_USER_MANGA_HISTORY,\r\n    API_IMPORT_MAL_XML_FOR_ANIME_LIST,\r\n    API_UPDATE_AND_GET_USER_ANIME_STATISTICS,\r\n    API_UPDATE_USER_LIST,\r\n    API_USER_ANIME_ENTRY,\r\n    API_USER_ANIME_ENTRY_NOID,\r\n    API_USER_ANIME_ENTRY_STATUSES,\r\n    API_USER_ANIME_UPDATE_EPISODE,\r\n    API_USER_ANIME_FILTERS_PRESET,\r\n    API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_USER_MANGA_ENTRY,\r\n    API_USER_MANGA_ENTRY_NOID,\r\n    API_USER_MANGA_ENTRY_STATUSES,\r\n    API_USER_MANGA_UPDATE_CHAPTER,\r\n    API_USER_MANGA_UPDATE_VOLUME,\r\n    API_USER_MANGA_FILTERS_PRESET,\r\n    API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_CHANGE_CYBER_SOUND_STATUS,\r\n    API_ADD_TO_FAVORITES,\r\n    API_REMOVE_FROM_FAVORITES,\r\n    API_EDIT_USER_ABOUT_ME_BBCODE,\r\n    API_USER_EROGE_FILTERS_PRESET,\r\n    API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_SCRAPE_EPISODE_HISTORY_FROM_MAL,\r\n    API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES,\r\n    API_GET_USER_ACHIEVEMENTS,\r\n    API_IMPORT_MAL_XML_FOR_MANGA_LIST,\r\n    API_SET_ANIME_LIST_TO_PRIVATE,\r\n    API_SET_ANIME_LIST_TO_PUBLIC,\r\n    API_SET_ANIME_HISTORY_TO_PRIVATE,\r\n    API_SET_ANIME_HISTORY_TO_PUBLIC,\r\n    API_SET_MANGA_LIST_TO_PRIVATE,\r\n    API_SET_MANGA_LIST_TO_PUBLIC,\r\n    API_SET_MANGA_HISTORY_TO_PRIVATE,\r\n    API_SET_MANGA_HISTORY_TO_PUBLIC,\r\n    API_EDIT_USER_ABOUT_ME_BACKGROUND,\r\n    API_UPDATE_USER_ANIME_DISPLAY_SETTINGS,\r\n    API_UPDATE_USER_MANGA_DISPLAY_SETTINGS,\r\n    API_UPDATE_USER_EROGE_DISPLAY_SETTINGS, API_UPDATE_USER_ANIME_LIST_SETTINGS, API_UPDATE_USER_MANGA_LIST_SETTINGS,\r\n} from \"./api_urls\";\r\nimport {\r\n    AUTH_USER,\r\n    CANCEL_USER_ACHIEVEMENTS_LOADING,\r\n    CANCEL_USER_LIST_LOADING,\r\n    CLEAR_USER_ACHIEVEMENTS,\r\n    CLEAR_USER_ANIME_ENTRY,\r\n    CLEAR_USER_MANGA_ENTRY,\r\n    FINISH_LOADING_USER_ENTRY,\r\n    FINISH_UPLOADING_FILE,\r\n    GET_ALL_USERS,\r\n    GET_ANIME_FILTER_PRESETS,\r\n    GET_EROGE_FILTER_PRESETS,\r\n    GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    GET_MANGA_FILTER_PRESETS,\r\n    GET_PROFILE_PRIVACY_SETTINGS,\r\n    GET_USER_ACHIEVEMENTS,\r\n    GET_USER_ANIME_ENTRY,\r\n    GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    GET_USER_LIST,\r\n    GET_USER_MANGA_ENTRY,\r\n    GET_VISITED_USER_ANIME_HISTORY,\r\n    GET_VISITED_USER_MANGA_HISTORY,\r\n    SET_ANIME_PRESET,\r\n    SET_EROGE_PRESET,\r\n    SET_MANGA_PRESET,\r\n    UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    UPDATE_USER_ANIME_BROWSE_SETTINGS, UPDATE_USER_ANIME_LIST_SETTINGS,\r\n    UPDATE_USER_ANIME_STATISTICS,\r\n    UPDATE_USER_EROGE_BROWSE_SETTINGS,\r\n    UPDATE_USER_LIST,\r\n    UPDATE_USER_MANGA_BROWSE_SETTINGS, UPDATE_USER_MANGA_LIST_SETTINGS,\r\n    UPLOAD_ANIME_LIST_MAL_XML,\r\n    UPLOAD_MANGA_LIST_MAL_XML,\r\n    UPLOADING_FILE,\r\n    USER_ACHIEVEMENTS_LOADING,\r\n    USER_ENTRY_LOADING,\r\n    USER_INFO_LOADING,\r\n    USER_LIST_LOADING,\r\n    USER_STATISTICS_LOADING\r\n} from \"./types\";\r\nimport store from \"../store\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\nimport {authUser, getUser, tokenConfig, updateUserDisplaySettingsStore, updateUserListDesignSettingsStore} from \"./auth\";\r\nimport {Alert} from \"../models\";\r\nimport {filterAnime, setAnimeFilterParams} from \"./anime\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {filterManga, setMangaFilterParams} from \"./manga\";\r\nimport {setErogeFilterParams} from \"./eroge\";\r\n\r\n\r\n// GET ALL USERS\r\nexport const getAllUsers = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_ALL_USERS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_USERS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET FILTER PRESETS\r\nexport const getAnimeFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_ANIME_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE FILTER PRESET\r\nexport const saveAnimeFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_ANIME_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateAnimeFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteAnimeFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET MANGA FILTER PRESETS\r\nexport const getMangaFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_MANGA_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE MANGA FILTER PRESET\r\nexport const saveMangaFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_MANGA_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateMangaFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteMangaFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET FILTER PRESETS\r\nexport const getErogeFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_EROGE_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE FILTER PRESET\r\nexport const saveErogeFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_EROGE_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateErogeFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteErogeFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPLOAD COVER IMAGE AND UPDATE THE USER\r\nexport const updateUserProfileImage = (file, id) => (dispatch, getState) => {\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_CHANGE_USER_PROFILE_IMAGE, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Profile Image changed successfully!', Alert.type_success));\r\n            dispatch({type: FINISH_UPLOADING_FILE});\r\n            dispatch(getUser(id));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: FINISH_UPLOADING_FILE});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPLOAD XML FILE IN MAL FORMAT TO UPDATE THE ANIME LIST\r\nexport const importMalXmlForAnimeList = file => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    dispatch(createMessage('Importing Anime List..', Alert.type_info));\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_IMPORT_MAL_XML_FOR_ANIME_LIST, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Anime List imported successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: UPLOAD_ANIME_LIST_MAL_XML,\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        });\r\n};\r\n\r\n\r\n// UPLOAD XML FILE IN MAL FORMAT TO UPDATE THE MANGA LIST\r\nexport const importMalXmlForMangaList = file => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    dispatch(createMessage('Importing Manga List..', Alert.type_info));\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_IMPORT_MAL_XML_FOR_MANGA_LIST, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Manga List imported successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: UPLOAD_MANGA_LIST_MAL_XML,\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        });\r\n};\r\n\r\n\r\n// SCRAPE USER ANIME EPISODE HISTORY FROM MAL\r\nexport const scrapeEpisodeHistoryFromMal = (malhlogsessid, malsessionid) => (dispatch, getState) => {\r\n    const formData = new FormData();\r\n    console.log('MAL COOKIES:', malhlogsessid, malsessionid);\r\n    formData.append('MALHLOGSESSID', malhlogsessid);\r\n    formData.append('MALSESSIONID', malsessionid);\r\n\r\n    const config = tokenConfig(getState);\r\n\r\n    dispatch({type: USER_LIST_LOADING});\r\n\r\n    axios\r\n        .post(API_SCRAPE_EPISODE_HISTORY_FROM_MAL, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('The scraper has started successfully. This may last up to few hours ' +\r\n                'depending on your list size.', Alert.type_info));\r\n            dispatch({\r\n                type: GET_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_USER_LIST_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// EDIT USER'S BIO\r\nexport const editUserBio = (bio) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('bio', bio);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_BIO, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User bio changed successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// EDIT USER'S ABOUT ME BBCODE\r\nexport const editUserAboutMeBBCode = (bbcode) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('bbcode', bbcode);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_ABOUT_ME_BBCODE, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User About me BBCode changed successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n\r\n// EDIT USER'S ABOUT ME BACKGROUND\r\nexport const editUserAboutMeBackground = (background_style) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('background_style', JSON.stringify(background_style));\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_ABOUT_ME_BACKGROUND, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User About me Background updated successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// GET USER LISTS\r\nexport const getUserList = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_GET_USER_LIST(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// ANIME USER ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// UPDATE & GET USER ANIME STATISTICS\r\nexport const updateAndGetUserAnimeStatistics = id => (dispatch, getState) => {\r\n    dispatch({type: USER_STATISTICS_LOADING});\r\n    axios\r\n        .get(API_UPDATE_AND_GET_USER_ANIME_STATISTICS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Stats updated!', Alert.type_success));\r\n            dispatch({\r\n                type: UPDATE_USER_ANIME_STATISTICS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            // if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            // else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET USER VISITED USER ANIME HISTORY\r\nexport const getVisitedUserAnimeHistory = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: USER_INFO_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    if (page && page !== 1) config.params = {'page': page};\r\n\r\n    axios\r\n        .get(API_GET_VISITED_USER_ANIME_HISTORY(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_VISITED_USER_ANIME_HISTORY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {});\r\n};\r\n\r\n\r\n// UPDATE USER ANIME STATISTICS\r\nexport const updateUserList = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_UPDATE_USER_LIST(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: UPDATE_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET_USER_ACHIEVEMENTS\r\nexport const getUserAchievements = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ACHIEVEMENTS_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_USER_ACHIEVEMENTS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ACHIEVEMENTS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_USER_ACHIEVEMENTS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// CLEAR_USER_ACHIEVEMENTS\r\nexport const clearUserAchievements = () => dispatch => {\r\n    dispatch({\r\n        type: CLEAR_USER_ACHIEVEMENTS,\r\n    })\r\n};\r\n\r\n\r\n// GET USER ANIME ENTRY\r\n/**\r\n * Pass the Anime ID corresponding to the user entry\r\n * @param id {Number} Anime ID\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const getUserAnimeEntry = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .get(API_USER_ANIME_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: CLEAR_USER_ANIME_ENTRY,\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// ADD/CREATE USER ANIME ENTRY\r\nexport const addAnimeEntry = entryInfo => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entryInfo);\r\n\r\n    axios\r\n        .post(API_USER_ANIME_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime added!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// INSTANT DROP AN ANIME\r\nexport const addAnimeEntryInstantDrop = (id) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    const body = JSON.stringify({\r\n        anime: id,\r\n        watched_episodes: 0,\r\n        start_date: new Date(),\r\n        finish_date: new Date(),\r\n        score: 0,\r\n        status: USER_ANIME_STATUSES.dropped,\r\n        times_watched: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rewatching: false,\r\n        rewatching_episode: 0,\r\n    });\r\n\r\n    axios\r\n        .post(API_USER_ANIME_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime dropped!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE USER ANIME ENTRY\r\nexport const updateAnimeEntry = (id, entry_info, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entry_info);\r\n\r\n    axios\r\n        .put(API_USER_ANIME_ENTRY(id), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Entry updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_ANIME_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE ANIME EPISODE\r\nexport const updateAnimeEpisode = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .post(API_USER_ANIME_UPDATE_EPISODE(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Episode updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_ANIME_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// DELETE USER ANIME ENTRY\r\n/**\r\n *\r\n * @param {Number} id - ID of the anime\r\n * @param {Object} list\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const deleteAnimeEntry = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .delete(API_USER_ANIME_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime deleted', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: CLEAR_USER_ANIME_ENTRY,\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// DELETE USER ANIME ENTRY HISTORY\r\nexport const deleteAnimeHistoryEntry = (history_id, anime_id) => (dispatch, getState) => {\r\n\r\n    axios\r\n        .delete(API_DELETE_ANIME_HISTORY_ENTRY(history_id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('History entry deleted!', Alert.type_success));\r\n            dispatch(getUserAnimeEntry(anime_id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// MANGA USER ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// GET USER VISITED USER MANGA HISTORY\r\nexport const getVisitedUserMangaHistory = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: USER_INFO_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    if (page && page !== 1) config.params = {'page': page};\r\n\r\n    axios\r\n        .get(API_GET_VISITED_USER_MANGA_HISTORY(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_VISITED_USER_MANGA_HISTORY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {});\r\n};\r\n\r\n\r\n// GET USER MANGA ENTRY\r\n/**\r\n * Pass the Manga ID corresponding to the user entry\r\n * @param id {Number} Manga ID\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const getUserMangaEntry = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .get(API_USER_MANGA_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: CLEAR_USER_MANGA_ENTRY,\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// ADD/CREATE USER MANGA ENTRY\r\nexport const addMangaEntry = entryInfo => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entryInfo);\r\n\r\n    axios\r\n        .post(API_USER_MANGA_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga added!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// INSTANT DROP A MANGA\r\nexport const addMangaEntryInstantDrop = (id) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    const initial_values = {\r\n        manga: id,\r\n        read_volumes: 0,\r\n        read_chapters: 0,\r\n        start_date: new Date(),\r\n        finish_date: new Date(),\r\n        score: 0,\r\n        status: USER_MANGA_STATUSES.dropped,\r\n        times_read: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rereading: false,\r\n        rereading_volume: 0,\r\n        rereading_chapter: 0,\r\n        errors: false\r\n    };\r\n    const body = JSON.stringify(initial_values);\r\n\r\n    axios\r\n        .post(API_USER_MANGA_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga dropped!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE USER MANGA ENTRY\r\nexport const updateMangaEntry = (id, entry_info, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entry_info);\r\n\r\n    axios\r\n        .put(API_USER_MANGA_ENTRY(id), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Entry updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE MANGA VOLUME\r\nexport const updateMangaVolume = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .post(API_USER_MANGA_UPDATE_VOLUME(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Volume updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE MANGA CHAPTER\r\nexport const updateMangaChapter = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .post(API_USER_MANGA_UPDATE_CHAPTER(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Chapter updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// DELETE USER MANGA ENTRY\r\n/**\r\n *\r\n * @param {Number} id - ID of the Manga\r\n * @param {Object} list\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const deleteMangaEntry = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .delete(API_USER_MANGA_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga deleted', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: CLEAR_USER_MANGA_ENTRY,\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// DELETE USER MANGA ENTRY HISTORY VOLUME/CHAPTER\r\nexport const deleteMangaVolumeChapterHistoryEntry = (history_id, manga_id, type) => (dispatch, getState) => {\r\n    let url = API_DELETE_MANGA_VOLUME_HISTORY_ENTRY(history_id);\r\n\r\n    if (type === 'chapter')\r\n        url = API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY(history_id);\r\n\r\n    axios\r\n        .delete(url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('History entry deleted!', Alert.type_success));\r\n            dispatch(getUserMangaEntry(manga_id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\nexport const setSelectedAnimePreset = (preset) => {\r\n    return {\r\n        type: SET_ANIME_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\nexport const setSelectedMangaPreset = (preset) => {\r\n    return {\r\n        type: SET_MANGA_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\nexport const setSelectedErogePreset = (preset) => {\r\n    return {\r\n        type: SET_EROGE_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\n// GET LOGGED IN USER ANIME ENTRY STATUSES\r\nexport const getLoggedInUserAnimeEntryStatuses = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_ANIME_ENTRY_STATUSES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET LOGGED IN USER ANIME ENTRY STATUSES\r\nexport const getLoggedInUserMangaEntryStatuses = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_MANGA_ENTRY_STATUSES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// MUTE/UNMUTE USER THEME SOUNDS\r\nexport const muteUnmuteThemeSounds = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_CHANGE_CYBER_SOUND_STATUS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: AUTH_USER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// ADD TO FAVORITES\r\nexport const addToFavorites = (branch, id) => (dispatch, getState) => {\r\n    let body = {'title_id': id};\r\n\r\n    axios\r\n        .post(API_ADD_TO_FAVORITES(branch), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} added to favorites`, Alert.type_success));\r\n            dispatch(authUser())\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// ADD TO FAVORITES\r\nexport const removeFromFavorites = (branch, id) => (dispatch, getState) => {\r\n    let body = {'title_id': id};\r\n\r\n    axios\r\n        .post(API_REMOVE_FROM_FAVORITES(branch), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} removed from favorites`, Alert.type_success));\r\n            dispatch(authUser())\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// GET USER EPISODE HISTORY SCRAPER PROGRESS\r\nexport const getUserEpisodeHistoryScraperProgress = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FIX USER START AND FINISH DATE FOR ANIME ENTRIES\r\nexport const fixUserStartAndFinishDateForAnimeEntries = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Fixing completed.', Alert.type_success))\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER ANIME LIST PRIVACY\r\nexport const updateUserAnimeListPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_ANIME_LIST_TO_PRIVATE : API_SET_ANIME_LIST_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Anime List has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER ANIME HISTORY PRIVACY\r\nexport const updateUserAnimeHistoryPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_ANIME_HISTORY_TO_PRIVATE : API_SET_ANIME_HISTORY_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Anime History has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER MANGA LIST PRIVACY\r\nexport const updateUserMangaListPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_MANGA_LIST_TO_PRIVATE : API_SET_MANGA_LIST_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Manga List has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER MANGA HISTORY PRIVACY\r\nexport const updateUserMangaHistoryPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_MANGA_HISTORY_TO_PRIVATE : API_SET_MANGA_HISTORY_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Manga History has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER TITLE DISPLAY SETTINGS\r\nexport const setUserTitleDisplaySettings = (branch, settings, update= false) => (dispatch, getState) => {\r\n    let api_url;\r\n    let dispatch_type;\r\n    if (branch === BRANCH_ANIME) {\r\n        api_url = API_UPDATE_USER_ANIME_DISPLAY_SETTINGS;\r\n        dispatch_type = UPDATE_USER_ANIME_BROWSE_SETTINGS;\r\n    } else if (branch === BRANCH_MANGA) {\r\n        api_url = API_UPDATE_USER_MANGA_DISPLAY_SETTINGS;\r\n        dispatch_type = UPDATE_USER_MANGA_BROWSE_SETTINGS;\r\n    } else if (branch === BRANCH_EROGE) {\r\n        api_url = API_UPDATE_USER_EROGE_DISPLAY_SETTINGS;\r\n        dispatch_type = UPDATE_USER_EROGE_BROWSE_SETTINGS;\r\n    }\r\n\r\n    if (update) {\r\n        const token = getState().auth.token;\r\n        const formData = new FormData();\r\n        formData.append('data', JSON.stringify(settings));\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        if (token) config.headers['Authorization'] = `Token ${token}`;\r\n        else dispatch(returnErrors('Auth token not provided!', 0));\r\n\r\n        axios\r\n            .post(api_url, formData, config)\r\n            .then(res => {\r\n                dispatch(createMessage(`Display settings updated successfully.`, Alert.type_success));\r\n                dispatch(updateUserDisplaySettingsStore(branch, settings));\r\n            })\r\n            .catch(err => {\r\n            })\r\n    }\r\n\r\n    dispatch({\r\n        type: dispatch_type,\r\n        payload: settings,\r\n    })\r\n};\r\n\r\n\r\n// UPDATE USER LIST DESIGN SETTINGS\r\nexport const setUserListDesignSettings = (branch, settings, update= false) => (dispatch, getState) => {\r\n    let api_url;\r\n    let dispatch_type;\r\n    if (branch === BRANCH_ANIME) {\r\n        api_url = API_UPDATE_USER_ANIME_LIST_SETTINGS;\r\n        dispatch_type = UPDATE_USER_ANIME_LIST_SETTINGS;\r\n    } else if (branch === BRANCH_MANGA) {\r\n        api_url = API_UPDATE_USER_MANGA_LIST_SETTINGS;\r\n        dispatch_type = UPDATE_USER_MANGA_LIST_SETTINGS;\r\n    }\r\n\r\n    if (update) {\r\n        const token = getState().auth.token;\r\n        const formData = new FormData();\r\n        formData.append('data', JSON.stringify(settings));\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        if (token) config.headers['Authorization'] = `Token ${token}`;\r\n        else dispatch(returnErrors('Auth token not provided!', 0));\r\n\r\n        axios\r\n            .post(api_url, formData, config)\r\n            .then(res => {\r\n                dispatch(createMessage(`${branch} list settings updated successfully.`, Alert.type_success));\r\n                dispatch(updateUserListDesignSettingsStore(branch, settings));\r\n            })\r\n            .catch(err => {\r\n            })\r\n    }\r\n\r\n    dispatch({\r\n        type: dispatch_type,\r\n        payload: settings,\r\n    })\r\n};\r\n","import {\r\n    AUTH_USER,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    GET_USER,\r\n    GET_PROFILE_PRIVACY_SETTINGS,\r\n    SET_REDIRECT_URL,\r\n    UPDATE_USER_ANIME_BROWSE_SETTINGS,\r\n    UPDATE_USER_DISPLAY_SETTINGS_STORE,\r\n    UPDATE_USER_MANGA_BROWSE_SETTINGS,\r\n    UPDATE_USER_LIST_DESIGN_SETTINGS_STORE,\r\n    SET_OPEN_APPLICATIONS_STATUS\r\n} from \"../actions/types\";\r\nimport {playExpand2Sound} from \"../components/layout/sounds\";\r\nimport {CyberAdmin, Profile, User} from \"../models\";\r\nimport store from \"../store\";\r\nimport {setUserAnimeDisplaySettings} from \"../actions/users\";\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../globals\";\r\nimport {API_UPDATE_USER_ANIME_DISPLAY_SETTINGS, API_UPDATE_USER_MANGA_DISPLAY_SETTINGS} from \"../actions/api_urls\";\r\n\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    initial_auth: true,\r\n    user_loading: false,\r\n    user: null,\r\n    user_authenticated: null,\r\n    visited_user_loaded: false,\r\n    visited_user: null,\r\n    redirect_url: null,\r\n    open_applications_status: undefined,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                user_loading: true\r\n            };\r\n        case GET_USER:\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                visited_user_loaded: true,\r\n                visited_user: action.payload,\r\n            };\r\n        case AUTH_USER:\r\n            return {\r\n                ...state,\r\n                user_authenticated: true,\r\n                user_loading: false,\r\n                user: action.payload,\r\n                initial_auth: false,\r\n            };\r\n        case GET_PROFILE_PRIVACY_SETTINGS: {\r\n            let updated_user = {};\r\n            Object.assign(updated_user, state.user);\r\n            updated_user[User.profile][Profile.is_anime_list_private] = action.payload[Profile.is_anime_list_private];\r\n            updated_user[User.profile][Profile.is_anime_history_private] = action.payload[Profile.is_anime_history_private];\r\n            updated_user[User.profile][Profile.is_manga_list_private] = action.payload[Profile.is_manga_list_private];\r\n            updated_user[User.profile][Profile.is_manga_history_private] = action.payload[Profile.is_manga_history_private];\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                user: updated_user,\r\n            };\r\n        }\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            playExpand2Sound();\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                user_authenticated: true,\r\n                user_loading: false,\r\n            };\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: null,\r\n                user_authenticated: false,\r\n                user_loading: false,\r\n                initial_auth: false,\r\n            };\r\n        case SET_REDIRECT_URL:\r\n            return {\r\n                ...state,\r\n                redirect_url: action.payload,\r\n            };\r\n        case UPDATE_USER_DISPLAY_SETTINGS_STORE: {\r\n            let updated_user = {};\r\n            Object.assign(updated_user, state.user);\r\n\r\n            if (action.branch === BRANCH_ANIME) {\r\n                updated_user[User.profile][Profile.user_anime_display_settings] = action.payload;\r\n            } else if (action.branch === BRANCH_MANGA) {\r\n                updated_user[User.profile][Profile.user_manga_display_settings] = action.payload;\r\n            } else if (action.branch === BRANCH_EROGE) {\r\n                updated_user[User.profile][Profile.user_eroge_display_settings] = action.payload;\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                user: updated_user,\r\n            };\r\n        }\r\n        case UPDATE_USER_LIST_DESIGN_SETTINGS_STORE: {\r\n            let updated_user = {};\r\n            Object.assign(updated_user, state.user);\r\n\r\n            if (action.branch === BRANCH_ANIME)\r\n                updated_user[User.profile][Profile.user_anime_list_design_settings] = action.payload;\r\n            else if (action.branch === BRANCH_MANGA)\r\n                updated_user[User.profile][Profile.user_manga_list_design_settings] = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                user: updated_user,\r\n            };\r\n        }\r\n        case SET_OPEN_APPLICATIONS_STATUS:\r\n            return {\r\n                ...state,\r\n                open_applications_status: action.payload[CyberAdmin.open_applications],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {GET_ERRORS, CLEAN_ERRORS} from \"../actions/types\";\n\n\nconst initialState = {\n    message: null,\n    status: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                message: action.payload.msg,\n                status: action.payload.status\n            };\n        case CLEAN_ERRORS:\n            return {\n                message: null,\n                status: null\n            };\n        default:\n            return state;\n    }\n}\n","import {\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CHARACTERS_LOADING,\r\n    FILTER_CHARACTERS,\r\n    GET_CHARACTER,\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\n\r\nconst initialState = {\r\n    characters_loading: false,\r\n    character: {},\r\n    characters_loaded: false,\r\n\r\n    filtered_characters: {},\r\n    filtered_characters_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case CHARACTERS_LOADING:\r\n            return {\r\n                ...state,\r\n                characters_loading: true,\r\n                characters_loaded: false,\r\n                filtered_characters_loaded: false,\r\n            };\r\n        case CANCEL_CHARACTERS_LOADING:\r\n            return {\r\n                ...state,\r\n                characters_loading: false,\r\n                characters_loaded: false,\r\n                filtered_characters_loaded: false,\r\n            };\r\n        case GET_CHARACTER:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                character: action.payload,\r\n                characters_loading: false,\r\n                characters_loaded: true\r\n            };\r\n        case FILTER_CHARACTERS:\r\n            return {\r\n                ...state,\r\n                filtered_characters: action.payload,\r\n                characters_loading: false,\r\n                filtered_characters_loaded: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CANCEL_EROGE_LOADING,\r\n    EROGE_LOADING,\r\n    FILTER_EROGE,\r\n    GET_ANIME_DATA,\r\n    GET_EROGE,\r\n    GET_EROGE_DATA\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\n\r\nconst initialState = {\r\n    eroge_loading: false,\r\n    eroge: {},\r\n    eroge_loaded: false,\r\n\r\n    filtered_eroge: {},\r\n    filtered_eroge_loaded: false,\r\n\r\n    eroge_data: {},\r\n    eroge_data_statistics: {},\r\n    eroge_data_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case EROGE_LOADING:\r\n            return {\r\n                ...state,\r\n                eroge_loading: true,\r\n                eroge_loaded: false,\r\n                filtered_eroge_loaded: false,\r\n            };\r\n        case CANCEL_EROGE_LOADING:\r\n            return {\r\n                ...state,\r\n                eroge_loading: false,\r\n                eroge_loaded: false,\r\n                filtered_eroge_loaded: false,\r\n            };\r\n        case GET_EROGE:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                eroge: action.payload,\r\n                eroge_loading: false,\r\n                eroge_loaded: true\r\n            };\r\n        case FILTER_EROGE:\r\n            return {\r\n                ...state,\r\n                filtered_eroge: action.payload,\r\n                eroge_loading: false,\r\n                filtered_eroge_loaded: true\r\n            };\r\n        case GET_EROGE_DATA:\r\n            return {\r\n                ...state,\r\n                eroge_loading: false,\r\n                eroge_data: action.payload,\r\n                eroge_data_loaded: true,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import Cookies from \"js-cookie\";\r\nimport {Cookie} from \"../../models\";\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_ANIME_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        anime_on_server__english_sub: false,\r\n        anime_on_server__english_dub: false,\r\n        anime_on_server__japanese_dub: false,\r\n        anime_on_server__japanese_sub: false,\r\n        episodes_range: [0, 53],\r\n        length_range: [0, 61],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        rating_short: [],\r\n        video_quality: [],\r\n        audio_channel: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_MANGA_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        volumes_range: [0, 53],\r\n        chapters_range: [0, 53],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_CHARACTERS_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_PEOPLE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_EROGE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        type: [],\r\n        downloaded: '',\r\n        platforms: [],\r\n        language: [],\r\n        censorship: [],\r\n        tags: [],\r\n        ordering: '-date_added',\r\n    };\r\n}\r\n\r\n\r\nexport function loadCookies() {\r\n    let loaded_cookies = {\r\n        anime_browse_filters: {},\r\n        anime_season_filters: {},\r\n        anime_list_filters: {},\r\n        manga_browse_filters: {},\r\n        manga_season_filters: {},\r\n        manga_list_filters: {},\r\n        characters_filters: {},\r\n        people_filters: {},\r\n        eroge_browse_filters: {},\r\n    };\r\n\r\n    if (Cookies.get(Cookie.show_filters) === undefined || Cookies.get(Cookie.show_filters) === 'undefined')\r\n        Cookies.set(Cookie.show_filters, true);\r\n\r\n    const new_anime_values = new FILTER_ANIME_INITIAL_VALUES();\r\n    let anime_browse_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_browse_filters) === undefined || Cookies.get(Cookie.anime_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_browse_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_browse_filters = JSON.parse(Cookies.get(Cookie.anime_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    let anime_season_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_season_filters) === undefined || Cookies.get(Cookie.anime_season_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_season_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_season_filters = JSON.parse(Cookies.get(Cookie.anime_season_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    let anime_list_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_list_filters) === undefined || Cookies.get(Cookie.anime_list_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_list_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_list_filters = JSON.parse(Cookies.get(Cookie.anime_list_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.anime_browse_filters = anime_browse_filters;\r\n    loaded_cookies.anime_season_filters = anime_season_filters;\r\n    loaded_cookies.anime_list_filters = anime_list_filters;\r\n\r\n    const new_manga_values = new FILTER_MANGA_INITIAL_VALUES();\r\n    let manga_browse_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_browse_filters) === undefined || Cookies.get(Cookie.manga_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_browse_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_browse_filters = JSON.parse(Cookies.get(Cookie.manga_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    let manga_season_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_season_filters) === undefined || Cookies.get(Cookie.manga_season_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_season_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_season_filters = JSON.parse(Cookies.get(Cookie.manga_season_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    let manga_list_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_list_filters) === undefined || Cookies.get(Cookie.manga_list_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_list_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_list_filters = JSON.parse(Cookies.get(Cookie.manga_list_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.manga_browse_filters = manga_browse_filters;\r\n    loaded_cookies.manga_season_filters = manga_season_filters;\r\n    loaded_cookies.manga_list_filters = manga_list_filters;\r\n\r\n    const new_characters_values = new FILTER_CHARACTERS_INITIAL_VALUES();\r\n    let characters_filters = new_characters_values.VALUES;\r\n    if (Cookies.get(Cookie.characters_filters) === undefined || Cookies.get(Cookie.characters_filters) === 'undefined')\r\n        Cookies.set(Cookie.characters_filters, new_characters_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            characters_filters = JSON.parse(Cookies.get(Cookie.characters_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.characters_filters = characters_filters;\r\n\r\n    const new_people_values = new FILTER_PEOPLE_INITIAL_VALUES();\r\n    let people_filters = new_people_values.VALUES;\r\n    if (Cookies.get(Cookie.people_filters) === undefined || Cookies.get(Cookie.people_filters) === 'undefined')\r\n        Cookies.set(Cookie.people_filters, new_people_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            people_filters = JSON.parse(Cookies.get(Cookie.people_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.people_filters = people_filters;\r\n\r\n    const new_eroge_values = new FILTER_EROGE_INITIAL_VALUES();\r\n    let eroge_filters = new_eroge_values.VALUES;\r\n    if (Cookies.get(Cookie.eroge_browse_filters) === undefined || Cookies.get(Cookie.eroge_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.eroge_browse_filters, new_eroge_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            eroge_filters = JSON.parse(Cookies.get(Cookie.eroge_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.eroge_browse_filters = eroge_filters;\r\n\r\n    return loaded_cookies\r\n}\r\n","import Cookies from 'js-cookie'\r\n\r\nimport {\r\n    TYPE_BROWSE, TYPE_LIST, TYPE_SEASON\r\n} from \"../globals\";\r\nimport {\r\n    SET_ANIME_FILTERS, SET_CHARACTERS_FILTERS,\r\n    SET_COOKIE_SHOW_FILTERS, SET_EROGE_FILTERS,\r\n    SET_MANGA_FILTERS, SET_PEOPLE_FILTERS\r\n} from \"../actions/types\";\r\nimport {Cookie} from \"../models\";\r\nimport {loadCookies} from \"../components/cookies/load_cookies\";\r\n\r\n\r\nconst loaded_cookies = loadCookies();\r\nconst initialState = {\r\n    show_filters: Cookies.get(Cookie.show_filters) === undefined ? true : Cookies.get(Cookie.show_filters) === 'true',\r\n    anime_browse_filters: loaded_cookies.anime_browse_filters,\r\n    anime_season_filters: loaded_cookies.anime_season_filters,\r\n    anime_list_filters: loaded_cookies.anime_list_filters,\r\n    manga_browse_filters: loaded_cookies.manga_browse_filters,\r\n    manga_season_filters: loaded_cookies.manga_season_filters,\r\n    manga_list_filters: loaded_cookies.manga_list_filters,\r\n    characters_filters: loaded_cookies.characters_filters,\r\n    people_filters: loaded_cookies.people_filters,\r\n    eroge_browse_filters: loaded_cookies.eroge_browse_filters,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_COOKIE_SHOW_FILTERS:\r\n            Cookies.set(Cookie.show_filters, action.value);\r\n            return {\r\n                ...state,\r\n                show_filters: action.value,\r\n            };\r\n        case SET_ANIME_FILTERS:\r\n            return update_anime_filter_state(state, action);\r\n        case SET_MANGA_FILTERS:\r\n            return update_manga_filter_state(state, action);\r\n        case SET_CHARACTERS_FILTERS:\r\n            Cookies.set(Cookie.characters_filters, action.value);\r\n            return {\r\n                ...state,\r\n                characters_filters: action.value,\r\n            };\r\n        case SET_PEOPLE_FILTERS:\r\n            Cookies.set(Cookie.people_filters, action.value);\r\n            return {\r\n                ...state,\r\n                people_filters: action.value,\r\n            };\r\n        case SET_EROGE_FILTERS:\r\n            Cookies.set(Cookie.eroge_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                eroge_browse_filters: action.value,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction update_anime_filter_state(state, action) {\r\n    switch (action.page_type) {\r\n        case TYPE_BROWSE:\r\n            Cookies.set(Cookie.anime_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_browse_filters: action.value,\r\n            };\r\n        case TYPE_SEASON:\r\n            Cookies.set(Cookie.anime_season_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_season_filters: action.value,\r\n            };\r\n        case TYPE_LIST:\r\n            Cookies.set(Cookie.anime_list_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_list_filters: action.value,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n                anime_browse_filters: action.value,\r\n            };\r\n    }\r\n}\r\n\r\nfunction update_manga_filter_state(state, action) {\r\n    switch (action.page_type) {\r\n        case TYPE_BROWSE:\r\n            Cookies.set(Cookie.manga_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_browse_filters: action.value,\r\n            };\r\n        case TYPE_SEASON:\r\n            Cookies.set(Cookie.manga_season_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_season_filters: action.value,\r\n            };\r\n        case TYPE_LIST:\r\n            Cookies.set(Cookie.manga_list_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_list_filters: action.value,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n                manga_browse_filters: action.value,\r\n            };\r\n    }\r\n}\r\n","import {CLEAR_MESSAGE, CREATE_MESSAGE} from \"../actions/types\";\n\n\nconst initialState = {\n    message: null,\n    type: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_MESSAGE:\n            return {\n                message: action.payload.msg,\n                type: action.payload.type\n            };\n        case CLEAR_MESSAGE:\n            return {\n                message: null,\n                type: null\n            };\n        default:\n            return state;\n    }\n}\n","import {\r\n    AUTH_ERROR_CLEAR_USER_INFO,\r\n    CANCEL_USER_ACHIEVEMENTS_LOADING,\r\n    CANCEL_USER_LIST_LOADING,\r\n    CLEAR_USER_ACHIEVEMENTS,\r\n    CLEAR_USER_ANIME_ENTRY,\r\n    CLEAR_USER_MANGA_ENTRY,\r\n    FINISH_LOADING_USER_ENTRY,\r\n    FINISH_UPLOADING_FILE,\r\n    GET_ALL_USERS,\r\n    GET_ANIME_FILTER_PRESETS,\r\n    GET_EROGE_FILTER_PRESETS,\r\n    GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    GET_MANGA_FILTER_PRESETS,\r\n    GET_USER_ACHIEVEMENTS,\r\n    GET_USER_ANIME_ENTRY,\r\n    GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    GET_USER_LIST,\r\n    GET_USER_MANGA_ENTRY,\r\n    GET_VISITED_USER_ANIME_HISTORY,\r\n    GET_VISITED_USER_MANGA_HISTORY,\r\n    SET_ANIME_PRESET,\r\n    SET_EROGE_PRESET,\r\n    SET_MANGA_PRESET,\r\n    UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    UPDATE_USER_ANIME_BROWSE_SETTINGS, UPDATE_USER_ANIME_LIST_SETTINGS,\r\n    UPDATE_USER_ANIME_STATISTICS,\r\n    UPDATE_USER_EROGE_BROWSE_SETTINGS,\r\n    UPDATE_USER_LIST,\r\n    UPDATE_USER_MANGA_BROWSE_SETTINGS, UPDATE_USER_MANGA_LIST_SETTINGS,\r\n    UPLOAD_ANIME_LIST_MAL_XML,\r\n    UPLOAD_MANGA_LIST_MAL_XML,\r\n    UPLOADING_FILE,\r\n    USER_ACHIEVEMENTS_LOADING,\r\n    USER_ENTRY_LOADING,\r\n    USER_INFO_LOADING,\r\n    USER_LIST_LOADING,\r\n    USER_STATISTICS_LOADING,\r\n    USERS_LOADING\r\n} from \"../actions/types\";\r\nimport {Anime, Manga, UserAnimeEntry, UserList, UserMangaEntry} from \"../models\";\r\n\r\n\r\nconst initialState = {\r\n    all_users: [],\r\n    users_loading: false,\r\n    all_users_loaded: false,\r\n\r\n    entry_loading: false,\r\n    user_anime_entry: {},\r\n    user_anime_entry_loaded: false,\r\n    user_manga_entry: {},\r\n    user_manga_entry_loaded: false,\r\n\r\n    uploading_file: false,\r\n\r\n    user_list: {},\r\n    user_list_loading: false,\r\n    user_statistics_loading: false,\r\n    user_anime_statistics: {},\r\n    user_manga_statistics: {},\r\n\r\n    user_info_loading: false,\r\n\r\n    user_anime_history: {},\r\n    user_manga_history: {},\r\n\r\n    anime_filter_presets: [],\r\n    manga_filter_presets: [],\r\n    eroge_filter_presets: [],\r\n    selected_anime_preset: {},\r\n    selected_manga_preset: {},\r\n    selected_eroge_preset: {},\r\n\r\n    user_anime_entry_statuses: {},\r\n    user_manga_entry_statuses: {},\r\n\r\n    user_achievements_loading: false,\r\n    user_achievements: {},\r\n\r\n    user_anime_display_settings: {},\r\n    user_manga_display_settings: {},\r\n    user_eroge_display_settings: {},\r\n    user_anime_list_design_settings: {},\r\n    user_manga_list_design_settings: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USERS_LOADING:\r\n            return {\r\n                ...state,\r\n                users_loading: true,\r\n                all_users_loaded: false\r\n            };\r\n        case USER_LIST_LOADING:\r\n            return {\r\n                ...state,\r\n                user_list_loading: true,\r\n            };\r\n        case CANCEL_USER_LIST_LOADING:\r\n            return {\r\n                ...state,\r\n                user_list_loading: false,\r\n            };\r\n        case GET_ALL_USERS:\r\n            return {\r\n                ...state,\r\n                all_users: action.payload,\r\n                users_loading: false,\r\n                all_users_loaded: true\r\n            };\r\n        case USER_ENTRY_LOADING:\r\n            return {\r\n                ...state,\r\n                entry_loading: true,\r\n                user_anime_entry_loaded: false,\r\n                user_manga_entry_loaded: false\r\n            };\r\n        case USER_STATISTICS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_statistics_loading: true,\r\n            };\r\n        case FINISH_LOADING_USER_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n            };\r\n        case GET_USER_ANIME_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_anime_entry_loaded: true,\r\n                user_anime_entry: action.payload\r\n            };\r\n        case CLEAR_USER_ANIME_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_anime_entry_loaded: false,\r\n                user_anime_entry: {}\r\n            };\r\n        case GET_USER_MANGA_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_manga_entry_loaded: true,\r\n                user_manga_entry: action.payload\r\n            };\r\n        case CLEAR_USER_MANGA_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_manga_entry_loaded: false,\r\n                user_manga_entry: {}\r\n            };\r\n        case UPDATE_USER_LIST:\r\n        case GET_USER_LIST:\r\n            return {\r\n                ...state,\r\n                user_list: action.payload,\r\n                user_list_loading: false,\r\n            };\r\n        case UPDATE_USER_ANIME_STATISTICS:\r\n            return {\r\n                ...state,\r\n                user_statistics_loading: false,\r\n                user_anime_statistics: action.payload,\r\n            };\r\n        case UPLOADING_FILE:\r\n            return {\r\n                ...state,\r\n                uploading_file: true\r\n            };\r\n        case FINISH_UPLOADING_FILE:\r\n            return {\r\n                ...state,\r\n                uploading_file: false\r\n            };\r\n        case UPLOAD_ANIME_LIST_MAL_XML:\r\n        case UPLOAD_MANGA_LIST_MAL_XML:\r\n            return {\r\n                ...state,\r\n                uploading_file: false\r\n            };\r\n        case USER_INFO_LOADING:\r\n            return {\r\n                ...state,\r\n                user_info_loading: true\r\n            };\r\n        case GET_VISITED_USER_ANIME_HISTORY:\r\n            return {\r\n                ...state,\r\n                user_anime_history: action.payload,\r\n                user_info_loading: false\r\n            };\r\n        case GET_VISITED_USER_MANGA_HISTORY:\r\n            return {\r\n                ...state,\r\n                user_manga_history: action.payload,\r\n                user_info_loading: false\r\n            };\r\n        case GET_ANIME_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                anime_filter_presets: action.payload,\r\n            };\r\n        case GET_MANGA_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                manga_filter_presets: action.payload,\r\n            };\r\n        case GET_EROGE_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                eroge_filter_presets: action.payload,\r\n            };\r\n        case SET_ANIME_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_anime_preset: action.payload,\r\n            };\r\n        case SET_MANGA_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_manga_preset: action.payload,\r\n            };\r\n        case SET_EROGE_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_eroge_preset: action.payload,\r\n            };\r\n        case GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES:\r\n            return {\r\n                ...state,\r\n                user_anime_entry_statuses: action.payload,\r\n            };\r\n        case UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES:\r\n            let current_statuses = {};\r\n            if (typeof action.payload === 'object' && action.payload !== null) {\r\n                Object.assign(current_statuses, state.user_anime_entry_statuses);\r\n                current_statuses[action.payload[UserAnimeEntry.anime][Anime.id]] = action.payload[UserAnimeEntry.status];\r\n            } else if (!isNaN(action.payload)) {\r\n                delete state.user_anime_entry_statuses[action.payload];\r\n                Object.assign(current_statuses, state.user_anime_entry_statuses);\r\n            }\r\n            return {\r\n                ...state,\r\n                user_anime_entry_statuses: current_statuses,\r\n            };\r\n        case GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES:\r\n            return {\r\n                ...state,\r\n                user_manga_entry_statuses: action.payload,\r\n            };\r\n        case UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES:\r\n            let current_manga_statuses = {};\r\n            if (typeof action.payload === 'object' && action.payload !== null) {\r\n                Object.assign(current_manga_statuses, state.user_manga_entry_statuses);\r\n                current_manga_statuses[action.payload[UserMangaEntry.manga][Manga.id]] = action.payload[UserMangaEntry.status];\r\n            } else if (!isNaN(action.payload)) {\r\n                delete state.user_manga_entry_statuses[action.payload];\r\n                Object.assign(current_manga_statuses, state.user_manga_entry_statuses);\r\n            }\r\n            return {\r\n                ...state,\r\n                user_manga_entry_statuses: current_manga_statuses,\r\n            };\r\n        case GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS:\r\n            let this_user_list = state.user_list;\r\n            this_user_list[UserList.scraping_episode_history_from_mal_progress] = action.payload;\r\n            return {\r\n                ...state,\r\n                user_list: this_user_list,\r\n            };\r\n        case USER_ACHIEVEMENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: true\r\n            };\r\n        case CANCEL_USER_ACHIEVEMENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: {}\r\n            };\r\n        case GET_USER_ACHIEVEMENTS:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: action.payload\r\n            };\r\n        case CLEAR_USER_ACHIEVEMENTS:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: {}\r\n            };\r\n        case UPDATE_USER_ANIME_BROWSE_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_anime_display_settings: current_settings\r\n            };\r\n        }\r\n        case UPDATE_USER_MANGA_BROWSE_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_manga_display_settings: current_settings\r\n            };\r\n        }\r\n        case UPDATE_USER_EROGE_BROWSE_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_eroge_display_settings: current_settings\r\n            };\r\n        }\r\n        case UPDATE_USER_ANIME_LIST_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_anime_list_design_settings: current_settings\r\n            };\r\n        }\r\n        case UPDATE_USER_MANGA_LIST_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_manga_list_design_settings: action.payload\r\n            };\r\n        }\r\n        case AUTH_ERROR_CLEAR_USER_INFO:\r\n            return {\r\n                ...state,\r\n                current_anime_entry: {},\r\n                current_manga_entry: {},\r\n                user_anime_entry_statuses: {},\r\n                user_manga_entry_statuses: {},\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    GET_REQUIEM,\r\n    REQUIEM_LOADING,\r\n    GET_REPORTS,\r\n    REPORTS_LOADING,\r\n    GET_NEWS,\r\n    NEWS_LOADING,\r\n    GET_TORRENT_PROGRESS,\r\n    GET_ACTIVE_TORRENTS_PROGRESS,\r\n    GET_STORAGE_INFO,\r\n    GET_TARGETS,\r\n    CLEAR_ANIME_TORRENT_PROGRESS, GET_SCRAPERS_PROGRESS\r\n} from '../actions/types'\r\n\r\n\r\nconst initialState = {\r\n    requiem_is_loading: false,\r\n    requiem: {},\r\n\r\n    targets: [],\r\n    active_reports: [],\r\n    reports: {},\r\n    news: {},\r\n    storage: [],\r\n    torrent_progress: [],\r\n    active_torrents: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_REQUIEM:\r\n            return {\r\n                ...state,\r\n                requiem: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_REPORTS:\r\n            return {\r\n                ...state,\r\n                reports: action.payload,\r\n                reports_is_loading: false\r\n            };\r\n        case GET_TARGETS:\r\n            return {\r\n                ...state,\r\n                targets: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_SCRAPERS_PROGRESS:\r\n            return {\r\n                ...state,\r\n                active_reports: action.payload,\r\n            };\r\n        case GET_NEWS:\r\n            return {\r\n                ...state,\r\n                news: action.payload,\r\n                news_is_loading: false\r\n            };\r\n        case GET_STORAGE_INFO:\r\n            return {\r\n                ...state,\r\n                storage: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_TORRENT_PROGRESS:\r\n            return {\r\n                ...state,\r\n                torrent_progress: action.payload,\r\n            };\r\n        case GET_ACTIVE_TORRENTS_PROGRESS:\r\n            return {\r\n                ...state,\r\n                active_torrents: action.payload,\r\n            };\r\n        case CLEAR_ANIME_TORRENT_PROGRESS:\r\n            return {\r\n                ...state,\r\n                torrent_progress: [],\r\n            };\r\n        case REQUIEM_LOADING:\r\n            return {\r\n                ...state,\r\n                requiem_is_loading: true\r\n            };\r\n        case REPORTS_LOADING:\r\n            return {\r\n                ...state,\r\n                reports_is_loading: true\r\n            };\r\n        case NEWS_LOADING:\r\n            return {\r\n                ...state,\r\n                news_is_loading: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    ANIME_LOADING, CANCEL_ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CHARACTERS_LOADING, FILTER_CHARACTERS, GET_ANIME_DATA,\r\n    GET_CHARACTER, GET_CHARACTERS_DATA, GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_CHARACTERS,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_CHARACTERS_DATA_FOR_HOME_PAGE, API_GET_INDUSTRY_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_CHARACTER\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieCharactersFilters} from \"./cookies\";\r\nimport {CharactersFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\n\r\n\r\n// GET A ONE CHARACTER\r\nexport const getCharacter = id => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_CHARACTER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CHARACTER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL CHARACTERS\r\nexport const filterCharacters = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setCharactersFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_CHARACTERS, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_CHARACTERS,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieCharactersFilters(filters))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setCharactersFilterParams(params, filters) {\r\n    if (filters[CharactersFilterNames.search] && typeof filters[CharactersFilterNames.search] == 'string')\r\n        params[CharactersFilterNames.search] = filters[CharactersFilterNames.search];\r\n    if (filters[CharactersFilterNames.ordering])\r\n        params[CharactersFilterNames.ordering] = filters[CharactersFilterNames.ordering];\r\n    return params\r\n}\r\n\r\n\r\n// CANCEL CHARACTERS LOADING\r\nexport const cancelCharactersLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_CHARACTERS_LOADING,\r\n    })\r\n};\r\n","import {\r\n    CANCEL_PEOPLE_LOADING,\r\n    FILTER_CHARACTERS,\r\n    FILTER_PEOPLE,\r\n    GET_ALL_CHARACTERS_FOR_ANIME, GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    GET_PERSON, GET_PUBLISHED_MANGA_FOR_PERSON, GET_VOICE_ACTOR_ROLES_FOR_PERSON,\r\n    PEOPLE_LOADING\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Anime, Person} from \"../models\";\r\nimport store from \"../store\";\r\nimport {cancelAnimeLoading} from \"../actions/anime\";\r\nimport {cancelCharactersLoading} from \"../actions/characters\";\r\n\r\nconst initialState = {\r\n    people_loading: false,\r\n    person: {},\r\n    people_loaded: false,\r\n\r\n    people_data: {},\r\n    people_data_statistics: {},\r\n    people_data_loaded: false,\r\n\r\n    filtered_people: {},\r\n    filtered_people_loaded: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case PEOPLE_LOADING:\r\n            return {\r\n                ...state,\r\n                people_loading: true,\r\n                people_loaded: false,\r\n                filtered_people_loaded: false,\r\n            };\r\n        case CANCEL_PEOPLE_LOADING:\r\n            return {\r\n                ...state,\r\n                people_loading: false,\r\n                people_loaded: false,\r\n                filtered_people_loaded: false,\r\n            };\r\n        case GET_PERSON:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                person: action.payload,\r\n                people_loading: false,\r\n                people_loaded: true\r\n            };\r\n        case GET_VOICE_ACTOR_ROLES_FOR_PERSON:\r\n            state.person[Person.voice_actor_roles] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case GET_ANIME_STAFF_POSITIONS_FOR_PERSON:\r\n            state.person[Person.anime_staff_positions] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case GET_PUBLISHED_MANGA_FOR_PERSON:\r\n            state.person[Person.published_manga] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case FILTER_PEOPLE:\r\n            return {\r\n                ...state,\r\n                filtered_people: action.payload,\r\n                people_loading: false,\r\n                filtered_people_loaded: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    industry_data: {},\r\n    industry_data_loading: {},\r\n    industry_data_statistics: {},\r\n    industry_data_loaded: false,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case INDUSTRY_DATA_LOADING:\r\n            return {\r\n                ...state,\r\n                industry_data_loading: true,\r\n                industry_data_loaded: false,\r\n            };\r\n        case GET_INDUSTRY_DATA:\r\n            return {\r\n                ...state,\r\n                industry_data_loading: false,\r\n                industry_data: action.payload,\r\n                industry_data_loaded: true,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport anime from './anime'\r\nimport manga from './manga'\r\nimport auth from './auth'\r\nimport errors from './errors'\r\nimport characters from './characters'\r\nimport eroge from './eroge'\r\nimport cookies from './cookies'\r\nimport success from './success'\r\nimport users from './users'\r\nimport requiem from './requiem'\r\nimport people from './people'\r\nimport industry from './industry'\r\n\r\nexport default combineReducers({\r\n    cookies, auth, users, errors, success, requiem, anime, manga, characters, people, eroge, industry\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './reducers'\r\n\r\n\r\nconst initialState = {};\r\n\r\n// const middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CYBER_GENESIS_URL} from \"./globals\";\r\n\r\nexport const INDEX = '/';\r\nexport const NOT_FOUND = '/404';\r\nexport const HOME = '/home';\r\n\r\nexport const REQUIEM_HOME = '/requiem';\r\n\r\nexport const ADMIN = `${CYBER_GENESIS_URL}/admin`;\r\nexport function ADMIN_EDIT_ANIME(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/anime/anime/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_ANIME_ON_SERVER(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/anime/animeonserver/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_MANGA(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/manga/manga/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_CHARACTER(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/characters/character/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_EROGE(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/eroge/eroge/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_PERSON(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/industry/person/${id}/change/`;\r\n}\r\n\r\nexport const LOGIN = '/login';\r\nexport const REGISTER = '/register';\r\nexport const SETTINGS = '/settings';\r\nexport const BBCODE_EDITOR = '/bbcode-editor';\r\nexport function PROFILE(id) {\r\n    if (id) return `/profile/${id}`;\r\n    return '/profile/:id'\r\n}\r\nexport function USER_ANIME_LIST(id) {\r\n    if (id) return `/anime-list/${id}`;\r\n    return '/anime-list/:id'\r\n}\r\nexport function USER_MANGA_LIST(id) {\r\n    if (id) return `/manga-list/${id}`;\r\n    return '/manga-list/:id'\r\n}\r\nexport function USER_EROGE_LIST(id) {\r\n    if (id) return `/eroge-list/${id}`;\r\n    return '/eroge-list/:id'\r\n}\r\nexport function USER_ANIME_STATISTICS(id) {\r\n    if (id) return `/profile/statistics/${id}`;\r\n    return '/profile/statistics/:id'\r\n}\r\nexport function USER_ANIME_HISTORY(id) {\r\n    if (id) return `/profile/history/anime/${id}`;\r\n    return '/profile/history/anime/:id'\r\n}\r\nexport function USER_MANGA_HISTORY(id) {\r\n    if (id) return `/profile/history/manga/${id}`;\r\n    return '/profile/history/manga/:id'\r\n}\r\n\r\nexport const ANIME_HOME = '/anime';\r\nexport const ANIME_BROWSE = '/anime/browse';\r\nexport const ANIME_SEASONS = '/anime/seasons';\r\nexport function ANIME_SEASON_DISPLAY(year, season) {\r\n    if (year && season >= 0) return `/anime/seasons/${year}/${season}`;\r\n    return '/anime/seasons/:year/:season'\r\n}\r\nexport const ANIME_FRANCHISES = '/anime/franchises';\r\nexport function ANIME_DISPLAY(id) {\r\n    if (id)\r\n        return `/anime/${id}`;\r\n    return '/anime/:id'\r\n}\r\nexport function ANIME_FRANCHISE_DISPLAY(id) {\r\n    if (id)\r\n        return `/anime/franchises/${id}`;\r\n    return '/anime/franchises/:id'\r\n}\r\n\r\nexport const MANGA_HOME = '/manga';\r\nexport const MANGA_BROWSE = '/manga/browse';\r\nexport const MANGA_SEASONS = '/manga/seasons';\r\nexport function MANGA_SEASON_DISPLAY(year, season) {\r\n    if (year && season >= 0) return `/manga/seasons/${year}/${season}`;\r\n    return '/manga/seasons/:year/:season'\r\n}\r\nexport const MANGA_FRANCHISES = '/manga/franchises';\r\nexport function MANGA_DISPLAY(id) {\r\n    if (id) return `/manga/${id}`;\r\n    return '/manga/:id'\r\n}\r\n\r\nexport const CHARACTERS_HOME = '/characters';\r\nexport const CHARACTERS_BROWSE = '/characters/browse';\r\nexport function CHARACTERS_DISPLAY(id) {\r\n    if (id) return `/characters/${id}`;\r\n    return '/characters/:id'\r\n}\r\n\r\nexport const PEOPLE_HOME = '/people';\r\nexport const PEOPLE_BROWSE = '/people/browse';\r\nexport function PERSON_DISPLAY(id) {\r\n    if (id) return `/person/${id}`;\r\n    return '/person/:id'\r\n}\r\n\r\nexport const EROGE_HOME = '/eroge';\r\nexport const EROGE_BROWSE = '/eroge/browse';\r\nexport function EROGE_DISPLAY(id) {\r\n    if (id) return `/eroge/${id}`;\r\n    return '/eroge/:id'\r\n}\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n    ANIME_BROWSE,\r\n    ANIME_FRANCHISES,\r\n    ANIME_HOME,\r\n    ANIME_SEASONS,\r\n    CHARACTERS_BROWSE,\r\n    CHARACTERS_HOME,\r\n    EROGE_BROWSE,\r\n    EROGE_HOME, HOME, INDEX,\r\n    LOGIN,\r\n    MANGA_BROWSE,\r\n    MANGA_FRANCHISES,\r\n    MANGA_HOME,\r\n    MANGA_SEASONS,\r\n    PEOPLE_BROWSE,\r\n    SETTINGS,\r\n    USER_ANIME_LIST,\r\n    USER_ANIME_STATISTICS,\r\n    USER_EROGE_LIST,\r\n    USER_MANGA_LIST\r\n} from \"../../../urls\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport store from \"../../../store\";\r\nimport {logout} from \"../../../actions/auth\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faCalendarAlt,\r\n    faChartLine,\r\n    faCog,\r\n    faHome,\r\n    faSearch, faSignOutAlt,\r\n    faSitemap,\r\n    faThList\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nexport default function AnimeMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={ANIME_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={ANIME_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n            <Link to={ANIME_SEASONS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCalendarAlt}/> Seasons</Link>\r\n            <Link to={ANIME_FRANCHISES} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSitemap}/> Franchises</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MangaMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={MANGA_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={MANGA_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n            <Link to={MANGA_SEASONS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCalendarAlt}/> Seasons</Link>\r\n            <Link to={MANGA_FRANCHISES} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSitemap}/> Franchises</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function CharactersMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={CHARACTERS_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={CHARACTERS_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Characters</Link>\r\n            <Link to={PEOPLE_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> People</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ErogeMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={EROGE_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={EROGE_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function AuthMenu(props) {\r\n    const {show, onLeave, user_id} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu desktop-menu-reversed show-dropdown' : 'desktop-menu desktop-menu-reversed'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={USER_ANIME_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Anime List</Link>\r\n            <Link to={USER_MANGA_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Manga List</Link>\r\n            <Link to={USER_EROGE_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Eroge List</Link>\r\n            <Link to={USER_ANIME_STATISTICS(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faChartLine}/> Statistics</Link>\r\n            <Link to={SETTINGS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCog}/> Settings</Link>\r\n            <Link to={INDEX} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={() => {\r\n                playClickSound();\r\n                store.dispatch(logout());\r\n            }}><FontAwesomeIcon className=\"navbar-icon\" icon={faSignOutAlt}/> Logout</Link>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nimport '../../../assets/css/layout.css'\r\nimport {ADMIN, HOME, INDEX, LOGIN, PROFILE, REQUIEM_HOME} from \"../../../urls\";\r\nimport AnimeMenu, {AuthMenu, CharactersMenu, ErogeMenu, MangaMenu} from \"./menus\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faUser} from \"@fortawesome/free-solid-svg-icons/faUser\";\r\n\r\nconst STYLE = {top: 25, left: 25};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        zIndex: 900\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        background: 'none',\r\n    },\r\n    toolbar: {\r\n        minHeight: 42,\r\n    },\r\n    title: {\r\n        marginRight: theme.spacing(3),\r\n        fontFamily: 'Quicksand',\r\n        fontVariant: 'small-caps',\r\n        userSelect: \"none\"\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        fontSize: \"medium\",\r\n    },\r\n    menuButtonLink: {\r\n        color: \"inherit\",\r\n        textDecoration: \"none\"\r\n    },\r\n    menuLinks: {\r\n        top: 35,\r\n        left: 25\r\n    },\r\n    sectionDesktop: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'flex',\r\n        },\r\n    },\r\n    sectionMobile: {\r\n        display: 'flex',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n\r\n/**\r\n *\r\n * @param {Object} props.classNames\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function MenuAppBar(props) {\r\n    const {classNames, user_authenticated, user_id, username, superuser} = props;\r\n    const classes = useStyles();\r\n    const [profileAnchorEl, setProfileAnchorEl] = React.useState(null);\r\n    const [animeAnchorEl, setAnimeAnchorEl] = React.useState(null);\r\n    const [mobileAnchorEl, setMobileAnchorEl] = React.useState(null);\r\n    const isProfileOpen = Boolean(profileAnchorEl);\r\n    const isAnimeOpen = Boolean(animeAnchorEl);\r\n    const isMobileMenuOpen = Boolean(mobileAnchorEl);\r\n\r\n    const [desktopAnimeMenu, setDesktopAnimeMenu] = React.useState(false);\r\n    const [desktopMangaMenu, setDesktopMangaMenu] = React.useState(false);\r\n    const [desktopCharactersMenu, setDesktopCharactersMenu] = React.useState(false);\r\n    const [desktopErogeMenu, setDesktopErogeMenu] = React.useState(false);\r\n    const [desktopAuthMenu, setDesktopAuthMenu] = React.useState(false);\r\n    const anime = 'anime';\r\n    const manga = 'manga';\r\n    const characters = 'characters';\r\n    const eroge = 'eroge';\r\n    const auth = 'auth';\r\n\r\n    // Handle methods\r\n    const handleProfileMenu = (event) => {\r\n        setProfileAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleAnimeMenu = (event) => {\r\n        setAnimeAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMobileMenu = (event) => {\r\n        setMobileAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    // Close methods\r\n    const handleProfileClose = () => {\r\n        setProfileAnchorEl(null);\r\n    };\r\n\r\n    const handleAnimeClose = () => {\r\n        setAnimeAnchorEl(null);\r\n        handleMobileClose()\r\n    };\r\n\r\n    const handleMobileClose = () => {\r\n        setMobileAnchorEl(null);\r\n    };\r\n\r\n    // Desktop methods\r\n    const onDesktopMenuLeave = () => {\r\n        setDesktopAnimeMenu(false);\r\n        setDesktopMangaMenu(false);\r\n        setDesktopCharactersMenu(false);\r\n        setDesktopErogeMenu(false);\r\n        setDesktopAuthMenu(false);\r\n    };\r\n\r\n    const onDesktopMenuEnter = (menuName) => {\r\n        onDesktopMenuLeave();\r\n        playHoverSound();\r\n        if (menuName === anime) {\r\n            setDesktopAnimeMenu(true);\r\n        } else if (menuName === manga) {\r\n            setDesktopMangaMenu(true)\r\n        } else if (menuName === characters) {\r\n            setDesktopCharactersMenu(true)\r\n        } else if (menuName === eroge) {\r\n            setDesktopErogeMenu(true)\r\n        } else if (menuName === auth) {\r\n            setDesktopAuthMenu(true)\r\n        }\r\n    };\r\n\r\n    const handleScroll = () => {\r\n        let navbar = document.getElementById('Cyber-Navbar');\r\n\r\n        if (window.scrollY > 40) {\r\n            navbar.classList.add('Cyber-Navbar-scrolled');\r\n        } else {\r\n            try {\r\n                navbar.classList.remove('Cyber-Navbar-scrolled');\r\n            } catch (e) {\r\n            }\r\n        }\r\n    };\r\n\r\n    const animeMobileMenu = 'anime-mobile-menu';\r\n    const renderAnimeMenu = (\r\n        <Menu\r\n            id={animeMobileMenu}\r\n            anchorEl={animeAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            transformOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            keepMounted\r\n            open={isAnimeOpen}\r\n            onClose={handleAnimeClose}\r\n            style={STYLE}\r\n        >\r\n            <MenuItem onClick={handleAnimeClose}>Home</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Browse</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Seasons</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Franchises</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileClose}\r\n        >\r\n            <MenuItem onClick={handleAnimeMenu}>\r\n                <Button\r\n                    aria-label=\"anime links\"\r\n                    aria-controls={animeMobileMenu}\r\n                    aria-haspopup=\"true\">\r\n                    Anime\r\n                </Button>\r\n            </MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    document.addEventListener('scroll', handleScroll);\r\n\r\n    return (\r\n        <div id=\"Cyber-Navbar\" className={classNames ? classNames + ' ' + classes.root : classes.root} onMouseLeave={onDesktopMenuLeave}>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton edge=\"start\" className={classes.sectionMobile} color=\"inherit\" aria-label=\"menu\"\r\n                                onClick={handleMobileMenu}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        <Link to={INDEX} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                              onClick={playClickSound}>Cyber-Genesis</Link>\r\n                    </Typography>\r\n\r\n                    <div className={classes.sectionDesktop + ' desktop'}>\r\n                        <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={HOME} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Home</Link>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(anime)\r\n                        }}>\r\n                            Anime\r\n                            <AnimeMenu show={desktopAnimeMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(manga)\r\n                        }}>\r\n                            Manga\r\n                            <MangaMenu show={desktopMangaMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(characters)\r\n                        }}>\r\n                            Industry\r\n                            <CharactersMenu show={desktopCharactersMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(eroge)\r\n                        }}>\r\n                            Eroge\r\n                            <ErogeMenu show={desktopErogeMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        {superuser ? <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <a href={ADMIN} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Admin</a>\r\n                        </span> : null}\r\n\r\n                        {superuser ? <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={REQUIEM_HOME} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Requiem</Link>\r\n                        </span> : null}\r\n                    </div>\r\n\r\n                    <div className={classes.grow}/>\r\n\r\n                    {user_authenticated ? <div className={classes.sectionDesktop + ' desktop'}>\r\n                        <span onMouseEnter={() => {\r\n                            onDesktopMenuEnter(auth)\r\n                        }}>\r\n                            <Link to={PROFILE(user_id)} onMouseOver={playHoverSound} onClick={playClickSound}>\r\n                                {username} <FontAwesomeIcon icon={faUser}/></Link>\r\n                            <AuthMenu user_id={user_id} show={desktopAuthMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n                    </div> : user_authenticated != null ?\r\n                        <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={LOGIN} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Login</Link>\r\n                        </span> : null}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n            {renderAnimeMenu}\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {User} from \"../../../models\";\r\nimport MenuAppBar from \"./CyberHeader\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass CyberNavbar extends Component {\r\n    static propTypes = {\r\n        /** classNames */\r\n        classNames: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        return <MenuAppBar classNames={this.props.classNames} user_authenticated={this.props.user_authenticated}\r\n                           user_id={this.props.user_id} username={this.props.username} superuser={this.props.superuser}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    user_id: state.auth.user ? state.auth.user[User.id] : null,\r\n    superuser: state.auth.user ? state.auth.user[User.is_superuser] : false,\r\n    username: state.auth.user ? state.auth.user[User.username] : null\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CyberNavbar)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Parallax} from \"react-parallax\";\r\n\r\nimport '../../../assets/css/layout.css'\r\n\r\n\r\nclass CyberFooter extends Component {\r\n    render() {\r\n        return (\r\n            <div style={this.props.margin === false ? null : {marginTop: '150px'}} id=\"Footer\">\r\n                <Parallax\r\n                    blur={0}\r\n                    bgImage={'/images/object.png'}\r\n                    bgImageAlt=\"footer\"\r\n                    strength={200}>\r\n                    <div className=\"logos-container\">\r\n                        <p className=\"\">Powered by</p>\r\n                        <div className=\"logo-container logo-container-side\">\r\n                            <img src=\"/images/cyber-administration-logo.png\" alt={''}/>\r\n                            <h5 className=\"color-\">Cyber-Admin</h5>\r\n                        </div>\r\n                        <div className=\"logo-container logo-container-main\">\r\n                            <img src=\"/images/cyber-genesis-logo.png\" alt={''}/>\r\n                            <h3 className=\"color-\">Cyber-Genesis</h3>\r\n                        </div>\r\n                        <div className=\"logo-container logo-container-side\">\r\n                            <img src=\"/images/cyber-requiem-logo.png\" alt={''}/>\r\n                            <h5 className=\"color-\">Cyber-Requiem</h5>\r\n                        </div>\r\n                    </div>\r\n                </Parallax>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(CyberFooter)\r\n","import React, { Component } from 'react';\r\n\r\n// https://bbbootstrap.com/snippets/circle-loader-63353068 BETTER LOADING!!!\r\n\r\nimport '../../../assets/css/layout.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass Loading extends Component {\r\n    static propTypes = {\r\n        /** String that will be displayed below the img */\r\n        text: PropTypes.string,\r\n        /** Removes all text */\r\n        no_text: PropTypes.bool,\r\n        /** Used for width and height for the img in pixels */\r\n        size: PropTypes.number,\r\n        /** Used for calculating the top and bottom offset of the container */\r\n        offset: PropTypes.number,\r\n        /** Applies a css class to the container to remove the relative position */\r\n        block: PropTypes.bool,\r\n    };\r\n\r\n    render() {\r\n        const {text, size, offset, block, no_text} = this.props;\r\n\r\n        return (\r\n            <div className={block ? 'triangle-loader triangle-loader-initial' : 'triangle-loader'}\r\n                 style={offset ? {height: `calc(100vh - ${offset}px)`} : null}>\r\n                <div className=\"triangle-loader-svg\">\r\n                    <svg id=\"triangle\" width={size ? size : '160'} height={size ? size : '160'} viewBox=\"-3 -4 39 39\">\r\n                        <polygon fill=\"transparent\" stroke=\"cyan\" strokeWidth=\"1\" points=\"16,0 32,32 0,32\"/>\r\n                    </svg>\r\n                    {!no_text ? text ? text.toUpperCase() : 'LOADING' : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ANIME_GENRES} from \"../../../globals\";\r\n\r\n/**\r\n * Cyber-Genesis version of the Button component from Material-ui\r\n * @param props.classNames {String}\r\n * @param props.variant {String}\r\n * @param props.component {String}\r\n * @param props.color {String}\r\n * @param props.type {String}\r\n * @param props.disabled {Boolean}\r\n * @param props.title {String}\r\n * @param props.onClick {Function}\r\n * @param props.children {JSX.Element}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CyberButton(props) {\r\n    const {classNames, variant, component, color, type, disabled, title, onClick, children} = props;\r\n    return <Button type={type} component={component} variant={variant} color={color} className={classNames} onMouseEnter={playHoverSound}\r\n                   disabled={disabled} title={title}\r\n                   onClick={() => {\r\n                       playClickSound();\r\n                       if (onClick) onClick()\r\n                   }}>\r\n        {children}\r\n    </Button>\r\n}\r\n\r\n/**\r\n * Cyber-Genesis version of the Link component from Material-ui\r\n * @param props.classNames {Object}\r\n * @param props.to {Object}\r\n * @param props.children {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CyberLink(props) {\r\n    const {classNames, to, children} = props;\r\n    return <Link to={to} className={classNames} onMouseEnter={playHoverSound} onClick={playClickSound}>\r\n        {children}\r\n    </Link>\r\n}\r\n\r\n/**\r\n *\r\n * @param props.src {string} Src of the image.\r\n * @param props.alt {string} Alt of the image.\r\n * @param props.className {string} Additional classes for the image.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function PreLoadImage(props) {\r\n    const {className, src, alt} = props;\r\n\r\n    const [loaded, setLoaded] = React.useState(false);\r\n\r\n    return <>\r\n        <img src={src}\r\n             className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n             onLoad={() => {setLoaded(true)}}\r\n        />\r\n        <img className={loaded ? className ? `fade-in ${className}` : 'fade-in' : className ? `before-fade-in ${className}` : 'before-fade-in'}\r\n             src={src} alt={alt ? alt : 'Image'}\r\n        />\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function LoadGifs(props) {\r\n    console.log('loading gifs');\r\n    return <div style={{position: 'absolute', opacity: 0, height: 0}}>\r\n        {ANIME_GENRES.map(genre => (\r\n            <img style={{position: 'absolute', opacity: 0, height: 0}} src={`/images/genre_icons/${genre}.gif`}/>\r\n        ))}\r\n    </div>\r\n}","import {\r\n    ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CANCEL_PEOPLE_LOADING,\r\n    CHARACTERS_LOADING,\r\n    FILTER_CHARACTERS,\r\n    FILTER_PEOPLE,\r\n    GET_ALL_CHARACTERS_FOR_ANIME, GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    GET_PERSON, GET_PUBLISHED_MANGA_FOR_PERSON, GET_VOICE_ACTOR_ROLES_FOR_PERSON, MANGA_LOADING,\r\n    PEOPLE_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_PEOPLE,\r\n    API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    API_GET_ONE_PERSON, API_GET_PUBLISHED_MANGA_FOR_PERSON,\r\n    API_GET_VOICE_ACTOR_ROLES_FOR_PERSON\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieCharactersFilters, setCookiePeopleFilters} from \"./cookies\";\r\nimport {CharactersFilterNames, PeopleFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\nimport {cancelCharactersLoading} from \"./characters\";\r\nimport {cancelMangaLoading} from \"./manga\";\r\nimport {MANGA_ORDERINGS} from \"../globals\";\r\n\r\n\r\n// GET A ONE PERSON\r\nexport const getPerson = id => (dispatch, getState) => {\r\n    dispatch({type: PEOPLE_LOADING});\r\n    axios\r\n        .get(API_GET_ONE_PERSON(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET VOICE ACTOR ROLES (CHARACTERS) FOR PERSON\r\nexport const getVoiceActorRolesForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_VOICE_ACTOR_ROLES_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelCharactersLoading());\r\n            dispatch({\r\n                type: GET_VOICE_ACTOR_ROLES_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME STAFF POSITIONS (ANIME) FOR PERSON\r\nexport const getAnimeStaffPositionsForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelAnimeLoading());\r\n            dispatch({\r\n                type: GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET PUBLISHED MANGA (MANGA) FOR PERSON\r\nexport const getPublishedMangaForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_PUBLISHED_MANGA_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelMangaLoading());\r\n            dispatch({\r\n                type: GET_PUBLISHED_MANGA_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL PEOPLE\r\nexport const filterPeople = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: PEOPLE_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setPeopleFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_PEOPLE, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_PEOPLE,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookiePeopleFilters(filters))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setPeopleFilterParams(params, filters) {\r\n    if (filters[PeopleFilterNames.search] && typeof filters[PeopleFilterNames.search] == 'string')\r\n        params[PeopleFilterNames.search] = filters[PeopleFilterNames.search];\r\n    if (filters[PeopleFilterNames.ordering])\r\n        params[PeopleFilterNames.ordering] = filters[PeopleFilterNames.ordering];\r\n    return params\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA, BRANCH_PEOPLE} from \"../globals\";\r\nimport {getAnime, getPendingAnimeServerInfos} from \"./anime\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\nimport {\r\n    API_ADD_ANIME_TO_SERVER, API_APPROVE_ANIME_ON_SERVER, API_GET_ACTIVE_TORRENTS_PROGRESS,\r\n    API_GET_NEWS,\r\n    API_GET_REQUIEM, API_GET_SCRAPERS_PROGRESS,\r\n    API_GET_TARGETS,\r\n    API_OPEN_ANIME_FOLDER,\r\n    API_OPEN_EROGE_FOLDER,\r\n    API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS,\r\n    API_REQUIEM_DOWNLOAD_ANIME_TORRENT,\r\n    API_REQUIEM_GET_STORAGE_INFO,\r\n    API_REQUIEM_GET_TORRENT_PROGRESS,\r\n    API_REQUIEM_UPDATE_ANIME_MAL,\r\n    API_REQUIEM_UPDATE_CHARACTER_MAL,\r\n    API_REQUIEM_UPDATE_EROGE_HENTAIGAMER,\r\n    API_REQUIEM_UPDATE_MANGA_MAL,\r\n    API_REQUIEM_UPDATE_PERSON_MAL,\r\n    API_UPDATE_ANIME_TO_SERVER\r\n} from \"./api_urls\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {Alert, Anime} from \"../models\";\r\nimport {getManga} from \"./manga\";\r\nimport {getCharacter} from \"./characters\";\r\nimport {getEroge} from \"./eroge\";\r\nimport {\r\n    ANIME_LOADING,\r\n    CANCEL_ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CANCEL_EROGE_LOADING,\r\n    CANCEL_MANGA_LOADING,\r\n    CANCEL_PEOPLE_LOADING,\r\n    CHARACTERS_LOADING,\r\n    DOWNLOAD_TORRENT,\r\n    EROGE_LOADING,\r\n    GET_ACTIVE_TORRENTS_PROGRESS, GET_ANIME,\r\n    GET_NEWS, GET_PENDING_ANIME_SERVER_INFO,\r\n    GET_REQUIEM,\r\n    GET_SCRAPERS_PROGRESS,\r\n    GET_STORAGE_INFO,\r\n    GET_TARGETS,\r\n    GET_TORRENT_PROGRESS,\r\n    MANGA_LOADING,\r\n    NEWS_LOADING,\r\n    PEOPLE_LOADING,\r\n    REQUIEM_LOADING\r\n} from \"./types\";\r\nimport {getPerson} from \"./people\";\r\n\r\n\r\nfunction scrapeUpdateTitleApiUrl(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return API_REQUIEM_UPDATE_ANIME_MAL(id);\r\n        case BRANCH_MANGA:\r\n            return API_REQUIEM_UPDATE_MANGA_MAL(id);\r\n        case BRANCH_CHARACTERS:\r\n            return API_REQUIEM_UPDATE_CHARACTER_MAL(id);\r\n        case BRANCH_PEOPLE:\r\n            return API_REQUIEM_UPDATE_PERSON_MAL(id);\r\n        case BRANCH_EROGE:\r\n            return API_REQUIEM_UPDATE_EROGE_HENTAIGAMER(id);\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\n\r\n// GET REQUIEM MODEL\r\nexport const getRequiem = () => (dispatch, getState) => {\r\n    dispatch({type: REQUIEM_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_REQUIEM, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_REQUIEM,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET TARGETS\r\nexport const getTargets = () => (dispatch, getState) => {\r\n    dispatch({type: REQUIEM_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_TARGETS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TARGETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET SCRAPERS PROGRESS\r\nexport const getScrapersProgress = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_SCRAPERS_PROGRESS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_SCRAPERS_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SCRAPE UPDATE SINGLE TITLE\r\nexport const scrapeUpdateTitle = (id, branch) => (dispatch, getState) => {\r\n    if (branch === BRANCH_ANIME)\r\n        dispatch({type: ANIME_LOADING});\r\n    else if (branch === BRANCH_MANGA)\r\n        dispatch({type: MANGA_LOADING});\r\n    else if (branch === BRANCH_CHARACTERS)\r\n        dispatch({type: CHARACTERS_LOADING});\r\n    else if (branch === BRANCH_EROGE)\r\n        dispatch({type: EROGE_LOADING});\r\n    else if (branch === BRANCH_PEOPLE)\r\n        dispatch({type: PEOPLE_LOADING});\r\n    else return;\r\n\r\n    axios\r\n        .get(scrapeUpdateTitleApiUrl(branch, id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} Scraped & Updated`, Alert.type_success));\r\n            if (branch === BRANCH_ANIME) dispatch(getAnime(id));\r\n            else if (branch === BRANCH_MANGA) dispatch(getManga(id));\r\n            else if (branch === BRANCH_CHARACTERS) dispatch(getCharacter(id));\r\n            else if (branch === BRANCH_EROGE) dispatch(getEroge(id));\r\n            else if (branch === BRANCH_PEOPLE) dispatch(getPerson(id));\r\n        })\r\n        .catch(err => {\r\n            if (branch === BRANCH_ANIME)\r\n                dispatch({type: CANCEL_ANIME_LOADING});\r\n            else if (branch === BRANCH_MANGA)\r\n                dispatch({type: CANCEL_MANGA_LOADING});\r\n            else if (branch === BRANCH_CHARACTERS)\r\n                dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            else if (branch === BRANCH_EROGE)\r\n                dispatch({type: CANCEL_EROGE_LOADING});\r\n            else if (branch === BRANCH_PEOPLE)\r\n                dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET STORAGE INFO\r\nexport const getStorageInfo = () => (dispatch, getState) => {\r\n    dispatch({type: REQUIEM_LOADING});\r\n    axios\r\n        .get(API_REQUIEM_GET_STORAGE_INFO, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_STORAGE_INFO,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DOWNLOAD TORRENT\r\nexport const downloadTorrent = (id, data) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    for (let x = 0; x < data['files'].length; x++) formData.append('file-' + x, data['files'][x]);\r\n    formData.append('disk', data['disk']);\r\n    formData.append('magnet', data['magnet']);\r\n    formData.append('extra_ids', data['extra_ids']);\r\n    formData.append('extract_subs', data['extract_subs']);\r\n    formData.append('additional_info', data['additional_info']);\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .post(API_REQUIEM_DOWNLOAD_ANIME_TORRENT(id), formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Torrent is downloading', Alert.type_success));\r\n            dispatch(getAnime(id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// DELETE ANIME_SERVE_INFO AND ITS TORRENTS\r\nexport const deleteAnimeServerInfoAndTorrents = (id) => (dispatch, getState) => {\r\n    let config = tokenConfig(getState);\r\n    config['headers']['withCredentials'] = true;\r\n\r\n    axios\r\n        .get(API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS(id), config)\r\n        .then(res => {\r\n            dispatch(getAnime(id))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET TORRENT PROGRESS INFO\r\nexport const getTorrentProgress = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_REQUIEM_GET_TORRENT_PROGRESS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TORRENT_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ALL ACTIVE TORRENTS PROGRESS INFO\r\nexport const getActiveTorrentsProgress = () => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_GET_ACTIVE_TORRENTS_PROGRESS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ACTIVE_TORRENTS_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// ADD ANIME TO SERVER\r\nexport const addAnimeToServer = (animeInfo, alternative_callback = undefined) => (dispatch, getState) => {\r\n    const body = JSON.stringify(animeInfo);\r\n\r\n    axios\r\n        .post(API_ADD_ANIME_TO_SERVER, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('The Anime has been added to the server', Alert.type_success));\r\n            if (alternative_callback === GET_ANIME)\r\n                dispatch(getAnime(animeInfo['anime']))\r\n            if (alternative_callback === GET_PENDING_ANIME_SERVER_INFO)\r\n                dispatch(getPendingAnimeServerInfos(1))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// UPDATE ANIME TO SERVER\r\nexport const updateAnimeToServer = (animeInfo, alternative_callback = undefined) => (dispatch, getState) => {\r\n    const body = JSON.stringify(animeInfo);\r\n\r\n    axios\r\n        .put(API_UPDATE_ANIME_TO_SERVER(animeInfo['anime']), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('The Anime Server Info has been updated successfully!', Alert.type_success));\r\n            if (alternative_callback === GET_ANIME)\r\n                dispatch(getAnime(animeInfo['anime']))\r\n            if (alternative_callback === GET_PENDING_ANIME_SERVER_INFO)\r\n                dispatch(getPendingAnimeServerInfos(1))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// SET ANIME ON SERVER AS APPROVED\r\nexport const approveAnimeOnServer = (id, alternative_callback = undefined) => (dispatch, getState) => {\r\n    axios\r\n        .get(API_APPROVE_ANIME_ON_SERVER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime Approved!', Alert.type_success));\r\n            if (alternative_callback === GET_ANIME)\r\n                dispatch(getAnime(id))\r\n            if (alternative_callback === GET_PENDING_ANIME_SERVER_INFO)\r\n                dispatch(getPendingAnimeServerInfos(1))\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// GET NEWS\r\nexport const getNews = (page) => (dispatch, getState) => {\r\n    dispatch({type: NEWS_LOADING});\r\n    let config = tokenConfig(getState);\r\n    if (page) if (page !== 1) config.params = {'page': page};\r\n\r\n\r\n    axios\r\n        .get(API_GET_NEWS, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_NEWS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// OPEN ANIME FOLDER\r\nexport const openAnimeFolder = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_OPEN_ANIME_FOLDER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Folder opened', Alert.type_info));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// OPEN EROGE FOLDER\r\nexport const openErogeFolder = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_OPEN_EROGE_FOLDER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Folder opened', Alert.type_info));\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};","import moment from \"moment\";\r\nimport {\r\n    faArrowDown,\r\n    faArrowUp,\r\n    faBan,\r\n    faClock, faDownload, faHdd, faInfinity,\r\n    faPause, faPuzzlePiece,\r\n    faSpinner, faUpload, faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\n\r\nexport function getBytesToSize(size) {\r\n    const terabyte = 1099511627776;\r\n    const gigabyte = 1073741824;\r\n    const megabyte = 1048576;\r\n\r\n    if (size >= 10995116277760)  // More than 10TB\r\n        return `${(size / terabyte).toFixed(1)}TB`;\r\n    else if (size >= 1099511627776)  // More than 1TB\r\n        return `${(size / terabyte).toFixed(2)}TB`;\r\n    else if (size >= 107374182400) // More than 100GB\r\n        return `${Math.ceil(size / gigabyte)}GB`;\r\n    else if (size >= 10737418240) // More than 10GB\r\n        return `${(size / gigabyte).toFixed(1)}GB`;\r\n    else if (size >= 1073741824) // More than 1GB\r\n        return `${(size / gigabyte).toFixed(2)}GB`;\r\n    else  // Less then 1GB\r\n        return `${Math.ceil(size / megabyte)}MB`;\r\n}\r\n\r\n\r\nexport function getTime(sec) {\r\n    let hrs = Math.floor(sec / 3600);\r\n    let min = Math.floor((sec - (hrs * 3600)) / 60);\r\n    let seconds = sec - (hrs * 3600) - (min * 60);\r\n    seconds = Math.round(seconds * 100) / 100;\r\n\r\n    let result = (hrs < 10 ? \"0\" + hrs : hrs);\r\n    result += \":\" + (min < 10 ? \"0\" + min : min);\r\n    result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\r\n    return result;\r\n}\r\n\r\n\r\nexport function getProgress(progress) {\r\n    return (progress * 100).toFixed(1);\r\n}\r\n\r\n\r\nexport function getSpeed(speed) {\r\n    if (speed < 1000000) return `${(speed / 1024.0).toFixed(1)}Kb/s`;\r\n    else return `${(speed / (1024 * 1024.0)).toFixed(1)}Mb/s`;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.torrent {Object}\r\n * @param props.filters {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TorrentProgressInfo(props) {\r\n    const {torrent, filters} = props;\r\n    let days = parseInt(moment.utc(torrent['eta'] * 1000).format('DDD')) - 1;\r\n    let hours = parseInt(moment.utc(torrent['eta'] * 1000).format('HH'));\r\n    let minutes = parseInt(moment.utc(torrent['eta'] * 1000).format('mm'));\r\n    let eta_str = '';\r\n    let status_icon;\r\n\r\n    if (days > 0) eta_str += `${days}d `;\r\n    if (hours > 0) eta_str += `${hours}h `;\r\n    if (minutes > 0) eta_str += `${minutes}m`;\r\n\r\n    if (torrent['torrent_status'].indexOf('downloading') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowDown}/>;\r\n    else if (torrent['torrent_status'].indexOf('forcedDL') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowDown}/>;\r\n    else if (torrent['torrent_status'].indexOf('upload') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowUp}/>;\r\n    else if (torrent['torrent_status'].indexOf('pause') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faPause}/>;\r\n    else if (torrent['torrent_status'].indexOf('check') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faSpinner} title=\"Checking\"/>;\r\n    else if (torrent['torrent_status'].indexOf('stall') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faBan} title=\"Stalled\"/>;\r\n    else if (torrent['torrent_status'].indexOf('queued') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faClock} title=\"Queued\"/>;\r\n    else\r\n        status_icon = <span className=\"margin-left-10\">{torrent['torrent_status']}</span>;\r\n\r\n    return filters['name'] ?\r\n        <tbody className=\"torrent-info-container\">\r\n        <tr>\r\n            <td>\r\n                {torrent['name'].replace('[NotAdded]', '')}\r\n            </td>\r\n            {filters['size'] ? <td>\r\n                <FontAwesomeIcon icon={faHdd}/>\r\n                <span className=\"color-secondary\">{getBytesToSize(torrent['size'])}</span>\r\n            </td> : null}\r\n            <td>\r\n                {status_icon} <span className=\"color-secondary\">{getProgress(torrent['progress'])}%</span>\r\n            </td>\r\n            {filters['dl_speed'] ? <td>\r\n                            <span><FontAwesomeIcon icon={faDownload}/>{' '}\r\n                                <span className={torrent['dl_speed'] > 0 ? 'color-secondary' : null}>\r\n                                {getSpeed(torrent['dl_speed'])}</span></span>\r\n            </td> : null}\r\n            {filters['up_speed'] ? <td>\r\n                            <span><FontAwesomeIcon icon={faUpload}/>{' '}\r\n                                <span className={torrent['up_speed'] > 0 ? 'color-secondary' : null}>\r\n                                {getSpeed(torrent['up_speed'])}</span></span>\r\n            </td> : null}\r\n            {filters['remaining'] ? <td>\r\n                <FontAwesomeIcon icon={faPuzzlePiece} title=\"Remaining\"/>{' '}\r\n                <span className=\"color-secondary\">{getBytesToSize(torrent['amount_left'])}</span>\r\n            </td> : null}\r\n            {filters['seeds'] ? <td>\r\n                <FontAwesomeIcon icon={faUsers} className=\"color-green\"/>{' '}\r\n                <span className=\"color-secondary\">{torrent['num_seeds']}</span>\r\n            </td> : null}\r\n            {filters['leechs'] ? <td>\r\n                <FontAwesomeIcon icon={faUsers} className=\"color-danger\"/>{' '}\r\n                <span className=\"color-secondary\">{torrent['num_leechs']}</span>\r\n            </td> : null}\r\n            {filters['eta'] ? <td>\r\n                <FontAwesomeIcon icon={faClock}/>{' '}\r\n                <span className=\"color-secondary\">{torrent['eta'] < 8640000 ? eta_str :\r\n                    <FontAwesomeIcon icon={faInfinity}/>}</span>\r\n            </td> : null}\r\n        </tr>\r\n        <tr>\r\n            <td className=\"padding-bottom-10\" colSpan=\"20\">\r\n                <LinearProgress variant=\"determinate\" color=\"secondary\" value={getProgress(torrent['progress'])}/>\r\n            </td>\r\n        </tr>\r\n        </tbody> :\r\n        <div className=\"torrent-info-container\">\r\n            <div>\r\n                <p className=\"color-secondary-dark\">\r\n                    {filters['name'] ? <span className=\"torrent-info\">\r\n                    {torrent['name'].replace('[NotAdded]', '')}\r\n                </span> : null}\r\n\r\n                    {filters['size'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faHdd}/>{' '}\r\n                        <span>{getBytesToSize(torrent['size'])}</span>\r\n                </span> : null}\r\n\r\n                    <span className=\"torrent-info\">{status_icon} {getProgress(torrent['progress'])}%</span>\r\n\r\n                    {filters['dl_speed'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faDownload}/>{' '}\r\n                        <span className={torrent['dl_speed'] > 0 ? 'color-secondary' : null}>\r\n                        {getSpeed(torrent['dl_speed'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['up_speed'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUpload}/>{' '}\r\n                        <span className={torrent['up_speed'] > 0 ? 'color-secondary' : null}>\r\n                        {getSpeed(torrent['up_speed'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['remaining'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faPuzzlePiece} title=\"Remaining\"/>{' '}\r\n                        <span>{getBytesToSize(torrent['amount_left'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['seeds'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUsers} className=\"color-green\"/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['num_seeds']}</span>\r\n                </span> : null}\r\n                    {filters['leechs'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUsers} className=\"color-danger\"/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['num_leechs']}</span>\r\n                </span> : null}\r\n\r\n                    {filters['eta'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faClock}/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['eta'] < 8640000 ? eta_str :\r\n                            <FontAwesomeIcon icon={faInfinity}/>}</span>&nbsp;\r\n                </span> : null}\r\n                </p>\r\n            </div>\r\n            <LinearProgress variant=\"determinate\" color=\"secondary\" value={getProgress(torrent['progress'])}/>\r\n        </div>;\r\n}","import * as Yup from \"yup\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {Form, Formik} from \"formik\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function GoToPageDialog(props) {\r\n    const {open, current_page, total_pages, onClose, goToPage} = props;\r\n\r\n    const GoToPageSchema = Yup.object().shape({\r\n        page_number: Yup.number()\r\n            .min(1, \"Page number must be above 1.\")\r\n            .max(total_pages, `Page number can't exceed the last page ${total_pages}.`)\r\n            .required('Required'),\r\n    });\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"go-to-page-dialog-title\" open={open}>\r\n            <div className=\"go-to-page-dialog\">\r\n                <DialogTitle id=\"go-to-page-dialog-title\">Go to page</DialogTitle>\r\n\r\n                <Formik\r\n                    initialValues={{page_number: current_page}}\r\n                    validationSchema={GoToPageSchema}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        goToPage(values.page_number);\r\n                        onClose();\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({isSubmitting, errors, touched, values, handleChange, handleBlur}) => (\r\n                        <Form className=\"content-container\">\r\n                            <TextField\r\n                                label=\"Page\"\r\n                                type=\"number\"\r\n                                name=\"page_number\"\r\n                                value={values.page_number}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                error={errors.page_number && touched.page_number}\r\n                                helperText={(errors.page_number && touched.page_number) && errors.page_number}/>\r\n                            <CyberButton color=\"primary\" type=\"submit\" variant=\"contained\"\r\n                                         disabled={isSubmitting}>Go</CyberButton>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Moment from 'react-moment'\r\n\r\nimport {getNews} from '../../../actions/requiem'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {getTime} from \"./snippets\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass News extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getNews();\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.news[ApiResult.count] / 5)) {\r\n            this.setState({current_page: page});\r\n            this.props.getNews(page);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {news, news_is_loading} = this.props;\r\n        let news_results = [];\r\n\r\n        try {\r\n            if (news['results'].length > 0) news_results = news['results'];\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <Grid id=\"News-Container\" container>\r\n                {!news_is_loading ?\r\n                    news_results.map((post, i) => (\r\n                        <Grid item xs={12} className=\"report box-light\" key={i}>\r\n                            <h3 className=\"color-blue\">{post['title']}</h3>\r\n                            <p className=\"color-dark-blue indent-1em\">{post['description']}</p>\r\n                            {post['anime_entries'].length > 0 ?\r\n                                <p className=\"color-dark-blue\">Total <span className={post['title']\r\n                                    .indexOf('removed') >= 0 ? 'color-red' : 'color-blue'}>\r\n                                            {post['anime_entries'].length}</span></p>\r\n                                : post['anime_server_entries'].length > 0 ?\r\n                                    <p className=\"color-dark-blue\">Total <span className=\"color-magenta\">\r\n                                                {post['anime_server_entries'].length}</span></p>\r\n                                    : post['manga_entries'].length > 0 ?\r\n                                        <p className=\"color-dark-blue\">Total <span className={post['title']\r\n                                            .indexOf('removed') >= 0 ? 'color-red' : 'color-blue'}>\r\n                                                    {post['manga_entries'].length}</span></p>\r\n                                        : post['manga_server_entries'].length > 0 ?\r\n                                            <p className=\"color-dark-blue\">Total&nbsp;\r\n                                                <span className=\"color-magenta\">\r\n                                                            {post['manga_server_entries'].length}</span></p>\r\n                                            : post['characters_entries'].length > 0 ?\r\n                                                <p className=\"color-dark-blue\">\r\n                                                    Total <span className={post['title']\r\n                                                    .indexOf('removed') >= 0 ? 'color-red'\r\n                                                    : 'color-blue'}>\r\n                                                            {post['characters_entries'].length}</span></p>\r\n                                                : null}\r\n                            {/*{post['anime_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['anime_entries']} branch={BRANCH_TYPE_ANIME}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    server={false}/> : null}*/}\r\n                            {/*{post['anime_server_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['anime_server_entries']}*/}\r\n                            {/*                    branch={BRANCH_TYPE_ANIME} server={true}/> : null}*/}\r\n                            {/*{post['manga_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['manga_entries']} branch={BRANCH_TYPE_MANGA}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    server={false}/> : null}*/}\r\n                            {/*{post['manga_server_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['manga_server_entries']}*/}\r\n                            {/*                    branch={BRANCH_TYPE_MANGA} server={true}/> : null}*/}\r\n                            {/*{post['characters_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['characters_entries']}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    branch={BRANCH_TYPE_CHARACTERS} server={false}/> : null}*/}\r\n                            <div className=\"duration\">\r\n                                <p className=\"color-dark-blue\">\r\n                                    Date: <span className=\"color-white\"><Moment\r\n                                    format=\"DD MMM YYYY HH:mm:ss\"\r\n                                    date={post['datetime_created']}/>\r\n                                        </span>\r\n                                </p>\r\n                                {post['operation_duration_sec'] ?\r\n                                    <p className=\"color-dark-blue margin-left-20\">\r\n                                        Duration: <span className=\"color-white\">\r\n                                                {getTime(post['operation_duration_sec'])}\r\n                                            </span>\r\n                                    </p>\r\n                                    : null}\r\n                            </div>\r\n                        </Grid>))\r\n                    : <Loading text={'News Loading'}/>}\r\n\r\n                {!news_is_loading ? <div className=\"pagination\">\r\n                    <Pagination\r\n                        count={Math.ceil(this.props.news[ApiResult.count] / 5)}\r\n                        color=\"primary\"\r\n                        siblingCount={3}\r\n                        page={this.state.current_page}\r\n                        onChange={(type, page) => {\r\n                            playClickSound();\r\n                            if (page !== this.state.current_page)\r\n                                this.goToPage(page);\r\n                            else\r\n                                this.setState({page_dialog_open: true})\r\n                        }}\r\n                    />\r\n                    <GoToPageDialog\r\n                        open={this.state.page_dialog_open}\r\n                        current_page={this.state.current_page}\r\n                        total_pages={Math.ceil(this.props.news[ApiResult.count] / 5)}\r\n                        goToPage={this.goToPage}\r\n                        onClose={this.closePageDialog}/>\r\n                </div> : null}\r\n\r\n\r\n                     {/*<Pagination page={news} items_per_page={5} getItems={getNews}*/}\r\n                     {/*                            scroll_to={[0, 550]}/> : null}*/}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    news_is_loading: state.requiem.news_is_loading,\r\n    news: state.requiem.news,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getNews})(News)\r\n","export const particles_params = {\r\n    \"particles\": {\r\n        \"number\": {\r\n            \"value\": 100,\r\n            \"density\": {\r\n                \"enable\": true,\r\n                \"value_area\": 263\r\n            }\r\n        },\r\n        \"color\": {\r\n            \"value\": \"#ffffff\"\r\n        },\r\n        \"shape\": {\r\n            \"type\": \"circle\",\r\n            \"stroke\": {\r\n                \"width\": 0,\r\n                \"color\": \"#000000\"\r\n            },\r\n            \"polygon\": {\r\n                \"nb_sides\": 5\r\n            },\r\n            \"image\": {\r\n                \"src\": \"img/github.svg\",\r\n                \"width\": 100,\r\n                \"height\": 100\r\n            }\r\n        },\r\n        \"opacity\": {\r\n            \"value\": 0.3,\r\n            \"random\": false,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 1,\r\n                \"opacity_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"size\": {\r\n            \"value\": 2,\r\n            \"random\": true,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 40,\r\n                \"size_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"line_linked\": {\r\n            \"enable\": true,\r\n            \"distance\": 40,\r\n            \"color\": \"#ffffff\",\r\n            \"opacity\": 0.15,\r\n            \"width\": 1\r\n        },\r\n        \"move\": {\r\n            \"enable\": true,\r\n            \"speed\": 0.2,\r\n            \"direction\": \"none\",\r\n            \"random\": true,\r\n            \"straight\": false,\r\n            \"out_mode\": \"out\",\r\n            \"bounce\": false,\r\n            \"attract\": {\r\n                \"enable\": false,\r\n                \"rotateX\": 600,\r\n                \"rotateY\": 1200\r\n            }\r\n        }\r\n    },\r\n    \"interactivity\": {\r\n        \"detect_on\": \"window\",\r\n        \"events\": {\r\n            \"onhover\": {\r\n                \"enable\": true,\r\n                \"mode\": \"grab\"\r\n            },\r\n            \"onclick\": {\r\n                \"enable\": true,\r\n                \"mode\": \"push\"\r\n            },\r\n            \"resize\": true\r\n        },\r\n        \"modes\": {\r\n            \"grab\": {\r\n                \"distance\": 50,\r\n                \"line_linked\": {\r\n                    \"opacity\": 1\r\n                }\r\n            },\r\n            \"bubble\": {\r\n                \"distance\": 400,\r\n                \"size\": 40,\r\n                \"duration\": 2,\r\n                \"opacity\": 8,\r\n                \"speed\": 3\r\n            },\r\n            \"repulse\": {\r\n                \"distance\": 200,\r\n                \"duration\": 0.4\r\n            },\r\n            \"push\": {\r\n                \"particles_nb\": 4\r\n            },\r\n            \"remove\": {\r\n                \"particles_nb\": 2\r\n            }\r\n        }\r\n    },\r\n    \"retina_detect\": true\r\n};\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Particles from 'react-particles-js';\r\n\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/home.css'\r\nimport {getAllUsers} from \"../../actions/users\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport {Profile as ProfileModel, User} from \"../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../layout/common/common\";\r\nimport {CYBER_GENESIS_URL} from \"../../globals\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport {getBrowseGridListCols} from \"../functions\";\r\nimport {PROFILE} from \"../../urls\";\r\nimport News from \"../requiem/snippets/News\";\r\nimport {particles_params} from \"./functions\";\r\n\r\n\r\nclass Home extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber-Space';\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        this.props.getAllUsers();\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    render() {\r\n        // const video_url = 'https://finkiukim-my.sharepoint.com/personal/adrian_kostoski_students_finki_ukim_mk/_layouts/15/download.aspx?SourceUrl=%2Fpersonal%2Fadrian_kostoski_students_finki_ukim_mk%2FDocuments%2FAnime-Hosting%2F%5BCoalgirls%5D_Infinite_Stratos_01_(1920x1080_Blu-Ray_FLAC)_%5BA9B39255%5D.mkv&correlationId=a16fc107-db97-49a0-8f22-34972ccd6a98&psi=a98eab6f-0e64-4e87-ae49-72aef5c08037&ccat=2&cs=fHxPbmVVcFdlYlBsYXllcg%3D%3D&App=OneDriveWebVideo';\r\n        // const video_url2 = 'https://finkiukim-my.sharepoint.com/personal/adrian_kostoski_students_finki_ukim_mk/_layouts/15/download.aspx?SourceUrl=%2Fpersonal%2Fadrian_kostoski_students_finki_ukim_mk%2FDocuments%2FAnime-Hosting%2F%5BCoalgirls%5D_Infinite_Stratos_01_(1920x1080_Blu-Ray_FLAC)_%5BA9B39255%5D.mkv&correlationId=a16fc107-db97-49a0-8f22-34972ccd6a98&psi=a98eab6f-0e64-4e87-ae49-72aef5c08037&ccat=2&cs=fHxPbmVVcFdlYlBsYXllcg%3D%3D&App=download';\r\n\r\n        const video_url_dropbox = 'https://www.dropbox.com/s/zoy9wf489bvyhmq/%5BHorribleSubs%5D%20Kateikyoushi%20Hitman%20Reborn%21%20-%2001%20%5B480p%5D.mkv?raw=1';\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"Home\" container>\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <News/>*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid item xs={12}>\r\n                        <Particles className=\"bg-particles\" params={particles_params}/>\r\n                    </Grid>\r\n\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <iframe*/}\r\n                    {/*        src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fmijomir.bulgarin%2Fposts%2F467447447764547&width=500&show_text=false&height=281&appId\"*/}\r\n                    {/*        width=\"500\" height=\"281\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameBorder=\"0\"*/}\r\n                    {/*        allowFullScreen=true*/}\r\n                    {/*        allow=\"autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share\"*/}\r\n                    {/*        allowFullScreen=\"true\"></iframe>*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <p>Video:</p>*/}\r\n                    {/*    <video width=\"30%\" controls>*/}\r\n                    {/*        <source*/}\r\n                    {/*            src={video_url_dropbox}*/}\r\n                    {/*        />*/}\r\n                    {/*        Your browser does not support the video tag.*/}\r\n                    {/*    </video>*/}\r\n                    {/*    /!*<video width=\"30%\" controls>*!/*/}\r\n                    {/*    /!*    <source*!/*/}\r\n                    {/*    /!*        src={video_url}*!/*/}\r\n                    {/*    /!*    />*!/*/}\r\n                    {/*    /!*    Your browser does not support the video tag.*!/*/}\r\n                    {/*    /!*</video>*!/*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid item xs={12}>\r\n                        <h1>Users</h1>\r\n                    </Grid>\r\n\r\n                    {this.props.all_users_loaded ? <Grid item xs={12}>\r\n                        <GridList cellHeight={400} className=\"user-card-container\" cols={this.state.gridlist_cols}>\r\n                            {this.props.all_users.map((user, x) => (\r\n                                <GridListTile key={x} cols={1}>\r\n                                    <CyberLink classNames=\"user-card\" to={PROFILE(user[User.id])}>\r\n                                        <div className=\"card-text\">\r\n                                            <h2>{user[User.username]}</h2>\r\n                                        </div>\r\n                                        <PreLoadImage\r\n                                            src={`${CYBER_GENESIS_URL}${user[User.profile]?.[ProfileModel.profile_image]}`}\r\n                                            alt={'Avatar'}/>\r\n                                    </CyberLink>\r\n                                </GridListTile>\r\n\r\n                                // <Card className=\"user-card\" variant=\"outlined\">\r\n                                //     <CardContent>\r\n                                //         <Typography gutterBottom>{user[User.username]}</Typography>\r\n                                //         <PreLoadImage\r\n                                //             src={`${CYBER_GENESIS_URL}${user[User.profile][ProfileModel.profile_image]}`}\r\n                                //             alt={'Avatar'}/>\r\n                                //     </CardContent>\r\n                                //     <CardActions>\r\n                                //     </CardActions>\r\n                                // </Card>\r\n                            ))}\r\n                        </GridList>\r\n                    </Grid> : this.props.users_loading ? <Loading/> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    users_loading: state.users.users_loading,\r\n    all_users_loaded: state.users.all_users_loaded,\r\n    all_users: state.users.all_users,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllUsers})(Home)\r\n","function compareByLabel(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = a['label'];\r\n    const second = b['label'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nfunction compareByStat(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['stat'];\r\n    const second = a['stat'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nexport function getDataTypes(statistics) {\r\n\r\n    let data = [\r\n        {label: 'Movie', stat: statistics['total_movie'], color: '', hoverColor: ''},\r\n        {label: 'Music', stat: statistics['total_music'], color: '', hoverColor: ''},\r\n        {label: 'ONA', stat: statistics['total_ona'], color: '', hoverColor: ''},\r\n        {label: 'OVA', stat: statistics['total_ova'], color: '', hoverColor: ''},\r\n        {label: 'Special', stat: statistics['total_special'], color: '', hoverColor: ''},\r\n        {label: 'TV', stat: statistics['total_tv'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            // borderColor: 'white',\r\n            // hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataSources(statistics) {\r\n    let data = [\r\n        {label: 'Original', stat: statistics['total_original_anime'], meanScore: 0},\r\n        {label: 'Light Novel', stat: statistics['total_anime_from_light_novel'], meanScore: 0},\r\n        {label: 'Music', stat: statistics['total_anime_from_music'], meanScore: 0},\r\n        {label: 'Manga', stat: statistics['total_anime_from_manga'], meanScore: 0},\r\n        {label: 'Other', stat: statistics['total_anime_from_other'], meanScore: 0},\r\n        {label: 'Visual Novel', stat: statistics['total_anime_from_visual_novel'], meanScore: 0},\r\n        {label: 'Book', stat: statistics['total_anime_from_book'], meanScore: 0},\r\n        {label: 'Game', stat: statistics['total_anime_from_game'], meanScore: 0},\r\n        {label: 'Web Manga', stat: statistics['total_anime_from_web_manga'], meanScore: 0},\r\n        {label: 'Novel', stat: statistics['total_anime_from_novel'], meanScore: 0},\r\n        {label: 'Picture Book', stat: statistics['total_anime_from_picture_book'], meanScore: 0},\r\n        {label: 'Card Game', stat: statistics['total_anime_from_card_game'], meanScore: 0},\r\n        {label: '4-Kom Manga', stat: statistics['total_anime_from_4_kom_manga'], meanScore: 0},\r\n        {label: 'Digital Manga', stat: statistics['total_anime_from_digital_manga'], meanScore: 0},\r\n        {label: 'Radio', stat: statistics['total_anime_from_radio'], meanScore: 0},\r\n    ];\r\n    try {\r\n        data = [\r\n            {\r\n                label: 'Original',\r\n                stat: statistics['total_original_anime'],\r\n                meanScore: statistics['total_original_anime_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Light Novel',\r\n                stat: statistics['total_anime_from_light_novel'],\r\n                meanScore: statistics['total_anime_from_light_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Music',\r\n                stat: statistics['total_anime_from_music'],\r\n                meanScore: statistics['total_anime_from_music_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Manga',\r\n                stat: statistics['total_anime_from_manga'],\r\n                meanScore: statistics['total_anime_from_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Other',\r\n                stat: statistics['total_anime_from_other'],\r\n                meanScore: statistics['total_anime_from_other_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Visual Novel',\r\n                stat: statistics['total_anime_from_visual_novel'],\r\n                meanScore: statistics['total_anime_from_visual_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Book',\r\n                stat: statistics['total_anime_from_book'],\r\n                meanScore: statistics['total_anime_from_book_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Game',\r\n                stat: statistics['total_anime_from_game'],\r\n                meanScore: statistics['total_anime_from_game_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Web Manga',\r\n                stat: statistics['total_anime_from_web_manga'],\r\n                meanScore: statistics['total_anime_from_web_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Novel',\r\n                stat: statistics['total_anime_from_novel'],\r\n                meanScore: statistics['total_anime_from_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Picture Book',\r\n                stat: statistics['total_anime_from_picture_book'],\r\n                meanScore: statistics['total_anime_from_picture_book_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Card Game',\r\n                stat: statistics['total_anime_from_card_game'],\r\n                meanScore: statistics['total_anime_from_card_game_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: '4-Kom Manga',\r\n                stat: statistics['total_anime_from_4_kom_manga'],\r\n                meanScore: statistics['total_anime_from_4_kom_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Digital Manga',\r\n                stat: statistics['total_anime_from_digital_manga'],\r\n                meanScore: statistics['total_anime_from_digital_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Radio',\r\n                stat: statistics['total_anime_from_radio'],\r\n                meanScore: statistics['total_anime_from_radio_mean'].toFixed(2)\r\n            },\r\n        ];\r\n    } catch (e) {\r\n    }\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let mean_score_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n        mean_score_data.push(data[x].meanScore);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: mean_score_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '#',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {\r\n                mode: 'label'\r\n            },\r\n            elements: {\r\n                line: {\r\n                    fill: false\r\n                }\r\n            },\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {\r\n                            display: false\r\n                        },\r\n                        labels: {\r\n                            show: true\r\n                        }\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {\r\n                            display: false\r\n                        },\r\n                        labels: {\r\n                            show: true\r\n                        },\r\n                        ticks: {\r\n                            min: 0,\r\n                            max: 10,\r\n                            stepSize: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n\r\nexport function getDataStatuses(statistics) {\r\n\r\n    return {\r\n        labels: [\r\n            'Finished Airing',\r\n            'Not yet Aired',\r\n            'Currently Airing'\r\n        ],\r\n        datasets: [{\r\n            data: [16952, 428, 387],\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRated(statistics) {\r\n\r\n    let data = [\r\n        {label: 'G', stat: statistics['total_rated_g'], color: '', hoverColor: ''},\r\n        {label: 'PG-C', stat: statistics['total_rated_pgc'], color: '', hoverColor: ''},\r\n        {label: 'PG-13', stat: statistics['total_rated_pg13'], color: '', hoverColor: ''},\r\n        {label: 'R', stat: statistics['total_rated_r'], color: '', hoverColor: ''},\r\n        {label: 'R+', stat: statistics['total_rated_r_plus'], color: '', hoverColor: ''},\r\n        {label: 'Rx', stat: statistics['total_rated_rx'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataQualities(statistics) {\r\n\r\n    let data = [\r\n        {label: '2160p', stat: statistics['total_quality_2160p']},\r\n        {\r\n            label: '1080p',\r\n            stat: (statistics['total_quality_1080p'] + statistics['total_quality_960p']),\r\n        },\r\n        {label: '720p', stat: statistics['total_quality_720p']},\r\n        {\r\n            label: '480p',\r\n            stat: (statistics['total_quality_480p'] + statistics['total_quality_528p'] +\r\n                statistics['total_quality_540p'] + statistics['total_quality_560p'] + statistics['total_quality_576p']),\r\n        },\r\n        {\r\n            label: '360p',\r\n            stat: (statistics['total_quality_360p'] + statistics['total_quality_396p']),\r\n        },\r\n        {\r\n            label: '240p',\r\n            stat: (statistics['total_quality_240p'] + statistics['total_quality_288p']),\r\n        },\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataGenres(statistics) {\r\n\r\n    let data = [\r\n        {label: 'Action', stat: statistics['total_genre_action'], color: '', hoverColor: ''},\r\n        {label: 'Adventure', stat: statistics['total_genre_adventure'], color: '', hoverColor: ''},\r\n        {label: 'Cars', stat: statistics['total_genre_cars'], color: '', hoverColor: ''},\r\n        {label: 'Comedy', stat: statistics['total_genre_comedy'], color: '', hoverColor: ''},\r\n        {label: 'Dementia', stat: statistics['total_genre_dementia'], color: '', hoverColor: ''},\r\n        {label: 'Demons', stat: statistics['total_genre_demons'], color: '', hoverColor: ''},\r\n        {label: 'Drama', stat: statistics['total_genre_drama'], color: '', hoverColor: ''},\r\n        {label: 'Ecchi', stat: statistics['total_genre_ecchi'], color: '', hoverColor: ''},\r\n        {label: 'Fantasy', stat: statistics['total_genre_fantasy'], color: '', hoverColor: ''},\r\n        {label: 'Game', stat: statistics['total_genre_game'], color: '', hoverColor: ''},\r\n        {label: 'Harem', stat: statistics['total_genre_harem'], color: '', hoverColor: ''},\r\n        {label: 'Hentai', stat: statistics['total_genre_hentai'], color: '', hoverColor: ''},\r\n        {label: 'Historical', stat: statistics['total_genre_historical'], color: '', hoverColor: ''},\r\n        {label: 'Horror', stat: statistics['total_genre_horror'], color: '', hoverColor: ''},\r\n        {label: 'Josei', stat: statistics['total_genre_josei'], color: '', hoverColor: ''},\r\n        {label: 'Kids', stat: statistics['total_genre_kids'], color: '', hoverColor: ''},\r\n        {label: 'Magic', stat: statistics['total_genre_magic'], color: '', hoverColor: ''},\r\n        {label: 'Martial Arts', stat: statistics['total_genre_martial_arts'], color: '', hoverColor: ''},\r\n        {label: 'Mecha', stat: statistics['total_genre_mecha'], color: '', hoverColor: ''},\r\n        {label: 'Military', stat: statistics['total_genre_military'], color: '', hoverColor: ''},\r\n        {label: 'Music', stat: statistics['total_genre_music'], color: '', hoverColor: ''},\r\n        {label: 'Mystery', stat: statistics['total_genre_mystery'], color: '', hoverColor: ''},\r\n        {label: 'Parody', stat: statistics['total_genre_parody'], color: '', hoverColor: ''},\r\n        {label: 'Police', stat: statistics['total_genre_police'], color: '', hoverColor: ''},\r\n        {label: 'Psychological', stat: statistics['total_genre_psychological'], color: '', hoverColor: ''},\r\n        {label: 'Romance', stat: statistics['total_genre_romance'], color: '', hoverColor: ''},\r\n        {label: 'Samurai', stat: statistics['total_genre_samurai'], color: '', hoverColor: ''},\r\n        {label: 'School', stat: statistics['total_genre_school'], color: '', hoverColor: ''},\r\n        {label: 'Sci-Fi', stat: statistics['total_genre_sci_fi'], color: '', hoverColor: ''},\r\n        {label: 'Seinen', stat: statistics['total_genre_seinen'], color: '', hoverColor: ''},\r\n        {label: 'Shoujo', stat: statistics['total_genre_shoujo'], color: '', hoverColor: ''},\r\n        {label: 'Shoujo Ai', stat: statistics['total_genre_shoujo_ai'], color: '', hoverColor: ''},\r\n        {label: 'Shounen', stat: statistics['total_genre_shounen'], color: '', hoverColor: ''},\r\n        {label: 'Shounen Ai', stat: statistics['total_genre_shounen_ai'], color: '', hoverColor: ''},\r\n        {label: 'Slice of Life', stat: statistics['total_genre_slice_of_life'], color: '', hoverColor: ''},\r\n        {label: 'Space', stat: statistics['total_genre_space'], color: '', hoverColor: ''},\r\n        {label: 'Sports', stat: statistics['total_genre_sports'], color: '', hoverColor: ''},\r\n        {label: 'Super Power', stat: statistics['total_genre_super_power'], color: '', hoverColor: ''},\r\n        {label: 'Supernatural', stat: statistics['total_genre_supernatural'], color: '', hoverColor: ''},\r\n        {label: 'Thriller', stat: statistics['total_genre_thriller'], color: '', hoverColor: ''},\r\n        {label: 'Vampire', stat: statistics['total_genre_vampire'], color: '', hoverColor: ''},\r\n        {label: 'Yaoi', stat: statistics['total_genre_yaoi'], color: '', hoverColor: ''},\r\n        {label: 'Yuri', stat: statistics['total_genre_yuri'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '#',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataYears(statistics) {\r\n\r\n    let parsed_data;\r\n    let parsed_data_keys;\r\n    let data = [];\r\n    try {\r\n        parsed_data = JSON.parse(statistics['total_anime_per_year']);\r\n        parsed_data_keys = Object.keys(parsed_data);\r\n        for (let x = 0; x < parsed_data_keys.length; x++) {\r\n            let element = {label: parsed_data_keys[x], stat: parsed_data[parsed_data_keys[x]]};\r\n            data.push(element)\r\n        }\r\n    } catch (e) {\r\n    }\r\n\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '#',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {Bar, Doughnut} from 'react-chartjs-2';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport {getAnimeDataWithStatistics} from '../../../actions/anime'\r\nimport {\r\n    getDataGenres,\r\n    getDataQualities,\r\n    getDataRated,\r\n    getDataSources,\r\n    getDataStatuses,\r\n    getDataTypes,\r\n    getDataYears\r\n} from \"./statistics\";\r\nimport {AnimeDataStatistics, UserList} from \"../../../models\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport CountUp from \"react-countup\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nclass AnimeStatistics extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeDataWithStatistics();\r\n    }\r\n\r\n    render() {\r\n        let data_types = getDataTypes(this.props.anime_data_statistics);\r\n        let data_sources = getDataSources(this.props.anime_data_statistics)[0];\r\n        let data_sources_options = getDataSources(this.props.anime_data_statistics)[1];\r\n        let data_statuses = getDataStatuses(this.props.anime_data_statistics);\r\n        let data_rated = getDataRated(this.props.anime_data_statistics);\r\n        let data_genres = getDataGenres(this.props.anime_data_statistics);\r\n        let data_qualities = getDataQualities(this.props.anime_data_statistics);\r\n        let data_years = getDataYears(this.props.anime_data_statistics);\r\n\r\n        return (\r\n            <Grid container id=\"Anime-Statistics\">\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <h3>ANIME STATISTICS</h3>\r\n                </Grid>\r\n                <Grid item xl={2}/>\r\n                <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total anime:</td>\r\n                            <td><p>{this.props.anime_data_statistics[AnimeDataStatistics.total_anime]} (\r\n                                {this.props.anime_data_statistics[AnimeDataStatistics.total_anime] +\r\n                                this.props.anime_data_statistics[AnimeDataStatistics.total_anime_pending_mal] +\r\n                                this.props.anime_data_statistics[AnimeDataStatistics.total_anime_deleted_mal]}\r\n                                )</p></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Pending by MAL:</td>\r\n                            <td>\r\n                                <p className=\"color-warning\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_pending_mal]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Deleted by MAL:</td>\r\n                            <td>\r\n                                <p className=\"color-danger\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_deleted_mal]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Mean Score:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.mean_score] ?\r\n                                        this.props.anime_data_statistics[AnimeDataStatistics.mean_score].toFixed(2) : null}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total episodes:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_episodes]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total duration:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_minutes]}min (\r\n                                    {(this.props.anime_data_statistics[AnimeDataStatistics.total_minutes] / 1440)\r\n                                        .toFixed(2)} days)\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Downloaded:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_downloaded]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Downloading:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_downloading]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Total size:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {(this.props.anime_data_statistics[AnimeDataStatistics.total_downloaded_size] / 1024)\r\n                                        .toFixed(1)}TB\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Type</h5>\r\n                        <Doughnut height={100} width={100} data={data_types}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Rated</h5>\r\n                        <Doughnut height={100} width={100} data={data_rated}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Quality</h5>\r\n                        <Doughnut height={100} width={100} data={data_qualities}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Status</h5>\r\n                        <Doughnut height={100} width={100} data={data_statuses}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Sources</h5>\r\n                        <Bar\r\n                            data={data_sources}\r\n                            width={100}\r\n                            height={50}\r\n                            options={data_sources_options}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Genres</h5>\r\n                        <Bar\r\n                            data={data_genres}\r\n                            width={100}\r\n                            height={50}\r\n                            options={{\r\n                                maintainAspectRatio: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Anime per Year</h5>\r\n                        <Bar\r\n                            data={data_years}\r\n                            width={100}\r\n                            height={50}\r\n                            options={{\r\n                                maintainAspectRatio: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data_statistics: state.anime.anime_data_statistics,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeDataWithStatistics})(AnimeStatistics)","import React from 'react';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\r\n\r\n\r\nexport function CopyTextToClipboard(props) {\r\n    const {text} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleTooltipClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleTooltipOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"copy-to-clipboard-text\">\r\n            <ClickAwayListener onClickAway={handleTooltipClose}>\r\n                <Tooltip\r\n                    PopperProps={{disablePortal: true,}}\r\n                    onClose={handleTooltipClose}\r\n                    open={open}\r\n                    disableFocusListener\r\n                    disableHoverListener\r\n                    disableTouchListener\r\n                    title=\"Copied!\"\r\n                >\r\n                    <CopyToClipboard text={text}>\r\n                        <span onClick={handleTooltipOpen}>{text}</span>\r\n                    </CopyToClipboard>\r\n                </Tooltip>\r\n            </ClickAwayListener>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../layout/sounds\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DisplayTabs(props) {\r\n    const {tabs} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    {tabs.map((tab, x) => (\r\n                        <Tab disabled={tab.disabled} label={tab.label} {...a11yProps(x)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    ))}\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                {tabs.map((tab, x) => (\r\n                    <TabPanel value={value} index={x} dir={theme.direction} className=\"box-light\">\r\n                        {tab.tab}\r\n                    </TabPanel>\r\n                ))}\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {addAnimeEntry, deleteAnimeEntry, updateAnimeEntry} from \"../../../../actions/users\";\r\nimport {getUserAnimeEntryFormInitialValues, UserAnimeEntryForm} from \"./forms\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\nimport '../../../../assets/css/forms.css';\r\n\r\n\r\nclass AnimeEntryModalForm extends Component {\r\n    static propTypes = {\r\n        /** Classnames for the open dialog btn */\r\n        classNames: PropTypes.object,\r\n        /** Title of the Anime */\r\n        title: PropTypes.string,\r\n        /** ID of the Anime */\r\n        id: PropTypes.number.isRequired,\r\n        /** User entry of the anime */\r\n        user_anime_entry: PropTypes.object,\r\n        /** If the entry is being edited */\r\n        edit: PropTypes.bool,\r\n        /** User list info for filtering on update entry\r\n         * {user_list_pk: list_pk, user_list_filter: selected_filter} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let edit = true;\r\n        if (this.props.edit === undefined) {\r\n            if (isEmpty(this.props.user_anime_entry))\r\n                edit = false;\r\n        } else edit = this.props.edit;\r\n\r\n        const initial_values = getUserAnimeEntryFormInitialValues(this.props.id, this.props.user_anime_entry, edit);\r\n\r\n        return <div id=\"User-Title-Entry\">\r\n            <CyberButton classNames={this.props.classNames} variant=\"outlined\" color=\"primary\"\r\n                         onClick={this.handleClickOpen}>\r\n                <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n            </CyberButton>\r\n            <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                    className=\"user-title-entry-dialog\">\r\n                {edit ? <DialogTitle id=\"form-dialog-title\">Edit {this.props.title}</DialogTitle>\r\n                    : <DialogTitle id=\"form-dialog-title\">Add {this.props.title}</DialogTitle>}\r\n                <DialogContent>\r\n                    <UserAnimeEntryForm initial_values={initial_values} edit={edit} id={this.props.id}\r\n                                        list={this.props.list} handleClose={this.handleClose}/>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateAnimeEntry, addAnimeEntry, deleteAnimeEntry})(AnimeEntryModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {faEdit, faMinusSquare, faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons/faPlay\";\r\n\r\nimport {ANIME_TAB_NAME, CYBER_GENESIS_TAB_NAME, CYBER_GENESIS_URL} from \"../../globals\";\r\nimport {NOT_FOUND} from \"../../urls\";\r\nimport {Anime, AnimeOnServer, CDNCoverImages, CoverImages, User, UserAnimeEntry} from \"../../models\";\r\nimport {playClickSound, playHoverSound} from \"../layout/sounds\";\r\nimport {formatContentDateByKnown, getTitleCoverImage, isEmpty} from \"../functions\";\r\nimport {getAnime} from '../../actions/anime'\r\nimport {CopyTextToClipboard} from \"./snippets\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {DisplayTabs} from \"./TabsRoot\";\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {PreLoadImage} from \"../layout/common/common\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport {\r\n    AdminModalForms,\r\n    formatTitle,\r\n    getTitle,\r\n    getUserModalForms,\r\n    getUserTitleStatus,\r\n    getUserTitleStatusSummary, UserModalForms\r\n} from \"./functions\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/display.css'\r\nimport {faDownload, faPlus, faPlusSquare, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\nimport AnimeEntryModalForm from \"../user/forms/anime/AnimeEntryModalForm\";\r\nimport {getUserAnimeEntry} from \"../../actions/users\";\r\n\r\n\r\nexport const NONE = <span className=\"color-gray\">---</span>;\r\n\r\n\r\nclass Display extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** ID of the title */\r\n        param_id: PropTypes.number.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        title_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        title_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        title: PropTypes.object.isRequired,\r\n        /** Redux prop of user_title_status */\r\n        user_title_status: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        getTitle(this.props.branch, this.props.param_id);\r\n        if (this.props.user_authenticated)\r\n            getUserTitleStatus(this.props.branch, this.props.param_id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.user_authenticated !== this.props.user_authenticated)\r\n            getUserTitleStatus(this.props.branch, this.props.param_id);\r\n        if (prevProps.param_id !== this.props.param_id) {\r\n            window.scrollTo(0, 0);\r\n            getTitle(this.props.branch, this.props.param_id);\r\n            getUserTitleStatus(this.props.branch, this.props.param_id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const superuser = this.props.user && this.props.user[User.is_superuser];\r\n        const display_title = this.props.title_loaded ?\r\n            formatTitle(this.props.branch, this.props.title, superuser) : formatTitle();\r\n        const img_url = getTitleCoverImage(display_title.cdn_cover_images, display_title.cover_images);\r\n        const tabs_margin = !!(display_title.primary_set || display_title.primary_set_wide ||\r\n            display_title.secondary_set);\r\n        document.title = display_title.title ? display_title.title : CYBER_GENESIS_TAB_NAME;\r\n\r\n        if (this.props.status && this.props.status === 404)\r\n            return <Redirect to={NOT_FOUND}/>;\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Display\">\r\n                    {this.props.title_loaded ? <Grid container style={{marginBottom: 100}}>\r\n                        <Grid item xs={12} className=\"title-container\">\r\n                            <h1><CopyTextToClipboard text={display_title.title}/></h1>\r\n                            {superuser ? <AdminModalForms\r\n                                id={this.props.param_id}\r\n                                branch={this.props.branch}\r\n                                title={this.props.title}/> : null}\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <div className=\"details-container\">\r\n                                <div className=\"img-container\">\r\n                                    <PreLoadImage src={img_url} alt={`${this.props.branch} cover image`}/>\r\n                                </div>\r\n                                {this.props.user_authenticated ? <div className=\"user-buttons-container\">\r\n                                    <UserModalForms branch={this.props.branch} id={this.props.param_id} title={display_title.title} entry={this.props.user_title_status}/>\r\n                                    </div> : null}\r\n                                <div className=\"info-container box-light\">\r\n                                    <h2>Alternative Titles</h2>\r\n                                    <table>\r\n                                        <tbody>\r\n                                        {display_title.title_1 ? <tr>\r\n                                            <td>{display_title.title_1.label}</td>\r\n                                            <td>{display_title.title_1.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_1.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        {display_title.title_2 ? <tr>\r\n                                            <td>{display_title.title_2.label}</td>\r\n                                            <td>{display_title.title_2.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_2.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        {display_title.title_3 ? <tr>\r\n                                            <td>{display_title.title_3.label}</td>\r\n                                            <td>{display_title.title_3.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_3.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        </tbody>\r\n                                    </table>\r\n                                    <h2>Information</h2>\r\n                                    <h4>{this.props.branch} Information</h4>\r\n                                    {display_title.info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                    <h4>Database Information</h4>\r\n                                    {display_title.db_info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.db_info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                    <h4>Users Information</h4>\r\n                                    {display_title.users_info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.users_info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={9} className=\"main-container\">\r\n                            {this.props.user_authenticated && !isEmpty(this.props.user_title_status) ?\r\n                                getUserTitleStatusSummary(this.props.branch, this.props.user_title_status) : null}\r\n                            {display_title.primary_set ? <Grid container className=\"summery-container box-light\">\r\n                                {display_title.primary_set.map(item => (\r\n                                    <Grid item xs={2}>\r\n                                        <p>{item.label}</p>\r\n                                        <p>{item.info ? item.info : NONE}</p>\r\n                                    </Grid>\r\n                                ))}\r\n                                {display_title.primary_set_wide ? display_title.primary_set_wide.map(item => (\r\n                                    <Grid item xs={12} className=\"genres-container\">\r\n                                        <p>{item.label}</p>\r\n                                        <p>{item.info ? item.info : NONE}</p>\r\n                                    </Grid>\r\n                                )) : null}\r\n                            </Grid> : null}\r\n                            {display_title.secondary_set ?\r\n                                <Grid container className=\"summery-container box-light color-secondary\">\r\n                                    {display_title.secondary_set.map(item => (\r\n                                        <Grid item xs={Math.floor(12 / display_title.secondary_set.length)}>\r\n                                            <p>{item.label}</p>\r\n                                            <p>{item.info ? item.info : NONE}</p>\r\n                                        </Grid>\r\n                                    ))}\r\n                                </Grid> : null}\r\n\r\n                            {display_title.tabs ? <Grid container className=\"tabs-container\"\r\n                                                        style={{marginTop: tabs_margin ? 15 : 0}}>\r\n                                <DisplayTabs tabs={display_title.tabs}/>\r\n                            </Grid> : null}\r\n                        </Grid>\r\n                    </Grid> : this.props.title_loading ?\r\n                        <Loading text={`${this.props.branch} Loading`} offset={100}/> : null}\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    status: state.errors.status,\r\n    user_authenticated: state.auth.user_authenticated,\r\n\r\n    /**\r\n     * @user: state.auth.user is here for checking if the logged in user is admin and to update the component\r\n     * when adding/removing title from favorites etc.\r\n     * @torrent_progress: is here for re-rendering the component on change\r\n     */\r\n    user: state.auth.user,\r\n    // torrent_progress: state.requiem.torrent_progress\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnime})(Display)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\n\r\nexport function getSynopsys(synopsys) {\r\n    if (!synopsys || synopsys.indexOf('No synopsis information has been added to this title') >= 0)\r\n        return null;\r\n    return synopsys\r\n}\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const synopsys = getSynopsys(this.props.anime[Anime.synopsis]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsis</h2>\r\n                    <p>{synopsys ? synopsys : NONE}</p>\r\n                    {this.props.anime[Anime.background] ?\r\n                        <>\r\n                            <h2>Background</h2>\r\n                            <p>{this.props.anime[Anime.background]}</p>\r\n                        </> : null}\r\n                    {this.props.anime[Anime.opening_theme] || this.props.anime[Anime.ending_theme] ? <>\r\n                        <h2>OST</h2>\r\n                        <p><span>Openings:</span> {this.props.anime[Anime.opening_theme] ?\r\n                            this.props.anime[Anime.opening_theme] : NONE}</p>\r\n                        <p><span>Endings:</span> {this.props.anime[Anime.ending_theme] ?\r\n                            this.props.anime[Anime.ending_theme] : NONE}</p>\r\n                    </> : null}\r\n\r\n                    <h2>Main Characters</h2>\r\n                </div>\r\n\r\n                {this.props.anime[Anime.main_characters].length > 0 ?\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.anime[Anime.main_characters].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList> : <p className=\"none-characters\">{NONE}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Manga} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {getSynopsys} from \"../../../anime/display/tabs/GeneralTab\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const synopsys = getSynopsys(this.props.manga[Manga.synopsis]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsis</h2>\r\n                    <p>{synopsys ? synopsys : NONE}</p>\r\n                    {this.props.manga[Manga.background] ?\r\n                        <>\r\n                            <h2>Background</h2>\r\n                            <p>{this.props.manga[Manga.background]}</p>\r\n                        </> : null}\r\n\r\n                    <h2>Main Characters</h2>\r\n                </div>\r\n\r\n                {this.props.manga[Manga.main_characters].length > 0 ?\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.manga[Manga.main_characters].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList> : <p className=\"none-characters\">{NONE}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport {faExpandArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {Character} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nfunction DisplayVoiceActors(props) {\r\n    const {voice_actors} = props;\r\n    const formatted = voice_actors.split('window._taboola')[0];\r\n    const [expand, setExpand] = useState(false);\r\n    return <>\r\n        <h2>Voice Actors{' '}\r\n            <CyberButton component=\"span\" onClick={() => {setExpand(!expand)}}>\r\n                <FontAwesomeIcon icon={faExpandArrowsAlt}/>\r\n            </CyberButton>\r\n        </h2>\r\n        {expand ? <pre>{formatted}</pre> : <p>{formatted}</p>}\r\n    </>\r\n}\r\n\r\n\r\nfunction getDescription(description) {\r\n    if (!description || description.indexOf('No biography written') >= 0)\r\n        return null;\r\n    return description\r\n}\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const description = getDescription(this.props.character[Character.description]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Description</h2>\r\n                    <p>{description ? description : NONE}</p>\r\n\r\n                    {this.props.character[Character.voice_actors] ?\r\n                        <DisplayVoiceActors voice_actors={this.props.character[Character.voice_actors]}/> : null}\r\n\r\n                    {this.props.character[Character.anime_roles] &&\r\n                    this.props.character[Character.anime_roles].length > 0 ? <h2>Animeography</h2> : null}\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.character[Character.anime_roles].map((anime, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_ANIME} title={anime}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n                <div className=\"general-description\">\r\n                    {this.props.character[Character.manga_roles] &&\r\n                    this.props.character[Character.manga_roles].length > 0 ? <h2>Mangaography</h2> : null}\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.character[Character.manga_roles].map((manga, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_MANGA} title={manga}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    character: state.characters.character,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport reactPreset from \"@bbob/preset-react\";\r\nimport BBCode from \"@bbob/react/lib/Component\";\r\n\r\nimport {Person} from \"../../../../models\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\nimport '../../../../assets/css/people.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>More Info</h2>\r\n                    {this.props.person[Person.more_info] ? <BBCode plugins={[reactPreset()]}>\r\n                        {this.props.person[Person.more_info]}\r\n                    </BBCode> : NONE}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ImageGallery from 'react-image-gallery';\r\n\r\nimport {CYBER_GENESIS_URL} from \"../../../../globals\";\r\nimport {CoverImages, Eroge} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport '../../../../../node_modules/react-image-gallery/styles/css/image-gallery.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        let images = [];\r\n        if (this.props.eroge[Eroge.eroge_screenshots])\r\n            for (let i = 0; i < this.props.eroge[Eroge.eroge_screenshots].length; i++)\r\n                images.push({\r\n                    original: `${CYBER_GENESIS_URL}${this.props.eroge[Eroge.eroge_screenshots][i][CoverImages.image]}`,\r\n                    thumbnail: `${CYBER_GENESIS_URL}${this.props.eroge[Eroge.eroge_screenshots][i][CoverImages.image]}`\r\n                });\r\n\r\n        return (\r\n            <div className=\"general-tab\">\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsys</h2>\r\n                    <p>{this.props.eroge[Eroge.description]}</p>\r\n\r\n                    <h2>Screenshots</h2>\r\n                    <Grid container>\r\n                        <Grid item xs={2}/>\r\n                        <Grid item xs={8} className=\"image-gallery\">\r\n                            <ImageGallery items={images}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge: state.eroge.eroge,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult} from \"../../../../models\";\r\nimport {getAllCharactersForAnime} from \"../../../../actions/anime\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass CharactersTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.anime[Anime.all_characters] || this.props.all_characters[ApiResult.previous])\r\n            this.props.getAllCharactersForAnime(this.props.anime[Anime.id])\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.all_characters[ApiResult.count] / 50)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAllCharactersForAnime(this.props.anime[Anime.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"characters-tab\">\r\n                {this.props.all_characters ? <>\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.all_characters[ApiResult.results].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    all_characters: state.anime.anime[Anime.all_characters],\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllCharactersForAnime})(CharactersTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Manga} from \"../../../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {getAllCharactersForManga} from \"../../../../actions/manga\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass CharactersTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.manga[Manga.all_characters] || this.props.all_characters[ApiResult.previous])\r\n            this.props.getAllCharactersForManga(this.props.manga[Manga.id])\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.all_characters[ApiResult.count] / 50)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAllCharactersForManga(this.props.manga[Manga.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"characters-tab\">\r\n                {this.props.all_characters ? <>\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.all_characters[ApiResult.results].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    all_characters: state.manga.manga[Manga.all_characters],\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllCharactersForManga})(CharactersTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {Anime, Manga, VALID_MANGA_RELATION_NAMES, VALID_MANGA_RELATIONS} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getRelationsForManga} from \"../../../../actions/manga\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass RelationsTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.manga_relations))\r\n            this.props.getRelationsForManga(this.props.manga[Manga.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"relations-tab\">\r\n                {!isEmpty(this.props.manga_relations) ? <>\r\n                    {this.props.manga_relations['manga_relation_adaptation'].length > 0 ?\r\n                        <div>\r\n                            <h2 className=\"relation-name\">Adaptation</h2>\r\n                            <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                {this.props.manga_relations['manga_relation_adaptation'].map((anime, x) => (\r\n                                    <Grow key={x} in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1}>\r\n                                            <TitleCard\r\n                                                branch={BRANCH_ANIME}\r\n                                                title={anime}\r\n                                                user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                    this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                            />\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                ))}\r\n                            </GridList>\r\n                        </div> : null}\r\n\r\n                    {VALID_MANGA_RELATIONS.map((relation_name, i) => (\r\n                        relation_name !== 'manga_relation_adaptation' ?\r\n                            <div key={i}>\r\n                                {this.props.manga_relations[relation_name].length > 0 ?\r\n                                    <h2 className=\"relation-name\">{VALID_MANGA_RELATION_NAMES[relation_name]}</h2> : null}\r\n\r\n                                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                    {this.props.manga_relations[relation_name].map((manga, y) => (\r\n                                        <Grow key={y} in {...({timeout: 200 + (y * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={BRANCH_MANGA}\r\n                                                    title={manga}\r\n                                                    user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                                            this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                            </div> : null))}\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    manga_relations: state.manga.manga[Manga.manga_relations],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRelationsForManga})(RelationsTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Field, Form, Formik} from 'formik';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport {downloadTorrent, getStorageInfo} from \"../../../actions/requiem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Anime, AnimeFranchise} from \"../../../models\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {faCheck, faPlus, faPlusCircle, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\nimport '../../../assets/css/requiem.css'\r\nimport {getAnimeFranchise} from \"../../../actions/anime\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\n\r\nclass DownloadTorrentForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleAddIdToExtraIds = this.handleAddIdToExtraIds.bind(this);\r\n        this.clearExtraIds = this.clearExtraIds.bind(this);\r\n        this.toggleAddExtra = this.toggleAddExtra.bind(this);\r\n        this.state = {\r\n            extra: false,\r\n            extra_ids: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getStorageInfo();\r\n        if (isEmpty(this.props.anime_franchise))\r\n            this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    toggleAddExtra() {\r\n        playClickSound();\r\n        this.setState({extra: !this.state.extra, extra_ids: []})\r\n    }\r\n\r\n    clearExtraIds() {\r\n        playClickSound();\r\n        this.setState({extra_ids: []})\r\n    }\r\n\r\n    handleAddIdToExtraIds(id) {\r\n        let extra_ids = this.state.extra_ids;\r\n        const index = extra_ids.indexOf(id);\r\n\r\n        if (index > -1) extra_ids.splice(index, 1);\r\n        else extra_ids.push(id);\r\n\r\n        this.setState({extra_ids: extra_ids});\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            disk: 'disk',\r\n            files: 'files',\r\n            extract_subs: 'extract_subs',\r\n            magnet: 'magnet',\r\n            extra_ids: 'extra_ids',\r\n            additional_info: 'additional_info',\r\n        };\r\n\r\n        let initial_values = {\r\n            anime: this.props.anime[Anime.id],\r\n            disk: 'L',\r\n            files: '',\r\n            extract_subs: false,\r\n            magnet: '',\r\n            extra_ids: '',\r\n            additional_info: '',\r\n        };\r\n\r\n        return (\r\n            <div id=\"Download-Anime-Torrent-Form\" className=\"modal-container modal-container-requiem\">\r\n                <Formik\r\n                    initialValues={initial_values}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        values.extra_ids = this.state.extra_ids.join(', ');\r\n                        console.log(values);\r\n                        this.props.downloadTorrent(this.props.anime[Anime.id], values);\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({\r\n                          isSubmitting, values, handleChange,\r\n                          handleBlur, setValues, setFieldValue\r\n                      }) => (\r\n                        <Form className=\"content-container\">\r\n                            {/*<Grid container>*/}\r\n                            {/*    {storage.map((disk, i) => (*/}\r\n                            {/*        <Grid item xs={12} md={4}>*/}\r\n                            {/*            <StorageDiskInfo key={i} disk={disk}/>*/}\r\n                            {/*        </Grid>*/}\r\n                            {/*    ))}*/}\r\n                            {/*</Grid>*/}\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={4}>\r\n                                    <InputLabel id=\"disk\">Disk</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"disk\"\r\n                                        className=\"form-control\"\r\n                                        color=\"secondary\"\r\n                                        value={values[field_names.disk]}\r\n                                        name={field_names.disk}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    >\r\n                                        <MenuItem value=\"F\">F</MenuItem>\r\n                                        <MenuItem value=\"G\">G</MenuItem>\r\n                                        <MenuItem value=\"H\">H</MenuItem>\r\n                                        <MenuItem value=\"I\">I</MenuItem>\r\n                                        <MenuItem value=\"J\">J</MenuItem>\r\n                                        <MenuItem value=\"K\">K</MenuItem>\r\n                                        <MenuItem value=\"L\">L</MenuItem>\r\n                                        <MenuItem value=\"M\">M</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={8} className=\"extract-subs-container\">\r\n                                    <label>Extract Subs</label>\r\n                                    <Checkbox\r\n                                        value={values[field_names.extract_subs]}\r\n                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        name={field_names.extract_subs}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Magnet\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.magnet}\r\n                                        value={values[field_names.magnet]}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group torrent-form-group\">\r\n                                <Grid item xs={2} className=\"torrent-label-container\">\r\n                                    <label>Torrent</label>\r\n                                </Grid>\r\n                                <Grid item xs={9}>\r\n                                    <Dropzone onDrop={acceptedFiles => setFieldValue(field_names.files, acceptedFiles)}>\r\n                                        {({getRootProps, getInputProps, isDragActive}) => (\r\n                                            <section className={isDragActive ? 'dropzone dropzone-active' : 'dropzone'}>\r\n                                                <div className=\"\" {...getRootProps()}>\r\n                                                    <input {...getInputProps()} />\r\n                                                    {isDragActive ?\r\n                                                        <p className=\"hovered\">\r\n                                                            Drop the torrent here ...</p> :\r\n                                                        <p>\r\n                                                            Drag and drop the torrent files here, or click to select\r\n                                                            from explorer</p>\r\n                                                    }\r\n                                                </div>\r\n                                            </section>\r\n                                        )}\r\n                                    </Dropzone>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    {values[field_names.files] ? values[field_names.files].map((file, x) => (\r\n                                        <p key={x} className=\"text-center color-magenta\">> {file['name']}</p>\r\n                                    )) : null}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={1} className=\"extra-buttons-containers\">\r\n                                    <span id=\"extra-btn\" className={this.state.extra ? 'selected' : ''}\r\n                                          onClick={this.toggleAddExtra} onMouseEnter={playHoverSound}>\r\n                                        <FontAwesomeIcon icon={this.state.extra ? faCheck : faPlus}/>\r\n                                    </span>\r\n                                </Grid>\r\n                                <Grid item xs={10}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Extras\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.extra_ids}\r\n                                        value={this.state.extra_ids.join(', ')}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                                <Grid item xs={1} className=\"extra-buttons-containers\">\r\n                                    <span id=\"trash-btn\" onClick={this.clearExtraIds} onMouseEnter={playHoverSound}>\r\n                                        <FontAwesomeIcon icon={faTrash}/>\r\n                                    </span>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                {this.state.extra ? <Grid item xs={12}>\r\n                                    {!this.props.anime_franchise_loading ?\r\n                                        <GridList cellHeight={200} cols={4}>\r\n                                            {this.props.anime_franchise[AnimeFranchise.anime_franchise].map((anime, x) => (\r\n                                                !anime[Anime.anime_on_server] && anime[Anime.id] !== this.props.anime[Anime.id] ?\r\n                                                    <GridListTile\r\n                                                        cols={1}\r\n                                                        className={this.state.extra_ids.indexOf(anime[Anime.id]) >= 0 ?\r\n                                                            'add-franchises-container added-franchise' :\r\n                                                            'add-franchises-container'}\r\n                                                    >\r\n                                                        <span className=\"add-to-extra-ids-btn\" title={anime[Anime.id]}\r\n                                                              onClick={() => {\r\n                                                                  playClickSound();\r\n                                                                  this.handleAddIdToExtraIds(anime[Anime.id])\r\n                                                              }}><FontAwesomeIcon icon={faPlusCircle}/></span>\r\n                                                            <TitleCard\r\n                                                                branch={BRANCH_ANIME}\r\n                                                                title={anime}\r\n                                                                mini={true}/>\r\n                                                    </GridListTile> : null))}\r\n                                        </GridList>\r\n                                        : <Loading text={'Franchise loading'}/>}\r\n                                </Grid> : null}\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Additional Info\"\r\n                                        color=\"secondary\"\r\n                                        multiline\r\n                                        value={values[field_names.additional_info]}\r\n                                        name={field_names.additional_info}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <div className=\"submit-container\">\r\n                                <CyberButton variant=\"outlined\" type=\"submit\" onClick={this.props.handleClose}\r\n                                             disabled={isSubmitting}>\r\n                                    Submit\r\n                                </CyberButton>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    storage: state.requiem.storage,\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {downloadTorrent, getStorageInfo, getAnimeFranchise})(DownloadTorrentForm)\r\n","import React, {Component, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faDownload, faEdit, faExpandArrowsAlt, faPlus, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport DownloadTorrentForm from \"./DownloadTorrentForm\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {Anime, AnimeOnServer, UserAnimeEntry} from \"../../../models\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {LANGUAGES} from \"../../../globals\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {addAnimeToServer, updateAnimeToServer} from \"../../../actions/requiem\";\r\nimport {getAnimeOnServerInfo} from \"../../../actions/anime\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\n\r\nclass AnimeOnServerForm extends Component {\r\n    static propTypes = {\r\n        /** AnimeOnServer id */\r\n        id: PropTypes.number.isRequired,\r\n        /** Function to set the dialog status */\r\n        setOpen: PropTypes.func.isRequired,\r\n        /** Which dispatch function to call after successful update of the AnimeOnServer */\r\n        alternative_callback: PropTypes.string,\r\n        /** Should the form be for editing or adding, editing will try to fetch the server info for the ID sent */\r\n        edit: PropTypes.bool,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.toggleExpandLanguages = this.toggleExpandLanguages.bind(this);\r\n        this.state = {\r\n            open: false,\r\n            expand_languages: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeOnServerInfo(this.props.id)\r\n    }\r\n\r\n    toggleExpandLanguages() {\r\n        this.setState({expand_languages: !this.state.expand_languages})\r\n    }\r\n\r\n    render() {\r\n        if (this.props.edit && this.props.anime_on_server_loading)\r\n            return <div className=\"loading-container\"><CircularProgress color=\"secondary\"/></div>\r\n\r\n        const edit = !isEmpty(this.props.anime_on_server)\r\n        const languages = this.state.expand_languages ? LANGUAGES : [LANGUAGES[0], LANGUAGES[1]];\r\n        const field_names = {\r\n            anime: 'anime',\r\n            location: 'location',\r\n            size_on_HDD_GB: 'size_on_HDD_GB',\r\n            additional_info: 'additional_info',\r\n            audio_channel: 'audio_channel',\r\n            video_quality: 'video_quality',\r\n            incomplete: 'incomplete',\r\n            incomplete_progress: 'incomplete_progress',\r\n        };\r\n        let initial_values = {\r\n            anime: this.props.id,\r\n            location: '',\r\n            size_on_HDD_GB: 0.00,\r\n            additional_info: '',\r\n            audio_channel: '2.0',\r\n            video_quality: '1080p',\r\n            incomplete: false,\r\n            incomplete_progress: 0,\r\n        };\r\n        LANGUAGES.forEach((language) => {\r\n            const lang = language.toLowerCase();\r\n            initial_values[lang + '_dub'] = false;\r\n            initial_values[lang + '_sub'] = false;\r\n        });\r\n        if (edit) {\r\n            initial_values = {\r\n                anime: this.props.id,\r\n                location: this.props.anime_on_server[AnimeOnServer.location],\r\n                size_on_HDD_GB: this.props.anime_on_server[AnimeOnServer.size_on_HDD_GB],\r\n                additional_info: this.props.anime_on_server[AnimeOnServer.additional_info],\r\n                audio_channel: this.props.anime_on_server[AnimeOnServer.audio_channel],\r\n                video_quality: this.props.anime_on_server[AnimeOnServer.video_quality],\r\n                incomplete: this.props.anime_on_server[AnimeOnServer.incomplete],\r\n                incomplete_progress: this.props.anime_on_server[AnimeOnServer.incomplete_progress],\r\n            };\r\n            LANGUAGES.forEach((language) => {\r\n                const lang = language.toLowerCase();\r\n                initial_values[lang + '_dub'] = this.props.anime_on_server[`${lang}_dub`];\r\n                initial_values[lang + '_sub'] = this.props.anime_on_server[`${lang}_sub`];\r\n            });\r\n        }\r\n\r\n        return <>\r\n            <DialogTitle id=\"form-dialog-title\">{edit ? 'Edit' : 'Add'} anime to server</DialogTitle>\r\n            <DialogContent>\r\n                <Formik\r\n                    initialValues={initial_values}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        if (edit)\r\n                            this.props.updateAnimeToServer(values, this.props.alternative_callback);\r\n                        else\r\n                            this.props.addAnimeToServer(values, this.props.alternative_callback);\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({\r\n                          isSubmitting, values, handleChange,\r\n                          handleBlur\r\n                      }) => (\r\n                        <Form id=\"Edit-Anime-On-Server-Form\">\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Location\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.location}\r\n                                        value={values[field_names.location]}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={2}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Size\"\r\n                                        color=\"secondary\"\r\n                                        type=\"number\"\r\n                                        name={field_names.size_on_HDD_GB}\r\n                                        value={values[field_names.size_on_HDD_GB]}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                                <Grid item xs={5}>\r\n                                    <InputLabel id=\"video-quality\" className=\"input-label\">Video\r\n                                        Quality</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"video-quality\"\r\n                                        className=\"form-control\"\r\n                                        color=\"secondary\"\r\n                                        value={values[field_names.video_quality]}\r\n                                        name={field_names.video_quality}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    >\r\n                                        <MenuItem value=\"2160p\">2160p</MenuItem>\r\n                                        <MenuItem value=\"1080p\">1080p</MenuItem>\r\n                                        <MenuItem value=\"720p\">720p</MenuItem>\r\n                                        <MenuItem value=\"580p\">580p</MenuItem>\r\n                                        <MenuItem value=\"480p\">480p</MenuItem>\r\n                                        <MenuItem value=\"360p\">360p</MenuItem>\r\n                                        <MenuItem value=\"240p\">240p</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={5}>\r\n                                    <InputLabel id=\"audio-quality\" className=\"input-label\">Audio\r\n                                        Channel</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"audio-quality\"\r\n                                        className=\"form-control\"\r\n                                        color=\"secondary\"\r\n                                        value={values[field_names.audio_channel]}\r\n                                        name={field_names.audio_channel}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    >\r\n                                        <MenuItem value=\"2.0\">2.0</MenuItem>\r\n                                        <MenuItem value=\"5.1\">5.1</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={6}>\r\n                                    <label>Incomplete</label>\r\n                                    <Checkbox\r\n                                        value={values[field_names.incomplete]}\r\n                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        name={field_names.incomplete}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Incomplete Progress\"\r\n                                        color=\"secondary\"\r\n                                        type=\"number\"\r\n                                        disabled={!values[field_names.incomplete]}\r\n                                        name={field_names.incomplete_progress}\r\n                                        value={values[field_names.incomplete_progress]}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <label>Dubs</label>\r\n                                    <CyberButton classNames=\"expand-btn\" onClick={this.toggleExpandLanguages}>\r\n                                        <FontAwesomeIcon icon={faExpandArrowsAlt}/>\r\n                                    </CyberButton>\r\n                                </Grid>\r\n                                {languages.map((language, x) => (\r\n                                    <Grid item xs={3}>\r\n                                        <div className=\"language-box\" key={x}>\r\n                                            <Checkbox\r\n                                                value={values[language.toLowerCase() + '_dub']}\r\n                                                checked={values[language.toLowerCase() + '_dub']}\r\n                                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                name={language.toLowerCase() + '_dub'}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            />\r\n                                            <label>{language}</label>\r\n                                        </div>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <label>Subs</label>\r\n                                </Grid>\r\n                                {languages.map((language, x) => (\r\n                                    <Grid item xs={3}>\r\n                                        <div className=\"language-box\" key={x}>\r\n                                            <Checkbox\r\n                                                value={values[language.toLowerCase() + '_sub']}\r\n                                                checked={values[language.toLowerCase() + '_sub']}\r\n                                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                name={language.toLowerCase() + '_sub'}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            />\r\n                                            <label>{language}</label>\r\n                                        </div>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Additional Info\"\r\n                                        color=\"secondary\"\r\n                                        variant=\"outlined\"\r\n                                        type=\"text\"\r\n                                        name={field_names.additional_info}\r\n                                        value={values[field_names.additional_info]}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                        multiline={true}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\"\r\n                                                 onClick={() => this.props.setOpen(false)} disabled={isSubmitting}>\r\n                                        <FontAwesomeIcon icon={faCheck}/>\r\n                                    </CyberButton>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </DialogContent>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_on_server: state.anime.anime_on_server,\r\n    anime_on_server_loading: state.anime.anime_on_server_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getAnimeOnServerInfo,\r\n    addAnimeToServer,\r\n    updateAnimeToServer\r\n})(AnimeOnServerForm)\r\n","import React, {useState} from 'react'\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {faCheck, faEdit, faPlus, faTrash, faUserEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Dialog} from \"@material-ui/core\";\r\nimport AnimeOnServerForm from \"./EditAnimeOnServerModalForm\";\r\nimport {approveAnimeOnServer, deleteAnimeServerInfoAndTorrents, openAnimeFolder} from \"../../../actions/requiem\";\r\nimport store from \"../../../store\";\r\nimport {faFolder} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {ADMIN_EDIT_ANIME_ON_SERVER} from \"../../../urls\";\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.id - ID of the anime itself\r\n * @param {String} props.classNames - ID of the anime itself\r\n * @param {String} props.alternative_callback - Which dispatch function to call after successful update of the AnimeOnServer\r\n * @param {Boolean} props.edit - Should the form be for editing or adding, editing will try to fetch the server\r\n *                               info for the ID sent\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeOnServerModalForm(props) {\r\n    const [open, setOpen] = useState(false)\r\n\r\n    return <div id=\"Edit-Anime-On-Server-Modal\" className={props.classNames}>\r\n        <CyberButton classNames=\"btn-contained-secondary\" onClick={() => setOpen(true)}>\r\n            <FontAwesomeIcon icon={props.edit ? faEdit : faPlus}/>\r\n        </CyberButton>\r\n\r\n        <Dialog open={open} onClose={() => setOpen(false)} aria-labelledby=\"form-dialog-title\"\r\n                className=\"edit-anime-on-server-dialog\"\r\n        >\r\n            <AnimeOnServerForm\r\n                id={props.id} setOpen={setOpen} alternative_callback={props.alternative_callback}\r\n                edit={props.edit}\r\n            />\r\n        </Dialog>\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.id\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function OpenAnimeFolderButton(props) {\r\n    return <CyberButton classNames=\"btn-contained-secondary\" onClick={() => {\r\n        store.dispatch(openAnimeFolder(props.id));\r\n     }}>\r\n        <FontAwesomeIcon icon={faFolder}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.id\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteAnimeOnServerButton(props) {\r\n    return <CyberButton classNames=\"btn-contained-danger\" onClick={() => {\r\n         if (window.confirm('Are you sure?'))\r\n             store.dispatch(deleteAnimeServerInfoAndTorrents(props.id));\r\n     }}>\r\n        <FontAwesomeIcon icon={faTrash}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.id\r\n * @param {String} props.alternative_callback\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ApproveAnimeOnServerButton(props) {\r\n    return <CyberButton classNames=\"btn-contained-success\" onClick={() => {\r\n         if (window.confirm('Are you sure?'))\r\n             store.dispatch(approveAnimeOnServer(props.id, props.alternative_callback));\r\n     }}>\r\n        <FontAwesomeIcon icon={faCheck}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.id\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AdminEditAnimeOnServerButton(props) {\r\n    return <a href={ADMIN_EDIT_ANIME_ON_SERVER(props.id)} className=\"margin-left-10\">\r\n        <CyberButton classNames=\"btn-contained-secondary\" component=\"span\">\r\n            <FontAwesomeIcon icon={faUserEdit}/>\r\n        </CyberButton>\r\n    </a>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport {Anime, AnimeOnServer, User} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {faFolder, faMagnet, faTrash, faUserEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {deleteAnimeServerInfoAndTorrents, openAnimeFolder} from \"../../../../actions/requiem\";\r\nimport {ADMIN_EDIT_ANIME_ON_SERVER} from \"../../../../urls\";\r\nimport EditAnimeOnServerModalForm from \"../../../requiem/forms/EditAnimeOnServerModalForm\";\r\nimport {\r\n    AdminEditAnimeOnServerButton, ApproveAnimeOnServerButton,\r\n    DeleteAnimeOnServerButton,\r\n    OpenAnimeFolderButton\r\n} from \"../../../requiem/forms/forms\";\r\nimport {AnimeOnServerModalForm} from \"../../../requiem/forms/forms\";\r\nimport {GET_ANIME} from \"../../../../actions/types\";\r\n\r\n\r\nclass ServerTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"server-tab\">\r\n                {this.props.user && this.props.user[User.is_superuser] ? <div className=\"btn-group\">\r\n                    <OpenAnimeFolderButton id={this.props.anime[Anime.id]}/>\r\n                    <AnimeOnServerModalForm\r\n                        id={this.props.anime[Anime.id]} classNames=\"edit-btn\" edit={true}\r\n                        alternative_callback={GET_ANIME}\r\n                    />\r\n                    <AdminEditAnimeOnServerButton id={this.props.anime[Anime.id]}/>\r\n                    {!this.props.anime[Anime.anime_on_server][AnimeOnServer.approved] ?\r\n                        <ApproveAnimeOnServerButton id={this.props.anime[Anime.id]} alternative_callback={GET_ANIME}/>\r\n                        : null}\r\n                    <DeleteAnimeOnServerButton id={this.props.anime[Anime.id]}/>\r\n                </div> : null}\r\n\r\n                <TableContainer>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>Status</TableCell>\r\n                                <TableCell>\r\n                                    {this.props.anime[Anime.anime_on_server][AnimeOnServer.approved] ?\r\n                                        <span className=\"color-green\">Approved</span> :\r\n                                        <span className=\"color-danger\">Pending</span>}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Location</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.location]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Size</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB]}GB</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Video</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.video_quality]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Audio</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.audio_channel]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Dubs</TableCell>\r\n                                <TableCell className=\"lang-chipset\">\r\n                                    {Object.keys(AnimeOnServer).map(key => (\r\n                                        key.endsWith('_dub') ?\r\n                                            this.props.anime[Anime.anime_on_server][key] ?\r\n                                                <Chip variant=\"outlined\" label={key.replace('_dub', '')}/> : null : null\r\n                                    ))}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Subs</TableCell>\r\n                                <TableCell className=\"lang-chipset\">\r\n                                    {Object.keys(AnimeOnServer).map(key => (\r\n                                        key.endsWith('_sub') ?\r\n                                            this.props.anime[Anime.anime_on_server][key] ?\r\n                                                <Chip variant=\"outlined\" label={key.replace('_sub', '')}/> : null : null\r\n                                    ))}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Additional Info</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.additional_info]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Extract Subs</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.extract_subs] ? 'Yes' : 'No'}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Incomplete</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete] ? 'Yes' : 'No'}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Hash</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_hash]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Magnet</TableCell>\r\n                                <TableCell>\r\n                                    {this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_magnet] ?\r\n                                        <CyberButton classNames=\"btn-secondary\" variant=\"outlined\" onClick={() => {\r\n                                            window.open(this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_magnet]);\r\n                                        }}>\r\n                                            <FontAwesomeIcon icon={faMagnet}/>\r\n                                        </CyberButton> : null}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Downloaded on</TableCell>\r\n                                <TableCell><Moment\r\n                                    date={this.props.anime[Anime.anime_on_server][AnimeOnServer.date_added]}\r\n                                    format={'Do MMM YYYY'}/></TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Last Modified</TableCell>\r\n                                <TableCell><Moment\r\n                                    date={this.props.anime[Anime.anime_on_server][AnimeOnServer.date_last_modified]}\r\n                                    format={'Do MMM YYYY'}/></TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {deleteAnimeServerInfoAndTorrents, openAnimeFolder})(ServerTab)\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport store from \"../../../../store\";\r\nimport {updateAnimeEpisode} from \"../../../../actions/users\";\r\nimport {Anime, UserAnimeEntry} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/users.css'\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\n/**\r\n * Increase episode number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the anime to update\r\n * @param props.entry {Object} The user anime entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function UpdateAnimeEpisodeButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserAnimeEntry.watched_episodes] === entry[UserAnimeEntry.anime][Anime.episodes] && entry[UserAnimeEntry.anime][Anime.episodes] > 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                store.dispatch(updateAnimeEpisode(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHistory, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Anime, User, UserAnimeEntry} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Moment from \"react-moment\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport store from \"../../../../store\";\r\nimport {deleteAnimeHistoryEntry} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.entry {Object} Anime entry of the user\r\n * @param props.title {String} Title of the Anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function AnimeEpisodeHistoryModal(props) {\r\n    const {entry, title} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"History-Modal\">\r\n            <CyberButton disabled={isEmpty(entry) || entry[UserAnimeEntry.episode_history].length === 0}\r\n                         variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <FontAwesomeIcon icon={faHistory}/>\r\n            </CyberButton>\r\n            {!isEmpty(entry) && entry[UserAnimeEntry.episode_history].length > 0 ?\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" id=\"History-Modal-Dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"header-title\">\r\n                            History\r\n                        </DialogContentText>\r\n                        {entry[UserAnimeEntry.episode_history].map(history => (\r\n                            <p>Episode <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['episode']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteAnimeEpisodeHistoryButton\r\n                                    history_id={history['id']}\r\n                                    anime_id={entry[UserAnimeEntry.anime][Anime.id]}/>\r\n                            </p>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <CyberButton onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                            Close\r\n                        </CyberButton>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.anime_id {Number} ID of the anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteAnimeEpisodeHistoryButton(props) {\r\n    const {history_id, anime_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteAnimeHistoryEntry(history_id, anime_id));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport {Form, Formik} from \"formik\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport BBCodeQuickGuideDialog from \"./snippets/snippets\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faFileUpload, faLevelDownAlt, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport store from \"../../../store\";\r\nimport {\r\n    addAnimeEntryInstantDrop,\r\n    addMangaEntryInstantDrop, addToFavorites,\r\n    editUserAboutMeBBCode,\r\n    editUserBio,\r\n    importMalXmlForAnimeList,\r\n    importMalXmlForMangaList, removeFromFavorites,\r\n    scrapeEpisodeHistoryFromMal\r\n} from \"../../../actions/users\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {BRANCH_ANIME, store_reducer_users, store_reducers} from \"../../../globals\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {isTitleInFavorites} from \"../../display/functions\";\r\n\r\n\r\n/**\r\n * @param props.branch\r\n * @param props.id\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AddRemoveFromFavorites(props) {\r\n    const {branch, id} = props;\r\n    const initial = isTitleInFavorites(branch, id);\r\n    const [inFavorites, setInFavorites] = useState(initial);\r\n\r\n    return <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n        if (inFavorites) store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n        else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n        setInFavorites(!inFavorites)\r\n    }} title={inFavorites ? 'Remove from favorites' : 'Add to favorites'}>\r\n        <FontAwesomeIcon icon={inFavorites ? faStarSolid : faStar}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n * Form for editing user's bio\r\n * @param props {Object} user's bio\r\n * @param props.bio {String} user's bio\r\n * @param props.closeBio {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function EditBioForm(props) {\r\n    const {bio, closeBio} = props;\r\n    const field_names = {\r\n        bio: 'bio',\r\n    };\r\n\r\n    const initial_values = {\r\n        bio: bio,\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            store.dispatch(editUserBio(values.bio));\r\n            setSubmitting(false);\r\n            closeBio();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"edit-user-bio-form\">\r\n                <TextField\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                            e.preventDefault();\r\n                            handleSubmit();\r\n                        }\r\n                    }}\r\n                    label=\"Bio\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={values.bio}\r\n                    name={field_names.bio}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={errors.bio && touched.bio}\r\n                    helperText={(errors.bio && touched.bio) && errors.bio}/>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props {Object}\r\n * @param props.bbcode {String}\r\n * @param props.closeForm {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function EditAboutMeBBCodeForm(props) {\r\n    const {bbcode, closeForm} = props;\r\n    const field_names = {\r\n        bbcode: 'bbcode',\r\n    };\r\n\r\n    const initial_values = {\r\n        bbcode: bbcode,\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            values.bbcode = values.bbcode.replaceAll('\\n', '[br]');\r\n            store.dispatch(editUserAboutMeBBCode(values.bbcode));\r\n            setSubmitting(false);\r\n            closeForm();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"edit-user-about-me-bbcode-form\">\r\n                <TextField\r\n                    label=\"BBCode\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={values.bbcode.replaceAll('[br]', '\\n')}\r\n                    name={field_names.bbcode}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={errors.bbcode && touched.bbcode}\r\n                    helperText={(errors.bbcode && touched.bbcode) && errors.bbcode}\r\n                />\r\n                <div className=\"button-group\">\r\n                    <BBCodeQuickGuideDialog/>\r\n                    <CyberButton classNames=\"btn-contained-primary\" type=\"submit\"><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\nexport function EditAboutMeBBCodeDialog(props) {\r\n    const {open, onClose, bbcode} = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"edit-user-about-me-bbcode-title\" open={open}>\r\n            <div id=\"edit-user-about-me-bbcode\">\r\n                <DialogTitle id=\"edit-user-about-me-bbcode-title\">Edit BBCode</DialogTitle>\r\n                <EditAboutMeBBCodeForm bbcode={bbcode} closeForm={onClose}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props {Object}\r\n * @param props.bbcode {String}\r\n * @param props.closeForm {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function ScrapeEpisodeHistoryFromMalForm(props) {\r\n    const {closeForm} = props;\r\n    const field_names = {\r\n        MALHLOGSESSID: 'MALHLOGSESSID',\r\n        MALSESSIONID: 'MALSESSIONID',\r\n    };\r\n\r\n    const initial_values = {\r\n        MALHLOGSESSID: '',\r\n        MALSESSIONID: '',\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            store.dispatch(scrapeEpisodeHistoryFromMal(values[field_names.MALHLOGSESSID], values[field_names.MALSESSIONID]));\r\n            setSubmitting(false);\r\n            closeForm();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"scrape-episode-history-from-mal-form\">\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label={field_names.MALHLOGSESSID}\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={values[field_names.MALHLOGSESSID]}\r\n                            name={field_names.MALHLOGSESSID}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.MALHLOGSESSID && touched.MALHLOGSESSID}\r\n                            helperText={(errors.MALHLOGSESSID && touched.MALHLOGSESSID) && errors.MALHLOGSESSID}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label={field_names.MALSESSIONID}\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={values[field_names.MALSESSIONID]}\r\n                            name={field_names.MALSESSIONID}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.MALSESSIONID && touched.MALSESSIONID}\r\n                            helperText={(errors.MALSESSIONID && touched.MALSESSIONID) && errors.MALSESSIONID}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <div className=\"button-group\">\r\n                    <CyberButton classNames=\"btn-contained-primary\" type=\"submit\">\r\n                        <FontAwesomeIcon icon={faCheck}/>\r\n                    </CyberButton>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\nexport function ScrapeEpisodeHistoryFromMalDialog(props) {\r\n    const {open, onClose} = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"scrape-episode-history-from-mal-title\" open={open}>\r\n            <div id=\"scrape-episode-history-from-mal\">\r\n                <DialogTitle id=\"scrape-episode-history-from-mal-title\">MAL Episode History scraper</DialogTitle>\r\n                <ScrapeEpisodeHistoryFromMalForm closeForm={onClose}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * Button for importing xml file from MAL and updating the user's list\r\n * @returns {JSX.Element}\r\n */\r\nexport function ImportAnimeListFromMal(props) {\r\n    const {} = props;\r\n    const uploading = store.getState()[store_reducers.users][store_reducer_users.uploading_file];\r\n\r\n    return <div>\r\n        <input\r\n            accept=\"text/xml\"\r\n            style={{display: 'none'}}\r\n            id=\"import-mal-anime-list-xml\"\r\n            multiple={false}\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n                store.dispatch(importMalXmlForAnimeList(e.target.files[0]))\r\n            }}\r\n        />\r\n        {uploading ? <CircularProgress/> : <label htmlFor=\"import-mal-anime-list-xml\" className=\"upload-img-btn\">\r\n            <Button variant=\"outlined\" color=\"primary\" component=\"span\" onMouseEnter={playHoverSound}\r\n                    onClick={playClickSound}>\r\n                <FontAwesomeIcon icon={faFileUpload}/>\r\n            </Button>\r\n        </label>}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * Button for importing xml file from MAL and updating the user's list\r\n * @returns {JSX.Element}\r\n */\r\nexport function ImportMangaListFromMal(props) {\r\n    const {} = props;\r\n    const uploading = store.getState()[store_reducers.users][store_reducer_users.uploading_file];\r\n\r\n    return <div>\r\n        <input\r\n            accept=\"text/xml\"\r\n            style={{display: 'none'}}\r\n            id=\"import-mal-manga-list-xml\"\r\n            multiple={false}\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n                store.dispatch(importMalXmlForMangaList(e.target.files[0]))\r\n            }}\r\n        />\r\n        {uploading ? <CircularProgress/> : <label htmlFor=\"import-mal-manga-list-xml\" className=\"upload-img-btn\">\r\n            <Button variant=\"outlined\" color=\"primary\" component=\"span\" onMouseEnter={playHoverSound}\r\n                    onClick={playClickSound}>\r\n                <FontAwesomeIcon icon={faFileUpload}/>\r\n            </Button>\r\n        </label>}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * Button for instant dropping an anime\r\n * @param props.anime_id {Number} ID of the anime to be dropped\r\n * @param props.classNames {String} extra classname to pass to the btn\r\n * @param props.variant {String} variant of the MaterialUi btn\r\n * @returns {JSX.Element}\r\n */\r\nexport function AddAnimeEntryInstantDropButton(props) {\r\n    const {anime_id, classNames, variant} = props;\r\n    return <CyberButton variant={variant ? variant : 'outlined'} classNames={classNames} color=\"primary\" title={'Instant Drop'}\r\n                        onClick={() => {\r\n        store.dispatch(addAnimeEntryInstantDrop(anime_id))\r\n    }}>\r\n        <FontAwesomeIcon icon={faLevelDownAlt}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n * Button for instant dropping a manga\r\n * @param props.manga_id {Number} ID of the manga to be dropped\r\n * @param props.classNames {String} extra classname to pass to the btn\r\n * @param props.variant {String} variant of the MaterialUi btn\r\n * @returns {JSX.Element}\r\n */\r\nexport function AddMangaEntryInstantDropButton(props) {\r\n    const {manga_id, classNames, variant} = props;\r\n    return <CyberButton variant={variant ? variant : 'outlined'} classNames={classNames} color=\"primary\" title={'Instant Drop'} onClick={() => {\r\n        store.dispatch(addMangaEntryInstantDrop(manga_id))\r\n    }}>\r\n        <FontAwesomeIcon icon={faLevelDownAlt}/>\r\n    </CyberButton>\r\n}\r\n","import React from \"react\";\r\n\r\nimport 'date-fns';\r\nimport {KeyboardDateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {Form, Formik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {faCheck, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {UserMangaEntry} from \"../../../../models\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport store from \"../../../../store\";\r\nimport {\r\n    addMangaEntry,\r\n    deleteMangaEntry,\r\n    updateMangaEntry\r\n} from \"../../../../actions/users\";\r\nimport {AddRemoveFromFavorites} from \"../shortForms\";\r\n\r\n\r\nconst FIELD_NAMES = {\r\n    read_volumes: UserMangaEntry.read_volumes,\r\n    read_chapters: UserMangaEntry.read_chapters,\r\n    start_date: UserMangaEntry.start_date,\r\n    finish_date: UserMangaEntry.finish_date,\r\n    score: UserMangaEntry.score,\r\n    status: UserMangaEntry.status,\r\n    times_read: UserMangaEntry.times_read,\r\n    comments: UserMangaEntry.comments,\r\n    tags: UserMangaEntry.tags,\r\n    priority: UserMangaEntry.priority,\r\n    rereading: UserMangaEntry.rereading,\r\n    rereading_volume: UserMangaEntry.rereading_volume,\r\n    rereading_chapter: UserMangaEntry.rereading_chapter,\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param manga_id\r\n * @param user_manga_entry\r\n * @param edit\r\n * @returns {{read_chapters: number, comments: string, priority: string, rereading: boolean, tags: string, score: number, times_read: number, finish_date: string, rereading_chapter: number, read_volumes: number, manga: *, rereading_volume: number, errors: boolean, start_date: string, status: string}}\r\n */\r\nexport function getUserMangaEntryFormInitialValues(manga_id, user_manga_entry, edit = false) {\r\n    let initial_values = {\r\n        manga: manga_id,\r\n        read_volumes: 0,\r\n        read_chapters: 0,\r\n        start_date: '',\r\n        finish_date: '',\r\n        score: 0,\r\n        status: USER_MANGA_STATUSES.plan_to_read,\r\n        times_read: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rereading: false,\r\n        rereading_volume: 0,\r\n        rereading_chapter: 0,\r\n        errors: false\r\n    };\r\n\r\n    if (edit && !isEmpty(user_manga_entry))\r\n        initial_values = {\r\n            manga: manga_id,\r\n            read_volumes: user_manga_entry[UserMangaEntry.read_volumes],\r\n            read_chapters: user_manga_entry[UserMangaEntry.read_chapters],\r\n            start_date: user_manga_entry[UserMangaEntry.start_date],\r\n            finish_date: user_manga_entry[UserMangaEntry.finish_date],\r\n            score: user_manga_entry[UserMangaEntry.score],\r\n            status: user_manga_entry[UserMangaEntry.status],\r\n            times_read: user_manga_entry[UserMangaEntry.times_read],\r\n            comments: user_manga_entry[UserMangaEntry.comments],\r\n            tags: user_manga_entry[UserMangaEntry.tags],\r\n            priority: user_manga_entry[UserMangaEntry.priority],\r\n            rereading: user_manga_entry[UserMangaEntry.rereading],\r\n            rereading_volume: user_manga_entry[UserMangaEntry.rereading_volume],\r\n            rereading_chapter: user_manga_entry[UserMangaEntry.rereading_chapter],\r\n        };\r\n\r\n    return initial_values\r\n}\r\n\r\n\r\nfunction deleteEntry(id, list) {\r\n    if (window.confirm('Are you sure? This will also delete any chapter history of this manga.'))\r\n        store.dispatch(deleteMangaEntry(id, list));\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.initial_values\r\n * @param {boolean} props.edit\r\n * @param {int} props.id\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserMangaEntryForm(props) {\r\n    const {initial_values, edit, id, list, handleClose} = props;\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}><Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            if (values.start_date === '') values.start_date = null;\r\n            if (values.finish_date === '') values.finish_date = null;\r\n            values.score = parseInt(values.score);\r\n\r\n            if (edit) store.dispatch(updateMangaEntry(id, values, list));\r\n            else store.dispatch(addMangaEntry(values));\r\n\r\n            setSubmitting(false);\r\n        }}>\r\n        {({\r\n              isSubmitting, values, handleChange,\r\n              handleBlur, setValues\r\n          }) => (\r\n            <Form id=\"User-Title-Entry-Form\">\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-status\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-status\"\r\n                            className=\"form-control\"\r\n                            label=\"Status\"\r\n                            value={values[FIELD_NAMES.status]}\r\n                            name={FIELD_NAMES.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"Reading\">Reading</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                            <MenuItem value=\"On Hold\">On Hold</MenuItem>\r\n                            <MenuItem value=\"Dropped\">Dropped</MenuItem>\r\n                            <MenuItem value=\"Plan to Read\">Plan to Read</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-value\">Priority</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-value\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.priority]}\r\n                            name={FIELD_NAMES.priority}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"4\">VERY HIGH</MenuItem>\r\n                            <MenuItem value=\"3\">HIGH</MenuItem>\r\n                            <MenuItem value=\"2\">MEDIUM</MenuItem>\r\n                            <MenuItem value=\"1\">LOW</MenuItem>\r\n                            <MenuItem value=\"0\">VERY LOW</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Volume\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.read_volumes}\r\n                            value={values[FIELD_NAMES.read_volumes]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4} md={2}>\r\n                        <div className=\"form-group text-right\">\r\n                            <Checkbox\r\n                                value={values[FIELD_NAMES.rereading]}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                name={FIELD_NAMES.rereading}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={4}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Reread Volume\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rereading_volume}\r\n                            value={values[FIELD_NAMES.rereading_volume]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rereading]}/>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Chapter\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.read_chapters}\r\n                            value={values[FIELD_NAMES.read_chapters]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Reread Chapter\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rereading_chapter}\r\n                            value={values[FIELD_NAMES.rereading_chapter]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rereading]}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-score\">Score</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-score\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.score]}\r\n                            name={FIELD_NAMES.score}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"0\">0</MenuItem>\r\n                            <MenuItem value=\"1\">1</MenuItem>\r\n                            <MenuItem value=\"2\">2</MenuItem>\r\n                            <MenuItem value=\"3\">3</MenuItem>\r\n                            <MenuItem value=\"4\">4</MenuItem>\r\n                            <MenuItem value=\"5\">5</MenuItem>\r\n                            <MenuItem value=\"6\">6</MenuItem>\r\n                            <MenuItem value=\"7\">7</MenuItem>\r\n                            <MenuItem value=\"8\">8</MenuItem>\r\n                            <MenuItem value=\"9\">9</MenuItem>\r\n                            <MenuItem value=\"10\">10</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start date\"\r\n                            value={values[FIELD_NAMES.start_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.start_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Times watched\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.times_read}\r\n                            value={values[FIELD_NAMES.times_read]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Finish date\"\r\n                            value={values[FIELD_NAMES.finish_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.finish_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Comments\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.comments]}\r\n                            name={FIELD_NAMES.comments}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Tags\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.tags]}\r\n                            name={FIELD_NAMES.tags}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <DialogActions>\r\n                    <AddRemoveFromFavorites branch={BRANCH_MANGA} id={parseInt(id)}/>\r\n                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\" onClick={handleClose}\r\n                                 disabled={isSubmitting}><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                    {edit ? <CyberButton classNames=\"btn-danger\" variant=\"outlined\" onClick={(e) => {\r\n                        deleteEntry(id, list);\r\n                        handleClose()\r\n                    }}><FontAwesomeIcon icon={faTrash}/></CyberButton> : null}\r\n                </DialogActions>\r\n            </Form>\r\n        )}\r\n    </Formik></MuiPickersUtilsProvider>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {updateMangaEntry, addMangaEntry, deleteMangaEntry} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getUserMangaEntryFormInitialValues, UserMangaEntryForm} from \"./forms\";\r\n\r\nimport '../../../../assets/css/forms.css';\r\n\r\n\r\nclass MangaEntryModalForm extends Component {\r\n    static propTypes = {\r\n        /** Classnames for the open dialog btn */\r\n        classNames: PropTypes.object,\r\n        /** Title of the Manga */\r\n        title: PropTypes.string,\r\n        /** ID of the Manga */\r\n        id: PropTypes.number.isRequired,\r\n        /** User entry of the manga */\r\n        user_manga_entry: PropTypes.object,\r\n        /** If the entry is being edited */\r\n        edit: PropTypes.bool,\r\n        /** User list info for filtering on update entry\r\n         * {user_list_pk: list_pk, user_list_filter: selected_filter} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let edit = true;\r\n        if (this.props.edit === undefined) {\r\n            if (isEmpty(this.props.user_manga_entry))\r\n                edit = false;\r\n        } else edit = this.props.edit;\r\n\r\n        const initial_values = getUserMangaEntryFormInitialValues(this.props.id, this.props.user_manga_entry, edit);\r\n\r\n        return (\r\n            <div id=\"User-Title-Entry\">\r\n                <CyberButton classNames={this.props.classNames} variant=\"outlined\" color=\"primary\"\r\n                             onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"user-title-entry-dialog\">\r\n                    {edit ? <DialogTitle id=\"form-dialog-title\">Edit {this.props.title}</DialogTitle>\r\n                        : <DialogTitle id=\"form-dialog-title\">Add {this.props.title}</DialogTitle>}\r\n                    <DialogContent>\r\n                        <UserMangaEntryForm initial_values={initial_values} edit={edit} id={this.props.id}\r\n                                            list={this.props.list} handleClose={this.handleClose}/>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateMangaEntry, addMangaEntry, deleteMangaEntry})(MangaEntryModalForm)\r\n","import React, {useState} from \"react\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport store from \"../../../../store\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport {updateMangaChapter, updateMangaVolume} from \"../../../../actions/users\";\r\nimport {Manga, UserMangaEntry} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/users.css'\r\n\r\n\r\n/**\r\n * Increase volume number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the manga to update\r\n * @param props.entry {Object} The user manga entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UpdateMangaVolumeButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserMangaEntry.read_volumes] === entry[UserMangaEntry.manga][Manga.volumes] &&\r\n        entry[UserMangaEntry.manga][Manga.volumes] !== 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserMangaEntry.read_volumes] !== entry[UserMangaEntry.manga][Manga.volumes] ||\r\n                    entry[UserMangaEntry.manga][Manga.volumes] === 0)\r\n                    store.dispatch(updateMangaVolume(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n\r\n\r\n/**\r\n * Increase volume number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the manga to update\r\n * @param props.entry {Object} The user manga entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UpdateMangaChapterButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserMangaEntry.read_chapters] === entry[UserMangaEntry.manga][Manga.chapters] &&\r\n        entry[UserMangaEntry.manga][Manga.chapters] !== 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserMangaEntry.read_chapters] !== entry[UserMangaEntry.manga][Manga.chapters] ||\r\n                    entry[UserMangaEntry.manga][Manga.chapters] === 0)\r\n                    store.dispatch(updateMangaChapter(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHistory, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Anime, Manga, User, UserAnimeEntry, UserMangaEntry} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Moment from \"react-moment\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport store from \"../../../../store\";\r\nimport {deleteAnimeHistoryEntry, deleteMangaVolumeChapterHistoryEntry} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.entry {Object} Manga entry of the user\r\n * @param props.title {String} Title of the Manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function MangaVolumeChapterHistoryModal(props) {\r\n    const {entry, title} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"History-Modal\">\r\n            <CyberButton disabled={isEmpty(entry) ||\r\n            (entry[UserMangaEntry.volume_history].length === 0 && entry[UserMangaEntry.chapter_history].length === 0)}\r\n                         variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <FontAwesomeIcon icon={faHistory}/>\r\n            </CyberButton>\r\n            {!isEmpty(entry) && entry[UserMangaEntry.volume_history].length > 0 ?\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" id=\"History-Modal-Dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"header-title\">\r\n                            Volume History\r\n                        </DialogContentText>\r\n                        {entry[UserMangaEntry.volume_history].map(history => (\r\n                            <p>Volume <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['volume']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteMangaVolumeHistoryButton\r\n                                    history_id={history['id']}\r\n                                    manga_id={entry[UserMangaEntry.manga][Manga.id]}/>\r\n                            </p>\r\n                        ))}\r\n                        <DialogContentText className=\"header-title\">\r\n                            Chapter History\r\n                        </DialogContentText>\r\n                        {entry[UserMangaEntry.chapter_history].map(history => (\r\n                            <p>Chapter <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['chapter']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteMangaChapterHistoryButton\r\n                                    history_id={history['id']}\r\n                                    manga_id={entry[UserMangaEntry.manga][Manga.id]}/>\r\n                            </p>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <CyberButton onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                            Close\r\n                        </CyberButton>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.manga_id {Number} ID of the manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteMangaVolumeHistoryButton(props) {\r\n    const {history_id, manga_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteMangaVolumeChapterHistoryEntry(history_id, manga_id, 'volume'));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.anime_id {Number} ID of the manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteMangaChapterHistoryButton(props) {\r\n    const {history_id, manga_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteMangaVolumeChapterHistoryEntry(history_id, manga_id, 'chapter'));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nimport {Anime, Manga, VALID_ANIME_RELATION_NAMES, VALID_ANIME_RELATIONS} from \"../../../../models\";\r\nimport {getRelationsForAnime} from \"../../../../actions/anime\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass RelationsTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.anime_relations))\r\n            this.props.getRelationsForAnime(this.props.anime[Anime.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"relations-tab\">\r\n                {!isEmpty(this.props.anime_relations) ? <>\r\n                    {this.props.anime_relations['anime_relation_adaptation'].length > 0 ?\r\n                        <div>\r\n                            <h2 className=\"relation-name\">Adaptation</h2>\r\n                            <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                {this.props.anime_relations['anime_relation_adaptation'].map((manga, x) => (\r\n                                    <Grow key={x} in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1}>\r\n                                            <TitleCard\r\n                                                branch={BRANCH_MANGA}\r\n                                                title={manga}\r\n                                                user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                                        this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                            />\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                ))}\r\n                            </GridList>\r\n                        </div> : null}\r\n\r\n                    {VALID_ANIME_RELATIONS.map((relation_name, i) => (\r\n                        relation_name !== 'anime_relation_adaptation' ?\r\n                            <div key={i}>\r\n                                {this.props.anime_relations[relation_name].length > 0 ?\r\n                                    <h2 className=\"relation-name\">{VALID_ANIME_RELATION_NAMES[relation_name]}</h2> : null}\r\n\r\n                                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                    {this.props.anime_relations[relation_name].map((anime, y) => (\r\n                                        <Grow key={y} in {...({timeout: 200 + (y * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={BRANCH_ANIME}\r\n                                                    title={anime}\r\n                                                    user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                        this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                            </div> : null))}\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_relations: state.anime.anime[Anime.anime_relations],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRelationsForAnime})(RelationsTab)\r\n","import React, {Component} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\nimport Tree from 'react-d3-tree';\r\n\r\nimport {\r\n    BRANCH_ANIME\r\n\r\n} from \"../../../globals\";\r\n\r\nimport {VALID_ANIME_RELATION_NAMES, VALID_ANIME_RELATIONS} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {useCenteredTree} from \"./helpers\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faAngleDoubleDown, faAngleDoubleUp} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nlet TITLES = [];\r\nlet LOCAL_VALID_ANIME_RELATIONS = VALID_ANIME_RELATIONS;\r\nlet b = LOCAL_VALID_ANIME_RELATIONS[1];\r\nLOCAL_VALID_ANIME_RELATIONS[1] = LOCAL_VALID_ANIME_RELATIONS[3];\r\nLOCAL_VALID_ANIME_RELATIONS[3] = b;\r\nlet FINAL_TREE = [];\r\n\r\n\r\nfunction setTitles(titles) {\r\n    TITLES = titles;\r\n}\r\n\r\nexport function compareByAired(a, b) {\r\n    let now = new Date();\r\n    let a_value = false;\r\n    let b_value = false;\r\n    if (a['air_start']) {\r\n        let date_a = new Date(a['air_start']);\r\n        a_value = Math.abs(now - date_a);\r\n    }\r\n    if (a['air_start']) {\r\n        let date_b = new Date(b['air_start']);\r\n        b_value = Math.abs(now - date_b);\r\n    }\r\n    return compare(a_value, b_value);\r\n}\r\n\r\nfunction compare(first, second) {\r\n    if (!first) return -1;\r\n    if (!second) return 1;\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison\r\n}\r\n\r\nfunction getFullAnime(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            return TITLES[x];\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction markAnimeAsAdded(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            TITLES[x]['ADDED'] = true;\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction isAdded(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            return TITLES[x]['ADDED'];\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getChildren(parent_node) {\r\n    markAnimeAsAdded(parent_node['attributes']['info']['id']);\r\n\r\n    // console.log(parent_node);\r\n    if (!parent_node['name']) return;\r\n\r\n    for (let z = 0; z < LOCAL_VALID_ANIME_RELATIONS.length; z++) {\r\n        if (LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_prequel' || LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_adaptation') continue;\r\n        let relation = parent_node['attributes']['info']['anime_relations'][LOCAL_VALID_ANIME_RELATIONS[z]];\r\n        for (let x = 0; x < relation.length; x++) {\r\n            let anime = getFullAnime(relation[x]['id']);\r\n            if (!anime || anime['ADDED'] === true) continue;\r\n            if (anime['anime_relations']['anime_relation_prequel'].length > 0) {\r\n                for (let y = 0; y < anime['anime_relations']['anime_relation_prequel'].length; y++) {\r\n                    if (!isAdded(anime['anime_relations']['anime_relation_prequel'][y]['id'])) {\r\n                        console.log(anime['anime_relations']['anime_relation_prequel'][y]);\r\n                    }\r\n                }\r\n            }\r\n            markAnimeAsAdded(relation[x]['id']);\r\n            let node = {\r\n                name: anime['title'],\r\n                attributes: {\r\n                    info: anime,\r\n                    parent_relation: VALID_ANIME_RELATION_NAMES[LOCAL_VALID_ANIME_RELATIONS[z]]\r\n                },\r\n                children: []\r\n            };\r\n\r\n            parent_node.children.push(node)\r\n        }\r\n    }\r\n\r\n    if (parent_node['children'].length > 0) {\r\n        for (let x = 0; x < parent_node['children'].length; x++) {\r\n            getChildren(parent_node['children'][x])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction checkChildrenForFixingSequel(parent_node, sequel_to_find) {\r\n    if (!parent_node) return;\r\n    for (let x = 0; x < parent_node['children'].length; x++) {\r\n        if (parent_node['children'][x]['attributes']['info']['id'] === sequel_to_find['id']) {\r\n            let node_to_return = parent_node['children'][x];\r\n            const index = parent_node['children'].indexOf(parent_node['children'][x]);\r\n            if (index > -1) {\r\n                parent_node['children'].splice(index, 1);\r\n            }\r\n            return node_to_return;\r\n        }\r\n        let node_to_return = checkChildrenForFixingSequel(parent_node['children'][x], sequel_to_find);\r\n        if (node_to_return) return node_to_return;\r\n    }\r\n}\r\n\r\n\r\nfunction fixSequelPriority(parent_node) {\r\n    let parent_anime = getFullAnime(parent_node['attributes']['info']['id']);\r\n\r\n    if (parent_anime['anime_relations']['anime_relation_sequel'].length > 0 &&\r\n        parent_anime['anime_relations']['anime_relation_full_story'].length <= 0) {\r\n        let in_children = false;\r\n        let sequel_to_find;\r\n        for (let x = 0; x < parent_anime['anime_relations']['anime_relation_sequel'].length; x++) {\r\n            let sequel_anime = getFullAnime(parent_anime['anime_relations']['anime_relation_sequel'][x]['id']);\r\n\r\n            for (let y = 0; y < parent_node['children'].length; y++) {\r\n                let anime = getFullAnime(parent_node['children'][y]['attributes']['info']['id']);\r\n                if (sequel_anime['id'] === anime['id']) {\r\n                    in_children = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (sequel_anime['anime_relations']) {\r\n                if (sequel_anime['anime_relations']['anime_relation_prequel'].length > 1 && parent_anime['type'] != 'TV') {\r\n                    in_children = true;\r\n                }\r\n            }\r\n            sequel_to_find = sequel_anime;\r\n        }\r\n\r\n        if (!in_children) {\r\n            // NOW FIND IT IN THE TREE AND CUT IT FROM THERE AND PASTE IT AS ITS SEQUEL IN HIS CHILDREN\r\n            let root_node = FINAL_TREE[0];\r\n            let node_to_fix = checkChildrenForFixingSequel(root_node, sequel_to_find);\r\n            if (node_to_fix) {\r\n                node_to_fix['attributes']['parent_relation'] = 'Sequel';\r\n                parent_node['children'].push(node_to_fix);\r\n            }\r\n        }\r\n    }\r\n    if (parent_node['children'].length > 0) {\r\n        for (let x = 0; x < parent_node['children'].length; x++) {\r\n            fixSequelPriority(parent_node['children'][x])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getRootNode(titles) {\r\n    // First find the root title\r\n    // Root is valid if it doesnt have (Parent Story,\r\n    // Full Story, or Other that is a TV or Movie and current title is not TV)\r\n    let root;\r\n    let root_node;\r\n\r\n    for (let x = 0; x < titles.length; x++) {\r\n        let _continue = false;\r\n        if (titles[x]['anime_relations']['anime_relation_full_story'].length > 0)\r\n            continue;\r\n        else if (titles[x]['anime_relations']['anime_relation_parent_story'].length > 0)\r\n            continue;\r\n        else if (titles[x]['anime_relations']['anime_relation_prequel'].length > 0)\r\n            continue;\r\n        else if (titles[x]['type'] !== 'TV' && titles[x]['anime_relations']['anime_relation_other'].length > 0 && titles[x]['anime_relations']['anime_relation_sequel'].length <= 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_other'].length; y++) {\r\n                if (titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'TV' ||\r\n                    titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'Movie' ||\r\n                    titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'OVA') {\r\n                    _continue = true;\r\n                    break\r\n                }\r\n            }\r\n            if (_continue) continue;\r\n        }\r\n        if (titles[x]['type'] !== 'TV' && titles[x]['anime_relations']['anime_relation_spin_off'].length > 0) {\r\n            let check = true;\r\n            for (let z = 0; z < LOCAL_VALID_ANIME_RELATIONS.length; z++) {\r\n                if (LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_spin_off' || LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_adaptation') continue;\r\n                if (titles[x]['anime_relations'][LOCAL_VALID_ANIME_RELATIONS[z]].length > 0) {\r\n                    check = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (check) {\r\n                for (let y = 0; y < titles[x]['anime_relations']['anime_relation_spin_off'].length; y++) {\r\n                    if (titles[x]['anime_relations']['anime_relation_spin_off'][y]['type'] === 'TV') {\r\n                        _continue = true;\r\n                        break\r\n                    }\r\n                }\r\n                if (_continue) continue;\r\n            }\r\n        }\r\n        if (titles[x]['type'] === 'TV' && titles[x]['anime_relations']['anime_relation_alternative_setting'].length > 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_alternative_setting'].length; y++) {\r\n                let anime = getFullAnime(titles[x]['anime_relations']['anime_relation_alternative_setting'][y]['id']);\r\n                if (anime) {\r\n                    if (anime['anime_relations']['anime_relation_prequel'].length > 0) {\r\n                        _continue = true;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n            if (_continue) continue;\r\n        }\r\n        if (titles[x]['type'] === 'Movie' && titles[x]['anime_relations']['anime_relation_alternative_version'].length > 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_alternative_version'].length; y++) {\r\n                if (titles[x]['anime_relations']['anime_relation_alternative_version'][y]['type'] === 'TV') {\r\n                    _continue = true;\r\n                    break\r\n                }\r\n            }\r\n            if (_continue) continue\r\n        }\r\n\r\n        root = titles[x];\r\n        root_node = {\r\n            name: root['title'],\r\n            attributes: {\r\n                info: root,\r\n                parent_relation: null\r\n            },\r\n            children: []\r\n        };\r\n        return root_node;\r\n    }\r\n    return false\r\n}\r\n\r\nconst renderForeignObjectNode = ({nodeDatum, toggleNode, foreignObjectProps, user_statuses}) => (\r\n    <g>\r\n        {/* `foreignObject` requires width & height to be explicitly set. */}\r\n        <foreignObject {...foreignObjectProps} className=\"foreign-object\">\r\n            {console.log('statuses', user_statuses)}\r\n            <div style={{width: \"50%\"}}>\r\n                <p className=\"card-relation-name\">{nodeDatum['attributes']['parent_relation']}</p>\r\n                <div className=\"card-wrapper\">\r\n                    <TitleCard\r\n                        classNames=\"franchise-card\"\r\n                        branch={BRANCH_ANIME}\r\n                        title={nodeDatum['attributes']['info']}\r\n                        user_status={user_statuses[nodeDatum['attributes']['info']['id'].toString()]}\r\n                    />\r\n                </div>\r\n                {nodeDatum.children.length > 0 && (\r\n                    <CyberButton classNames=\"btn-contained-primary\" style={{width: \"100%\"}} onClick={toggleNode}>\r\n                        <FontAwesomeIcon icon={nodeDatum.__rd3t.collapsed ? faAngleDoubleDown : faAngleDoubleUp}/>\r\n                    </CyberButton>\r\n                )}\r\n            </div>\r\n        </foreignObject>\r\n    </g>\r\n);\r\n\r\nfunction TreeBuilder(props) {\r\n    const {data, user_statuses} = props;\r\n    const [translate, containerRef] = useCenteredTree();\r\n    const nodeSize = {x: 600, y: 600};\r\n    const foreignObjectProps = {width: nodeSize.x, height: nodeSize.y, x: -150, y: -250};\r\n    console.log('in tree builder', user_statuses);\r\n    return (\r\n        <div style={{width: \"100%\", height: \"100vh\"}} ref={containerRef}>\r\n            <Tree\r\n                data={data}\r\n                translate={translate}\r\n                nodeSize={nodeSize}\r\n                pathFunc={'step'}\r\n                renderCustomNodeElement={(rd3tProps) =>\r\n                    renderForeignObjectNode({...rd3tProps, user_statuses, foreignObjectProps})\r\n                }\r\n                orientation=\"vertical\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nclass FranchiseTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {titles, user_anime_entry_statuses, mini} = this.props;\r\n\r\n        // let translate = {x: innerWidth / 2, y: innerHeight / 3};\r\n        let node_size = {x: 294, y: 500};\r\n        let foreign_object_wrapper = {x: -132, y: -230};\r\n        let svgSquare = {\r\n            shape: 'rect',\r\n            shapeProps: {\r\n                width: 265,\r\n                height: 450,\r\n                x: -125,\r\n                y: -230,\r\n            }\r\n        };\r\n\r\n        // console.log(mini);\r\n\r\n        if (mini) {\r\n            svgSquare.shapeProps = {\r\n                width: 120,\r\n                height: 200,\r\n                x: -80,\r\n                y: -100,\r\n            };\r\n            foreign_object_wrapper = {x: -75, y: -120};\r\n            node_size = {x: 184, y: 300};\r\n            // translate.y = innerHeight / 4;\r\n        }\r\n\r\n        for (let x = 0; x < titles.length; x++) {\r\n            titles[x]['ADDED'] = false\r\n        }\r\n\r\n        setTitles(titles);\r\n        titles.sort(compareByAired).reverse();\r\n\r\n        let root_node = getRootNode(titles);\r\n\r\n        FINAL_TREE = [\r\n            root_node\r\n        ];\r\n\r\n        if (root_node) {\r\n            getChildren(root_node);\r\n            FINAL_TREE = [\r\n                root_node\r\n            ];\r\n            try {\r\n                fixSequelPriority(root_node);\r\n            } catch (e) {\r\n            }\r\n            FINAL_TREE = [\r\n                root_node\r\n            ];\r\n            // fixSequelPriority(root_node);\r\n\r\n            // let missing = false;\r\n            // for (let x = 0; x < titles.length; x++) {\r\n            //     if (!titles[x]['ADDED']) {\r\n            //         missing = true;\r\n            //     }\r\n            // }\r\n\r\n            // if (missing) {\r\n            //     getMissingChildren(root_node);\r\n            // }\r\n\r\n            // let missing = true;\r\n            // while (missing) {\r\n            //     missing = false;\r\n            //     for (let x = 0; x < titles.length; x++) {\r\n            //         if (!titles[x]['ADDED']) {\r\n            //             missing = true;\r\n            //         }\r\n            //     }\r\n            //     fixMissingTitles(root_node, titles)\r\n            // }\r\n        }\r\n\r\n        let TreeData = FINAL_TREE;\r\n        let missing = 0;\r\n        for (let x = 0; x < titles.length; x++) {\r\n            if (!titles[x]['ADDED']) {\r\n                console.log(titles[x]['id']);\r\n                missing += 1;\r\n            }\r\n        }\r\n\r\n        if (root_node) {\r\n            return (\r\n                <div id=\"Franchise-Tree\">\r\n                    <div style={{position: 'absolute'}}>{missing}</div>\r\n                    {/*<div className=\"card-size-btn-container\"><Button color={'primary'} onClick={this.toggleCard}>X</Button></div>*/}\r\n                    <TreeBuilder data={TreeData} user_statuses={this.props.user_anime_entry_statuses}/>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <p className=\"color-blue\">Could not generate franchise</p>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    // mini: state.anime.display_franchise_mini,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(FranchiseTree)\r\n","import { useCallback, useState } from \"react\";\r\n\r\n\r\nexport const useCenteredTree = (defaultTranslate = { x: 0, y: 0 }) => {\r\n  const [translate, setTranslate] = useState(defaultTranslate);\r\n  const containerRef = useCallback((containerElem) => {\r\n    if (containerElem !== null) {\r\n      const { width, height } = containerElem.getBoundingClientRect();\r\n      setTranslate({ x: width / 2, y: height / 2 });\r\n    }\r\n  }, []);\r\n  return [translate, containerRef];\r\n};","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, AnimeFranchise} from \"../../../../models\";\r\nimport {getAnimeFranchise} from \"../../../../actions/anime\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport FranchiseTree from \"../../../franchises/display/FranchiseTree\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {ANIME_FRANCHISE_DISPLAY} from \"../../../../urls\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSitemap} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass FranchiseTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Display-Franchise\" className=\"franchise-tab\">\r\n                <CyberLink to={ANIME_FRANCHISE_DISPLAY(this.props.anime[Anime.franchise])}><CyberButton variant=\"outlined\"><FontAwesomeIcon icon={faSitemap}/></CyberButton></CyberLink>\r\n                {isEmpty(this.props.anime_franchise) || this.props.anime_franchise_loading ?\r\n                    <Loading text={'Franchise Loading'}/> :\r\n                    <FranchiseTree titles={this.props.anime_franchise[AnimeFranchise.anime_franchise]}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise})(FranchiseTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faDownload} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport DownloadTorrentForm from \"./DownloadTorrentForm\";\r\n\r\n\r\nclass DownloadTorrentModalForm extends Component {\r\n    static propTypes = {\r\n        /** classNames */\r\n        classNames: PropTypes.string,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Download-Anime-Torrent-Modal\" className={this.props.classNames}>\r\n                <CyberButton classNames=\"btn-contained-secondary\" onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={faDownload}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"download-torrent-dialog\">\r\n                        <DialogTitle id=\"form-dialog-title\">Download torrent</DialogTitle>\r\n                        <DialogContent>\r\n                            <DownloadTorrentForm handleClose={this.handleClose}/>\r\n                        </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(DownloadTorrentModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {Anime, AnimeOnServer} from \"../../../models\";\r\nimport moment from \"moment\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown,\r\n    faArrowUp,\r\n    faBan,\r\n    faClock,\r\n    faDownload,\r\n    faHdd,\r\n    faPause, faPuzzlePiece,\r\n    faSpinner, faUpload, faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {getBytesToSize, getProgress, getSpeed, TorrentProgressInfo} from \"./snippets\";\r\nimport PropTypes from \"prop-types\";\r\nimport {getTorrentProgress} from \"../../../actions/requiem\";\r\nimport {sleep} from \"../../functions\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nclass DisplayTorrentProgress extends Component {\r\n    static propTypes = {\r\n        /** ID of the title to get torrent progress for */\r\n        id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            torrent_progress_reading: false,\r\n            update_interval: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTorrentProgress(this.props.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {id, getTorrentProgress} = this.props;\r\n        setTimeout(() => { getTorrentProgress(id) }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const torrent_filters = {\r\n            'name': false, 'size': true, 'dl_speed': true, 'up_speed': true, 'remaining': true,\r\n            'seeds': true, 'leechs': true, 'eta': true\r\n        };\r\n\r\n        return this.props.torrent_progress && this.props.torrent_progress.length > 0 ?\r\n            this.props.torrent_progress.map(torrent => (\r\n                <TorrentProgressInfo torrent={torrent} filters={torrent_filters}/>\r\n            )) : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    torrent_progress: state.requiem.torrent_progress\r\n});\r\n\r\nexport default connect(mapStateToProps, {getTorrentProgress})(DisplayTorrentProgress)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Character, Person} from \"../../../../models\";\r\nimport {getVoiceActorRolesForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../../actions/users\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\nconst ITEMS_PER_PAGE = 20;\r\n\r\n\r\nclass VoiceActorRolesTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.voice_actor_roles] || this.props.voice_actor_roles[ApiResult.previous])\r\n            this.props.getVoiceActorRolesForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_anime_entry_statuses))\r\n            this.props.getLoggedInUserAnimeEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getVoiceActorRolesForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"person-voice-actor-roles-tab person-tab\">\r\n                {this.props.voice_actor_roles ? <>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Anime</td>\r\n                                <td>Character</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.props.voice_actor_roles[ApiResult.results].map((character, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    {character[Character.anime_roles].map((anime, x) => (\r\n                                        this.props.person?.[Person.voice_actor_anime_roles]?.[character[Character.id]]?.[anime[Anime.id]] ? <div className=\"anime-role-wrapper\">\r\n                                            <Chip className={this.props.person?.[Person.voice_actor_anime_roles]?.[character[Character.id]]?.[anime[Anime.id]] === 'Main' ? 'role-text chip-primary' : 'role-text'}\r\n                                                  variant=\"default\"\r\n                                                  size=\"small\"\r\n                                                  label={this.props.person?.[Person.voice_actor_anime_roles]?.[character[Character.id]]?.[anime[Anime.id]]}/>\r\n                                            <TitleCard\r\n                                                key={x} branch={BRANCH_ANIME} title={anime}\r\n                                                containerClassNames=\"character-role-wrapper-card-container\"\r\n                                                user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                    this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                            />\r\n                                        </div> : null\r\n                                    ))}\r\n                                </td>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        containerClassNames=\"character-role-wrapper-card-container character-role-center\"\r\n                                        branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    {/*</GridList>*/}\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.characters_loading ? <Loading text={'Characters loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    voice_actor_roles: state.people.person[Person.voice_actor_roles],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    characters_loading: state.characters.characters_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getVoiceActorRolesForPerson, getLoggedInUserAnimeEntryStatuses\r\n})(VoiceActorRolesTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Character, Person} from \"../../../../models\";\r\nimport {getAnimeStaffPositionsForPerson, getVoiceActorRolesForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 50;\r\n\r\n\r\nclass AnimeStaffPositionsTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.anime_staff_positions] || this.props.anime_staff_positions[ApiResult.previous])\r\n            this.props.getAnimeStaffPositionsForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_anime_entry_statuses))\r\n            this.props.getLoggedInUserAnimeEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAnimeStaffPositionsForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const positions_roles = JSON.parse(this.props.person[Person.anime_staff_positions_roles]);\r\n        return (\r\n            <div className=\"person-tab\">\r\n                {this.props.anime_staff_positions ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.anime_staff_positions[ApiResult.results].map((anime, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        key={i} branch={BRANCH_ANIME} title={anime}\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                            this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                    />\r\n                                </td>\r\n                                <td><p className=\"role\">{positions_roles[anime[Anime.id]]}</p></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.anime_loading ? <Loading text={'Anime loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    anime_staff_positions: state.people.person[Person.anime_staff_positions],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    anime_loading: state.anime.anime_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getAnimeStaffPositionsForPerson, getLoggedInUserAnimeEntryStatuses\r\n})(AnimeStaffPositionsTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Manga, Person} from \"../../../../models\";\r\nimport {getPublishedMangaForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {getLoggedInUserMangaEntryStatuses} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 50;\r\n\r\n\r\nclass PublishedMangaTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.published_manga] || this.props.published_manga[ApiResult.previous])\r\n            this.props.getPublishedMangaForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_manga_entry_statuses))\r\n            this.props.getLoggedInUserMangaEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getPublishedMangaForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const manga_roles = JSON.parse(this.props.person[Person.published_manga_roles]);\r\n        return (\r\n            <div className=\"person-tab\">\r\n                {this.props.published_manga ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.published_manga[ApiResult.results].map((manga, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        key={i} branch={BRANCH_MANGA} title={manga}\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                            this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                    />\r\n                                </td>\r\n                                <td><p className=\"role\">{manga_roles[manga[Manga.id]]}</p></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.manga_loading ? <Loading text={'Manga loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    published_manga: state.people.person[Person.published_manga],\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n    manga_loading: state.manga.manga_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPublishedMangaForPerson, getLoggedInUserMangaEntryStatuses\r\n})(PublishedMangaTab)\r\n","export class AnimeStatuses {\r\n    static finished_airing = 'Finished Airing'\r\n    static currently_airing = 'Currently Airing'\r\n    static not_yet_aired = 'Not yet aired'\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Anime, AnimeFranchise} from \"../../../../models\";\r\nimport {getAnimeFranchise} from \"../../../../actions/anime\";\r\nimport {\r\n    Timeline, TimelineConnector,\r\n    TimelineContent,\r\n    TimelineDot,\r\n    TimelineItem,\r\n    TimelineOppositeContent,\r\n    TimelineSeparator\r\n} from \"@material-ui/lab\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {ANIME_STATUSES, BRANCH_ANIME} from \"../../../../globals\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {AnimeStatuses} from \"../../utils\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {\r\n    faArrowAltCircleRight,\r\n    faArrowDown,\r\n    faArrowRight,\r\n    faArrowUp,\r\n    faCalendarAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nfunction getDotClassnames(status) {\r\n    if (status === AnimeStatuses.finished_airing) return 'timeline-dot timeline-dot-primary'\r\n    if (status === AnimeStatuses.not_yet_aired) return 'timeline-dot timeline-dot-gray'\r\n    if (status === AnimeStatuses.currently_airing) return 'timeline-dot timeline-dot-success'\r\n    return 'timeline-dot'\r\n}\r\n\r\n\r\nclass AirOrderTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateOrdering = this.updateOrdering.bind(this)\r\n        this.state = {\r\n            newest_first: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    updateOrdering() {\r\n        this.setState({newest_first: !this.state.newest_first})\r\n    }\r\n\r\n    render() {\r\n        let titles = this.props.anime_franchise[AnimeFranchise.anime_franchise]\r\n        if (titles && titles.length > 0)\r\n            titles = titles.sort((a, b) => new Date(b['air_start']) - new Date(a['air_start']))\r\n\r\n        if (!this.state.newest_first)\r\n            titles = titles.reverse()\r\n\r\n        return this.props.anime_franchise_loading ? <Loading text={'Franchise Loading'}/> :\r\n            <Grid container className=\"air-order-tab\">\r\n                <Grid item xs={12} className=\"ordering-container\">\r\n                    {this.state.newest_first ?\r\n                        <p>Newest <FontAwesomeIcon icon={faArrowRight}/> Oldest</p> :\r\n                        <p>Oldest <FontAwesomeIcon icon={faArrowRight}/> Newest</p>\r\n                    }\r\n                    <CyberButton onClick={this.updateOrdering} variant=\"contained\" classNames=\"ordering-btn btn-contained-primary\" title={'Sort by '}>\r\n                        <FontAwesomeIcon icon={faCalendarAlt}/>{' '}\r\n                        <FontAwesomeIcon icon={this.state.newest_first ? faArrowDown : faArrowUp}/>\r\n                    </CyberButton>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"timeline-container\">\r\n                    <Timeline align=\"alternate\">\r\n                    {titles?.map((title, x) => <TimelineItem key={title[Anime.id]}>\r\n                        <TimelineOppositeContent className={!(x % 2) ? 'right-content timeline-item-container' : 'timeline-item-container'}>\r\n                            <TitleCard\r\n                                branch={BRANCH_ANIME}\r\n                                title={title}\r\n                                user_buttons={true}\r\n                                user_status={!isEmpty(this.props.user_entry_statuses) ?\r\n                                    this.props.user_entry_statuses[`${title[Anime.id]}`] : null}\r\n                            />\r\n                        </TimelineOppositeContent>\r\n                        <TimelineSeparator>\r\n                            <TimelineDot\r\n                                variant={title[Anime.status] === AnimeStatuses.not_yet_aired ? 'outlined' : 'default'}\r\n                                className={getDotClassnames(title[Anime.status])}\r\n                            />\r\n                            {x + 1 < titles.length ? <TimelineConnector/> : null}\r\n                        </TimelineSeparator>\r\n                        <TimelineContent className=\"timeline-date\">\r\n                            <p>{title[Anime.air_start]}</p>\r\n                        </TimelineContent>\r\n                    </TimelineItem>)}\r\n                </Timeline>\r\n                </Grid>\r\n            </Grid>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n    user_entry_statuses: state.users.user_anime_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise})(AirOrderTab)\r\n","import React, {useState} from 'react'\r\n\r\n\r\nfunction getClassFromScore(score) {\r\n    switch (score) {\r\n        case 1:\r\n            return 'score-one-badge'\r\n        case 2:\r\n            return 'score-two-badge'\r\n        case 3:\r\n            return 'score-three-badge'\r\n        case 4:\r\n            return 'score-four-badge'\r\n        case 5:\r\n            return 'score-five-badge'\r\n        case 6:\r\n            return 'score-six-badge'\r\n        case 7:\r\n            return 'score-seven-badge'\r\n        case 8:\r\n            return 'score-eight-badge'\r\n        case 9:\r\n            return 'score-nine-badge'\r\n        case 10:\r\n            return 'score-ten-badge'\r\n        default:\r\n            return 'color-gray'\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.score\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserScoreBadge(props) {\r\n    const classname = getClassFromScore(props.score)\r\n\r\n    return <span className={classname}>\r\n        {props.score === 0 ? '-' : props.score}\r\n    </span>\r\n}","import {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA, BRANCH_PEOPLE,\r\n    store_reducer_users,\r\n    store_reducers, USER_ANIME_STATUSES, USER_MANGA_STATUSES\r\n} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {getAnime} from \"../../actions/anime\";\r\nimport {getManga} from \"../../actions/manga\";\r\nimport {formatBytes, formatContentDateByKnown, isEmpty} from \"../functions\";\r\nimport {\r\n    Anime,\r\n    AnimeOnServer,\r\n    Character,\r\n    Eroge,\r\n    Manga, Person,\r\n    Profile,\r\n    User,\r\n    UserAnimeEntry,\r\n    UserMangaEntry\r\n} from \"../../models\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons/faPlay\";\r\nimport React from \"react\";\r\nimport GeneralTab from \"../anime/display/tabs/GeneralTab\";\r\nimport MangaGeneralTab from \"../manga/display/tabs/GeneralTab\";\r\nimport CharactersGeneralTab from \"../characters/display/tabs/GeneralTab\";\r\nimport PeopleGeneralTab from \"../people/display/tabs/GeneralTab\";\r\nimport ErogeGeneralTab from \"../eroge/display/tabs/GeneralTab\";\r\nimport CharactersTab from \"../anime/display/tabs/CharactersTab\";\r\nimport MangaCharactersTab from \"../manga/display/tabs/CharactersTab\";\r\nimport MangaRelationsTab from \"../manga/display/tabs/RelationsTab\";\r\nimport ServerTab from \"../anime/display/tabs/ServerTab\";\r\nimport {\r\n    faBookOpen,\r\n    faCodeBranch,\r\n    faDownload, faEdit,\r\n    faHistory,\r\n    faInfo, faLevelDownAlt, faMinusSquare,\r\n    faServer,\r\n    faSitemap, faSyncAlt, faUserCog,\r\n    faUserFriends\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {getCharacter} from \"../../actions/characters\";\r\nimport {getEroge} from \"../../actions/eroge\";\r\nimport Moment from \"react-moment\";\r\nimport {\r\n    addToFavorites,\r\n    getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses,\r\n    getUserAnimeEntry,\r\n    getUserMangaEntry,\r\n    removeFromFavorites\r\n} from \"../../actions/users\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AnimeEntryModalForm from \"../user/forms/anime/AnimeEntryModalForm\";\r\nimport {faPlus, faPlusSquare, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\nimport UpdateAnimeEpisodeButton from \"../user/forms/anime/UpdateAnimeEpisodeButton\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport AnimeEpisodeHistoryModal from \"../user/forms/anime/AnimeEpisodeHistoryModal\";\r\nimport MangaEntryModalForm from \"../user/forms/manga/MangaEntryModalForm\";\r\nimport {\r\n    UpdateMangaVolumeButton,\r\n    UpdateMangaChapterButton\r\n} from \"../user/forms/manga/UpdateMangaVolumeChapterButtons\";\r\nimport MangaVolumeChapterHistoryModal from \"../user/forms/manga/MangaVolumeChapterHistoryModal\";\r\nimport RelationsTab from \"../anime/display/tabs/RelationsTab\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {element} from \"prop-types\";\r\nimport {\r\n    ADMIN_EDIT_ANIME,\r\n    ADMIN_EDIT_CHARACTER,\r\n    ADMIN_EDIT_EROGE,\r\n    ADMIN_EDIT_MANGA, ADMIN_EDIT_PERSON,\r\n    ANIME_FRANCHISE_DISPLAY\r\n} from \"../../urls\";\r\nimport FranchiseTab from \"../anime/display/tabs/FranchiseTab\";\r\nimport {getTorrentProgress, scrapeUpdateTitle} from \"../../actions/requiem\";\r\nimport DownloadTorrentModalForm from \"../requiem/forms/DownloadTorrentModalForm\";\r\nimport {TorrentProgressInfo} from \"../requiem/snippets/snippets\";\r\nimport DisplayTorrentProgress from \"../requiem/snippets/DisplayTorrentProgress\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport EditAnimeOnServerModalForm from \"../requiem/forms/EditAnimeOnServerModalForm\";\r\nimport {AddAnimeEntryInstantDropButton, AddMangaEntryInstantDropButton} from \"../user/forms/shortForms\";\r\nimport {getPerson} from \"../../actions/people\";\r\nimport VoiceActorRolesTab from \"../people/display/tabs/VoiceActorRolesTab\";\r\nimport AnimeStaffPositionsTab from \"../people/display/tabs/AnimeStaffPositionsTab\";\r\nimport PublishedMangaTab from \"../people/display/tabs/PublishedMangaTab\";\r\nimport AirOrderTab from \"../anime/display/tabs/AirOrderTab\";\r\nimport {AnimeOnServerModalForm} from \"../requiem/forms/forms\";\r\nimport {GET_ANIME} from \"../../actions/types\";\r\nimport {UserScoreBadge} from \"../user/forms/snippets\";\r\n\r\n\r\nexport function UserAnimeEntryStatus(props) {\r\n    const {classNames, entry} = props;\r\n    let status_classname = 'chip-primary';\r\n\r\n    switch (entry[UserAnimeEntry.status]) {\r\n        case USER_ANIME_STATUSES.watching:\r\n            status_classname = 'chip-success';\r\n            break;\r\n        case USER_ANIME_STATUSES.on_hold:\r\n            status_classname = 'chip-warning';\r\n            break;\r\n        case USER_ANIME_STATUSES.dropped:\r\n            status_classname = 'chip-danger';\r\n            break;\r\n        case USER_ANIME_STATUSES.plan_to_watch:\r\n            status_classname = 'chip-default';\r\n            break;\r\n    }\r\n\r\n    return <Grid container className=\"summery-container box-light\">\r\n        <Grid item xs={2}>\r\n            <p>My Status</p>\r\n            <p><Chip className={status_classname} label={entry[UserAnimeEntry.status]}/></p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Progress</p>\r\n            <p>{entry[UserAnimeEntry.watched_episodes]}\r\n                {entry[UserAnimeEntry.status] !== USER_ANIME_STATUSES.completed ?\r\n                    <UpdateAnimeEpisodeButton id={entry[UserAnimeEntry.anime][UserAnimeEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Score</p>\r\n            <p><UserScoreBadge score={entry[UserAnimeEntry.score]}/></p>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n            <p>Started Watching</p>\r\n            <p>{entry[UserAnimeEntry.start_date] ?\r\n                <Moment date={entry[UserAnimeEntry.start_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n            <p>Finished Watching</p>\r\n            <p>{entry[UserAnimeEntry.finish_date] ?\r\n                <Moment date={entry[UserAnimeEntry.finish_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport function UserMangaEntryStatus(props) {\r\n    const {classNames, entry} = props;\r\n    let status_classname = 'chip-primary';\r\n\r\n    switch (entry[UserAnimeEntry.status]) {\r\n        case USER_MANGA_STATUSES.reading:\r\n            status_classname = 'chip-success';\r\n            break;\r\n        case USER_MANGA_STATUSES.on_hold:\r\n            status_classname = 'chip-warning';\r\n            break;\r\n        case USER_MANGA_STATUSES.dropped:\r\n            status_classname = 'chip-danger';\r\n            break;\r\n        case USER_MANGA_STATUSES.plan_to_read:\r\n            status_classname = 'chip-default';\r\n            break;\r\n    }\r\n\r\n    return <Grid container className=\"summery-container box-light\">\r\n        <Grid item xs={2}>\r\n            <p>My Status</p>\r\n            <p><Chip className={status_classname} label={entry[UserMangaEntry.status]}/></p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Volumes</p>\r\n            <p>{entry[UserMangaEntry.read_volumes]}\r\n                {entry[UserMangaEntry.status] !== USER_MANGA_STATUSES.completed ?\r\n                    <UpdateMangaVolumeButton id={entry[UserMangaEntry.manga][UserMangaEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Chapters</p>\r\n            <p>{entry[UserMangaEntry.read_chapters]}\r\n                {entry[UserMangaEntry.status] !== USER_MANGA_STATUSES.completed ?\r\n                    <UpdateMangaChapterButton id={entry[UserMangaEntry.manga][UserMangaEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Score</p>\r\n            <p>{entry[UserMangaEntry.score] === 0 ?\r\n                <span className=\"color-gray\">0</span> : entry[UserMangaEntry.score]}</p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>Started Reading</p>\r\n            <p>{entry[UserMangaEntry.start_date] ?\r\n                <Moment date={entry[UserMangaEntry.start_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>Finished Reading</p>\r\n            <p>{entry[UserMangaEntry.finish_date] ?\r\n                <Moment date={entry[UserMangaEntry.finish_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport function getTitle(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(getAnime(id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(getManga(id));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            store.dispatch(getCharacter(id));\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(getEroge(id));\r\n            return;\r\n        case BRANCH_PEOPLE:\r\n            store.dispatch(getPerson(id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getUserTitleStatus(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(getUserAnimeEntry(id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(getUserMangaEntry(id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport function getUserTitleStatusSummary(branch, entry) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <UserAnimeEntryStatus entry={entry}/>;\r\n        case BRANCH_MANGA:\r\n            return <UserMangaEntryStatus entry={entry}/>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\nfunction checkFavorites(favoriteTitles, currentTitleId) {\r\n    if (favoriteTitles.length <= 0) return false;\r\n    else\r\n        for (let x = 0; x < favoriteTitles.length; x++) {\r\n            if (favoriteTitles[x]['id'] === currentTitleId) return true;\r\n        }\r\n    return false\r\n}\r\n\r\n\r\nexport function isTitleInFavorites(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            let favorite_anime = store.getState().auth.user[User.profile][Profile.favorite_anime];\r\n            return checkFavorites(favorite_anime, parseInt(id));\r\n        case BRANCH_MANGA:\r\n            let favorite_manga = store.getState().auth.user[User.profile][Profile.favorite_manga];\r\n            return checkFavorites(favorite_manga, parseInt(id));\r\n        case BRANCH_CHARACTERS:\r\n            let favorite_characters = store.getState().auth.user[User.profile][Profile.favorite_characters];\r\n            return checkFavorites(favorite_characters, parseInt(id));\r\n        case BRANCH_PEOPLE:\r\n            let favorite_people = store.getState().auth.user[User.profile][Profile.favorite_people];\r\n            return checkFavorites(favorite_people, parseInt(id));\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.entry {Object} Entry of the user\r\n * @param props.title {String} Title\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserModalForms(props) {\r\n    const {branch, id, entry, title} = props;\r\n    const in_favorites = isTitleInFavorites(branch, id);\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <>\r\n                <AnimeEntryModalForm\r\n                    id={id} title={title}\r\n                    user_anime_entry={entry}/>\r\n                {isEmpty(entry) ? <AddAnimeEntryInstantDropButton anime_id={parseInt(id)}/> : null}\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n                <CyberButton disabled={true} variant=\"outlined\" color=\"primary\">\r\n                    <FontAwesomeIcon icon={faPlusSquare}/>\r\n                </CyberButton>\r\n                <AnimeEpisodeHistoryModal title={title} entry={entry}/>\r\n            </>;\r\n        case BRANCH_MANGA:\r\n            return <>\r\n                <MangaEntryModalForm\r\n                    id={id} title={title}\r\n                    user_manga_entry={entry}/>\r\n                {isEmpty(entry) ? <AddMangaEntryInstantDropButton manga_id={parseInt(id)}/> : null}\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n                <CyberButton disabled={true} variant=\"outlined\" color=\"primary\">\r\n                    <FontAwesomeIcon icon={faPlusSquare}/>\r\n                </CyberButton>\r\n                <MangaVolumeChapterHistoryModal title={title} entry={entry}/>\r\n            </>;\r\n        case BRANCH_CHARACTERS:\r\n            return <>\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_PEOPLE:\r\n            return <>\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n            </>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.entry {Object} Entry of the user\r\n * @param props.title {String} Title\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AdminModalForms(props) {\r\n    const {branch, id, entry, title} = props;\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <>\r\n                <a href={ADMIN_EDIT_ANIME(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n                {isEmpty(title[Anime.anime_on_server]) ? <>\r\n                    <DownloadTorrentModalForm classNames=\"download-torrent-btn\"/>\r\n                    <AnimeOnServerModalForm\r\n                        id={title[Anime.id]} classNames=\"download-torrent-btn\" alternative_callback={GET_ANIME}/>\r\n                    </>\r\n                    : null}\r\n            </>;\r\n        case BRANCH_MANGA:\r\n            return <>\r\n                <a href={ADMIN_EDIT_MANGA(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_CHARACTERS:\r\n            return <>\r\n                <a href={ADMIN_EDIT_CHARACTER(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_EROGE:\r\n            return <>\r\n                <a href={ADMIN_EDIT_EROGE(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_PEOPLE:\r\n            return <>\r\n                <a href={ADMIN_EDIT_PERSON(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function formatTitle(branch, title, superuser) {\r\n    let display_title = {\r\n        id: 0,\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: null,\r\n        title_1: null,\r\n        title_2: null,\r\n        title_3: null,\r\n        info_set: null,\r\n        db_info_set: null,\r\n        users_info_set: null,\r\n        primary_set: null,\r\n        primary_set_wide: null,\r\n        secondary_set: null,\r\n        tabs: null\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            display_title.id = title[Anime.id];\r\n            display_title.cover_images = title[Anime.anime_cover_images] ? title[Anime.anime_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Anime.anime_cdn_cover_images] ? title[Anime.anime_cdn_cover_images] : [];\r\n            display_title.title = title[Anime.title];\r\n            display_title.title_1 = {label: 'English', title: title[Anime.title_english]};\r\n            display_title.title_2 = {label: 'Synonyms', title: title[Anime.title_synonyms]};\r\n            display_title.title_3 = {label: 'Japanese', title: title[Anime.title_japanese]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Anime.mal_link]}>MAL</a>},\r\n                {label: 'Aired', info: title[Anime.aired_string]},\r\n                {label: 'Premiered', info: title[Anime.premiered]},\r\n                {label: 'Broadcast', info: title[Anime.broadcast]},\r\n                {label: 'Producer', info: title[Anime.producer]},\r\n                {label: 'Licensor', info: title[Anime.licensor]},\r\n                {label: 'Studio', info: title[Anime.studio]},\r\n                {label: 'Source', info: title[Anime.source]},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Anime.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Anime.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Anime.score]},\r\n                {label: 'Scored by', info: title[Anime.scored_by]},\r\n                {label: 'Rank', info: title[Anime.rank]},\r\n                {label: 'Popularity', info: title[Anime.popularity]},\r\n                {label: 'Members', info: title[Anime.members]},\r\n                {label: 'Favorites', info: title[Anime.favorites]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Status', info: title[Anime.status]},\r\n                {label: 'Type', info: title[Anime.type]},\r\n                {label: 'Episodes', info: title[Anime.episodes] ? title[Anime.episodes] : '?'},\r\n                {\r\n                    label: 'Duration',\r\n                    info: title[Anime.minutes_per_episode] ? `${title[Anime.minutes_per_episode]}m per ep` : '?'\r\n                },\r\n                {label: 'Rating', info: title[Anime.rating_short]},\r\n                {\r\n                    label: 'Aired',\r\n                    info: formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true)\r\n                },\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <GeneralTab/>\r\n                },\r\n                {\r\n                    disabled: title[Anime.main_characters].length === 0,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Characters</p>,\r\n                    tab: <CharactersTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.anime_relations],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faCodeBranch}/> Relations</p>,\r\n                    tab: <RelationsTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.franchise],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faSitemap}/> Franchise</p>,\r\n                    tab: <FranchiseTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.franchise],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faSitemap}/> Aired</p>,\r\n                    tab: <AirOrderTab/>\r\n                },\r\n            ];\r\n\r\n            if (display_title.primary_set && title[Anime.genres_csv]) {\r\n                const genres = title[Anime.genres_csv].split(', ');\r\n                let info = [];\r\n                genres.forEach(genre => {\r\n                    info.push(<span className=\"genre-spacing\">{genre}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Genres', info: info},\r\n                ];\r\n            }\r\n            if (title[Anime.anime_on_server]) {\r\n                if (title[Anime.anime_on_server][AnimeOnServer.downloading]) {\r\n                    if (superuser)\r\n                        display_title.secondary_set = [{\r\n                            label: null, info: <DisplayTorrentProgress id={title[Anime.id]}/>\r\n                        }];\r\n                    else\r\n                        display_title.secondary_set = [{\r\n                            label: 'Currently Downloading', info: <CircularProgress color=\"secondary\"/>\r\n                        }];\r\n                } else\r\n                    display_title.secondary_set = [\r\n                        {label: 'Size', info: `${title[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB]}GB`},\r\n                        {label: 'Quality', info: title[Anime.anime_on_server][AnimeOnServer.video_quality]},\r\n                        {label: 'Channel', info: title[Anime.anime_on_server][AnimeOnServer.audio_channel]},\r\n                        {\r\n                            label: 'Japanese Dub',\r\n                            info: title[Anime.anime_on_server][AnimeOnServer.japanese_dub] ? 'Yes' : 'No'\r\n                        },\r\n                        {\r\n                            label: 'English  Sub',\r\n                            info: title[Anime.anime_on_server][AnimeOnServer.english_sub] ? 'Yes' : 'No'\r\n                        },\r\n                        {\r\n                            label: null,\r\n                            info: <CyberButton variant=\"outlined\" color=\"secondary\"><FontAwesomeIcon\r\n                                icon={faPlay}/></CyberButton>\r\n                        },\r\n                    ];\r\n                    display_title.tabs.push({\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon color-secondary\"><FontAwesomeIcon icon={faServer}/> Server</p>,\r\n                    tab: <ServerTab/>\r\n                });\r\n            }\r\n            return display_title;\r\n        case BRANCH_MANGA:\r\n            display_title.id = title[Manga.id];\r\n            display_title.cover_images = title[Manga.manga_cover_images];\r\n            display_title.cdn_cover_images = title[Manga.manga_cdn_cover_images] ? title[Manga.manga_cdn_cover_images] : [];\r\n            display_title.title = title[Manga.title];\r\n            display_title.title_1 = {label: 'English', title: title[Manga.title_english]};\r\n            display_title.title_2 = {label: 'Synonyms', title: title[Manga.title_synonyms]};\r\n            display_title.title_3 = {label: 'Japanese', title: title[Manga.title_japanese]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Manga.mal_link]}>MAL</a>},\r\n                {label: 'Published', info: title[Manga.published_string]},\r\n                {label: 'Authors', info: title[Manga.authors]},\r\n                {label: 'Serialization', info: title[Manga.serialization]},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Manga.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Manga.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Manga.score]},\r\n                {label: 'Scored by', info: title[Manga.scored_by]},\r\n                {label: 'Rank', info: title[Manga.rank]},\r\n                {label: 'Popularity', info: title[Manga.popularity]},\r\n                {label: 'Members', info: title[Manga.members]},\r\n                {label: 'Favorites', info: title[Manga.favorites]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Status', info: title[Manga.status]},\r\n                {label: 'Type', info: title[Manga.type]},\r\n                {label: 'Volumes', info: title[Manga.volumes] ? title[Manga.volumes] : '?'},\r\n                {label: 'Chapters', info: title[Manga.chapters] ? title[Manga.chapters] : '?'},\r\n                {\r\n                    label: 'Published',\r\n                    info: formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true)\r\n                },\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <MangaGeneralTab/>\r\n                },\r\n                {\r\n                    disabled: title[Manga.main_characters].length === 0,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Characters</p>,\r\n                    tab: <MangaCharactersTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Manga.manga_relations],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faCodeBranch}/> Relations</p>,\r\n                    tab: <MangaRelationsTab/>\r\n                },\r\n            ];\r\n            if (display_title.primary_set && title[Manga.genres_csv]) {\r\n                const genres = title[Manga.genres_csv].split(', ');\r\n                let info = [];\r\n                genres.forEach(genre => {\r\n                    info.push(<span className=\"genre-spacing\">{genre}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Genres', info: info},\r\n                ];\r\n            }\r\n            return display_title;\r\n        case BRANCH_CHARACTERS:\r\n            display_title.id = title[Character.id];\r\n            display_title.cover_images = title[Character.character_cover_images] ? title[Character.character_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Character.character_cdn_cover_images] ? title[Character.character_cdn_cover_images] : [];\r\n            display_title.title = title[Character.short_name] ? title[Character.short_name] : title[Character.character_name];\r\n            display_title.title_1 = {label: 'Full Name', title: title[Character.character_name]};\r\n            display_title.title_2 = {label: 'Nickname', title: title[Character.nickname]};\r\n            display_title.title_3 = {label: 'Name', title: title[Character.short_name]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Character.mal_link]}>MAL</a>},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Character.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Character.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Favorites', info: title[Character.favorites]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <CharactersGeneralTab/>\r\n                },\r\n            ];\r\n            return display_title;\r\n        case BRANCH_EROGE:\r\n            display_title.id = title[Eroge.id];\r\n            if (title[Eroge.eroge_cover_images])\r\n                display_title.cover_images = title[Eroge.eroge_cover_images];\r\n            display_title.title = title[Eroge.eroge_name];\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Eroge.game_url]}>HG</a>},\r\n                {\r\n                    label: 'External download',\r\n                    info: <a href={title[Eroge.game_url]}><FontAwesomeIcon icon={faDownload}/></a>\r\n                },\r\n            ];\r\n            display_title.db_info_set = [\r\n                {label: 'Last Modified', info: <Moment date={title[Eroge.date_last_modified]} format={'Do MMM YYYY'}/>},\r\n                {label: 'Added on', info: <Moment date={title[Eroge.date_added]} format={'Do MMM YYYY'}/>},\r\n                {label: 'Last Updated', info: <Moment date={title[Eroge.date_updated]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Eroge.rating]},\r\n                {label: 'Scored by', info: title[Eroge.rated_by]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Size', info: formatBytes(title[Eroge.size])},\r\n                {label: 'Type', info: title[Eroge.type]},\r\n                {label: 'Censorship', info: title[Eroge.censorship]},\r\n                {label: 'Language', info: title[Eroge.language]},\r\n                {label: 'Platforms', info: title[Eroge.platforms]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <ErogeGeneralTab/>\r\n                },\r\n            ];\r\n            if (display_title.primary_set && title[Eroge.tags]) {\r\n                const tags = title[Eroge.tags].split(', ');\r\n                let info = [];\r\n                tags.forEach(tag => {\r\n                    info.push(<span className=\"genre-spacing\">{tag}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Tags', info: info},\r\n                ];\r\n            }\r\n            return display_title;\r\n        case BRANCH_PEOPLE:\r\n            display_title.id = title[Person.id];\r\n            display_title.cover_images = title[Person.person_cover_images] ? title[Person.person_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Person.person_cdn_cover_images] ? title[Person.person_cdn_cover_images] : [];\r\n            display_title.title = title[Person.person_name];\r\n            display_title.title_1 = {label: 'Family Name', title: title[Person.family_name]};\r\n            display_title.title_2 = {label: 'Given Name', title: title[Person.given_name]};\r\n            display_title.title_3 = {label: 'Other Names', title: title[Person.alternative_names]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Person.mal_link]}>MAL</a>},\r\n                {label: 'Birthday', info: title[Person.birthday] ?\r\n                        <Moment date={title[Person.birthday]} format={'Do MMM YYYY'}/> :\r\n                        <span className=\"color-gray\">---</span>},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Person.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Person.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Favorites', info: title[Person.favorites]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <PeopleGeneralTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.has_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Character Roles</p>,\r\n                    tab: <VoiceActorRolesTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.anime_staff_positions_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserCog}/> Anime Staff</p>,\r\n                    tab: <AnimeStaffPositionsTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.published_manga_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faBookOpen}/> Published Manga</p>,\r\n                    tab: <PublishedMangaTab/>\r\n                },\r\n            ];\r\n            return display_title;\r\n        default:\r\n            return display_title\r\n    }\r\n}\r\n","import {Form, Formik} from \"formik\";\r\nimport store from \"../../../../store\";\r\nimport {\r\n    addAnimeEntry,\r\n    addToFavorites,\r\n    deleteAnimeEntry,\r\n    removeFromFavorites,\r\n    updateAnimeEntry\r\n} from \"../../../../actions/users\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport 'date-fns';\r\nimport {KeyboardDateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faStar as faStarSolid, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport React from \"react\";\r\nimport {UserAnimeEntry} from \"../../../../models\";\r\nimport {BRANCH_ANIME, USER_ANIME_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {isTitleInFavorites} from \"../../../display/functions\";\r\nimport {AddRemoveFromFavorites} from \"../shortForms\";\r\n\r\n\r\n\r\nconst FIELD_NAMES = {\r\n    watched_episodes: UserAnimeEntry.watched_episodes,\r\n    start_date: UserAnimeEntry.start_date,\r\n    finish_date: UserAnimeEntry.finish_date,\r\n    score: UserAnimeEntry.score,\r\n    status: UserAnimeEntry.status,\r\n    times_watched: UserAnimeEntry.times_watched,\r\n    comments: UserAnimeEntry.comments,\r\n    tags: UserAnimeEntry.tags,\r\n    priority: UserAnimeEntry.priority,\r\n    rewatching: UserAnimeEntry.rewatching,\r\n    rewatching_episode: UserAnimeEntry.rewatching_episode,\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} anime_id\r\n * @param {Object} user_anime_entry\r\n * @param {boolean} edit - *Optional\r\n * @returns {{comments: string, times_watched: number, rewatching_episode: number, priority: string, tags: string, score: number, watched_episodes: number, rewatching: boolean, finish_date: string, anime: *, errors: boolean, start_date: string, status: string}}\r\n */\r\nexport function getUserAnimeEntryFormInitialValues(anime_id, user_anime_entry, edit = false) {\r\n    let initial_values = {\r\n        anime: anime_id,\r\n        watched_episodes: 0,\r\n        start_date: '',\r\n        finish_date: '',\r\n        score: 0,\r\n        status: USER_ANIME_STATUSES.plan_to_watch,\r\n        times_watched: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rewatching: false,\r\n        rewatching_episode: 0,\r\n        errors: false\r\n    };\r\n\r\n    if (edit && !isEmpty(user_anime_entry))\r\n        initial_values = {\r\n            anime: anime_id,\r\n            watched_episodes: user_anime_entry[UserAnimeEntry.watched_episodes],\r\n            start_date: user_anime_entry[UserAnimeEntry.start_date],\r\n            finish_date: user_anime_entry[UserAnimeEntry.finish_date],\r\n            score: user_anime_entry[UserAnimeEntry.score],\r\n            status: user_anime_entry[UserAnimeEntry.status],\r\n            times_watched: user_anime_entry[UserAnimeEntry.times_watched],\r\n            comments: user_anime_entry[UserAnimeEntry.comments],\r\n            tags: user_anime_entry[UserAnimeEntry.tags],\r\n            priority: user_anime_entry[UserAnimeEntry.priority],\r\n            rewatching: user_anime_entry[UserAnimeEntry.rewatching],\r\n            rewatching_episode: user_anime_entry[UserAnimeEntry.rewatching_episode]\r\n        };\r\n\r\n    return initial_values\r\n}\r\n\r\n\r\nfunction deleteEntry(id, list) {\r\n    if (window.confirm('Are you sure? This will also delete any episode history of this anime.'))\r\n        store.dispatch(deleteAnimeEntry(id, list));\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.initial_values\r\n * @param {boolean} props.edit\r\n * @param {int} props.id\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserAnimeEntryForm(props) {\r\n    const {initial_values, edit, id, list, handleClose} = props;\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}><Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            if (values.start_date === '') values.start_date = null;\r\n            if (values.finish_date === '') values.finish_date = null;\r\n            values[FIELD_NAMES.times_watched] = parseInt(values[FIELD_NAMES.times_watched]);\r\n            if (isNaN(values[FIELD_NAMES.times_watched])) values[FIELD_NAMES.times_watched] = 0;\r\n            values[FIELD_NAMES.watched_episodes] = parseInt(values[FIELD_NAMES.watched_episodes]);\r\n            if (isNaN(values[FIELD_NAMES.watched_episodes])) values[FIELD_NAMES.watched_episodes] = 0;\r\n            values.score = parseInt(values.score);\r\n\r\n            if (edit) store.dispatch(updateAnimeEntry(id, values, list));\r\n            else store.dispatch(addAnimeEntry(values));\r\n\r\n            setSubmitting(false);\r\n        }}>\r\n        {({\r\n              isSubmitting, values, handleChange,\r\n              handleBlur, setValues\r\n          }) => (\r\n            <Form id=\"User-Title-Entry-Form\">\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-status\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-status\"\r\n                            className=\"form-control\"\r\n                            label=\"Status\"\r\n                            value={values[FIELD_NAMES.status]}\r\n                            name={FIELD_NAMES.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"Watching\">Watching</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                            <MenuItem value=\"On Hold\">On Hold</MenuItem>\r\n                            <MenuItem value=\"Dropped\">Dropped</MenuItem>\r\n                            <MenuItem value=\"Plan to Watch\">Plan to Watch</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-value\">Priority</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-value\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.priority]}\r\n                            name={FIELD_NAMES.priority}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"4\">VERY HIGH</MenuItem>\r\n                            <MenuItem value=\"3\">HIGH</MenuItem>\r\n                            <MenuItem value=\"2\">MEDIUM</MenuItem>\r\n                            <MenuItem value=\"1\">LOW</MenuItem>\r\n                            <MenuItem value=\"0\">VERY LOW</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Episode\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.watched_episodes}\r\n                            value={values[FIELD_NAMES.watched_episodes]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4} md={2}>\r\n                        <div className=\"form-group text-right\">\r\n                            <Checkbox\r\n                                value={values[FIELD_NAMES.rewatching]}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                name={FIELD_NAMES.rewatching}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={4}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Rewatch Episode\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rewatching_episode}\r\n                            value={values[FIELD_NAMES.rewatching_episode]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rewatching]}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-score\">Score</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-score\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.score]}\r\n                            name={FIELD_NAMES.score}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"0\">0</MenuItem>\r\n                            <MenuItem value=\"1\">1</MenuItem>\r\n                            <MenuItem value=\"2\">2</MenuItem>\r\n                            <MenuItem value=\"3\">3</MenuItem>\r\n                            <MenuItem value=\"4\">4</MenuItem>\r\n                            <MenuItem value=\"5\">5</MenuItem>\r\n                            <MenuItem value=\"6\">6</MenuItem>\r\n                            <MenuItem value=\"7\">7</MenuItem>\r\n                            <MenuItem value=\"8\">8</MenuItem>\r\n                            <MenuItem value=\"9\">9</MenuItem>\r\n                            <MenuItem value=\"10\">10</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start date\"\r\n                            value={values[FIELD_NAMES.start_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.start_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Times watched\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.times_watched}\r\n                            value={values[FIELD_NAMES.times_watched]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Finish date\"\r\n                            value={values[FIELD_NAMES.finish_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.finish_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Comments\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.comments]}\r\n                            name={FIELD_NAMES.comments}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Tags\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.tags]}\r\n                            name={FIELD_NAMES.tags}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <DialogActions>\r\n                    <AddRemoveFromFavorites branch={BRANCH_ANIME} id={parseInt(id)}/>\r\n                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\" onClick={handleClose}\r\n                                 disabled={isSubmitting}><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                    {edit ? <CyberButton classNames=\"btn-danger\" variant=\"outlined\" onClick={(e) => {\r\n                        deleteEntry(id, list);\r\n                        handleClose()\r\n                    }}><FontAwesomeIcon icon={faTrash}/></CyberButton> : null}\r\n                </DialogActions>\r\n            </Form>\r\n        )}\r\n    </Formik></MuiPickersUtilsProvider>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport {Anime, Manga} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {getUserAnimeEntry, getUserMangaEntry} from \"../../../actions/users\";\r\nimport {getUserAnimeEntryFormInitialValues, UserAnimeEntryForm} from \"../../user/forms/anime/forms\";\r\nimport {AddAnimeEntryInstantDropButton, AddMangaEntryInstantDropButton} from \"../../user/forms/shortForms\";\r\nimport {getUserMangaEntryFormInitialValues, UserMangaEntryForm} from \"../../user/forms/manga/forms\";\r\n\r\n\r\nfunction getTitleNameFromTitle(branch, title) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return title[Anime.title];\r\n        case BRANCH_MANGA:\r\n            return title[Manga.title];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.anime_id\r\n * @param {Object} props.user_anime_entry\r\n * @param {boolean} props.edit\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction QuickUserAnimeEntryForm(props) {\r\n    const {anime_id, user_anime_entry, edit, handleClose} = props;\r\n    const initial_values = getUserAnimeEntryFormInitialValues(anime_id, user_anime_entry, edit);\r\n    return <UserAnimeEntryForm initial_values={initial_values} id={anime_id} edit={edit} handleClose={handleClose}/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.manga_id\r\n * @param {Object} props.user_manga_entry\r\n * @param {boolean} props.edit\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction QuickUserMangaEntryForm(props) {\r\n    const {manga_id, user_manga_entry, edit, handleClose} = props;\r\n    const initial_values = getUserMangaEntryFormInitialValues(manga_id, user_manga_entry, edit);\r\n    return <UserMangaEntryForm initial_values={initial_values} id={manga_id} edit={edit} handleClose={handleClose}/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.title_id\r\n * @param {String} props.branch\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction InstantDropTitleButton(props) {\r\n    const {title_id, branch} = props;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AddAnimeEntryInstantDropButton\r\n                classNames=\"drop-button btn-contained-danger-dh\" variant={'contained'} anime_id={title_id}/>;\r\n        case BRANCH_MANGA:\r\n            return <AddMangaEntryInstantDropButton\r\n                classNames=\"drop-button btn-contained-danger-dh\" variant={'contained'} manga_id={title_id}/>;\r\n        default:\r\n            return null;\r\n    }\r\n\r\n}\r\n\r\n\r\nclass CardUserEditTitleEntry extends Component {\r\n    static propTypes = {\r\n        /** Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Id */\r\n        id: PropTypes.number.isRequired,\r\n        /** Title Object */\r\n        title: PropTypes.object.isRequired,\r\n        /** Status of the user for this title (Completed, Dropped, etc) */\r\n        user_status: PropTypes.string,\r\n        /** Hide the user buttons from the Title Card */\r\n        hideUserButtons: PropTypes.func,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.getUserTitleEntry = this.getUserTitleEntry.bind(this);\r\n        this.getQuickUserTitleEntryForm = this.getQuickUserTitleEntryForm.bind(this);\r\n        this.state = {open: false};\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({open: false});\r\n        if (this.props.hideUserButtons)\r\n            this.props.hideUserButtons();\r\n    };\r\n\r\n    getUserTitleEntry() {\r\n        this.setState({open: true});\r\n        switch (this.props.branch) {\r\n            case BRANCH_ANIME:\r\n                this.props.getUserAnimeEntry(this.props.id);\r\n                return;\r\n            case BRANCH_MANGA:\r\n                this.props.getUserMangaEntry(this.props.id);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    getQuickUserTitleEntryForm(edit) {\r\n        switch (this.props.branch) {\r\n            case BRANCH_ANIME:\r\n                return <QuickUserAnimeEntryForm\r\n                    anime_id={this.props.id}\r\n                    user_anime_entry={this.props.user_anime_entry}\r\n                    edit={edit}\r\n                    handleClose={this.handleClose}\r\n                />;\r\n            case BRANCH_MANGA:\r\n                return <QuickUserMangaEntryForm\r\n                    manga_id={this.props.id}\r\n                    user_manga_entry={this.props.user_manga_entry}\r\n                    edit={edit}\r\n                    handleClose={this.handleClose}\r\n                />;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let edit = !!this.props.user_status;\r\n        const add_button_title = edit ? 'Edit entry' : 'Add to list';\r\n\r\n        return <>\r\n            {this.props.entry_loading ?\r\n                <div className=\"user-buttons-loading\"><CircularProgress thickness={6} size={30}/></div> : <>\r\n                    <CyberButton classNames=\"add-button btn-contained-primary-dh\" color={'primary'}\r\n                                 variant={'contained'} title={add_button_title} onClick={this.getUserTitleEntry}>\r\n                        <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                    </CyberButton>\r\n                    {!edit ? <InstantDropTitleButton branch={this.props.branch} title_id={this.props.id}/> : null}\r\n                </>}\r\n\r\n            <Dialog open={this.state.open} onClose={this.handleClose}\r\n                    aria-labelledby=\"form-dialog-title\" className=\"user-title-entry-dialog\">\r\n                {!this.props.entry_loading ?\r\n                    <DialogTitle>\r\n                        {edit ? 'Edit' : 'Add'} {getTitleNameFromTitle(this.props.branch, this.props.title)}\r\n                    </DialogTitle> : null}\r\n                <DialogContent>\r\n                    {this.props.entry_loading ? <CircularProgress/> : this.getQuickUserTitleEntryForm(edit)}\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_entry: state.users.user_anime_entry,\r\n    user_manga_entry: state.users.user_manga_entry,\r\n    entry_loading: state.users.entry_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUserAnimeEntry, getUserMangaEntry})(CardUserEditTitleEntry)\r\n","import React from \"react\";\r\n\r\nimport {faServer} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA, BRANCH_PEOPLE,\r\n    USER_ANIME_STATUSES,\r\n    USER_MANGA_STATUSES\r\n} from \"../../../globals\";\r\nimport {\r\n    ANIME_DISPLAY,\r\n    CHARACTERS_DISPLAY,\r\n    EROGE_DISPLAY,\r\n    MANGA_DISPLAY,\r\n    PERSON_DISPLAY\r\n} from \"../../../urls\";\r\nimport {\r\n    Anime,\r\n    Character,\r\n    Eroge,\r\n    Manga,\r\n    ANIME_SHORT_STATUS,\r\n    MANGA_SHORT_STATUS,\r\n    Person,\r\n    UserAnimeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema,\r\n    UserErogeDisplaySettingsSchema\r\n} from \"../../../models\";\r\nimport {formatContentDateByKnown, isEmpty} from \"../../functions\";\r\nimport {FilterSchema} from \"../filters/field_names\";\r\nimport CardUserEditTitleEntry from \"./CardUserEditTitleEntry\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nexport function getUserStatusChip(user_status) {\r\n    switch (user_status) {\r\n        case USER_ANIME_STATUSES.completed:\r\n            return {label: user_status, color: 'primary'};\r\n        case USER_ANIME_STATUSES.watching:\r\n            return {label: user_status, color: 'success'};\r\n        case USER_MANGA_STATUSES.reading:\r\n            return {label: user_status, color: 'success'};\r\n        case USER_ANIME_STATUSES.on_hold:\r\n            return {label: user_status, color: 'warning'};\r\n        case USER_ANIME_STATUSES.dropped:\r\n            return {label: user_status, color: 'danger'};\r\n        case USER_ANIME_STATUSES.plan_to_watch:\r\n            return {label: user_status, color: 'default'};\r\n        case USER_MANGA_STATUSES.plan_to_read:\r\n            return {label: user_status, color: 'default'};\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.title {String} Title\r\n * @param props.user_status {String} Status of the user for this anime (Completed, Dropped, etc)\r\n * @param props.hideUserButtons {Function} Function for running on close of the dialog\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserCardButtons(props) {\r\n    const {branch, id, title, user_status, hideUserButtons} = props;\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <CardUserEditTitleEntry id={id} branch={BRANCH_ANIME} title={title} user_status={user_status}\r\n                                           hideUserButtons={hideUserButtons}/>;\r\n        case BRANCH_MANGA:\r\n            return <CardUserEditTitleEntry id={id} branch={BRANCH_MANGA} title={title} user_status={user_status}\r\n                                           hideUserButtons={hideUserButtons}/>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\nexport function formatTitle(branch, title, user_status_param, design_settings = null) {\r\n    let user_status = user_status_param;\r\n    let start_date = '';\r\n    let end_date = '';\r\n    let card_title = {\r\n        id: 0,\r\n        link: '',\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: '',\r\n        chipset_header: [],\r\n        chipset_one: [],\r\n        chipset_two: [],\r\n        chipset_three: [],\r\n        chipset_four: []\r\n    };\r\n    let user_settings = {};\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (isEmpty(design_settings)) user_settings = store.getState().users.user_anime_display_settings;\r\n            else {\r\n                user_settings = {\r\n                    [UserAnimeDisplaySettingsSchema.type]: design_settings.title_type,\r\n                    [UserAnimeDisplaySettingsSchema.episodes]: design_settings.title_episodes,\r\n                    [UserAnimeDisplaySettingsSchema.mins_per_ep]: design_settings.title_mins_per_ep,\r\n                    [UserAnimeDisplaySettingsSchema.rating]: design_settings.title_rating,\r\n                    [UserAnimeDisplaySettingsSchema.genres]: design_settings.title_genres,\r\n                    [UserAnimeDisplaySettingsSchema.mal_score]: design_settings.title_mal_score,\r\n                    [UserAnimeDisplaySettingsSchema.aired]: design_settings.title_aired,\r\n                };\r\n                if (!design_settings.title_status) user_status = null\r\n            }\r\n\r\n            start_date = formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Anime.air_end], title[Anime.air_end_known], true);\r\n\r\n            card_title.id = title[Anime.id];\r\n            card_title.link = ANIME_DISPLAY(title[Anime.id]);\r\n            card_title.cover_images = title[Anime.anime_cover_images];\r\n            card_title.cdn_cover_images = title[Anime.anime_cdn_cover_images];\r\n            card_title.title = title[Anime.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.label],\r\n                    color: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Anime.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Anime.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Anime.anime_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.type])\r\n                card_title.chipset_one.push(title[Anime.type]);\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.episodes] && title[Anime.episodes])\r\n                card_title.chipset_one.push(`${title[Anime.episodes]}ep`);\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.mins_per_ep] && title[Anime.minutes_per_episode])\r\n                card_title.chipset_one.push(`${title[Anime.minutes_per_episode]}m`);\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.rating])\r\n                card_title.chipset_one.push(title[Anime.rating_short]);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.genres])\r\n                card_title.chipset_two = title[Anime.genres_csv] ? title[Anime.genres_csv].split(', ') : [];\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.mal_score] && title[Anime.score])\r\n                card_title.chipset_three.push(`MAL: ${title[Anime.score]}`);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.aired] && start_date)\r\n                card_title.chipset_four.push(`${start_date}${end_date ? ' to ' + end_date : ''}`);\r\n\r\n            return card_title;\r\n        case BRANCH_MANGA:\r\n            // user_settings = store.getState().users.user_manga_display_settings;\r\n            if (isEmpty(design_settings)) user_settings = store.getState().users.user_manga_display_settings;\r\n            else {\r\n                user_settings = {\r\n                    [UserMangaDisplaySettingsSchema.type]: design_settings.title_type,\r\n                    [UserMangaDisplaySettingsSchema.volumes]: design_settings.title_volumes,\r\n                    [UserMangaDisplaySettingsSchema.chapters]: design_settings.title_chapters,\r\n                    [UserMangaDisplaySettingsSchema.genres]: design_settings.title_genres,\r\n                    [UserMangaDisplaySettingsSchema.mal_score]: design_settings.title_mal_score,\r\n                    [UserMangaDisplaySettingsSchema.aired]: design_settings.title_aired,\r\n                };\r\n                if (!design_settings.title_status) user_status = null\r\n            }\r\n\r\n            start_date = formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Manga.air_end], title[Manga.air_end_known], true);\r\n\r\n            card_title.id = title[Manga.id];\r\n            card_title.link = MANGA_DISPLAY(title[Manga.id]);\r\n            card_title.cover_images = title[Manga.manga_cover_images];\r\n            card_title.cdn_cover_images = title[Manga.manga_cdn_cover_images];\r\n            card_title.title = title[Manga.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.label],\r\n                    color: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Manga.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Manga.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Manga.manga_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.type])\r\n                card_title.chipset_one.push(title[Manga.type]);\r\n            if (user_settings[UserMangaDisplaySettingsSchema.volumes] && title[Manga.volumes])\r\n                card_title.chipset_one.push(`${title[Manga.volumes]}v`);\r\n            if (user_settings[UserMangaDisplaySettingsSchema.chapters] && title[Manga.chapters])\r\n                card_title.chipset_one.push(`${title[Manga.chapters]}c`);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.genres])\r\n                card_title.chipset_two = title[Manga.genres_csv] ? title[Manga.genres_csv].split(', ') : [];\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.mal_score] && title[Manga.score])\r\n                card_title.chipset_three.push(`MAL: ${title[Manga.score]}`);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.aired] && start_date)\r\n                card_title.chipset_four.push(`${start_date}${end_date ? ' to ' + end_date : ''}`);\r\n\r\n            return card_title;\r\n        case BRANCH_CHARACTERS:\r\n            card_title.id = title[Character.id];\r\n            card_title.link = CHARACTERS_DISPLAY(title[Character.id]);\r\n            card_title.cover_images = title[Character.character_cover_images];\r\n            card_title.cdn_cover_images = title[Character.character_cdn_cover_images];\r\n            card_title.title = title[Character.short_name] ?\r\n                title[Character.short_name] : title[Character.character_name];\r\n            return card_title;\r\n        case BRANCH_PEOPLE:\r\n            card_title.id = title[Person.id];\r\n            card_title.link = PERSON_DISPLAY(title[Person.id]);\r\n            card_title.cover_images = title[Person.person_cover_images];\r\n            card_title.cdn_cover_images = title[Person.person_cdn_cover_images];\r\n            card_title.title = title[Person.person_name];\r\n            return card_title;\r\n        case BRANCH_EROGE:\r\n            user_settings = store.getState().users.user_eroge_display_settings;\r\n            card_title.id = title[Eroge.id];\r\n            card_title.link = EROGE_DISPLAY(title[Eroge.id]);\r\n            card_title.cover_images = title[Eroge.eroge_cover_images];\r\n            card_title.title = title[Eroge.eroge_name].replace('[Android]', '').trim();\r\n            if (title[Eroge.downloaded])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.type])\r\n                card_title.chipset_one.push(title[Manga.type]);\r\n            if (user_settings[UserErogeDisplaySettingsSchema.platforms] && title[Eroge.platforms])\r\n                card_title.chipset_one.push(title[Eroge.platforms]);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.tags] && title[Eroge.tags])\r\n                card_title.chipset_two = title[Eroge.tags] ? title[Eroge.tags].split(', ') : [];\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.hg_score] && title[Eroge.rating])\r\n                card_title.chipset_three.push(`HG ${title[Eroge.rating]}`);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.language] && title[Eroge.language])\r\n                card_title.chipset_four.push(title[Eroge.language]);\r\n            if (user_settings[UserErogeDisplaySettingsSchema.censorship] && title[Eroge.censorship])\r\n                card_title.chipset_four.push(title[Eroge.censorship]);\r\n\r\n            return card_title;\r\n        default:\r\n            return card_title\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {formatTitle, UserCardButtons} from \"./functions\";\r\nimport {getTitleCoverImage} from \"../../functions\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nclass TitleCard extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Object (Anime, Manga, etc.) */\r\n        title: PropTypes.object.isRequired,\r\n        /** Index number for the card */\r\n        index: PropTypes.number,\r\n        /** Status of the user entry for this title (Watching, Reading, Completed, etc.) */\r\n        user_status: PropTypes.string,\r\n        /** If the card should be in a small format (No chipsets, only title) */\r\n        mini: PropTypes.bool,\r\n        /** If the user edit/add buttons for the title should appear */\r\n        user_buttons: PropTypes.bool,\r\n        /** Custom classname for the title card container */\r\n        containerClassNames: PropTypes.string,\r\n        /** Custom classname for the title card */\r\n        classNames: PropTypes.string,\r\n        /** If true it the card will not use state to check if the cover image is\r\n         * loaded, it will directly add the img background to the card */\r\n        skip_img_preload: PropTypes.bool,\r\n        /** If settings are passed, that means it is used from an user list, so\r\n         * these settings will apply for what content to be displayed, instead\r\n         * of the browse_settings */\r\n        design_settings: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.showUserButtons = this.showUserButtons.bind(this);\r\n        this.hideUserButtons = this.hideUserButtons.bind(this);\r\n        this.cssHideUserButtons = this.cssHideUserButtons.bind(this);\r\n        this.state = {\r\n            img_loaded: false,\r\n            show_user_buttons: false,\r\n            css_hide_buttons: false,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.css_hide_buttons)\r\n            this.setState({css_hide_buttons: false, show_user_buttons: false})\r\n    }\r\n\r\n    showUserButtons() {\r\n        this.setState({show_user_buttons: true, css_hide_buttons: false});\r\n    }\r\n\r\n    hideUserButtons() {\r\n        this.setState({show_user_buttons: false});\r\n    }\r\n\r\n    cssHideUserButtons() {\r\n        this.setState({css_hide_buttons: true});\r\n    }\r\n\r\n    render() {\r\n        const card_title = formatTitle(\r\n            this.props.branch, this.props.title, this.props.user_status, this.props.design_settings);\r\n        let img_url = getTitleCoverImage(card_title.cdn_cover_images, card_title.cover_images);\r\n        let class_names = this.props.mini ? 'title-card-mini' : '';\r\n        if (this.props.classNames)\r\n            class_names = this.props.classNames;\r\n\r\n        let container_class_names = '';\r\n        if (this.props.containerClassNames)\r\n            container_class_names = this.props.containerClassNames;\r\n\r\n        let backgroundImage = this.state.img_loaded || this.props.skip_img_preload ? `url(\"${img_url}\")` : 'none';\r\n\r\n        return (\r\n            <div className={`title-card-container ${container_class_names}`}\r\n                 onMouseOver={this.showUserButtons}\r\n                 onMouseEnter={this.showUserButtons}\r\n                 onMouseLeave={this.hideUserButtons}\r\n            >\r\n                {this.props.user_buttons && this.state.show_user_buttons ?\r\n                    <div className={this.state.css_hide_buttons ? 'user-buttons user-buttons-hidden' : 'user-buttons'}>\r\n                        <UserCardButtons\r\n                            branch={this.props.branch}\r\n                            id={card_title.id}\r\n                            title={this.props.title}\r\n                            user_status={this.props.user_status}\r\n                            hideUserButtons={this.cssHideUserButtons}\r\n                        />\r\n                    </div> : null}\r\n                <Link to={card_title.link}\r\n                      className={this.state.img_loaded ? `title-card fade-in ${class_names}` : `title-card ${class_names}`}\r\n                      style={{backgroundImage: backgroundImage}}\r\n                      onMouseEnter={playHoverSound} onClick={playClickSound}\r\n                >\r\n                    <img src={img_url} className=\"lazy-loaded-img\" alt=\"loader-img\" loading=\"lazy\"\r\n                         onLoad={() => {\r\n                             this.setState({img_loaded: true})\r\n                         }}/>\r\n                    {!this.props.mini ? <div className=\"chip-array\">\r\n                        {this.props.index ? <Chip variant=\"default\" size=\"small\" label={this.props.index}/> : null}\r\n                        {card_title.chipset_header ? card_title.chipset_header.map(chip => (\r\n                            chip ? <Chip variant=\"default\" size=\"small\" className={`chip-${chip['color']}`}\r\n                                         label={chip['label']}/> : null\r\n                        )) : null}\r\n                    </div> : null}\r\n                    {!this.props.mini ? <h3>{card_title.title}</h3> : <h4>{card_title.title}</h4>}\r\n                    {!this.props.mini ? <div className=\"title-card-body\">\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_one.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_two.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_three.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_four.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                    </div> : null}\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_display_settings: state.users.user_anime_display_settings,  // This is here to rerender the cards\r\n    user_manga_display_settings: state.users.user_manga_display_settings,  // This is here to rerender the cards\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,  // This is here to rerender the cards\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TitleCard)\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\n\r\n\r\nfunction checkForKnownDate(known_date) {\r\n    return known_date.indexOf('day') >= 0 && known_date.indexOf('month') >= 0 && known_date.indexOf('year');\r\n}\r\n\r\nfunction horizontalScroll(e, container) {\r\n    e.preventDefault();\r\n    if (e.deltaY > 0) container.scrollLeft += 100;\r\n    else container.scrollLeft -= 100;\r\n}\r\n\r\nfunction addHorizontalScrollEventListener() {\r\n    const container = document.getElementById('season-titles-container');\r\n    container.addEventListener('wheel', (e) => horizontalScroll(e, container));\r\n}\r\n\r\nfunction removeHorizontalScrollEventListener() {\r\n    const container = document.getElementById('season-titles-container');\r\n    container.removeEventListener('wheel', (e) => horizontalScroll(e, container));\r\n}\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\n\r\nclass AnimeCurrentSeason extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n\r\n        this.state = {\r\n            current_year: new Date().getFullYear(),\r\n            current_month: new Date().getMonth() + 1,\r\n            current_season: '',\r\n            current_season_number: 1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let season;\r\n        if (this.state.current_month >= 1 && this.state.current_month <= 3) season = 1;\r\n        else if (this.state.current_month >= 4 && this.state.current_month <= 6) season = 2;\r\n        else if (this.state.current_month >= 7 && this.state.current_month <= 9) season = 3;\r\n        else if (this.state.current_month >= 10 && this.state.current_month <= 12) season = 4;\r\n\r\n        this.setState({current_season: getSeasonLabelFromSeasonNumber(season), current_season_number: season});\r\n\r\n        const season_filter = {year: this.state.current_year, season: season};\r\n        let filters = new FILTER_ANIME_INITIAL_VALUES();\r\n        filters = filters.VALUES;\r\n        this.props.filterAnime(null, filters, season_filter, null, true, false);\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n\r\n        addHorizontalScrollEventListener()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        removeHorizontalScrollEventListener()\r\n    }\r\n\r\n    render() {\r\n        const season_icon_and_class = getIconAndClassFromSeasonNumber(this.state.current_season_number);\r\n        return (\r\n            <div id=\"Current-Season\">\r\n                <div className=\"current-season-header\">\r\n                    <h3>\r\n                        Current Season{' '}\r\n                        <CyberLink to={ANIME_SEASON_DISPLAY(this.state.current_year, this.state.current_season_number)}>\r\n                            {this.state.current_year} {this.state.current_season}\r\n                        </CyberLink>{' '}\r\n                        <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                         className={season_icon_and_class.className}/>\r\n                    </h3>\r\n                </div>\r\n                <div id=\"season-titles-container\" className=\"current-season-titles-container\">\r\n                    {this.props.filtered_anime_loaded ?\r\n                        <div className=\"current-season-titles-wrapper\">\r\n                            {this.props.filtered_anime[ApiResult.results].map(anime => (\r\n                                checkForKnownDate(anime[Anime.air_start_known]) ? <TitleCard\r\n                                    containerClassNames=\"current-season-card-container\"\r\n                                    branch={BRANCH_ANIME}\r\n                                    title={anime}\r\n                                    user_status={\r\n                                        !isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                            this.props.user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                                /> : null\r\n                            ))}\r\n                        </div> : this.props.anime_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filtered_anime: state.anime.filtered_anime,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {filterAnime, getLoggedInUserAnimeEntryStatuses})(AnimeCurrentSeason)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Anime, AnimeData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.recently_added_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', anime_data[AnimeData.recently_added_anime])}\r\n\r\n                    {anime_data[AnimeData.recently_added_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction RecentlyDownloaded(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.recently_downloaded_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', anime_data[AnimeData.recently_added_anime])}\r\n                    {anime_data[AnimeData.recently_downloaded_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopUpcoming(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Upcoming Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_upcoming_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_upcoming_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScoredMal(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_scored_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_scored_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction MostPopularMal(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.most_popular_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.most_popular_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2010s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_2010s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_2010s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2000s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2000s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_2000s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_2000s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top90s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1990s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_90s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_90s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top80s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1980s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_80s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_80s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top70s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1970s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_70s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_70s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopAnimeTabs(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Recently Downloaded</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Upcoming</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Score</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Most popular</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2010s</p>} {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2000s</p>} {...a11yProps(6)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 90s</p>} {...a11yProps(7)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 80s</p>} {...a11yProps(8)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 70s</p>} {...a11yProps(9)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    {console.log('in tab', anime_data)}\r\n                    <RecentlyAdded\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <RecentlyDownloaded\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopUpcoming\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <TopScoredMal\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <MostPopularMal\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={5} dir={theme.direction}>\r\n                    <Top2010s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={6} dir={theme.direction}>\r\n                    <Top2000s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={7} dir={theme.direction}>\r\n                    <Top90s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={8} dir={theme.direction}>\r\n                    <Top80s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={9} dir={theme.direction}>\r\n                    <Top70s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty, isTimeLessThanAnHourAgo} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, AnimeData, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {TopAnimeTabs} from \"./tabs/TopAnimeTabs\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nfunction horizontalScroll(e, container) {\r\n    e.preventDefault();\r\n    if (e.deltaY > 0) container.scrollLeft += 100;\r\n    else container.scrollLeft -= 100;\r\n}\r\n\r\nfunction addHorizontalScrollEventListener() {\r\n    const containers = document.getElementsByClassName('horizontal-scroll');\r\n    for (let x = 0; x < containers.length; x++)\r\n        containers[x].addEventListener('wheel', (e) => horizontalScroll(e, containers[x]));\r\n}\r\n\r\nfunction removeHorizontalScrollEventListener() {\r\n    const containers = document.getElementsByClassName('horizontal-scroll');\r\n    for (let x = 0; x < containers.length; x++)\r\n        containers[x].removeEventListener('wheel', (e) => horizontalScroll(e, containers[x]));\r\n}\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\nfunction CurrentSeason(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    const current_year = new Date().getFullYear();\r\n    let current_month = new Date().getMonth() + 1;\r\n    let current_season_number = 1;\r\n    if (current_month >= 1 && current_month <= 3) current_season_number = 1;\r\n    else if (current_month >= 4 && current_month <= 6) current_season_number = 2;\r\n    else if (current_month >= 7 && current_month <= 9) current_season_number = 3;\r\n    else if (current_month >= 10 && current_month <= 12) current_season_number = 4;\r\n    const current_season = getSeasonLabelFromSeasonNumber(current_season_number);\r\n\r\n    const season_icon_and_class = getIconAndClassFromSeasonNumber(current_season_number);\r\n    return <Grid xs={12} id=\"Current-Season\">\r\n        <div className=\"current-season-header\">\r\n            <h3>\r\n                Current Season{' '}\r\n                <CyberLink to={ANIME_SEASON_DISPLAY(current_year, current_season_number)}>\r\n                    {current_year} {current_season}\r\n                </CyberLink>{' '}\r\n                <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                 className={season_icon_and_class.className}/>\r\n            </h3>\r\n        </div>\r\n        <div id=\"season-titles-container\" className=\"current-season-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.current_anime_season] ?\r\n                <div className=\"current-season-titles-wrapper\">\r\n                    {anime_data[AnimeData.current_anime_season].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"current-season-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nclass TopAnime extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     addHorizontalScrollEventListener()\r\n    // }\r\n    //\r\n    // componentWillUnmount() {\r\n    //     removeHorizontalScrollEventListener()\r\n    // }\r\n\r\n    render() {\r\n        return <>\r\n            <CurrentSeason\r\n                anime_data={this.props.anime_data}\r\n                anime_loading={this.props.anime_loading}\r\n                anime_data_loaded={this.props.anime_data_loaded}\r\n                user_anime_entry_statuses={this.props.user_anime_entry_statuses}\r\n            />\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopAnimeTabs\r\n                anime_data={this.props.anime_data}\r\n                anime_loading={this.props.anime_loading}\r\n                anime_data_loaded={this.props.anime_data_loaded}\r\n                user_anime_entry_statuses={this.props.user_anime_entry_statuses}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data: state.anime.anime_data,\r\n    anime_loading: state.anime.anime_loading,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopAnime)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {ANIME_TAB_NAME, BRANCH_ANIME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport AnimeStatistics from \"./AnimeStatistics\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport AnimeCurrentSeason from \"../seasons/AnimeCurrentSeason\";\r\nimport {getAnimeData, getAnimeDataForHomePage} from \"../../../actions/anime\";\r\nimport {Anime, AnimeData, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport TopAnime from \"./TopAnime\";\r\n\r\n\r\nclass AnimeHome extends Component {\r\n    componentDidMount() {\r\n        document.title = ANIME_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getAnimeDataForHomePage();\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Anime-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopAnime/>\r\n                    <Grid xs={12}>\r\n                        <AnimeStatistics/>\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeDataForHomePage, getLoggedInUserAnimeEntryStatuses})(AnimeHome)\r\n","import * as Yup from 'yup';\r\n\r\n\r\nexport const LoginSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required'),\r\n});\r\n\r\nexport const RegisterSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required!'),\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Required!'),\r\n    password: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!'),\r\n    password2: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!')\r\n        .test('passwords-match', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        }),\r\n});\r\n\r\nexport const RegisterSchemaWithInvitationCode = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required!'),\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Required!'),\r\n    password: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!'),\r\n    password2: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!')\r\n        .test('passwords-match', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        }),\r\n    invitation_code: Yup.string()\r\n        .required('Required!')\r\n});\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Form, Formik} from 'formik';\r\n\r\nimport {LoginSchema} from \"./functions\";\r\nimport {login} from '../../actions/auth'\r\nimport {REGISTER} from \"../../urls\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {playClickSound, playHoverSound, playWarningSound} from \"../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nclass LoginForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            username: 'username',\r\n            password: 'password'\r\n        };\r\n\r\n        const initial_values = {\r\n            username: '',\r\n            password: ''\r\n        };\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={initial_values}\r\n                validationSchema={LoginSchema}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    this.props.login(values.username, values.password);\r\n                    setSubmitting(false);\r\n                }}>\r\n                {({errors, touched, values, handleChange, handleBlur, setSubmitting}) => (\r\n                    !this.props.user_loading ? <Form id=\"Login-Form\">\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            className=\"form-control\"\r\n                            value={values.username}\r\n                            name={field_names.username}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.username && touched.username}\r\n                            helperText={(errors.username && touched.username) && errors.username}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password && touched.password}\r\n                            helperText={(errors.password && touched.password) && errors.password}/>\r\n                        <CyberButton type=\"submit\" onClick={() => {\r\n                            if (errors.password || errors.username)\r\n                                playWarningSound()\r\n                        }}>\r\n                            Login\r\n                        </CyberButton>\r\n                        <p>Don't have an account? <RouterLink to={REGISTER} onClick={playClickSound}\r\n                                                              onMouseOver={playHoverSound}>Register</RouterLink></p>\r\n                    </Form> : <div className=\"loading\"><CircularProgress/></div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(LoginForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {INDEX} from \"../../urls\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nimport '../../assets/css/auth.css';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {img_loaded: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Login';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.user_authenticated) {\r\n            return <Redirect to={this.props.redirect_url ? this.props.redirect_url : INDEX}/>;\r\n        }\r\n\r\n        return (\r\n            <div id=\"Login\" className={this.state.img_loaded ? 'fade-in' : ''}>\r\n                <img src={'/static/media/girl-window.1732e4f9.jpg'} className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n                     onLoad={() => {this.setState({img_loaded: true})}} />\r\n                <Grid container>\r\n                    <Grid item xs={3} className=\"form-container box-light\">\r\n                        <h1>Login</h1>\r\n                        <LoginForm/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    redirect_url: state.auth.redirect_url\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Login)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Form, Formik} from 'formik';\r\n\r\nimport {RegisterSchema, RegisterSchemaWithInvitationCode} from \"./functions\";\r\nimport {register} from '../../actions/auth'\r\nimport {LOGIN} from \"../../urls\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {playClickSound, playHoverSound, playWarningSound} from \"../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nclass RegisterForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            username: 'username',\r\n            email: 'email',\r\n            password: 'password',\r\n            password2: 'password2',\r\n            invitation_code: 'invitation_code'\r\n        };\r\n\r\n        const initial_values = {\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            password2: '',\r\n            invitation_code: '',\r\n        };\r\n\r\n        return !this.props.user_loading && this.props.open_applications_status !== undefined ? <Formik\r\n            initialValues={initial_values}\r\n            validationSchema={this.props.open_applications_status ? RegisterSchema : RegisterSchemaWithInvitationCode}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                const new_user = {\r\n                    username: values.username,\r\n                    password: values.password,\r\n                    email: values.email,\r\n                    invitation_code: values.invitation_code\r\n                };\r\n                this.props.register(new_user);\r\n                setSubmitting(false);\r\n            }}>\r\n            {({errors, touched, values, handleChange, handleBlur}) => (\r\n                <Form id=\"Register-Form\">\r\n                    <TextField\r\n                        label=\"Username\"\r\n                        className=\"form-control\"\r\n                        value={values.username}\r\n                        name={field_names.username}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={errors.username && touched.username}\r\n                        helperText={(errors.username && touched.username) && errors.username}/>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        className=\"form-control\"\r\n                        value={values.email}\r\n                        name={field_names.email}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={errors.email && touched.email}\r\n                        helperText={(errors.email && touched.email) && errors.email}/>\r\n                    <TextField\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name={field_names.password}\r\n                        value={values.password}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={errors.password && touched.password}\r\n                        helperText={(errors.password && touched.password) && errors.password}/>\r\n                    <TextField\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name={field_names.password2}\r\n                        value={values.password2}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={errors.password2 && touched.password2}\r\n                        helperText={(errors.password2 && touched.password2) && errors.password2}/>\r\n                    {this.props.open_applications_status === false ?\r\n                        <TextField\r\n                            label=\"Invitation Code\"\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name={field_names.invitation_code}\r\n                            value={values.invitation_code}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.invitation_code && touched.invitation_code}\r\n                            helperText={(errors.invitation_code && touched.invitation_code) && errors.invitation_code}/> : null}\r\n                    <CyberButton type=\"submit\" onClick={() => {\r\n                        if (errors.email || errors.username || errors.password || errors.password2)\r\n                            playWarningSound()\r\n                    }}>\r\n                        Register\r\n                    </CyberButton>\r\n                    <p>Already have an account? <RouterLink to={LOGIN} onClick={playClickSound}\r\n                                                            onMouseOver={playHoverSound}>Login</RouterLink></p>\r\n                </Form>\r\n            )}\r\n        </Formik> : <div className=\"loading\"><CircularProgress/></div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n    open_applications_status: state.auth.open_applications_status,\r\n});\r\n\r\nexport default connect(mapStateToProps, {register})(RegisterForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {REGISTER_TAB_NAME} from \"../../globals\";\r\nimport {INDEX} from \"../../urls\";\r\nimport RegisterForm from \"./RegisterForm\";\r\n\r\nimport '../../assets/css/auth.css';\r\nimport {getOpenApplicationsStatus} from \"../../actions/auth\";\r\n\r\n\r\nclass Register extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {img_loaded: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = REGISTER_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getOpenApplicationsStatus();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.user_authenticated)\r\n            return <Redirect to={INDEX}/>;\r\n\r\n        return (\r\n            <div id=\"Register\" className={this.state.img_loaded ? 'fade-in' : ''}>\r\n                <img src={'/static/media/girl-window.1732e4f9.jpg'} className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n                     onLoad={() => {this.setState({img_loaded: true})}} />\r\n                <Grid container>\r\n                    <Grid item xs={3} className=\"form-container box-light\">\r\n                        <h1>Register</h1>\r\n                        <RegisterForm/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {getOpenApplicationsStatus})(Register)\r\n","import {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA} from \"../../../globals\";\r\nimport {AnimeFilterNames, ErogeFilterNames, MangaFilterNames} from \"./field_names\";\r\nimport {\r\n    deleteAnimeFilterPreset, deleteErogeFilterPreset, deleteMangaFilterPreset,\r\n    saveAnimeFilterPreset, saveErogeFilterPreset, saveMangaFilterPreset,\r\n    setSelectedAnimePreset, setSelectedErogePreset,\r\n    setSelectedMangaPreset,\r\n    updateAnimeFilterPreset, updateErogeFilterPreset,\r\n    updateMangaFilterPreset\r\n} from \"../../../actions/users\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nexport function setPreset(branch, preset, new_values, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (filters) {\r\n                if (filters[AnimeFilterNames.downloaded] === 'true') new_values[AnimeFilterNames.downloaded] = true;\r\n                if (filters[AnimeFilterNames.is_downloading] === 'true') new_values[AnimeFilterNames.is_downloading] = true;\r\n                if (filters[AnimeFilterNames.cannot_download] === 'true') new_values[AnimeFilterNames.cannot_download] = true;\r\n                if (filters[AnimeFilterNames.deleted_by_MAL] === 'true') new_values[AnimeFilterNames.deleted_by_MAL] = true;\r\n                if (filters[AnimeFilterNames.pending_by_MAL] === 'true') new_values[AnimeFilterNames.pending_by_MAL] = true;\r\n                if (filters[AnimeFilterNames.episodes_range]) new_values[AnimeFilterNames.episodes_range] = filters[AnimeFilterNames.episodes_range].split(',');\r\n                if (filters[AnimeFilterNames.length_range]) new_values[AnimeFilterNames.length_range] = filters[AnimeFilterNames.length_range].split(',');\r\n                if (filters[AnimeFilterNames.genres]) new_values[AnimeFilterNames.genres] = filters[AnimeFilterNames.genres].split(',');\r\n                if (filters[AnimeFilterNames.type]) new_values[AnimeFilterNames.type] = filters[AnimeFilterNames.type].split(',');\r\n                if (filters[AnimeFilterNames.status]) new_values[AnimeFilterNames.status] = filters[AnimeFilterNames.status].split(',');\r\n                if (filters[AnimeFilterNames.rating_short]) new_values[AnimeFilterNames.rating_short] = filters[AnimeFilterNames.rating_short].split(',');\r\n                if (filters[AnimeFilterNames.video_quality]) new_values[AnimeFilterNames.video_quality] = filters[AnimeFilterNames.video_quality].split(',');\r\n                if (filters[AnimeFilterNames.audio_channel]) new_values[AnimeFilterNames.audio_channel] = filters[AnimeFilterNames.audio_channel].split(',');\r\n                if (filters[AnimeFilterNames.user_exclude]) new_values[AnimeFilterNames.user_exclude] = filters[AnimeFilterNames.user_exclude].split(',');\r\n                new_values[AnimeFilterNames.ordering] = filters[AnimeFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedAnimePreset(preset));\r\n            return new_values;\r\n        case BRANCH_MANGA:\r\n            if (filters) {\r\n                if (filters[MangaFilterNames.downloaded] === 'true') new_values[MangaFilterNames.downloaded] = true;\r\n                if (filters[MangaFilterNames.is_downloading] === 'true') new_values[MangaFilterNames.is_downloading] = true;\r\n                if (filters[MangaFilterNames.cannot_download] === 'true') new_values[MangaFilterNames.cannot_download] = true;\r\n                if (filters[MangaFilterNames.deleted_by_MAL] === 'true') new_values[MangaFilterNames.deleted_by_MAL] = true;\r\n                if (filters[MangaFilterNames.pending_by_MAL] === 'true') new_values[MangaFilterNames.pending_by_MAL] = true;\r\n                if (filters[MangaFilterNames.volumes_range]) new_values[MangaFilterNames.volumes_range] = filters[MangaFilterNames.volumes_range].split(',');\r\n                if (filters[MangaFilterNames.chapters_range]) new_values[MangaFilterNames.chapters_range] = filters[MangaFilterNames.chapters_range].split(',');\r\n                if (filters[MangaFilterNames.genres]) new_values[MangaFilterNames.genres] = filters[MangaFilterNames.genres].split(',');\r\n                if (filters[MangaFilterNames.type]) new_values[MangaFilterNames.type] = filters[MangaFilterNames.type].split(',');\r\n                if (filters[MangaFilterNames.status]) new_values[MangaFilterNames.status] = filters[MangaFilterNames.status].split(',');\r\n                if (filters[MangaFilterNames.user_exclude]) new_values[MangaFilterNames.user_exclude] = filters[MangaFilterNames.user_exclude].split(',');\r\n                new_values[MangaFilterNames.ordering] = filters[MangaFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedMangaPreset(preset));\r\n            return new_values;\r\n        case BRANCH_CHARACTERS:\r\n            return new_values;\r\n        case BRANCH_EROGE:\r\n            if (filters) {\r\n                if (filters[ErogeFilterNames.downloaded] === 'true') new_values[ErogeFilterNames.downloaded] = true;\r\n                if (filters[ErogeFilterNames.type]) new_values[ErogeFilterNames.type] = filters[ErogeFilterNames.type].split(',');\r\n                if (filters[ErogeFilterNames.platforms]) new_values[ErogeFilterNames.platforms] = filters[ErogeFilterNames.platforms].split(',');\r\n                if (filters[ErogeFilterNames.censorship]) new_values[ErogeFilterNames.censorship] = filters[ErogeFilterNames.censorship].split(',');\r\n                if (filters[ErogeFilterNames.language]) new_values[ErogeFilterNames.language] = filters[ErogeFilterNames.language].split(',');\r\n                if (filters[ErogeFilterNames.tags]) new_values[ErogeFilterNames.tags] = filters[ErogeFilterNames.tags].split(',');\r\n                new_values[ErogeFilterNames.ordering] = filters[ErogeFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedErogePreset(preset));\r\n            return new_values;\r\n        default:\r\n            return new_values\r\n    }\r\n}\r\n\r\n\r\nexport function updateFilterPreset(branch, preset_id, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(updateAnimeFilterPreset(preset_id, filters));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(updateMangaFilterPreset(preset_id, filters));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(updateErogeFilterPreset(preset_id, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function saveFilterPreset(branch, preset_name, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(saveAnimeFilterPreset(preset_name, filters));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(saveMangaFilterPreset(preset_name, filters));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(saveErogeFilterPreset(preset_name, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function deleteFilterPreset(branch, preset_id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(deleteAnimeFilterPreset(preset_id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(deleteMangaFilterPreset(preset_id));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(deleteErogeFilterPreset(preset_id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getSelectedPreset(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return store.getState().users.selected_anime_preset;\r\n        case BRANCH_MANGA:\r\n            return store.getState().users.selected_manga_preset;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            return store.getState().users.selected_eroge_preset;\r\n        default:\r\n            return\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCog, faPlus, faSave, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport {FiltersPreset} from \"../../../models\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {getResetValuesFromBranch} from \"../../browse/functions\";\r\nimport {deleteFilterPreset, getSelectedPreset, saveFilterPreset, setPreset, updateFilterPreset} from \"./functions\";\r\nimport {CyberButton} from \"../common/common\";\r\n\r\n\r\nclass PresetFilters extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Preset filters for the user */\r\n        presets: PropTypes.array.isRequired,\r\n        /** Currently active filters, from state */\r\n        filters: PropTypes.object.isRequired,\r\n        /** Function to run on submit when changing the preset */\r\n        onSubmit: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onPresetChange = this.onPresetChange.bind(this);\r\n        this.onPresetNew = this.onPresetNew.bind(this);\r\n        this.onPresetUpdate = this.onPresetUpdate.bind(this);\r\n        this.onPresetDelete = this.onPresetDelete.bind(this);\r\n        this.state = {\r\n            preset: getSelectedPreset(this.props.branch)\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.preset !== getSelectedPreset(this.props.branch))\r\n            this.setState({preset: getSelectedPreset(this.props.branch)})\r\n    }\r\n\r\n    onPresetChange(e) {\r\n        if (e.target.value === -1) {\r\n            this.setState({preset: {}});\r\n            return;\r\n        }\r\n        for (let x = 0; x < this.props.presets.length; x++) {\r\n            if (this.props.presets[x][FiltersPreset.id] === e.target.value) {\r\n                let new_values = getResetValuesFromBranch(this.props.branch);\r\n\r\n                let filters = this.props.presets[x][FiltersPreset.filters];\r\n                if (typeof this.props.presets[x][FiltersPreset.filters] !== 'object')\r\n                    filters = JSON.parse(this.props.presets[x][FiltersPreset.filters]);\r\n\r\n                new_values = setPreset(this.props.branch, this.props.presets[x], new_values, filters);\r\n\r\n                this.setState({preset: this.props.presets[x]}, () => {\r\n                    this.props.onSubmit(e, new_values);\r\n                });\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    onPresetUpdate() {\r\n        if (!isEmpty(this.state.preset))\r\n            updateFilterPreset(this.props.branch, this.state.preset[FiltersPreset.id], this.props.filters);\r\n    }\r\n\r\n    onPresetNew() {\r\n        let preset_name = prompt('Enter the preset name:', 'New Preset');\r\n        if (preset_name)\r\n            saveFilterPreset(this.props.branch, preset_name, this.props.filters)\r\n    }\r\n\r\n    onPresetDelete() {\r\n        if (window.confirm(`Delete ${this.state.preset[FiltersPreset.preset_name]} preset?`))\r\n            deleteFilterPreset(this.props.branch, this.state.preset[FiltersPreset.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Preset-Filters\">\r\n                <Select label=\"Options\" className=\"preset-settings\" value={-1}>\r\n                    <MenuItem style={{display: 'none'}} value={-1}>\r\n                        <FontAwesomeIcon icon={faCog}/>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={1}>\r\n                        <CyberButton title={'Create preset with current filters'} onClick={this.onPresetNew}>\r\n                            <FontAwesomeIcon icon={faPlus}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={2}>\r\n                        <CyberButton title={'Update selected preset with current filters'} onClick={this.onPresetUpdate}>\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={3}>\r\n                        <CyberButton title={'Delete selected preset'} onClick={this.onPresetDelete}>\r\n                            <FontAwesomeIcon icon={faTrash}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                </Select>\r\n                {this.props.presets ? <>\r\n                    <Select\r\n                        id=\"user-filters-preset\"\r\n                        className=\"preset-selector\"\r\n                        label=\"Preset\"\r\n                        value={this.state.preset[FiltersPreset.id] ? this.state.preset[FiltersPreset.id] : -1}\r\n                        onChange={this.onPresetChange}\r\n                    >\r\n                        <MenuItem value={-1}>\r\n                            Select Preset\r\n                        </MenuItem>\r\n                        {this.props.presets.map(preset => (\r\n                            <MenuItem value={preset[FiltersPreset.id]}>\r\n                                {preset[FiltersPreset.preset_name]}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PresetFilters\r\n","import React from 'react'\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCog, faThLarge, faThList} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../../../globals\";\r\nimport store from \"../../../store\";\r\nimport {\r\n    Profile,\r\n    User,\r\n    UserAnimeDisplaySettingsSchema,\r\n    UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema\r\n} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {setUserTitleDisplaySettings} from \"../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function UserDisplaySettingsDialog(props) {\r\n    switch (props.branch) {\r\n        case BRANCH_ANIME:\r\n            return <UserBrowseAnimeDisplaySettingsDialog user_display_settings={props.user_display_settings}/>;\r\n        case BRANCH_MANGA:\r\n            return <UserBrowseMangaDisplaySettingsDialog user_display_settings={props.user_display_settings}/>;\r\n        case BRANCH_EROGE:\r\n            return <UserBrowseErogeDisplaySettingsDialog user_display_settings={props.user_display_settings}/>;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction UserBrowseAnimeDisplaySettingsDialog(props) {\r\n    let settings = {};\r\n    Object.assign(settings, props.user_display_settings);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [cards, setCards] = React.useState(settings[UserAnimeDisplaySettingsSchema.cards]);\r\n    const [type, setType] = React.useState(settings[UserAnimeDisplaySettingsSchema.type]);\r\n    const [episodes, setEpisodes] = React.useState(settings[UserAnimeDisplaySettingsSchema.episodes]);\r\n    const [mins_per_ep, setMinsPerEp] = React.useState(settings[UserAnimeDisplaySettingsSchema.mins_per_ep]);\r\n    const [rating, setRating] = React.useState(settings[UserAnimeDisplaySettingsSchema.rating]);\r\n    const [genres, setGenres] = React.useState(settings[UserAnimeDisplaySettingsSchema.genres]);\r\n    const [mal_score, setMalScore] = React.useState(settings[UserAnimeDisplaySettingsSchema.mal_score]);\r\n    const [aired, setAired] = React.useState(settings[UserAnimeDisplaySettingsSchema.aired]);\r\n\r\n    const handleClickOpen = () => {\r\n        setCards(settings[UserAnimeDisplaySettingsSchema.cards]);\r\n        setType(settings[UserAnimeDisplaySettingsSchema.type]);\r\n        setEpisodes(settings[UserAnimeDisplaySettingsSchema.episodes]);\r\n        setMinsPerEp(settings[UserAnimeDisplaySettingsSchema.mins_per_ep]);\r\n        setRating(settings[UserAnimeDisplaySettingsSchema.rating]);\r\n        setGenres(settings[UserAnimeDisplaySettingsSchema.genres]);\r\n        setMalScore(settings[UserAnimeDisplaySettingsSchema.mal_score]);\r\n        setAired(settings[UserAnimeDisplaySettingsSchema.aired]);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (reset= true) => {\r\n        if (reset) {\r\n            let previous_settings = {};\r\n            Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_anime_display_settings]);\r\n            store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, previous_settings));\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleCards = () => {\r\n        setCards(!cards);\r\n        settings[UserAnimeDisplaySettingsSchema.cards] = !cards;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleType = (e) => {\r\n        setType(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.type] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleEpisodes = (e) => {\r\n        setEpisodes(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.episodes] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleMinsPerEp = (e) => {\r\n        setMinsPerEp(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.mins_per_ep] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleRating = (e) => {\r\n        setRating(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.rating] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleGenres = (e) => {\r\n        setGenres(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.genres] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleMalScore = (e) => {\r\n        setMalScore(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.mal_score] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleAired = (e) => {\r\n        setAired(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.aired] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    return <div className=\"user-browse-display-settings-dialog-container\">\r\n        <CyberButton variant=\"outlined\" onClick={handleClickOpen} title={'Display settings'}>\r\n            <FontAwesomeIcon icon={faCog}/>\r\n        </CyberButton>\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            id=\"User-Browse-Display-Settings-Dialog\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle>User settings</DialogTitle>\r\n            <DialogContent className=\"settings-wrapper\">\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td><p>Titles</p></td>\r\n                        <td className=\"text-center\">\r\n                            <CyberButton classNames=\"btn-contained-primary\" variant=\"contained\"\r\n                                         onClick={handleCards}>\r\n                                <FontAwesomeIcon\r\n                                    icon={cards ? faThList : faThLarge}\r\n                                    title={cards ? 'Table' : 'Cards'}\r\n                                />\r\n                            </CyberButton>\r\n                        </td>\r\n                        <td><p>Type</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={type}\r\n                                onChange={handleType}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><p>Episodes</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={episodes}\r\n                                onChange={handleEpisodes}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                        <td><p>Mins. per episode</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={mins_per_ep}\r\n                                onChange={handleMinsPerEp}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><p>Rating</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={rating}\r\n                                onChange={handleRating}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                        <td><p>Genres</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={genres}\r\n                                onChange={handleGenres}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><p>MAL Score</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={mal_score}\r\n                                onChange={handleMalScore}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                        <td><p>Aired</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={aired}\r\n                                onChange={handleAired}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <CyberButton variant=\"outlined\" title={'Save settings'} onClick={() => {\r\n                    store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings, true));\r\n                    handleClose(false);\r\n                }}>\r\n                    Save\r\n                </CyberButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction UserBrowseMangaDisplaySettingsDialog(props) {\r\n    let settings = {};\r\n    Object.assign(settings, props.user_display_settings);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [cards, setCards] = React.useState(settings[UserMangaDisplaySettingsSchema.cards]);\r\n    const [type, setType] = React.useState(settings[UserMangaDisplaySettingsSchema.type]);\r\n    const [volumes, setVolumes] = React.useState(settings[UserMangaDisplaySettingsSchema.volumes]);\r\n    const [chapters, setChapters] = React.useState(settings[UserMangaDisplaySettingsSchema.chapters]);\r\n    const [genres, setGenres] = React.useState(settings[UserMangaDisplaySettingsSchema.genres]);\r\n    const [mal_score, setMalScore] = React.useState(settings[UserMangaDisplaySettingsSchema.mal_score]);\r\n    const [aired, setAired] = React.useState(settings[UserMangaDisplaySettingsSchema.aired]);\r\n\r\n    const handleClickOpen = () => {\r\n        setCards(settings[UserMangaDisplaySettingsSchema.cards]);\r\n        setType(settings[UserMangaDisplaySettingsSchema.type]);\r\n        setVolumes(settings[UserMangaDisplaySettingsSchema.volumes]);\r\n        setChapters(settings[UserMangaDisplaySettingsSchema.chapters]);\r\n        setGenres(settings[UserMangaDisplaySettingsSchema.genres]);\r\n        setMalScore(settings[UserMangaDisplaySettingsSchema.mal_score]);\r\n        setAired(settings[UserMangaDisplaySettingsSchema.aired]);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (reset= true) => {\r\n        if (reset) {\r\n            let previous_settings = {};\r\n            Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_manga_display_settings]);\r\n            store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, previous_settings));\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleCards = () => {\r\n        setCards(!cards);\r\n        settings[UserMangaDisplaySettingsSchema.cards] = !cards;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleType = (e) => {\r\n        setType(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.type] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleVolumes = (e) => {\r\n        setVolumes(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.volumes] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleChapters = (e) => {\r\n        setChapters(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.chapters] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleGenres = (e) => {\r\n        setGenres(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.genres] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleMalScore = (e) => {\r\n        setMalScore(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.mal_score] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleAired = (e) => {\r\n        setAired(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.aired] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-browse-display-settings-dialog-container\">\r\n            <CyberButton variant=\"outlined\" onClick={handleClickOpen} title={'Display settings'}>\r\n                <FontAwesomeIcon icon={faCog}/>\r\n            </CyberButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                id=\"User-Browse-Display-Settings-Dialog\"\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle>User settings</DialogTitle>\r\n                <DialogContent className=\"settings-wrapper\">\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td><p>Titles</p></td>\r\n                            <td className=\"text-center\">\r\n                                <CyberButton classNames=\"btn-contained-primary\" variant=\"contained\"\r\n                                             onClick={handleCards}>\r\n                                    <FontAwesomeIcon\r\n                                        icon={cards ? faThList : faThLarge}\r\n                                        title={cards ? 'Table' : 'Cards'}\r\n                                    />\r\n                                </CyberButton>\r\n                            </td>\r\n                            <td><p>Type</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={type}\r\n                                    onChange={handleType}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Volumes</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={volumes}\r\n                                    onChange={handleVolumes}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                            <td><p>Chapters</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={chapters}\r\n                                    onChange={handleChapters}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Genres</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={genres}\r\n                                    onChange={handleGenres}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                            <td><p>MAL Score</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={mal_score}\r\n                                    onChange={handleMalScore}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Aired</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={aired}\r\n                                    onChange={handleAired}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <CyberButton variant=\"outlined\" title={'Save settings'} onClick={() => {\r\n                        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings, true));\r\n                        handleClose(false);\r\n                    }}>\r\n                        Save\r\n                    </CyberButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction UserBrowseErogeDisplaySettingsDialog(props) {\r\n    let settings = {};\r\n    Object.assign(settings, props.user_display_settings);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [cards, setCards] = React.useState(settings[UserErogeDisplaySettingsSchema.cards]);\r\n    const [type, setType] = React.useState(settings[UserErogeDisplaySettingsSchema.type]);\r\n    const [censorship, setCensorship] = React.useState(settings[UserErogeDisplaySettingsSchema.censorship]);\r\n    const [language, setLanguage] = React.useState(settings[UserErogeDisplaySettingsSchema.language]);\r\n    const [platforms, setPlatforms] = React.useState(settings[UserErogeDisplaySettingsSchema.platforms]);\r\n    const [tags, setTags] = React.useState(settings[UserErogeDisplaySettingsSchema.tags]);\r\n    const [hg_score, setHgScore] = React.useState(settings[UserErogeDisplaySettingsSchema.hg_score]);\r\n\r\n    const handleClickOpen = () => {\r\n        setCards(settings[UserErogeDisplaySettingsSchema.cards]);\r\n        setType(settings[UserErogeDisplaySettingsSchema.type]);\r\n        setCensorship(settings[UserErogeDisplaySettingsSchema.censorship]);\r\n        setLanguage(settings[UserErogeDisplaySettingsSchema.language]);\r\n        setPlatforms(settings[UserErogeDisplaySettingsSchema.platforms]);\r\n        setTags(settings[UserErogeDisplaySettingsSchema.tags]);\r\n        setHgScore(settings[UserErogeDisplaySettingsSchema.hg_score]);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (reset= true) => {\r\n        if (reset) {\r\n            let previous_settings = {};\r\n            Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_eroge_display_settings]);\r\n            store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, previous_settings));\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleCards = () => {\r\n        setCards(!cards);\r\n        settings[UserErogeDisplaySettingsSchema.cards] = !cards;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleType = (e) => {\r\n        setType(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.type] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleCensorship = (e) => {\r\n        setCensorship(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.censorship] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleLanguage = (e) => {\r\n        setLanguage(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.language] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handlePlatforms = (e) => {\r\n        setPlatforms(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.platforms] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleTags = (e) => {\r\n        setTags(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.tags] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleHgScore = (e) => {\r\n        setHgScore(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.hg_score] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-browse-display-settings-dialog-container\">\r\n            <CyberButton variant=\"outlined\" onClick={handleClickOpen} title={'Display settings'}>\r\n                <FontAwesomeIcon icon={faCog}/>\r\n            </CyberButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                id=\"User-Browse-Display-Settings-Dialog\"\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle>User settings</DialogTitle>\r\n                <DialogContent className=\"settings-wrapper\">\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td><p>Titles</p></td>\r\n                            <td className=\"text-center\">\r\n                                <CyberButton classNames=\"btn-contained-primary\" variant=\"contained\"\r\n                                             onClick={handleCards}>\r\n                                    <FontAwesomeIcon\r\n                                        icon={cards ? faThList : faThLarge}\r\n                                        title={cards ? 'Table' : 'Cards'}\r\n                                    />\r\n                                </CyberButton>\r\n                            </td>\r\n                            <td><p>Type</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={type}\r\n                                    onChange={handleType}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Censorship</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={censorship}\r\n                                    onChange={handleCensorship}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                            <td><p>Language</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={language}\r\n                                    onChange={handleLanguage}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Platforms</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={platforms}\r\n                                    onChange={handlePlatforms}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                            <td><p>Tags</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={tags}\r\n                                    onChange={handleTags}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>HG Score</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={hg_score}\r\n                                    onChange={handleHgScore}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <CyberButton variant=\"outlined\" title={'Save settings'} onClick={() => {\r\n                        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings, true));\r\n                        handleClose(false);\r\n                    }}>\r\n                        Save\r\n                    </CyberButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown, faFilter, faSortAmountDown, faSortAmountDownAlt, faTimes, faUndoAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {setCookieShowFilters} from \"../../../actions/cookies\";\r\nimport {filterTitles, getResetValuesFromBranch} from \"../../browse/functions\";\r\nimport {ApiResult} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {FilterSchema, FilterSchemaType} from \"./field_names\";\r\nimport store from \"../../../store\";\r\n\r\nimport PresetFilters from \"./PresetFilters\";\r\nimport {setPreset} from \"./functions\";\r\nimport {playClickSound} from \"../sounds\";\r\nimport UserDisplaySettingsDialog from \"./UserBrowseDisplaySettings\";\r\n\r\nimport '../../../assets/css/filters.css'\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nfunction getSliderLabel(values, max, label_name) {\r\n    let value_2 = `${values[1]}`;\r\n    if (values[1] === max)\r\n        value_2 = `${values[1] - 1}+`;\r\n    return `${values[0]} to ${value_2} ${label_name.split('_')[0]}`\r\n}\r\n\r\nfunction checkSliderDefaults(values, min, max) {\r\n    return !(parseInt(values[0]) === min && parseInt(values[1]) === max);\r\n}\r\n\r\nfunction getGenreImgSrc(name, values) {\r\n    const img_name = name.toLowerCase().replaceAll(' ', '_');\r\n    let ext = 'jpg';\r\n    if (values.indexOf(name) >= 0) ext = 'gif';\r\n    return `/images/genre_icons/${img_name}.${ext}`\r\n}\r\n\r\nfunction getOrderIcon(order, active) {\r\n    let ordering = order;\r\n    if (ordering.indexOf('-') === 0 && ordering.replace('-', '') === active)\r\n        return faSortAmountDown;\r\n    return faSortAmountDownAlt\r\n}\r\n\r\nfunction getOrderValue(order, active) {\r\n    return order.replace('-', '') === active;\r\n}\r\n\r\n/**\r\n * Adjusts the height of the filters wrapper based on\r\n * active filters, if no filters are active, the height is set to 0\r\n */\r\nfunction changeHeightOfActiveFiltersWrapperOnChange() {\r\n    let active_filters = document.getElementById('Active-Filters');\r\n    if (active_filters) {\r\n        if (active_filters.childNodes.length > 0) active_filters.parentNode.style.height = 'auto';\r\n        else active_filters.parentNode.style.height = '0';\r\n    }\r\n}\r\n\r\n// noinspection JSIgnoredPromiseFromCall,JSUnresolvedVariable\r\nclass TitlesFilter extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Previous filters from cookies */\r\n        title_filters: PropTypes.object.isRequired,\r\n        /** Selected season, if called from display season page */\r\n        season: PropTypes.object,\r\n        /** User list object {pk: selected filter:} if called from user list page */\r\n        list: PropTypes.object,\r\n        /** Main filters */\r\n        main_filters: PropTypes.array,\r\n        /** Regular filters */\r\n        regular_filters: PropTypes.array,\r\n        /** Wide filters (ex. Genres) */\r\n        wide_filters: PropTypes.array,\r\n        /** Ordering filters */\r\n        order_filters: PropTypes.array,\r\n        /** Preset filters for the user */\r\n        presets: PropTypes.array,\r\n        /** User display settings for the titles */\r\n        user_display_settings: PropTypes.object,\r\n        /** How many items per page to display, if undefined, the default is 100 */\r\n        pagination: PropTypes.number,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onGenreEnter = this.onGenreEnter.bind(this);\r\n        this.onGenreLeave = this.onGenreLeave.bind(this);\r\n        this.onGenreChange = this.onGenreChange.bind(this);\r\n        this.checkFormValuesFromCookies = this.checkFormValuesFromCookies.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onReset = this.onReset.bind(this);\r\n\r\n        this.state = this.props.title_filters;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (JSON.stringify(prevProps.title_filters) !== JSON.stringify(this.props.title_filters))\r\n            this.setState(this.props.title_filters);\r\n    }\r\n\r\n    /**\r\n     * Update the Formik values with the cookie filter values, because sometimes\r\n     * when filtering from a user list the values don't update correctly.\r\n     * @returns {boolean} True if the values should be updated\r\n     */\r\n    checkFormValuesFromCookies() {\r\n        let filters = Object.assign({}, this.state);\r\n        let cookie_filters = Object.assign({}, this.props.title_filters);\r\n        return JSON.stringify(filters) !== JSON.stringify(cookie_filters);\r\n    }\r\n\r\n    /**\r\n     * When entering a genre div, change the image .jpg to .gif.\r\n     * @param genreFilter {String} name of the genre.\r\n     */\r\n    onGenreEnter(genreFilter) {\r\n        let img = document.getElementById(\"img_\" + genreFilter);\r\n        if (!img.classList.contains('active-genre'))\r\n            img.src = img.src.slice(0, -3) + 'gif';\r\n    }\r\n\r\n    /**\r\n     * When leaving the genre div revert the .gif image back to .jpg.\r\n     * @param genreFilter {String} name of the genre.\r\n     */\r\n    onGenreLeave(genreFilter) {\r\n        let img = document.getElementById(\"img_\" + genreFilter);\r\n        if (!img.classList.contains('active-genre'))\r\n            img.src = img.src.slice(0, -3) + 'jpg';\r\n    }\r\n\r\n    /**\r\n     * When clicking on a genre set it as active by adding a css\r\n     * class, or remove the class if it was already active.\r\n     * @param e {Object} Mouse event.\r\n     */\r\n    onGenreChange(e) {\r\n        if (e.target.checked)\r\n            e.target.nextSibling.firstChild.classList.add(\"active-genre\");\r\n        else\r\n            e.target.nextSibling.firstChild.classList.remove(\"active-genre\");\r\n    };\r\n\r\n    /**\r\n     * Called on submit of the filters, calls the filter\r\n     * title action with the active filters\r\n     * @param e {Object} Mouse event\r\n     * @param preset {Object} Optional, Filter preset, default null\r\n     */\r\n    onSubmit(e, preset = null) {\r\n        e.preventDefault();\r\n\r\n        if (preset)\r\n            this.setState(preset, () => {\r\n                this.onSubmit(e)\r\n            });\r\n        else filterTitles(this.props.branch, 1, this.state, this.props.season, this.props.list, this.props.pagination);\r\n    }\r\n\r\n    /**\r\n     * Called on reset of the filters, resets the active\r\n     * filters and ordering to default, and calls the filter title action\r\n     */\r\n    onReset() {\r\n        const reset_values = getResetValuesFromBranch(this.props.branch);\r\n        this.setState(reset_values);\r\n        setPreset(this.props.branch, {});\r\n        filterTitles(this.props.branch, 1, reset_values, this.props.season, this.props.list, this.props.pagination);\r\n    }\r\n\r\n    render() {\r\n        const uses_presets = this.props.presets !== undefined;\r\n        const field_names = {\r\n            search: 'search',\r\n            ordering: 'ordering',\r\n        };\r\n        changeHeightOfActiveFiltersWrapperOnChange();\r\n\r\n        return (\r\n            <Grid id=\"Filters\" container>\r\n                <Grid item xs={12}>\r\n                    <form className=\"filters-form\" onSubmit={this.onSubmit}>\r\n                        <Grid container>\r\n                            <Grid item xs={12} sm={6} md={4} lg={3} className=\"search-field-container\">\r\n                                <TextField\r\n                                    label=\"Search\"\r\n                                    className=\"form-control search-field\"\r\n                                    value={this.state[field_names.search]}\r\n                                    name={field_names.search}\r\n                                    onChange={(e) => {\r\n                                        this.setState({[e.target.name]: e.target.value});\r\n                                    }}/>\r\n                            </Grid>\r\n                            <Grid item xs={0} md={uses_presets ? 3 : 5} lg={uses_presets ? 4 : 6}>\r\n                                <p className=\"total-results\">Results: <span className=\"total-results-span\">\r\n                                {!this.props.titles_loading ?\r\n                                    this.props.filtered_titles[ApiResult.count] : 'Loading..'}</span>\r\n                                </p>\r\n                            </Grid>\r\n                            {uses_presets ? <Grid item xs={12} md={2}>\r\n                                <PresetFilters\r\n                                    branch={this.props.branch}\r\n                                    presets={this.props.presets}\r\n                                    filters={this.state}\r\n                                    onSubmit={this.onSubmit}/>\r\n                            </Grid> : null}\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton variant=\"outlined\" onClick={() => {\r\n                                    store.dispatch(setCookieShowFilters(!this.props.show_filters))\r\n                                }} title={this.props.show_filters ? 'Hide advanced filters' : 'Show advanced filters'}>\r\n                                    <FontAwesomeIcon\r\n                                        icon={this.props.show_filters ? faTimes : faArrowDown}/></CyberButton>\r\n                            </Grid>\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton variant=\"outlined\" onClick={this.onReset} title={'Reset filters'}>\r\n                                    <FontAwesomeIcon icon={faUndoAlt}/></CyberButton>\r\n                            </Grid>\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton type=\"submit\" variant=\"outlined\" title={'Filter'}>\r\n                                    <FontAwesomeIcon icon={faFilter}/></CyberButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12} className=\"text-center\" style={{height: 0}}>\r\n                                <div id=\"Active-Filters\" className=\"active-filters-wrapper\">\r\n                                    {this.props.main_filters ? this.props.main_filters.map((value, x) => (\r\n                                        this.state[value[FilterSchema.filter_name]] ?\r\n                                            <Chip key={x} className={`chip-${value[FilterSchema.color]}`}\r\n                                                  size=\"small\" label={value[FilterSchema.label]}/> : null\r\n                                    )) : null}\r\n                                    {this.props.regular_filters ? this.props.regular_filters.map((field) => (\r\n                                        field[FilterSchema.type] === FilterSchemaType.standard ?\r\n                                            this.state[field[FilterSchema.filter_name]].map((filter, i) => (\r\n                                                <Chip key={i} className={`chip-${field[FilterSchema.color]}`}\r\n                                                      size=\"small\" label={filter}/>\r\n                                            )) : field[FilterSchema.type] === FilterSchemaType.slider ?\r\n                                            checkSliderDefaults(this.state[field[FilterSchema.filter_name]],\r\n                                                field[FilterSchema.min], field[FilterSchema.max]) ?\r\n                                                <Chip className={`chip-${field[FilterSchema.color]}`} size=\"small\"\r\n                                                      label={getSliderLabel(this.state[field[FilterSchema.filter_name]], field[FilterSchema.max], field[FilterSchema.filter_name])}/>\r\n                                                : null : null\r\n                                    )) : null}\r\n                                    {this.props.wide_filters ? this.props.wide_filters.map((field) => (\r\n                                        this.state[field[FilterSchema.filter_name]].map((filter, i) => (\r\n                                            <Chip key={i} className={`chip-${field[FilterSchema.color]}`}\r\n                                                  size=\"small\" label={filter}/>\r\n                                        ))\r\n                                    )) : null}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <div id=\"filters-collapsable\" className={this.props.show_filters ? 'show-filters' : null}>\r\n                            <Grid container>\r\n                                {this.props.main_filters ?\r\n                                    <Grid item xs={12} md={6} lg={4} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">Main Filters</h6>\r\n                                        {this.props.main_filters.map((value, x) => (\r\n                                            <div key={x} className=\"input-group\">\r\n                                                <input id={value[FilterSchema.filter_name]}\r\n                                                       type=\"checkbox\"\r\n                                                       name={value[FilterSchema.filter_name]}\r\n                                                       hidden=\"hidden\"\r\n                                                       checked={this.state[value[FilterSchema.filter_name]]}\r\n                                                       onChange={(e) => {\r\n                                                           this.setState({\r\n                                                               [e.target.name]: !this.state[value[FilterSchema.filter_name]]\r\n                                                           });\r\n                                                       }}\r\n                                                />\r\n                                                <label htmlFor={value[FilterSchema.filter_name]}\r\n                                                       className={`label-${value[FilterSchema.color]}`}>\r\n                                                    {value[FilterSchema.label]}</label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </Grid> : null}\r\n\r\n                                {this.props.regular_filters ? this.props.regular_filters.map((field, x) => (\r\n                                    <Grid key={x} item xs={12} md={6} lg={4} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">{field[FilterSchema.filter_name].replaceAll('_', ' ')}</h6>\r\n                                        {field[FilterSchema.type] === FilterSchemaType.standard ? field[FilterSchema.content].map((filter, y) => (\r\n                                            <div key={y} className=\"input-group\">\r\n                                                <input\r\n                                                    id={`${field[FilterSchema.filter_name]}_${filter}`}\r\n                                                    type=\"checkbox\"\r\n                                                    name={field[FilterSchema.filter_name]}\r\n                                                    onChange={(e) => {\r\n                                                        if (this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0) {\r\n                                                            let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                            filters.splice(filters.indexOf(filter), 1);\r\n                                                            this.setState({\r\n                                                                [e.target.name]: filters\r\n                                                            });\r\n                                                        } else {\r\n                                                            let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                            filters.push(filter);\r\n                                                            this.setState({\r\n                                                                [e.target.name]: filters\r\n                                                            });\r\n                                                        }\r\n                                                    }}\r\n                                                    checked={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0}\r\n                                                    hidden=\"hidden\"/>\r\n                                                <label\r\n                                                    htmlFor={`${field[FilterSchema.filter_name]}_${filter}`}\r\n                                                    className={`label-${field[FilterSchema.color]}`}>{filter}</label>\r\n                                            </div>\r\n                                        )) : field[FilterSchema.type] === FilterSchemaType.slider ?\r\n                                            <Slider\r\n                                                className=\"slider-group\"\r\n                                                id={field[FilterSchema.filter_name]}\r\n                                                value={this.state[field[FilterSchema.filter_name]]}\r\n                                                onChange={(event, value) => {\r\n                                                    this.setState({\r\n                                                        [field[FilterSchema.filter_name]]: value\r\n                                                    })\r\n                                                }}\r\n                                                max={field[FilterSchema.max]}\r\n                                                min={field[FilterSchema.min]}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                aria-labelledby=\"range-slider\"\r\n                                                marks={field[FilterSchema.marks]}\r\n                                            />\r\n                                            : null}\r\n                                    </Grid>\r\n                                )) : null}\r\n                            </Grid>\r\n\r\n                            {this.props.wide_filters ? <Grid container>\r\n                                {this.props.wide_filters.map((field, x) => (\r\n                                    <Grid key={x} item xs={12} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">{field[FilterSchema.filter_name]}</h6>\r\n                                        {field[FilterSchema.content].map((filter, i) => (\r\n                                            <div key={i} className=\"genre-container\">\r\n                                                <input id={filter} type=\"checkbox\" hidden=\"hidden\"\r\n                                                       name={field[FilterSchema.filter_name]}\r\n                                                       onChange={(e) => {\r\n                                                           if (this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0) {\r\n                                                               let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                               filters.splice(filters.indexOf(filter), 1);\r\n                                                               this.setState({\r\n                                                                   [e.target.name]: filters\r\n                                                               });\r\n                                                           } else {\r\n                                                               let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                               filters.push(filter);\r\n                                                               this.setState({\r\n                                                                   [e.target.name]: filters\r\n                                                               });\r\n                                                           }\r\n                                                       }}\r\n                                                       onClick={this.onGenreChange}\r\n                                                       checked={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0}\r\n                                                />\r\n                                                <label htmlFor={filter}\r\n                                                       onMouseEnter={() => {\r\n                                                           this.onGenreEnter(filter)\r\n                                                       }}\r\n                                                       onMouseLeave={() => {\r\n                                                           this.onGenreLeave(filter)\r\n                                                       }}>\r\n                                                    <img id={`img_${filter}`}\r\n                                                         className={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0 ? 'active-genre' : null}\r\n                                                         src={getGenreImgSrc(filter, this.state[field[FilterSchema.filter_name]])}\r\n                                                         alt=\"\"/>\r\n                                                    <div><p>{filter}</p></div>\r\n                                                </label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid> : null}\r\n                        </div>\r\n\r\n                        <Grid container className=\"ordering-container\">\r\n                            {this.props.order_filters ? <>\r\n                                <Grid item xs={12}>\r\n                                    {this.props.order_filters.map((order, i) => (\r\n                                        <div key={i} className=\"input-group\" onMouseLeave={() => {\r\n                                            let container = document.getElementById(`order_btn_container_${order}`);\r\n                                            container.classList.remove('hovered-order-button-container')\r\n                                        }}>\r\n                                            <label id={`order_label_${order}`}\r\n                                                   className={getOrderValue(this.state[field_names.ordering], order) ?\r\n                                                       'no-hover-color active-order-label' : 'no-hover-color no-border'}\r\n                                                   onMouseEnter={() => {\r\n                                                       let container = document.getElementById(`order_btn_container_${order}`);\r\n                                                       let width = document.getElementById(`order_label_${order}`).offsetWidth;\r\n                                                       container.classList.add('hovered-order-button-container');\r\n                                                       container.setAttribute('style', `margin-left: calc(${width / 2}px - 35px);`)\r\n                                                   }}>\r\n                                                {getOrderValue(this.state[field_names.ordering], order) ? <FontAwesomeIcon\r\n                                                    icon={getOrderIcon(this.state[field_names.ordering], order)}/> : null}\r\n                                                <span className=\"order-label\">{order.replaceAll('_', ' ')}</span>\r\n                                            </label>\r\n                                            <div id={`order_btn_container_${order}`} className=\"order-buttons-container\">\r\n                                                <div className=\"order-btn\">\r\n                                                    <input id={`order_dc_${order}`} type=\"radio\" value={order}\r\n                                                           checked={getOrderValue(this.state[field_names.ordering], order)}\r\n                                                           hidden=\"hidden\" onClick={(e) => {\r\n                                                        playClickSound();\r\n                                                        this.setState({\r\n                                                            [field_names.ordering]: `-${order}`\r\n                                                        }, () => {\r\n                                                            this.onSubmit(e);\r\n                                                        });\r\n                                                    }}/>\r\n                                                    <label htmlFor={`order_dc_${order}`}>\r\n                                                        <FontAwesomeIcon icon={faSortAmountDown}/>\r\n                                                    </label>\r\n                                                </div>\r\n                                                <div className=\"order-btn\">\r\n                                                    <input id={`order_ac_${order}`} type=\"radio\" value={order}\r\n                                                           checked={getOrderValue(this.state[field_names.ordering], order)}\r\n                                                           hidden=\"hidden\" onClick={(e) => {\r\n                                                        playClickSound();\r\n                                                        this.setState({\r\n                                                            [field_names.ordering]: e.target.value\r\n                                                        }, () => {\r\n                                                            this.onSubmit(e);\r\n                                                        });\r\n                                                    }}/>\r\n                                                    <label htmlFor={`order_ac_${order}`}>\r\n                                                        <FontAwesomeIcon icon={faSortAmountDownAlt}/>\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </Grid>\r\n                            </> : <Grid item xs={11}/>}\r\n                        </Grid>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    show_filters: state.cookies.show_filters,\r\n    searchable_titles: state.anime.searchable_titles,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TitlesFilter)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {\r\n    ANIME_AUDIO_CHANNELS, ANIME_GENRES, ANIME_ORDERINGS,\r\n    ANIME_RATING_SHORT,\r\n    ANIME_STATUSES,\r\n    ANIME_TYPES,\r\n    ANIME_VIDEO_QUALITIES,\r\n    BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES, USER_ANIME_ORDERINGS, USER_ANIME_STATUSES, USER_ANIME_STATUSES_ARRAY\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {FilterLabels, AnimeFilterNames, FilterSchemaType} from \"../field_names\";\r\nimport PropTypes from \"prop-types\";\r\nimport {User} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getAnimeFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\n\r\n\r\nclass AnimeFilters extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n        /** User List object, {pk: selected_filter:} */\r\n        list: PropTypes.object,\r\n        /** How many items per page to display, if undefined, the default is 100 */\r\n        pagination: PropTypes.number,\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getAnimeFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': AnimeFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n            {'name': AnimeFilterNames.is_downloading, 'label': FilterLabels.is_downloading, 'color': 'default'},\r\n            {'name': AnimeFilterNames.cannot_download, 'label': FilterLabels.cannot_download, 'color': 'danger'},\r\n            {'name': AnimeFilterNames.deleted_by_MAL, 'label': FilterLabels.deleted_by_MAL, 'color': 'danger'},\r\n            {'name': AnimeFilterNames.pending_by_MAL, 'label': FilterLabels.pending_by_MAL, 'color': 'warning'},\r\n        ];\r\n        const episode_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 36,\r\n                label: '36',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const length_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 30,\r\n                label: '30',\r\n            },\r\n            {\r\n                value: 61,\r\n                label: '60+',\r\n            },\r\n        ];\r\n        const initial = new FILTER_ANIME_INITIAL_VALUES();\r\n        const values = initial.VALUES;\r\n        let regular_filters = [\r\n            {'name': AnimeFilterNames.type, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_TYPES},\r\n            {'name': AnimeFilterNames.status, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_STATUSES},\r\n            {'name': AnimeFilterNames.rating_short, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_RATING_SHORT},\r\n            {'name': AnimeFilterNames.episodes_range, 'type': FilterSchemaType.slider, 'marks': episode_marks, 'min': values.episodes_range[0], 'max': values.episodes_range[1], 'color': 'primary', 'content': null},\r\n            {'name': AnimeFilterNames.length_range, 'type': FilterSchemaType.slider, 'marks': length_marks, 'min': values.length_range[0], 'max': values.length_range[1], 'color': 'primary', 'content': null},\r\n            {'name': AnimeFilterNames.video_quality, 'type': FilterSchemaType.standard, 'color': 'secondary', 'content': ANIME_VIDEO_QUALITIES},\r\n            {'name': AnimeFilterNames.audio_channel, 'type': FilterSchemaType.standard, 'color': 'secondary', 'content': ANIME_AUDIO_CHANNELS},\r\n        ];\r\n\r\n        let wide_filters = [\r\n            {'name': AnimeFilterNames.genres, 'type': FilterSchemaType.wide, 'color': 'primary', 'content': ANIME_GENRES},\r\n        ];\r\n\r\n        let orderings = ANIME_ORDERINGS;\r\n        if (!isEmpty(this.props.list)) {\r\n            orderings = orderings.concat(USER_ANIME_ORDERINGS);\r\n        } else {\r\n            if (this.props.user_authenticated)\r\n                regular_filters.push(\r\n                    {'name': AnimeFilterNames.user_exclude, 'type': FilterSchemaType.standard, 'color': 'info', 'content': USER_ANIME_STATUSES_ARRAY},\r\n                );\r\n        }\r\n\r\n        let anime_filters = this.props.anime_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            anime_filters = this.props.anime_season_filters;\r\n        else if (!isEmpty(this.props.list))\r\n            anime_filters = this.props.anime_list_filters;\r\n        \r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_ANIME}\r\n                titles_loading={this.props.anime_loading}\r\n                filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n                filtered_titles={this.props.filtered_anime}\r\n                title_filters={anime_filters}\r\n                season={this.props.season}\r\n                list={this.props.list}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={orderings}\r\n                presets={this.props.anime_filter_presets}\r\n                user_display_settings={isEmpty(this.props.list) ?\r\n                    this.props.user_anime_display_settings : this.props.user_anime_list_display_settings}\r\n                pagination={this.props.pagination}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_browse_filters: state.cookies.anime_browse_filters,\r\n    anime_season_filters: state.cookies.anime_season_filters,\r\n    anime_list_filters: state.cookies.anime_list_filters,\r\n    anime_filter_presets: state.users.anime_filter_presets,\r\n    user_anime_display_settings: state.users.user_anime_display_settings,\r\n    user_anime_list_display_settings: state.users.user_anime_list_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    BRANCH_MANGA,\r\n    FILTER_MANGA_INITIAL_VALUES,\r\n    MANGA_GENRES, MANGA_ORDERINGS,\r\n    MANGA_STATUSES,\r\n    MANGA_TYPES, USER_MANGA_STATUSES_ARRAY\r\n} from \"../../../../globals\";\r\nimport {FilterLabels, MangaFilterNames, FilterSchemaType} from \"../field_names\";\r\nimport {getMangaFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\nclass MangaFilters extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n        /** User List object, {pk: selected_filter:} */\r\n        list: PropTypes.object,\r\n        /** How many items per page to display, if undefined, the default is 100 */\r\n        pagination: PropTypes.number,\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getMangaFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': MangaFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n            {'name': MangaFilterNames.is_downloading, 'label': FilterLabels.is_downloading, 'color': 'default'},\r\n            {'name': MangaFilterNames.cannot_download, 'label': FilterLabels.cannot_download, 'color': 'danger'},\r\n            {'name': MangaFilterNames.deleted_by_MAL, 'label': FilterLabels.deleted_by_MAL, 'color': 'danger'},\r\n            {'name': MangaFilterNames.pending_by_MAL, 'label': FilterLabels.pending_by_MAL, 'color': 'warning'},\r\n        ];\r\n        const volumes_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 36,\r\n                label: '36',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const chapters_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 30,\r\n                label: '30',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const initial = new FILTER_MANGA_INITIAL_VALUES();\r\n        const values = initial.VALUES;\r\n        let regular_filters = [\r\n            {\r\n                'name': MangaFilterNames.type,\r\n                'type': FilterSchemaType.standard,\r\n                'color': 'primary',\r\n                'content': MANGA_TYPES\r\n            },\r\n            {\r\n                'name': MangaFilterNames.status,\r\n                'type': FilterSchemaType.standard,\r\n                'color': 'primary',\r\n                'content': MANGA_STATUSES\r\n            },\r\n            {\r\n                'name': MangaFilterNames.volumes_range,\r\n                'type': FilterSchemaType.slider,\r\n                'marks': volumes_marks,\r\n                'min': values.volumes_range[0],\r\n                'max': values.volumes_range[1],\r\n                'color': 'primary',\r\n                'content': null\r\n            },\r\n            {\r\n                'name': MangaFilterNames.chapters_range,\r\n                'type': FilterSchemaType.slider,\r\n                'marks': chapters_marks,\r\n                'min': values.chapters_range[0],\r\n                'max': values.chapters_range[1],\r\n                'color': 'primary',\r\n                'content': null\r\n            },\r\n        ];\r\n\r\n        if (this.props.user_authenticated) {\r\n            regular_filters.push(\r\n                {\r\n                    'name': MangaFilterNames.user_exclude,\r\n                    'type': FilterSchemaType.standard,\r\n                    'color': 'info',\r\n                    'content': USER_MANGA_STATUSES_ARRAY\r\n                },\r\n            )\r\n        }\r\n\r\n        let wide_filters = [\r\n            {\r\n                'name': MangaFilterNames.genres,\r\n                'type': FilterSchemaType.wide,\r\n                'color': 'primary',\r\n                'content': MANGA_GENRES\r\n            },\r\n        ];\r\n\r\n        let manga_filters = this.props.manga_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            manga_filters = this.props.manga_season_filters;\r\n        else if (!isEmpty(this.props.list))\r\n            manga_filters = this.props.manga_list_filters;\r\n\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_MANGA}\r\n                titles_loading={this.props.manga_loading}\r\n                filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n                filtered_titles={this.props.filtered_manga}\r\n                title_filters={manga_filters}\r\n                season={this.props.season}\r\n                list={this.props.list}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={MANGA_ORDERINGS}\r\n                presets={this.props.manga_filter_presets}\r\n                user_display_settings={isEmpty(this.props.list) ?\r\n                    this.props.user_manga_display_settings : this.props.user_manga_list_display_settings}\r\n                pagination={this.props.pagination}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_browse_filters: state.cookies.manga_browse_filters,\r\n    manga_season_filters: state.cookies.manga_season_filters,\r\n    manga_list_filters: state.cookies.manga_list_filters,\r\n    manga_filter_presets: state.users.manga_filter_presets,\r\n    user_manga_display_settings: state.users.user_manga_display_settings,\r\n    user_manga_list_display_settings: state.users.user_manga_list_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    BRANCH_EROGE,\r\n    EROGE_CENSORSHIPS,\r\n    EROGE_LANGUAGES, EROGE_ORDERINGS,\r\n    EROGE_PLATFORMS, EROGE_TAGS,\r\n    EROGE_TYPES,\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {ErogeFilterNames, FilterLabels, FilterSchemaType} from \"../field_names\";\r\nimport {getErogeFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\n\r\n\r\nclass ErogeFilters extends Component {\r\n    static propTypes = {\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getErogeFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': ErogeFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n        ];\r\n        let regular_filters = [\r\n            {'name': ErogeFilterNames.type, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_TYPES},\r\n            {'name': ErogeFilterNames.platforms, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_PLATFORMS},\r\n            {'name': ErogeFilterNames.censorship, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_CENSORSHIPS},\r\n            {'name': ErogeFilterNames.language, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_LANGUAGES},\r\n        ];\r\n        let wide_filters = [\r\n            {'name': ErogeFilterNames.tags, 'type': FilterSchemaType.wide, 'color': 'primary', 'content': EROGE_TAGS},\r\n        ];\r\n\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_EROGE}\r\n                titles_loading={this.props.eroge_loading}\r\n                filtered_titles_loaded={this.props.filtered_eroge_loaded}\r\n                filtered_titles={this.props.filtered_eroge}\r\n                title_filters={this.props.eroge_browse_filters}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={EROGE_ORDERINGS}\r\n                presets={this.props.eroge_filter_presets}\r\n                user_display_settings={this.props.user_eroge_display_settings}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    filtered_eroge_loaded: state.eroge.filtered_eroge_loaded,\r\n    filtered_eroge: state.eroge.filtered_eroge,\r\n    eroge_browse_filters: state.cookies.eroge_browse_filters,\r\n    eroge_filter_presets: state.users.eroge_filter_presets,\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ErogeFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {\r\n    BRANCH_CHARACTERS, CHARACTERS_ORDERINGS,\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\n\r\n\r\nclass CharactersFilters extends Component {\r\n    render() {\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_CHARACTERS}\r\n                titles_loading={this.props.characters_loading}\r\n                filtered_titles_loaded={this.props.filtered_characters_loaded}\r\n                filtered_titles={this.props.filtered_characters}\r\n                title_filters={this.props.characters_filters}\r\n                order_filters={CHARACTERS_ORDERINGS}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    characters_loading: state.characters.characters_loading,\r\n    filtered_characters_loaded: state.characters.filtered_characters_loaded,\r\n    filtered_characters: state.characters.filtered_characters,\r\n    characters_filters: state.cookies.characters_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharactersFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE, PEOPLE_ORDERINGS} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\n\r\n\r\nclass PeopleFilters extends Component {\r\n    render() {\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_PEOPLE}\r\n                titles_loading={this.props.people_loading}\r\n                filtered_titles_loaded={this.props.filtered_people_loaded}\r\n                filtered_titles={this.props.filtered_people}\r\n                title_filters={this.props.people_filters}\r\n                order_filters={PEOPLE_ORDERINGS}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people_loading: state.people.people_loading,\r\n    filtered_people_loaded: state.people.filtered_people_loaded,\r\n    filtered_people: state.people.filtered_people,\r\n    people_filters: state.cookies.people_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PeopleFilters)\r\n","import {\r\n    ANIME_BROWSE_TAB_NAME,\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA,\r\n    BRANCH_PEOPLE,\r\n    BROWSE_ANIME_ITEMS_PER_PAGE,\r\n    BROWSE_CHARACTERS_ITEMS_PER_PAGE, BROWSE_EROGE_ITEMS_PER_PAGE,\r\n    BROWSE_MANGA_ITEMS_PER_PAGE, BROWSE_PEOPLE_ITEMS_PER_PAGE,\r\n    CHARACTERS_BROWSE_TAB_NAME,\r\n    EROGE_BROWSE_TAB_NAME,\r\n    FILTER_ANIME_INITIAL_VALUES,\r\n    FILTER_CHARACTERS_INITIAL_VALUES,\r\n    FILTER_EROGE_INITIAL_VALUES,\r\n    FILTER_MANGA_INITIAL_VALUES,\r\n    MANGA_BROWSE_TAB_NAME,\r\n    PEOPLE_BROWSE_TAB_NAME\r\n} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {filterAnime} from \"../../actions/anime\";\r\nimport {filterManga} from \"../../actions/manga\";\r\nimport {filterCharacters} from \"../../actions/characters\";\r\nimport {filterEroge} from \"../../actions/eroge\";\r\nimport AnimeFilters from \"../layout/filters/anime/AnimeFilters\";\r\nimport React from \"react\";\r\nimport MangaFilters from \"../layout/filters/manga/MangaFilters\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../actions/users\";\r\nimport ErogeFilters from \"../layout/filters/eroge/ErogeFilters\";\r\nimport CharactersFilters from \"../layout/filters/characters/CharactersFilters\";\r\nimport {filterPeople} from \"../../actions/people\";\r\nimport PeopleFilters from \"../layout/filters/people/PeopleFilters\";\r\nimport {UserAnimeListDisplaySettingsSchema, UserMangaListDisplaySettingsSchema} from \"../../models\";\r\nimport {isEmpty} from \"../functions\";\r\n\r\n\r\nexport function getTabName(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_BROWSE_TAB_NAME;\r\n        case BRANCH_MANGA:\r\n            return MANGA_BROWSE_TAB_NAME;\r\n        case BRANCH_CHARACTERS:\r\n            return CHARACTERS_BROWSE_TAB_NAME;\r\n        case BRANCH_EROGE:\r\n            return EROGE_BROWSE_TAB_NAME;\r\n        case BRANCH_PEOPLE:\r\n            return PEOPLE_BROWSE_TAB_NAME;\r\n        default:\r\n            return 'Browse'\r\n    }\r\n}\r\n\r\n\r\nexport function getFiltersFromBranch(branch, season, list, pagination) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AnimeFilters season={season} list={list} pagination={pagination}/>;\r\n        case BRANCH_MANGA:\r\n            return <MangaFilters season={season} list={list} pagination={pagination}/>;\r\n        case BRANCH_CHARACTERS:\r\n            return <CharactersFilters/>;\r\n        case BRANCH_EROGE:\r\n            return <ErogeFilters/>;\r\n        case BRANCH_PEOPLE:\r\n            return <PeopleFilters/>;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getItemsPerPageFromBranch(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return BROWSE_ANIME_ITEMS_PER_PAGE;\r\n        case BRANCH_MANGA:\r\n            return BROWSE_MANGA_ITEMS_PER_PAGE;\r\n        case BRANCH_CHARACTERS:\r\n            return BROWSE_CHARACTERS_ITEMS_PER_PAGE;\r\n        case BRANCH_EROGE:\r\n            return BROWSE_EROGE_ITEMS_PER_PAGE;\r\n        case BRANCH_PEOPLE:\r\n            return BROWSE_PEOPLE_ITEMS_PER_PAGE;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getResetValuesFromBranch(branch) {\r\n    let values;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            values = new FILTER_ANIME_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_MANGA:\r\n            values = new FILTER_MANGA_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_CHARACTERS:\r\n            values = new FILTER_CHARACTERS_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_EROGE:\r\n            values = new FILTER_EROGE_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nexport function filterTitles(branch, page = 1, filters = undefined, season = undefined, list = undefined, pagination = undefined) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(filterAnime(page, filters, season, list, true, true, pagination));\r\n            // store.dispatch(getAnimeSearchableTitles());\r\n            store.dispatch(getLoggedInUserAnimeEntryStatuses());\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(filterManga(page, filters, season, list, true, true, pagination));\r\n            store.dispatch(getLoggedInUserMangaEntryStatuses());\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            store.dispatch(filterCharacters(page, filters));\r\n            return;\r\n        case BRANCH_PEOPLE:\r\n            store.dispatch(filterPeople(page, filters));\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(filterEroge(page, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {getTitleCoverImage} from \"../../functions\";\r\nimport {connect} from \"react-redux\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {formatTitle, UserCardButtons} from \"../cards/functions\";\r\nimport {formatTitleForRows} from \"./functions\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {CyberLink} from \"../common/common\";\r\nimport CardUserEditTitleEntry from \"../cards/CardUserEditTitleEntry\";\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\n\r\n\r\nclass TitleRow extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Object (Anime, Manga, etc.) */\r\n        title: PropTypes.object.isRequired,\r\n        /** Index number for the card */\r\n        index: PropTypes.number,\r\n        /** Status of the user entry for this title (Watching, Reading, Completed, etc.) */\r\n        user_status: PropTypes.string,\r\n        /** If the card should be in a small format (No chipsets, only title) */\r\n        mini: PropTypes.bool,\r\n        /** If the user edit/add buttons for the title should appear */\r\n        user_buttons: PropTypes.bool,\r\n        /** Custom classname for the title card container */\r\n        containerClassNames: PropTypes.string,\r\n        /** Custom classname for the title card */\r\n        classNames: PropTypes.string,\r\n        /** If true it the card will not use state to check if the cover image is\r\n         * loaded, it will directly add the img background to the card */\r\n        skip_img_preload: PropTypes.bool,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const row_title = formatTitleForRows(this.props.branch, this.props.title, this.props.user_status);\r\n        let img_url = getTitleCoverImage(row_title.cdn_cover_images, row_title.cover_images);\r\n\r\n        return <TableRow>\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                {this.props.index}\r\n            </TableCell>\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                <CyberLink to={row_title.link} classNames=\"row-image\">\r\n                    <img src={img_url}/>\r\n                </CyberLink>\r\n            </TableCell>\r\n            <TableCell component=\"th\" scope=\"row\" className=\"row-title-wrapper\">\r\n                <CyberLink to={row_title.link} classNames=\"row-title\">\r\n                    {row_title.chipset_header ? row_title.chipset_header.map(chip => (\r\n                        chip ? <Chip variant=\"default\" size=\"small\" className={`chip-${chip['color']} header-chip`}\r\n                                     label={chip['label']}/> : null\r\n                    )) : null}{' '}<span>{row_title.title}</span>\r\n                </CyberLink>\r\n            </TableCell>\r\n            {this.props.branch !== BRANCH_EROGE ? <TableCell component=\"th\" scope=\"row\" align=\"center\"\r\n                                                             className=\"row-user-buttons\">\r\n                <CardUserEditTitleEntry\r\n                    branch={this.props.branch}\r\n                    id={row_title.id}\r\n                    title={this.props.title}\r\n                    user_status={this.props.user_status}\r\n                />\r\n            </TableCell> : null}\r\n            {row_title.column_set.map((value, i) => (\r\n                <TableCell component=\"th\" scope=\"row\" align=\"center\" key={i}>\r\n                    {value ? value : <span className=\"color-gray\">---</span>}\r\n                </TableCell>\r\n            ))}\r\n        </TableRow>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_display_settings: state.users.user_anime_display_settings,  // This is here to rerender the cards\r\n    user_manga_display_settings: state.users.user_manga_display_settings,  // This is here to rerender the cards\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,  // This is here to rerender the cards\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TitleRow)\r\n","import {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA, BRANCH_PEOPLE} from \"../../../globals\";\r\nimport store from \"../../../store\";\r\nimport {formatContentDateByKnown} from \"../../functions\";\r\nimport {\r\n    Anime,\r\n    ANIME_SHORT_STATUS, Character, Eroge,\r\n    Manga,\r\n    MANGA_SHORT_STATUS, Person,\r\n    UserAnimeDisplaySettingsSchema, UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema\r\n} from \"../../../models\";\r\nimport {ANIME_DISPLAY, CHARACTERS_DISPLAY, EROGE_DISPLAY, MANGA_DISPLAY, PERSON_DISPLAY} from \"../../../urls\";\r\nimport {FilterSchema} from \"../filters/field_names\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faServer} from \"@fortawesome/free-solid-svg-icons\";\r\nimport React from \"react\";\r\nimport {getUserStatusChip} from \"../cards/functions\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\n\r\nexport function formatTitleForRows(branch, title, user_status) {\r\n    let start_date = '';\r\n    let end_date = '';\r\n    let card_title = {\r\n        id: 0,\r\n        link: '',\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: '',\r\n        chipset_header: [],\r\n        column_set: [],\r\n    };\r\n    let user_settings = {};\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            user_settings = store.getState().users.user_anime_display_settings;\r\n            start_date = formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Anime.air_end], title[Anime.air_end_known], true);\r\n\r\n            card_title.id = title[Anime.id];\r\n            card_title.link = ANIME_DISPLAY(title[Anime.id]);\r\n            card_title.cover_images = title[Anime.anime_cover_images];\r\n            card_title.cdn_cover_images = title[Anime.anime_cdn_cover_images];\r\n            card_title.title = title[Anime.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.label],\r\n                    color: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Anime.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Anime.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Anime.anime_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.type])\r\n                if (title[Anime.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.episodes])\r\n                if (title[Anime.episodes])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Anime.episodes]}ep`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.mins_per_ep])\r\n                if (title[Anime.minutes_per_episode])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${title[Anime.minutes_per_episode]}m`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.rating])\r\n                if (title[Anime.rating_short])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.rating_short]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.genres])\r\n                if (title[Anime.genres_csv]) {\r\n                    let genres = [];\r\n                    title[Anime.genres_csv].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.mal_score])\r\n                if (title[Anime.score])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.aired])\r\n                if (start_date)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${start_date}${end_date ? ' to ' + end_date : ''}`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        case BRANCH_MANGA:\r\n            user_settings = store.getState().users.user_manga_display_settings;\r\n            start_date = formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Manga.air_end], title[Manga.air_end_known], true);\r\n\r\n            card_title.id = title[Manga.id];\r\n            card_title.link = MANGA_DISPLAY(title[Manga.id]);\r\n            card_title.cover_images = title[Manga.manga_cover_images];\r\n            card_title.cdn_cover_images = title[Manga.manga_cdn_cover_images];\r\n            card_title.title = title[Manga.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.label],\r\n                    color: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Manga.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Manga.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Manga.manga_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.type])\r\n                if (title[Manga.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Manga.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.volumes])\r\n                if (title[Manga.volumes])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Manga.volumes]}v`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.chapters])\r\n                if (title[Manga.chapters])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Manga.chapters]}c`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.genres])\r\n                if (title[Manga.genres_csv]) {\r\n                    let genres = [];\r\n                    title[Manga.genres_csv].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.mal_score])\r\n                if (title[Manga.score])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Manga.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.aired])\r\n                if (start_date)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${start_date}${end_date ? ' to ' + end_date : ''}`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        case BRANCH_CHARACTERS:\r\n            card_title.id = title[Character.id];\r\n            card_title.link = CHARACTERS_DISPLAY(title[Character.id]);\r\n            card_title.cover_images = title[Character.character_cover_images];\r\n            card_title.cdn_cover_images = title[Character.character_cdn_cover_images];\r\n            card_title.title = title[Character.short_name] ? title[Character.short_name] : title[Character.character_name];\r\n            return card_title;\r\n        case BRANCH_PEOPLE:\r\n            card_title.id = title[Person.id];\r\n            card_title.link = PERSON_DISPLAY(title[Person.id]);\r\n            card_title.cover_images = title[Person.person_cover_images];\r\n            card_title.cdn_cover_images = title[Person.person_cdn_cover_images];\r\n            card_title.title = title[Person.person_name];\r\n            return card_title;\r\n        case BRANCH_EROGE:\r\n            user_settings = store.getState().users.user_eroge_display_settings;\r\n            card_title.id = title[Eroge.id];\r\n            card_title.link = EROGE_DISPLAY(title[Eroge.id]);\r\n            card_title.cover_images = title[Eroge.eroge_cover_images];\r\n            card_title.title = title[Eroge.eroge_name].replace('[Android]', '').trim();\r\n            if (title[Eroge.downloaded])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.type])\r\n                if (title[Eroge.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.censorship])\r\n                if (title[Eroge.censorship].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.censorship]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.language])\r\n                if (title[Eroge.language].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.language]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.platforms])\r\n                if (title[Eroge.platforms].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.platforms]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.tags])\r\n                if (title[Eroge.tags]) {\r\n                    let genres = [];\r\n                    title[Eroge.tags].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.hg_score])\r\n                if (title[Eroge.rating])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.rating]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        default:\r\n            return card_title\r\n    }\r\n}\r\n","import {\r\n    ApiResult,\r\n    UserAnimeDisplaySettingsSchema,\r\n    UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema\r\n} from \"../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../layout/cards/TitleCard\";\r\nimport {getTitleCoverImage, isEmpty} from \"../functions\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faImage} from \"@fortawesome/free-solid-svg-icons\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TitleRow from \"../layout/rows/TitleRow\";\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../../globals\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.gridlist_cols\r\n * @param props.filtered_titles\r\n * @param props.branch\r\n * @param props.current_page\r\n * @param props.items_per_page\r\n * @param props.user_entry_statuses\r\n * @returns {JSX.Element}\r\n */\r\nexport function BrowseCardsView(props) {\r\n    return <GridList className=\"browse-cards-view\" cellHeight={400} cols={props.gridlist_cols} style={{margin: '0 0 10px 0'}}>\r\n        {props.filtered_titles[ApiResult.results].map((title, i) => (\r\n            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                <GridListTile cols={1}>\r\n                    <TitleCard\r\n                        branch={props.branch}\r\n                        title={title}\r\n                        user_buttons={true}\r\n                        index={i + ((props.current_page * props.items_per_page) - (props.items_per_page - 1))}\r\n                        user_status={!isEmpty(props.user_entry_statuses) ?\r\n                            props.user_entry_statuses[`${title['id']}`] : null}\r\n                    />\r\n                </GridListTile>\r\n            </Grow>\r\n        ))}\r\n    </GridList>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.filtered_titles\r\n * @param props.branch\r\n * @param props.current_page\r\n * @param props.items_per_page\r\n * @param props.user_entry_statuses\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BrowseTableView(props) {\r\n    return <TableContainer className=\"browse-table-view\">\r\n        <Table aria-label=\"user list table\">\r\n            <BrowseTableHead branch={props.branch} user_display_settings={props.user_display_settings}/>\r\n            <TableBody>\r\n                {props.filtered_titles[ApiResult.results].map((title, i) => (\r\n                    <TitleRow\r\n                        key={i}\r\n                        branch={props.branch}\r\n                        title={title}\r\n                        user_buttons={true}\r\n                        index={i + ((props.current_page * props.items_per_page) - (props.items_per_page - 1))}\r\n                        user_status={!isEmpty(props.user_entry_statuses) ?\r\n                            props.user_entry_statuses[`${title['id']}`] : null}\r\n                    />\r\n                ))}\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BrowseTableHead(props) {\r\n    switch (props.branch) {\r\n        case BRANCH_ANIME:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faEdit}/></TableCell>\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.type] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Type</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.episodes] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Episodes</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.mins_per_ep] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Min per ep</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.rating] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Rating</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.genres] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Genres</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.mal_score] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.aired] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Aired</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        case BRANCH_MANGA:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faEdit}/></TableCell>\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.type] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Type</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.volumes] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Volumes</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.chapters] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Chapters</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.genres] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Genres</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.mal_score] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.aired] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Published</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        case BRANCH_EROGE:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.type] ?\r\n                        <TableCell align=\"center\">Type</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.censorship] ?\r\n                        <TableCell align=\"center\">Censorship</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.language] ?\r\n                        <TableCell align=\"center\">Language</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.platforms] ?\r\n                        <TableCell align=\"center\">Platform</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.tags] ?\r\n                        <TableCell align=\"center\">Tags</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.hg_score] ?\r\n                        <TableCell align=\"center\">Score</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        default:\r\n            return null\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {\r\n    ApiResult,\r\n    UserAnimeDisplaySettingsSchema,\r\n    UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema\r\n} from \"../../models\";\r\nimport {filterTitles, getFiltersFromBranch, getItemsPerPageFromBranch, getTabName} from \"./functions\";\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {playClickSound, playExpand3Sound} from \"../layout/sounds\";\r\nimport {getBrowseGridListCols, isEmpty} from \"../functions\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport GoToPageDialog from \"../layout/pagination/goToPageDialog\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../../globals\";\r\nimport {BrowseCardsView, BrowseTableView} from \"./utils\";\r\n\r\nimport '../../assets/css/browse.css'\r\nimport UserDisplaySettingsDialog from \"../layout/filters/UserBrowseDisplaySettings\";\r\n\r\n\r\nfunction checkForCardsDisplay(branch, settings) {\r\n    if (branch === BRANCH_ANIME)\r\n        return settings[UserAnimeDisplaySettingsSchema.cards];\r\n    else if (branch === BRANCH_MANGA)\r\n        return settings[UserMangaDisplaySettingsSchema.cards];\r\n    else if (branch === BRANCH_EROGE)\r\n        return settings[UserErogeDisplaySettingsSchema.cards];\r\n    return true\r\n}\r\n\r\n\r\nclass Browse extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Redux prop of user_entry_statuses */\r\n        user_entry_statuses: PropTypes.object,\r\n        /** Redux prop of title_filters */\r\n        title_filters: PropTypes.object,\r\n        /** Selected season */\r\n        season: PropTypes.object,\r\n        /** User settings for the displaying of the cards/table */\r\n        user_display_settings: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            items_per_page: getItemsPerPageFromBranch(this.props.branch),\r\n            page_dialog_open: false,\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = getTabName(this.props.branch);\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        filterTitles(this.props.branch, 1, this.props.title_filters, this.props.season);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.titles_loading && !this.props.titles_loading) {\r\n            window.scrollTo(0, 0);\r\n            playExpand3Sound();\r\n        }\r\n\r\n        this.updateCurrentPage(prevState);\r\n\r\n        if (this.props.season && prevProps.season.season !== this.props.season.season)\r\n            filterTitles(this.props.branch, 1, this.props.title_filters, this.props.season)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateGridListCols)\r\n    }\r\n\r\n    updateCurrentPage(prevState) {\r\n        let page = this.state.current_page;\r\n        try {\r\n            page = this.props.filtered_titles[ApiResult.next].split('page=');\r\n            page = parseInt(page[page.length - 1]) - 1;\r\n        } catch (e) {\r\n            page = Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page);\r\n        }\r\n\r\n        if (page && prevState.current_page !== page) {\r\n            this.setState({current_page: page})\r\n        }\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            filterTitles(this.props.branch, page, this.props.title_filters, this.props.season);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <CyberNavbar/>\r\n            <div id=\"Browse-Titles\">\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        {getFiltersFromBranch(this.props.branch, this.props.season)}\r\n                        {!isEmpty(this.props.user_display_settings) ?\r\n                            <UserDisplaySettingsDialog\r\n                                branch={this.props.branch}\r\n                                user_display_settings={this.props.user_display_settings}\r\n                                list={!isEmpty(this.props.list)}\r\n                            /> : null}\r\n                        {this.props.filtered_titles_loaded ? <>\r\n                            {checkForCardsDisplay(this.props.branch, this.props.user_display_settings) ?\r\n                                <BrowseCardsView\r\n                                    branch={this.props.branch}\r\n                                    items_per_page={this.state.items_per_page}\r\n                                    current_page={this.state.current_page}\r\n                                    user_entry_statuses={this.props.user_entry_statuses}\r\n                                    filtered_titles={this.props.filtered_titles}\r\n                                    gridlist_cols={this.state.gridlist_cols}\r\n                                /> :\r\n                                <BrowseTableView\r\n                                    branch={this.props.branch}\r\n                                    items_per_page={this.state.items_per_page}\r\n                                    current_page={this.state.current_page}\r\n                                    user_entry_statuses={this.props.user_entry_statuses}\r\n                                    filtered_titles={this.props.filtered_titles}\r\n                                    user_display_settings={this.props.user_display_settings}\r\n                                />\r\n                            }\r\n                            <div className=\"pagination\">\r\n                                <Pagination\r\n                                    count={Math.ceil(\r\n                                        this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                    color=\"primary\"\r\n                                    siblingCount={3}\r\n                                    page={this.state.current_page}\r\n                                    onChange={(type, page) => {\r\n                                        playClickSound();\r\n                                        if (page !== this.state.current_page)\r\n                                            this.goToPage(page);\r\n                                        else\r\n                                            this.setState({page_dialog_open: true})\r\n                                    }}\r\n                                />\r\n                                <GoToPageDialog\r\n                                    open={this.state.page_dialog_open}\r\n                                    current_page={this.state.current_page}\r\n                                    total_pages={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                    goToPage={this.goToPage}\r\n                                    onClose={this.closePageDialog}/>\r\n                            </div>\r\n                        </> : this.props.titles_loading ?\r\n                            <Loading text={`${this.props.branch} Loading`} offset={200}/> : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <CyberFooter/>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_display_settings: state.users.user_anime_display_settings,  // This is here to rerender the cards\r\n    user_manga_display_settings: state.users.user_manga_display_settings,  // This is here to rerender the cards\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,  // This is here to rerender the cards\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Browse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport PropTypes from \"prop-types\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass AnimeBrowse extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        let anime_filters = this.props.anime_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            anime_filters = this.props.anime_season_filters;\r\n        return <Browse\r\n            branch={BRANCH_ANIME}\r\n            titles_loading={this.props.anime_loading}\r\n            filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n            filtered_titles={this.props.filtered_anime}\r\n            title_filters={anime_filters}\r\n            user_entry_statuses={this.props.user_anime_entry_statuses}\r\n            season={this.props.season}\r\n            user_display_settings={this.props.user_anime_display_settings}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_browse_filters: state.cookies.anime_browse_filters,\r\n    anime_season_filters: state.cookies.anime_season_filters,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_anime_display_settings: state.users.user_anime_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeBrowse)\r\n","import LazyHero from \"react-lazy-hero\";\r\nimport React, {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {LOGIN} from \"../../urls\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport Loading from \"../layout/common/Loading\";\r\n\r\n\r\nexport function NonAuthIndexHero() {\r\n    return <LazyHero\r\n        imageSrc={'images/neo-tokyo-1.jpg'}\r\n        minHeight={'100vh'}\r\n        opacity={0}\r\n        transitionDuration={200}\r\n        color={'transparent'}>\r\n        <div className=\"welcome-img-container\">\r\n            <div className=\"title-container\">\r\n                <h5>welcome to</h5>\r\n                <h1>Cyber-Genesis</h1>\r\n            </div>\r\n        </div>\r\n    </LazyHero>\r\n}\r\n\r\n\r\nexport function AuthIndexHero() {\r\n    return <div className=\"logged-out-welcome-container\">\r\n        <video autoPlay={true} muted={true} loop={true} id=\"Index-Video\">\r\n            <source src=\"images/neo-city.mp4\" type=\"video/mp4\"/>\r\n        </video>\r\n\r\n        <div className=\"welcome-img-container\">\r\n            <div className=\"title-container\">\r\n                <h5>welcome to</h5>\r\n                <h1>Cyber-Genesis</h1>\r\n            </div>\r\n        </div>\r\n        <div className=\"home-login-link-container\">\r\n            <Link to={LOGIN} className=\"color-blue\">Login</Link>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {Parallax} from 'react-parallax';\r\n\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {AuthIndexHero, NonAuthIndexHero} from \"./snippets\"\r\n\r\nimport '../../assets/css/home.css';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {ADMIN, HOME, REQUIEM_HOME} from \"../../urls\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\n\r\nclass Index extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            img_1_loaded: false,\r\n            img_2_loaded: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber-Space';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    // noinspection FunctionWithMoreThanThreeNegationsJS\r\n    render() {\r\n        // noinspection HtmlUnknownTarget\r\n        return (\r\n            <div id=\"Index\">\r\n                {this.props.user_authenticated ?\r\n                    <>\r\n                        <CyberNavbar/>\r\n                        <NonAuthIndexHero/>\r\n                        <Grid container>\r\n                            <Grid item xs={12} className=\"project-about\">\r\n                                <div className=\"project-about-wrapper\">\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-2-lq.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={this.state.img_1_loaded ? 'fade-in' : ''}\r\n                                    >\r\n                                        <img src={'images/neo-tokyo-2-lq.jpg'} className=\"lazy-loaded-img\"\r\n                                             alt=\"loader-img\"\r\n                                             onLoad={() => {\r\n                                                 this.setState({img_1_loaded: true})\r\n                                             }}/>\r\n                                        <div className=\"img-content-container\">\r\n                                            <img src=\"images/cyber-genesis-logo.png\" alt={'cg-logo'}/>\r\n                                            <div className=\"about-container\">\r\n                                                <span className=\"color-blue\">project:</span>&nbsp;\r\n                                                <h1>Cyber-Genesis</h1>\r\n                                                <p><Link to={HOME}><i>Cyber-Genesis</i></Link> is a platform for Asian\r\n                                                    culture mainly <i>Japanese</i> animated content.</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-3-lq.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={this.state.img_2_loaded ? 'fade-in' : ''}\r\n                                    >\r\n                                        <img src={'images/neo-tokyo-3-lq.jpg'} className=\"lazy-loaded-img\"\r\n                                             alt=\"loader-img\"\r\n                                             onLoad={() => {\r\n                                                 this.setState({img_2_loaded: true})\r\n                                             }}/>\r\n                                        <div className=\"img-content-container text-right\">\r\n                                            <img className=\"cyber-req-logo-top\"\r\n                                                 src=\"images/cyber-requiem-logo-magenta.png\"\r\n                                                 alt={'cg-logo'}/>\r\n                                            <div className=\"about-container\">\r\n                                                <span>project:</span>&nbsp;\r\n                                                <h1>Cyber-Requiem</h1>\r\n                                                <p><Link to={REQUIEM_HOME}><i>\r\n                                                    Cyber-Requiem</i></Link> is a system designed to keep <i>\r\n                                                    Cyber-Genesis</i> up to date by crawling the web for relative\r\n                                                    information and downloading multimedia.</p>\r\n                                            </div>\r\n                                            <img className=\"cyber-req-logo-bottom\"\r\n                                                 src=\"images/cyber-requiem-logo-magenta.png\"\r\n                                                 alt={'cg-logo'}/>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-1.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={'fade-in'}\r\n                                    >\r\n                                        <div className=\"img-content-container\">\r\n                                            <img\r\n                                                src=\"images/cyber-administration-logo-cyan.png\"\r\n                                                alt={'ca-logo'}/>\r\n                                            <div className=\"about-container margin-left-20\">\r\n                                                <span>project:</span>&nbsp;\r\n                                                <h1>Cyber-Administration</h1>\r\n                                                <p><a\r\n                                                    href={ADMIN}><i>Cyber-Administration</i></a> is a software\r\n                                                    for user interaction\r\n                                                    with <i>Cyber-Genesis</i> and <i>Cyber-Requiem</i>.\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <CyberFooter margin={false}/>\r\n                    </> :\r\n                    <AuthIndexHero/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Index)\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faCircle, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {Profile, User, UserList} from \"../../../models\";\r\nimport {faCalendarAlt, faCalendarTimes} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\nimport {USER_ANIME_STATISTICS} from \"../../../urls\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Doughnut} from \"react-chartjs-2\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport store from \"../../../store\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\n\r\n\r\nfunction listIsEmpty(branch, user_list) {\r\n    if (branch === BRANCH_ANIME) {\r\n        if (user_list[UserList.anime_watching] > 0)\r\n            return false\r\n        if (user_list[UserList.anime_completed] > 0)\r\n            return false\r\n        if (user_list[UserList.anime_on_hold] > 0)\r\n            return false\r\n        if (user_list[UserList.anime_dropped] > 0)\r\n            return false\r\n        if (user_list[UserList.anime_plan_to_watch] > 0)\r\n            return false\r\n    } else if (branch === BRANCH_MANGA) {\r\n        if (user_list[UserList.manga_reading] > 0)\r\n            return false\r\n        if (user_list[UserList.manga_completed] > 0)\r\n            return false\r\n        if (user_list[UserList.manga_on_hold] > 0)\r\n            return false\r\n        if (user_list[UserList.manga_dropped] > 0)\r\n            return false\r\n        if (user_list[UserList.manga_plan_to_read] > 0)\r\n            return false\r\n    }\r\n\r\n    return true\r\n}\r\n\r\n\r\nfunction getData(pie_data) {\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < pie_data.length; x++) {\r\n        stat_data.push(pie_data[x].stat);\r\n        labels.push(pie_data[x].label);\r\n    }\r\n\r\n    return  {\r\n        labels: labels,\r\n        legend: {\r\n            display: false,\r\n        },\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.4)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.4)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.5)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.2)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.4)',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.8)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.8)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.8)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.8)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.8)',\r\n            ],\r\n            borderColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.3)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.3)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.3)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.1)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.3)',\r\n            ],\r\n            hoverBorderColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 1)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 1)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 1)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 1)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 1)',\r\n            ],\r\n            // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n            // hoverBorderColor: '#156bb7',\r\n            borderWidth: 0\r\n        }]\r\n    };\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.style\r\n * @returns {JSX.Element|null}\r\n * @constructor\r\n */\r\nexport function AnimeSimpleChartStats(props) {\r\n    const {style} = props;\r\n    const user_list = useSelector(state => state.users.user_list);\r\n    if (isEmpty(user_list))\r\n        return null;\r\n    if (listIsEmpty(BRANCH_ANIME, user_list))\r\n        return <div style={style} className=\"User-List-Stats-Container-No-Entries\">\r\n            <FontAwesomeIcon icon={faCalendarTimes}/>\r\n            <p>No Anime entries added yet.</p>\r\n        </div>\r\n    let pie_data = [\r\n        {label: 'Watching', stat: user_list[UserList.anime_watching], color: '', hoverColor: ''},\r\n        {label: 'Completed', stat: user_list[UserList.anime_completed], color: '', hoverColor: ''},\r\n        {label: 'On Hold', stat: user_list[UserList.anime_on_hold], color: '', hoverColor: ''},\r\n        {label: 'Dropped', stat: user_list[UserList.anime_dropped], color: '', hoverColor: ''},\r\n        {label: 'Planned', stat: user_list[UserList.anime_plan_to_watch], color: '', hoverColor: ''},\r\n    ];\r\n    const data = getData(pie_data);\r\n    const visited_user = store.getState().auth.visited_user;\r\n\r\n    return <div style={style} className=\"User-List-Stats-Container\">\r\n        <h2>Anime</h2>\r\n        <div className=\"pie-wrapper\">\r\n            <Doughnut height={100} width={100} data={data} options={{ legend: false}}/>\r\n        </div>\r\n        <div className=\"chip-wrapper\">\r\n            <div className=\"stat-chip\">\r\n                <Chip className=\"border-info color-info\"\r\n                      variant=\"outlined\"\r\n                      label={<>\r\n                          <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>\r\n                          <span>Watching<CountUp end={user_list[UserList.anime_watching]}/></span>\r\n                      </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-primary color-primary\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>\r\n                        <span>Completed<CountUp end={user_list[UserList.anime_completed]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-warning color-warning\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>\r\n                        <span>On Hold<CountUp end={user_list[UserList.anime_on_hold]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-danger color-danger\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>\r\n                        <span>Dropped<CountUp end={user_list[UserList.anime_dropped]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-gray color-gray\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>\r\n                        <span>Planned<CountUp end={user_list[UserList.anime_plan_to_watch]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-white color-white\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>\r\n                        <span>Total<CountUp end={user_list[UserList.anime_total_entries]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <CyberLink to={USER_ANIME_STATISTICS(visited_user[User.id])}>\r\n                    <Button variant=\"outlined\" className=\"btn-info\">Statistics</Button>\r\n                </CyberLink>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.style\r\n * @returns {JSX.Element|null}\r\n * @constructor\r\n */\r\nexport function MangaSimpleChartStats(props) {\r\n    const {style} = props;\r\n    const user_list = useSelector(state => state.users.user_list);\r\n    if (isEmpty(user_list))\r\n        return null;\r\n    if (listIsEmpty(BRANCH_MANGA, user_list))\r\n        return <div style={style} className=\"User-List-Stats-Container-No-Entries\">\r\n            <FontAwesomeIcon icon={faCalendarTimes}/>\r\n            <p>No Manga entries added yet.</p>\r\n        </div>\r\n    let pie_data = [\r\n        {label: 'Reading', stat: user_list[UserList.manga_reading], color: '', hoverColor: ''},\r\n        {label: 'Completed', stat: user_list[UserList.manga_completed], color: '', hoverColor: ''},\r\n        {label: 'On Hold', stat: user_list[UserList.manga_on_hold], color: '', hoverColor: ''},\r\n        {label: 'Dropped', stat: user_list[UserList.manga_dropped], color: '', hoverColor: ''},\r\n        {label: 'Planned', stat: user_list[UserList.manga_plan_to_read], color: '', hoverColor: ''},\r\n    ];\r\n    const data = getData(pie_data);\r\n\r\n    return <div style={style} className=\"User-List-Stats-Container\">\r\n        <h2>Manga</h2>\r\n        <div className=\"pie-wrapper\">\r\n            <Doughnut height={100} width={100} data={data} options={{ legend: false}}/>\r\n        </div>\r\n        <div className=\"chip-wrapper\">\r\n            <div className=\"stat-chip\">\r\n                <Chip className=\"border-info color-info\"\r\n                      variant=\"outlined\"\r\n                      label={<>\r\n                          <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>\r\n                          <span>Reading<CountUp end={user_list[UserList.manga_reading]}/></span>\r\n                      </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-primary color-primary\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>\r\n                        <span>Completed<CountUp end={user_list[UserList.manga_completed]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-warning color-warning\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>\r\n                        <span>On Hold<CountUp end={user_list[UserList.manga_on_hold]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-danger color-danger\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>\r\n                        <span>Dropped<CountUp end={user_list[UserList.manga_dropped]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-gray color-gray\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>\r\n                        <span>Planned<CountUp end={user_list[UserList.manga_plan_to_read]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-white color-white\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>\r\n                        <span>Total<CountUp end={user_list[UserList.manga_total_entries]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            {/*<div className=\"stat-chip\">*/}\r\n            {/*    <CyberLink to={USER_ANIME_STATISTICS(this.props.visited_user[User.id])}>*/}\r\n            {/*        <Button variant=\"outlined\" className=\"btn-info\">Statistics</Button>*/}\r\n            {/*    </CyberLink>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    </div>\r\n}","import {Anime, Character, Manga, Profile, User} from \"../../../models\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_MANGA, BRANCH_PEOPLE} from \"../../../globals\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nfunction getTitlesFromBranch(branch, visited_user) {\r\n    let titles = [];\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            titles = visited_user[User.profile][Profile.favorite_anime];\r\n            break;\r\n        case BRANCH_MANGA:\r\n            titles = visited_user[User.profile][Profile.favorite_manga];\r\n            break;\r\n        case BRANCH_CHARACTERS:\r\n            titles = visited_user[User.profile][Profile.favorite_characters];\r\n            break;\r\n        case BRANCH_PEOPLE:\r\n            titles = visited_user[User.profile][Profile.favorite_people];\r\n            break;\r\n        default:\r\n            return null\r\n    }\r\n    return titles\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {String} props.branch\r\n * @param {Object} props.style\r\n * @param {Number} props.limit\r\n * @param {Boolean} props.mini\r\n * @returns {JSX.Element|null}\r\n * @constructor\r\n */\r\nexport function FavoriteTitles(props) {\r\n    const {branch, style, limit, mini} = props;\r\n    const visited_user = useSelector(state => state.auth.visited_user);\r\n    let parsed = parseInt(limit);\r\n    parsed = isNaN(parsed) ? 100 : parsed;\r\n    if (isEmpty(visited_user))\r\n        return null;\r\n    const titles = getTitlesFromBranch(branch, visited_user);\r\n    return <div style={style} className=\"Quoted-Favorites-Container\">\r\n        {titles.length === 0 ? <p>You haven't added any favorite {branch} yet.</p> : titles.map((title, i) => (\r\n            i < parsed ? <div key={title['id']} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n                <TitleCard branch={branch} title={title} mini={mini}/>\r\n            </div> : null\r\n        ))}\r\n    </div>\r\n}\r\n\r\n// export function FavoriteAnime(props) {\r\n//     const {branch, style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_anime].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Anime yet.</p> : visited_user[User.profile][Profile.favorite_anime].map((title, i) => (\r\n//             i < parsed ? <div key={title[Anime.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_ANIME} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoriteManga(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_manga].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Manga yet.</p> : visited_user[User.profile][Profile.favorite_manga].map((title, i) => (\r\n//             i < parsed ? <div key={title[Manga.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_MANGA} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoriteCharacters(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_characters].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Characters yet.</p> : visited_user[User.profile][Profile.favorite_characters].map((title, i) => (\r\n//             i < parsed ? <div key={title[Character.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_CHARACTERS} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoritePeople(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_people].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite People yet.</p> : visited_user[User.profile][Profile.favorite_people].map((title, i) => (\r\n//             i < parsed ? <div key={title[Character.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_PEOPLE} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n","/*\nCopyright (C) 2011 Patrick Gillespie, http://patorjk.com/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/*\n    Extendible BBCode Parser v1.0.0\n    By Patrick Gillespie (patorjk@gmail.com)\n    Website: http://patorjk.com/\n\n    This module allows you to parse BBCode and to extend to the mark-up language\n    to add in your own tags.\n*/\n\nimport ReactHtmlParser from \"react-html-parser\";\nimport React from \"react\";\nimport {AnimeSimpleChartStats, MangaSimpleChartStats} from \"../../statistics/statistics_snippets\";\nimport {isEmpty} from \"../../../functions\";\nimport {FavoriteTitles} from \"../../statistics/favorites_snippets\";\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_MANGA, BRANCH_PEOPLE} from \"../../../../globals\";\n\nvar XBBCODE = (function() {\n    \"use strict\";\n\n    // -----------------------------------------------------------------------------\n    // Set up private variables\n    // -----------------------------------------------------------------------------\n\n    var me = {},\n        urlPattern = /^(?:https?|file|c):(?:\\/{1,3}|\\\\{1})[-a-zA-Z0-9:;,@#%&()~_?\\+=\\/\\\\\\.]*$/,\n        colorNamePattern = /^(?:aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$/,\n        colorCodePattern = /^#?[a-fA-F0-9]{6}$/,\n        emailPattern = /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/,\n        fontFacePattern = /^([a-z][a-z0-9_]+|\"[a-z][a-z0-9_\\s]+\")$/i,\n        tags,\n        tagList,\n        tagsNoParseList = [],\n        bbRegExp,\n        pbbRegExp,\n        pbbRegExp2,\n        openTags,\n        closeTags;\n\n    /* -----------------------------------------------------------------------------\n     * tags\n     * This object contains a list of tags that your code will be able to understand.\n     * Each tag object has the following properties:\n     *\n     *   openTag - A function that takes in the tag's parameters (if any) and its\n     *             contents, and returns what its HTML open tag should be.\n     *             Example: [color=red]test[/color] would take in \"=red\" as a\n     *             parameter input, and \"test\" as a content input.\n     *             It should be noted that any BBCode inside of \"content\" will have\n     *             been processed by the time it enter the openTag function.\n     *\n     *   closeTag - A function that takes in the tag's parameters (if any) and its\n     *              contents, and returns what its HTML close tag should be.\n     *\n     *   displayContent - Defaults to true. If false, the content for the tag will\n     *                    not be displayed. This is useful for tags like IMG where\n     *                    its contents are actually a parameter input.\n     *\n     *   restrictChildrenTo - A list of BBCode tags which are allowed to be nested\n     *                        within this BBCode tag. If this property is omitted,\n     *                        any BBCode tag may be nested within the tag.\n     *\n     *   restrictParentsTo - A list of BBCode tags which are allowed to be parents of\n     *                       this BBCode tag. If this property is omitted, any BBCode\n     *                       tag may be a parent of the tag.\n     *\n     *   noParse - true or false. If true, none of the content WITHIN this tag will be\n     *             parsed by the XBBCode parser.\n     *\n     *\n     *\n     * LIMITIONS on adding NEW TAGS:\n     *  - Tag names should be alphanumeric (including underscores) and all tags should have an opening tag\n     *    and a closing tag.\n     *    The [*] tag is an exception because it was already a standard\n     *    bbcode tag. Technecially tags don't *have* to be alphanumeric, but since\n     *    regular expressions are used to parse the text, if you use a non-alphanumeric\n     *    tag names, just make sure the tag name gets escaped properly (if needed).\n     * --------------------------------------------------------------------------- */\n\n    tags = {\n        \"b\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-b\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        /*\n            This tag does nothing and is here mostly to be used as a classification for\n            the bbcode input when evaluating parent-child tag relationships\n        */\n        \"bbcode\": {\n            openTag: function(params,content) {\n                return '';\n            },\n            closeTag: function(params,content) {\n                return '';\n            }\n        },\n        \"center\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-center\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"code\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-code\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            },\n            noParse: true\n        },\n        \"color\": {\n            openTag: function(params,content) {\n                params = params || '';\n                \n                var colorCode = (params.substr(1)).toLowerCase() || \"black\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"black\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n                return '<span style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"email\": {\n            openTag: function(params,content) {\n\n                var myEmail;\n\n                if (!params) {\n                    myEmail = content.replace(/<.*?>/g,\"\");\n                } else {\n                    myEmail = params.substr(1);\n                }\n\n                emailPattern.lastIndex = 0;\n                if ( !emailPattern.test( myEmail ) ) {\n                    return '<a>';\n                }\n\n                return '<a href=\"mailto:' + myEmail + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</a>';\n            }\n        },\n        \"face\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var faceCode = params.substr(1) || \"inherit\";\n                fontFacePattern.lastIndex = 0;\n                if ( !fontFacePattern.test( faceCode ) ) {\n                        faceCode = \"inherit\";\n                }\n                return '<span style=\"font-family:' + faceCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n\n        \"font\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var faceCode = params.substr(1) || \"inherit\";\n                fontFacePattern.lastIndex = 0;\n                if ( !fontFacePattern.test( faceCode ) ) {\n                        faceCode = \"inherit\";\n                }\n                return '<span style=\"font-family:' + faceCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"i\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-i\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"img\": {\n            openTag: function(params,content) {\n\n                var myUrl = content;\n\n                urlPattern.lastIndex = 0;\n                if ( !urlPattern.test( myUrl ) ) {\n                    myUrl = \"\";\n                }\n\n                return '<img src=\"' + myUrl + '\" />';\n            },\n            closeTag: function(params,content) {\n                return '';\n            },\n            displayContent: false\n        },\n        \"justify\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-justify\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"large\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var colorCode = params.substr(1) || \"inherit\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"inherit\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n\n                return '<span class=\"xbbcode-size-36\" style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"left\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-left\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"li\": {\n            openTag: function(params,content) {\n                return \"<li>\";\n            },\n            closeTag: function(params,content) {\n                return \"</li>\";\n            },\n            restrictParentsTo: [\"list\",\"ul\",\"ol\"]\n        },\n        \"list\": {\n            openTag: function(params,content) {\n                return '<ul>';\n            },\n            closeTag: function(params,content) {\n                return '</ul>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"noparse\": {\n            openTag: function(params,content) {\n                return '';\n            },\n            closeTag: function(params,content) {\n                return '';\n            },\n            noParse: true\n        },\n        \"ol\": {\n            openTag: function(params,content) {\n                return '<ol>';\n            },\n            closeTag: function(params,content) {\n                return '</ol>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"php\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-code\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            },\n            noParse: true\n        },\n        \"quote\": {\n            openTag: function(params,content) {\n                return '<blockquote class=\"xbbcode-blockquote\">';\n            },\n            closeTag: function(params,content) {\n                return '</blockquote>';\n            }\n        },\n        \"right\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-right\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"s\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-s\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"size\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var mySize = parseInt(params.substr(1),10) || 0;\n                if (mySize < 4 || mySize > 40) {\n                    mySize = 14;\n                }\n\n                return '<span class=\"xbbcode-size-' + mySize + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"small\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var colorCode = params.substr(1) || \"inherit\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"inherit\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n                return '<span class=\"xbbcode-size-10\" style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"sub\": {\n            openTag: function(params,content) {\n                return '<sub>';\n            },\n            closeTag: function(params,content) {\n                return '</sub>';\n            }\n        },\n        \"sup\": {\n            openTag: function(params,content) {\n                return '<sup>';\n            },\n            closeTag: function(params,content) {\n                return '</sup>';\n            }\n        },\n\n        \"table\": {\n            openTag: function(params,content) {\n                return '<table class=\"xbbcode-table\">';\n            },\n            closeTag: function(params,content) {\n                return '</table>';\n            },\n            restrictChildrenTo: [\"tbody\",\"thead\", \"tfoot\", \"tr\"]\n        },\n        \"tbody\": {\n            openTag: function(params,content) {\n                return '<tbody>';\n            },\n            closeTag: function(params,content) {\n                return '</tbody>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"tfoot\": {\n            openTag: function(params,content) {\n                return '<tfoot>';\n            },\n            closeTag: function(params,content) {\n                return '</tfoot>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"thead\": {\n            openTag: function(params,content) {\n                return '<thead class=\"xbbcode-thead\">';\n            },\n            closeTag: function(params,content) {\n                return '</thead>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"td\": {\n            openTag: function(params,content) {\n                return '<td class=\"xbbcode-td\">';\n            },\n            closeTag: function(params,content) {\n                return '</td>';\n            },\n            restrictParentsTo: [\"tr\"]\n        },\n        \"th\": {\n            openTag: function(params,content) {\n                return '<th class=\"xbbcode-th\">';\n            },\n            closeTag: function(params,content) {\n                return '</th>';\n            },\n            restrictParentsTo: [\"tr\"]\n        },\n        \"tr\": {\n            openTag: function(params,content) {\n                return '<tr class=\"xbbcode-tr\">';\n            },\n            closeTag: function(params,content) {\n                return '</tr>';\n            },\n            restrictChildrenTo: [\"td\",\"th\"],\n            restrictParentsTo: [\"table\",\"tbody\",\"tfoot\",\"thead\"]\n        },\n        \"u\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-u\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"ul\": {\n            openTag: function(params,content) {\n                return '<ul>';\n            },\n            closeTag: function(params,content) {\n                return '</ul>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"url\": {\n            openTag: function(params,content) {\n\n                var myUrl;\n\n                if (!params) {\n                    myUrl = content.replace(/<.*?>/g,\"\");\n                } else {\n                    myUrl = params.substr(1);\n                }\n\n                urlPattern.lastIndex = 0;\n                if ( !urlPattern.test( myUrl ) ) {\n                    myUrl = \"#\";\n                }\n\n                return '<a href=\"' + myUrl + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</a>';\n            }\n        },\n        /*\n            The [*] tag is special since the user does not define a closing [/*] tag when writing their bbcode.\n            Instead this module parses the code and adds the closing [/*] tag in for them. None of the tags you\n            add will act like this and this tag is an exception to the others.\n        */\n        \"*\": {\n            openTag: function(params,content) {\n                return \"<li>\";\n            },\n            closeTag: function(params,content) {\n                return \"</li>\";\n            },\n            restrictParentsTo: [\"list\",\"ul\",\"ol\"]\n        }\n    };\n\n    // create tag list and lookup fields\n    function initTags() {\n        tagList = [];\n        var prop,\n            ii,\n            len;\n        for (prop in tags) {\n            if (tags.hasOwnProperty(prop)) {\n                if (prop === \"*\") {\n                    tagList.push(\"\\\\\" + prop);\n                } else {\n                    tagList.push(prop);\n                    if ( tags[prop].noParse ) {\n                        tagsNoParseList.push(prop);\n                    }\n                }\n\n                tags[prop].validChildLookup = {};\n                tags[prop].validParentLookup = {};\n                tags[prop].restrictParentsTo = tags[prop].restrictParentsTo || [];\n                tags[prop].restrictChildrenTo = tags[prop].restrictChildrenTo || [];\n\n                len = tags[prop].restrictChildrenTo.length;\n                for (ii = 0; ii < len; ii++) {\n                    tags[prop].validChildLookup[ tags[prop].restrictChildrenTo[ii] ] = true;\n                }\n                len = tags[prop].restrictParentsTo.length;\n                for (ii = 0; ii < len; ii++) {\n                    tags[prop].validParentLookup[ tags[prop].restrictParentsTo[ii] ] = true;\n                }\n            }\n        }\n\n        bbRegExp = new RegExp(\"<bbcl=([0-9]+) (\" + tagList.join(\"|\") + \")([ =][^>]*?)?>((?:.|[\\\\r\\\\n])*?)<bbcl=\\\\1 /\\\\2>\", \"gi\");\n        pbbRegExp = new RegExp(\"\\\\[(\" + tagList.join(\"|\") + \")([ =][^\\\\]]*?)?\\\\]([^\\\\[]*?)\\\\[/\\\\1\\\\]\", \"gi\");\n        pbbRegExp2 = new RegExp(\"\\\\[(\" + tagsNoParseList.join(\"|\") + \")([ =][^\\\\]]*?)?\\\\]([\\\\s\\\\S]*?)\\\\[/\\\\1\\\\]\", \"gi\");\n\n        // create the regex for escaping ['s that aren't apart of tags\n        (function() {\n            var closeTagList = [];\n            for (var ii = 0; ii < tagList.length; ii++) {\n                if ( tagList[ii] !== \"\\\\*\" ) { // the * tag doesn't have an offical closing tag\n                    closeTagList.push ( \"/\" + tagList[ii] );\n                }\n            }\n\n            openTags = new RegExp(\"(\\\\[)((?:\" + tagList.join(\"|\") + \")(?:[ =][^\\\\]]*?)?)(\\\\])\", \"gi\");\n            closeTags = new RegExp(\"(\\\\[)(\" + closeTagList.join(\"|\") + \")(\\\\])\", \"gi\");\n        })();\n\n    }\n    initTags();\n\n    // -----------------------------------------------------------------------------\n    // private functions\n    // -----------------------------------------------------------------------------\n\n    function checkParentChildRestrictions(parentTag, bbcode, bbcodeLevel, tagName, tagParams, tagContents, errQueue) {\n\n        errQueue = errQueue || [];\n        bbcodeLevel++;\n\n        // get a list of all of the child tags to this tag\n        var reTagNames = new RegExp(\"(<bbcl=\" + bbcodeLevel + \" )(\" + tagList.join(\"|\") + \")([ =>])\",\"gi\"),\n            reTagNamesParts = new RegExp(\"(<bbcl=\" + bbcodeLevel + \" )(\" + tagList.join(\"|\") + \")([ =>])\",\"i\"),\n            matchingTags = tagContents.match(reTagNames) || [],\n            cInfo,\n            errStr,\n            ii,\n            childTag,\n            pInfo = tags[parentTag] || {};\n\n        reTagNames.lastIndex = 0;\n\n        if (!matchingTags) {\n            tagContents = \"\";\n        }\n\n        for (ii = 0; ii < matchingTags.length; ii++) {\n            reTagNamesParts.lastIndex = 0;\n            childTag = (matchingTags[ii].match(reTagNamesParts))[2].toLowerCase();\n\n            if ( pInfo && pInfo.restrictChildrenTo && pInfo.restrictChildrenTo.length > 0 ) {\n                if ( !pInfo.validChildLookup[childTag] ) {\n                    errStr = \"The tag \\\"\" + childTag + \"\\\" is not allowed as a child of the tag \\\"\" + parentTag + \"\\\".\";\n                    errQueue.push(errStr);\n                }\n            }\n            cInfo = tags[childTag] || {};\n            if ( cInfo.restrictParentsTo.length > 0 ) {\n                if ( !cInfo.validParentLookup[parentTag] ) {\n                    errStr = \"The tag \\\"\" + parentTag + \"\\\" is not allowed as a parent of the tag \\\"\" + childTag + \"\\\".\";\n                    errQueue.push(errStr);\n                }\n            }\n\n        }\n\n        tagContents = tagContents.replace(bbRegExp, function(matchStr, bbcodeLevel, tagName, tagParams, tagContents ) {\n            errQueue = checkParentChildRestrictions(tagName.toLowerCase(), matchStr, bbcodeLevel, tagName, tagParams, tagContents, errQueue);\n            return matchStr;\n        });\n        return errQueue;\n    }\n\n    /*\n        This function updates or adds a piece of metadata to each tag called \"bbcl\" which\n        indicates how deeply nested a particular tag was in the bbcode. This property is removed\n        from the HTML code tags at the end of the processing.\n    */\n    function updateTagDepths(tagContents) {\n        tagContents = tagContents.replace(/\\<([^\\>][^\\>]*?)\\>/gi, function(matchStr, subMatchStr) {\n            var bbCodeLevel = subMatchStr.match(/^bbcl=([0-9]+) /);\n            if (bbCodeLevel === null) {\n                return \"<bbcl=0 \" + subMatchStr + \">\";\n            } else {\n                return \"<\" + subMatchStr.replace(/^(bbcl=)([0-9]+)/, function(matchStr, m1, m2) {\n                    return m1 + (parseInt(m2, 10) + 1);\n                }) + \">\";\n            }\n        });\n        return tagContents;\n    }\n\n    /*\n        This function removes the metadata added by the updateTagDepths function\n    */\n    function unprocess(tagContent) {\n        return tagContent.replace(/<bbcl=[0-9]+ \\/\\*>/gi,\"\").replace(/<bbcl=[0-9]+ /gi,\"&#91;\").replace(/>/gi,\"&#93;\");\n    }\n\n    var replaceFunct = function(matchStr, bbcodeLevel, tagName, tagParams, tagContents) {\n\n        tagName = tagName.toLowerCase();\n\n        var processedContent = tags[tagName].noParse ? unprocess(tagContents) : tagContents.replace(bbRegExp, replaceFunct),\n            openTag = tags[tagName].openTag(tagParams,processedContent),\n            closeTag = tags[tagName].closeTag(tagParams,processedContent);\n\n        if ( tags[tagName].displayContent === false) {\n            processedContent = \"\";\n        }\n\n        return openTag + processedContent + closeTag;\n    };\n\n    function parse(config) {\n        var output = config.text;\n        output = output.replace(bbRegExp, replaceFunct);\n        return output;\n    }\n\n    /*\n        The star tag [*] is special in that it does not use a closing tag. Since this parser requires that tags to have a closing\n        tag, we must pre-process the input and add in closing tags [/*] for the star tag.\n        We have a little levaridge in that we know the text we're processing wont contain the <> characters (they have been\n        changed into their HTML entity form to prevent XSS and code injection), so we can use those characters as markers to\n        help us define boundaries and figure out where to place the [/*] tags.\n    */\n    function fixStarTag(text) {\n        text = text.replace(/\\[(?!\\*[ =\\]]|list([ =][^\\]]*)?\\]|\\/list[\\]])/ig, \"<\");\n        text = text.replace(/\\[(?=list([ =][^\\]]*)?\\]|\\/list[\\]])/ig, \">\");\n\n        while (text !== (text = text.replace(/>list([ =][^\\]]*)?\\]([^>]*?)(>\\/list])/gi, function(matchStr,contents,endTag) {\n\n            var innerListTxt = matchStr;\n            while (innerListTxt !== (innerListTxt = innerListTxt.replace(/\\[\\*\\]([^\\[]*?)(\\[\\*\\]|>\\/list])/i, function(matchStr,contents,endTag) {\n                if (endTag.toLowerCase() === \">/list]\") {\n                    endTag = \"</*]</list]\";\n                } else {\n                    endTag = \"</*][*]\";\n                }\n                return \"<*]\" + contents + endTag;\n            })));\n\n            innerListTxt = innerListTxt.replace(/>/g, \"<\");\n            return innerListTxt;\n        })));\n\n        // add ['s for our tags back in\n        text = text.replace(/</g, \"[\");\n        return text;\n    }\n\n    function addBbcodeLevels(text) {\n        while ( text !== (text = text.replace(pbbRegExp, function(matchStr, tagName, tagParams, tagContents) {\n            matchStr = matchStr.replace(/\\[/g, \"<\");\n            matchStr = matchStr.replace(/\\]/g, \">\");\n            return updateTagDepths(matchStr);\n        })) );\n        return text;\n    }\n\n    // -----------------------------------------------------------------------------\n    // public functions\n    // -----------------------------------------------------------------------------\n\n    // API, Expose all available tags\n    me.tags = function() {\n        return tags;\n    };\n\n    // API\n    me.addTags = function(newtags) {\n        var tag;\n        for (tag in newtags) {\n            tags[tag] = newtags[tag];\n        }\n        initTags();\n    };\n\n    me.process = function(config) {\n\n        var ret = {html: \"\", error: false},\n            errQueue = [];\n\n        config.text = config.text.replace(/</g, \"&lt;\"); // escape HTML tag brackets\n        config.text = config.text.replace(/>/g, \"&gt;\"); // escape HTML tag brackets\n\n        config.text = config.text.replace(openTags, function(matchStr, openB, contents, closeB) {\n            return \"<\" + contents + \">\";\n        });\n        config.text = config.text.replace(closeTags, function(matchStr, openB, contents, closeB) {\n            return \"<\" + contents + \">\";\n        });\n\n        config.text = config.text.replace(/\\[/g, \"&#91;\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/\\]/g, \"&#93;\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/</g, \"[\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/>/g, \"]\"); // escape ['s that aren't apart of tags\n\n        // process tags that don't have their content parsed\n        while ( config.text !== (config.text = config.text.replace(pbbRegExp2, function(matchStr, tagName, tagParams, tagContents) {\n            tagContents = tagContents.replace(/\\[/g, \"&#91;\");\n            tagContents = tagContents.replace(/\\]/g, \"&#93;\");\n            tagParams = tagParams || \"\";\n            tagContents = tagContents || \"\";\n            return \"[\" + tagName + tagParams + \"]\" + tagContents + \"[/\" + tagName + \"]\";\n        })) );\n\n        config.text = fixStarTag(config.text); // add in closing tags for the [*] tag\n        config.text = addBbcodeLevels(config.text); // add in level metadata\n\n        errQueue = checkParentChildRestrictions(\"bbcode\", config.text, -1, \"\", \"\", config.text);\n\n        ret.html = parse(config);\n\n        if ( ret.html.indexOf(\"[\") !== -1 || ret.html.indexOf(\"]\") !== -1) {\n            errQueue.push(\"Some tags appear to be misaligned.\");\n        }\n\n        if (config.removeMisalignedTags) {\n            ret.html = ret.html.replace(/\\[.*?\\]/g,\"\");\n        }\n        if (config.addInLineBreaks) {\n            ret.html = '<div style=\"white-space:pre-wrap;\">' + ret.html + '</div>';\n        }\n\n\t\tif (!config.escapeHtml) {\n\t\t\tret.html = ret.html.replace(\"&#91;\", \"[\"); // put ['s back in\n        \tret.html = ret.html.replace(\"&#93;\", \"]\"); // put ['s back in\n\t\t}\n\n\t\tret.html = ReactHtmlParser(ret.html);\n        // console.log('parsed.html', ret.html);\n\n        for (let x = 0; x < ret.html.length; x++) {\n            // console.log('props:', ret.html[x]['props']);\n            if (ret.html[x]['props'] && ret.html[x]['props']['children'] && ret.html[x]['props']['children'].length > 0) {\n                for (let y = 0; y < ret.html[x]['props']['children'].length; y++) {\n                    // console.log('children:', ret.html[x]['props']['children'][y]);\n                    if (ret.html[x]['props']['children'][y]['props']) {\n                        let style = ret.html[x]['props']['children'][y]['props']['style'];\n                        let limit = ret.html[x]['props']['children'][y]['props']['limit'];\n                        if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'AnimeSimpleChartStats') {\n                            ret.html[x]['props']['children'][y] = <AnimeSimpleChartStats style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'MangaSimpleChartStats') {\n                            ret.html[x]['props']['children'][y] = <MangaSimpleChartStats style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteAnime') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_ANIME} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteAnimeSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_ANIME} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteManga') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_MANGA} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteMangaSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_MANGA} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteCharacters') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_CHARACTERS} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteCharactersSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_CHARACTERS} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoritePeople') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_PEOPLE} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoritePeopleSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_PEOPLE} limit={limit} mini={true} style={style}/>;\n                        }\n                    }\n                }\n            }\n        }\n\n        ret.error = errQueue.length !== 0;\n        ret.errorQueue = errQueue;\n\n        return ret;\n    };\n\n    return me;\n})();\n\nexport default XBBCODE\n\n// for node\n// if (typeof module !== \"undefined\") {\n//     module.exports = XBBCODE;\n// }\n","import '../../../../../node_modules/xbbcode-parser/xbbcode.css'\r\n// import XBBCODE from 'xbbcode-parser'\r\nimport XBBCODE from './xbbcode'\r\nimport React from \"react\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst URL_PATTERN = /^(?:https?|file|c):(?:\\/{1,3}|\\\\{1})[-a-zA-Z0-9:;,@#%&()~_?\\+=\\/\\\\\\.]*$/;\r\n// [dimg]https://i.imgur.com/qg0PysC.jpg[/dimg]\r\n\r\nfunction parseWidthHeightFromParams(params) {\r\n    let width = null;\r\n    let height = null;\r\n    let w_unit = 'px';\r\n    let h_unit = 'px';\r\n    let style = '';\r\n\r\n    if (params && params.indexOf('width=') >= 0) {\r\n        let parse_width = params.split('width=')[1];\r\n        parse_width = parse_width.split('height=')[0];\r\n        if (parse_width.indexOf('%') >= 0)\r\n            if (parse_width)\r\n                w_unit = '%';\r\n        width = parseInt(parse_width);\r\n        if (isNaN(width))\r\n            width = null\r\n    }\r\n    if (params && params.indexOf('height=') >= 0) {\r\n        let parse_height = params.split('height=')[1];\r\n        parse_height = parse_height.split('width=')[0];\r\n        if (parse_height.indexOf('%') >= 0)\r\n            h_unit = '%';\r\n        height = parseInt(parse_height);\r\n        if (isNaN(height))\r\n            height = null\r\n    }\r\n\r\n    if (width)\r\n        style = `width: ${width}${w_unit};`;\r\n    if (height)\r\n        style = `${style} height: ${height}${h_unit};`;\r\n\r\n    return style\r\n}\r\n\r\n\r\nfunction parseLimitFromParams(params) {\r\n    let limit = null;\r\n    if (params && params.indexOf('limit=') >= 0) {\r\n        let parse_limit = params.split('limit=')[1];\r\n        limit = parseInt(parse_limit);\r\n        if (isNaN(limit))\r\n            limit = null\r\n    }\r\n    return limit\r\n}\r\n\r\n\r\nconst img = {\r\n    openTag: function (params, content) {\r\n        let url = content;\r\n        URL_PATTERN.lastIndex = 0;\r\n        if (!URL_PATTERN.test(url))\r\n            url = '';\r\n        const style = parseWidthHeightFromParams(params);\r\n\r\n        if (style.length > 0)\r\n            return `<img style=\"${style}\" src=\"${url}\"/>`;\r\n        return `<img src=\"${url}\"/>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\n\r\nconst paragraph = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n\r\n        if (style.length > 0)\r\n            return `<p style=\"${style}\">`;\r\n        return `<p>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return `</p>`;\r\n    },\r\n};\r\n\r\nconst br = {\r\n    openTag: function (params, content) {\r\n        return `<br/>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst AnimeStats = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n        if (style.length > 0)\r\n            return `<span id=\"AnimeSimpleChartStats\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"AnimeSimpleChartStats\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst MangaStats = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n        if (style.length > 0)\r\n            return `<span id=\"MangaSimpleChartStats\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"MangaSimpleChartStats\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteAnime = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteAnime';\r\n        if (mini)\r\n            component = 'UserFavoriteAnimeSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteManga = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteManga';\r\n        if (mini)\r\n            component = 'UserFavoriteMangaSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\"style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteCharacters = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteCharacters';\r\n        if (mini)\r\n            component = 'UserFavoriteCharactersSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoritePeople = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoritePeople';\r\n        if (mini)\r\n            component = 'UserFavoritePeopleSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst new_tags = {\r\n    'br': br,\r\n    'p': paragraph,\r\n    'img': img,\r\n    'animestats': AnimeStats,\r\n    'mangastats': MangaStats,\r\n    'favoriteanime': FavoriteAnime,\r\n    'favoritemanga': FavoriteManga,\r\n    'favoritecharacters': FavoriteCharacters,\r\n    'favoritepeople': FavoritePeople,\r\n};\r\n\r\nXBBCODE.addTags(new_tags);\r\n\r\n\r\nexport function cyberBBCodeParser(bbcode_string) {\r\n    try {\r\n        let result = XBBCODE.process({\r\n            text: bbcode_string,\r\n            removeMisalignedTags: false,\r\n            addInLineBreaks: true\r\n        });\r\n\r\n        console.log('resul1t', result);\r\n        return result.html;\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {cyberBBCodeParser} from \"../../settings/bbcode_editor/parser\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\nimport {BBCODE_EDITOR} from \"../../../../urls\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTools} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass AboutTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleEditorButton = this.toggleEditorButton.bind(this);\r\n        this.state = {show_editor_button: false};\r\n    }\r\n\r\n    toggleEditorButton(value) {\r\n        this.setState({show_editor_button: value})\r\n    }\r\n\r\n    render() {\r\n        let background;\r\n        if (this.props.visited_user[User.profile][Profile.about_section_background_style])\r\n            background = this.props.visited_user[User.profile][Profile.about_section_background_style];\r\n\r\n        let style = null;\r\n        if (background) {\r\n            style = {\r\n                 backgroundColor: `#${background.background_color?.['hex']}`,\r\n                 backgroundImage: `url(\"${background.url}\")`,\r\n                 backgroundRepeat: background.repeat,\r\n                 backgroundSize: background.size,\r\n                 backgroundPosition: `${background.position_1} ${background.position_2}`,\r\n            };\r\n            if (background.position_x)\r\n                style.backgroundPositionX = `${background.position_x}px`;\r\n            if (background.position_y)\r\n                style.backgroundPositionY = `${background.position_y}px`;\r\n        }\r\n\r\n        let owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            owner = true;\r\n\r\n        return <div onMouseOver={() => {this.toggleEditorButton(true)}}\r\n                    onMouseEnter={() => {this.toggleEditorButton(true)}}\r\n                    onMouseLeave={() => {this.toggleEditorButton(false)}}\r\n        >\r\n            {owner ? <div className=\"bbcode-editor-button\">\r\n                {this.state.show_editor_button ? <CyberLink to={BBCODE_EDITOR}>\r\n                    <CyberButton title=\"BBCode Editor\" variant=\"contained\" classNames=\"btn-contained-primary\">\r\n                        <FontAwesomeIcon icon={faTools}/>\r\n                    </CyberButton>\r\n                </CyberLink> : null}\r\n            </div> : null}\r\n            <div id=\"BBCode-Editor\" className=\"bbcode-container\" style={style}>\r\n                {cyberBBCodeParser(this.props.visited_user[User.profile][Profile.about_section_bbcode])}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AboutTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Chart from 'chart.js';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nimport {User, UserList} from \"../../../../models\";\r\nimport {CyberLink} from \"../../../layout/common/common\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faStar} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {USER_ANIME_HISTORY} from \"../../../../urls\";\r\nimport {FavoriteTitles} from \"../../statistics/favorites_snippets\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\n\r\n\r\nfunction getMinsPerDay(date, total_mins) {\r\n    const date1 = new Date(date);\r\n    const date2 = new Date();\r\n    const time_diff = Math.abs(date2 - date1);\r\n    const total_days = Math.ceil(time_diff / (1000 * 60 * 60 * 24));\r\n    return Math.round(total_mins / total_days)\r\n}\r\n\r\n\r\nclass AnimeTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    render() {\r\n        Chart.defaults.global.legend.display = false;\r\n\r\n        let raw = [\r\n            {label: 'Watching', stat: this.props.user_list[UserList.anime_watching], color: '', hoverColor: ''},\r\n            {label: 'Completed', stat: this.props.user_list[UserList.anime_completed], color: '', hoverColor: ''},\r\n            {label: 'On Hold', stat: this.props.user_list[UserList.anime_on_hold], color: '', hoverColor: ''},\r\n            {label: 'Dropped', stat: this.props.user_list[UserList.anime_dropped], color: '', hoverColor: ''},\r\n            {label: 'Planned', stat: this.props.user_list[UserList.anime_plan_to_watch], color: '', hoverColor: ''},\r\n        ];\r\n\r\n        let stat_data = [];\r\n        let labels = [];\r\n        for (let x = 0; x < raw.length; x++) {\r\n            stat_data.push(raw[x].stat);\r\n            labels.push(raw[x].label);\r\n        }\r\n\r\n        let data = {\r\n            labels: labels,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            datasets: [{\r\n                data: stat_data,\r\n                backgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.4)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.4)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.5)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.2)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.4)',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.8)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.8)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.8)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.8)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.3)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.3)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.3)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.3)',\r\n                ],\r\n                hoverBorderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 1)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 1)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 1)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 1)',\r\n                ],\r\n                // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n                // hoverBorderColor: '#156bb7',\r\n                borderWidth: 0\r\n            }]\r\n        };\r\n\r\n\r\n        const line_data = {\r\n            labels: ['1', '2', '3', '4', '5', '6', '7'],\r\n            datasets: [\r\n                {\r\n                    label: 'Episodes',\r\n                    data: [12, 17, 9, 6, 8, 13, 14],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ],\r\n        };\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Grid className=\"User-List-Stats-Container\" container>\r\n                <Grid item xs={5}>\r\n                    <AnimeSimpleChartStats/>\r\n                </Grid>\r\n\r\n                <Grid item xs={4} className=\"pie-container\">\r\n                    <h2>Recent</h2>\r\n                    <div className=\"\">\r\n                        <Line data={line_data} height={220} options={options}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"recent-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStar}/>\r\n                                    <span>{this.props.user_list[UserList.anime_mean_score].toFixed(2)}</span>\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={getMinsPerDay(\r\n                                        this.props.user_list[UserList.anime_started_watching_on],\r\n                                        this.props.user_list[UserList.anime_mins_spent_watching])}/>minutes per day\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={this.props.user_list[UserList.anime_mins_spent_watching]}/>\r\n                                    total minutes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.anime_episodes_watched]}/>\r\n                                episodes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <span>\r\n                                        Started Watching on <span><Moment format={'Do MMM YYYY'}\r\n                                                                          date={this.props.user_list[UserList.anime_started_watching_on]}/></span>\r\n                                    </span>\r\n                                </>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_ANIME_HISTORY(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">History</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"favorites-container\">\r\n                    <h2>Favorites</h2>\r\n                    <FavoriteTitles branch={BRANCH_ANIME}/>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    user_list: state.users.user_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Chart from 'chart.js';\r\nimport {Line, Doughnut} from 'react-chartjs-2';\r\n\r\nimport {Character, Profile, User, UserList} from \"../../../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faCircle, faPause, faPlay, faStar, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {faCalendarAlt} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_MANGA,\r\n    COLOR_DANGER,\r\n    COLOR_GRAY,\r\n    COLOR_INFO,\r\n    COLOR_PRIMARY,\r\n    COLOR_WARNING\r\n} from \"../../../../globals\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {USER_ANIME_HISTORY, USER_ANIME_STATISTICS, USER_MANGA_HISTORY} from \"../../../../urls\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport {MangaSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\n\r\n\r\nclass MangaTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    render() {\r\n        Chart.defaults.global.legend.display = false;\r\n\r\n        let raw = [\r\n            {label: 'Reading', stat: this.props.user_list[UserList.manga_reading], color: '', hoverColor: ''},\r\n            {label: 'Completed', stat: this.props.user_list[UserList.manga_completed], color: '', hoverColor: ''},\r\n            {label: 'On Hold', stat: this.props.user_list[UserList.manga_on_hold], color: '', hoverColor: ''},\r\n            {label: 'Dropped', stat: this.props.user_list[UserList.manga_dropped], color: '', hoverColor: ''},\r\n            {label: 'Planned', stat: this.props.user_list[UserList.manga_plan_to_read], color: '', hoverColor: ''},\r\n        ];\r\n\r\n        let stat_data = [];\r\n        let labels = [];\r\n        for (let x = 0; x < raw.length; x++) {\r\n            stat_data.push(raw[x].stat);\r\n            labels.push(raw[x].label);\r\n        }\r\n\r\n        let data = {\r\n            labels: labels,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            datasets: [{\r\n                data: stat_data,\r\n                backgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.4)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.4)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.5)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.2)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.4)',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.8)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.8)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.8)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.8)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.3)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.3)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.3)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.3)',\r\n                ],\r\n                hoverBorderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 1)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 1)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 1)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 1)',\r\n                ],\r\n                // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n                // hoverBorderColor: '#156bb7',\r\n                borderWidth: 0\r\n            }]\r\n        };\r\n\r\n\r\n        const line_data = {\r\n            labels: ['1', '2', '3', '4', '5', '6', '7'],\r\n            datasets: [\r\n                {\r\n                    label: 'Chapters',\r\n                    data: [12, 17, 9, 6, 8, 13, 14],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ],\r\n        };\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={5}>\r\n                    <MangaSimpleChartStats style={{width: '100%'}}/>\r\n                </Grid>\r\n                {/*<Grid item xs={5}>*/}\r\n                {/*    <h2>Stats</h2>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={7}>*/}\r\n                {/*    <h2>Recent</h2>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={3} className=\"pie-container\">*/}\r\n                {/*    <div className=\"pie-wrapper\">*/}\r\n                {/*        <Doughnut height={100} width={100} data={data}/>*/}\r\n                {/*    </div>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={2} className=\"User-List-Stats-Container\">*/}\r\n                {/*    <Grid container*/}\r\n                {/*          direction=\"column\"*/}\r\n                {/*          justify=\"center\"*/}\r\n                {/*          alignItems=\"flex-start\"*/}\r\n                {/*          className=\"chip-container\"*/}\r\n                {/*    >*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip className=\"border-info color-info\"*/}\r\n                {/*                  variant=\"outlined\"*/}\r\n                {/*                  label={<>*/}\r\n                {/*                      <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>*/}\r\n                {/*                      <span>Reading*/}\r\n                {/*                          <CountUp end={this.props.user_list[UserList.manga_reading]}/>*/}\r\n                {/*                      </span>*/}\r\n                {/*                  </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-primary color-primary\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>*/}\r\n                {/*                    <span>Completed*/}\r\n                {/*                        <CountUp end={this.props.user_list[UserList.manga_completed]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-warning color-warning\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>*/}\r\n                {/*                    <span>On Hold<CountUp end={this.props.user_list[UserList.manga_on_hold]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-danger color-danger\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>*/}\r\n                {/*                    <span>Dropped<CountUp end={this.props.user_list[UserList.manga_dropped]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-gray color-gray\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>*/}\r\n                {/*                    <span>Planned<CountUp end={this.props.user_list[UserList.manga_plan_to_read]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-white color-white\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>*/}\r\n                {/*                    <span>Total<CountUp end={this.props.user_list[UserList.manga_total_entries]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*    </Grid>*/}\r\n                {/*</Grid>*/}\r\n\r\n                <Grid item xs={4} className=\"pie-container\">\r\n                    <h2>Recent</h2>\r\n                    <div className=\"\">\r\n                        <Line data={line_data} height={220} options={options}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"recent-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStar}/>\r\n                                    <span>{this.props.user_list[UserList.manga_mean_score].toFixed(2)}</span>\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={this.props.user_list[UserList.manga_mins_spent_reading]}/>\r\n                                    total minutes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.manga_volumes_read]}/>\r\n                                volumes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.manga_chapters_read]}/>\r\n                                chapters\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <span>\r\n                                        Started Reading on <span><Moment format={'Do MMM YYYY'}\r\n                                                                          date={this.props.user_list[UserList.manga_started_reading_on]}/></span>\r\n                                    </span>\r\n                                </>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_MANGA_HISTORY(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">History</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"favorites-container\">\r\n                    <h2>Favorites</h2>\r\n\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.visited_user[User.profile][Profile.favorite_manga].map((manga, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_MANGA} title={manga}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    user_list: state.users.user_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaTab)\r\n","import React from \"react\";\r\n\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheckCircle} from \"@fortawesome/free-regular-svg-icons\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport BBCode from '@bbob/react/es/Component'\r\nimport reactPreset from '@bbob/preset-react/es'\r\n\r\nimport {isEmpty} from \"../../functions\";\r\nimport {AchievementInfo, AchievementTier, AnimeDataStatistics, UserStatistics} from \"../../../models\";\r\n\r\nconst unknown = 'https://ik.imagekit.io/r0d4cpkoj/Achievements/unknown_g6qPdfP00nE.jpg';\r\n\r\n\r\n/**\r\n *\r\n * @param tiers\r\n * @param achievements_info\r\n * @param user_achievements\r\n * @param user_progress\r\n * @param user_tier_1\r\n * @param user_tier_2\r\n * @param user_tier_3\r\n * @param user_tier_4\r\n * @returns {{user_progress: *, requirement: *, title: *, tier_2: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_1: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_4: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_3: {image: *, description: *, threshold: *, title: *, user_completed: *}}}\r\n */\r\nfunction parseGenreAchievementFromResult(tiers, achievements_info, user_achievements, user_progress, user_tier_1, user_tier_2, user_tier_3, user_tier_4) {\r\n    return {\r\n        title: achievements_info[AchievementInfo.title],\r\n        requirement: achievements_info?.[AchievementInfo.requirement],\r\n        user_progress: user_progress,\r\n        tier_1: {\r\n            title: achievements_info[AchievementInfo.tier_1][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_1][AchievementTier.description],\r\n            user_completed: user_tier_1,\r\n            image: achievements_info[AchievementInfo.tier_1][AchievementTier.image],\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: achievements_info[AchievementInfo.tier_2][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_2][AchievementTier.description],\r\n            user_completed: user_tier_2,\r\n            image: achievements_info[AchievementInfo.tier_2][AchievementTier.image],\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: achievements_info[AchievementInfo.tier_3][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_3][AchievementTier.description],\r\n            user_completed: user_tier_3,\r\n            image: achievements_info[AchievementInfo.tier_3][AchievementTier.image],\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: achievements_info[AchievementInfo.tier_4][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_4][AchievementTier.description],\r\n            user_completed: user_tier_4,\r\n            image: achievements_info[AchievementInfo.tier_4][AchievementTier.image],\r\n            threshold: tiers[3],\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getUserGenreAchievements(user_achievements, achievement_thresholds) {\r\n    let achievements = [];\r\n    let tiers = [20, 40, 80, 160];\r\n    let achievements_info = {\r\n        title: <CircularProgress/>,\r\n        requirement: '',\r\n        user_progress: 0,\r\n        tier_1: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[3],\r\n        }\r\n    };\r\n\r\n    if (isEmpty(achievement_thresholds)) return;\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_romance_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_romance_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.romance_progress],\r\n        user_achievements[UserStatistics.romance_1], user_achievements[UserStatistics.romance_2],\r\n        user_achievements[UserStatistics.romance_3], user_achievements[UserStatistics.romance_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_pervert_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_pervert_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.pervert_progress],\r\n        user_achievements[UserStatistics.pervert_1], user_achievements[UserStatistics.pervert_2],\r\n        user_achievements[UserStatistics.pervert_3], user_achievements[UserStatistics.pervert_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_classics_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_classics_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.classics_progress],\r\n        user_achievements[UserStatistics.classics_1], user_achievements[UserStatistics.classics_2],\r\n        user_achievements[UserStatistics.classics_3], user_achievements[UserStatistics.classics_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_dementia_psychological_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_dementia_psychological_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.dementia_psychological_progress],\r\n        user_achievements[UserStatistics.dementia_psychological_1], user_achievements[UserStatistics.dementia_psychological_2],\r\n        user_achievements[UserStatistics.dementia_psychological_3], user_achievements[UserStatistics.dementia_psychological_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_horror_thriller_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_horror_thriller_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.horror_thriller_progress],\r\n        user_achievements[UserStatistics.horror_thriller_1], user_achievements[UserStatistics.horror_thriller_2],\r\n        user_achievements[UserStatistics.horror_thriller_3], user_achievements[UserStatistics.horror_thriller_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_mystery_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_mystery_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.mystery_progress],\r\n        user_achievements[UserStatistics.mystery_1], user_achievements[UserStatistics.mystery_2],\r\n        user_achievements[UserStatistics.mystery_3], user_achievements[UserStatistics.mystery_4]\r\n    ));\r\n\r\n    return achievements;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} achievement\r\n * @param {string} achievement.title\r\n * @param {int} achievement.user_progress\r\n * @param {string} achievement.tier_1.title\r\n * @param {string} achievement.tier_1.description\r\n * @param {string} achievement.tier_1.image\r\n * @param {int} achievement.tier_1.user_completed\r\n * @param {int} achievement.tier_1.threshold\r\n * @param {string} achievement.tier_2.title\r\n * @param {string} achievement.tier_2.description\r\n * @param {string} achievement.tier_2.image\r\n * @param {int} achievement.tier_2.user_completed\r\n * @param {int} achievement.tier_2.threshold\r\n * @param {string} achievement.tier_3.title\r\n * @param {string} achievement.tier_3.description\r\n * @param {string} achievement.tier_3.image\r\n * @param {int} achievement.tier_3.user_completed\r\n * @param {int} achievement.tier_3.threshold\r\n * @param {string} achievement.tier_4.title\r\n * @param {string} achievement.tier_4.description\r\n * @param {string} achievement.tier_4.image\r\n * @param {int} achievement.tier_4.user_completed\r\n * @param {int} achievement.tier_4.threshold\r\n */\r\nexport function getActiveGenreDescription(achievement) {\r\n    if (achievement.tier_4.user_completed)\r\n        return achievement.tier_4.description;\r\n    else if (achievement.tier_3.user_completed)\r\n        return achievement.tier_3.description;\r\n    else if (achievement.tier_2.user_completed)\r\n        return achievement.tier_2.description;\r\n    else if (achievement.tier_1.user_completed)\r\n        return achievement.tier_1.description;\r\n    return '???'\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {string} props.title\r\n * @param {boolean} props.previous_completed\r\n * @param {int} props.tier_number\r\n * @param {boolean} props.user_completed\r\n * @param {int} props.user_progress\r\n * @param {int} props.threshold\r\n * @param {string} props.image\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function GenreAchievementSegment(props) {\r\n    const {title, previous_completed, tier_number, user_completed, user_progress, threshold, image} = props;\r\n    let tier_1_value;\r\n    let tier_1_buffer;\r\n    if (user_completed) {\r\n        tier_1_value = 100;\r\n        tier_1_buffer = 0\r\n    } else if (previous_completed) {\r\n        let progress = user_progress;\r\n        let new_threshold = threshold;\r\n        if (tier_number !== 1) {\r\n            progress = user_progress - (threshold / 2);\r\n            new_threshold = threshold - (threshold / 2);\r\n        }\r\n        tier_1_value = Math.round((progress / new_threshold) * 100);\r\n        tier_1_buffer = 100\r\n    } else {\r\n        tier_1_value = 0;\r\n        tier_1_buffer = 100\r\n    }\r\n    return <Grid item xs={3}>\r\n        <LinearProgress className=\"achievement-progress\" variant=\"buffer\" value={tier_1_value} valueBuffer={tier_1_buffer} />\r\n        <div style={{opacity: !previous_completed && !user_completed || user_completed ? 0 : 0.7}}\r\n             className=\"progress-number\"\r\n        >\r\n            <span>\r\n                {user_completed ? `${threshold}/${threshold}` : `${user_progress}/${threshold}`}\r\n             </span>\r\n        </div>\r\n        <div className={user_completed ? 'achievement-image completed' : 'achievement-image'}>\r\n            <span>{title}</span>\r\n            <img src={user_completed ? image : unknown}/>\r\n            <div className=\"check-icon\"><FontAwesomeIcon icon={faCheckCircle} /></div>\r\n        </div>\r\n    </Grid>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.achievement\r\n * @param {string} props.achievement.title\r\n * @param {string} props.achievement.requirement\r\n * @param {int} props.achievement.user_progress\r\n * @param {string} props.achievement.tier_1.title\r\n * @param {string} props.achievement.tier_1.description\r\n * @param {string} props.achievement.tier_1.image\r\n * @param {int} props.achievement.tier_1.user_completed\r\n * @param {int} props.achievement.tier_1.threshold\r\n * @param {string} props.achievement.tier_2.title\r\n * @param {string} props.achievement.tier_2.description\r\n * @param {string} props.achievement.tier_2.image\r\n * @param {int} props.achievement.tier_2.user_completed\r\n * @param {int} props.achievement.tier_2.threshold\r\n * @param {string} props.achievement.tier_3.title\r\n * @param {string} props.achievement.tier_3.description\r\n * @param {string} props.achievement.tier_3.image\r\n * @param {int} props.achievement.tier_3.user_completed\r\n * @param {int} props.achievement.tier_3.user_completed\r\n * @param {int} props.achievement.tier_3.threshold\r\n * @param {string} props.achievement.tier_4.title\r\n * @param {string} props.achievement.tier_4.description\r\n * @param {string} props.achievement.tier_4.image\r\n * @param {int} props.achievement.tier_4.user_completed\r\n * @param {int} props.achievement.tier_4.threshold\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function GenreAchievement(props) {\r\n    const {achievement} = props;\r\n    const requirement = <BBCode plugins={[reactPreset()]}>\r\n        {achievement.requirement}\r\n    </BBCode>;\r\n    return <Grid item xs={12} className=\"achievement-container\">\r\n        <Tooltip title={requirement}>\r\n            <h5>{achievement.title}</h5>\r\n        </Tooltip>\r\n        <p>{getActiveGenreDescription(achievement)}</p>\r\n        <Grid container className=\"progress-bar\">\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_1.title}\r\n                tier_number={1}\r\n                previous_completed={true}\r\n                user_completed={achievement.tier_1.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_1.threshold}\r\n                image={achievement.tier_1.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_2.title}\r\n                tier_number={2}\r\n                previous_completed={achievement.tier_1.user_completed}\r\n                user_completed={achievement.tier_2.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_2.threshold}\r\n                image={achievement.tier_2.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_3.title}\r\n                tier_number={3}\r\n                previous_completed={achievement.tier_2.user_completed}\r\n                user_completed={achievement.tier_3.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_3.threshold}\r\n                image={achievement.tier_3.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_4.title}\r\n                tier_number={4}\r\n                previous_completed={achievement.tier_3.user_completed}\r\n                user_completed={achievement.tier_4.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_4.threshold}\r\n                image={achievement.tier_4.image}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","/* eslint-disable */\r\nimport React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {User, UserStatistics} from \"../../../../models\";\r\nimport {getAnimeAchievementsThresholds} from \"../../../../actions/anime\";\r\nimport {clearUserAchievements, getUserAchievements} from \"../../../../actions/users\";\r\nimport {GenreAchievement, getUserGenreAchievements} from \"../../achievements/achievements\";\r\n\r\nimport '../../../../assets/css/achievements.css'\r\n\r\n\r\nclass AchievementsTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            user_achievements: {\r\n                the_crusade: false,\r\n                the_crusade_progress: 0.0,\r\n                romance_progress: 0,\r\n                romance_1: false,\r\n                romance_2: false,\r\n                romance_3: false,\r\n                romance_4: false,\r\n                pervert_progress: 0,\r\n                pervert_1: false,\r\n                pervert_2: false,\r\n                pervert_3: false,\r\n                pervert_4: false,\r\n                classics_progress: 0,\r\n                classics_1: false,\r\n                classics_2: false,\r\n                classics_3: false,\r\n                classics_4: false,\r\n            },\r\n            anime_achievement_thresholds: {},\r\n            achievements_loaded: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeAchievementsThresholds();\r\n        this.props.getUserAchievements(this.props.visited_user[User.id]);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearUserAchievements();\r\n    }\r\n\r\n    render() {\r\n        let genre_achievements = getUserGenreAchievements(this.state.user_achievements, this.state.anime_achievement_thresholds);\r\n        if (!this.state.achievements_loaded && !isEmpty(this.props.user_achievements) && !isEmpty(this.props.anime_achievement_thresholds))\r\n            this.setState({\r\n                user_achievements: this.props.user_achievements,\r\n                anime_achievement_thresholds: this.props.anime_achievement_thresholds,\r\n                achievements_loaded: true\r\n            });\r\n\r\n        // genre_achievements = getUserGenreAchievements(this.state.user_achievements, this.state.anime_achievement_thresholds);\r\n\r\n        return (\r\n            <Grid id=\"Achievements\" container>\r\n                <Grid item xs={12}>\r\n                    <h3>Achievements</h3>\r\n                </Grid>\r\n                {this.props.visited_user[User.id] === 15 &&\r\n                    this.props.visited_user[User.id] === this.props.user[User.id] ?\r\n                    <Grid item xs={12} className=\"achievement-container\">\r\n                        <Tooltip title=\"All Anime where the Goddess is present, count towards this achievement.\">\r\n                            <h5>The Crusade</h5>\r\n                        </Tooltip>\r\n                        <p>I am going on pilgrimage, I am going to walk the holy path.</p>\r\n                        <Tooltip title={`${this.state.user_achievements[UserStatistics.the_crusade_progress]}%`}>\r\n                            <LinearProgress className=\"achievement-progress\" variant=\"buffer\" value={this.state.user_achievements[UserStatistics.the_crusade_progress]} valueBuffer={0} />\r\n                        </Tooltip>\r\n                    </Grid> : null}\r\n                {genre_achievements ? genre_achievements.map(achievement => (\r\n                    <GenreAchievement achievement={achievement}/>\r\n                )) : null}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n    anime_loading: state.anime.anime_loading,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    anime_achievement_thresholds: state.anime.anime_achievement_thresholds,\r\n    user_achievements_loading: state.users.user_achievements_loading,\r\n    user_achievements: state.users.user_achievements,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeAchievementsThresholds, getUserAchievements, clearUserAchievements})(AchievementsTab)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBookOpen, faGamepad, faTrophy, faTv, faUser} from \"@fortawesome/free-solid-svg-icons\";\r\nimport AboutTab from \"./AboutTab\";\r\nimport AnimeTab from \"./AnimeTab\";\r\nimport MangaTab from \"./MangaTab\";\r\nimport AchievementsTab from \"./AchievementsTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ProfileTabs(props) {\r\n    const {visited_user} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root profile-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faUser}/> About</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faTv}/> Anime</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faBookOpen}/> Manga</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab disabled={true} label={<p><FontAwesomeIcon className=\"list-icon\" icon={faGamepad}/> Eroge</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    {/*<Tab disabled={true} label={<p><FontAwesomeIcon className=\"list-icon\" icon={faChartLine}/> Statistics</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>*/}\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faTrophy}/> Achievements</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"about-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <AboutTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"anime-tab box-light\" value={value} index={1} dir={theme.direction}>\r\n                    <AnimeTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"manga-tab box-light\" value={value} index={2} dir={theme.direction}>\r\n                    <MangaTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"eroge-tab box-light\" value={value} index={3} dir={theme.direction}>\r\n                    EROGE\r\n                </TabPanel>\r\n                {/*<TabPanel value={value} index={4} dir={theme.direction}>*/}\r\n                {/*    STATISTICS*/}\r\n                {/*</TabPanel>*/}\r\n                <TabPanel value={value} index={4} dir={theme.direction}>\r\n                    <AchievementsTab/>\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCamera} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {User} from \"../../../models\";\r\nimport {updateUserProfileImage} from \"../../../actions/users\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass UploadProfileImageButton extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Classnames for the loader */\r\n        loader_classnames: PropTypes.object.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onUpdateProfile = this.onUpdateProfile.bind(this);\r\n        this.state = {};\r\n    }\r\n\r\n    onUpdateProfile(e) {\r\n        this.props.updateUserProfileImage(e.target.files[0], this.props.user[User.id]);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"upload-img-btn-container\">\r\n                {this.props.uploading_file ? <CircularProgress className={this.props.loader_classnames}/> : <>\r\n                    <input\r\n                        accept=\"image/*\"\r\n                        style={{display: 'none'}}\r\n                        id=\"upload-profile-img\"\r\n                        multiple={false}\r\n                        type=\"file\"\r\n                        onChange={this.onUpdateProfile}\r\n                    />\r\n                    <label htmlFor=\"upload-profile-img\" className=\"upload-img-btn\">\r\n                        <Button variant=\"outlined\" color=\"primary\" component=\"span\"\r\n                                onMouseEnter={playHoverSound} onClick={playClickSound}>\r\n                            <FontAwesomeIcon icon={faCamera}/>\r\n                        </Button>\r\n                    </label>\r\n                </>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    uploading_file: state.users.uploading_file,\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateUserProfileImage})(UploadProfileImageButton)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Moment from \"react-moment\";\r\n\r\nimport {PROFILE_TAB_NAME} from \"../../../globals\";\r\nimport {User, Profile as ProfileModel} from \"../../../models\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport {CyberLink, PreLoadImage} from \"../../layout/common/common\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {\r\n    convertUTCDateToLocalDate, isMoreThanAYear, isTimeLessThanAnHourAgo, isTimeLessThanSixHoursAgo,\r\n    isToday,\r\n    isWithinAMonth,\r\n    isWithinAWeek, isWithinAYear, isWithinSixMonths,\r\n    isYesterday\r\n} from \"../../functions\";\r\nimport {ProfileTabs} from \"./tabs/ProfileTabs\";\r\nimport UploadProfileImageButton from \"../forms/UploadProfileImageButton\";\r\nimport {getUserList, updateUserList} from \"../../../actions/users\";\r\nimport {NOT_FOUND, USER_ANIME_HISTORY, USER_ANIME_LIST, USER_MANGA_HISTORY, USER_MANGA_LIST} from \"../../../urls\";\r\n\r\nimport '../../../assets/css/users.css'\r\n\r\n\r\nfunction getLastLoginLabel(last_login) {\r\n    const last_login_date = convertUTCDateToLocalDate(new Date(Date.parse(last_login)));\r\n    if (isTimeLessThanAnHourAgo(last_login_date))\r\n        return <span className=\"color-green\">Now</span>;\r\n    else if (isTimeLessThanSixHoursAgo(last_login_date))\r\n        return <span className=\"color-success\">Few hours ago</span>;\r\n    else if (isToday(last_login_date))\r\n        return <span className=\"color-success\">Today</span>;\r\n    else if (isYesterday(last_login_date))\r\n        return <span className=\"color-warning\">Yesterday</span>;\r\n    else if (isWithinAWeek(last_login_date))\r\n        return <span className=\"color-warning\">Few days ago</span>;\r\n    else if (isWithinAMonth(last_login_date))\r\n        return <span className=\"color-warning\">Few weeks ago</span>;\r\n    else if (isWithinSixMonths(last_login_date))\r\n        return <span className=\"color-warning\">Few months ago</span>;\r\n    else if (isWithinAYear(last_login_date))\r\n        return <span className=\"color-warning\">More than six months ago</span>;\r\n    else if (isMoreThanAYear(last_login_date))\r\n        return <span className=\"color-danger\">More than a year ago</span>;\r\n    else return <span className=\"color-danger\">A long time ago</span>\r\n}\r\n\r\n\r\nclass Profile extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            img_cover_loaded: false,\r\n            current_id: this.props.match.params.id,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        this.props.getUser(this.props.match.params.id);\r\n        this.props.getUserList(this.props.match.params.id);\r\n        this.props.updateUserList(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {match} = this.props;\r\n\r\n        if (prevState.current_id !== match.params.id) {\r\n            this.setState({current_id: this.props.match.params.id});\r\n            this.props.getUser(this.props.match.params.id);\r\n            this.props.getUserList(this.props.match.params.id);\r\n            this.props.updateUserList(this.props.match.params.id);\r\n\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        document.title = this.props.visited_user_loaded ? this.props.visited_user[User.username] : PROFILE_TAB_NAME;\r\n\r\n        let loaded = this.props.visited_user_loaded;\r\n        if (loaded && parseInt(this.props.match.params.id) !== this.props.visited_user[User.id])\r\n            loaded = false;\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                {loaded ? <Grid id=\"Profile\" container xs={12}>\r\n                    <Grid item xs={12}>\r\n                        <h1>{this.props.visited_user[User.username]}</h1>\r\n                    </Grid>\r\n                    <Grid item xs={2} className=\"side-panel\">\r\n                        <div className=\"side-panel-sticky-helper\"/>\r\n                        <div className=\"side-panel-container\">\r\n                            <div className=\"avatar-image-container\">\r\n                                <PreLoadImage src={this.props.visited_user[User.profile][ProfileModel.profile_image]}\r\n                                              alt={'Avatar'}/>\r\n                                {this.props.user && this.props.user[User.id] === parseInt(this.props.match.params.id) ?\r\n                                    <UploadProfileImageButton loader_classnames=\"upload-img-loader\"/> : null}\r\n                            </div>\r\n                            <List className=\"info-list box-light\">\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Title\"\r\n                                        secondary={this.props.visited_user[User.profile][ProfileModel.title]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Bio\"\r\n                                        secondary={this.props.visited_user[User.profile][ProfileModel.bio]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Email\"\r\n                                        secondary={this.props.visited_user[User.email]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Last Active\"\r\n                                        secondary={getLastLoginLabel(this.props.visited_user[User.last_login])}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Joined\"\r\n                                        secondary={<Moment format={'Do MMM YYYY'} date={this.props.visited_user[User.date_joined]}/>}/>\r\n                                </ListItem>\r\n                            </List>\r\n                            <Divider/>\r\n                            <List className=\"box-light\" component=\"nav\" aria-label=\"main mailbox folders\">\r\n                                <CyberLink to={USER_ANIME_LIST(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Anime List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_ANIME_HISTORY(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Anime History\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_MANGA_LIST(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Manga List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_MANGA_HISTORY(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Manga History\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={NOT_FOUND}>\r\n                                    <ListItem button>\r\n                                        Eroge List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                            </List>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={10} className=\"main-panel\">\r\n                        <ProfileTabs visited_user={this.props.visited_user}/>\r\n                    </Grid>\r\n                </Grid> : this.props.user_loading ? <Loading text={'User Loading'}/> : null}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser, getUserList, updateUserList})(Profile)\r\n","import React, {Component} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile as ProfileModel, User} from \"../../../../models\";\r\nimport {PreLoadImage} from \"../../../layout/common/common\";\r\nimport UploadProfileImageButton from \"../../forms/UploadProfileImageButton\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {EditBioForm} from \"../../forms/shortForms\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\n\r\n\r\nclass UserSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.editBio = this.editBio.bind(this);\r\n        this.finishEditingBio = this.finishEditingBio.bind(this);\r\n        this.state = {\r\n            edit_bio: false\r\n        };\r\n    }\r\n\r\n    editBio() {\r\n        this.setState({edit_bio: true})\r\n    }\r\n\r\n    finishEditingBio() {\r\n        this.setState({edit_bio: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <h1>User Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Personal settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Avatar\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {!this.props.uploading_file ? <PreLoadImage src={this.props.user[User.profile][ProfileModel.profile_image]}\r\n                                                      alt={'Avatar'} className=\"settings-avatar\"/> : null}\r\n                                        <UploadProfileImageButton/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Title\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.profile][ProfileModel.title]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Username\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.username]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Email\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.email]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Bio\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">\r\n                                        <ClickAwayListener onClickAway={this.finishEditingBio}>\r\n                                            <div>\r\n                                                {!this.state.edit_bio ? <div onClick={this.editBio}>\r\n                                                    {this.props.user[User.profile][ProfileModel.bio] ? this.props.user[User.profile][ProfileModel.bio] : 'No bio'}\r\n                                                </div> : null}\r\n                                                {this.state.edit_bio ? (\r\n                                                    <EditBioForm bio={this.props.user[User.profile][ProfileModel.bio]}\r\n                                                                 closeBio={this.finishEditingBio}/>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </ClickAwayListener>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Show adult content\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Switch\r\n                                            checked={true}\r\n                                            color=\"primary\"\r\n                                            name=\"checkedB\"\r\n                                            inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    cookies: state.cookies.sound_effects,\r\n    uploading_file: state.users.uploading_file,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(UserSettings)\r\n","import React, {Component} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faFileUpload, faTools, faVolumeMute, faVolumeUp} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {connect} from \"react-redux\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {setCookieSoundEffects} from \"../../../../actions/cookies\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Profile as ProfileModel, Profile, User} from \"../../../../models\";\r\nimport {muteUnmuteThemeSounds} from \"../../../../actions/users\";\r\nimport {EditAboutMeBBCodeDialog, EditBioForm} from \"../../forms/shortForms\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\nimport {getBrowseGridListCols} from \"../../../functions\";\r\nimport {BBCODE_EDITOR, USER_ANIME_STATISTICS} from \"../../../../urls\";\r\n\r\n\r\nclass ProfileSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.openBBCodeDialog = this.openBBCodeDialog.bind(this);\r\n        this.closeBBCodeDialog = this.closeBBCodeDialog.bind(this);\r\n        this.state = {\r\n            bbcode_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    openBBCodeDialog() {\r\n        this.setState({bbcode_dialog_open: true})\r\n    }\r\n\r\n    closeBBCodeDialog() {\r\n        this.setState({bbcode_dialog_open: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <h1>Profile Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Theme settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Theme\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <FormControl variant=\"filled\">\r\n                                            <InputLabel id=\"select-theme\">Theme</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"select-theme\"\r\n                                                id=\"demo-simple-select-outlined\"\r\n                                                value={'Cyber-Genesis'}\r\n                                                label=\"Theme\"\r\n                                            >\r\n                                                <MenuItem value={'Cyber-Genesis'}>Cyber-Genesis</MenuItem>\r\n                                                <MenuItem value={'Legacy'}>Legacy</MenuItem>\r\n                                                <MenuItem value={'Oceanic Blue'}>Oceanic Blue</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Sounds\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberButton onClick={this.props.muteUnmuteThemeSounds}>\r\n                                            <FontAwesomeIcon icon={this.props.user[User.profile][Profile.theme_sounds] ?\r\n                                                    faVolumeUp : faVolumeMute}/>\r\n                                        </CyberButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Show adult content\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Yes\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>About section</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Edit About Me bbCode\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberLink to={BBCODE_EDITOR}>\r\n                                            <CyberButton title=\"BBCode Editor\" variant=\"outlined\" >\r\n                                                <FontAwesomeIcon icon={faTools}/>\r\n                                            </CyberButton>\r\n                                        </CyberLink>\r\n                                        {/*<CyberButton variant=\"outlined\" onClick={this.openBBCodeDialog}>*/}\r\n                                        {/*    <FontAwesomeIcon icon={faEdit}/>*/}\r\n                                        {/*</CyberButton>*/}\r\n                                        {/*<EditAboutMeBBCodeDialog*/}\r\n                                        {/*    bbcode={this.props.user[User.profile][ProfileModel.about_section_bbcode]}*/}\r\n                                        {/*    open={this.state.bbcode_dialog_open}*/}\r\n                                        {/*    onClose={this.closeBBCodeDialog}/>*/}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Anime stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Manga stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Eroge stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n            </Grid>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    sound_effects: state.cookies.sound_effects,\r\n});\r\n\r\nexport default connect(mapStateToProps, {muteUnmuteThemeSounds})(ProfileSettings)\r\n","import React, { useState } from 'react';\r\n\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport store from \"../../../../store\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {\r\n    updateUserAnimeHistoryPrivacy,\r\n    updateUserAnimeListPrivacy, updateUserMangaHistoryPrivacy,\r\n    updateUserMangaListPrivacy\r\n} from \"../../../../actions/users\";\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserAnimeListPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_anime_list_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserAnimeListPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserAnimeHistoryPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_anime_history_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserAnimeHistoryPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserMangaListPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_manga_list_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserMangaListPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserMangaHistoryPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_manga_history_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserMangaHistoryPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faCheck,\r\n    faCloudDownloadAlt,\r\n    faEdit,\r\n    faFileImport,\r\n    faFileUpload, faQuestion, faTimes,\r\n    faTools,\r\n    faVolumeMute\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n    EditAboutMeBBCodeDialog,\r\n    ImportAnimeListFromMal, ImportMangaListFromMal,\r\n    ScrapeEpisodeHistoryFromMalDialog, ScrapeEpisodeHistoryFromMalForm\r\n} from \"../../forms/shortForms\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {Profile, Profile as ProfileModel, User, UserList} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n    fixUserStartAndFinishDateForAnimeEntries,\r\n    getUserEpisodeHistoryScraperProgress,\r\n    getUserList\r\n} from \"../../../../actions/users\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {\r\n    ToggleUserAnimeHistoryPrivacyForm,\r\n    ToggleUserAnimeListPrivacyForm, ToggleUserMangaHistoryPrivacyForm, ToggleUserMangaListPrivacyForm\r\n} from \"../../forms/list_privacy/listPrivacyForms\";\r\n\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    return (\r\n        <Box position=\"relative\" display=\"inline-flex\">\r\n            <CircularProgress variant=\"determinate\" {...props} />\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Typography variant=\"caption\" component=\"div\" color=\"textPrimary\">{`${props.value}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nclass ListSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.openScrapeHistoryDialog = this.openScrapeHistoryDialog.bind(this);\r\n        this.closeScrapeHistoryDialog = this.closeScrapeHistoryDialog.bind(this);\r\n        this.state = {\r\n            scrape_episode_history_dialog_open: false,\r\n            scraping_info_reading: false,\r\n            update_interval: null,\r\n            scraping_history_info_modal_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getUserList(this.props.user[User.id]);\r\n        this.props.getUserEpisodeHistoryScraperProgress();\r\n        const {getUserEpisodeHistoryScraperProgress} = this.props;\r\n        if (!isEmpty(this.props.user_list) && this.props.user_list[UserList.is_scraping_episode_history_from_mal]) {\r\n            getUserEpisodeHistoryScraperProgress();\r\n            let update_interval = setInterval(function () {\r\n                getUserEpisodeHistoryScraperProgress();\r\n            }, 10000);\r\n            this.setState({scraping_info_reading: true, update_interval: update_interval});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // setTimeout(() => { getUserEpisodeHistoryScraperProgress() }, 1000);\r\n        const {getUserEpisodeHistoryScraperProgress} = this.props;\r\n\r\n        if (!this.state.scraping_info_reading) {\r\n            if (!isEmpty(this.props.user_list) && this.props.user_list[UserList.is_scraping_episode_history_from_mal]) {\r\n                getUserEpisodeHistoryScraperProgress();\r\n                let update_interval = setInterval(function () {\r\n                    getUserEpisodeHistoryScraperProgress();\r\n                }, 10000);\r\n                this.setState({scraping_info_reading: true, update_interval: update_interval});\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.update_interval);\r\n    }\r\n\r\n    openScrapeHistoryDialog() {\r\n        this.setState({scrape_episode_history_dialog_open: true})\r\n    }\r\n\r\n    closeScrapeHistoryDialog() {\r\n        this.setState({scrape_episode_history_dialog_open: false})\r\n    }\r\n\r\n    render() {\r\n        return this.props.user_list_loading || isEmpty(this.props.user_list) ? <CircularProgress/> :\r\n            <Grid container className=\"settings-tab\">\r\n                <Grid item xs={12}>\r\n                    <h1>List Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Anime settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Anime List is {this.props.user[User.profile][Profile.is_anime_list_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserAnimeListPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Anime History is {this.props.user[User.profile][Profile.is_anime_history_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserAnimeHistoryPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Import from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ImportAnimeListFromMal/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Scrape episode history from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {isEmpty(this.props.user_list) || !this.props.user_list[UserList.is_scraping_episode_history_from_mal] ?\r\n                                            this.props.user_list_loading ? <CircularProgress/> :\r\n                                                <CyberButton variant=\"outlined\" onClick={this.openScrapeHistoryDialog}>\r\n                                                    <FontAwesomeIcon icon={faCloudDownloadAlt}/>\r\n                                                </CyberButton>\r\n                                        : <>\r\n                                            <p>{this.props.progress}%</p>\r\n                                            <LinearProgress variant=\"determinate\" value={this.props.progress}/>\r\n                                        </>}\r\n                                        <ScrapeEpisodeHistoryFromMalDialog\r\n                                            open={this.state.scrape_episode_history_dialog_open}\r\n                                            onClose={this.closeScrapeHistoryDialog}/>\r\n                                    </TableCell>\r\n                                    <div className=\"help-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n                                        playClickSound();\r\n                                        this.setState({scraping_history_info_modal_open: true})\r\n                                    }}>\r\n                                        <FontAwesomeIcon icon={faQuestion}/>\r\n                                    </div>\r\n                                    <Dialog\r\n                                        aria-labelledby=\"scrape-episode-history-info-title\"\r\n                                        open={this.state.scraping_history_info_modal_open}\r\n                                        onClose={() => {\r\n                                            this.setState({scraping_history_info_modal_open: false})\r\n                                        }}>\r\n                                        <div id=\"scrape-episode-history-info\">\r\n                                            <DialogTitle id=\"scrape-episode-history-info-title\">Quick\r\n                                                Guide</DialogTitle>\r\n                                            <Typography variant=\"body1\" paragraph={true}>\r\n                                                To scrape your episode history from MAL you first must provide your\r\n                                                authentication cookies of your account on MAL.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\">\r\n                                                To find these cookies go to MAL, log in to your account and open Inspect\r\n                                                Element on your browser:\r\n                                            </Typography>\r\n                                            <ul>\r\n                                                <li>Click on the Application tab</li>\r\n                                                <li>Click on Cookies under the Storage segment on the left</li>\r\n                                                <li>Click on the MAL url under Cookies</li>\r\n                                                <li>In the value column copy the value of MALSESSIONID and MALHLOGSESSID\r\n                                                    and paste them in the form accordingly\r\n                                                </li>\r\n                                            </ul>\r\n                                            <img src=\"images/user_scrape_guide_1.jpg\"/>\r\n                                            <Typography variant=\"body1\">\r\n                                                The scraper will use these cookies only to view your episode history and\r\n                                                scrape it.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\">\r\n                                                When the scraper starts:\r\n                                            </Typography>\r\n                                            <ul>\r\n                                                <li>Don't log out of MAL during the scraping process.</li>\r\n                                                <li>The scraper might last up to few hours depending on your list\r\n                                                    size.\r\n                                                </li>\r\n                                                <li>You will get progress of the scraper when it starts.</li>\r\n                                                <li>When the scraper finishes you can log out of MAL and log in again to\r\n                                                    refresh your cookies. (For your security)\r\n                                                </li>\r\n                                            </ul>\r\n                                            <Typography>\r\n                                                NOTE: Only one user can scrape from MAL at the time, this is to\r\n                                                prevent over-clogging MAL with requests. If someone is already\r\n                                                scraping please wait and try again later.\r\n                                            </Typography>\r\n\r\n                                            <div className=\"close-btn\">\r\n                                                <CyberButton classNames=\"btn-contained-primary\" onClick={() => {\r\n                                                    this.setState({scraping_history_info_modal_open: false})\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faTimes}/>\r\n                                                </CyberButton>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Dialog>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Fix Start Date and Finish Date for your anime list entries\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberButton variant=\"outlined\"\r\n                                                     onClick={() => {\r\n                                                         if (window.confirm('Are you sure?'))\r\n                                                             this.props.fixUserStartAndFinishDateForAnimeEntries()\r\n                                                     }}>\r\n                                            <FontAwesomeIcon icon={faTools}/>\r\n                                        </CyberButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Manga settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Manga List is {this.props.user[User.profile][Profile.is_manga_list_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserMangaListPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Manga History is {this.props.user[User.profile][Profile.is_manga_history_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserMangaHistoryPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Import from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ImportMangaListFromMal/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_list: state.users.user_list,\r\n    user_list_loading: state.users.user_list_loading,\r\n    progress: state.users.user_list[UserList.scraping_episode_history_from_mal_progress],\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getUserList, getUserEpisodeHistoryScraperProgress, fixUserStartAndFinishDateForAnimeEntries\r\n})(ListSettings)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport UserSettings from \"./UserSettings\";\r\nimport ProfileSettings from \"./ProfileSettings\";\r\nimport ListSettings from \"./ListSettings\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function SettingsTabs(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label=\"User\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"Profile\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"List\" {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <UserSettings/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    <ProfileSettings/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={2} dir={theme.direction}>\r\n                    <ListSettings/>\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {SETTINGS_TAB_NAME} from \"../../../globals\";\r\nimport {LOGIN} from \"../../../urls\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport {SettingsTabs} from \"./tabs/SettingsTabs\";\r\n\r\nimport '../../../assets/css/users.css'\r\n\r\n\r\nclass Settings extends Component {\r\n    componentDidMount() {\r\n        document.title = SETTINGS_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.user_authenticated)\r\n            return <Redirect to={LOGIN}/>;\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Settings\">\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <SettingsTabs/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Settings)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport PropTypes from \"prop-types\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass MangaBrowse extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        let manga_filters = this.props.manga_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            manga_filters = this.props.manga_season_filters;\r\n        return <Browse\r\n            branch={BRANCH_MANGA}\r\n            titles_loading={this.props.manga_loading}\r\n            filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n            filtered_titles={this.props.filtered_manga}\r\n            title_filters={manga_filters}\r\n            user_entry_statuses={this.props.user_manga_entry_statuses}\r\n            season={this.props.season}\r\n            user_display_settings={this.props.user_manga_display_settings}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_browse_filters: state.cookies.manga_browse_filters,\r\n    manga_season_filters: state.cookies.manga_season_filters,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n    user_manga_display_settings: state.users.user_manga_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass AnimeDisplay extends Component {\r\n    componentDidMount() {\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_ANIME}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.anime_loading}\r\n            title_loaded={this.props.anime_loaded}\r\n            title={this.props.anime}\r\n            user_title_status={this.props.user_anime_entry}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_loaded: state.anime.anime_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    user_anime_entry: state.users.user_anime_entry,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLoggedInUserAnimeEntryStatuses,\r\n    getLoggedInUserMangaEntryStatuses\r\n})(AnimeDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass MangaDisplay extends Component {\r\n    componentDidMount() {\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_MANGA}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.manga_loading}\r\n            title_loaded={this.props.manga_loaded}\r\n            title={this.props.manga}\r\n            user_title_status={this.props.user_manga_entry}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    manga_loaded: state.manga.manga_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n    user_manga_entry: state.users.user_manga_entry,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLoggedInUserAnimeEntryStatuses,\r\n    getLoggedInUserMangaEntryStatuses\r\n})(MangaDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\n\r\n\r\nclass CharactersBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_CHARACTERS}\r\n            titles_loading={this.props.characters_loading}\r\n            filtered_titles_loaded={this.props.filtered_characters_loaded}\r\n            filtered_titles={this.props.filtered_characters}\r\n            title_filters={this.props.characters_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    characters_loading: state.characters.characters_loading,\r\n    filtered_characters_loaded: state.characters.filtered_characters_loaded,\r\n    filtered_characters: state.characters.filtered_characters,\r\n    characters_filters: state.cookies.characters_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharactersBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass CharacterDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_CHARACTERS}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.characters_loading}\r\n            title_loaded={this.props.characters_loaded}\r\n            title={this.props.character}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    character: state.characters.character,\r\n    characters_loaded: state.characters.characters_loaded,\r\n    characters_loading: state.characters.characters_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharacterDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass ErogeBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_EROGE}\r\n            titles_loading={this.props.eroge_loading}\r\n            filtered_titles_loaded={this.props.filtered_eroge_loaded}\r\n            filtered_titles={this.props.filtered_eroge}\r\n            title_filters={this.props.eroge_filters}\r\n            user_display_settings={this.props.user_eroge_display_settings}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    filtered_eroge_loaded: state.eroge.filtered_eroge_loaded,\r\n    filtered_eroge: state.eroge.filtered_eroge,\r\n    eroge_filters: state.cookies.eroge_browse_filters,\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ErogeBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass CharacterDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_EROGE}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.eroge_loading}\r\n            title_loaded={this.props.eroge_loaded}\r\n            title={this.props.eroge}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge: state.eroge.eroge,\r\n    eroge_loaded: state.eroge.eroge_loaded,\r\n    eroge_loading: state.eroge.eroge_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharacterDisplay)\r\n","import {BRANCH_ANIME, BRANCH_MANGA} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {getAnimeData} from \"../../actions/anime\";\r\nimport {getMangaData} from \"../../actions/manga\";\r\nimport {AnimeData, MangaData} from \"../../models\";\r\nimport {ANIME_SEASON_DISPLAY, HOME, MANGA_SEASON_DISPLAY} from \"../../urls\";\r\nimport AnimeBrowse from \"../anime/browse/AnimeBrowse\";\r\nimport React from \"react\";\r\nimport MangaBrowse from \"../manga/browse/MangaBrowse\";\r\nimport {faLeaf, faSeedling, faSnowflake, faSun, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nexport function getSeasonIcon(season) {\r\n    switch (season) {\r\n        case 1:\r\n            return <FontAwesomeIcon icon={faSeedling} className=\"spring\"/>;\r\n        case 2:\r\n            return <FontAwesomeIcon icon={faSun} className=\"summer\"/>;\r\n        case 3:\r\n            return <FontAwesomeIcon icon={faLeaf} className=\"fall\"/>;\r\n        case 4:\r\n            return <FontAwesomeIcon icon={faSnowflake} className=\"winter\"/>;\r\n        default:\r\n            return <FontAwesomeIcon icon={faTimes} className=\"winter\"/>;\r\n    }\r\n}\r\n\r\n\r\nexport function getTitleData(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            // noinspection JSCheckFunctionSignatures\r\n            store.dispatch(getAnimeData());\r\n            return;\r\n        case BRANCH_MANGA:\r\n            // noinspection JSCheckFunctionSignatures\r\n            store.dispatch(getMangaData());\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function browseSeasonTitlesFromBranch(branch, year, season) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AnimeBrowse season={{year: year, season: season}}/>;\r\n        case BRANCH_MANGA:\r\n            return <MangaBrowse season={{year: year, season: season}}/>;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getPrevSeasonUrl(branch, year, season) {\r\n    let prev_year = year;\r\n    let prev_season = season - 1;\r\n    if (prev_season === 0) {\r\n        prev_season = 4;\r\n        prev_year = year - 1\r\n    }\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(prev_year, prev_season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(prev_year, prev_season);\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getNextSeasonUrl(branch, year, season) {\r\n    let next_year = year;\r\n    let next_season = season + 1;\r\n    if (next_season === 5) {\r\n        next_season = 1;\r\n        next_year = year + 1\r\n    }\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(next_year, next_season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(next_year, next_season);\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport function formatData(branch, data) {\r\n    let display_data = {\r\n        total_titles_per_season_json: null,\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            display_data.total_titles_per_season_json = data[AnimeData.total_anime_per_season_json];\r\n            return display_data;\r\n        case BRANCH_MANGA:\r\n            display_data.total_titles_per_season_json = data[MangaData.total_manga_per_season_json];\r\n            return display_data;\r\n        default:\r\n            return display_data;\r\n    }\r\n}\r\n\r\nexport function getSeasonUrl(branch, year, season) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(year, season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(year, season);\r\n        default:\r\n            return HOME;\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\n\r\nimport {SeasonYear} from \"../../models\";\r\nimport {getBrowseGridListCols} from \"../functions\";\r\nimport {CyberLink} from \"../layout/common/common\";\r\nimport Loading from \"../layout/common/Loading\";\r\n\r\nimport '../../assets/css/seasons.css'\r\nimport {formatData, getSeasonUrl, getTitleData} from \"./functions\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\n\r\nclass BrowseSeasons extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        data_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        data_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        data: PropTypes.object.isRequired,\r\n    };\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {gridlist_cols: getBrowseGridListCols()};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.branch} Seasons`;\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n\r\n        getTitleData(this.props.branch);\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    render() {\r\n        const data = this.props.data_loaded ? formatData(this.props.branch, this.props.data) : formatData();\r\n\r\n        console.log('data', this.props.data);\r\n        console.log(data);\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                {this.props.data_loaded ? <Grid id=\"Seasons\" container>\r\n                    <Grid item xs={12}>\r\n                        <GridList cellHeight={280} cols={this.state.gridlist_cols} style={{margin: 0}}>\r\n                            {data.total_titles_per_season_json ?\r\n                                JSON.parse(data.total_titles_per_season_json).reverse().map((year, x) => (\r\n                                    <Grow in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1} className=\"season-card\">\r\n                                            <div className=\"box-light\">\r\n                                                {console.log(year)}\r\n                                                <h1>{year[SeasonYear.year]}</h1>\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSeedling} className=\"spring\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 1)}>Spring</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][0]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSun} className=\"summer\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 2)}>Summer</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][1]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faLeaf} className=\"fall\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 3)}>Fall</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][2]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSnowflake} className=\"winter\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 4)}>Winter</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][3]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <p className=\"total\">Total {year[SeasonYear.seasons][0] + year[SeasonYear.seasons][1] + year[SeasonYear.seasons][2] + year[SeasonYear.seasons][3]}</p>\r\n                                            </div>\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                )) : null}\r\n                        </GridList>\r\n                    </Grid>\r\n                </Grid> : this.props.anime_loading ? <Loading text={'Seasons Loading'}/> : null}\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport BrowseSeasons from \"../../seasons/BrowseSeasons\";\r\n\r\n\r\nclass BrowseAnimeSeasons extends Component {\r\n    render() {\r\n        return <BrowseSeasons\r\n            branch={BRANCH_ANIME}\r\n            data_loading={this.props.anime_loading}\r\n            data_loaded={this.props.anime_data_loaded}\r\n            data={this.props.anime_data}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data: state.anime.anime_data,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseAnimeSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport BrowseSeasons from \"../../seasons/BrowseSeasons\";\r\n\r\n\r\nclass BrowseMangaSeasons extends Component {\r\n    render() {\r\n        return <BrowseSeasons\r\n            branch={BRANCH_MANGA}\r\n            data_loading={this.props.manga_loading}\r\n            data_loaded={this.props.manga_data_loaded}\r\n            data={this.props.manga_data}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_data: state.manga.manga_data,\r\n    manga_data_loaded: state.manga.manga_data_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseMangaSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {NOT_FOUND_404_TAB_NAME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\n\r\n\r\nclass NotFound extends Component {\r\n    componentDidMount() {\r\n        document.title = NOT_FOUND_404_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Not-Found\">\r\n                    <Grid container className=\"container\">\r\n                        <Grid xs={12}>\r\n                            <h1>404</h1>\r\n                            <p>Not found</p>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(NotFound)\r\n","import React, {Component, Fragment} from \"react\";\nimport {withAlert} from \"react-alert\";\nimport {connect} from \"react-redux\";\nimport {Alert} from \"../../../models\";\nimport store from \"../../../store\";\nimport {cleanErrors, clearMessage} from \"../../../actions/messages\";\nimport {isEmpty} from \"../../functions\";\n\n\nexport class Alerts extends Component {\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {error, alert, message} = this.props;\n        if (error.status !== prevProps.error.status) {\n            console.log(error.message);\n            let msg = '';\n            if (!isEmpty(error.message))\n                Object.keys(error.message).forEach(key=>{\n                   msg += `\\n${error.message[key]}`\n                });\n\n            if (error.status !== null || error.message !== null) {\n                alert.error(`${error.status ? `Status: ${error.status}` : ''} ${msg}`, {\n                    onOpen: () => {\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            }\n        }\n\n        if (message !== prevProps.message) {\n            if (this.props.type === Alert.type_success)\n                alert.success(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            else if (this.props.type === Alert.type_info)\n                alert.info(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            else if (this.props.type === Alert.type_error)\n                alert.error(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n        }\n\n    }\n\n    render() {\n        return <Fragment/>;\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: state.errors,\n    message: state.success.message,\n    type: state.success.type\n});\n\nexport default connect(mapStateToProps)(withAlert()(Alerts));\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {getSeasonLabelFromSeasonNumber} from \"../functions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {browseSeasonTitlesFromBranch, getNextSeasonUrl, getPrevSeasonUrl, getSeasonIcon} from \"./functions\";\r\n\r\nimport '../../assets/css/seasons.css'\r\nimport {CyberButton, CyberLink} from \"../layout/common/common\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../urls\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowLeft, faArrowRight, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass DisplaySeason extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            year: parseInt(this.props.match.params.year),\r\n            season_num: parseInt(this.props.match.params.season),\r\n            season_name: getSeasonLabelFromSeasonNumber(parseInt(this.props.match.params.season))\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log('prev prop', prevProps);\r\n        console.log('prev prop', prevProps.match.params);\r\n        console.log('prev', prevState);\r\n        console.log('new', this.props.match.params.season);\r\n        if (prevProps.match.params.season !== this.props.match.params.season) {\r\n            this.setState({\r\n                year: parseInt(this.props.match.params.year),\r\n                season_num: parseInt(this.props.match.params.season),\r\n                season_name: getSeasonLabelFromSeasonNumber(parseInt(this.props.match.params.season))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Seasons\">\r\n                <div className=\"title-segment\">\r\n                    <CyberLink to={getPrevSeasonUrl(this.props.branch, this.state.year, this.state.season_num)}>\r\n                        <CyberButton variant=\"outlined\">\r\n                            <FontAwesomeIcon icon={faArrowLeft}/>\r\n                        </CyberButton>\r\n                    </CyberLink>\r\n                    <h1>\r\n                        {getSeasonIcon(this.state.season_num)} {this.state.season_name} {this.state.year}\r\n                    </h1>\r\n                    <CyberLink to={getNextSeasonUrl(this.props.branch, this.state.year, this.state.season_num)}>\r\n                        <CyberButton variant=\"outlined\">\r\n                            <FontAwesomeIcon icon={faArrowRight}/>\r\n                        </CyberButton>\r\n                    </CyberLink>\r\n                </div>\r\n                {browseSeasonTitlesFromBranch(this.props.branch, this.state.year, this.state.season_num)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(DisplaySeason)\r\n","import React from \"react\";\r\n\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {faServer} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport {Anime, ANIME_SHORT_STATUS, Manga, MANGA_SHORT_STATUS, UserAnimeEntry, UserMangaEntry} from \"../../../models\";\r\nimport {formatContentDateByKnown, userTitlePriorityNumberToText} from \"../../functions\";\r\nimport {ANIME_DISPLAY, MANGA_DISPLAY} from \"../../../urls\";\r\nimport {FilterSchema} from \"../../layout/filters/field_names\";\r\nimport {getUserStatusChip} from \"../../layout/cards/functions\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\nimport UpdateAnimeEpisodeButton from \"../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport {UpdateMangaChapterButton, UpdateMangaVolumeButton} from \"../forms/manga/UpdateMangaVolumeChapterButtons\";\r\n\r\n\r\nfunction getDaysFromDate(start_date, finish_date) {\r\n    let start = new Date(start_date)\r\n    let end = new Date()\r\n    if (finish_date)\r\n        end = new Date(finish_date)\r\n\r\n    const diff = new moment.duration(end - start);\r\n    return Math.floor(diff.asDays())\r\n}\r\n\r\n\r\nexport function formatTitleForUserListRows(branch, user_status, entry, design_settings, list_owner, list) {\r\n    let start_date = '';\r\n    let end_date = '';\r\n    let card_title = {\r\n        id: 0,\r\n        link: '',\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: '',\r\n        chipset_header: [],\r\n        column_set: [],\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME: {\r\n            const title = entry[UserAnimeEntry.anime]\r\n            start_date = formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Anime.air_end], title[Anime.air_end_known], true);\r\n\r\n            const progress = <>\r\n                {entry[UserAnimeEntry.watched_episodes]}/{title[Anime.episodes] ? title[Anime.episodes] : '-'}{' '}\r\n                {list_owner ? <UpdateAnimeEpisodeButton\r\n                    id={title[Anime.id]} entry={entry}\r\n                    list={list}/> : null}\r\n            </>\r\n\r\n            card_title.id = title[Anime.id];\r\n            card_title.link = ANIME_DISPLAY(title[Anime.id]);\r\n            card_title.cover_images = title[Anime.anime_cover_images];\r\n            card_title.cdn_cover_images = title[Anime.anime_cdn_cover_images];\r\n            card_title.title = title[Anime.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.label],\r\n                    color: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Anime.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Anime.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Anime.anime_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (design_settings.title_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (design_settings.title_user_score)\r\n                if (entry[UserAnimeEntry.score] !== 0)\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={entry[UserAnimeEntry.score]}/> :\r\n                        <span className=\"row-text row-user-score\">{entry[UserAnimeEntry.score]}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_progress)\r\n                card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\" label={progress}/> :\r\n                    <span className=\"row-text\">{progress}</span>);\r\n\r\n            if (design_settings.title_priority)\r\n                card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                          label={`${userTitlePriorityNumberToText(entry[UserAnimeEntry.priority])}`}/> :\r\n                    <span className=\"row-text\">{userTitlePriorityNumberToText(entry[UserAnimeEntry.priority])}</span>);\r\n\r\n            if (design_settings.title_comments)\r\n                if (entry[UserAnimeEntry.comments])\r\n                    card_title.column_set.push(<span className=\"row-text\">{entry[UserAnimeEntry.comments]}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_tags)\r\n                if (entry[UserAnimeEntry.tags])\r\n                    card_title.column_set.push(<span className=\"row-text\">{entry[UserAnimeEntry.tags]}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_started)\r\n                if (entry[UserAnimeEntry.start_date])\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserAnimeEntry.start_date]} format={'Do MMM YYYY'}/>}/> :\r\n                        <span className=\"row-text\">\r\n                            {<Moment date={entry[UserAnimeEntry.start_date]} format={'Do MMM YYYY'}/>}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_finished)\r\n                if (entry[UserAnimeEntry.finish_date])\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserAnimeEntry.finish_date]} format={'Do MMM YYYY'}/>}/> :\r\n                        <span className=\"row-text\">\r\n                            {<Moment date={entry[UserAnimeEntry.finish_date]} format={'Do MMM YYYY'}/>}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_added)\r\n                if (entry[UserAnimeEntry.date_added])\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserAnimeEntry.date_added]} format={'Do MMM YYYY'}/>}/> :\r\n                        <span className=\"row-text\">\r\n                            {<Moment date={entry[UserAnimeEntry.date_added]} format={'Do MMM YYYY'}/>}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_days)\r\n                if (entry[UserAnimeEntry.start_date])\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${getDaysFromDate(\r\n                                  entry[UserAnimeEntry.start_date], entry[UserAnimeEntry.finish_date])} days`}/> :\r\n                        <span className=\"row-text\">{`${getDaysFromDate(\r\n                            entry[UserAnimeEntry.start_date], entry[UserAnimeEntry.finish_date])} days`}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_type)\r\n                if (title[Anime.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.type]}/> :\r\n                        <span className=\"row-text\">{title[Anime.type]}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_episodes)\r\n                if (title[Anime.episodes])\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Anime.episodes]}ep`}/> :\r\n                        <span className=\"row-text\">{title[Anime.episodes]}ep</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_mins_per_ep)\r\n                if (title[Anime.minutes_per_episode])\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${title[Anime.minutes_per_episode]}m`}/> :\r\n                        <span className=\"row-text\">{title[Anime.minutes_per_episode]}m</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_rating)\r\n                if (title[Anime.rating_short])\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.rating_short]}/> :\r\n                        <span className=\"row-text\">{title[Anime.rating_short]}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_genres)\r\n                if (title[Anime.genres_csv]) {\r\n                    let genres;\r\n                    if (design_settings.list_table_text_bubbles) {\r\n                        genres = [];\r\n                        title[Anime.genres_csv].split(', ').map(genre => (\r\n                            genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                        ));\r\n                    } else genres = <span className=\"row-text\">{title[Anime.genres_csv]}</span>\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (design_settings.title_mal_score)\r\n                if (title[Anime.score])\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.score]}/> :\r\n                        <span className=\"row-text\">{title[Anime.score]}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_aired)\r\n                if (start_date)\r\n                    card_title.column_set.push(design_settings.list_table_text_bubbles ?\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${start_date}${end_date ? ' to ' + end_date : ''}`}/> :\r\n                        <span className=\"row-text\">{start_date}{end_date ? ' to ' + end_date : ''}</span>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        }\r\n        case BRANCH_MANGA: {\r\n            const title = entry[UserMangaEntry.manga]\r\n            start_date = formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Manga.air_end], title[Manga.air_end_known], true);\r\n\r\n            const progress_volumes = <>\r\n                {entry[UserMangaEntry.read_volumes]}/{title[Manga.volumes] ? title[Manga.volumes] : '-'}{' '}\r\n                {list_owner ? <UpdateMangaVolumeButton\r\n                    id={title[Manga.id]} entry={entry}\r\n                    list={list}/> : null}\r\n            </>\r\n            const progress_chapters = <>\r\n                {entry[UserMangaEntry.read_chapters]}/{title[Manga.chapters] ? title[Manga.chapters] : '-'}{' '}\r\n                {list_owner ? <UpdateMangaChapterButton\r\n                    id={title[Manga.id]} entry={entry}\r\n                    list={list}/> : null}\r\n            </>\r\n\r\n            card_title.id = title[Manga.id];\r\n            card_title.link = MANGA_DISPLAY(title[Manga.id]);\r\n            card_title.cover_images = title[Manga.manga_cover_images];\r\n            card_title.cdn_cover_images = title[Manga.manga_cdn_cover_images];\r\n            card_title.title = title[Manga.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.label],\r\n                    color: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Manga.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Manga.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Manga.manga_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (design_settings.title_user_score)\r\n                if (entry[UserMangaEntry.score] !== 0)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={entry[UserMangaEntry.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_progress)\r\n                card_title.column_set.push(\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\" label={progress_volumes}/>);\r\n\r\n            if (design_settings.title_progress_2)\r\n                card_title.column_set.push(\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\" label={progress_chapters}/>);\r\n\r\n            if (design_settings.title_priority)\r\n                card_title.column_set.push(\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                          label={`${userTitlePriorityNumberToText(entry[UserMangaEntry.priority])}`}/>);\r\n\r\n            if (design_settings.title_comments)\r\n                if (entry[UserMangaEntry.comments])\r\n                    card_title.column_set.push(<p>{entry[UserMangaEntry.comments]}</p>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_tags)\r\n                if (entry[UserMangaEntry.tags])\r\n                    card_title.column_set.push(<p>{entry[UserMangaEntry.tags]}</p>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_started)\r\n                if (entry[UserMangaEntry.start_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserMangaEntry.start_date]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_finished)\r\n                if (entry[UserMangaEntry.finish_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserMangaEntry.finish_date]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_added)\r\n                if (entry[UserMangaEntry.date_added])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserMangaEntry.date_added]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_days)\r\n                if (entry[UserMangaEntry.start_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${getDaysFromDate(\r\n                                  entry[UserMangaEntry.start_date], entry[UserMangaEntry.finish_date])} days`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_type)\r\n                if (title[Manga.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Manga.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_volumes)\r\n                if (title[Manga.volumes])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Manga.volumes]}v`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_chapters)\r\n                if (title[Manga.chapters])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Manga.chapters]}c`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_genres)\r\n                if (title[Manga.genres_csv]) {\r\n                    let genres = [];\r\n                    title[Manga.genres_csv].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (design_settings.title_mal_score)\r\n                if (title[Manga.score])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Manga.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_aired)\r\n                if (start_date)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${start_date}${end_date ? ' to ' + end_date : ''}`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        }\r\n        default:\r\n            return card_title\r\n    }\r\n}\r\n","import {Anime, CDNCoverImages, CoverImages, UserAnimeEntry, UserMangaEntry} from \"../../../../models\";\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_EROGE, BRANCH_MANGA,\r\n    CYBER_GENESIS_URL,\r\n    getPriorityLabel,\r\n    USER_ANIME_STATUSES\r\n} from \"../../../../globals\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCalendarAlt, faCheck, faEdit, faImage, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport {ANIME_DISPLAY} from \"../../../../urls\";\r\nimport AnimeEntryModalForm from \"../../forms/anime/AnimeEntryModalForm\";\r\nimport UpdateAnimeEpisodeButton from \"../../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport {getTitleCoverImage, isEmpty} from \"../../../functions\";\r\nimport CardUserEditTitleEntry from \"../../../layout/cards/CardUserEditTitleEntry\";\r\nimport {formatTitleForRows} from \"../../../layout/rows/functions\";\r\nimport {formatTitleForUserListRows} from \"../functions\";\r\n\r\n\r\nfunction getTitleAndStatusKeysFromBranch(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return [UserAnimeEntry.anime, UserAnimeEntry.status]\r\n        case BRANCH_MANGA:\r\n            return [UserMangaEntry.manga, UserMangaEntry.status]\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.selected {String}\r\n * @param props.setSelected {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeListStatusButtons(props) {\r\n    const {selected, setSelected} = props;\r\n\r\n    return <>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton disabled={true}>All</CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.watching ? 'btn-contained-success' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.watching)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPlay}/><span className=\"btn-label\">Watching</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.completed ? 'btn-contained-primary' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.completed)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCheck}/><span className=\"btn-label\">Completed</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.on_hold ? 'btn-contained-warning' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.on_hold)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPause}/><span className=\"btn-label\">On Hold</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.dropped ? 'btn-contained-danger' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.dropped)\r\n                }}>\r\n                <FontAwesomeIcon icon={faStop}/><span className=\"btn-label\">Dropped</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.plan_to_watch ? 'btn-contained-default' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.plan_to_watch)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCalendarAlt}/><span className=\"btn-label\">Planned</span>\r\n            </CyberButton>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {String} props.branch\r\n * @param {Object} props.design_settings\r\n * @param {Object} props.list_owner\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListTableHead(props) {\r\n    switch (props.branch) {\r\n        case BRANCH_ANIME:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    {props.design_settings.list_table_show_images ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">\r\n                            <FontAwesomeIcon icon={faImage}/></TableCell> : null}\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    {props.design_settings.title_edit_button && props.list_owner ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">\r\n                            <FontAwesomeIcon icon={faEdit}/></TableCell> : null}\r\n                    {props.design_settings.title_user_score ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.design_settings.title_progress ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Progress</TableCell> : null}\r\n                    {props.design_settings.title_priority ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Priority</TableCell> : null}\r\n                    {props.design_settings.title_comments ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Comment</TableCell> : null}\r\n                    {props.design_settings.title_tags ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Tags</TableCell> : null}\r\n                    {props.design_settings.title_started ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Started</TableCell> : null}\r\n                    {props.design_settings.title_finished ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Finished</TableCell> : null}\r\n                    {props.design_settings.title_added ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Added</TableCell> : null}\r\n                    {props.design_settings.title_days ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Days</TableCell> : null}\r\n                    {props.design_settings.title_type ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Type</TableCell> : null}\r\n                    {props.design_settings.title_episodes ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Episodes</TableCell> : null}\r\n                    {props.design_settings.title_mins_per_ep ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Min per ep</TableCell> : null}\r\n                    {props.design_settings.title_rating ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Rating</TableCell> : null}\r\n                    {props.design_settings.title_genres ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Genres</TableCell> : null}\r\n                    {props.design_settings.title_mal_score ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.design_settings.title_aired ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Aired</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        case BRANCH_MANGA:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    {props.design_settings.list_table_show_images ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">\r\n                            <FontAwesomeIcon icon={faImage}/></TableCell> : null}\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    {props.design_settings.title_edit_button && props.list_owner ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">\r\n                            <FontAwesomeIcon icon={faEdit}/></TableCell> : null}\r\n                    {props.design_settings.title_user_score ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.design_settings.title_progress ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Volumes</TableCell> : null}\r\n                    {props.design_settings.title_progress_2 ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Chapters</TableCell> : null}\r\n                    {props.design_settings.title_priority ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Priority</TableCell> : null}\r\n                    {props.design_settings.title_comments ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Comment</TableCell> : null}\r\n                    {props.design_settings.title_tags ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Tags</TableCell> : null}\r\n                    {props.design_settings.title_started ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Started</TableCell> : null}\r\n                    {props.design_settings.title_finished ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Finished</TableCell> : null}\r\n                    {props.design_settings.title_added ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Added</TableCell> : null}\r\n                    {props.design_settings.title_days ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Days</TableCell> : null}\r\n                    {props.design_settings.title_type ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Type</TableCell> : null}\r\n                    {props.design_settings.title_volumes ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Volumes</TableCell> : null}\r\n                    {props.design_settings.title_chapters ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Chapters</TableCell> : null}\r\n                    {props.design_settings.title_genres ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Genres</TableCell> : null}\r\n                    {props.design_settings.title_mal_score ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.design_settings.title_aired ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Aired</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        case BRANCH_EROGE:\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.index\r\n * @param {String} props.branch\r\n * @param {Object} props.entry\r\n * @param {Object} props.list_owner\r\n * @param {Object} props.list\r\n * @param {Object} props.design_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListTableRow(props) {\r\n    const row_title = formatTitleForUserListRows(props.branch, props.user_status, props.entry, props.design_settings, props.list_owner, props.list);\r\n    let image_url = getTitleCoverImage(row_title.cdn_cover_images, row_title.cover_images);\r\n    const [title_key, status_key] = getTitleAndStatusKeysFromBranch(props.branch)\r\n\r\n    return <TableRow>\r\n        <TableCell className=\"row-index\" component=\"th\" scope=\"row\" align=\"center\">\r\n            {props.index}\r\n        </TableCell>\r\n        {props.design_settings.list_table_show_images ? <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n            <CyberLink to={row_title.link} classNames=\"row-image\">\r\n                <img src={image_url}/>\r\n            </CyberLink>\r\n        </TableCell> : null}\r\n        <TableCell component=\"th\" scope=\"row\" className=\"row-title-wrapper\">\r\n            <CyberLink to={row_title.link} classNames=\"row-title\">\r\n                {row_title.chipset_header ? row_title.chipset_header.map(chip => (\r\n                    chip ? <Chip variant=\"default\" size=\"small\" className={`chip-${chip['color']} header-chip`}\r\n                                 label={chip['label']}/> : null\r\n                )) : null}{' '}<span>{row_title.title}</span>\r\n            </CyberLink>\r\n        </TableCell>\r\n        {props.design_settings.title_edit_button && props.list_owner ?\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\" className=\"row-user-buttons\">\r\n                <CardUserEditTitleEntry\r\n                    branch={props.branch}\r\n                    id={row_title.id}\r\n                    title={props.entry[title_key]}\r\n                    user_status={props.entry[status_key]}\r\n                />\r\n            </TableCell> : null}\r\n        {row_title.column_set.map((value, i) => (\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\" key={i}>\r\n                {value ? value : <span className=\"color-gray\">---</span>}\r\n            </TableCell>\r\n        ))}\r\n    </TableRow>\r\n}","import {CoverImages, Manga, UserMangaEntry} from \"../../../../models\";\r\nimport {CYBER_GENESIS_URL, getPriorityLabel, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBookOpen, faCalendarAlt, faCheck, faImage, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport {ANIME_DISPLAY, MANGA_DISPLAY} from \"../../../../urls\";\r\nimport AnimeEntryModalForm from \"../../forms/anime/AnimeEntryModalForm\";\r\nimport UpdateAnimeEpisodeButton from \"../../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport MangaEntryModalForm from \"../../forms/manga/MangaEntryModalForm\";\r\nimport {UpdateMangaVolumeButton, UpdateMangaChapterButton} from \"../../forms/manga/UpdateMangaVolumeChapterButtons\";\r\n\r\n\r\nfunction getCoverImgUrl(entry) {\r\n    try {\r\n        return `${CYBER_GENESIS_URL}${entry[UserMangaEntry.manga][Manga.manga_cover_images][entry[UserMangaEntry.manga][Manga.manga_cover_images].length - 1][CoverImages.image]}`\r\n    } catch (e) {\r\n        return ''\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param props.selected {String}\r\n * @param props.setSelected {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListStatusButtons(props) {\r\n    const {selected, setSelected} = props;\r\n\r\n    return <>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton disabled={true}>All</CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.reading ? 'btn-contained-success' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.reading)\r\n                }}>\r\n                <FontAwesomeIcon icon={faBookOpen}/><span className=\"btn-label\">Reading</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.completed ? 'btn-contained-primary' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.completed)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCheck}/><span className=\"btn-label\">Completed</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.on_hold ? 'btn-contained-warning' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.on_hold)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPause}/><span className=\"btn-label\">On Hold</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.dropped ? 'btn-contained-danger' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.dropped)\r\n                }}>\r\n                <FontAwesomeIcon icon={faStop}/><span className=\"btn-label\">Dropped</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.plan_to_read ? 'btn-contained-default' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.plan_to_read)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCalendarAlt}/><span className=\"btn-label\">Planned</span>\r\n            </CyberButton>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListTableHead(props) {\r\n    const {list_owner} = props;\r\n    return <TableHead>\r\n        <TableRow>\r\n            <TableCell>#</TableCell>\r\n            <TableCell align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n            <TableCell align=\"center\" colSpan={list_owner ? 2 : 1}>Title</TableCell>\r\n            <TableCell align=\"center\">Score</TableCell>\r\n            <TableCell align=\"center\">Volumes</TableCell>\r\n            <TableCell align=\"center\">Chapters</TableCell>\r\n            <TableCell align=\"center\">Priority</TableCell>\r\n            <TableCell align=\"center\">Genres</TableCell>\r\n            <TableCell align=\"center\">Type</TableCell>\r\n            <TableCell align=\"center\">Started</TableCell>\r\n            <TableCell align=\"center\">Finished</TableCell>\r\n            <TableCell align=\"center\">Added</TableCell>\r\n            {/*<TableCell align=\"center\">Watch</TableCell>*/}\r\n        </TableRow>\r\n    </TableHead>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.index {Number}\r\n * @param props.entry {Object}\r\n * @param props.list_owner {Boolean}\r\n * @param props.list {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListTableRow(props) {\r\n    const {index, entry, list_owner, list} = props;\r\n\r\n    return entry[UserMangaEntry.manga] ? <TableRow>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n            {index}\r\n        </TableCell>\r\n        <TableCell className={{width: '70px'}} align=\"center\">\r\n            <CyberLink to={MANGA_DISPLAY(entry[UserMangaEntry.manga][Manga.id])} classNames=\"cover-img-link\">\r\n                <PreLoadImage src={getCoverImgUrl(entry)} alt={`Cover image`}/>\r\n            </CyberLink>\r\n        </TableCell>\r\n        <TableCell>\r\n            <CyberLink classNames=\"title-link\"\r\n                       to={MANGA_DISPLAY(entry[UserMangaEntry.manga][Manga.id])}>\r\n                {entry[UserMangaEntry.manga][Manga.title]}\r\n            </CyberLink>\r\n        </TableCell>\r\n        {list_owner ?\r\n            <TableCell>\r\n                <MangaEntryModalForm\r\n                    id={entry[UserMangaEntry.manga][Manga.id]}\r\n                    classNames=\"edit-btn\"\r\n                    user_manga_entry={entry}\r\n                    edit={true}\r\n                    list={list}/>\r\n            </TableCell> : null}\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary table-number\" size=\"small\"\r\n                  label={entry[UserMangaEntry.score]}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserMangaEntry.read_volumes]}{' '}\r\n                    / {entry[UserMangaEntry.manga][Manga.volumes]}\r\n                    {list_owner ?\r\n                        <UpdateMangaVolumeButton\r\n                            id={entry[UserMangaEntry.manga][Manga.id]}\r\n                            entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserMangaEntry.read_chapters]}{' '}\r\n                    / {entry[UserMangaEntry.manga][Manga.chapters]}\r\n                    {list_owner ?\r\n                        <UpdateMangaChapterButton\r\n                            id={entry[UserMangaEntry.manga][Manga.id]}\r\n                            entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\" size=\"small\"\r\n                  label={getPriorityLabel(entry[UserMangaEntry.priority])}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.manga][Manga.genres_csv] ?\r\n                entry[UserMangaEntry.manga][Manga.genres_csv].split(', ')\r\n                    .map(genre => (\r\n                        <Chip className=\"chip-primary genre\" size=\"small\"\r\n                              label={genre}/>\r\n                    )) : null}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\"\r\n                  label={entry[UserMangaEntry.manga][Manga.type]} size=\"small\"/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.start_date] ? <Moment date={entry[UserMangaEntry.start_date]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.finish_date] ? <Moment date={entry[UserMangaEntry.finish_date]}\r\n                                                         format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.date_added] ? <Moment date={entry[UserMangaEntry.date_added]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        {/*<TableCell align=\"center\">*/}\r\n        {/*    <CyberButton classNames=\"btn-contained-secondary\"><FontAwesomeIcon*/}\r\n        {/*        icon={faPlay}/></CyberButton>*/}\r\n        {/*</TableCell>*/}\r\n    </TableRow> : null\r\n}","import React, {useState} from \"react\";\r\n\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {ColorPicker} from \"material-ui-color\";\r\nimport store from \"../../../../store\";\r\nimport {setUserListDesignSettings} from \"../../../../actions/users\";\r\nimport {TEMPLATE_NAMES, TEMPLATES} from \"./user_list_settings_templates\";\r\n\r\nexport const CSS_FONTS = ['Quicksand', 'Abadi MT Condensed Light', 'Aharoni', 'Aharoni Bold', 'Aldhabi',\r\n    'AlternateGothic2 BT', 'Andale Mono', 'Andalus', 'Angsana New', 'AngsanaUPC', 'Aparajita', 'Apple Chancery',\r\n    'Arabic Typesetting', 'Arial', 'Arial Black', 'Arial narrow', 'Arial Nova', 'Arial Rounded MT Bold',\r\n    'Arnoldboecklin', 'Avanta Garde', 'Bahnschrift', 'Bahnschrift Light', 'Bahnschrift SemiBold',\r\n    'Bahnschrift SemiLight', 'Baskerville', 'Batang', 'BatangChe', 'Big Caslon', 'BIZ UDGothic', 'BIZ UDMincho Medium',\r\n    'Blippo', 'Bodoni MT', 'Book Antiqua', 'Book Antiqua', 'Bookman', 'Bradley Hand', 'Browallia New', 'BrowalliaUPC',\r\n    'Brush Script MT', 'Brush Script Std', 'Brushstroke', 'Calibri', 'Calibri Light', 'Calisto MT', 'Cambodian',\r\n    'Cambria', 'Cambria Math', 'Candara', 'Century Gothic', 'Chalkduster', 'Cherokee', 'Comic Sans', 'Comic Sans MS',\r\n    'Consolas', 'Constantia', 'Copperplate', 'Copperplate Gothic Light', 'Copperplate Gothic Bold', 'Corbel',\r\n    'Cordia New', 'CordiaUPC', 'Coronetscript', 'Courier', 'Courier New', 'DaunPenh', 'David', 'DengXian', 'DFKai-SB',\r\n    'Didot', 'DilleniaUPC', 'DokChampa', 'Dotum', 'DotumChe', 'Ebrima', 'Estrangelo Edessa', 'EucrosiaUPC', 'Euphemia',\r\n    'FangSong', 'Florence', 'Franklin Gothic Medium', 'FrankRuehl', 'FreesiaUPC', 'Futara', 'Gabriola', 'Gadugi',\r\n    'Garamond', 'Gautami', 'Geneva', 'Georgia', 'Georgia Pro', 'Gill Sans', 'Gill Sans Nova', 'Gisha',\r\n    'Goudy Old Style', 'Gulim', 'GulimChe', 'Gungsuh', 'GungsuhChe', 'Hebrew', 'Hoefler Text', 'HoloLens MDL2 Assets',\r\n    'Impact', 'Ink Free', 'IrisUPC', 'Iskoola Pota', 'Japanese', 'JasmineUPC', 'Javanese Text', 'Jazz LET', 'KaiTi',\r\n    'Kalinga', 'Kartika', 'Khmer UI', 'KodchiangUPC', 'Kokila', 'Korean', 'Lao', 'Lao UI', 'Latha', 'Leelawadee',\r\n    'Leelawadee UI', 'Leelawadee UI Semilight', 'Levenim MT', 'LilyUPC', 'Lucida Bright', 'Lucida Console',\r\n    'Lucida Handwriting', 'Lucida Sans', 'Lucida Sans Typewriter', 'Lucida Sans Unicode', 'Lucidatypewriter',\r\n    'Luminari', 'Malgun Gothic', 'Malgun Gothic Semilight', 'Mangal', 'Marker Felt', 'Marlett', 'Meiryo', 'Meiryo UI',\r\n    'Microsoft Himalaya', 'Microsoft JhengHei', 'Microsoft JhengHei UI', 'Microsoft New Tai Lue', 'Microsoft PhagsPa',\r\n    'Microsoft Sans Serif', 'Microsoft Tai Le', 'Microsoft Uighur', 'Microsoft YaHei', 'Microsoft YaHei UI',\r\n    'Microsoft Yi Baiti', 'MingLiU', 'MingLiU_HKSCS', 'MingLiU_HKSCS-ExtB', 'MingLiU-ExtB', 'Miriam', 'Monaco',\r\n    'Mongolian Baiti', 'MoolBoran', 'MS Gothic', 'MS Mincho', 'MS PGothic', 'MS PMincho', 'MS UI Gothic', 'MV Boli',\r\n    'Myanmar Text', 'Narkisim', 'Neue Haas Grotesk Text Pro', 'New Century Schoolbook', 'News Gothic MT', 'Nirmala UI',\r\n    'No automatic language associations', 'Noto', 'NSimSun', 'Nyala', 'Oldtown', 'Optima', 'Palatino',\r\n    'Palatino Linotype', 'papyrus', 'Parkavenue', 'Perpetua', 'Plantagenet Cherokee', 'PMingLiU', 'Raavi', 'Rockwell',\r\n    'Rockwell Extra Bold', 'Rockwell Nova', 'Rockwell Nova Cond', 'Rockwell Nova Extra Bold', 'Rod', 'Sakkal Majalla',\r\n    'Sanskrit Text', 'Segoe MDL2 Assets', 'Segoe Print', 'Segoe Script', 'Segoe UI', 'Segoe UI Emoji',\r\n    'Segoe UI Historic', 'Segoe UI Symbol', 'Shonar Bangla', 'Shruti', 'SimHei', 'SimKai', 'Simplified Arabic',\r\n    'Simplified Chinese', 'SimSun', 'SimSun-ExtB', 'Sitka', 'Snell Roundhan', 'Stencil Std', 'Sylfaen', 'Symbol',\r\n    'Tahoma', 'Thai', 'Times New Roman', 'Traditional Arabic', 'Traditional Chinese', 'Trattatello', 'Trebuchet MS',\r\n    'Tunga', 'UD Digi Kyokasho', 'UD Digi KyoKasho NK-R', 'UD Digi KyoKasho NP-R', 'UD Digi KyoKasho N-R',\r\n    'Urdu Typesetting', 'URW Chancery', 'Utsaah', 'Vani', 'Verdana', 'Verdana Pro', 'Vijaya', 'Vrinda', 'Webdings',\r\n    'Westminster', 'Wingdings', 'Yu Gothic', 'Yu Gothic UI', 'Yu Mincho', 'Zapf Chancery'\r\n];\r\n\r\n\r\n/**\r\n *\r\n * @param value {String}\r\n */\r\nfunction getInitialUnit(value) {\r\n    try {\r\n        if (value.indexOf('rem') >= 0) return 'rem';\r\n        if (value.indexOf('%') >= 0) return '%';\r\n        if (value.indexOf('vh') >= 0) return 'vh';\r\n        if (value.indexOf('px') >= 0) return 'px';\r\n    } catch (e) {\r\n    }\r\n    return 'px';\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @param props.label {String}\r\n * @param props.html_id_prefix {String}\r\n * @param props.with_units {Boolean}\r\n * @param props.units {Array}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function NumberWithUnitField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1]?.[props.key_2] : props.settings[props.key_1];\r\n    const [unit, setUnit] = useState(getInitialUnit(value));\r\n    let classnames = 'form-control form-control-outlined';\r\n    if (props.with_units)\r\n        classnames = 'form-control form-control-outlined form-control-left';\r\n\r\n    return <><FormControl className={classnames} variant=\"outlined\" size=\"small\">\r\n        <InputLabel htmlFor={`${props.html_id_prefix}-label`}>{props.label}</InputLabel>\r\n        <OutlinedInput\r\n            id={`${props.html_id_prefix}-label`}\r\n            type=\"number\"\r\n            labelWidth={0}\r\n            endAdornment={props.with_units ? null : <InputAdornment position=\"end\">{unit}</InputAdornment>}\r\n            value={parseFloat(value)}\r\n            onChange={(e) => {\r\n                props.key_2 ?\r\n                    props.handleChange(`${e.target.value}${unit}`, props.key_1, props.key_2) :\r\n                    props.handleChange(`${e.target.value}${unit}`, props.key_1)\r\n            }}\r\n        />\r\n    </FormControl>\r\n        {props.with_units ?\r\n            <FormControl className=\"form-control form-control-outlined form-control-right\" variant=\"outlined\"\r\n                         size=\"small\">\r\n                <InputLabel id={`${props.html_id_prefix}-unit-select`}>Unit</InputLabel>\r\n                <Select\r\n                    id={`${props.html_id_prefix}-unit-select`}\r\n                    labelId={`${props.html_id_prefix}-unit-select`}\r\n                    className=\"select-form-input\"\r\n                    value={unit}\r\n                    onClick={(e) => {\r\n                        // noinspection JSUnresolvedVariable\r\n                        setUnit(e.target.value)\r\n                    }}\r\n                >\r\n                    {props.units.map((unit_choice, x) => (\r\n                        <MenuItem key={x} value={unit_choice}>{unit_choice}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl> : null}</>\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @param props.label {String}\r\n * @param props.html_id_prefix {String}\r\n * @param props.multiline {Boolean}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function SimpleTextField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1]?.[props.key_2] : props.settings[props.key_1];\r\n    return <TextField\r\n        label={props.label}\r\n        className=\"form-control\"\r\n        value={value}\r\n        multiline={props.multiline}\r\n        onChange={(e) => {\r\n            props.key_2 ?\r\n                props.handleChange(e.target.value, props.key_1, props.key_2) :\r\n                props.handleChange(e.target.value, props.key_1)\r\n        }}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @param props.label {String}\r\n * @param props.html_id_prefix {String}\r\n * @param props.options {Array}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function SelectWithOptionsField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1]?.[props.key_2] : props.settings[props.key_1];\r\n    return <FormControl className=\"form-control form-control-outlined\" variant=\"outlined\" size=\"small\">\r\n        <InputLabel htmlFor={`${props.html_id_prefix}-label`}>{props.label}</InputLabel>\r\n        <Select\r\n            id={`${props.html_id_prefix}-label`}\r\n            className=\"select-form-input\"\r\n            label={props.label}\r\n            value={value}\r\n            onChange={(e) => {\r\n                props.key_2 ?\r\n                    props.handleChange(e.target.value, props.key_1, props.key_2) :\r\n                    props.handleChange(e.target.value, props.key_1)\r\n            }}\r\n        >\r\n            {props.options.map((option, x) => (\r\n                <MenuItem key={x} value={option}>{option}</MenuItem>\r\n            ))}\r\n        </Select>\r\n    </FormControl>\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ColorPickerField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1]?.[props.key_2] : props.settings[props.key_1];\r\n    return <ColorPicker\r\n        value={value}\r\n        onChange={(e) => {\r\n            props.key_2 ?\r\n                props.handleChange(`#${e.hex}`, props.key_1, props.key_2) :\r\n                props.handleChange(`#${e.hex}`, props.key_1)\r\n        }}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @param props.label {String}\r\n * @param props.disabled {Boolean}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CheckBoxField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1]?.[props.key_2] : props.settings[props.key_1];\r\n    return <FormControlLabel\r\n        disabled={props.disabled}\r\n        value={props.label}\r\n        control={<Checkbox color=\"primary\"/>}\r\n        label={props.label}\r\n        labelPlacement=\"start\"\r\n        checked={value}\r\n        onChange={(e) => {\r\n            // noinspection JSUnresolvedVariable\r\n            props.key_2 ?\r\n                props.handleChange(e.target.checked, props.key_1, props.key_2) :\r\n                props.handleChange(e.target.checked, props.key_1)\r\n        }}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ChooseTemplateField(props) {\r\n    const [value, setValue] = useState('')\r\n    return <FormControl className=\"form-control form-control-outlined\" variant=\"outlined\" size=\"small\">\r\n        <InputLabel htmlFor={'choose-template-label'}>Template</InputLabel>\r\n        <Select\r\n            id={'choose-template-label'}\r\n            className=\"select-form-input\"\r\n            label={'Template'}\r\n            value={value}\r\n            onChange={(e) => {\r\n                console.log('TEMPLATES[value]', e.target.value)\r\n                console.log('TEMPLATES[value]', TEMPLATES[e.target.value])\r\n                setValue(e.target.value)\r\n                const new_settings = {}\r\n                Object.assign(new_settings, TEMPLATES[e.target.value]);\r\n                store.dispatch(setUserListDesignSettings(props.branch, new_settings));\r\n            }}\r\n        >\r\n            {TEMPLATE_NAMES.map((option, x) => (\r\n                <MenuItem key={x} value={option}>{option}</MenuItem>\r\n            ))}\r\n        </Select>\r\n    </FormControl>\r\n}\r\n","export class UserListDesignSettings {\r\n    static type_cards = 'type_cards';\r\n    static results_per_page = 'results_per_page';\r\n    static list_margin_top = 'list_margin_top';\r\n    static color_dark = 'color_dark';\r\n    static about_text = 'about_text';\r\n    static cover_image = 'cover_image';\r\n    static overlay_image = 'overlay_image';\r\n    static background_image = 'background_image';\r\n    static apply_custom_css = 'apply_custom_css';\r\n    static cards = 'cards';\r\n    static table = 'table';\r\n    static list = 'list';\r\n    static title_info = 'title_info';\r\n}\r\n\r\nexport class AboutText {\r\n    static header = 'header';\r\n    static text = 'text';\r\n    static font_family = 'font_family';\r\n    static margin_top = 'margin_top';\r\n    static header_left = 'header_left';\r\n    static header_right = 'header_right';\r\n    static header_font_color = 'header_font_color';\r\n    static header_font_size = 'header_font_size';\r\n    static header_align = 'header_align';\r\n    static header_font_style = 'header_font_style';\r\n    static header_font_variant = 'header_font_variant';\r\n    static header_font_weight = 'header_font_weight';\r\n    static text_left = 'text_left';\r\n    static text_right = 'text_right';\r\n    static text_font_color = 'text_font_color';\r\n    static text_font_size = 'text_font_size';\r\n    static text_align = 'text_align';\r\n    static text_font_style = 'text_font_style';\r\n    static text_font_variant = 'text_font_variant';\r\n    static text_font_weight = 'text_font_weight';\r\n}\r\n\r\nexport class CoverImage {\r\n    static show = 'show';\r\n    static margin_top = 'margin_top';\r\n    static url = 'url';\r\n    static object_fit = 'object_fit';\r\n    static align = 'align';\r\n    static height = 'height';\r\n    static width = 'width';\r\n    static parallax = 'parallax';\r\n    static border_top_left = 'border_top_left';\r\n    static border_top_right = 'border_top_right';\r\n    static border_bottom_left = 'border_bottom_left';\r\n    static border_bottom_right = 'border_bottom_right';\r\n}\r\n\r\nexport class OverlayImage {\r\n    static show = 'show';\r\n    static url = 'url';\r\n    static size = 'size';\r\n    static position_x = 'position_x';\r\n    static position_y = 'position_y';\r\n    static repeat_x = 'repeat_x';\r\n    static repeat_y = 'repeat_y';\r\n}\r\n\r\nexport class BackgroundImage {\r\n    static show = 'show';\r\n    static url = 'url';\r\n    static parallax = 'parallax';\r\n    static size = 'size';\r\n    static attachment = 'attachment';\r\n    static position_x = 'position_x';\r\n    static position_y = 'position_y';\r\n    static repeat_x = 'repeat_x';\r\n    static repeat_y = 'repeat_y';\r\n}\r\n\r\nexport class Cards {\r\n    static round_borders = 'round_borders';\r\n    static spacing = 'spacing';\r\n}\r\n\r\nexport class Table {\r\n    static background_color = 'background_color';\r\n    static backdrop_filter_blur = 'backdrop_filter_blur';\r\n    static round_borders = 'round_borders';\r\n    static show_images = 'show_images';\r\n    static row_lines = 'row_lines';\r\n    static text_bubbles = 'text_bubbles';\r\n}\r\n\r\nexport class List {\r\n    static margin_top = 'margin_top';\r\n    static padding_left = 'padding_left';\r\n    static padding_right = 'padding_right';\r\n}\r\n\r\nexport class TitleInfoAnime {\r\n    static user_score = 'user_score';\r\n    static edit_button = 'edit_button';\r\n    static progress = 'progress';\r\n    static status = 'status';\r\n    static priority = 'priority';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static started = 'started';\r\n    static finished = 'finished';\r\n    static added = 'added';\r\n    static days = 'days';\r\n    static type = 'type';\r\n    static episodes = 'episodes';\r\n    static mins_per_ep = 'mins_per_ep';\r\n    static rating = 'rating';\r\n    static genres = 'genres';\r\n    static mal_score = 'mal_score';\r\n    static aired = 'aired';\r\n}\r\n\r\nexport class TitleInfoManga {\r\n    static user_score = 'user_score';\r\n    static edit_button = 'edit_button';\r\n    static volumes_progress = 'volumes_progress';\r\n    static chapters_progress = 'chapters_progress';\r\n    static status = 'status';\r\n    static priority = 'priority';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static started = 'started';\r\n    static finished = 'finished';\r\n    static added = 'added';\r\n    static days = 'days';\r\n    static type = 'type';\r\n    static volumes = 'volumes';\r\n    static chapters = 'chapters';\r\n    static genres = 'genres';\r\n    static mal_score = 'mal_score';\r\n    static aired = 'aired';\r\n}","import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CheckBoxField,\r\n    ChooseTemplateField,\r\n    ColorPickerField, CSS_FONTS, NumberWithUnitField, SelectWithOptionsField, SimpleTextField\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport {AboutText, Cards, UserListDesignSettings} from \"../user_list_settings_schema\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport store from \"../../../../../store\";\r\nimport {setUserListDesignSettings} from \"../../../../../actions/users\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String}\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function GeneralTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Margin'}\r\n                html_id_prefix={'list-top-margin'}\r\n                key_1={UserListDesignSettings.list_margin_top}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Results per Page'}\r\n                html_id_prefix={'list-results-per-page'}\r\n                key_1={UserListDesignSettings.results_per_page}\r\n                options={[15, 25, 50, 100]}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.color_dark}\r\n                label={'Dark Text'}\r\n            />\r\n        </Grid>\r\n        {/*<Grid className=\"grid-item\" item xs={12}>*/}\r\n        {/*    <ChooseTemplateField/>*/}\r\n        {/*</Grid>*/}\r\n    </Grid>\r\n}\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CheckBoxField, NumberWithUnitField, SelectWithOptionsField, SimpleTextField,\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport React from \"react\";\r\nimport {CoverImage, UserListDesignSettings} from \"../user_list_settings_schema\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CoverImgTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.show}\r\n                label={'Cover Image'}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.parallax}\r\n                label={'Parallax'}\r\n                disabled={true}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}/>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.url}\r\n                label={'Url'}\r\n                html_id_prefix={'cover-image-url'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Options</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Margin'}\r\n                html_id_prefix={'cover-img-top-margin'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.margin_top}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Image Fit'}\r\n                html_id_prefix={'cover-image-fit'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.object_fit}\r\n                options={['contain', 'cover', 'fill', 'initial', 'revert', 'scale-down']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Align'}\r\n                html_id_prefix={'cover-image-align'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.align}\r\n                options={['center', 'left', 'right']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Size</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Height'}\r\n                html_id_prefix={'cover-image-height'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.height}\r\n                with_units={true}\r\n                units={['px', '%', 'vh', 'rem']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Width'}\r\n                html_id_prefix={'cover-image-width'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.width}\r\n                with_units={true}\r\n                units={['px', '%', 'vh', 'rem']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Borders</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Left'}\r\n                html_id_prefix={'cover-image-border-top-left'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.border_top_left}\r\n                with_units={true}\r\n                units={['px', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Right'}\r\n                html_id_prefix={'cover-image-border-top-right'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.border_top_right}\r\n                with_units={true}\r\n                units={['px', '%']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Bottom Left'}\r\n                html_id_prefix={'cover-image-border-bottom-left'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.border_bottom_left}\r\n                with_units={true}\r\n                units={['px', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Bottom Right'}\r\n                html_id_prefix={'cover-image-border-bottom-right'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.border_bottom_right}\r\n                with_units={true}\r\n                units={['px', '%']}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CheckBoxField, SelectWithOptionsField, SimpleTextField,\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport React from \"react\";\r\nimport {BackgroundImage, UserListDesignSettings} from \"../user_list_settings_schema\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BackgroundImgTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.show}\r\n                label={'Background Image'}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.parallax}\r\n                label={'Parallax'}\r\n                disabled={true}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.url}\r\n                label={'Url'}\r\n                html_id_prefix={'background-image-url'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Options</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Size'}\r\n                html_id_prefix={'background-image-size'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.size}\r\n                options={['contain', 'cover', 'initial']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Attachment'}\r\n                html_id_prefix={'background-image-attachment'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.attachment}\r\n                options={['fixed', 'scroll']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Position</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={3}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Position X'}\r\n                html_id_prefix={'background-image-position-x'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.position_x}\r\n                options={['center', 'left', 'right']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={3}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Position Y'}\r\n                html_id_prefix={'background-image-position-y'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.position_y}\r\n                options={['center', 'top', 'bottom']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={3}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Repeat X'}\r\n                html_id_prefix={'background-image-repeat-x'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.repeat_x}\r\n                options={['no-repeat', 'repeat']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={3}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Repeat Y'}\r\n                html_id_prefix={'background-image-repeat-y'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.repeat_y}\r\n                options={['no-repeat', 'repeat']}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}","import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    ColorPickerField, CSS_FONTS, NumberWithUnitField, SelectWithOptionsField, SimpleTextField\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport {AboutText, UserListDesignSettings} from \"../user_list_settings_schema\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MessageTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Margin'}\r\n                html_id_prefix={'about-text-top-margin'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.margin_top}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Font Family'}\r\n                html_id_prefix={'about-font-family'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.font_family}\r\n                options={CSS_FONTS}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header}\r\n                label={'Heading'}\r\n                html_id_prefix={'heading'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Left'}\r\n                html_id_prefix={'header-left'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_left}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Right'} html_id_prefix={'header-right'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_right}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Align'}\r\n                html_id_prefix={'header-align'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_align}\r\n                options={['center', 'left', 'right', 'justify']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item color-picker-field\" item xs={4}>\r\n            <ColorPickerField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_color}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Font Size'}\r\n                html_id_prefix={'header-font-size'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_size}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Style'}\r\n                html_id_prefix={'header-font-style'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_style}\r\n                options={['initial', 'italic']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Weight'}\r\n                html_id_prefix={'header-font-weight'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_weight}\r\n                options={['100', '200', '300', '400', '500', '600', '700', '800', '900']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Variant'}\r\n                html_id_prefix={'header-font-variant'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_variant}\r\n                options={['initial', 'all-petite-caps', 'all-small-caps', 'petite-caps', 'small-caps', 'unicase']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text}\r\n                label={'Text'}\r\n                html_id_prefix={'text'}\r\n                multiline={true}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Left'}\r\n                html_id_prefix={'text-left'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_left}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Right'}\r\n                html_id_prefix={'text-right'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_right}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Align'}\r\n                html_id_prefix={'header-align'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_align}\r\n                options={['center', 'left', 'right', 'justify']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item color-picker-field\" item xs={4}>\r\n            <ColorPickerField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_color}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Font Size'}\r\n                html_id_prefix={'header-font-size'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_size}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Style'}\r\n                html_id_prefix={'text-font-style'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_style}\r\n                options={['initial', 'italic']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Weight'}\r\n                html_id_prefix={'text-font-weight'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_weight}\r\n                options={['100', '200', '300', '400', '500', '600', '700', '800', '900']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Variant'}\r\n                html_id_prefix={'text-font-variant'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_variant}\r\n                options={['initial', 'all-petite-caps', 'all-small-caps', 'petite-caps', 'small-caps', 'unicase']}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CheckBoxField,\r\n    ColorPickerField, CSS_FONTS, NumberWithUnitField, SelectWithOptionsField, SimpleTextField\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport {\r\n    AboutText,\r\n    Cards,\r\n    CoverImage,\r\n    List,\r\n    Table,\r\n    TitleInfoAnime, TitleInfoManga,\r\n    UserListDesignSettings\r\n} from \"../user_list_settings_schema\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faThLarge, faThList} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton} from \"../../../../layout/common/common\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../../globals\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String}\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ListTab(props) {\r\n    const {settings, handleChange} = props;\r\n    const [progress_key, progress_label] = props.branch === BRANCH_ANIME ?\r\n        [TitleInfoAnime.progress, 'Progress'] : [TitleInfoManga.volumes_progress, 'Progress Volumes']\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top'}\r\n                html_id_prefix={'list-titles-margin-top'}\r\n                key_1={UserListDesignSettings.list}\r\n                key_2={List.margin_top}\r\n                with_units={true}\r\n                units={['rem', '%', 'vh', 'px']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Left'}\r\n                html_id_prefix={'list-titles-padding-left'}\r\n                key_1={UserListDesignSettings.list}\r\n                key_2={List.padding_left}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Right'}\r\n                html_id_prefix={'list-titles-padding-right'}\r\n                key_1={UserListDesignSettings.list}\r\n                key_2={List.padding_right}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <CyberButton\r\n                classNames=\"list-type-btn btn-contained-primary\" variant=\"contained\"\r\n                onClick={() => {\r\n                    props.handleChange(!settings[UserListDesignSettings.type_cards], UserListDesignSettings.type_cards)\r\n                }}\r\n            >\r\n                <FontAwesomeIcon\r\n                    icon={settings[UserListDesignSettings.type_cards] ? faThList : faThLarge}\r\n                    title={settings[UserListDesignSettings.type_cards] ? 'Table' : 'Cards'}\r\n                />\r\n            </CyberButton>{' '}\r\n            List type {settings[UserListDesignSettings.type_cards] ? 'Cards' : 'Table'}\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n            <p>{settings[UserListDesignSettings.type_cards] ? 'Cards options' : 'Table options'}</p>\r\n        </Grid>\r\n\r\n        {settings[UserListDesignSettings.type_cards] ? <>\r\n            <Grid className=\"grid-item\" item xs={4}>\r\n                <NumberWithUnitField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    label={'Spacing'}\r\n                    html_id_prefix={'user-list-cards-spacing'}\r\n                    key_1={UserListDesignSettings.cards}\r\n                    key_2={Cards.spacing}\r\n                />\r\n            </Grid>\r\n            <Grid className=\"grid-item\" item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.cards}\r\n                    key_2={Cards.round_borders}\r\n                    label={'Round Borders'}\r\n                />\r\n            </Grid></> : <>\r\n            <Grid className=\"grid-item color-picker-field\" item xs={4} >\r\n                <ColorPickerField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.background_color}\r\n                />\r\n            </Grid>\r\n            <Grid className=\"grid-item\" item xs={8}>\r\n                <NumberWithUnitField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    label={'Filter'}\r\n                    html_id_prefix={'user-list-table-backdrop-filter'}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.backdrop_filter_blur}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.round_borders}\r\n                    label={'Round Borders'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.show_images}\r\n                    label={'Show Images'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.text_bubbles}\r\n                    label={'Text Bubbles'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.row_lines}\r\n                    label={'Row Lines'}\r\n                />\r\n            </Grid>\r\n        </>}\r\n\r\n        {!settings[UserListDesignSettings.type_cards] ? <>\r\n            <Grid className=\"grid-heading\" item xs={12}>\r\n                <p>My info</p>\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.user_score}\r\n                    label={'Score'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.edit_button}\r\n                    label={'Edit Btn.'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={progress_key}\r\n                    label={progress_label}\r\n                />\r\n            </Grid>\r\n            {props.branch === BRANCH_MANGA ? <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoManga.chapters_progress}\r\n                    label={'Progress Chapters'}\r\n                />\r\n            </Grid> : null}\r\n\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.status}\r\n                    label={'Status'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.priority}\r\n                    label={'Priority'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.comments}\r\n                    label={'Comments'}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.tags}\r\n                    label={'Tags'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.started}\r\n                    label={'Started Watching'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.finished}\r\n                    label={'Finished Watching'}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.added}\r\n                    label={'Added to List'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.days}\r\n                    label={'Days'}\r\n                />\r\n            </Grid>\r\n        </> : null}\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p>Title info</p>\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.type}\r\n                label={'Type'}\r\n            />\r\n        </Grid>\r\n        {props.branch === BRANCH_ANIME ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.episodes}\r\n                label={'Episodes'}\r\n            />\r\n        </Grid> : null}\r\n        {props.branch === BRANCH_MANGA ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoManga.volumes}\r\n                label={'Volumes'}\r\n            />\r\n        </Grid> : null}\r\n        {props.branch === BRANCH_MANGA ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoManga.chapters}\r\n                label={'Chapters'}\r\n            />\r\n        </Grid> : null}\r\n        {props.branch === BRANCH_ANIME ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.mins_per_ep}\r\n                label={'Mins per Ep.'}\r\n            />\r\n        </Grid> : null}\r\n\r\n        {props.branch === BRANCH_ANIME ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.rating}\r\n                label={'Rating'}\r\n            />\r\n        </Grid> : null}\r\n        <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.genres}\r\n                label={'Genres'}\r\n            />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.mal_score}\r\n                label={'MAL Score'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.aired}\r\n                label={'Aired'}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CheckBoxField, NumberWithUnitField, SelectWithOptionsField, SimpleTextField,\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport React, {useState} from \"react\";\r\nimport {AboutText, OverlayImage, UserListDesignSettings} from \"../user_list_settings_schema\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function OverlayImgTab(props) {\r\n    const {settings, handleChange} = props;\r\n    const r = /\\d+/;\r\n    const [with_units, setWithUnits] = useState(!!settings[UserListDesignSettings.overlay_image]?.[OverlayImage.size]?.match(r));\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.overlay_image}\r\n                key_2={OverlayImage.show}\r\n                label={'Overlay Image'}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={8}/>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.overlay_image}\r\n                key_2={OverlayImage.url}\r\n                label={'Url'}\r\n                html_id_prefix={'overlay-image-url'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Options</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <FormControlLabel\r\n                value={'With units'}\r\n                control={<Checkbox color=\"primary\"/>}\r\n                label={'With units'}\r\n                labelPlacement=\"start\"\r\n                checked={with_units}\r\n                onChange={(e) => {\r\n                    // noinspection JSUnresolvedVariable\r\n                    setWithUnits(e.target.checked)\r\n                }}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            {with_units ? <NumberWithUnitField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    label={'Size'}\r\n                    html_id_prefix={'about-text-top-margin'}\r\n                    key_1={UserListDesignSettings.overlay_image}\r\n                    key_2={OverlayImage.size}\r\n                    with_units={true}\r\n                    units={['rem', 'px']}\r\n                /> :\r\n                <SelectWithOptionsField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    label={'Image Fit'}\r\n                    html_id_prefix={'overlay-image-fit'}\r\n                    key_1={UserListDesignSettings.overlay_image}\r\n                    key_2={OverlayImage.size}\r\n                    options={['contain', 'cover', 'fill', 'initial', 'revert', 'scale-down']}\r\n                />}\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Position</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Horizontal'}\r\n                html_id_prefix={'about-text-top-margin'}\r\n                key_1={UserListDesignSettings.overlay_image}\r\n                key_2={OverlayImage.position_x}\r\n                with_units={true}\r\n                units={['rem', '%', 'px']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Vertical'}\r\n                html_id_prefix={'about-text-top-margin'}\r\n                key_1={UserListDesignSettings.overlay_image}\r\n                key_2={OverlayImage.position_y}\r\n                with_units={true}\r\n                units={['rem', '%', 'px']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Repeat X'}\r\n                html_id_prefix={'background-image-repeat-x'}\r\n                key_1={UserListDesignSettings.overlay_image}\r\n                key_2={OverlayImage.repeat_x}\r\n                options={['no-repeat', 'repeat']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Repeat Y'}\r\n                html_id_prefix={'background-image-repeat-y'}\r\n                key_1={UserListDesignSettings.overlay_image}\r\n                key_2={OverlayImage.repeat_y}\r\n                options={['no-repeat', 'repeat']}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../../../../layout/sounds\";\r\nimport {GeneralTab} from \"./GeneralTab\";\r\nimport {CoverImgTab} from \"./CoverImgTab\";\r\nimport {BackgroundImgTab} from \"./BackgroundImgTab\";\r\nimport {MessageTab} from \"./MessageTab\";\r\nimport {ListTab} from \"./ListTab\";\r\nimport {OverlayImgTab} from \"./OverlayImgTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.branch {String}\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListDesignSettingsDialogTabs(props) {\r\n    const {settings, handleChange} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return <div className={classes.root + ' tabs-root'}>\r\n        <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleTabChange}\r\n                indicatorColor=\"secondary\"\r\n                textColor=\"default\"\r\n                variant=\"scrollable\"\r\n                scrollButtons=\"auto\"\r\n            >\r\n                <Tab label=\"General\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"Message\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"Cover Img\" {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"Overlay Img\" {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"Bg Img\" {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"List\" {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n            </Tabs>\r\n        </AppBar>\r\n        <SwipeableViews\r\n            axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n            index={value}\r\n            onChangeIndex={handleChangeIndex}\r\n        >\r\n            <TabPanel value={value} index={0} dir={theme.direction}>\r\n                <GeneralTab branch={props.branch} settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1} dir={theme.direction}>\r\n                <MessageTab settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2} dir={theme.direction}>\r\n                <CoverImgTab settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={3} dir={theme.direction}>\r\n                <OverlayImgTab settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={4} dir={theme.direction}>\r\n                <BackgroundImgTab settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={5} dir={theme.direction}>\r\n                <ListTab branch={props.branch} settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n        </SwipeableViews>\r\n    </div>\r\n}","import React, {useState} from 'react'\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {setUserListDesignSettings} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {UserListDesignSettingsDialogTabs} from \"./tabs/userListDesignSettingsDialogTabs\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch\r\n * @param props.user_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListDesignSettingsDialog(props) {\r\n    let user_settings = {};\r\n    Object.assign(user_settings, props.user_settings);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [settings, setSettings] = useState(user_settings);\r\n\r\n    const handleOpen = () => {\r\n        setSettings(user_settings);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (reset = true) => {\r\n        if (reset) {\r\n            let previous_settings = {};\r\n            if (props.branch === BRANCH_ANIME)\r\n                Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_anime_list_design_settings]);\r\n            else if (props.branch === BRANCH_MANGA)\r\n                Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_manga_list_design_settings]);\r\n            store.dispatch(setUserListDesignSettings(props.branch, previous_settings));\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleChange = (value, key_1, key_2) => {\r\n        if (key_2)\r\n            setSettings((prevSettings) => {\r\n                store.dispatch(setUserListDesignSettings(props.branch, {\r\n                    ...prevSettings,\r\n                    [key_1]: {...prevSettings[key_1], [key_2]: value}\r\n                }));\r\n                return {...prevSettings, [key_1]: {...prevSettings[key_1], [key_2]: value}}\r\n            });\r\n        else\r\n            setSettings((prevSettings) => {\r\n                store.dispatch(setUserListDesignSettings(props.branch, {...prevSettings, [key_1]: value}));\r\n                return {...prevSettings, [key_1]: value}\r\n            });\r\n    };\r\n\r\n    return <div className=\"user-list-design-settings-dialog-container\">\r\n        <CyberButton classNames=\"user-edit-list-btn btn-contained-primary\" onClick={handleOpen}\r\n                     variant=\"contained\" title={`Edit ${props.branch} list design`}>\r\n            <FontAwesomeIcon icon={faEdit}/>\r\n        </CyberButton>\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            id=\"User-List-Design-Settings-Dialog\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle>User {props.branch} list settings</DialogTitle>\r\n            <DialogContent className=\"settings-wrapper\">\r\n                <UserListDesignSettingsDialogTabs branch={props.branch} settings={settings} handleChange={handleChange}/>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <CyberButton variant=\"outlined\" title={'Save settings'} onClick={() => {\r\n                    store.dispatch(setUserListDesignSettings(props.branch, settings, true));\r\n                    handleClose(false);\r\n                }}>\r\n                    Save\r\n                </CyberButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n}\r\n","import {\r\n    Anime,\r\n    ApiResult, Manga,\r\n    UserAnimeDisplaySettingsSchema, UserAnimeEntry,\r\n    UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema, UserMangaEntry\r\n} from \"../../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {getTitleCoverImage, isEmpty} from \"../../functions\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faImage} from \"@fortawesome/free-solid-svg-icons\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TitleRow from \"../../layout/rows/TitleRow\";\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../../../globals\";\r\nimport {UserListTableHead, UserListTableRow} from \"./anime/tableView\";\r\n\r\n\r\nfunction getTitleAndUserStatusFromBranch(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return [UserAnimeEntry.anime, Anime.id]\r\n        case BRANCH_MANGA:\r\n            return [UserMangaEntry.manga, Manga.id]\r\n    }\r\n}\r\n\r\n\r\nfunction noResult(branch, filtered_titles) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (isEmpty(filtered_titles[ApiResult.results]?.[0]?.[UserAnimeEntry.anime]))\r\n                return true\r\n            break\r\n        case BRANCH_MANGA:\r\n            if (isEmpty(filtered_titles[ApiResult.results]?.[0]?.[UserMangaEntry.manga]))\r\n                return true\r\n            break\r\n        default:\r\n            return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.gridlist_cols\r\n * @param props.filtered_titles\r\n * @param props.branch\r\n * @param props.current_page\r\n * @param props.items_per_page\r\n * @param props.user_entry_statuses\r\n * @param props.list_owner {Boolean}\r\n * @param props.design_settings {Object}\r\n * @returns {JSX.Element}\r\n */\r\nexport function UserListCardsView(props) {\r\n    if (noResult(props.branch, props.filtered_titles))\r\n        return null\r\n\r\n    const [title_key, id_key] = getTitleAndUserStatusFromBranch(props.branch)\r\n    const classnames = props.design_settings.list_cards_round_borders ? 'round-borders lower-z-index' : 'lower-z-index'\r\n\r\n    return <GridList className=\"list-cards-view\" cellHeight={400} cols={props.gridlist_cols} style={{margin: '0 0 10px 0'}}>\r\n        {props.filtered_titles[ApiResult.results].map((entry, i) => (\r\n            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                <GridListTile\r\n                    cols={1}\r\n                    className={classnames}\r\n                    style={{padding: props.design_settings.list_cards_spacing}}\r\n                >\r\n                    <TitleCard\r\n                        branch={props.branch}\r\n                        title={entry[title_key]}\r\n                        user_buttons={!!props.list_owner}\r\n                        index={i + ((props.current_page * props.items_per_page) - (props.items_per_page - 1))}\r\n                        user_status={props.list_owner ? !isEmpty(props.user_entry_statuses) ?\r\n                            props.user_entry_statuses[`${entry[title_key][id_key]}`] : null : null}\r\n                        design_settings={props.design_settings}\r\n                    />\r\n                </GridListTile>\r\n            </Grow>\r\n        ))}\r\n    </GridList>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.filtered_titles\r\n * @param props.branch\r\n * @param props.current_page\r\n * @param props.items_per_page\r\n * @param props.user_entry_statuses\r\n * @param {Boolean} props.list_owner\r\n * @param {Object} props.list\r\n * @param {Object} props.design_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListTableView(props) {\r\n    if (noResult(props.branch, props.filtered_titles))\r\n        return null\r\n\r\n    let titles_container_styles = {\r\n        backgroundColor: props.design_settings.list_table_background_color,\r\n        backdropFilter: `blur(${props.design_settings.list_table_backdrop_filter_blur})`\r\n    }\r\n\r\n    if (props.design_settings.list_table_round_borders)\r\n        titles_container_styles['borderRadius'] = '15px';\r\n\r\n    let classnames = 'list-table-view'\r\n    if (!props.design_settings.list_table_row_lines)\r\n        classnames = classnames + ' list-table-view-no-row-lines'\r\n\r\n    const [title_key, id_key] = getTitleAndUserStatusFromBranch(props.branch)\r\n\r\n    return <TableContainer className={classnames} style={titles_container_styles}>\r\n        <Table aria-label=\"user list table\">\r\n            <UserListTableHead\r\n                branch={props.branch}\r\n                design_settings={props.design_settings}\r\n                list_owner={props.list_owner}\r\n            />\r\n            <TableBody>\r\n                {props.filtered_titles[ApiResult.results].map((entry, i) => (\r\n                    <UserListTableRow\r\n                        key={i}\r\n                        branch={props.branch}\r\n                        list_owner={props.list_owner}\r\n                        list={props.list}\r\n                        entry={entry}\r\n                        index={i + ((props.current_page * props.items_per_page) - (props.items_per_page - 1))}\r\n                        user_status={props.list_owner ? !isEmpty(props.user_entry_statuses) ?\r\n                            props.user_entry_statuses[`${entry[title_key][id_key]}`] : null : null}\r\n                        design_settings={props.design_settings}\r\n                    />\r\n                ))}\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>\r\n}","import {BRANCH_ANIME, BRANCH_MANGA, USER_ANIME_STATUSES, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {\r\n    AboutText,\r\n    BackgroundImage,\r\n    Cards,\r\n    CoverImage,\r\n    List, OverlayImage, Table, TitleInfoAnime, TitleInfoManga,\r\n    UserListDesignSettings\r\n} from \"./user_list_settings_schema\";\r\nimport {Profile, User} from \"../../../../models\";\r\n\r\n\r\nexport function getInitialSelected(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return USER_ANIME_STATUSES.watching;\r\n        case BRANCH_MANGA:\r\n            return USER_MANGA_STATUSES.reading;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getUserListDesignSettingsFromBranch(branch, anime_settings, manga_settings) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return anime_settings;\r\n        case BRANCH_MANGA:\r\n            return manga_settings;\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\n\r\nexport function getUserListResultsPerPageFromBranch(branch, visited_user) {\r\n    let number = 100;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            number = parseInt(visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.results_per_page])\r\n            if (isNaN(number)) return 100\r\n            return number;\r\n        case BRANCH_MANGA:\r\n            number = parseInt(visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.results_per_page]);\r\n            if (isNaN(number)) return 100\r\n            return number;\r\n        default:\r\n            return 100\r\n    }\r\n}\r\n\r\n\r\nexport function formatUserListDesignSettingsFromBranch(branch, owner, visited_user, user_settings) {\r\n    let settings = {\r\n        list_type_cards: true,\r\n        list_items_per_page: 25,\r\n        list_margin_top: '5rem',\r\n        list_color_dark: false,\r\n\r\n        about_header: '',\r\n        about_text: '',\r\n        about_font_family: '',\r\n        about_margin_top: '',\r\n        about_header_left: '0rem',\r\n        about_header_right: '0rem',\r\n        about_header_font_color: '#ffffff',\r\n        about_header_font_size: '3rem',\r\n        about_header_align: 'center',\r\n        about_header_font_style: 'initial',\r\n        about_header_font_variant: 'initial',\r\n        about_header_font_weight: '100',\r\n        about_text_left: '0rem',\r\n        about_text_right: '0rem',\r\n        about_text_font_color: '#ffffff',\r\n        about_text_font_size: '1rem',\r\n        about_text_align: 'center',\r\n        about_text_font_style: 'initial',\r\n        about_text_font_variant: 'initial',\r\n        about_text_font_weight: '100',\r\n\r\n        cover_image_show: false,\r\n        cover_image_margin_top: '15rem',\r\n        cover_image_url: '',\r\n        cover_image_object_fit: 'cover',\r\n        cover_image_align: 'center',\r\n        cover_image_height: '100vh',\r\n        cover_image_width: '100%',\r\n        cover_image_parallax: '100%',\r\n        cover_image_border_top_left: '0',\r\n        cover_image_border_top_right: '0',\r\n        cover_image_border_bottom_left: '0',\r\n        cover_image_border_bottom_right: '0',\r\n\r\n        overlay_image_show: false,\r\n        overlay_image_url: '',\r\n        overlay_image_size: 'cover',\r\n        overlay_image_position_x: 'center',\r\n        overlay_image_position_y: 'center',\r\n        overlay_image_repeat_x: 'no-repeat',\r\n        overlay_image_repeat_y: 'no-repeat',\r\n\r\n        background_image_show: false,\r\n        background_image_url: '',\r\n        background_image_size: '',\r\n        background_image_attachment: '',\r\n        background_image_position_x: '',\r\n        background_image_position_y: '',\r\n        background_image_repeat_x: '',\r\n        background_image_repeat_y: '',\r\n\r\n        list_titles_margin_top: '3rem',\r\n        list_titles_padding_left: '0rem',\r\n        list_titles_padding_right: '0rem',\r\n\r\n        list_cards_round_borders: true,\r\n        list_cards_spacing: '2px',\r\n\r\n        list_table_background_color: '#1f225199',\r\n        list_table_backdrop_filter_blur: '3px',\r\n        list_table_round_borders: true,\r\n        list_table_show_images: true,\r\n        list_table_row_lines: true,\r\n        list_table_text_bubbles: true,\r\n\r\n        title_user_score: true,\r\n        title_edit_button: true,\r\n        title_progress: true,\r\n        title_progress_2: true,\r\n        title_status: true,\r\n        title_priority: true,\r\n        title_comments: true,\r\n        title_tags: true,\r\n        title_started: true,\r\n        title_finished: true,\r\n        title_added: true,\r\n        title_days: true,\r\n        title_type: true,\r\n        title_episodes: true,\r\n        title_volumes: true,\r\n        title_chapters: true,\r\n        title_mins_per_ep: true,\r\n        title_rating: true,\r\n        title_genres: true,\r\n        title_mal_score: true,\r\n        title_aired: true,\r\n    };\r\n\r\n    if (isEmpty(user_settings)) return settings;\r\n\r\n    if (owner) {\r\n        settings.list_type_cards = user_settings[UserListDesignSettings.type_cards];\r\n        settings.list_items_per_page = user_settings[UserListDesignSettings.results_per_page];\r\n        settings.list_margin_top = user_settings[UserListDesignSettings.list_margin_top];\r\n        settings.list_color_dark = user_settings[UserListDesignSettings.color_dark];\r\n\r\n        settings.about_header = user_settings[UserListDesignSettings.about_text][AboutText.header];\r\n        settings.about_text = user_settings[UserListDesignSettings.about_text][AboutText.text];\r\n        settings.about_font_family = user_settings[UserListDesignSettings.about_text][AboutText.font_family];\r\n        settings.about_margin_top = user_settings[UserListDesignSettings.about_text][AboutText.margin_top];\r\n        settings.about_header_left = user_settings[UserListDesignSettings.about_text][AboutText.header_left];\r\n        settings.about_header_right = user_settings[UserListDesignSettings.about_text][AboutText.header_right];\r\n        settings.about_header_font_color = user_settings[UserListDesignSettings.about_text][AboutText.header_font_color];\r\n        settings.about_header_font_size = user_settings[UserListDesignSettings.about_text][AboutText.header_font_size];\r\n        settings.about_header_align = user_settings[UserListDesignSettings.about_text][AboutText.header_align];\r\n        settings.about_header_font_style = user_settings[UserListDesignSettings.about_text][AboutText.header_font_style];\r\n        settings.about_header_font_variant = user_settings[UserListDesignSettings.about_text][AboutText.header_font_variant];\r\n        settings.about_header_font_weight = user_settings[UserListDesignSettings.about_text][AboutText.header_font_weight];\r\n        settings.about_text_left = user_settings[UserListDesignSettings.about_text][AboutText.text_left];\r\n        settings.about_text_right = user_settings[UserListDesignSettings.about_text][AboutText.text_right];\r\n        settings.about_text_font_color = user_settings[UserListDesignSettings.about_text][AboutText.text_font_color];\r\n        settings.about_text_font_size = user_settings[UserListDesignSettings.about_text][AboutText.text_font_size];\r\n        settings.about_text_align = user_settings[UserListDesignSettings.about_text][AboutText.text_align];\r\n        settings.about_text_font_style = user_settings[UserListDesignSettings.about_text][AboutText.text_font_style];\r\n        settings.about_text_font_variant = user_settings[UserListDesignSettings.about_text][AboutText.text_font_variant];\r\n        settings.about_text_font_weight = user_settings[UserListDesignSettings.about_text][AboutText.text_font_weight];\r\n\r\n        settings.cover_image_show = user_settings[UserListDesignSettings.cover_image][CoverImage.show];\r\n        settings.cover_image_margin_top = user_settings[UserListDesignSettings.cover_image][CoverImage.margin_top];\r\n        settings.cover_image_url = user_settings[UserListDesignSettings.cover_image][CoverImage.url];\r\n        settings.cover_image_object_fit = user_settings[UserListDesignSettings.cover_image][CoverImage.object_fit];\r\n        settings.cover_image_align = user_settings[UserListDesignSettings.cover_image][CoverImage.align];\r\n        settings.cover_image_height = user_settings[UserListDesignSettings.cover_image][CoverImage.height];\r\n        settings.cover_image_width = user_settings[UserListDesignSettings.cover_image][CoverImage.width];\r\n        settings.cover_image_parallax = user_settings[UserListDesignSettings.cover_image][CoverImage.parallax];\r\n        settings.cover_border_top_left = user_settings[UserListDesignSettings.cover_image][CoverImage.border_top_left];\r\n        settings.cover_border_top_right = user_settings[UserListDesignSettings.cover_image][CoverImage.border_top_right];\r\n        settings.cover_border_bottom_left = user_settings[UserListDesignSettings.cover_image][CoverImage.border_bottom_left];\r\n        settings.cover_border_bottom_right = user_settings[UserListDesignSettings.cover_image][CoverImage.border_bottom_right];\r\n\r\n        settings.overlay_image_show = user_settings[UserListDesignSettings.overlay_image]?.[OverlayImage.show];\r\n        settings.overlay_image_url = user_settings[UserListDesignSettings.overlay_image]?.[OverlayImage.url];\r\n        settings.overlay_image_size = user_settings[UserListDesignSettings.overlay_image]?.[OverlayImage.size];\r\n        settings.overlay_image_position_x = user_settings[UserListDesignSettings.overlay_image]?.[OverlayImage.position_x];\r\n        settings.overlay_image_position_y = user_settings[UserListDesignSettings.overlay_image]?.[OverlayImage.position_y];\r\n        settings.overlay_image_repeat_x = user_settings[UserListDesignSettings.overlay_image]?.[OverlayImage.repeat_x];\r\n        settings.overlay_image_repeat_y = user_settings[UserListDesignSettings.overlay_image]?.[OverlayImage.repeat_y];\r\n\r\n        settings.background_image_show = user_settings[UserListDesignSettings.background_image][BackgroundImage.show];\r\n        settings.background_image_url = user_settings[UserListDesignSettings.background_image][BackgroundImage.url];\r\n        settings.background_image_size = user_settings[UserListDesignSettings.background_image][BackgroundImage.size];\r\n        settings.background_image_attachment = user_settings[UserListDesignSettings.background_image][BackgroundImage.attachment];\r\n        settings.background_image_position_x = user_settings[UserListDesignSettings.background_image][BackgroundImage.position_x];\r\n        settings.background_image_position_y = user_settings[UserListDesignSettings.background_image][BackgroundImage.position_y];\r\n        settings.background_image_repeat_x = user_settings[UserListDesignSettings.background_image][BackgroundImage.repeat_x];\r\n        settings.background_image_repeat_y = user_settings[UserListDesignSettings.background_image][BackgroundImage.repeat_y];\r\n\r\n        settings.list_titles_margin_top = user_settings[UserListDesignSettings.list][List.margin_top];\r\n        settings.list_titles_padding_left = user_settings[UserListDesignSettings.list][List.padding_left];\r\n        settings.list_titles_padding_right = user_settings[UserListDesignSettings.list][List.padding_right];\r\n\r\n        settings.list_cards_round_borders = user_settings[UserListDesignSettings.cards][Cards.round_borders];\r\n        settings.list_cards_spacing = user_settings[UserListDesignSettings.cards][Cards.spacing];\r\n\r\n        settings.list_table_background_color = user_settings[UserListDesignSettings.table][Table.background_color];\r\n        settings.list_table_backdrop_filter_blur = user_settings[UserListDesignSettings.table][Table.backdrop_filter_blur];\r\n        settings.list_table_round_borders = user_settings[UserListDesignSettings.table][Table.round_borders];\r\n        settings.list_table_show_images = user_settings[UserListDesignSettings.table][Table.show_images];\r\n        settings.list_table_row_lines = user_settings[UserListDesignSettings.table][Table.row_lines];\r\n        settings.list_table_text_bubbles = user_settings[UserListDesignSettings.table][Table.text_bubbles];\r\n    }\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (owner) {\r\n                settings.title_user_score = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.user_score];\r\n                settings.title_edit_button = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.edit_button];\r\n                settings.title_progress = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.progress];\r\n                settings.title_status = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.status];\r\n                settings.title_priority = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.priority];\r\n                settings.title_comments = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.comments];\r\n                settings.title_tags = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.tags];\r\n                settings.title_started = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.started];\r\n                settings.title_finished = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.finished];\r\n                settings.title_added = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.added];\r\n                settings.title_days = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.days];\r\n                settings.title_type = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.type];\r\n                settings.title_episodes = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.episodes];\r\n                settings.title_mins_per_ep = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.mins_per_ep];\r\n                settings.title_rating = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.rating];\r\n                settings.title_genres = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.genres];\r\n                settings.title_mal_score = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.mal_score];\r\n                settings.title_aired = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.aired];\r\n            } else {\r\n                settings.list_type_cards = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.type_cards];\r\n                settings.list_items_per_page = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.results_per_page];\r\n                settings.list_margin_top = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.list_margin_top];\r\n                settings.list_color_dark = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.color_dark];\r\n\r\n                settings.about_header = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header];\r\n                settings.about_text = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text];\r\n                settings.about_font_family = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.font_family];\r\n                settings.about_margin_top = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.margin_top];\r\n                settings.about_header_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_left];\r\n                settings.about_header_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_right];\r\n                settings.about_header_font_color = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_color];\r\n                settings.about_header_font_size = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_size];\r\n                settings.about_header_align = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_align];\r\n                settings.about_header_font_style = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_style];\r\n                settings.about_header_font_variant = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_variant];\r\n                settings.about_header_font_weight = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_weight];\r\n                settings.about_text_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_left];\r\n                settings.about_text_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_right];\r\n                settings.about_text_font_color = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_color];\r\n                settings.about_text_font_size = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_size];\r\n                settings.about_text_align = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_align];\r\n                settings.about_text_font_style = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_style];\r\n                settings.about_text_font_variant = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_variant];\r\n                settings.about_text_font_weight = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_weight];\r\n\r\n                settings.cover_image_show = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.show];\r\n                settings.cover_image_margin_top = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.margin_top];\r\n                settings.cover_image_url = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.url];\r\n                settings.cover_image_object_fit = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.object_fit];\r\n                settings.cover_image_align = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.align];\r\n                settings.cover_image_height = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.height];\r\n                settings.cover_image_width = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.width];\r\n                settings.cover_image_parallax = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.parallax];\r\n                settings.cover_border_top_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_top_left];\r\n                settings.cover_border_top_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_top_right];\r\n                settings.cover_border_bottom_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_bottom_left];\r\n                settings.cover_border_bottom_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_bottom_right];\r\n\r\n                settings.overlay_image_show = visited_user[User.profile][Profile.user_anime_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.show];\r\n                settings.overlay_image_url = visited_user[User.profile][Profile.user_anime_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.url];\r\n                settings.overlay_image_size = visited_user[User.profile][Profile.user_anime_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.size];\r\n                settings.overlay_image_position_x = visited_user[User.profile][Profile.user_anime_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.position_x];\r\n                settings.overlay_image_position_y = visited_user[User.profile][Profile.user_anime_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.position_y];\r\n                settings.overlay_image_repeat_x = visited_user[User.profile][Profile.user_anime_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.repeat_x];\r\n                settings.overlay_image_repeat_y = visited_user[User.profile][Profile.user_anime_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.repeat_y];\r\n\r\n                settings.background_image_show = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.show];\r\n                settings.background_image_url = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.url];\r\n                settings.background_image_size = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.size];\r\n                settings.background_image_attachment = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.attachment];\r\n                settings.background_image_position_x = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.position_x];\r\n                settings.background_image_position_y = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.position_y];\r\n                settings.background_image_repeat_x = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.repeat_x];\r\n                settings.background_image_repeat_y = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.repeat_y];\r\n\r\n                settings.list_titles_margin_top = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.list][List.margin_top];\r\n                settings.list_titles_padding_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.list][List.padding_left];\r\n                settings.list_titles_padding_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.list][List.padding_right];\r\n\r\n                settings.list_cards_round_borders = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cards][Cards.round_borders];\r\n                settings.list_cards_spacing = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cards][Cards.spacing];\r\n\r\n                settings.list_table_background_color = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.background_color];\r\n                settings.list_table_backdrop_filter_blur = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.backdrop_filter_blur];\r\n                settings.list_table_round_borders = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.round_borders];\r\n                settings.list_table_show_images = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.show_images];\r\n                settings.list_table_row_lines = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.row_lines];\r\n                settings.list_table_text_bubbles = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.text_bubbles];\r\n\r\n                settings.title_user_score = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.user_score];\r\n                settings.title_edit_button = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.edit_button];\r\n                settings.title_progress = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.progress];\r\n                settings.title_status = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.status];\r\n                settings.title_priority = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.priority];\r\n                settings.title_comments = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.comments];\r\n                settings.title_tags = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.tags];\r\n                settings.title_started = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.started];\r\n                settings.title_finished = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.finished];\r\n                settings.title_added = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.added];\r\n                settings.title_days = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.days];\r\n                settings.title_type = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.type];\r\n                settings.title_episodes = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.episodes];\r\n                settings.title_mins_per_ep = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.mins_per_ep];\r\n                settings.title_rating = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.rating];\r\n                settings.title_genres = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.genres];\r\n                settings.title_mal_score = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.mal_score];\r\n                settings.title_aired = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.aired];\r\n\r\n                settings.title_user_score = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.user_score];\r\n                settings.title_edit_button = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.edit_button];\r\n                settings.title_progress = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.progress];\r\n                settings.title_status = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.status];\r\n                settings.title_priority = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.priority];\r\n                settings.title_comments = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.comments];\r\n                settings.title_tags = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.tags];\r\n                settings.title_started = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.started];\r\n                settings.title_finished = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.finished];\r\n                settings.title_added = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.added];\r\n                settings.title_days = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.days];\r\n                settings.title_type = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.type];\r\n                settings.title_episodes = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.episodes];\r\n                settings.title_mins_per_ep = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.mins_per_ep];\r\n                settings.title_rating = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.rating];\r\n                settings.title_genres = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.genres];\r\n                settings.title_mal_score = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.mal_score];\r\n                settings.title_aired = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.aired];\r\n            }\r\n            return settings;\r\n        case BRANCH_MANGA:\r\n            if (owner) {\r\n                settings.title_user_score = user_settings[UserListDesignSettings.title_info][TitleInfoManga.user_score];\r\n                settings.title_edit_button = user_settings[UserListDesignSettings.title_info][TitleInfoManga.edit_button];\r\n                settings.title_progress = user_settings[UserListDesignSettings.title_info][TitleInfoManga.volumes_progress];\r\n                settings.title_progress_2 = user_settings[UserListDesignSettings.title_info][TitleInfoManga.chapters_progress];\r\n                settings.title_status = user_settings[UserListDesignSettings.title_info][TitleInfoManga.status];\r\n                settings.title_priority = user_settings[UserListDesignSettings.title_info][TitleInfoManga.priority];\r\n                settings.title_comments = user_settings[UserListDesignSettings.title_info][TitleInfoManga.comments];\r\n                settings.title_tags = user_settings[UserListDesignSettings.title_info][TitleInfoManga.tags];\r\n                settings.title_started = user_settings[UserListDesignSettings.title_info][TitleInfoManga.started];\r\n                settings.title_finished = user_settings[UserListDesignSettings.title_info][TitleInfoManga.finished];\r\n                settings.title_added = user_settings[UserListDesignSettings.title_info][TitleInfoManga.added];\r\n                settings.title_days = user_settings[UserListDesignSettings.title_info][TitleInfoManga.days];\r\n                settings.title_type = user_settings[UserListDesignSettings.title_info][TitleInfoManga.type];\r\n                settings.title_volumes = user_settings[UserListDesignSettings.title_info][TitleInfoManga.volumes];\r\n                settings.title_chapters = user_settings[UserListDesignSettings.title_info][TitleInfoManga.chapters];\r\n                settings.title_genres = user_settings[UserListDesignSettings.title_info][TitleInfoManga.genres];\r\n                settings.title_mal_score = user_settings[UserListDesignSettings.title_info][TitleInfoManga.mal_score];\r\n                settings.title_aired = user_settings[UserListDesignSettings.title_info][TitleInfoManga.aired];\r\n            } else {\r\n                settings.list_type_cards = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.type_cards];\r\n                settings.list_items_per_page = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.results_per_page];\r\n                settings.list_margin_top = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.list_margin_top];\r\n                settings.list_color_dark = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.color_dark];\r\n\r\n                settings.about_header = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header];\r\n                settings.about_text = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text];\r\n                settings.about_font_family = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.font_family];\r\n                settings.about_margin_top = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.margin_top];\r\n                settings.about_header_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_left];\r\n                settings.about_header_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_right];\r\n                settings.about_header_font_color = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_color];\r\n                settings.about_header_font_size = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_size];\r\n                settings.about_header_align = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_align];\r\n                settings.about_header_font_style = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_style];\r\n                settings.about_header_font_variant = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_variant];\r\n                settings.about_header_font_weight = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_weight];\r\n                settings.about_text_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_left];\r\n                settings.about_text_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_right];\r\n                settings.about_text_font_color = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_color];\r\n                settings.about_text_font_size = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_size];\r\n                settings.about_text_align = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_align];\r\n                settings.about_text_font_style = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_style];\r\n                settings.about_text_font_variant = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_variant];\r\n                settings.about_text_font_weight = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_weight];\r\n\r\n                settings.cover_image_show = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.show];\r\n                settings.cover_image_margin_top = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.margin_top];\r\n                settings.cover_image_url = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.url];\r\n                settings.cover_image_object_fit = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.object_fit];\r\n                settings.cover_image_align = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.align];\r\n                settings.cover_image_height = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.height];\r\n                settings.cover_image_width = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.width];\r\n                settings.cover_image_parallax = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.parallax];\r\n                settings.cover_border_top_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_top_left];\r\n                settings.cover_border_top_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_top_right];\r\n                settings.cover_border_bottom_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_bottom_left];\r\n                settings.cover_border_bottom_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_bottom_right];\r\n\r\n                settings.overlay_image_show = visited_user[User.profile][Profile.user_manga_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.show];\r\n                settings.overlay_image_url = visited_user[User.profile][Profile.user_manga_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.url];\r\n                settings.overlay_image_size = visited_user[User.profile][Profile.user_manga_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.size];\r\n                settings.overlay_image_position_x = visited_user[User.profile][Profile.user_manga_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.position_x];\r\n                settings.overlay_image_position_y = visited_user[User.profile][Profile.user_manga_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.position_y];\r\n                settings.overlay_image_repeat_x = visited_user[User.profile][Profile.user_manga_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.repeat_x];\r\n                settings.overlay_image_repeat_y = visited_user[User.profile][Profile.user_manga_list_design_settings]?.[UserListDesignSettings.overlay_image]?.[OverlayImage.repeat_y];\r\n\r\n                settings.background_image_show = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.show];\r\n                settings.background_image_url = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.url];\r\n                settings.background_image_size = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.size];\r\n                settings.background_image_attachment = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.attachment];\r\n                settings.background_image_position_x = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.position_x];\r\n                settings.background_image_position_y = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.position_y];\r\n                settings.background_image_repeat_x = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.repeat_x];\r\n                settings.background_image_repeat_y = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.repeat_y];\r\n\r\n                settings.list_titles_margin_top = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.list][List.margin_top];\r\n                settings.list_titles_padding_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.list][List.padding_left];\r\n                settings.list_titles_padding_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.list][List.padding_right];\r\n\r\n                settings.list_cards_round_borders = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cards][Cards.round_borders];\r\n                settings.list_cards_spacing = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cards][Cards.spacing];\r\n\r\n                settings.list_table_background_color = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.background_color];\r\n                settings.list_table_backdrop_filter_blur = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.backdrop_filter_blur];\r\n                settings.list_table_round_borders = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.round_borders];\r\n                settings.list_table_show_images = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.show_images];\r\n                settings.list_table_row_lines = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.row_lines];\r\n                settings.list_table_text_bubbles = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.text_bubbles];\r\n\r\n                settings.title_user_score = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.user_score];\r\n                settings.title_edit_button = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.edit_button];\r\n                settings.title_progress = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.volumes_progress];\r\n                settings.title_progress_2 = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.chapters_progress];\r\n                settings.title_status = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.status];\r\n                settings.title_priority = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.priority];\r\n                settings.title_comments = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.comments];\r\n                settings.title_tags = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.tags];\r\n                settings.title_started = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.started];\r\n                settings.title_finished = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.finished];\r\n                settings.title_added = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.added];\r\n                settings.title_days = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.days];\r\n                settings.title_type = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.type];\r\n                settings.title_volumes = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.volumes];\r\n                settings.title_chapters = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.chapters];\r\n                settings.title_genres = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.genres];\r\n                settings.title_mal_score = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.mal_score];\r\n                settings.title_aired = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.aired];\r\n            }\r\n            return settings;\r\n        default:\r\n            return settings\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport {filterTitles, getFiltersFromBranch, getItemsPerPageFromBranch} from \"../../browse/functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {ApiResult, Profile, User} from \"../../../models\";\r\nimport {getBrowseGridListCols, isEmpty} from \"../../functions\";\r\nimport {AnimeListStatusButtons} from \"./anime/tableView\";\r\nimport {MangaListStatusButtons} from \"./manga/tableView\";\r\n\r\nimport '../../../assets/css/list.css'\r\nimport {UserListDesignSettingsDialog} from \"./user_settings/userListDesignSettings\";\r\nimport {UserListCardsView, UserListTableView} from \"./utils\";\r\nimport {\r\n    formatUserListDesignSettingsFromBranch,\r\n    getInitialSelected,\r\n    getUserListDesignSettingsFromBranch, getUserListResultsPerPageFromBranch\r\n} from \"./user_settings/settings_functions\";\r\nimport {Pagination} from \"@material-ui/lab\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport {UserListDesignSettings} from \"./user_settings/user_list_settings_schema\";\r\n\r\n\r\nclass UserList extends Component {\r\n    static propTypes = {\r\n        /** params of the page, to get the user list id */\r\n        params: PropTypes.object.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of list_owner */\r\n        list_owner: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Redux prop of user_entry_statuses */\r\n        user_entry_statuses: PropTypes.object,\r\n        /** Redux prop of title_filters */\r\n        title_filters: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.setSelected = this.setSelected.bind(this);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {\r\n            list_pk: parseInt(this.props.params.id),\r\n            selected: getInitialSelected(this.props.branch),\r\n            current_page: 1,\r\n            cards_offset: undefined,\r\n            items_per_page: getUserListResultsPerPageFromBranch(this.props.branch, this.props.visited_user),\r\n            page_dialog_open: false,\r\n            gridlist_cols: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.visited_user[User.username]}'s ${this.props.branch} List`;\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n            {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected}, this.state.items_per_page);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.setState({current_page: 1});\r\n            filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n                {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected},\r\n                this.state.items_per_page);\r\n        }\r\n        if (prevProps.params.id !== this.props.params.id) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({list_pk: parseInt(this.props.params.id)}, () => {\r\n                this.props.getUser(this.state.list_pk);\r\n                filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n                    {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected},\r\n                    this.state.items_per_page);\r\n            });\r\n        }\r\n        if (prevProps.filtered_titles[ApiResult.previous] !== this.props.filtered_titles[ApiResult.previous] &&\r\n            this.props.filtered_titles[ApiResult.previous] === null)\r\n            this.setState({current_page: 1})\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateGridListCols)\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            filterTitles(this.props.branch, page, this.props.title_filters, null,\r\n                {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected},\r\n                this.state.items_per_page);\r\n        }\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.cards_offset !== undefined) {\r\n            if (this.state.gridlist_cols !== getBrowseGridListCols(this.state.cards_offset))\r\n                this.setState({gridlist_cols: getBrowseGridListCols(this.state.cards_offset)})\r\n        } else {\r\n            if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n                this.setState({gridlist_cols: getBrowseGridListCols()})\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.setState({selected: selected})\r\n    }\r\n\r\n    render() {\r\n        const list = {\r\n            user_list_pk: this.state.list_pk,\r\n            user_list_filter: this.state.selected\r\n        };\r\n        let is_mp4 = false;\r\n        const user_settings = getUserListDesignSettingsFromBranch(this.props.branch,\r\n            this.props.user_anime_list_design_settings, this.props.user_manga_list_design_settings);\r\n        const design_settings = formatUserListDesignSettingsFromBranch(this.props.branch, this.props.list_owner,\r\n            this.props.visited_user, user_settings);\r\n\r\n        if (design_settings.list_type_cards) {\r\n            const offset = (parseInt(design_settings.list_titles_padding_left) * 16) +\r\n                (parseInt(design_settings.list_titles_padding_right) * 16)\r\n            if (this.state.cards_offset === undefined || this.state.cards_offset !== offset) {\r\n                this.setState({\r\n                    cards_offset: offset\r\n                }, this.updateGridListCols)\r\n            }\r\n        }\r\n\r\n        const titles_container_styles = {\r\n            marginTop: design_settings.list_titles_margin_top,\r\n            paddingLeft: design_settings.list_titles_padding_left,\r\n            paddingRight: design_settings.list_titles_padding_right,\r\n        }\r\n\r\n        let background_style = {\r\n            paddingTop: design_settings.list_margin_top,\r\n        }\r\n        let background_video_style = {}\r\n\r\n        if (design_settings.background_image_show) {\r\n            if (design_settings.background_image_url.endsWith('.mp4')) {\r\n                is_mp4 = true;\r\n                background_video_style.objectPosition = design_settings.background_image_position_y\r\n            } else {\r\n                background_style.backgroundImage = `url(\"${design_settings.background_image_url}\")`;\r\n                background_style.backgroundAttachment = design_settings.background_image_attachment;\r\n                background_style.backgroundPositionX = design_settings.background_image_position_x;\r\n                background_style.backgroundPositionY = design_settings.background_image_position_y;\r\n                background_style.backgroundRepeatX = design_settings.background_image_repeat_x;\r\n                background_style.backgroundRepeatY = design_settings.background_image_repeat_y;\r\n            }\r\n        }\r\n\r\n        return <>\r\n            <CyberNavbar/>\r\n            <Grid\r\n                id=\"User-List\"\r\n                className={design_settings.list_color_dark ? 'dark-color-text' : undefined}\r\n                container\r\n                style={background_style}\r\n            >\r\n                {is_mp4 ? <div className=\"list-video-background-container\">\r\n                    <video autoPlay muted loop style={background_video_style}>\r\n                        <source src={design_settings.background_image_url} type=\"video/mp4\"/>\r\n                    </video>\r\n                </div> : null}\r\n                <div className=\"overlay-image\" style={{\r\n                    backgroundImage: design_settings.overlay_image_show ?\r\n                        `url(\"${design_settings.overlay_image_url}\")` : 'none',\r\n                    backgroundSize: design_settings.overlay_image_size,\r\n                    backgroundPositionX: design_settings.overlay_image_position_x,\r\n                    backgroundPositionY: design_settings.overlay_image_position_y,\r\n                    backgroundRepeatX: design_settings.overlay_image_repeat_x,\r\n                    backgroundRepeatY: design_settings.overlay_image_repeat_y,\r\n                }}> </div>\r\n\r\n                {this.props.branch === BRANCH_ANIME ?\r\n                    <AnimeListStatusButtons selected={this.state.selected} setSelected={this.setSelected}/>\r\n                    : this.props.branch === BRANCH_MANGA ?\r\n                        <MangaListStatusButtons selected={this.state.selected} setSelected={this.setSelected}/>\r\n                        : null}\r\n\r\n                <div className={design_settings.list_color_dark ? 'dark-color-text' : undefined}>\r\n                    {getFiltersFromBranch(this.props.branch, null, list, this.state.items_per_page)}\r\n                </div>\r\n\r\n                {this.props.filtered_titles_loaded && this.props.visited_user_loaded ? <>\r\n                    <Grid item xs={12} className=\"list-container\">\r\n                        <div className=\"about-text-container\" style={{\r\n                            marginTop: design_settings.about_margin_top,\r\n                        }}>\r\n                            <h2 style={{\r\n                                color: design_settings.about_header_font_color,\r\n                                paddingLeft: design_settings.about_header_left,\r\n                                paddingRight: design_settings.about_header_right,\r\n                                fontFamily: design_settings.about_font_family,\r\n                                fontSize: design_settings.about_header_font_size,\r\n                                textAlign: design_settings.about_header_align,\r\n                                fontStyle: design_settings.about_header_font_style,\r\n                                fontVariant: design_settings.about_header_font_variant,\r\n                                fontWeight: design_settings.about_header_font_weight,\r\n                            }}>\r\n                                {design_settings.about_header}\r\n                            </h2>\r\n                            <pre style={{\r\n                                color: design_settings.about_text_font_color,\r\n                                paddingLeft: design_settings.about_text_left,\r\n                                paddingRight: design_settings.about_text_right,\r\n                                fontFamily: design_settings.about_font_family,\r\n                                fontSize: design_settings.about_text_font_size,\r\n                                textAlign: design_settings.about_text_align,\r\n                                fontStyle: design_settings.about_text_font_style,\r\n                                fontVariant: design_settings.about_text_font_variant,\r\n                                fontWeight: design_settings.about_text_font_weight,\r\n                            }}>\r\n                                {design_settings.about_text}\r\n                            </pre>\r\n                        </div>\r\n\r\n                        {design_settings.cover_image_show ?\r\n                            <div className=\"user-list-cover-img-container\" style={{\r\n                                textAlign: design_settings.cover_image_align\r\n                            }}>\r\n                                <img className=\"cover-img\"\r\n                                     src={design_settings.cover_image_url}\r\n                                     style={{\r\n                                         marginTop: design_settings.cover_image_margin_top,\r\n                                         objectFit: design_settings.cover_image_object_fit,\r\n                                         height: design_settings.cover_image_height,\r\n                                         width: design_settings.cover_image_width,\r\n                                         borderTopLeftRadius: design_settings.cover_border_top_left,\r\n                                         borderTopRightRadius: design_settings.cover_border_top_right,\r\n                                         borderBottomLeftRadius: design_settings.cover_border_bottom_left,\r\n                                         borderBottomRightRadius: design_settings.cover_border_bottom_right,\r\n                                     }}\r\n                                />\r\n                            </div> : null}\r\n\r\n                        <div\r\n                            className={design_settings.list_color_dark ?\r\n                                'dark-color-text titles-container' : 'titles-container'}\r\n                            style={titles_container_styles}\r\n                        >\r\n                            {design_settings.list_type_cards ?\r\n                                <UserListCardsView\r\n                                    branch={this.props.branch}\r\n                                    items_per_page={this.state.items_per_page}\r\n                                    current_page={this.state.current_page}\r\n                                    user_entry_statuses={this.props.user_entry_statuses}\r\n                                    filtered_titles={this.props.filtered_titles}\r\n                                    gridlist_cols={this.state.gridlist_cols}\r\n                                    list_owner={this.props.list_owner}\r\n                                    design_settings={design_settings}\r\n                                />\r\n                                : <UserListTableView\r\n                                    branch={this.props.branch}\r\n                                    items_per_page={this.state.items_per_page}\r\n                                    current_page={this.state.current_page}\r\n                                    user_entry_statuses={this.props.user_entry_statuses}\r\n                                    filtered_titles={this.props.filtered_titles}\r\n                                    list_owner={this.props.list_owner}\r\n                                    list={list}\r\n                                    design_settings={design_settings}\r\n                                />}\r\n                        </div>\r\n                        <div className=\"pagination\">\r\n                            <Pagination\r\n                                count={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                color=\"primary\"\r\n                                siblingCount={3}\r\n                                page={this.state.current_page}\r\n                                onChange={(type, page) => {\r\n                                    playClickSound();\r\n                                    if (page !== this.state.current_page)\r\n                                        this.goToPage(page);\r\n                                    else\r\n                                        this.setState({page_dialog_open: true})\r\n                                }}\r\n                            />\r\n                            <GoToPageDialog\r\n                                open={this.state.page_dialog_open}\r\n                                current_page={this.state.current_page}\r\n                                total_pages={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                goToPage={this.goToPage}\r\n                                onClose={this.closePageDialog}/>\r\n                        </div>\r\n                    </Grid>\r\n\r\n                    {this.props.list_owner && !isEmpty(user_settings) ?\r\n                        <UserListDesignSettingsDialog branch={this.props.branch} user_settings={user_settings}/> : null}\r\n                </> : this.props.titles_loading ?\r\n                    <Loading text={`${this.props.branch} List Loading`} offset={250}/> : null}\r\n            </Grid>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_loading: state.auth.user_loading,\r\n    entry_loading: state.users.entry_loading, // This is here to rerender the small loading on the update episode btn\r\n    user_anime_list_design_settings: state.users.user_anime_list_design_settings, // This is here to rerender the small loading on the update episode btn\r\n    user_manga_list_design_settings: state.users.user_manga_list_design_settings, // This is here to rerender the small loading on the update episode btn\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(UserList)\r\n","import React from \"react\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\n\r\nimport '../../../assets/css/private_page.css'\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n/**\r\n *\r\n * @param {String} props.username\r\n * @param {String} props.branch\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function PrivatePage(props) {\r\n    const {text} = props;\r\n\r\n    return <>\r\n        <CyberNavbar/>\r\n        <div id=\"Private-Page\">\r\n            <Grid container className=\"container\">\r\n                <Grid xs={12}>\r\n                    <h1>404</h1>\r\n                    <p>{text}</p>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </>\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport UserList from \"../UserList\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {PrivatePage} from \"../PrivateList\";\r\nimport Browse from \"../../../browse/Browse\";\r\n\r\n\r\nclass AnimeList extends Component {\r\n    componentDidMount() {\r\n        this.props.getUser(parseInt(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n            list_owner || !this.props.visited_user[User.profile][Profile.is_anime_list_private] ?\r\n                <UserList\r\n                    branch={BRANCH_ANIME}\r\n                    params={this.props.match.params}\r\n                    list_owner={list_owner}\r\n                    titles_loading={this.props.anime_loading}\r\n                    filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n                    filtered_titles={this.props.filtered_anime}\r\n                    title_filters={this.props.anime_filters}\r\n                    user_entry_statuses={this.props.user_anime_entry_statuses}\r\n                /> : <PrivatePage text={`${this.props.visited_user[User.username]}'s ${BRANCH_ANIME} List is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    anime_filters: state.cookies.anime_list_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(AnimeList)\r\n","import React from 'react'\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\n\r\nexport function getDataScoreDistribution(statistics) {\r\n    let parsed_data = statistics['anime_score_distribution'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]);\r\n        labels.push(parsed_data_keys[x]);\r\n    }\r\n\r\n    stat_data.reverse();\r\n    labels.reverse();\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '# of Anime',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRatedVsTimeSpent(statistics) {\r\n    let parsed_data = statistics['anime_rated_vs_time_spent'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        stat_data.push((parsed_data[parsed_data_keys[x]] / 60).toFixed(2));\r\n        labels.push(parsed_data_keys[x]);\r\n    }\r\n\r\n    stat_data.reverse();\r\n    labels.reverse();\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '# of Hours',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRatedVsEpisodeCount(statistics) {\r\n    let parsed_data = statistics['anime_rated_vs_episode_count'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        if (parsed_data_keys[x] === '101+') continue;\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]['total_anime']);\r\n        labels.push(parsed_data_keys[x]);\r\n        stat_mean_score.push(\r\n            (parsed_data[parsed_data_keys[x]]['total_score'] / parsed_data[parsed_data_keys[x]]['total_anime'])\r\n                .toFixed(2))\r\n    }\r\n\r\n    stat_data.push(parsed_data['101+']['total_anime']);\r\n    labels.push('101+');\r\n    stat_mean_score.push((parsed_data['101+']['total_score'] / parsed_data['101+']['total_anime'])\r\n        .toFixed(2));\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nexport function getTableHistory(statistics) {\r\n    let parsed_data = statistics['anime_completed_history'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n    let months_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    let max = 0;\r\n    let sum = 0;\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        let month_keys = Object.keys(parsed_data[parsed_data_keys[x]]);\r\n        for (let y = 0; y < month_keys.length; y++) {\r\n            sum = parsed_data[parsed_data_keys[x]][month_keys[y]][0] +\r\n                parsed_data[parsed_data_keys[x]][month_keys[y]][1];\r\n            if (max < sum)\r\n                max = sum\r\n        }\r\n    }\r\n\r\n    parsed_data_keys.reverse();\r\n\r\n    return <Table id=\"completed-history-table\" bordered>\r\n        <thead>\r\n        <tr>\r\n            <td>{null}</td>\r\n            {months_labels.map(month => (<td key={month}>{month}</td>))}\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {parsed_data_keys.map(year => (\r\n            <tr key={year}>\r\n                <td>{year}</td>\r\n                {months.map(month => (\r\n                    parsed_data[year][month] ?\r\n                        <td key={month} style={{\r\n                            backgroundColor: \"rgba(54, 162, 235, \" +\r\n                                ((parsed_data[year][month][0] + parsed_data[year][month][1]) / max).toFixed(2)\r\n                                    .toString() + \")\"\r\n                        }}>\r\n                            <span>{parsed_data[year][month][0] + parsed_data[year][month][1]} <Chip className=\"chip-primary\" size=\"small\" label={parsed_data[year][month][0]}/> <Chip className=\"chip-danger\" size=\"small\" label={parsed_data[year][month][1]}/></span>\r\n                        </td> : <td key={month}>{null}</td>\r\n                ))}\r\n            </tr>\r\n        ))}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\n\r\nexport function getDataFavoriteYears(statistics) {\r\n    let parsed_data = statistics['anime_favorite_years'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        labels.push(parsed_data_keys[x]);\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]['total_anime']);\r\n        stat_mean_score.push((parsed_data[parsed_data_keys[x]]['total_score'] /\r\n            parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2));\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nfunction compareByTotal(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['total_anime'];\r\n    const second = a['total_anime'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\n\r\nfunction compareByMean(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['mean_score'];\r\n    const second = a['mean_score'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\n\r\nexport function getDataFavoriteGenres(statistics, order) {\r\n    let parsed_data = statistics['anime_favorite_genres'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        data.push({\r\n            'label': parsed_data_keys[x],\r\n            'total_anime': parsed_data[parsed_data_keys[x]]['total_anime'],\r\n            'mean_score': (parsed_data[parsed_data_keys[x]]['total_score'] /\r\n                parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2),\r\n        })\r\n    }\r\n\r\n    if (order === 'Mean')\r\n        data.sort(compareByMean);\r\n    else\r\n        data.sort(compareByTotal);\r\n\r\n    for (let x = 0; x < data.length; x++) {\r\n        labels.push(data[x]['label']);\r\n        stat_data.push(data[x]['total_anime']);\r\n        stat_mean_score.push(data[x]['mean_score']);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nexport function getDataFavoriteTypes(statistics) {\r\n    let parsed_data = statistics['anime_favorite_types'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        data.push({\r\n            'label': parsed_data_keys[x],\r\n            'total_anime': parsed_data[parsed_data_keys[x]]['total_anime'],\r\n            'mean_score': (parsed_data[parsed_data_keys[x]]['total_score'] /\r\n                parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2),\r\n        })\r\n    }\r\n\r\n    for (let x = 0; x < data.length; x++) {\r\n        labels.push(data[x]['label']);\r\n        stat_data.push(data[x]['total_anime']);\r\n        stat_mean_score.push(data[x]['mean_score']);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nimport {updateAndGetUserAnimeStatistics} from \"../../../actions/users\";\r\nimport {\r\n    getDataFavoriteGenres,\r\n    getDataFavoriteTypes,\r\n    getDataFavoriteYears,\r\n    getDataRatedVsEpisodeCount,\r\n    getDataRatedVsTimeSpent,\r\n    getDataScoreDistribution,\r\n    getTableHistory\r\n} from \"./data_calculations\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {filterTitles} from \"../../browse/functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\n\r\nconst years_calc = 1000 * 60 * 60 * 24 * 30 * 12;\r\n\r\n\r\nclass Statistics extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.getFavoriteGenres = this.getFavoriteGenres.bind(this);\r\n        this.sortFavoriteGenres = this.sortFavoriteGenres.bind(this);\r\n        this.state = {\r\n            favorite_genres_sorted_by: 'Total',\r\n            data_favorite_genres: {},\r\n            data_favorite_genres_options: {maintainAspectRatio: false},\r\n            updated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Statistics';\r\n        window.scrollTo(0, 0);\r\n\r\n        this.props.updateAndGetUserAnimeStatistics(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (!this.state.updated)\r\n            this.getFavoriteGenres(this.state.favorite_genres_sorted_by);\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            window.scrollTo(0, 0);\r\n            this.props.updateAndGetUserAnimeStatistics(this.props.match.params.id);\r\n        }\r\n    }\r\n\r\n    sortFavoriteGenres() {\r\n        if (this.state.favorite_genres_sorted_by === 'Total')\r\n            this.getFavoriteGenres('Mean');\r\n        else\r\n            this.getFavoriteGenres('Total');\r\n    }\r\n\r\n    getFavoriteGenres(order) {\r\n        try {\r\n            let data_and_options = getDataFavoriteGenres(this.props.user_anime_statistics['user_statistics'], order);\r\n            this.setState({\r\n                favorite_genres_sorted_by: order,\r\n                data_favorite_genres: data_and_options[0],\r\n                data_favorite_genres_options: data_and_options[1],\r\n                updated: true\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let data_sources = {};\r\n        let data_rated_vs_time_spent = {};\r\n        let data_rated_vs_episode_count = {};\r\n        let data_rated_vs_episode_count_options = {maintainAspectRatio: false};\r\n        let data_completed_history;\r\n        let data_favorite_years = {};\r\n        let data_favorite_years_options = {maintainAspectRatio: false};\r\n        let data_favorite_types = {};\r\n        let data_favorite_types_options = {maintainAspectRatio: false};\r\n        let completed_percent_from_all_anime = 0;\r\n        let finished_percent_from_all_anime = 0;\r\n        let episodes_percent_from_all_episodes = 0;\r\n        let minutes_percent_from_all_minutes = 0;\r\n        let all_anime_total_hours = 0;\r\n        let mean_score;\r\n        let hours_watching;\r\n        let years_watching;\r\n        let years_until_completion = 0;\r\n\r\n        try {\r\n            data_sources = getDataScoreDistribution(this.props.user_anime_statistics['user_statistics']);\r\n            data_rated_vs_time_spent = getDataRatedVsTimeSpent(this.props.user_anime_statistics['user_statistics']);\r\n            data_completed_history = getTableHistory(this.props.user_anime_statistics['user_statistics']);\r\n            let data_and_options = getDataRatedVsEpisodeCount(this.props.user_anime_statistics['user_statistics']);\r\n            data_rated_vs_episode_count = data_and_options[0];\r\n            data_rated_vs_episode_count_options = data_and_options[1];\r\n            data_and_options = getDataFavoriteYears(this.props.user_anime_statistics['user_statistics']);\r\n            data_favorite_years = data_and_options[0];\r\n            data_favorite_years_options = data_and_options[1];\r\n            data_and_options = getDataFavoriteTypes(this.props.user_anime_statistics['user_statistics']);\r\n            data_favorite_types = data_and_options[0];\r\n            data_favorite_types_options = data_and_options[1];\r\n            // completed_percent_from_all_anime = ((this.props.user_anime_statistics['anime_completed'] /\r\n            //     anime_data_statistics['total_anime']) * 100).toFixed(1);\r\n            // finished_percent_from_all_anime = ((this.props.user_anime_statistics['anime_total_finished'] /\r\n            //     anime_data_statistics['total_anime']) * 100).toFixed(1);\r\n            hours_watching = (this.props.user_anime_statistics['anime_mins_spent_watching'] / 60).toFixed(1);\r\n            mean_score = this.props.user_anime_statistics['anime_mean_score'].toFixed(1);\r\n            // episodes_percent_from_all_episodes = ((this.props.user_anime_statistics['anime_episodes_watched'] /\r\n            //     anime_data_statistics['total_episodes']) * 100).toFixed(1);\r\n            // all_anime_total_hours = (anime_data_statistics['total_minutes'] / 60).toFixed(1);\r\n            minutes_percent_from_all_minutes = ((hours_watching / all_anime_total_hours) * 100).toFixed(1);\r\n\r\n            const date1 = new Date(this.props.user_anime_statistics['anime_started_watching_on']);\r\n            const date2 = new Date();\r\n            const diffTime = Math.abs(date2 - date1);\r\n            years_watching = (diffTime / years_calc).toFixed(1);\r\n            years_until_completion = ((100 / finished_percent_from_all_anime) * years_watching).toFixed(1);\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"Statistics\" container>\r\n                    <Grid item xs={12}>\r\n                        <h1>Statistics</h1>\r\n                    </Grid>\r\n\r\n                    {!this.props.user_statistics_loading ? <>\r\n                        {/*<Grid item xs={12} md={6}>*/}\r\n                        {/*    <table className=\"generic-stats-table\">*/}\r\n                        {/*        <tbody>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_watching']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_completed']} of{' '}*!/*/}\r\n                        {/*            /!*    {anime_data_statistics['total_anime']} ({completed_percent_from_all_anime}%)</p>*!/*/}\r\n                        {/*            /!*</td>*!/*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_on_hold']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_dropped']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td>*/}\r\n                        {/*                <p className=\"color-white\">{this.props.user_anime_statistics['anime_plan_to_watch']}</p>*/}\r\n                        {/*            </td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr className=\"text-right\">*/}\r\n                        {/*            <td><Chip label={'Total Entries'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_total_entries']}</p>*/}\r\n                        {/*            </td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        </tbody>*/}\r\n                        {/*    </table>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={12} md={6}>*/}\r\n                        {/*        <table className=\"generic-stats-table\">*/}\r\n                        {/*            <tbody>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Watching since'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">*/}\r\n                        {/*                    <Moment format=\"DD MMM YYYY\"*/}\r\n                        {/*                            date={this.props.user_anime_statistics['anime_started_watching_on']}/>{' '}*/}\r\n                        {/*                            ({years_watching} years)</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Total Finished'}/></td>*/}\r\n                        {/*                /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_total_finished']} of*!/*/}\r\n                        {/*                /!*    {' '}{anime_data_statistics['total_anime']} (*!/*/}\r\n                        {/*                /!*    {finished_percent_from_all_anime}%)</p></td>*!/*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Finish rate'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{years_until_completion} years until full*/}\r\n                        {/*                    completion</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Mean score'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{mean_score}</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Total episodes'}/></td>*/}\r\n                        {/*                /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_episodes_watched']}*!/*/}\r\n                        {/*                /!*    {' '}of {anime_data_statistics['total_episodes']}{' '}*!/*/}\r\n                        {/*                /!*    ({episodes_percent_from_all_episodes}%)</p></td>*!/*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Total hours'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{hours_watching} of {all_anime_total_hours}{' '}*/}\r\n                        {/*                    ({minutes_percent_from_all_minutes}%)</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            </tbody>*/}\r\n                        {/*        </table>*/}\r\n                        {/*    </Grid>*/}\r\n\r\n                        <Grid item xs={12}>\r\n                            <div className=\"table-container\">\r\n                                <h5 id=\"History\" className=\"text-center\">History</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"History\">*/}\r\n                                {/*    Total number of Anime you have finished in every month. Entries that have unknown*/}\r\n                                {/*    finish date are not taken into account*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <p>\r\n                                    <Chip className=\"chip-default\" size=\"small\" label={'#'}/> Total&nbsp;&nbsp;\r\n                                    <Chip className=\"chip-primary\" size=\"small\" label={'#'}/> Completed&nbsp;&nbsp;\r\n                                    <Chip className=\"chip-danger\" size=\"small\" label={'#'}/> Dropped</p>\r\n                                {data_completed_history}\r\n                            </div>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Score-Distribution\" className=\"text-center\">Score Distribution</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Score-Distribution\">*/}\r\n                                {/*    How many Anime you have scored in each score grade. Every scored entry is taken*/}\r\n                                {/*    into account.*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_sources}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={{maintainAspectRatio: false}}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Rated-Time-Spent\" className=\"text-center\">Rated vs Time spent</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Rated-Time-Spent\">*/}\r\n                                {/*    How much time you have spent watching in all score grades. Every scored entry is*/}\r\n                                {/*    taken into account. Anime with no episodes are not taken into account.*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_rated_vs_time_spent}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={{maintainAspectRatio: false}}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Rated-Episode-Count\" className=\"text-center\">Rated vs Episode count</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Rated-Episode-Count\">*/}\r\n                                {/*    Number of Anime you have completed in various episode formats. Only \"Completed\"*/}\r\n                                {/*    entries are taken, anime with unknown episodes are not taken into account*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_rated_vs_episode_count}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_rated_vs_episode_count_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Types\" className=\"text-center\">Favorite Types</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Types\">*/}\r\n                                {/*    Number of Anime you have in your list from various types. All anime except the ones*/}\r\n                                {/*    in \"Plan to Watch\" are taken into the calculation, entries that are not scored are*/}\r\n                                {/*    not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_favorite_types}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_favorite_types_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Years\" className=\"text-center\">Favorite Years</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Years\">*/}\r\n                                {/*    Number of Anime you have in your list from various years. All anime except the ones*/}\r\n                                {/*    in \"Plan to Watch\" are taken into the calculation, entries that are not scored are*/}\r\n                                {/*    not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_favorite_years}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_favorite_years_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Genres\" className=\"text-center\">Favorite Genres</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Genres\">*/}\r\n                                {/*    Number of Anime you have in your list from various genres. All anime except the*/}\r\n                                {/*    ones in \"Plan to Watch\" are taken into the calculation, entries that are not scored*/}\r\n                                {/*    are not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Button variant=\"outlined\"\r\n                                        onClick={this.sortFavoriteGenres}>{this.state.favorite_genres_sorted_by}</Button>\r\n                                <Bar\r\n                                    data={this.state.data_favorite_genres}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={this.state.data_favorite_genres_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </> : <Loading text={'Statistics Loading'} offset={150}/>}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_statistics: state.users.user_anime_statistics,\r\n    user_statistics_loading: state.users.user_statistics_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateAndGetUserAnimeStatistics})(Statistics)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Moment from 'react-moment'\r\nimport moment from 'moment'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport {getVisitedUserAnimeHistory, getVisitedUserMangaHistory} from '../../../actions/users'\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult, User} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles, getTabName} from \"../../browse/functions\";\r\nimport {getBrowseGridListCols} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\n\r\n\r\nfunction displayHistory(user_history, branch) {\r\n    let lastId = 0;\r\n    let newId = 0;\r\n    let lastMonth = 0;\r\n    let lastDate = 0;\r\n    let lastYear = 0;\r\n    let formatted = [];\r\n    let title;\r\n    let item;\r\n\r\n    try {\r\n        for (let x = 0; x < user_history['results'].length; x++) {\r\n\r\n            let obj = {};\r\n            let nextYear = moment(user_history['results'][x]['timestamp']).date();\r\n            let nextMonth = moment(user_history['results'][x]['timestamp']).month() + 1;\r\n            let nextDate = moment(user_history['results'][x]['timestamp']).date();\r\n\r\n            if (nextYear != lastYear || nextMonth != lastMonth || nextDate != lastDate) {\r\n                lastYear = moment(user_history['results'][x]['timestamp']).date();\r\n                lastMonth = moment(user_history['results'][x]['timestamp']).month() + 1;\r\n                lastDate = moment(user_history['results'][x]['timestamp']).date();\r\n                if (branch === BRANCH_ANIME) {\r\n                    lastId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    title = user_history['results'][x]['anime_list_entry']['anime'];\r\n                    item = user_history['results'][x]['episode'];\r\n                }\r\n                else if (branch === BRANCH_MANGA) {\r\n                    lastId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n                    title = user_history['results'][x]['manga_list_entry']['manga'];\r\n                    item = user_history['results'][x]['chapter'];\r\n                }\r\n                obj = {\r\n                    date: user_history['results'][x]['timestamp'],\r\n                    entries: [\r\n                        {\r\n                            title: title,\r\n                            history: [{\r\n                                item: item,\r\n                                timestamp: user_history['results'][x]['timestamp']\r\n                            }]\r\n                        }\r\n                    ]\r\n                };\r\n                formatted.push(obj)\r\n            } else {\r\n                if (branch === BRANCH_ANIME) {\r\n                    newId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    title = user_history['results'][x]['anime_list_entry']['anime'];\r\n                    item = user_history['results'][x]['episode'];\r\n                }\r\n                else if (branch === BRANCH_MANGA) {\r\n                    newId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n                    title = user_history['results'][x]['manga_list_entry']['manga'];\r\n                    item = user_history['results'][x]['chapter'];\r\n                }\r\n\r\n                if (newId != lastId) {\r\n                    if (branch === BRANCH_ANIME)\r\n                        lastId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    else if (branch === BRANCH_MANGA)\r\n                        lastId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n\r\n                    formatted[formatted.length - 1]['entries'].push({\r\n                        title: title,\r\n                        history: [{\r\n                            item: item,\r\n                            timestamp: user_history['results'][x]['timestamp']\r\n                        }]\r\n                    })\r\n                } else {\r\n                    let last = formatted.length - 1;\r\n                    let lastHistory = formatted[last]['entries'].length - 1;\r\n                    formatted[last]['entries'][lastHistory]['history'].push({\r\n                        item: item,\r\n                        timestamp: user_history['results'][x]['timestamp']\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    } catch (e) {\r\n        return null\r\n    }\r\n\r\n    // noinspection CheckTagEmptyBody\r\n    return formatted.map((date, i) => (\r\n        <li key={i} className=\"timeline-event\">\r\n            <label className=\"timeline-event-icon\"></label>\r\n            <div className=\"timeline-event-copy\">\r\n                <p className=\"timeline-event-thumbnail\">\r\n                    <Moment format=\"Do MMMM YYYY - dddd\" date={date['date']}/></p>\r\n                {date['entries'].map((entry, x) => (\r\n                    <div key={x} className=\"box-light timeline-history-entry\">\r\n                        <div className=\"timeline-history-segment timeline-history-segment-card\">\r\n                            <TitleCard\r\n                                branch={branch}\r\n                                title={entry['title']}\r\n                            />\r\n                        </div>\r\n                        <div className=\"timeline-history-segment timeline-history-segment-episodes\">\r\n                            {entry['history'].map((history, y) => (\r\n                                <p key={y}>{branch === BRANCH_ANIME ? 'Episode ' :\r\n                                    branch === BRANCH_MANGA ? 'Chapter ' : null}\r\n                                    <Chip className=\"chip-info\" size=\"small\" label={history['item']}/> completed\r\n                                    at <Chip className=\"chip-info\" size=\"small\" label={<Moment format=\"HH:mm:ss\"\r\n                                        date={history['timestamp']}/>}/>\r\n                                </p>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </li>\r\n    ))\r\n}\r\n\r\n\r\nclass DisplayUserHistory extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        visited_user_id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.visited_user[User.username]} History`;\r\n        window.scrollTo(0, 0);\r\n\r\n        if (this.props.branch === BRANCH_ANIME) this.props.getVisitedUserAnimeHistory(this.props.visited_user_id);\r\n        else if (this.props.branch === BRANCH_MANGA) this.props.getVisitedUserMangaHistory(this.props.visited_user_id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.current_page !== this.state.current_page)\r\n            window.scrollTo(0, 0);\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        let total;\r\n        if (this.props.branch === BRANCH_ANIME)\r\n            total = Math.ceil(this.props.user_anime_history[ApiResult.count] / 100);\r\n        else if (this.props.branch === BRANCH_MANGA)\r\n            total = Math.ceil(this.props.user_manga_history[ApiResult.count] / 100);\r\n\r\n        if (page > 0 && page <= total) {\r\n            this.setState({current_page: page});\r\n            if (this.props.branch === BRANCH_ANIME)\r\n                this.props.getVisitedUserAnimeHistory(this.props.match.params.id, page);\r\n            else if (this.props.branch === BRANCH_MANGA)\r\n                this.props.getVisitedUserMangaHistory(this.props.match.params.id, page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let history;\r\n\r\n        try {\r\n            if (this.props.branch === BRANCH_ANIME) {\r\n                history = displayHistory(this.props.user_anime_history, this.props.branch);\r\n            }\r\n            else if (this.props.branch === BRANCH_MANGA) {\r\n                history = displayHistory(this.props.user_manga_history, this.props.branch);\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"History-Container\" container>\r\n                    <Grid item xs={12}>\r\n                        <h1>{this.props.branch} History</h1>\r\n                    </Grid>\r\n                    {!this.props.user_info_loading ? <>\r\n                        <Grid item xs={false} lg={1}/>\r\n                        <Grid item xs={12} lg={10}>\r\n                            <ul className=\"timeline\">\r\n                                {history}\r\n                            </ul>\r\n                        </Grid>\r\n                        </>\r\n                        : <Loading text={'History Loading'}/>}\r\n                    {!this.props.user_info_loading ?\r\n                        <div className=\"pagination\">\r\n                            <Pagination\r\n                                count={Math.ceil(this.props.user_anime_history[ApiResult.count] / 100)}\r\n                                color=\"primary\"\r\n                                siblingCount={3}\r\n                                page={this.state.current_page}\r\n                                onChange={(type, page) => {\r\n                                    playClickSound();\r\n                                    if (page !== this.state.current_page)\r\n                                        this.goToPage(page);\r\n                                    else\r\n                                        this.setState({page_dialog_open: true})\r\n                                }}\r\n                            />\r\n                            <GoToPageDialog\r\n                                open={this.state.page_dialog_open}\r\n                                current_page={this.state.current_page}\r\n                                total_pages={Math.ceil(this.props.user_anime_history[ApiResult.count] / 100)}\r\n                                goToPage={this.goToPage}\r\n                                onClose={this.closePageDialog}/>\r\n                        </div> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_anime_history: state.users.user_anime_history,\r\n    user_manga_history: state.users.user_manga_history,\r\n    user_info_loading: state.users.user_info_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser, getVisitedUserAnimeHistory, getVisitedUserMangaHistory})(DisplayUserHistory)","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Moment from 'react-moment'\r\nimport moment from 'moment'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport {getVisitedUserAnimeHistory, getVisitedUserMangaHistory} from '../../../actions/users'\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult, Profile, User} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles, getTabName} from \"../../browse/functions\";\r\nimport {getBrowseGridListCols} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport DisplayUserHistory from \"./DisplayUserHistory\";\r\nimport UserList from \"../user_list/UserList\";\r\nimport {PrivatePage} from \"../user_list/PrivateList\";\r\n\r\n\r\nfunction isHistoryPrivate(branch, visited_user) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return visited_user[User.profile][Profile.is_anime_history_private];\r\n        case BRANCH_MANGA:\r\n            return visited_user[User.profile][Profile.is_manga_history_private];\r\n        default:\r\n            return true\r\n    }\r\n}\r\n\r\n\r\nclass History extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `History`;\r\n        window.scrollTo(0, 0);\r\n\r\n        this.props.getUser(this.props.match.params.id);\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        console.log('this.props.visited_user', this.props.visited_user)\r\n        console.log('this.props.user', this.props.user)\r\n        // console.log('this.props.visited_user[User.id]', this.props.visited_user[User.id])\r\n        // console.log('this.props.user[User.id]', this.props.user[User.id])\r\n        console.log('list_owner', list_owner)\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n            list_owner || !isHistoryPrivate(this.props.branch, this.props.visited_user) ?\r\n                <DisplayUserHistory branch={this.props.branch} visited_user_id={this.props.match.params.id}/> :\r\n                <PrivatePage text={`${this.props.visited_user[User.username]}'s ${this.props.branch} History is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_anime_history: state.users.user_anime_history,\r\n    user_manga_history: state.users.user_manga_history,\r\n    user_info_loading: state.users.user_info_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(History)","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport UserList from \"../UserList\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport {PrivatePage} from \"../PrivateList\";\r\nimport Browse from \"../../../browse/Browse\";\r\n\r\n\r\nclass MangaList extends Component {\r\n    componentDidMount() {\r\n        this.props.getUser(parseInt(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n        list_owner || !this.props.visited_user[User.profile][Profile.is_manga_list_private] ?\r\n            <UserList\r\n                branch={BRANCH_MANGA}\r\n                params={this.props.match.params}\r\n                list_owner={list_owner}\r\n                titles_loading={this.props.manga_loading}\r\n                filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n                filtered_titles={this.props.filtered_manga}\r\n                title_filters={this.props.manga_filters}\r\n                user_entry_statuses={this.props.user_manga_entry_statuses}\r\n            /> : <PrivatePage text={`${this.props.visited_user[User.username]}'s ${BRANCH_MANGA} List is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n    manga_filters: state.cookies.manga_list_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(MangaList)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {getAnimeFranchise} from '../../../actions/anime'\r\n\r\nimport FranchiseTree from \"./FranchiseTree\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport CyberHeader from \"../../layout/navbar/CyberHeader\";\r\nimport {FRANCHISES_TAB_NAME} from \"../../../globals\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {AnimeFranchise} from \"../../../models\";\r\nimport Loading from \"../../layout/common/Loading\";\r\n\r\nimport '../../../assets/css/franchises.css'\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass FranchisesHome extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = FRANCHISES_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getAnimeFranchise(this.props.match.params.id);\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        // document.title = `${current_anime_franchise['title']}`;\r\n        let titles = [];\r\n        let avg_score;\r\n\r\n        // try {\r\n        //     if (current_anime_franchise['anime_franchise'].length > 0)\r\n        //         titles = current_anime_franchise['anime_franchise'];\r\n        //     avg_score = current_anime_franchise['average_score'].toFixed(2)\r\n        // } catch (e) {\r\n        // }\r\n\r\n        return (\r\n            <div id=\"Display-Franchise\">\r\n                <CyberHeader/>\r\n                {!isEmpty(this.props.anime_franchise) ?\r\n                    <FranchiseTree titles={this.props.anime_franchise[AnimeFranchise.anime_franchise]}/>\r\n                : this.props.anime_franchise_loading ? <Loading text={'Franchise Loading'}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise, getLoggedInUserAnimeEntryStatuses})(FranchisesHome)","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Manga, MangaData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport manga from \"../../../../reducers/manga\";\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.recently_added_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', manga_data[MangaData.recently_added_manga])}\r\n\r\n                    {manga_data[MangaData.recently_added_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction RecentlyDownloaded(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.recently_downloaded_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', manga_data[MangaData.recently_added_manga])}\r\n                    {manga_data[MangaData.recently_downloaded_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopUpcoming(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    console.log('mangadata:', manga_data);\r\n    console.log('MangaData.top_upcoming_manga:', manga_data[MangaData.top_upcoming_manga]);\r\n    console.log('manga_data_loaded:', manga_data_loaded);\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Upcoming Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_upcoming_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_upcoming_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScoredMal(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_scored_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_scored_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction MostPopularMal(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.most_popular_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.most_popular_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2010s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_2010s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_2010s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2000s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2000s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_2000s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_2000s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top90s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1990s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_90s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_90s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top80s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1980s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_80s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_80s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top70s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1970s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_70s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_70s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopMangaTabs(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    {/*<Tab label={<p>Recently Downloaded</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>*/}\r\n                    <Tab label={<p>Top Upcoming</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Score</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Most popular</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2010s</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2000s</p>} {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 90s</p>} {...a11yProps(6)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 80s</p>} {...a11yProps(7)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 70s</p>} {...a11yProps(8)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <RecentlyAdded\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                {/*<TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>*/}\r\n                {/*    <RecentlyDownloaded*/}\r\n                {/*        manga_data={manga_data}*/}\r\n                {/*        manga_loading={manga_loading}*/}\r\n                {/*        manga_data_loaded={manga_data_loaded}*/}\r\n                {/*        user_manga_entry_statuses={user_manga_entry_statuses}*/}\r\n                {/*    />*/}\r\n                {/*</TabPanel>*/}\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <TopUpcoming\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopScoredMal\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <MostPopularMal\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <Top2010s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={5} dir={theme.direction}>\r\n                    <Top2000s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={6} dir={theme.direction}>\r\n                    <Top90s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={7} dir={theme.direction}>\r\n                    <Top80s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={8} dir={theme.direction}>\r\n                    <Top70s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty} from \"../../functions\";\r\nimport {MANGA_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Manga, MangaData} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {TopMangaTabs} from \"./tabs/TopMangaTabs\";\r\n\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\nfunction CurrentSeason(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    const current_year = new Date().getFullYear();\r\n    let current_month = new Date().getMonth() + 1;\r\n    let current_season_number = 1;\r\n    if (current_month >= 1 && current_month <= 3) current_season_number = 1;\r\n    else if (current_month >= 4 && current_month <= 6) current_season_number = 2;\r\n    else if (current_month >= 7 && current_month <= 9) current_season_number = 3;\r\n    else if (current_month >= 10 && current_month <= 12) current_season_number = 4;\r\n    const current_season = getSeasonLabelFromSeasonNumber(current_season_number);\r\n\r\n    const season_icon_and_class = getIconAndClassFromSeasonNumber(current_season_number);\r\n    return <Grid xs={12} id=\"Current-Season\">\r\n        <div className=\"current-season-header\">\r\n            <h3>\r\n                Current Season{' '}\r\n                <CyberLink to={MANGA_SEASON_DISPLAY(current_year, current_season_number)}>\r\n                    {current_year} {current_season}\r\n                </CyberLink>{' '}\r\n                <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                 className={season_icon_and_class.className}/>\r\n            </h3>\r\n        </div>\r\n        <div id=\"season-titles-container\" className=\"current-season-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.current_manga_season] ?\r\n                <div className=\"current-season-titles-wrapper\">\r\n                    {manga_data[MangaData.current_manga_season].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"current-season-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\n\r\nclass TopManga extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <CurrentSeason\r\n                manga_data={this.props.manga_data}\r\n                manga_loading={this.props.manga_loading}\r\n                manga_data_loaded={this.props.manga_data_loaded}\r\n                user_manga_entry_statuses={this.props.user_manga_entry_statuses}\r\n            />\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopMangaTabs\r\n                manga_data={this.props.manga_data}\r\n                manga_loading={this.props.manga_loading}\r\n                manga_data_loaded={this.props.manga_data_loaded}\r\n                user_manga_entry_statuses={this.props.user_manga_entry_statuses}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_data: state.manga.manga_data,\r\n    manga_loading: state.manga.manga_loading,\r\n    manga_data_loaded: state.manga.manga_data_loaded,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopManga)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {MANGA_TAB_NAME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport {getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\nimport {getMangaDataForHomePage} from \"../../../actions/manga\";\r\nimport TopManga from \"./TopManga\";\r\n\r\n\r\nclass MangaHome extends Component {\r\n    componentDidMount() {\r\n        document.title = MANGA_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getMangaDataForHomePage();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Manga-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopManga/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {getMangaDataForHomePage, getLoggedInUserMangaEntryStatuses})(MangaHome)\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty, isTimeLessThanAnHourAgo} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, AnimeData, ApiResult, IndustryData} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\n\r\n\r\nclass TopCharacters extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid xs={12} className=\"horizontal-titles\">\r\n                <div className=\"horizontal-titles-header\">\r\n                    <h3>Most Popular Characters</h3>\r\n                </div>\r\n                <div className=\"horizontal-titles-container horizontal-scroll\">\r\n                    {this.props.industry_data_loaded && this.props.industry_data &&\r\n                        this.props.industry_data[IndustryData.most_popular_characters] ?\r\n                        <div className=\"horizontal-titles-wrapper\">\r\n                            {this.props.industry_data[IndustryData.most_popular_characters].map(character => (\r\n                                <TitleCard\r\n                                    containerClassNames=\"horizontal-titles-card-container\"\r\n                                    branch={BRANCH_CHARACTERS}\r\n                                    title={character}\r\n                                    skip_img_preload={true}\r\n                                />\r\n                            ))}\r\n                        </div> : this.props.industry_data_loading ?\r\n                            <Loading text={'Characters Loading'} block={true}/> : null}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <Grid xs={12} className=\"horizontal-titles\">\r\n                <div className=\"horizontal-titles-header\">\r\n                    <h3>Recently Added Characters</h3>\r\n                </div>\r\n                <div className=\"horizontal-titles-container horizontal-scroll\">\r\n                    {this.props.industry_data_loaded && this.props.industry_data &&\r\n                        this.props.industry_data[IndustryData.recently_added_characters] ?\r\n                        <div className=\"horizontal-titles-wrapper\">\r\n                            {this.props.industry_data[IndustryData.recently_added_characters].map(character => (\r\n                                <TitleCard\r\n                                    containerClassNames=\"horizontal-titles-card-container\"\r\n                                    branch={BRANCH_CHARACTERS}\r\n                                    title={character}\r\n                                    skip_img_preload={true}\r\n                                />\r\n                            ))}\r\n                        </div> : this.props.industry_data_loading ?\r\n                            <Loading text={'Characters Loading'} block={true}/> : null}\r\n                </div>\r\n            </Grid>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    industry_data: state.industry.industry_data,\r\n    industry_data_loading: state.industry.industry_data_loading,\r\n    industry_data_loaded: state.industry.industry_data_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopCharacters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {CHARACTERS_TAB_NAME, INDUSTRY_TAB_NAME} from \"../../../globals\";\r\nimport {getCharactersDataForHomePage} from \"../../../actions/characters\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport TopCharacters from \"./TopCharacters\";\r\n\r\nimport '../../../assets/css/characters.css'\r\nimport {getIndustryDataForHomePage} from \"../../../actions/industry\";\r\n\r\n\r\nclass CharactersHome extends Component {\r\n    componentDidMount() {\r\n        document.title = INDUSTRY_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getIndustryDataForHomePage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Characters-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopCharacters/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getIndustryDataForHomePage})(CharactersHome)\r\n","import axios from \"axios\";\r\nimport {GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING} from \"./types\";\r\nimport {API_GET_INDUSTRY_DATA_FOR_HOME_PAGE} from \"./api_urls\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {returnErrors} from \"./messages\";\r\n\r\n\r\n// GET INDUSTRY DATA FOR INDUSTRY HOME PAGE\r\nexport const getIndustryDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: INDUSTRY_DATA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_INDUSTRY_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_INDUSTRY_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {ErogeData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_EROGE} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport TopEroge from \"../TopEroge\";\r\n\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.recently_added_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.recently_added_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScored(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_scored_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_scored_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nexport function MostPopular(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        <div className=\"horizontal-titles-header\">\r\n            <h3>Most Popular Eroge</h3>\r\n        </div>\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.most_popular_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.most_popular_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopWindows(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_windows_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_windows_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopAndroid(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_android_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_android_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction LargestSize(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.largest_size_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.largest_size_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopErogeTabs(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Scored</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Windows</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Android</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Largest</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <RecentlyAdded\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <TopScored\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopWindows\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <TopAndroid\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <LargestSize\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {MostPopular, TopErogeTabs} from \"./tabs/TopErogeTabs\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\n\r\n\r\nclass TopEroge extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <MostPopular\r\n                eroge_data={this.props.eroge_data}\r\n                eroge_loading={this.props.eroge_loading}\r\n                eroge_data_loaded={this.props.eroge_data_loaded}/>\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopErogeTabs\r\n                eroge_data={this.props.eroge_data}\r\n                eroge_loading={this.props.eroge_loading}\r\n                eroge_data_loaded={this.props.eroge_data_loaded}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_data: state.eroge.eroge_data,\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    eroge_data_loaded: state.eroge.eroge_data_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopEroge)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {ANIME_TAB_NAME, EROGE_BROWSE_TAB_NAME, EROGE_TAB_NAME} from \"../../../globals\";\r\nimport {getErogeDataForHomePage} from \"../../../actions/eroge\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport TopEroge from \"./TopEroge\";\r\n\r\n\r\nclass ErogeHome extends Component {\r\n    componentDidMount() {\r\n        document.title = EROGE_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getErogeDataForHomePage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Eroge-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopEroge/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getErogeDataForHomePage})(ErogeHome)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\n\r\n\r\nclass PeopleBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_PEOPLE}\r\n            titles_loading={this.props.people_loading}\r\n            filtered_titles_loaded={this.props.filtered_people_loaded}\r\n            filtered_titles={this.props.filtered_people}\r\n            title_filters={this.props.people_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people_loading: state.people.people_loading,\r\n    filtered_people_loaded: state.people.filtered_people_loaded,\r\n    filtered_people: state.people.filtered_people,\r\n    people_filters: state.cookies.people_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PeopleBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass PersonDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_PEOPLE}\r\n            param_id={this.props.match.params.id}\r\n            title={this.props.person}\r\n            title_loaded={this.props.people_loaded}\r\n            title_loading={this.props.people_loading}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    people_loaded: state.people.people_loaded,\r\n    people_loading: state.people.people_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PersonDisplay)\r\n","export const TEMPLATE_NAME_NONE = 'Select Default';\r\nexport const TEMPLATE_NAME_DEFAULT = 'Default';\r\nexport const TEMPLATE_NAME_MAL = 'MAL';\r\nexport const TEMPLATE_NAME_HIGH_CONTRAST = 'High Contrast';\r\n\r\nexport const TEMPLATE_NONE_BACKGROUND = {\r\n    background_color: {hex: '00000000'},\r\n    url: '',\r\n    repeat: 'no-repeat',\r\n    size: 'contain',\r\n    position_1: 'center',\r\n    position_2: 'center',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\n\r\nexport const TEMPLATE_DEFAULT_BACKGROUND = {\r\n    background_color: {hex: '00000000'},\r\n    url: 'https://ik.imagekit.io/r0d4cpkoj/BBCode_Templates/girl_phone_window_hXW-PC-Nj.jpg',\r\n    repeat: 'no-repeat',\r\n    size: 'cover',\r\n    position_1: 'center',\r\n    position_2: 'center',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\n\r\nexport const TEMPLATE_DEFAULT_BBCODE = `\r\n\r\n[animestats width=50%][/animestats][mangastats width=50%][/mangastats]\r\n\r\n\r\n\r\n\r\n[p width=50%][size=25]    Favorite Anime[/size][/p][p width=50%][size=25]    Favorite Manga[/size][/p]\r\n[favoriteanime small=true width=50%][/favoriteanime][favoritemanga small=true  width=50%][/favoritemanga]\r\n\r\n\r\n\r\n[p width=50%][size=25]    Favorite Characters[/size][/p][p width=50%][size=25]\r\n   Favorite People[/size][/p]\r\n[favoritecharacters small=true width=50%][/favoritecharacters][favoritepeople small=true width=50%][/favoritepeople]\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\nexport const TEMPLATE_MAL_BACKGROUND = TEMPLATE_NONE_BACKGROUND;\r\nexport const TEMPLATE_MAL_BBCODE = `\r\n\r\n[animestats width=50%][/animestats][mangastats width=50%][/mangastats]\r\n\r\n\r\n[p width=100%][size=30][center]Favorites[/center][/size][/p]\r\n\r\n[p width=25%][size=25][center]Anime[/center][/size][/p][p width=25%][size=25][center]Manga[/center][/size][/p][p width=25%][size=25][center]Characters[/center][/size][/p][p width=25%][size=25][center]People[/center][/size][/p]\r\n\r\n[favoriteanime small=true width=25% center=true][/favoriteanime][favoritemanga small=true  width=25% center=true][/favoritemanga][favoritecharacters small=true width=25% center=true][/favoritecharacters][favoritepeople small=true width=25% center=true][/favoritepeople]\r\n\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\nexport const TEMPLATE_HIGH_CONTRAST_BACKGROUND = {\r\n    background_color: {hex: '000000'},\r\n    url: '',\r\n    repeat: 'no-repeat',\r\n    size: 'contain',\r\n    position_1: 'center',\r\n    position_2: 'center',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\nexport const TEMPLATE_HIGH_CONTRAST_BBCODE = `\r\n\r\n\r\n\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''There is nothing. Only warm, primordial blackness. Your conscience ferments in it — no larger than a single grain of malt. You don't have to do anything anymore. Ever. Never ever.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''An inordinate amount of time passes. It is utterly void of struggle. No lives are contained within it.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''The song of death is sweet and endless... But what is this? Somewhere in the sore, bloated *man-meat* around you — a sensation!''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''The limbed and headed machine of pain and undignified suffering is firing up again. It wants to walk the desert. Hurting. Longing.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[center][p width=70%][color=#ff0000][i]''This is a person with a lot of past, but little present. And almost no future.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n\r\n`;\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport {CyberButton} from \"../../../../layout/common/common\";\r\n\r\nimport '../../../../../assets/css/bbcode_editor.css'\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {\r\n    TEMPLATE_DEFAULT_BACKGROUND,\r\n    TEMPLATE_DEFAULT_BBCODE,\r\n    TEMPLATE_HIGH_CONTRAST_BACKGROUND,\r\n    TEMPLATE_HIGH_CONTRAST_BBCODE,\r\n    TEMPLATE_MAL_BACKGROUND,\r\n    TEMPLATE_MAL_BBCODE,\r\n    TEMPLATE_NAME_DEFAULT,\r\n    TEMPLATE_NAME_HIGH_CONTRAST,\r\n    TEMPLATE_NAME_MAL,\r\n    TEMPLATE_NAME_NONE\r\n} from \"../templates\";\r\nimport {Profile, User} from \"../../../../../models\";\r\n\r\n\r\n/**\r\n * returns True if the objects are the same\r\n * @param target\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nfunction compareImageObject(target, value) {\r\n    if (!target || !value)\r\n        return false\r\n    if (target.background_color !== value.background_color)\r\n        return false;\r\n    if (target.position_1 !== value.position_1)\r\n        return false;\r\n    if (target.position_2 !== value.position_2)\r\n        return false;\r\n    if (target.position_x !== value.position_x)\r\n        return false;\r\n    if (target.position_y !== value.position_y)\r\n        return false;\r\n    if (target.repeat !== value.repeat)\r\n        return false;\r\n    if (target.size !== value.size)\r\n        return false;\r\n    return target.url === value.url;\r\n}\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BBCodeEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateSelectedPreset = this.updateSelectedPreset.bind(this);\r\n        this.state = {\r\n            selected_template: TEMPLATE_NAME_NONE\r\n        };\r\n    }\r\n\r\n    updateSelectedPreset(e) {\r\n        this.setState({selected_template: e.target.value});\r\n        const background = JSON.parse(this.props.user[User.profile][Profile.about_section_background_style]);\r\n        const bbcode = this.props.user[User.profile][Profile.about_section_bbcode]?.replaceAll('\\n', '[br][/br]');\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!(bbcode !== this.props.bbcode || !compareImageObject(background, this.props.background_image)) || ((bbcode !== this.props.bbcode || !compareImageObject(background, this.props.background_image)) && confirm('You have unsaved changes, changing the template will delete any unsaved changes!'))) {\r\n            switch (e.target.value) {\r\n                case TEMPLATE_NAME_DEFAULT:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_DEFAULT_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_DEFAULT_BACKGROUND, 'all');\r\n                    return;\r\n                case TEMPLATE_NAME_MAL:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_MAL_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_MAL_BACKGROUND, 'all');\r\n                    return;\r\n                case TEMPLATE_NAME_HIGH_CONTRAST:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_HIGH_CONTRAST_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_HIGH_CONTRAST_BACKGROUND, 'all');\r\n                    return;\r\n                default:\r\n                    return\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <div className=\"editor-container box-light\">\r\n                <FormControl variant=\"outlined\" className=\"form-control\">\r\n                    <InputLabel id=\"select-position-2-label\">Template</InputLabel>\r\n                    <Select\r\n                        labelId=\"select-position-2-label\"\r\n                        id=\"select-position-1\"\r\n                        value={this.state.selected_template}\r\n                        onChange={this.updateSelectedPreset}\r\n                        label=\"position\"\r\n                    >\r\n                        <MenuItem value={TEMPLATE_NAME_NONE}>\r\n                            <span className=\"color-gray\">Select Template</span>\r\n                        </MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_DEFAULT}>Default</MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_MAL}>MAL</MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_HIGH_CONTRAST}>High Contrast</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    id=\"BBCode-Editor-Field\"\r\n                    label=\"BBCode Text Editor\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={this.props.bbcode ? this.props.bbcode.replaceAll('[br][/br]', '\\n') : ''}\r\n                    name=\"bbcode-editor\"\r\n                    onChange={this.props.updateEditor}\r\n                />\r\n                <p className=\"color-gray\">Type your bbCode here and see it update in real time.</p>\r\n                <p className=\"color-gray\">Hit the Upload button to update your About Me bbCode.</p>\r\n                <div className=\"submit-btn-container\">\r\n                    <CyberButton classNames={'btn-contained-success'} variant={'contained'}\r\n                                 onClick={this.props.submitAboutMe}>\r\n                        Upload\r\n                    </CyberButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"available-tags box-light\">\r\n                <h2>Special tags</h2>\r\n                <p><span className=\"tag-color\">[animestats][/animestats]</span> - <span className=\"color-gray\">Displays Anime Stats</span></p>\r\n                <p><span className=\"tag-color\">[mangastats][/mangastats]</span> - <span className=\"color-gray\">Displays Manga Stats</span></p>\r\n                <p><span className=\"color-gray\">Available attributes</span> - <span className=\"tag-color\">width=0-100/0-100%</span></p>\r\n                <br/>\r\n                <p><span className=\"tag-color\">[favoriteanime][/favoriteanime]</span> - <span className=\"color-gray\">Displays Favorite Anime</span></p>\r\n                <p><span className=\"tag-color\">[favoritemanga][/favoritemanga]</span> - <span className=\"color-gray\">Displays Favorite Manga</span></p>\r\n                <p><span className=\"tag-color\">[favoritecharacters][/favoritecharacters]</span> - <span className=\"color-gray\">Displays Favorite Characters</span></p>\r\n                <p><span className=\"tag-color\">[favoritepeople][/favoritepeople]</span> - <span className=\"color-gray\">Displays Favorite People</span></p>\r\n                <p><span className=\"color-gray\">Available attributes</span> - <span className=\"tag-color\">width=0-100/0-100%, center=true/false, small=true <span className=\"color-gray\">(Makes cards small)</span>, limit=0-100 <span className=\"color-gray\">(limits how many cards will show up)</span></span></p>\r\n            </div>\r\n\r\n            <div className=\"available-tags box-light\">\r\n                <h2>Available tags</h2>\r\n                <p><span className=\"tag-color\">[br][/br]</span> - <span className=\"color-gray\">Start in a new line</span></p>\r\n                <p><span className=\"tag-color\">[b]</span>Bold<span className=\"tag-color\">[/b]</span> - <span className=\"color-gray\"><b>Bold</b></span></p>\r\n                <p><span className=\"tag-color\">[i]</span>Italic<span className=\"tag-color\">[/i]</span> - <span className=\"color-gray\"><i>Italic</i></span></p>\r\n                <p><span className=\"tag-color\">[u]</span>Underline<span className=\"tag-color\">[/u]</span> - <span className=\"color-gray\"><u>Underline</u></span></p>\r\n                <p><span className=\"tag-color\">[s]</span>Strikethrough<span className=\"tag-color\">[/s]</span> - <span className=\"color-gray\"><s>Strikethrough</s></span></p>\r\n                <p><span className=\"tag-color\">[color=red]</span>Colored Text<span className=\"tag-color\">[/color]</span> - <span style={{color: 'red'}}>Colored Text</span></p>\r\n                <p><span className=\"tag-color\">[color=#ff0000]</span>Colored Text<span className=\"tag-color\">[/color]</span> - <span style={{color: '#ff0000'}}>Colored Text with HEX</span></p>\r\n                <p><span className=\"tag-color\">[size=30]</span>Bigger text<span className=\"tag-color\">[/size]</span> - <span className=\"color-gray\" style={{fontSize: 30}}>Bigger text</span></p>\r\n                <p><span className=\"tag-color\">[center]</span>Center<span className=\"tag-color\">[/center]</span> - <span className=\"color-gray\">Centers elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[left]</span>Left<span className=\"tag-color\">[/left]</span> - <span className=\"color-gray\">Left aligns elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[right]</span>Right<span className=\"tag-color\">[/right]</span> - <span className=\"color-gray\">Right aligns elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[quote]</span>quoted text<span className=\"tag-color\">[/quote]</span> - <span className=\"color-gray\">Quoted text</span></p>\r\n                <p><span className=\"tag-color\">[url]</span>https://cyber-genesis.rf.gd<span className=\"tag-color\">[/url]</span> - <a href=\"https://cyber-genesis.rf.gd\">https://cyber-genesis.rf.gd</a></p>\r\n                <p><span className=\"tag-color\">[url=https://cyber-genesis.rf.gd]</span>Name<span className=\"tag-color\">[/url]</span> - <a href=\"https://cyber-genesis.rf.gd\">Name</a></p>\r\n                <p><span className=\"tag-color\">[img]</span>https://i.imgur.com/WGEbacJ.jpg<span className=\"tag-color\">[/img]</span> - <span className=\"color-gray\">Image/Gif</span></p>\r\n                <p><span className=\"tag-color\">[img width=100% height=50]</span>https://i.imgur.com/WGEbacJ.jpg<span className=\"tag-color\">[/img]</span> - <span className=\"color-gray\">Image/Gif resized (in %/px)</span></p>\r\n                <p><span className=\"tag-color\">[list][*]</span>1<span className=\"tag-color\">[*]</span>2<span className=\"tag-color\">[/list]</span> - <span className=\"color-gray\">List of items</span></p>\r\n                <p><span className=\"tag-color\">[table][tr][td]</span>cell<span className=\"tag-color\">[/td][/tr][/table]</span> - <span className=\"color-gray\">Table of items</span></p>\r\n            </div>\r\n        </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BBCodeEditor)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {ColorPicker} from 'material-ui-color';\r\n\r\nimport '../../../../../assets/css/bbcode_editor.css'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport {CyberButton} from \"../../../../layout/common/common\";\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BackgroundEditorTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid contaienr className=\"editor-container box-light\">\r\n                <Grid item xs={12}>\r\n                    <p className=\"color-gray\">Background color</p>\r\n                    <ColorPicker\r\n                        onChange={(e) => {\r\n                            this.props.updateBackgroundImage(e, 'background_color')\r\n                        }}\r\n                        value={this.props.background_image.background_color}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid className=\"background-image-segment\" item xs={12}>\r\n                    <p className=\"color-gray\">Background image</p>\r\n                    <TextField\r\n                        id=\"Background-Image-Field\"\r\n                        label=\"Image URL\"\r\n                        className=\"form-control\"\r\n                        value={this.props.background_image.url}\r\n                        name=\"bbcode-editor\"\r\n                        onChange={(e) => {\r\n                            this.props.updateBackgroundImage(e, 'url')\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n\r\n                <Grid item xs={12}>\r\n                    <p className=\"color-gray\">Image options</p>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-repeat-label\">repeat</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-repeat-label\"\r\n                            id=\"select-repeat\"\r\n                            value={this.props.background_image.repeat}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'repeat')\r\n                            }}\r\n                            label=\"repeat\"\r\n                        >\r\n                            <MenuItem value={'no-repeat'}>no-repeat</MenuItem>\r\n                            <MenuItem value={'repeat'}>repeat</MenuItem>\r\n                            <MenuItem value={'repeat-x'}>repeat-x</MenuItem>\r\n                            <MenuItem value={'repeat-y'}>repeat-y</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-size-label\">size</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-size-label\"\r\n                            id=\"select-size\"\r\n                            value={this.props.background_image.size}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'size')\r\n                            }}\r\n                            label=\"size\"\r\n                        >\r\n                            <MenuItem value={'contain'}>contain</MenuItem>\r\n                            <MenuItem value={'cover'}>cover</MenuItem>\r\n                            <MenuItem value={'auto'}>auto</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-position-1-label\">position</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-position-1-label\"\r\n                            id=\"select-position-1\"\r\n                            value={this.props.background_image.position_1}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_1')\r\n                            }}\r\n                            label=\"position\"\r\n                        >\r\n                            <MenuItem value={'center'}>center</MenuItem>\r\n                            <MenuItem value={'left'}>left</MenuItem>\r\n                            <MenuItem value={'right'}>right</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-position-2-label\">position</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-position-2-label\"\r\n                            id=\"select-position-1\"\r\n                            value={this.props.background_image.position_2}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_2')\r\n                            }}\r\n                            label=\"position\"\r\n                        >\r\n                            <MenuItem value={'bottom'}>bottom</MenuItem>\r\n                            <MenuItem value={'center'}>center</MenuItem>\r\n                            <MenuItem value={'top'}>top</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl className=\"form-control\" variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"select-position-x-label\">position-x</InputLabel>\r\n                        <OutlinedInput\r\n                            id=\"select-position-x-label\"\r\n                            value={this.props.background_image.position_x}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_x')\r\n                            }}\r\n                            type=\"number\"\r\n                            endAdornment={<InputAdornment position=\"end\">px</InputAdornment>}\r\n                            aria-describedby=\"outlined-weight-helper-text\"\r\n                            inputProps={{\r\n                                'aria-label': 'position-x',\r\n                            }}\r\n                            labelWidth={0}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl className=\"form-control\" variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"select-position-y-label\">position-y</InputLabel>\r\n                        <OutlinedInput\r\n                            id=\"select-position-y-label\"\r\n                            value={this.props.background_image.position_y}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_y')\r\n                            }}\r\n                            type=\"number\"\r\n                            endAdornment={<InputAdornment position=\"end\">px</InputAdornment>}\r\n                            aria-describedby=\"outlined-weight-helper-text\"\r\n                            inputProps={{\r\n                                'aria-label': 'position-y',\r\n                            }}\r\n                            labelWidth={0}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-submit\" item xs={12}>\r\n                    <CyberButton variant={'contained'} classNames={'btn-contained-success'}\r\n                                 onClick={this.props.submitAboutMe}\r\n                    >\r\n                        Upload\r\n                    </CyberButton>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BackgroundEditorTab)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../../../../layout/sounds\";\r\nimport BBCodeEditorTab from \"./BBCodeEditorTab\";\r\nimport BackgroundEditorTab from \"./BackgroundEditorTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BBCodeEditorTabs(props) {\r\n    const {bbcode, background_image, updateEditor, updateBackgroundImage, submitAboutMe} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs\"\r\n                >\r\n                    <Tab label=\"bbCode\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"Background\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <BBCodeEditorTab\r\n                        bbcode={bbcode}\r\n                        background_image={background_image}\r\n                        updateEditor={updateEditor}\r\n                        updateBackgroundImage={updateBackgroundImage}\r\n                        submitAboutMe={submitAboutMe}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    <BackgroundEditorTab\r\n                        background_image={background_image}\r\n                        updateBackgroundImage={updateBackgroundImage}\r\n                        submitAboutMe={submitAboutMe}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport CyberNavbar from \"../../../layout/navbar/CyberNavbar\";\r\nimport {cyberBBCodeParser} from \"./parser\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {editUserAboutMeBackground, editUserAboutMeBBCode, getUserList} from \"../../../../actions/users\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport {BBCodeEditorTabs} from \"./tabs/bbCodeTabs\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {TEMPLATE_NONE_BACKGROUND} from \"./templates\";\r\n\r\nimport '../../../../assets/css/bbcode_editor.css'\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BBCodeEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateEditor = this.updateEditor.bind(this);\r\n        this.submitAboutMe = this.submitAboutMe.bind(this);\r\n        this.updateBackgroundImage = this.updateBackgroundImage.bind(this);\r\n\r\n        let background = TEMPLATE_NONE_BACKGROUND;\r\n        if (this.props.user[User.profile][Profile.about_section_background_style])\r\n            background = this.props.user[User.profile][Profile.about_section_background_style];\r\n\r\n        this.state = {\r\n            bbcode: this.props.user[User.profile][Profile.about_section_bbcode],\r\n            background_image: background,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'BBCode Editor';\r\n        window.scrollTo(0, 0);\r\n        this.props.getUserList(this.props.user[User.id]);\r\n        this.props.getUser(this.props.user[User.id]);\r\n    }\r\n\r\n    // componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //     if (prevProps.visited_user_loaded === false && this.props.visited_user_loaded)\r\n    //         if (this.props.visited_user[User.profile][Profile.about_section_background_style]) {\r\n    //             const background = JSON.parse(this.props.visited_user[User.profile][Profile.about_section_background_style]);\r\n    //             this.setState({background_image: background})\r\n    //         }\r\n    // }\r\n\r\n    updateEditor(e) {\r\n        this.setState({bbcode: e.target.value});\r\n    }\r\n\r\n    updateBackgroundImage(e, attribute) {\r\n        let bg_img = {};\r\n        Object.assign(bg_img, this.state.background_image);\r\n        if (attribute === 'background_color') bg_img[attribute] = e;\r\n        else if (attribute === 'all') Object.assign(bg_img, e);\r\n        else bg_img[attribute] = e.target.value;\r\n        this.setState({background_image: bg_img})\r\n    }\r\n\r\n    submitAboutMe() {\r\n        const bbcode = this.state.bbcode ? this.state.bbcode.replaceAll('\\n', '[br][/br]') : this.state.bbcode;\r\n        this.props.editUserAboutMeBBCode(bbcode);\r\n        this.props.editUserAboutMeBackground(this.state.background_image)\r\n    }\r\n\r\n    render() {\r\n        const bbcode = this.state.bbcode ? this.state.bbcode.replaceAll('\\n', '[br][/br]') : this.state.bbcode;\r\n        const style = {\r\n             backgroundColor: `#${this.state.background_image.background_color?.['hex']}`,\r\n             backgroundRepeat: this.state.background_image.repeat,\r\n             backgroundSize: this.state.background_image.size,\r\n             backgroundPosition: `${this.state.background_image.position_1} ${this.state.background_image.position_2}`,\r\n        };\r\n        if (this.state.background_image.url !== '')\r\n            style.backgroundImage = `url(\"${this.state.background_image.url}\")`;\r\n        if (this.state.background_image.position_x)\r\n            style.backgroundPositionX = `${this.state.background_image.position_x}px`;\r\n        if (this.state.background_image.position_y)\r\n            style.backgroundPositionY = `${this.state.background_image.position_y}px`;\r\n\r\n        console.log('style', style);\r\n        console.log('style', style);\r\n\r\n        return (<>\r\n            <CyberNavbar/>\r\n            {this.props.user_loading ? <Loading text={'Loading'}/> :\r\n                <Grid id=\"BBCode-Editor\" container>\r\n                    <Grid item xs={4} className=\"bbcode-editor-segment\">\r\n                        <BBCodeEditorTabs\r\n                            bbcode={bbcode}\r\n                            background_image={this.state.background_image}\r\n                            updateEditor={this.updateEditor}\r\n                            updateBackgroundImage={this.updateBackgroundImage}\r\n                            submitAboutMe={this.submitAboutMe}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className=\"bbcode-editor-segment\">\r\n                        <div id=\"BBCode_Container\" className=\"bbcode-container\" style={style}>\r\n                            {cyberBBCodeParser(bbcode)}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>}\r\n        </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    user_loaded: state.auth.user_loaded,\r\n    // visited_user: state.auth.visited_user,\r\n    // visited_user_loaded: state.auth.visited_user_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    editUserAboutMeBBCode, editUserAboutMeBackground, getUser, getUserList\r\n})(BBCodeEditor)\r\n","import React, {useState} from \"react\";\r\n\r\nimport moment from \"moment\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CircularProgress, Hidden} from \"@material-ui/core\";\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Countdown from \"react-countdown\";\r\nimport Moment from \"react-moment\";\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nimport {TARGET_ANIDB, TARGET_HENTAIGAMER, TARGET_MAL, TARGET_NYAA, TYPE_SCRAPE} from \"../../../globals\";\r\nimport {Report, Requiem, Target} from \"../../../models\";\r\nimport {useTheme} from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\n\r\nfunction getLogoFromTarget(target) {\r\n    switch (target) {\r\n        case TARGET_MAL:\r\n            return '/images/logos/mal_logo.png'\r\n        case TARGET_ANIDB:\r\n            return '/images/logos/anidb_logo.png'\r\n        case TARGET_HENTAIGAMER:\r\n            return '/images/logos/hentaigamer_logo.png'\r\n        case TARGET_NYAA:\r\n            return '/images/logos/nyaa_logo.png'\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\n\r\nfunction isScrapeUpToDate(last, threshold) {\r\n    if (last) {\r\n        const today = moment()\r\n        const prev = moment(last)\r\n        const diff = today.diff(prev, 'days')\r\n        return diff <= threshold\r\n    }\r\n    return false\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.report\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction FormatScraperProgress(props) {\r\n    const {report} = props;\r\n    let progress;\r\n\r\n    if (report === undefined)\r\n        return <CircularProgress color=\"secondary\"/>\r\n\r\n    if (report[Report.type] === TYPE_SCRAPE)\r\n        progress = <CircularProgressbar\r\n            className=\"scraper-progress\"\r\n            maxValue={report[Report.finish_threshold]}\r\n            minValue={0}\r\n            value={report[Report.progress]}\r\n            text={`${report[Report.progress]}/${report[Report.finish_threshold]}`}\r\n        />\r\n    else\r\n        progress = <CircularProgressbar\r\n            className=\"scraper-progress\"\r\n            value={report[Report.progress]}\r\n            text={`${report[Report.progress]}%`}\r\n        />\r\n\r\n    return report[Report.progress] ?\r\n        progress :\r\n        <CircularProgress color=\"secondary\"/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.requiem\r\n * @param {Object} props.target\r\n * @param {Array} props.active_reports\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TargetSummary(props) {\r\n    const {requiem, target, active_reports} = props\r\n    const logo_url = getLogoFromTarget(target[Target.target])\r\n    const scrape_up_to_date = isScrapeUpToDate(target[Target.last_scrape], requiem[Requiem.scrape_threshold]);\r\n    const seasonal_up_to_date = isScrapeUpToDate(target[Target.last_seasonal_update], requiem[Requiem.seasonal_threshold]);\r\n    const update_up_to_date = isScrapeUpToDate(target[Target.last_update], requiem[Requiem.update_threshold]);\r\n    const xsDown = useMediaQuery(useTheme().breakpoints.down('xs'));\r\n\r\n    let reports = {}\r\n    active_reports.forEach(report => (\r\n        reports[report[Report.active_target]] = report\r\n    ))\r\n\r\n    return <Grid item xs={12} sm={8} md={6} lg={4} xl={3} className=\"target-summary-card\">\r\n        <div className={target[Target.active] ? 'content-container' : 'content-container content-container-inactive'}>\r\n            <div className=\"title-container\">\r\n                <img src={logo_url} className=\"target-logo\"/>\r\n                <p className=\"target-name\">{target[Target.target]} - <span>{target[Target.branch]}</span></p>\r\n            </div>\r\n            <Grid container>\r\n                <Grid item xs={12} sm={target[Target.active] && reports[target[Target.id]] !== undefined ? 7 : 12}\r\n                      className=\"info-container\"\r\n                >\r\n                    <p className=\"margin-top-5\">\r\n                        <span>Status:</span> {target[Target.active] ?\r\n                        <span className=\"color-green\">Active</span> :\r\n                        <span className=\"color-gray\">Inactive</span>}\r\n                    </p>\r\n                    {target[Target.last_scrape] ? <p className=\"margin-top-5\">\r\n                        <span>Last Scrape:</span>{' '}\r\n                        <Moment format=\"Do MMM YYYY\" date={target[Target.last_scrape]}/>{' '}\r\n                        {scrape_up_to_date ?\r\n                            <FontAwesomeIcon icon={faCheck} className=\"color-green\" title={'Up to date'}/> :\r\n                            <FontAwesomeIcon icon={faTimes} className=\"color-danger\" title={'Not up to date'}/>}\r\n                    </p> : null}\r\n                    {target[Target.last_seasonal_update] ? <p>\r\n                        <span>Last Seasonal:</span>{' '}\r\n                        <Moment format=\"Do MMM YYYY\" date={target[Target.last_seasonal_update]}/>{' '}\r\n                        {seasonal_up_to_date ?\r\n                            <FontAwesomeIcon icon={faCheck} className=\"color-green\" title={'Up to date'}/> :\r\n                            <FontAwesomeIcon icon={faTimes} className=\"color-danger\" title={'Not up to date'}/>}\r\n                    </p> : null}\r\n                    {target[Target.last_update] ? <p>\r\n                        <span>Last Update:</span>{' '}\r\n                        <Moment format=\"Do MMM YYYY\" date={target[Target.last_update]}/>{' '}\r\n                        {update_up_to_date ?\r\n                            <FontAwesomeIcon icon={faCheck} className=\"color-green\" title={'Up to date'}/> :\r\n                            <FontAwesomeIcon icon={faTimes} className=\"color-danger\" title={'Not up to date'}/>}\r\n                    </p> : null}\r\n                </Grid>\r\n                {target[Target.active] && reports[target[Target.id]] !== undefined ?\r\n                    <Grid item xs={12} sm={5} className=\"chart-container\"\r\n                          style={xsDown ? {marginTop: '1rem'} : undefined}\r\n                    >\r\n                        <FormatScraperProgress report={reports[target[Target.id]]}/>\r\n                        <p>\r\n                            {reports[target[Target.id]]?.[Report.finished] ?\r\n                                <span className=\"color-secondary\">Finished</span> :\r\n                                reports[target[Target.id]]?.[Report.error] ?\r\n                                    <span className=\"color-danger\">Error</span> :\r\n                                    <span className=\"color-success\">Running..</span>}\r\n                        </p>\r\n                        {target[Target.type] ? <p><span>Type:</span> {target[Target.type]}</p> : null}\r\n                        {reports[target[Target.id]]?.[Report.eta_seconds] ?\r\n                            <p><span>ETA:</span> <Countdown\r\n                                date={Date.now() + (reports[target[Target.id]]?.[Report.eta_seconds] * 1000)} />\r\n                            </p> : null}\r\n                    </Grid> : null}\r\n                {target[Target.active] && reports[target[Target.id]]?.[Report.message] ?\r\n                    <Grid item xs={12} className=\"message-container\">\r\n                        <p title={reports[target[Target.id]]?.[Report.message]}>\r\n                            MSG: {reports[target[Target.id]]?.[Report.message]}\r\n                        </p>\r\n                    </Grid> : null}\r\n            </Grid>\r\n        </div>\r\n    </Grid>\r\n}\r\n","import React, {useState} from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport {SwipeableDrawer} from \"@material-ui/core\";\r\nimport {faDownload} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {SidePanelTabs} from \"./Components\";\r\n\r\n\r\n/**\r\n *\r\n * @param {JSX.Element} props.icon\r\n * @param {String} props.label\r\n * @param {String} props.selected_tab\r\n * @param {Function} props.setSelectedTab\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction SidePanelItem(props) {\r\n    const {icon, label, selected_tab, setSelectedTab} = props;\r\n    return <ListItem\r\n        button\r\n        onClick={() => setSelectedTab(label)}\r\n        className={selected_tab === label ? 'panel-item panel-item-active' : 'panel-item'}\r\n    >\r\n        <ListItemIcon>{icon}</ListItemIcon>\r\n        <ListItemText primary={label}/>\r\n    </ListItem>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {String} props.selected_tab\r\n * @param {Function} props.setSelectedTab\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function RequiemDrawer(props) {\r\n    const {selected_tab, setSelectedTab} = props;\r\n    const [open, setOpen] = useState(true);\r\n\r\n    // noinspection HtmlUnknownTarget\r\n    return <React.Fragment>\r\n        <SwipeableDrawer\r\n            className=\"admin-drawer\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            variant=\"permanent\"\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n        >\r\n            <div role=\"presentation\">\r\n                <List>\r\n                    <img className=\"cr-logo\" src=\"/images/cyber-requiem-logo-magenta.png\"/>\r\n                </List>\r\n                <Divider/>\r\n                <List>\r\n                    <SidePanelItem\r\n                        icon={<DashboardIcon/>}\r\n                        label={SidePanelTabs.dashboard}\r\n                        selected_tab={selected_tab}\r\n                        setSelectedTab={setSelectedTab}\r\n                    />\r\n                    <SidePanelItem\r\n                        icon={<SystemUpdateAltIcon/>}\r\n                        label={SidePanelTabs.scrapers}\r\n                        selected_tab={selected_tab}\r\n                        setSelectedTab={setSelectedTab}\r\n                    />\r\n                    <SidePanelItem\r\n                        icon={<FontAwesomeIcon icon={faDownload} className=\"font-awesome-icon\"/>}\r\n                        label={SidePanelTabs.torrents}\r\n                        selected_tab={selected_tab}\r\n                        setSelectedTab={setSelectedTab}\r\n                    />\r\n                </List>\r\n                <Divider/>\r\n                <List>\r\n                    {/*<SidePanelItem*/}\r\n                    {/*    icon={<InboxIcon/>}*/}\r\n                    {/*    label={SidePanelTabs.dashboard}*/}\r\n                    {/*    selected_tab={selected_tab}*/}\r\n                    {/*    setSelectedTab={setSelectedTab}*/}\r\n                    {/*/>*/}\r\n                </List>\r\n            </div>\r\n        </SwipeableDrawer>\r\n    </React.Fragment>;\r\n}","import {useTheme} from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport RequiemDrawer from \"./Drawer\";\r\nimport {TargetSummary} from \"./ActiveScrapers\";\r\nimport React from \"react\";\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.requiem\r\n * @param {Array} props.targets\r\n * @param {Array} props.active_reports\r\n * @param {Number} props.active_reports_refresh_timeout\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function Dashboard(props) {\r\n    const theme = useTheme();\r\n    const smDown = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    return <>\r\n        <Grid item xs={12} className=\"welcome-container\">\r\n            <h5>Welcome to Cyber-Requiem</h5>\r\n            <p><span>Timeout:</span> {props.active_reports_refresh_timeout / 1000} <span>seconds</span></p>\r\n        </Grid>\r\n        <Grid item xs={12} className=\"main-container\">\r\n            <Grid container justify={smDown ? 'center' : undefined}>\r\n                {props.targets.map(target => <TargetSummary\r\n                    requiem={props.requiem}\r\n                    target={target}\r\n                    active_reports={props.active_reports}\r\n                />)}\r\n            </Grid>\r\n        </Grid>\r\n    </>\r\n}","import React, {Component, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown,\r\n    faClock,\r\n    faDownload,\r\n    faHdd,\r\n    faPuzzlePiece,\r\n    faUpload,\r\n    faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {getActiveTorrentsProgress, getStorageInfo} from \"../../../actions/requiem\";\r\nimport {Anime, AnimeOnServer, ApiResult, StorageDisk} from \"../../../models\";\r\nimport {LinearProgress, TableCell} from \"@material-ui/core\";\r\nimport {getBytesToSize, TorrentProgressInfo} from \"../snippets/snippets\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {getPendingAnimeServerInfos} from \"../../../actions/anime\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME, LANGUAGES} from \"../../../globals\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {\r\n    AdminEditAnimeOnServerButton,\r\n    ApproveAnimeOnServerButton,\r\n    DeleteAnimeOnServerButton,\r\n    OpenAnimeFolderButton\r\n} from \"../forms/forms\";\r\nimport {AnimeOnServerModalForm} from \"../forms/forms\";\r\nimport {GET_PENDING_ANIME_SERVER_INFO} from \"../../../actions/types\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles} from \"../../browse/functions\";\r\n\r\n\r\nexport class TorrentFilter {\r\n    static _name = 'name';\r\n    static size = 'size';\r\n    static dl_speed = 'dl_speed';\r\n    static up_speed = 'up_speed';\r\n    static remaining = 'remaining';\r\n    static seeds = 'seeds';\r\n    static leeches = 'leechs';\r\n    static eta = 'eta';\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.storage\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction StorageContainer(props) {\r\n    const {storage} = props;\r\n\r\n    let progress = ((storage[StorageDisk.used] / (1024 * 1024.0 * 1024.0)).toFixed(2) /\r\n        (storage[StorageDisk.total] / (1024 * 1024.0 * 1024.0)).toFixed(2)).toFixed(3) * 100;\r\n\r\n    return <Grid item xs={12} md={4} lg={3} xl={2} className=\"storage-container\">\r\n        <div className=\"inner-container\">\r\n            <FontAwesomeIcon icon={faHdd} className={storage[StorageDisk.active] ?\r\n                progress < 90 ? 'storage-icon' : 'storage-icon-low-space' : 'storage-icon-inactive'}/>\r\n            <p className=\"letter\">{storage[StorageDisk.letter]}: {storage[StorageDisk.active] ?\r\n                <span className=\"color-success\">Running</span> :\r\n                <span className=\"color-danger\">Inactive</span>}\r\n            </p>\r\n\r\n            <LinearProgress className={progress < 90 ? 'storage-progress-secondary' : 'storage-progress-danger'}\r\n                            variant=\"determinate\" value={progress}/>\r\n            <p className=\"total-size\">\r\n                {getBytesToSize(storage[StorageDisk.free])} <span className=\"color-gray\">free of</span>{' '}\r\n                {getBytesToSize(storage[StorageDisk.total])}\r\n            </p>\r\n        </div>\r\n    </Grid>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.torrent_filters\r\n * @param {Object} props.filters_key\r\n * @param {JSX.Element} props.icon\r\n * @param {String} props.btn_classname\r\n * @param {Function} props.setTorrentFilters\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction TorrentClientFilterButton(props) {\r\n    const [value, setValue] = useState(false)\r\n\r\n    return <CyberButton\r\n        classNames={props.torrent_filters[props.filters_key] ? 'btn-contained-secondary' : undefined}\r\n        variant={props.torrent_filters[props.filters_key] ? 'contained' : undefined}\r\n        onClick={() =>\r\n            props.setTorrentFilters(\r\n                {...props.torrent_filters, [props.filters_key]: !props.torrent_filters[props.filters_key]}\r\n            )}\r\n    >\r\n        <FontAwesomeIcon icon={props.icon} className={props.btn_classname}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Array} props.active_torrents\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction ActiveTorrents(props) {\r\n    const {active_torrents} = props;\r\n    const default_filters = {\r\n        [TorrentFilter._name]: false,\r\n        [TorrentFilter.size]: true,\r\n        [TorrentFilter.dl_speed]: true,\r\n        [TorrentFilter.up_speed]: true,\r\n        [TorrentFilter.remaining]: true,\r\n        [TorrentFilter.seeds]: true,\r\n        [TorrentFilter.leeches]: true,\r\n        [TorrentFilter.eta]: true\r\n    };\r\n    const [torrent_filters, setTorrentFilters] = useState(default_filters)\r\n\r\n    return <>\r\n        <Grid item xs={12} className=\"torrent-btn-group\">\r\n            <TorrentClientFilterButton\r\n                torrent_filters={torrent_filters}\r\n                filters_key={TorrentFilter.size}\r\n                icon={faHdd}\r\n                setTorrentFilters={setTorrentFilters}\r\n            />\r\n            <TorrentClientFilterButton\r\n                torrent_filters={torrent_filters}\r\n                filters_key={TorrentFilter.dl_speed}\r\n                icon={faDownload}\r\n                setTorrentFilters={setTorrentFilters}\r\n            />\r\n            <TorrentClientFilterButton\r\n                torrent_filters={torrent_filters}\r\n                filters_key={TorrentFilter.up_speed}\r\n                icon={faUpload}\r\n                setTorrentFilters={setTorrentFilters}\r\n            />\r\n            <TorrentClientFilterButton\r\n                torrent_filters={torrent_filters}\r\n                filters_key={TorrentFilter.remaining}\r\n                icon={faPuzzlePiece}\r\n                setTorrentFilters={setTorrentFilters}\r\n            />\r\n            <TorrentClientFilterButton\r\n                torrent_filters={torrent_filters}\r\n                filters_key={TorrentFilter.leeches}\r\n                icon={faUsers}\r\n                setTorrentFilters={setTorrentFilters}\r\n                btn_classname={'color-success'}\r\n            />\r\n            <TorrentClientFilterButton\r\n                torrent_filters={torrent_filters}\r\n                filters_key={TorrentFilter.seeds}\r\n                icon={faUsers}\r\n                setTorrentFilters={setTorrentFilters}\r\n                btn_classname={'color-danger'}\r\n            />\r\n            <TorrentClientFilterButton\r\n                torrent_filters={torrent_filters}\r\n                filters_key={TorrentFilter.eta}\r\n                icon={faClock}\r\n                setTorrentFilters={setTorrentFilters}\r\n            />\r\n        </Grid>\r\n        <Grid item xs={12} lg={6} xl={4} className=\"active-torrents-container\">\r\n            {active_torrents.map(torrent => <TorrentProgressInfo torrent={torrent} filters={torrent_filters}/>)}\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n\r\nfunction checkIfAllSharedTitlesAreApproved(titles) {\r\n    for (let x = 0; x < titles.length; x++)\r\n        if (!titles[x][Anime.anime_on_server][AnimeOnServer.approved])\r\n            return false\r\n    return true\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.pending_anime\r\n * @param {Function} props.getPendingAnimeServerInfos\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction PendingAnime(props) {\r\n    const {pending_anime} = props\r\n    const [current_page, setCurrentPage] = useState(1)\r\n    const [items_per_page, setItemsPerPage] = useState(5)\r\n    const [page_dialog_open, setPageDialogOpen] = useState(false)\r\n\r\n    if (isEmpty(pending_anime))\r\n        return null\r\n\r\n    const goToPage = (page) => {\r\n        if (page > 0 && page <= Math.ceil(pending_anime[ApiResult.count] / items_per_page)) {\r\n            window.scrollTo(0, 0);\r\n            setCurrentPage(page);\r\n            props.getPendingAnimeServerInfos(page)\r\n        }\r\n    }\r\n\r\n    return <> {pending_anime[ApiResult.results]?.map(server_info => <Grid item xs={12} lg={6} xl={4}\r\n                                                                      className=\"pending-container\">\r\n            <div className=\"pending-inner-container\">\r\n                <div className=\"title-wrapper\">\r\n                    <TitleCard\r\n                        branch={BRANCH_ANIME}\r\n                        title={server_info[AnimeOnServer.anime]}\r\n                        mini={true}\r\n                    />\r\n                </div>\r\n                <div className=\"info-wrapper\">\r\n                    <Table aria-label=\"pending table\">\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell component=\"th\" scope=\"row\">Location:</TableCell>\r\n                                <TableCell align=\"right\">{server_info[AnimeOnServer.location]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell component=\"th\" scope=\"row\">Size:</TableCell>\r\n                                <TableCell align=\"right\">{server_info[AnimeOnServer.size_on_HDD_GB]}GB</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell component=\"th\" scope=\"row\">Video:</TableCell>\r\n                                <TableCell align=\"right\">{server_info[AnimeOnServer.video_quality]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell component=\"th\" scope=\"row\">Audio:</TableCell>\r\n                                <TableCell align=\"right\">{server_info[AnimeOnServer.audio_channel]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell component=\"th\" scope=\"row\">Dubs:</TableCell>\r\n                                <TableCell align=\"right\">{LANGUAGES.map(language => (\r\n                                    server_info[language.toLowerCase() + '_dub'] ? <Chip\r\n                                        key={server_info[AnimeOnServer.anime]?.[Anime.id]} variant=\"default\" size=\"small\"\r\n                                        className=\"chip-secondary\"\r\n                                        label={language}\r\n                                    /> : null\r\n                                ))}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell component=\"th\" scope=\"row\">Subs:</TableCell>\r\n                                <TableCell align=\"right\">{LANGUAGES.map(language => (\r\n                                    server_info[language.toLowerCase() + '_sub'] ? <Chip\r\n                                        key={server_info[AnimeOnServer.anime]?.[Anime.id]} variant=\"default\" size=\"small\"\r\n                                        className=\"chip-secondary\"\r\n                                        label={language}\r\n                                    /> : null\r\n                                ))}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell component=\"th\" scope=\"row\">Notes:</TableCell>\r\n                                <TableCell align=\"right\">{server_info[AnimeOnServer.additional_info] ?\r\n                                    server_info[AnimeOnServer.additional_info] : <span className=\"color-gray\">No</span>}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            {server_info[AnimeOnServer.shared_torrent_with].length > 0 ? null : <TableRow>\r\n                                <TableCell component=\"th\" scope=\"row\">Shares:</TableCell>\r\n                                <TableCell align=\"right\" className=\"color-gray\">No</TableCell>\r\n                            </TableRow>}\r\n                        </TableBody>\r\n                    </Table>\r\n                </div>\r\n                <div className=\"title-btn-container\">\r\n                    <DeleteAnimeOnServerButton id={server_info[AnimeOnServer.anime][Anime.id]}/>\r\n                    <OpenAnimeFolderButton id={server_info[AnimeOnServer.anime][Anime.id]}/>\r\n                    <AnimeOnServerModalForm\r\n                        id={server_info[AnimeOnServer.anime][Anime.id]} edit={true}\r\n                        alternative_callback={GET_PENDING_ANIME_SERVER_INFO}\r\n                    />\r\n                    <AdminEditAnimeOnServerButton id={server_info[AnimeOnServer.anime][Anime.id]}/>\r\n                    {checkIfAllSharedTitlesAreApproved(server_info[AnimeOnServer.shared_torrent_with]) ?\r\n                        <ApproveAnimeOnServerButton\r\n                            id={server_info[AnimeOnServer.anime][Anime.id]}\r\n                            alternative_callback={GET_PENDING_ANIME_SERVER_INFO}\r\n                        /> : null}\r\n                </div>\r\n                {server_info[AnimeOnServer.shared_torrent_with].length > 0 ? <div className=\"shared-titles-container\">\r\n                    <p>Shared anime</p>\r\n                    <Table aria-label=\"pending table\">\r\n                        <TableBody>\r\n                            {server_info[AnimeOnServer.shared_torrent_with].map(anime => (\r\n                                <SharedTitle anime={anime}/>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </div> : null}\r\n            </div>\r\n        </Grid>)}\r\n        <div className=\"pagination\">\r\n            <Pagination\r\n                count={Math.ceil(pending_anime[ApiResult.count] / items_per_page)}\r\n                color=\"primary\"\r\n                siblingCount={3}\r\n                page={current_page}\r\n                onChange={(type, page) => {\r\n                    playClickSound();\r\n                    if (page !== current_page) goToPage(page);\r\n                    else setPageDialogOpen(true)\r\n                }}\r\n            />\r\n            <GoToPageDialog\r\n                open={page_dialog_open}\r\n                current_page={current_page}\r\n                total_pages={Math.ceil(pending_anime[ApiResult.count] / items_per_page)}\r\n                goToPage={goToPage}\r\n                onClose={() => setPageDialogOpen(false)}/>\r\n        </div>\r\n    </>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction SharedTitle(props) {\r\n    const {anime} = props\r\n    const [expand, setExpand] = useState(false)\r\n\r\n    return <TableRow>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n            <TitleCard\r\n                branch={BRANCH_ANIME}\r\n                title={anime}\r\n                mini={true}\r\n            />\r\n        </TableCell>\r\n        <TableCell align=\"center\" className=\"title-btn-container\">\r\n            {anime[Anime.anime_on_server][AnimeOnServer.approved] ? <p className=\"color-success\">Approved</p> :\r\n                <p className=\"color-danger\">Pending Approval</p>}\r\n            <DeleteAnimeOnServerButton id={anime[Anime.id]}/>\r\n            <OpenAnimeFolderButton id={anime[Anime.id]}/>\r\n            <AnimeOnServerModalForm\r\n                id={anime[Anime.id]} edit={true}\r\n                alternative_callback={GET_PENDING_ANIME_SERVER_INFO}\r\n            />\r\n            <AdminEditAnimeOnServerButton id={anime[Anime.id]}/>\r\n            {!anime[Anime.anime_on_server][AnimeOnServer.approved] ? <ApproveAnimeOnServerButton\r\n                id={anime[Anime.id]}\r\n                alternative_callback={GET_PENDING_ANIME_SERVER_INFO}\r\n            /> : null}\r\n        </TableCell>\r\n    </TableRow>\r\n}\r\n\r\n\r\nfunction getTotalSizeAndFreeSpace(storage) {\r\n    let total_size = 0;\r\n    let total_free = 0;\r\n    let anime_size = 0;\r\n    let anime_free = 0;\r\n\r\n    for (let x = 0; x < storage?.length; x++) {\r\n        total_size += storage[x][StorageDisk.total];\r\n        total_free += storage[x][StorageDisk.free];\r\n        if (storage[x][StorageDisk.branch] === BRANCH_ANIME) {\r\n            anime_size += storage[x][StorageDisk.total];\r\n            anime_free += storage[x][StorageDisk.free];\r\n        }\r\n    }\r\n\r\n    return [total_size, total_free, anime_size, anime_free]\r\n}\r\n\r\n\r\nexport class Torrents extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            get_active_torrents_interval: undefined\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        this.props.getStorageInfo()\r\n        this.props.getPendingAnimeServerInfos()\r\n        this.props.getActiveTorrentsProgress()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.get_active_torrents_interval === undefined)\r\n            if (this.props.active_torrents.length > 0) {\r\n                const interval = setInterval(this.props.getActiveTorrentsProgress, 2000);\r\n                this.setState({get_active_torrents_interval: interval})\r\n            }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.get_active_torrents_interval !== undefined)\r\n            clearInterval(this.state.get_active_torrents_interval)\r\n    }\r\n\r\n    render() {\r\n        const [total_size, total_free, anime_size, anime_free] = getTotalSizeAndFreeSpace(this.props.storage);\r\n\r\n        return <Grid container xs={12} id=\"Torrents\">\r\n            <Grid item xs={12} className=\"title-container\">\r\n                <p>Storage Status</p>\r\n                <p><span className=\"color-gray\">Storage:</span> {getBytesToSize(total_free)} free\r\n                    of {getBytesToSize(total_size)}{' '}\r\n                    <span className=\"color-gray\">Anime:</span> {getBytesToSize(anime_free)} free\r\n                    of {getBytesToSize(anime_size)}</p>\r\n            </Grid>\r\n            {this.props.storage.map(storage => <StorageContainer\r\n                storage={storage}\r\n            />)}\r\n            <Grid item xs={12} className=\"title-container\">\r\n                <p>{this.props.active_torrents.length > 0 ? 'Active Torrents' : 'No Active Torrents'}</p>\r\n            </Grid>\r\n            {this.props.active_torrents.length > 0 ?\r\n                <ActiveTorrents active_torrents={this.props.active_torrents}/> : null}\r\n            <Grid item xs={12} className=\"title-container\">\r\n                <p>\r\n                    Pending Approval <span className=\"color-gray\">\r\n                    ({this.props.pending_anime_server_infos[ApiResult.count]})</span>\r\n                </p>\r\n            </Grid>\r\n            {this.props.anime_loading ? <Grid item xs={12} className=\"text-center\"><Loading block={true}/></Grid> :\r\n                <PendingAnime pending_anime={this.props.pending_anime_server_infos}\r\n                              getPendingAnimeServerInfos={this.props.getPendingAnimeServerInfos}\r\n                />}\r\n        </Grid>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    storage: state.requiem.storage,\r\n    active_torrents: state.requiem.active_torrents,\r\n    anime_loading: state.anime.anime_loading,\r\n    pending_anime_server_infos: state.anime.pending_anime_server_infos,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getStorageInfo,\r\n    getActiveTorrentsProgress,\r\n    getPendingAnimeServerInfos\r\n})(Torrents)\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\nimport {HOME} from \"../../../urls\";\r\nimport React, {useState} from \"react\";\r\nimport {TargetSummary} from \"./ActiveScrapers\";\r\nimport {useTheme} from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport MiniDrawer from \"./Drawer\";\r\nimport SwipeableTemporaryDrawer from \"./Drawer\";\r\nimport RequiemDrawer from \"./Drawer\";\r\nimport {Dashboard} from \"./Dashboard\";\r\nimport Torrents from \"./Torrents\";\r\n\r\nexport class SidePanelTabs {\r\n    static dashboard = 'Dashboard';\r\n    static scrapers = 'Scrapers';\r\n    static torrents = 'Torrents';\r\n}\r\n\r\n\r\n// noinspection HtmlUnknownTarget\r\nexport const GuestView = <Grid container className=\"not-authorized-container\" justify=\"center\">\r\n    <Grid item xs={10} sm={6} md={4} lg={4} xl={3} className=\"not-authorized\">\r\n        <div className=\"box-light\">\r\n            <img src=\"/images/cyber-administration-logo.png\"/>\r\n            <h5>Only members of the <i>Cyber-Administration</i> group can access the Requiem system.</h5>\r\n            <CyberLink to={HOME}>Home</CyberLink>\r\n        </div>\r\n    </Grid>\r\n</Grid>\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.requiem\r\n * @param {Array} props.targets\r\n * @param {Array} props.active_reports\r\n * @param {Number} props.active_reports_refresh_timeout\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AdminView(props) {\r\n    const [selected_tab, setSelectedTab] = useState(SidePanelTabs.dashboard);\r\n\r\n    return <Grid container className=\"authorized-container\">\r\n        <RequiemDrawer selected_tab={selected_tab} setSelectedTab={setSelectedTab}/>\r\n        {selected_tab === SidePanelTabs.dashboard ? <Dashboard\r\n            requiem={props.requiem}\r\n            targets={props.targets}\r\n            active_reports={props.active_reports}\r\n            active_reports_refresh_timeout={props.active_reports_refresh_timeout}\r\n        /> : null}\r\n        {selected_tab === SidePanelTabs.torrents ? <Torrents/> : null}\r\n    </Grid>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {getRequiem, getScrapersProgress, getTargets} from \"../../../actions/requiem\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/requiem.css'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {HOME} from \"../../../urls\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\nimport {Report, Target} from \"../../../models\";\r\nimport {TargetSummary} from \"./ActiveScrapers\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {AdminView, GuestView} from \"./Components\";\r\n\r\n\r\nfunction getTimeoutFromReports(targets, active_reports) {\r\n    let reports = {}\r\n    let count = 0\r\n    active_reports.forEach(report => (\r\n        reports[report[Report.active_target]] = report\r\n    ))\r\n    targets.forEach(target => {\r\n        if (target[Target.active] && target[Target.active_scrape])\r\n            if (reports[target[Target.id]]?.[Report.error] === false && reports[target[Target.id]]?.[Report.finished] === false)\r\n                count += 1\r\n    })\r\n    if (count === 0)\r\n        count = 1\r\n    return count * 10000\r\n}\r\n\r\n\r\nclass RequiemHome extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            get_scrapers_progress_interval: undefined,\r\n            timeout: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber Requiem';\r\n        window.scrollTo(0, 0);\r\n        if (this.props.user.is_superuser) {\r\n            this.props.getRequiem()\r\n            this.props.getTargets()\r\n            this.props.getScrapersProgress()\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.get_scrapers_progress_interval === undefined) {\r\n            /**\r\n             * Initialize Interval for fetching active reports, with dynamic timout\r\n             */\r\n            if (this.props.active_reports.length > 0 && this.props.targets.length > 0) {\r\n                const timeout = getTimeoutFromReports(this.props.targets, this.props.active_reports)\r\n                const interval = setInterval(this.props.getScrapersProgress, timeout);\r\n                this.setState({get_scrapers_progress_interval: interval, timeout: timeout})\r\n            }\r\n        } else {\r\n            /**\r\n             * Check if the number of active scrapers has changed, and update the Interval timeout\r\n             */\r\n            const timeout = getTimeoutFromReports(this.props.targets, this.props.active_reports)\r\n            if (prevState.timeout !== timeout) {\r\n                clearInterval(this.state.get_scrapers_progress_interval)\r\n                const interval = setInterval(this.props.getScrapersProgress, timeout);\r\n                this.setState({get_scrapers_progress_interval: interval, timeout: timeout})\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.get_scrapers_progress_interval !== undefined)\r\n            clearInterval(this.state.get_scrapers_progress_interval)\r\n    }\r\n\r\n    render() {\r\n        // noinspection HtmlUnknownTarget\r\n        return <div id=\"Requiem\">\r\n            <CyberNavbar classNames={this.props.user.is_superuser ? 'padded-navbar' : undefined}/>\r\n            {this.props.user.is_superuser ? <AdminView\r\n                requiem={this.props.requiem}\r\n                targets={this.props.targets}\r\n                active_reports={this.props.active_reports}\r\n                active_reports_refresh_timeout={this.state.timeout}\r\n            /> : GuestView}\r\n            {this.props.user.is_superuser ? <CyberFooter/> : null}\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    requiem_is_loading: state.requiem.requiem_is_loading,\r\n    requiem: state.requiem.requiem,\r\n    targets: state.requiem.targets,\r\n    active_reports: state.requiem.active_reports,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRequiem, getTargets, getScrapersProgress})(RequiemHome)\r\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\n// noinspection ES6CheckImport\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\n\nimport Home from \"./home/Home\";\n\nimport 'fontsource-roboto';\nimport {\n    ANIME_BROWSE,\n    ANIME_FRANCHISES,\n    ANIME_HOME,\n    ANIME_SEASONS,\n    HOME,\n    LOGIN,\n    MANGA_BROWSE,\n    MANGA_FRANCHISES,\n    MANGA_HOME,\n    MANGA_SEASONS,\n    PROFILE,\n    REGISTER,\n    INDEX,\n    NOT_FOUND,\n    ANIME_DISPLAY,\n    MANGA_DISPLAY,\n    CHARACTERS_HOME,\n    CHARACTERS_BROWSE,\n    CHARACTERS_DISPLAY,\n    EROGE_HOME,\n    EROGE_BROWSE,\n    EROGE_DISPLAY,\n    ANIME_SEASON_DISPLAY,\n    SETTINGS,\n    MANGA_SEASON_DISPLAY,\n    USER_ANIME_LIST,\n    USER_MANGA_LIST,\n    USER_EROGE_LIST,\n    USER_ANIME_STATISTICS,\n    USER_ANIME_HISTORY,\n    USER_MANGA_HISTORY,\n    ANIME_FRANCHISE_DISPLAY,\n    PEOPLE_HOME,\n    PEOPLE_BROWSE,\n    PERSON_DISPLAY,\n    USER_ACHIEVEMENTS,\n    BBCODE_EDITOR,\n    REQUIEM,\n    REQUIEM_HOME\n} from \"../urls\";\n\nimport store from '../store'\nimport {authUser, setRedirectUrl} from \"../actions/auth\";\nimport {loadSounds} from \"./layout/sounds\";\nimport AnimeHome from \"./anime/home/AnimeHome\";\nimport Login from \"./auth/Login\";\nimport Register from \"./auth/Register\";\nimport AnimeBrowse from \"./anime/browse/AnimeBrowse\";\nimport Index from \"./index/Index\";\nimport Profile from \"./user/profile/Profile\";\nimport Settings from \"./user/settings/Settings\";\nimport MangaBrowse from \"./manga/browse/MangaBrowse\";\nimport AnimeDisplay from \"./anime/display/AnimeDisplay\";\nimport MangaDisplay from \"./manga/display/MangaDisplay\";\nimport CharactersBrowse from \"./characters/browse/CharactersBrowse\";\nimport CharacterDisplay from \"./characters/display/CharacterDisplay\";\nimport ErogeBrowse from \"./eroge/browse/ErogeBrowse\";\nimport ErogeDisplay from \"./eroge/display/ErogeDisplay\";\nimport BrowseAnimeSeasons from \"./anime/seasons/BrowseAnimeSeasons\";\nimport BrowseMangaSeasons from \"./manga/seasons/BrowseMangaSeasons\";\nimport NotFound from \"./layout/404/404\";\nimport Alerts from \"./layout/alerts/Alerts\";\nimport DisplaySeason from \"./seasons/DisplaySeason\";\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../globals\";\nimport AnimeList from \"./user/user_list/anime/AnimeList\";\nimport Statistics from \"./user/statistics/Statistics\";\nimport History from \"./user/history/History\";\nimport {LoadGifs} from \"./layout/common/common\";\nimport MangaList from \"./user/user_list/manga/MangaList\";\nimport DisplayFranchise from \"./franchises/display/DisplayFranchise\";\nimport Loading from \"./layout/common/Loading\";\nimport MangaHome from \"./manga/home/MangaHome\";\nimport CharactersHome from \"./characters/home/CharactersHome\";\nimport ErogeHome from \"./eroge/home/ErogeHome\";\nimport PeopleBrowse from \"./people/browse/PeopleBrowse\";\nimport PersonDisplay from \"./people/display/PersonDisplay\";\nimport BBCodeEditor from \"./user/settings/bbcode_editor/BBCodeEditor\";\nimport {setUserListDesignSettings, setUserTitleDisplaySettings} from \"../actions/users\";\nimport {User, Profile as ProfileModel} from \"../models\";\nimport RequiemHome from \"./requiem/home/Requiem\";\n\n\nfunction checkForRedirectUrl(host, pathname, url) {\n    if (pathname !== LOGIN && pathname !== REGISTER && pathname !== INDEX && pathname !== NOT_FOUND)\n        store.dispatch(setRedirectUrl(pathname))\n}\n\n\n// noinspection JSClassNamingConvention,JSCheckFunctionSignatures,JSVoidFunctionReturnValueUsed\nclass App extends Component {\n    componentDidMount() {\n        store.dispatch(authUser());\n        loadSounds();\n    }\n\n    render() {\n        const redirect_url = window.location.href;\n        const host = window.location.host;\n        const pathname = window.location.pathname;\n\n        if (this.props.user_authenticated) {\n            store.dispatch(setUserTitleDisplaySettings(\n                BRANCH_ANIME, this.props.user[User.profile][ProfileModel.user_anime_display_settings]));\n            store.dispatch(setUserTitleDisplaySettings(\n                BRANCH_MANGA, this.props.user[User.profile][ProfileModel.user_manga_display_settings]));\n            store.dispatch(setUserTitleDisplaySettings(\n                BRANCH_EROGE, this.props.user[User.profile][ProfileModel.user_eroge_display_settings]));\n\n            store.dispatch(setUserListDesignSettings(\n                BRANCH_ANIME, this.props.user[User.profile][ProfileModel.user_anime_list_design_settings]));\n            store.dispatch(setUserListDesignSettings(\n                BRANCH_MANGA, this.props.user[User.profile][ProfileModel.user_manga_list_design_settings]));\n        }\n\n        if (this.props.initial_auth)\n            return <Loading text={'Initializing...'}/>;\n        else return (\n            <BrowserRouter>\n                <Alerts/>\n                <LoadGifs/>\n                <Switch>\n                    <Route exact path={INDEX} component={Index}/>\n                    <Route exact path={LOGIN} component={Login}/>\n                    <Route exact path={REGISTER} component={Register}/>\n                    {!this.props.user_authenticated ? <>\n                        {checkForRedirectUrl(host, pathname, redirect_url)}\n                        <Redirect to={LOGIN}/>\n                    </> : null}\n                    <Route exact path={HOME} component={Home}/>\n\n                    <Route exact path={SETTINGS} component={Settings}/>\n                    <Route exact path={PROFILE()} component={Profile}/>\n                    <Route exact path={USER_ANIME_LIST()} component={AnimeList}/>\n                    <Route exact path={USER_MANGA_LIST()} component={MangaList}/>\n                    <Route exact path={USER_EROGE_LIST()} component={NotFound}/>\n                    <Route exact path={USER_ANIME_STATISTICS()} component={Statistics}/>\n                    <Route path={USER_ANIME_HISTORY()}\n                           render={(props) => <History {...props} branch={BRANCH_ANIME}/>}/>\n                    <Route path={USER_MANGA_HISTORY()}\n                           render={(props) => <History {...props} branch={BRANCH_MANGA}/>}/>\n\n                    <Route exact path={BBCODE_EDITOR} component={BBCodeEditor}/>\n\n                    <Route exact path={ANIME_HOME} component={AnimeHome}/>\n                    <Route exact path={ANIME_BROWSE} component={AnimeBrowse}/>\n                    <Route exact path={ANIME_SEASONS} component={BrowseAnimeSeasons}/>\n                    <Route exact path={ANIME_SEASON_DISPLAY()}\n                           render={(props) => <DisplaySeason {...props} branch={BRANCH_ANIME}/>}/>\n                    <Route exact path={ANIME_FRANCHISES} component={NotFound}/>\n                    <Route exact path={ANIME_FRANCHISE_DISPLAY()} component={DisplayFranchise}/>\n                    <Route exact path={ANIME_DISPLAY()} component={AnimeDisplay}/>\n\n                    <Route exact path={MANGA_HOME} component={MangaHome}/>\n                    <Route exact path={MANGA_BROWSE} component={MangaBrowse}/>\n                    <Route exact path={MANGA_SEASONS} component={BrowseMangaSeasons}/>\n                    <Route exact path={MANGA_SEASON_DISPLAY()}\n                           render={(props) => <DisplaySeason {...props} branch={BRANCH_MANGA}/>}/>\n                    <Route exact path={MANGA_FRANCHISES} component={NotFound}/>\n                    <Route exact path={MANGA_DISPLAY()} component={MangaDisplay}/>\n\n                    <Route exact path={CHARACTERS_HOME} component={CharactersHome}/>\n                    <Route exact path={CHARACTERS_BROWSE} component={CharactersBrowse}/>\n                    <Route exact path={CHARACTERS_DISPLAY()} component={CharacterDisplay}/>\n\n                    {/*<Route exact path={PEOPLE_HOME} component={CharactersHome}/>*/}\n                    <Route exact path={PEOPLE_BROWSE} component={PeopleBrowse}/>\n                    <Route exact path={PERSON_DISPLAY()} component={PersonDisplay}/>\n\n                    <Route exact path={EROGE_HOME} component={ErogeHome}/>\n                    <Route exact path={EROGE_BROWSE} component={ErogeBrowse}/>\n                    <Route exact path={EROGE_DISPLAY()} component={ErogeDisplay}/>\n\n                    <Route exact path={REQUIEM_HOME} component={RequiemHome}/>\n\n                    <Route exact path={NOT_FOUND} component={NotFound}/>\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    message: state.errors.message,\n    status: state.errors.status,\n    initial_auth: state.auth.initial_auth,\n    user: state.auth.user,\n    user_authenticated: state.auth.user_authenticated,\n});\n\nexport default connect(mapStateToProps, {})(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport reportWebVitals from './reportWebVitals';\n\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport {Provider as AlertProvider} from 'react-alert'\nimport yourRawTheme from './theme.json';\n\nimport {AlertOptions, MyAlertTemplate} from \"./components/layout/alerts/AlertTemplate\";\nimport App from './components/App';\n\nimport './index.css';\nimport './assets/css/cyber-ui.css';\n\nconst theme = createMuiTheme(yourRawTheme);\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <AlertProvider template={MyAlertTemplate} {...AlertOptions}>\n                    <App/>\n                </AlertProvider>\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import Alert from \"@material-ui/lab/Alert\";\r\nimport store from \"../../../store\";\r\nimport {cleanErrors, clearMessage} from \"../../../actions/messages\";\r\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const AlertOptions = {\r\n    timeout: 3000,\r\n    position: 'bottom left'\r\n};\r\n\r\nexport const MyAlertTemplate = ({style, options, message, close}) => (\r\n    <Alert severity={\r\n        options.type === 'error' ? 'error' :\r\n            options.type === 'success' ? 'success' : 'info'}\r\n           className=\"alert\"\r\n           onClose={close}>\r\n        <AlertTitle>{options.type}</AlertTitle>\r\n        <p>{message}</p>\r\n    </Alert>\r\n);"],"sourceRoot":""}