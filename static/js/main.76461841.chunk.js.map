{"version":3,"sources":["globals.js","actions/api_urls.js","actions/types.js","models.js","components/layout/sounds.jsx","reducers/anime.js","reducers/manga.js","actions/messages.js","actions/auth.js","components/layout/filters/field_names.js","actions/cookies.js","components/functions.js","actions/anime.js","actions/manga.js","actions/eroge.js","actions/users.js","reducers/auth.js","reducers/errors.js","reducers/characters.js","reducers/eroge.js","components/cookies/load_cookies.js","reducers/cookies.js","reducers/success.js","reducers/users.js","reducers/requiem.js","actions/characters.js","reducers/people.js","reducers/industry.js","reducers/index.js","store.js","reportWebVitals.js","urls.js","components/layout/navbar/menus.jsx","components/layout/navbar/CyberHeader.jsx","components/layout/navbar/CyberNavbar.jsx","components/layout/footer/CyberFooter.js","components/layout/common/Loading.js","components/layout/common/common.js","actions/people.js","actions/requiem.js","components/requiem/snippets/snippets.js","components/layout/pagination/goToPageDialog.js","components/requiem/snippets/News.js","components/home/functions.js","components/home/Home.js","components/anime/home/statistics.js","components/anime/home/AnimeStatistics.js","components/display/snippets.js","components/display/TabsRoot.js","components/user/forms/anime/AnimeEntryModalForm.js","components/display/Display.js","components/anime/display/tabs/GeneralTab.js","components/manga/display/tabs/GeneralTab.js","components/characters/display/tabs/GeneralTab.js","components/people/display/tabs/GeneralTab.js","components/eroge/display/tabs/GeneralTab.js","components/anime/display/tabs/CharactersTab.js","components/manga/display/tabs/CharactersTab.js","components/manga/display/tabs/RelationsTab.js","components/requiem/forms/DownloadTorrentForm.js","components/requiem/forms/EditAnimeOnServerModalForm.js","components/anime/display/tabs/ServerTab.js","components/user/forms/anime/UpdateAnimeEpisodeButton.js","components/user/forms/anime/AnimeEpisodeHistoryModal.js","components/user/forms/shortForms.js","components/user/forms/manga/forms.js","components/user/forms/manga/MangaEntryModalForm.js","components/user/forms/manga/UpdateMangaVolumeChapterButtons.js","components/user/forms/manga/MangaVolumeChapterHistoryModal.js","components/anime/display/tabs/RelationsTab.js","components/franchises/display/FranchiseTree.js","components/franchises/display/helpers.js","components/anime/display/tabs/FranchiseTab.js","components/requiem/forms/DownloadTorrentModalForm.js","components/requiem/snippets/DisplayTorrentProgress.js","components/people/display/tabs/VoiceActorRolesTab.js","components/people/display/tabs/AnimeStaffPositionsTab.js","components/people/display/tabs/PublishedMangaTab.js","components/display/functions.js","components/user/forms/anime/forms.js","components/layout/cards/CardUserEditTitleEntry.js","components/layout/cards/functions.js","components/layout/cards/TitleCard.js","components/anime/seasons/AnimeCurrentSeason.js","components/anime/home/tabs/TopAnimeTabs.js","components/anime/home/TopAnime.js","components/anime/home/AnimeHome.js","components/auth/functions.js","components/auth/LoginForm.js","components/auth/Login.js","components/auth/RegisterForm.js","components/auth/Register.js","components/layout/filters/functions.js","components/layout/filters/PresetFilters.js","components/layout/filters/UserBrowseDisplaySettings.js","components/layout/filters/TitlesFilter.js","components/layout/filters/anime/AnimeFilters.js","components/layout/filters/manga/MangaFilters.js","components/layout/filters/eroge/ErogeFilters.js","components/layout/filters/characters/CharactersFilters.js","components/layout/filters/people/PeopleFilters.js","components/browse/functions.js","components/layout/rows/TitleRow.js","components/layout/rows/functions.js","components/browse/utils.js","components/browse/Browse.js","components/anime/browse/AnimeBrowse.js","components/index/snippets.js","components/index/Index.js","components/user/statistics/statistics_snippets.js","components/user/statistics/favorites_snippets.js","components/user/settings/bbcode_editor/xbbcode.js","components/user/settings/bbcode_editor/parser.js","components/user/profile/tabs/AboutTab.js","components/user/profile/tabs/AnimeTab.js","components/user/profile/tabs/MangaTab.js","components/user/achievements/achievements.js","components/user/profile/tabs/AchievementsTab.js","components/user/profile/tabs/ProfileTabs.js","components/user/forms/UploadProfileImageButton.js","components/user/profile/Profile.js","components/user/settings/tabs/UserSettings.js","components/user/settings/tabs/ProfileSettings.js","components/user/forms/list_privacy/listPrivacyForms.js","components/user/settings/tabs/ListSettings.js","components/user/settings/tabs/SettingsTabs.js","components/user/settings/Settings.js","components/manga/browse/MangaBrowse.js","components/anime/display/AnimeDisplay.js","components/manga/display/MangaDisplay.js","components/characters/browse/CharactersBrowse.js","components/characters/display/CharacterDisplay.js","components/eroge/browse/ErogeBrowse.js","components/eroge/display/ErogeDisplay.js","components/seasons/functions.js","components/seasons/BrowseSeasons.js","components/anime/seasons/BrowseAnimeSeasons.js","components/manga/seasons/BrowseMangaSeasons.js","components/layout/404/404.js","components/layout/alerts/Alerts.js","components/seasons/DisplaySeason.js","components/user/user_list/functions.js","components/user/user_list/anime/tableView.js","components/user/user_list/manga/tableView.js","components/user/user_list/user_settings/userListDesignSettingsDialogFields.js","components/user/user_list/user_settings/user_list_settings_schema.js","components/user/user_list/user_settings/tabs/GeneralTab.js","components/user/user_list/user_settings/tabs/CoverImgTab.js","components/user/user_list/user_settings/tabs/BackgroundImgTab.js","components/user/user_list/user_settings/tabs/MessageTab.js","components/user/user_list/user_settings/tabs/ListTab.js","components/user/user_list/user_settings/tabs/userListDesignSettingsDialogTabs.js","components/user/user_list/user_settings/userListDesignSettings.js","components/user/user_list/utils.js","components/user/user_list/user_settings/settings_functions.js","components/user/user_list/UserList.js","components/user/user_list/PrivateList.js","components/user/user_list/anime/AnimeList.js","components/user/statistics/data_calculations.js","components/user/statistics/Statistics.js","components/user/history/DisplayUserHistory.js","components/user/history/History.js","components/user/user_list/manga/MangaList.js","components/franchises/display/DisplayFranchise.js","components/manga/home/tabs/TopMangaTabs.js","components/manga/home/TopManga.js","components/manga/home/MangaHome.js","components/characters/home/TopCharacters.js","components/characters/home/CharactersHome.js","actions/industry.js","components/eroge/home/tabs/TopErogeTabs.js","components/eroge/home/TopEroge.js","components/eroge/home/ErogeHome.js","components/people/browse/PeopleBrowse.js","components/people/display/PersonDisplay.js","components/user/settings/bbcode_editor/templates.js","components/user/settings/bbcode_editor/tabs/BBCodeEditorTab.js","components/user/settings/bbcode_editor/tabs/BackgroundEditorTab.js","components/user/settings/bbcode_editor/tabs/bbCodeTabs.js","components/user/settings/bbcode_editor/BBCodeEditor.js","components/App.js","index.js","components/layout/alerts/AlertTemplate.js"],"names":["CYBER_GENESIS_URL","store_reducers","window","location","host","store_reducer_users","store_reducer_cookies","BRANCH_ANIME","BRANCH_MANGA","BRANCH_EROGE","BRANCH_PEOPLE","BRANCH_CHARACTERS","TYPE_BROWSE","TYPE_LIST","TYPE_SEASON","LANGUAGES","FILTER_ANIME_INITIAL_VALUES","VALUES","search","downloaded","is_downloading","cannot_download","deleted_by_MAL","pending_by_MAL","anime_on_server__english_sub","anime_on_server__english_dub","anime_on_server__japanese_dub","anime_on_server__japanese_sub","episodes_range","length_range","genres","type","status","rating_short","video_quality","audio_channel","user_exclude","ordering","ANIME_ORDERINGS","USER_ANIME_ORDERINGS","ANIME_TYPES","ANIME_STATUSES","ANIME_RATING_SHORT","ANIME_VIDEO_QUALITIES","USER_ANIME_STATUSES_ARRAY","USER_MANGA_STATUSES_ARRAY","ANIME_AUDIO_CHANNELS","ANIME_GENRES","sort","USER_ANIME_STATUSES","USER_MANGA_STATUSES","FILTER_MANGA_INITIAL_VALUES","volumes_range","chapters_range","MANGA_ORDERINGS","USER_MANGA_ORDERINGS","MANGA_TYPES","MANGA_STATUSES","MANGA_GENRES","FILTER_EROGE_INITIAL_VALUES","platforms","language","censorship","tags","EROGE_ORDERINGS","EROGE_TYPES","EROGE_PLATFORMS","EROGE_CENSORSHIPS","EROGE_LANGUAGES","EROGE_TAGS","FILTER_CHARACTERS_INITIAL_VALUES","CHARACTERS_ORDERINGS","PEOPLE_ORDERINGS","BASE_URL","API_AUTH_USER","API_LOGIN","API_REGISTER","API_LOGOUT","API_GET_ALL_USERS","API_USER_ANIME_FILTERS_PRESET","API_USER_MANGA_FILTERS_PRESET","API_USER_EROGE_FILTERS_PRESET","API_CHANGE_USER_PROFILE_IMAGE","API_IMPORT_MAL_XML_FOR_ANIME_LIST","API_IMPORT_MAL_XML_FOR_MANGA_LIST","API_EDIT_USER_BIO","API_EDIT_USER_ABOUT_ME_BBCODE","API_EDIT_USER_ABOUT_ME_BACKGROUND","API_SCRAPE_EPISODE_HISTORY_FROM_MAL","API_CHANGE_CYBER_SOUND_STATUS","API_USER_ANIME_ENTRY_NOID","API_USER_MANGA_ENTRY_NOID","API_USER_ANIME_ENTRY_STATUSES","API_USER_MANGA_ENTRY_STATUSES","API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS","API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES","API_SET_ANIME_LIST_TO_PRIVATE","API_SET_ANIME_LIST_TO_PUBLIC","API_SET_ANIME_HISTORY_TO_PRIVATE","API_SET_ANIME_HISTORY_TO_PUBLIC","API_SET_MANGA_LIST_TO_PRIVATE","API_SET_MANGA_LIST_TO_PUBLIC","API_SET_MANGA_HISTORY_TO_PRIVATE","API_SET_MANGA_HISTORY_TO_PUBLIC","API_UPDATE_USER_ANIME_DISPLAY_SETTINGS","API_UPDATE_USER_ANIME_LIST_SETTINGS","API_UPDATE_USER_MANGA_DISPLAY_SETTINGS","API_UPDATE_USER_MANGA_LIST_SETTINGS","API_UPDATE_USER_EROGE_DISPLAY_SETTINGS","API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE","id","API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_ANIME_ENTRY","API_USER_MANGA_ENTRY","API_GET_ANIME_DATA","API_GET_ANIME_DATA_FOR_HOME_PAGE","API_GET_ANIME_DATA_WITH_STATISTICS","API_GET_ANIME_ACHIEVEMENT_THRESHOLDS","API_FILTER_ANIME","API_GET_MANGA_DATA","API_GET_MANGA_DATA_FOR_HOME_PAGE","API_FILTER_MANGA","API_FILTER_CHARACTERS","API_FILTER_PEOPLE","API_FILTER_EROGE","API_GET_EROGE_DATA_FOR_HOME_PAGE","API_REQUIEM_GET_STORAGE_INFO","API_ADD_ANIME_TO_SERVER","API_GET_NEWS","API_GET_INDUSTRY_DATA_FOR_HOME_PAGE","SET_ANIME_FILTERS","SET_MANGA_FILTERS","SET_CHARACTERS_FILTERS","SET_PEOPLE_FILTERS","SET_EROGE_FILTERS","SET_COOKIE_SHOW_FILTERS","USER_LOADING","AUTH_USER","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","SET_REDIRECT_URL","GET_REQUIEM","REQUIEM_LOADING","GET_REPORTS","REPORTS_LOADING","GET_NEWS","NEWS_LOADING","GET_TORRENT_PROGRESS","GET_ACTIVE_TORRENTS_PROGRESS","CLEAR_ANIME_TORRENT_PROGRESS","GET_STORAGE_INFO","GET_TARGETS","USERS_LOADING","USER_LIST_LOADING","CANCEL_USER_LIST_LOADING","GET_USER","GET_ALL_USERS","USER_ENTRY_LOADING","FINISH_LOADING_USER_ENTRY","GET_USER_ANIME_ENTRY","AUTH_ERROR_CLEAR_USER_INFO","CLEAR_USER_ANIME_ENTRY","GET_USER_MANGA_ENTRY","CLEAR_USER_MANGA_ENTRY","GET_USER_LIST","UPDATE_USER_LIST","USER_STATISTICS_LOADING","UPDATE_USER_ANIME_STATISTICS","UPLOADING_FILE","FINISH_UPLOADING_FILE","UPLOAD_ANIME_LIST_MAL_XML","UPLOAD_MANGA_LIST_MAL_XML","USER_INFO_LOADING","USER_ACHIEVEMENTS_LOADING","CANCEL_USER_ACHIEVEMENTS_LOADING","GET_USER_ACHIEVEMENTS","CLEAR_USER_ACHIEVEMENTS","GET_VISITED_USER_ANIME_HISTORY","GET_VISITED_USER_MANGA_HISTORY","GET_ANIME_FILTER_PRESETS","GET_MANGA_FILTER_PRESETS","GET_EROGE_FILTER_PRESETS","SET_ANIME_PRESET","SET_MANGA_PRESET","SET_EROGE_PRESET","GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES","GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES","UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES","UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES","GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS","GET_PROFILE_PRIVACY_SETTINGS","UPDATE_USER_DISPLAY_SETTINGS_STORE","UPDATE_USER_LIST_DESIGN_SETTINGS_STORE","UPDATE_USER_ANIME_BROWSE_SETTINGS","UPDATE_USER_ANIME_LIST_SETTINGS","UPDATE_USER_MANGA_BROWSE_SETTINGS","UPDATE_USER_MANGA_LIST_SETTINGS","UPDATE_USER_EROGE_BROWSE_SETTINGS","GET_ANIME_DATA","GET_ANIME_DATA_STATISTICS","GET_ANIME_ACHIEVEMENT_THRESHOLDS","GET_ANIME","GET_ALL_CHARACTERS_FOR_ANIME","GET_RELATIONS_FOR_ANIME","FILTER_ANIME","ANIME_LOADING","CANCEL_ANIME_LOADING","ANIME_FRANCHISE_LOADING","GET_CURRENT_ANIME_FRANCHISE","GET_ANIME_SEARCHABLE_TITLES","GET_MANGA_DATA","GET_MANGA","GET_ALL_CHARACTERS_FOR_MANGA","GET_RELATIONS_FOR_MANGA","FILTER_MANGA","MANGA_LOADING","CANCEL_MANGA_LOADING","GET_CHARACTER","FILTER_CHARACTERS","CHARACTERS_LOADING","CANCEL_CHARACTERS_LOADING","GET_PERSON","GET_VOICE_ACTOR_ROLES_FOR_PERSON","GET_ANIME_STAFF_POSITIONS_FOR_PERSON","GET_PUBLISHED_MANGA_FOR_PERSON","FILTER_PEOPLE","PEOPLE_LOADING","CANCEL_PEOPLE_LOADING","GET_EROGE","GET_EROGE_DATA","FILTER_EROGE","EROGE_LOADING","CANCEL_EROGE_LOADING","CREATE_MESSAGE","CLEAR_MESSAGE","GET_ERRORS","CLEAN_ERRORS","GET_INDUSTRY_DATA","INDUSTRY_DATA_LOADING","Cookie","show_filters","sound_effects","anime_browse_filters","anime_season_filters","anime_list_filters","manga_browse_filters","manga_season_filters","manga_list_filters","characters_filters","people_filters","eroge_browse_filters","Alert","type_success","type_info","type_error","ApiResult","count","next","previous","results","User","username","profile","email","is_superuser","date_joined","last_login","first_name","last_name","is_staff","is_active","UserStatistics","the_crusade","the_crusade_progress","romance_progress","romance_1","romance_2","romance_3","romance_4","pervert_progress","pervert_1","pervert_2","pervert_3","pervert_4","classics_progress","classics_1","classics_2","classics_3","classics_4","dementia_psychological_progress","dementia_psychological_1","dementia_psychological_2","dementia_psychological_3","dementia_psychological_4","horror_thriller_progress","horror_thriller_1","horror_thriller_2","horror_thriller_3","horror_thriller_4","mystery_progress","mystery_1","mystery_2","mystery_3","mystery_4","Profile","avatar","profile_cover","profile_image","title","bio","user","favorite_anime","favorite_manga","favorite_characters","favorite_people","active_theme","theme_sounds","show_adult","about_section_bbcode","about_section_background_style","is_profile_private","is_anime_list_private","is_anime_history_private","is_manga_list_private","is_manga_history_private","user_anime_display_settings","user_manga_display_settings","user_eroge_display_settings","user_anime_list_design_settings","user_manga_list_design_settings","UserList","owner","is_updating","is_scraping_episode_history_from_mal","scraping_episode_history_from_mal_progress","xml_mal_anime_list","anime_watching","anime_completed","anime_on_hold","anime_dropped","anime_plan_to_watch","anime_total_finished","anime_total_entries","anime_mean_score","anime_episodes_watched","anime_mins_spent_watching","anime_started_watching_on","manga_reading","manga_completed","manga_on_hold","manga_dropped","manga_plan_to_read","manga_total_finished","manga_mean_score","manga_total_entries","manga_volumes_read","manga_chapters_read","manga_mins_spent_reading","manga_started_reading_on","UserAnimeEntry","anime","episode_history","watched_episodes","start_date","finish_date","score","times_watched","comments","priority","rewatching","rewatching_episode","date_added","date_last_modified","anime_list","UserMangaEntry","manga","volume_history","chapter_history","read_volumes","read_chapters","times_read","rereading","rereading_chapter","rereading_volume","AnimeData","total_anime_per_season_json","current_anime_season","top_scored_anime","top_upcoming_anime","most_popular_anime","top_70s_anime","top_80s_anime","top_90s_anime","top_2000s_anime","top_2010s_anime","recently_added_anime","recently_downloaded_anime","MangaData","total_manga_per_season_json","current_manga_season","top_scored_manga","top_upcoming_manga","most_popular_manga","top_70s_manga","top_80s_manga","top_90s_manga","top_2000s_manga","top_2010s_manga","recently_added_manga","recently_downloaded_manga","IndustryData","most_popular_characters","recently_added_characters","ErogeData","top_scored_eroge","most_popular_eroge","top_windows_eroge","top_android_eroge","largest_size_eroge","recently_added_eroge","SeasonYear","seasons","year","Anime","title_english","title_synonyms","title_japanese","anime_cover_images","anime_cdn_cover_images","anime_on_server","air_end","air_end_known","air_start","air_start_known","aired_string","airing","approved","background","broadcast","duration","ending_theme","episodes","favorites","franchise","genres_csv","licensor","mal_id","mal_link","members","minutes_per_episode","opening_theme","popularity","premiered","producer","rank","rating","scored_by","source","studio","synopsis","total_time_mins","uuid_name","anime_roles","main_characters","all_characters","anime_relations","VALID_ANIME_RELATIONS","VALID_ANIME_RELATION_NAMES","ANIME_SHORT_STATUS","label","color","MANGA_SHORT_STATUS","AnimeOnServer","additional_dubs","additional_info","additional_subtitles","arabic_dub","arabic_sub","bulgarian_dub","bulgarian_sub","catalan_dub","catalan_sub","chinese_dub","chinese_sub","czech_dub","czech_sub","danish_dub","danish_sub","downloading","dutch_dub","dutch_sub","english_dub","english_sub","english_subs","extract_subs","finnish_dub","finnish_sub","franchise_folder_name","french_dub","french_sub","german_dub","german_sub","greek_dub","greek_sub","hebrew_dub","hebrew_sub","hungarian_dub","hungarian_sub","incomplete","incomplete_progress","indonesian_dub","indonesian_sub","italian_dub","italian_sub","japanese_dub","japanese_sub","korean_dub","korean_sub","main_torrent_info","malay_dub","malay_sub","norwegian_dub","norwegian_sub","persian_dub","persian_sub","polish_dub","polish_sub","portuguese_dub","portuguese_sub","requiem","romanian_dub","romanian_sub","russian_dub","russian_sub","shared_torrent_with","size_on_HDD_GB","slovak_dub","slovak_sub","spanish_dub","spanish_sub","swedish_dub","swedish_sub","thai_dub","thai_sub","torrent_file","torrent_hash","torrent_magnet","turkish_dub","turkish_sub","video_resolution","vietnamese_dub","vietnamese_sub","AnimeFranchise","cover_image","total_titles","top_members","total_members","top_score","average_score","total_minutes","total_episodes","anime_franchise","Manga","active_image_name","anidb_image_url","ann_image_url","authors","chapters","image_url","manga_cover_images","manga_cdn_cover_images","manga_on_server","published_string","publishing","related","serialization","volumes","manga_roles","manga_relations","VALID_MANGA_RELATIONS","VALID_MANGA_RELATION_NAMES","Character","character_cover_images","character_cdn_cover_images","character_name","nickname","short_name","description","voice_actors","role","anime_roles_defined","manga_roles_defined","Person","person_cover_images","person_cdn_cover_images","person_name","given_name","family_name","alternative_names","birthday","website","more_info","has_roles","voice_actor_roles","voice_actor_anime_roles","anime_staff_positions","anime_staff_positions_roles","published_manga","published_manga_roles","Eroge","date_updated","download_url","eroge_cover_images","eroge_screenshots","game_location","game_url","eroge_name","rated_by","scraped_from","size","CoverImages","image","CDNCoverImages","thumbnail_url","width","height","FiltersPreset","preset_name","filters","AnimeDataStatistics","anime_data","total_anime","total_anime_deleted_mal","total_anime_pending_mal","total_anime_downloaded","total_anime_downloading","total_downloaded_size","mean_score","total_quality_2160p","total_quality_1080p","total_quality_960p","total_quality_720p","total_quality_576p","total_quality_560p","total_quality_540p","total_quality_528p","total_quality_480p","total_quality_396p","total_quality_360p","total_quality_288p","total_quality_240p","total_original_anime","total_original_anime_mean","total_anime_from_light_novel","total_anime_from_light_novel_mean","total_anime_from_music","total_anime_from_music_mean","total_anime_from_manga","total_anime_from_manga_mean","total_anime_from_other","total_anime_from_other_mean","total_anime_from_visual_novel","total_anime_from_visual_novel_mean","total_anime_from_book","total_anime_from_book_mean","total_anime_from_game","total_anime_from_game_mean","total_anime_from_web_manga","total_anime_from_web_manga_mean","total_anime_from_novel","total_anime_from_novel_mean","total_anime_from_picture_book","total_anime_from_picture_book_mean","total_anime_from_card_game","total_anime_from_card_game_mean","total_anime_from_4_kom_manga","total_anime_from_4_kom_manga_mean","total_anime_from_digital_manga","total_anime_from_digital_manga_mean","total_anime_from_radio","total_anime_from_radio_mean","total_movie","total_music","total_ona","total_ova","total_special","total_tv","total_finished_airing","total_currently_airing","total_not_yet_aired","total_rated_g","total_rated_pgc","total_rated_pg13","total_rated_r","total_rated_r_plus","total_rated_rx","total_rated_none","total_genre_action","total_genre_adventure","total_genre_cars","total_genre_comedy","total_genre_dementia","total_genre_demons","total_genre_drama","total_genre_ecchi","total_genre_fantasy","total_genre_game","total_genre_harem","total_genre_hentai","total_genre_historical","total_genre_horror","total_genre_josei","total_genre_kids","total_genre_magic","total_genre_martial_arts","total_genre_mecha","total_genre_military","total_genre_music","total_genre_mystery","total_genre_parody","total_genre_police","total_genre_psychological","total_genre_romance","total_genre_samurai","total_genre_school","total_genre_sci_fi","total_genre_seinen","total_genre_shoujo","total_genre_shoujo_ai","total_genre_shounen","total_genre_shounen_ai","total_genre_slice_of_life","total_genre_space","total_genre_sports","total_genre_super_power","total_genre_supernatural","total_genre_thriller","total_genre_vampire","total_genre_yaoi","total_genre_yuri","anime_achievement_romance_thresholds","anime_achievement_romance_info","anime_achievement_classics_thresholds","anime_achievement_classics_info","anime_achievement_pervert_thresholds","anime_achievement_pervert_info","anime_achievement_dementia_psychological_thresholds","anime_achievement_dementia_psychological_info","anime_achievement_horror_thriller_thresholds","anime_achievement_horror_thriller_info","anime_achievement_mystery_thresholds","anime_achievement_mystery_info","AchievementInfo","requirement","tier_1","tier_2","tier_3","tier_4","AchievementTier","UserAnimeDisplaySettingsSchema","cards","mins_per_ep","mal_score","aired","UserMangaDisplaySettingsSchema","UserErogeDisplaySettingsSchema","loadSounds","playClickSound","playHoverSound","playExpand3Sound","playExpand2Sound","playExpandSound","v","store","getState","auth","e","vol","Number","isFinite","Howl","src","volume","play","undefined","playErrorSound","playWarningSound","playDeploySound","hg_score","initialState","searchable_titles","anime_loading","anime_loaded","anime_data_statistics","anime_data_loaded","filtered_anime","filtered_anime_loaded","anime_franchise_loading","manga_loading","manga_loaded","manga_data","manga_data_loaded","filtered_manga","filtered_manga_loaded","createMessage","msg","payload","clearMessage","returnErrors","cleanErrors","getUser","dispatch","axios","get","API_GET_USER","tokenConfig","then","res","data","catch","err","response","authUser","updateUserDisplaySettingsStore","branch","settings","updateUserListDesignSettingsStore","token","config","headers","AnimeFilterNames","season","user_list_pk","user_list_filter","MangaFilterNames","ErogeFilterNames","CharactersFilterNames","PeopleFilterNames","FilterLabels","FilterSchema","filter_name","content","marks","max","min","FilterSchemaType","standard","component","wide","slider","setCookieAnimeFilters","value","page_type","setCookieMangaFilters","hasOwnProperty","Object","prototype","isEmpty","obj","length","key","call","formatContentDateByKnown","date","known_date","str","indexOf","moment","format","getBrowseGridListCols","innerWidth","formatBytes","terabyte","gigabyte","toFixed","Math","ceil","getSeasonLabelFromSeasonNumber","getTitleCoverImage","cdn_cover_images","cover_images","thumbnail","img_url","len_cdn_images","len_images","largest","x","userTitlePriorityNumberToText","REFERENCE","TODAY","clone","startOf","YESTERDAY","subtract","A_WEEK_OLD","A_MONTH_OLD","SIX_MONTHS_OLD","A_YEAR_OLD","TWO_YEARS_OLD","getAnime","API_GET_ONE_ANIME","cancelAnimeLoading","getAnimeFranchise","API_GET_ANIME_FRANCHISE","filterAnime","page","list","loading","save_cookie","params","setAnimeFilterParams","setAnimeSeasonParams","replace","setAnimeListParams","join","getManga","API_GET_ONE_MANGA","filterManga","setMangaFilterParams","setMangaSeasonParams","setMangaListParams","getEroge","API_GET_ONE_EROGE","filterEroge","no_loading","setErogeFilterParams","editUserAboutMeBBCode","bbcode","formData","FormData","append","post","getUserList","API_GET_USER_LIST","getUserAnimeEntry","addAnimeEntry","entryInfo","body","JSON","stringify","updateAnimeEntry","entry_info","put","updateAnimeEpisode","API_USER_ANIME_UPDATE_EPISODE","deleteAnimeEntry","delete","deleteAnimeHistoryEntry","history_id","anime_id","getUserMangaEntry","addMangaEntry","updateMangaEntry","updateMangaVolume","API_USER_MANGA_UPDATE_VOLUME","updateMangaChapter","API_USER_MANGA_UPDATE_CHAPTER","deleteMangaEntry","deleteMangaVolumeChapterHistoryEntry","manga_id","url","API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY","getLoggedInUserAnimeEntryStatuses","getLoggedInUserMangaEntryStatuses","addToFavorites","toLowerCase","API_ADD_TO_FAVORITES","removeFromFavorites","API_REMOVE_FROM_FAVORITES","setUserTitleDisplaySettings","update","api_url","dispatch_type","setUserListDesignSettings","localStorage","getItem","initial_auth","user_loading","user_authenticated","visited_user_loaded","visited_user","redirect_url","message","characters_loading","character","characters_loaded","filtered_characters","filtered_characters_loaded","eroge_loading","eroge","eroge_loaded","filtered_eroge","filtered_eroge_loaded","eroge_data","eroge_data_statistics","eroge_data_loaded","FILTER_PEOPLE_INITIAL_VALUES","loaded_cookies","Cookies","set","new_anime_values","parse","new_manga_values","new_characters_values","new_people_values","new_eroge_values","eroge_filters","loadCookies","update_anime_filter_state","state","action","update_manga_filter_state","all_users","users_loading","all_users_loaded","entry_loading","user_anime_entry","user_anime_entry_loaded","user_manga_entry","user_manga_entry_loaded","uploading_file","user_list","user_list_loading","user_statistics_loading","user_anime_statistics","user_manga_statistics","user_info_loading","user_anime_history","user_manga_history","anime_filter_presets","manga_filter_presets","eroge_filter_presets","selected_anime_preset","selected_manga_preset","selected_eroge_preset","user_anime_entry_statuses","user_manga_entry_statuses","user_achievements_loading","user_achievements","requiem_is_loading","targets","reports","news","storage","torrent_progress","active_torrents","getCharacter","API_GET_ONE_CHARACTER","filterCharacters","setCharactersFilterParams","people_loading","person","people_loaded","people_data","people_data_statistics","people_data_loaded","filtered_people","filtered_people_loaded","industry_data","industry_data_loading","industry_data_statistics","industry_data_loaded","combineReducers","cookies","updated_user","assign","setItem","removeItem","users","current_statuses","isNaN","current_manga_statuses","this_user_list","current_settings","current_anime_entry","current_manga_entry","errors","success","reports_is_loading","news_is_loading","anime_achievement_thresholds","characters","people","industry","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INDEX","NOT_FOUND","HOME","ADMIN","ADMIN_EDIT_ANIME","ADMIN_EDIT_MANGA","ADMIN_EDIT_CHARACTER","ADMIN_EDIT_EROGE","ADMIN_EDIT_PERSON","LOGIN","REGISTER","SETTINGS","BBCODE_EDITOR","PROFILE","USER_ANIME_LIST","USER_MANGA_LIST","USER_EROGE_LIST","USER_ANIME_STATISTICS","USER_ANIME_HISTORY","USER_MANGA_HISTORY","ANIME_HOME","ANIME_BROWSE","ANIME_SEASONS","ANIME_SEASON_DISPLAY","ANIME_FRANCHISES","ANIME_DISPLAY","ANIME_FRANCHISE_DISPLAY","MANGA_HOME","MANGA_BROWSE","MANGA_SEASONS","MANGA_SEASON_DISPLAY","MANGA_FRANCHISES","MANGA_DISPLAY","CHARACTERS_HOME","CHARACTERS_BROWSE","CHARACTERS_DISPLAY","PEOPLE_BROWSE","PERSON_DISPLAY","EROGE_HOME","EROGE_BROWSE","EROGE_DISPLAY","AnimeMenu","props","show","onLeave","className","style","pointerEvents","onMouseLeave","to","onMouseEnter","onClick","icon","faHome","faSearch","faCalendarAlt","faSitemap","MangaMenu","CharactersMenu","ErogeMenu","AuthMenu","user_id","faThList","faChartLine","faCog","faSignOutAlt","STYLE","top","left","useStyles","makeStyles","theme","root","flexGrow","zIndex","grow","appBar","toolbar","minHeight","marginRight","spacing","fontFamily","fontVariant","userSelect","menuButton","fontSize","menuButtonLink","textDecoration","menuLinks","sectionDesktop","display","breakpoints","up","sectionMobile","MenuAppBar","superuser","classes","React","useState","profileAnchorEl","animeAnchorEl","setAnimeAnchorEl","mobileAnchorEl","setMobileAnchorEl","isAnimeOpen","Boolean","isMobileMenuOpen","desktopAnimeMenu","setDesktopAnimeMenu","desktopMangaMenu","setDesktopMangaMenu","desktopCharactersMenu","setDesktopCharactersMenu","desktopErogeMenu","setDesktopErogeMenu","desktopAuthMenu","setDesktopAuthMenu","handleAnimeClose","handleMobileClose","onDesktopMenuLeave","onDesktopMenuEnter","menuName","animeMobileMenu","renderAnimeMenu","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","onClose","MenuItem","renderMobileMenu","event","currentTarget","Button","aria-label","aria-controls","aria-haspopup","document","addEventListener","navbar","getElementById","scrollY","classList","add","remove","AppBar","position","Toolbar","IconButton","edge","Typography","variant","onMouseOver","href","faUser","CyberNavbar","this","Component","connect","CyberFooter","margin","marginTop","blur","bgImage","bgImageAlt","strength","alt","Loading","text","offset","block","no_text","viewBox","fill","stroke","strokeWidth","points","toUpperCase","CyberButton","classNames","disabled","children","CyberLink","PreLoadImage","loaded","setLoaded","onLoad","LoadGifs","console","log","opacity","map","genre","getPerson","API_GET_ONE_PERSON","filterPeople","setPeopleFilterParams","scrapeUpdateTitleApiUrl","API_REQUIEM_UPDATE_ANIME_MAL","API_REQUIEM_UPDATE_MANGA_MAL","API_REQUIEM_UPDATE_CHARACTER_MAL","API_REQUIEM_UPDATE_PERSON_MAL","API_REQUIEM_UPDATE_EROGE_HENTAIGAMER","scrapeUpdateTitle","getBytesToSize","getTime","sec","hrs","floor","seconds","result","round","getProgress","progress","getSpeed","speed","TorrentProgressInfo","status_icon","torrent","days","parseInt","utc","hours","minutes","eta_str","faArrowDown","faArrowUp","faPause","faSpinner","faBan","faClock","faHdd","faDownload","faUpload","faPuzzlePiece","faUsers","faInfinity","colSpan","LinearProgress","GoToPageDialog","current_page","total_pages","goToPage","GoToPageSchema","Yup","shape","page_number","required","Dialog","aria-labelledby","DialogTitle","initialValues","validationSchema","onSubmit","values","setSubmitting","isSubmitting","touched","handleChange","handleBlur","TextField","name","onChange","onBlur","error","helperText","News","arguments","closePageDialog","bind","page_dialog_open","getNews","setState","news_results","Grid","container","i","item","xs","Pagination","siblingCount","particles_params","Home","updateGridListCols","gridlist_cols","scrollTo","getAllUsers","GridList","cellHeight","cols","GridListTile","ProfileModel","compareByStat","a","b","first","second","comparison","getDataSources","statistics","stat","meanScore","stat_data","mean_score_data","labels","push","datasets","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","borderWidth","maintainAspectRatio","responsive","tooltips","mode","elements","line","scales","yAxes","gridLines","ticks","stepSize","AnimeStatistics","getAnimeDataWithStatistics","data_types","hoverColor","getDataTypes","data_sources","data_sources_options","data_statuses","data_rated","getDataRated","data_genres","getDataGenres","data_qualities","getDataQualities","data_years","parsed_data","parsed_data_keys","keys","element","getDataYears","Divider","xl","md","lg","options","CopyTextToClipboard","setOpen","handleTooltipClose","ClickAwayListener","onClickAway","Tooltip","PopperProps","disablePortal","disableFocusListener","disableHoverListener","disableTouchListener","TabPanel","index","other","hidden","Box","p","DisplayTabs","tabs","useTheme","setValue","Tabs","newValue","indicatorColor","textColor","tab","Tab","axis","direction","onChangeIndex","dir","AnimeEntryModalForm","handleClickOpen","handleClose","edit","initial_values","getUserAnimeEntryFormInitialValues","faEdit","faPlus","DialogContent","UserAnimeEntryForm","NONE","Display","getTitle","param_id","getUserTitleStatus","prevProps","prevState","snapshot","display_title","title_loaded","formatTitle","tabs_margin","primary_set","primary_set_wide","secondary_set","marginBottom","AdminModalForms","UserModalForms","entry","user_title_status","title_1","title_2","title_3","info_set","info","db_info_set","users_info_set","getUserTitleStatusSummary","title_loading","getSynopsys","synopsys","GeneralTab","Grow","in","timeout","DisplayVoiceActors","formatted","split","expand","setExpand","faExpandArrowsAlt","getDescription","plugins","reactPreset","images","original","items","CharactersTab","getAllCharactersForAnime","API_GET_ALL_CHARACTERS_FOR_ANIME","getAllCharactersForManga","API_GET_ALL_CHARACTERS_FOR_MANGA","RelationsTab","getRelationsForManga","user_status","relation_name","y","API_GET_RELATIONS_FOR_MANGA","DownloadTorrentForm","handleAddIdToExtraIds","clearExtraIds","toggleAddExtra","extra","extra_ids","getStorageInfo","splice","field_names","disk","files","magnet","downloadTorrent","setFieldValue","setValues","InputLabel","Select","labelId","Checkbox","inputProps","autoComplete","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","file","faCheck","faTrash","faPlusCircle","mini","multiline","API_REQUIEM_DOWNLOAD_ANIME_TORRENT","DownloadTorrentModalForm","toggleExpandLanguages","expand_languages","languages","forEach","lang","updateAnimeToServer","addAnimeToServer","checked","animeInfo","ServerTab","openAnimeFolder","faFolder","EditAnimeOnServerModalForm","faUserEdit","confirm","deleteAnimeServerInfoAndTorrents","TableContainer","TableBody","TableRow","TableCell","endsWith","Chip","faMagnet","API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS","API_OPEN_ANIME_FOLDER","UpdateAnimeEpisodeButton","setLoading","CircularProgress","thickness","AnimeEpisodeHistoryModal","faHistory","DialogContentText","history","DeleteAnimeEpisodeHistoryButton","DialogActions","AddRemoveFromFavorites","initial","isTitleInFavorites","inFavorites","setInFavorites","faStarSolid","faStar","EditBioForm","closeBio","editUserBio","handleSubmit","onKeyPress","shiftKey","preventDefault","ScrapeEpisodeHistoryFromMalForm","closeForm","MALHLOGSESSID","MALSESSIONID","malhlogsessid","malsessionid","ScrapeEpisodeHistoryFromMalDialog","ImportAnimeListFromMal","uploading","accept","multiple","target","htmlFor","faFileUpload","ImportMangaListFromMal","AddAnimeEntryInstantDropButton","Date","faLevelDownAlt","AddMangaEntryInstantDropButton","FIELD_NAMES","getUserMangaEntryFormInitialValues","UserMangaEntryForm","utils","DateFnsUtils","KeyboardButtonProps","deleteEntry","MangaEntryModalForm","UpdateMangaVolumeButton","UpdateMangaChapterButton","MangaVolumeChapterHistoryModal","DeleteMangaVolumeHistoryButton","DeleteMangaChapterHistoryButton","getRelationsForAnime","API_GET_RELATIONS_FOR_ANIME","TITLES","LOCAL_VALID_ANIME_RELATIONS","FINAL_TREE","compareByAired","now","a_value","b_value","date_a","abs","date_b","compare","getFullAnime","markAnimeAsAdded","isAdded","getChildren","parent_node","z","relation","node","attributes","parent_relation","checkChildrenForFixingSequel","sequel_to_find","node_to_return","fixSequelPriority","parent_anime","in_children","sequel_anime","node_to_fix","TreeBuilder","user_statuses","defaultTranslate","translate","setTranslate","containerRef","useCallback","containerElem","getBoundingClientRect","useCenteredTree","nodeSize","foreignObjectProps","ref","pathFunc","renderCustomNodeElement","rd3tProps","nodeDatum","toggleNode","toString","__rd3t","collapsed","faAngleDoubleDown","faAngleDoubleUp","renderForeignObjectNode","orientation","FranchiseTree","titles","setTitles","reverse","root_node","_continue","check","getRootNode","TreeData","missing","FranchiseTab","DisplayTorrentProgress","torrent_progress_reading","update_interval","getTorrentProgress","setTimeout","torrent_filters","API_REQUIEM_GET_TORRENT_PROGRESS","VoiceActorRolesTab","getVoiceActorRolesForPerson","containerClassNames","API_GET_VOICE_ACTOR_ROLES_FOR_PERSON","AnimeStaffPositionsTab","getAnimeStaffPositionsForPerson","positions_roles","API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON","PublishedMangaTab","getPublishedMangaForPerson","API_GET_PUBLISHED_MANGA_FOR_PERSON","UserAnimeEntryStatus","status_classname","UserMangaEntryStatus","checkFavorites","favoriteTitles","currentTitleId","in_favorites","faPlusSquare","faSyncAlt","faInfo","faUserFriends","faCodeBranch","faPlay","faServer","tag","faUserCog","faBookOpen","getTitleNameFromTitle","QuickUserAnimeEntryForm","QuickUserMangaEntryForm","InstantDropTitleButton","title_id","CardUserEditTitleEntry","getUserTitleEntry","getQuickUserTitleEntryForm","hideUserButtons","add_button_title","getUserStatusChip","UserCardButtons","TitleCard","showUserButtons","cssHideUserButtons","img_loaded","show_user_buttons","css_hide_buttons","card_title","user_status_param","design_settings","end_date","link","chipset_header","chipset_one","chipset_two","chipset_three","chipset_four","user_settings","title_type","title_episodes","title_mins_per_ep","title_rating","title_genres","title_mal_score","title_aired","title_status","title_volumes","title_chapters","trim","class_names","container_class_names","backgroundImage","skip_img_preload","user_buttons","chip","horizontalScroll","deltaY","scrollLeft","AnimeCurrentSeason","current_year","getFullYear","current_month","getMonth","current_season","current_season_number","season_filter","addHorizontalScrollEventListener","removeEventListener","removeHorizontalScrollEventListener","season_icon_and_class","faSeedling","faSun","faLeaf","faSnowflake","getIconAndClassFromSeasonNumber","RecentlyAdded","RecentlyDownloaded","TopUpcoming","TopScoredMal","MostPopularMal","Top2010s","Top2000s","Top90s","Top80s","Top70s","a11yProps","TopAnimeTabs","CurrentSeason","TopAnime","AnimeHome","getAnimeDataForHomePage","LoginSchema","password","RegisterSchema","password2","test","parent","LoginForm","login","Login","RegisterForm","new_user","register","Register","setPreset","preset","new_values","setSelectedAnimePreset","setSelectedMangaPreset","setSelectedErogePreset","updateFilterPreset","preset_id","updateAnimeFilterPreset","updateMangaFilterPreset","updateErogeFilterPreset","saveFilterPreset","saveAnimeFilterPreset","saveMangaFilterPreset","saveErogeFilterPreset","deleteFilterPreset","deleteMangaFilterPreset","deleteErogeFilterPreset","getSelectedPreset","PresetFilters","onPresetChange","onPresetNew","onPresetUpdate","onPresetDelete","presets","getResetValuesFromBranch","prompt","faSave","UserDisplaySettingsDialog","UserBrowseAnimeDisplaySettingsDialog","user_display_settings","UserBrowseMangaDisplaySettingsDialog","UserBrowseErogeDisplaySettingsDialog","setCards","setType","setEpisodes","setMinsPerEp","setRating","setGenres","setMalScore","setAired","reset","previous_settings","aria-describedby","faThLarge","setVolumes","setChapters","setCensorship","setLanguage","setPlatforms","setTags","setHgScore","getSliderLabel","label_name","value_2","getGenreImgSrc","img_name","replaceAll","ext","getOrderIcon","order","active","faSortAmountDown","faSortAmountDownAlt","getOrderValue","TitlesFilter","onGenreEnter","onGenreLeave","onGenreChange","checkFormValuesFromCookies","onReset","title_filters","cookie_filters","genreFilter","img","contains","slice","nextSibling","firstChild","filterTitles","reset_values","uses_presets","active_filters","childNodes","parentNode","changeHeightOfActiveFiltersWrapperOnChange","sm","titles_loading","filtered_titles","faTimes","faUndoAlt","faFilter","main_filters","regular_filters","field","filter","wide_filters","Slider","valueLabelDisplay","order_filters","offsetWidth","setAttribute","AnimeFilters","orderings","concat","anime_filters","filtered_titles_loaded","user_anime_list_display_settings","MangaFilters","manga_filters","user_manga_list_display_settings","ErogeFilters","CharactersFilters","PeopleFilters","getFiltersFromBranch","getItemsPerPageFromBranch","TitleRow","row_title","column_set","formatTitleForRows","scope","align","BrowseCardsView","items_per_page","user_entry_statuses","BrowseTableView","BrowseTableHead","TableHead","faImage","Browse","getTabName","updateCurrentPage","AnimeBrowse","NonAuthIndexHero","imageSrc","transitionDuration","AuthIndexHero","autoPlay","muted","loop","Index","img_1_loaded","img_2_loaded","getData","pie_data","legend","AnimeSimpleChartStats","useSelector","end","faStop","faCircle","MangaSimpleChartStats","FavoriteTitles","limit","parsed","getTitlesFromBranch","XBBCODE","tagList","bbRegExp","pbbRegExp","pbbRegExp2","openTags","closeTags","me","urlPattern","colorNamePattern","colorCodePattern","emailPattern","fontFacePattern","tagsNoParseList","initTags","prop","ii","len","noParse","validChildLookup","validParentLookup","restrictParentsTo","restrictChildrenTo","RegExp","closeTagList","checkParentChildRestrictions","parentTag","bbcodeLevel","tagName","tagParams","tagContents","errQueue","cInfo","errStr","childTag","reTagNames","reTagNamesParts","matchingTags","match","pInfo","lastIndex","matchStr","updateTagDepths","subMatchStr","m1","m2","openTag","closeTag","colorCode","substr","myEmail","faceCode","myUrl","displayContent","mySize","replaceFunct","processedContent","addTags","newtags","process","ret","html","openB","contents","closeB","endTag","innerListTxt","fixStarTag","addBbcodeLevels","output","removeMisalignedTags","addInLineBreaks","escapeHtml","ReactHtmlParser","errorQueue","URL_PATTERN","parseWidthHeightFromParams","w_unit","h_unit","parse_width","parse_height","parseLimitFromParams","parse_limit","new_tags","center","cyberBBCodeParser","bbcode_string","AboutTab","toggleEditorButton","show_editor_button","background_color","backgroundRepeat","repeat","backgroundSize","backgroundPosition","position_1","position_2","position_x","backgroundPositionX","position_y","backgroundPositionY","faTools","getMinsPerDay","total_mins","date1","date2","time_diff","total_days","AnimeTab","Chart","defaults","global","raw","beginAtZero","justify","alignItems","MangaTab","unknown","parseGenreAchievementFromResult","tiers","achievements_info","user_progress","user_tier_1","user_tier_2","user_tier_3","user_tier_4","user_completed","threshold","getActiveGenreDescription","achievement","GenreAchievementSegment","tier_1_value","tier_1_buffer","previous_completed","tier_number","new_threshold","valueBuffer","faCheckCircle","GenreAchievement","AchievementsTab","achievements_loaded","getAnimeAchievementsThresholds","getUserAchievements","clearUserAchievements","genre_achievements","achievement_thresholds","achievements","getUserGenreAchievements","API_GET_USER_ACHIEVEMENTS","ProfileTabs","faTv","faGamepad","faTrophy","UploadProfileImageButton","onUpdateProfile","updateUserProfileImage","loader_classnames","faCamera","getLastLoginLabel","last_login_date","newDate","getTimezoneOffset","getHours","setHours","convertUTCDateToLocalDate","isTimeLessThanAnHourAgo","ONE_HOUR","isTimeLessThanSixHoursAgo","isSame","isYesterday","isAfter","isWithinAWeek","isWithinAMonth","isWithinSixMonths","isWithinAYear","isMoreThanAYear","img_cover_loaded","current_id","updateUserList","ListItem","ListItemText","primary","secondary","button","API_UPDATE_USER_LIST","UserSettings","editBio","finishEditingBio","edit_bio","Switch","ProfileSettings","openBBCodeDialog","closeBBCodeDialog","bbcode_dialog_open","FormControl","muteUnmuteThemeSounds","faVolumeUp","faVolumeMute","ToggleUserAnimeListPrivacyForm","IsPrivate","setIsPrivate","to_private","ToggleUserAnimeHistoryPrivacyForm","ToggleUserMangaListPrivacyForm","ToggleUserMangaHistoryPrivacyForm","ListSettings","openScrapeHistoryDialog","closeScrapeHistoryDialog","scrape_episode_history_dialog_open","scraping_info_reading","scraping_history_info_modal_open","getUserEpisodeHistoryScraperProgress","setInterval","clearInterval","faCloudDownloadAlt","faQuestion","paragraph","fixUserStartAndFinishDateForAnimeEntries","SettingsTabs","Settings","MangaBrowse","AnimeDisplay","MangaDisplay","CharactersBrowse","CharacterDisplay","ErogeBrowse","getSeasonIcon","getTitleData","browseSeasonTitlesFromBranch","getPrevSeasonUrl","prev_year","prev_season","getNextSeasonUrl","next_year","next_season","formatData","display_data","total_titles_per_season_json","getSeasonUrl","BrowseSeasons","data_loaded","BrowseAnimeSeasons","data_loading","BrowseMangaSeasons","NotFound","Alerts","alert","onOpen","withAlert","DisplaySeason","season_num","season_name","faArrowLeft","faArrowRight","getDaysFromDate","start","diff","asDays","AnimeListStatusButtons","selected","setSelected","UserListTableHead","list_table_show_images","title_edit_button","list_owner","title_user_score","title_progress","title_priority","title_comments","title_tags","title_started","title_finished","title_added","title_days","title_progress_2","UserListTableRow","progress_volumes","progress_chapters","formatTitleForUserListRows","getTitleAndStatusKeysFromBranch","title_key","status_key","MangaListStatusButtons","CSS_FONTS","NumberWithUnitField","key_2","key_1","getInitialUnit","unit","setUnit","classnames","with_units","html_id_prefix","OutlinedInput","labelWidth","endAdornment","InputAdornment","parseFloat","units","unit_choice","SimpleTextField","SelectWithOptionsField","option","ColorPickerField","hex","CheckBoxField","FormControlLabel","control","labelPlacement","UserListDesignSettings","type_cards","list_margin_top","about_text","background_image","apply_custom_css","table","title_info","AboutText","header","font_family","margin_top","header_left","header_right","header_font_color","header_font_size","header_align","header_font_style","header_font_variant","header_font_weight","text_left","text_right","text_font_color","text_font_size","text_align","text_font_style","text_font_variant","text_font_weight","CoverImage","object_fit","parallax","border_top_left","border_top_right","border_bottom_left","border_bottom_right","BackgroundImage","attachment","repeat_x","repeat_y","Cards","round_borders","Table","backdrop_filter_blur","show_images","row_lines","List","padding_left","padding_right","TitleInfoAnime","user_score","edit_button","started","finished","added","TitleInfoManga","CoverImgTab","BackgroundImgTab","MessageTab","ListTab","volumes_progress","progress_key","progress_label","chapters_progress","UserListDesignSettingsDialogTabs","scrollButtons","UserListDesignSettingsDialog","setSettings","prevSettings","getTitleAndUserStatusFromBranch","noResult","UserListCardsView","id_key","list_cards_round_borders","padding","list_cards_spacing","UserListTableView","titles_container_styles","list_table_background_color","backdropFilter","list_table_backdrop_filter_blur","list_table_round_borders","list_table_row_lines","getInitialSelected","list_pk","anime_settings","manga_settings","getUserListDesignSettingsFromBranch","list_type_cards","about_header","about_font_family","about_margin_top","about_header_left","about_header_right","about_header_font_color","about_header_font_size","about_header_align","about_header_font_style","about_header_font_variant","about_header_font_weight","about_text_left","about_text_right","about_text_font_color","about_text_font_size","about_text_align","about_text_font_style","about_text_font_variant","about_text_font_weight","cover_image_show","cover_image_margin_top","cover_image_url","cover_image_object_fit","cover_image_align","cover_image_height","cover_image_width","cover_image_parallax","cover_image_border_top_left","cover_image_border_top_right","cover_image_border_bottom_left","cover_image_border_bottom_right","background_image_show","background_image_url","background_image_size","background_image_attachment","background_image_position_x","background_image_position_y","background_image_repeat_x","background_image_repeat_y","list_titles_margin_top","list_titles_padding_left","list_titles_padding_right","cover_border_top_left","cover_border_top_right","cover_border_bottom_left","cover_border_bottom_right","formatUserListDesignSettingsFromBranch","paddingLeft","paddingRight","paddingTop","backgroundAttachment","backgroundRepeatX","backgroundRepeatY","textAlign","fontStyle","fontWeight","objectFit","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","PrivatePage","AnimeList","compareByTotal","compareByMean","Statistics","getFavoriteGenres","sortFavoriteGenres","favorite_genres_sorted_by","data_favorite_genres","data_favorite_genres_options","updated","updateAndGetUserAnimeStatistics","data_and_options","stat_mean_score","getDataFavoriteGenres","data_completed_history","hours_watching","data_rated_vs_time_spent","data_rated_vs_episode_count","data_rated_vs_episode_count_options","data_favorite_years","data_favorite_years_options","data_favorite_types","data_favorite_types_options","getDataScoreDistribution","getDataRatedVsTimeSpent","months","sum","month_keys","bordered","month","getTableHistory","getDataRatedVsEpisodeCount","getDataFavoriteYears","getDataFavoriteTypes","API_UPDATE_AND_GET_USER_ANIME_STATISTICS","displayHistory","user_history","lastId","newId","lastMonth","lastDate","lastYear","nextYear","nextMonth","nextDate","entries","timestamp","last","lastHistory","DisplayUserHistory","getVisitedUserAnimeHistory","visited_user_id","getVisitedUserMangaHistory","total","API_GET_VISITED_USER_ANIME_HISTORY","API_GET_VISITED_USER_MANGA_HISTORY","History","isHistoryPrivate","MangaList","FranchisesHome","TopMangaTabs","TopManga","MangaHome","getMangaDataForHomePage","TopCharacters","CharactersHome","getIndustryDataForHomePage","TopScored","MostPopular","TopWindows","TopAndroid","LargestSize","TopErogeTabs","TopEroge","ErogeHome","getErogeDataForHomePage","PeopleBrowse","PersonDisplay","TEMPLATE_NAME_NONE","TEMPLATE_NAME_DEFAULT","TEMPLATE_NAME_HIGH_CONTRAST","TEMPLATE_NONE_BACKGROUND","TEMPLATE_DEFAULT_BACKGROUND","TEMPLATE_MAL_BACKGROUND","TEMPLATE_HIGH_CONTRAST_BACKGROUND","compareImageObject","BBCodeEditor","updateSelectedPreset","selected_template","updateEditor","updateBackgroundImage","submitAboutMe","BackgroundEditorTab","contaienr","BBCodeEditorTabs","BBCodeEditorTab","attribute","bg_img","editUserAboutMeBackground","user_loaded","background_style","checkForRedirectUrl","pathname","setRedirectUrl","App","exact","path","render","DisplayFranchise","ErogeDisplay","createMuiTheme","yourRawTheme","ReactDOM","StrictMode","ThemeProvider","template","close","severity","AlertTitle"],"mappings":"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","file":"static/js/main.76461841.chunk.js","sourcesContent":["// export const CYBER_GENESIS_URL = 'http://127.0.0.1:8000';\r\n// export const CYBER_GENESIS_URL = 'https://ae386a726a57.ngrok.io';\r\nexport const CYBER_GENESIS_URL = 'https://cybergenesis.pagekite.me';\r\nexport const CYBER_SPACE_URL = window.location.host;\r\n\r\nexport const BROWSE_ANIME_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_MANGA_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_CHARACTERS_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_EROGE_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_PEOPLE_ITEMS_PER_PAGE = 100;\r\n\r\n\r\nexport const store_reducers = {\r\n    cookies: 'cookies',\r\n    auth: 'auth',\r\n    users: 'users',\r\n    errors: 'errors',\r\n    success: 'success',\r\n    anime: 'anime',\r\n    manga: 'manga',\r\n    characters: 'characters',\r\n    eroge: 'eroge',\r\n};\r\n\r\nexport const store_reducer_users = {\r\n    all_users: 'all_users',\r\n    users_loading: 'users_loading',\r\n    all_users_loaded: 'all_users_loaded',\r\n    entry_loading: 'entry_loading',\r\n    user_anime_entry: 'user_anime_entry',\r\n    user_anime_entry_loaded: 'user_anime_entry_loaded',\r\n    user_manga_entry: 'user_manga_entry',\r\n    user_manga_entry_loaded: 'user_manga_entry_loaded',\r\n    uploading_file: 'uploading_file',\r\n};\r\n\r\nexport const store_reducer_cookies = {\r\n    show_filters: 'show_filters',\r\n    anime_browse_filters: 'anime_browse_filters',\r\n    anime_season_filters: 'anime_season_filters',\r\n    anime_list_filters: 'anime_list_filters',\r\n    manga_browse_filters: 'manga_browse_filters',\r\n    manga_season_filters: 'manga_season_filters',\r\n    manga_list_filters: 'manga_list_filters',\r\n    characters_filters: 'characters_filters',\r\n    eroge_browse_filters: 'eroge_browse_filters',\r\n};\r\n\r\n// Content Branches\r\nexport const BRANCH_ANIME = 'Anime';\r\nexport const BRANCH_MANGA = 'Manga';\r\nexport const BRANCH_EROGE = 'Eroge';\r\nexport const BRANCH_PEOPLE = 'People';\r\nexport const BRANCH_CHARACTERS = 'Characters';\r\n\r\n// Filter Types\r\nexport const TYPE_BROWSE = 'Browse';\r\nexport const TYPE_LIST = 'List';\r\nexport const TYPE_SEASON = 'Season';\r\n\r\n// Tab titles\r\nexport const CYBER_GENESIS_TAB_NAME = 'Cyber Genesis';\r\nexport const PROFILE_TAB_NAME = 'Profile';\r\nexport const ANIME_TAB_NAME = 'Anime';\r\nexport const ANIME_BROWSE_TAB_NAME = 'Browse Anime';\r\nexport const MANGA_BROWSE_TAB_NAME = 'Browse Manga';\r\nexport const EROGE_TAB_NAME = 'Eroge';\r\nexport const EROGE_BROWSE_TAB_NAME = 'Browse Eroge';\r\nexport const PEOPLE_BROWSE_TAB_NAME = 'Browse People';\r\nexport const CHARACTERS_TAB_NAME = 'Characters';\r\nexport const INDUSTRY_TAB_NAME = 'Industry';\r\nexport const CHARACTERS_BROWSE_TAB_NAME = 'Browse Characters';\r\nexport const MANGA_TAB_NAME = 'Manga';\r\nexport const BROWSE_TAB_NAME = 'Browse';\r\nexport const FRANCHISES_TAB_NAME = 'Franchises';\r\nexport const SEASONS_TAB_NAME = 'Seasons';\r\nexport const SETTINGS_TAB_NAME = 'Settings';\r\nexport const NOT_FOUND_404_TAB_NAME = 'Code: 404';\r\nexport const REGISTER_TAB_NAME = 'Register';\r\n\r\n// Colors\r\nexport const COLOR_PRIMARY = '#156BB7';\r\nexport const COLOR_SECONDARY = '#E14ECA';\r\nexport const COLOR_INFO = '#00FFFF';\r\nexport const COLOR_SUCCESS = '#00A057';\r\nexport const COLOR_WARNING = '#D09C00';\r\nexport const COLOR_DANGER = '#FF0000';\r\nexport const COLOR_GRAY = '#7B7B7B';\r\nexport const COLOR_WHITE = '#FFFFFF';\r\n\r\nexport const LANGUAGES = ['Japanese', 'English', 'Russian', 'Portuguese', 'German', 'French', 'Italian', 'Spanish',\r\n    'Chinese', 'Arabic', 'Korean', 'Malay', 'Polish', 'Turkish', 'Swedish', 'Danish', 'Finnish', 'Dutch', 'Norwegian',\r\n    'Bulgarian', 'Greek', 'Hebrew', 'Romanian', 'Thai', 'Vietnamese', 'Czech', 'Slovak', 'Persian', 'Indonesian',\r\n    'Catalan', 'Hungarian'];\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_ANIME_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        anime_on_server__english_sub: false,\r\n        anime_on_server__english_dub: false,\r\n        anime_on_server__japanese_dub: false,\r\n        anime_on_server__japanese_sub: false,\r\n        episodes_range: [0, 53],\r\n        length_range: [0, 61],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        rating_short: [],\r\n        video_quality: [],\r\n        audio_channel: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\nexport const ANIME_ORDERINGS = [\r\n    'members', 'score', 'id', 'type', 'episodes', 'scored_by', 'favorites', 'rating', 'air_start', 'air_end'\r\n];\r\nexport const USER_ANIME_ORDERINGS = [\r\n    'watched_episodes', 'my_score', 'times_watched', 'priority', 'start_date', 'finish_date'\r\n];\r\nexport const ANIME_TYPES = ['TV', 'Movie', 'OVA', 'Special', 'Music', 'ONA'];\r\nexport const ANIME_STATUSES = ['Finished Airing', 'Currently Airing', 'Not yet aired'];\r\nexport const ANIME_RATING_SHORT = ['G', 'PG-C', 'PG-13', 'R', 'R+', 'Rx'];\r\nexport const ANIME_VIDEO_QUALITIES = ['2160p', '1080p', '720p', '580p', '480p', '360p', '240p'];\r\nexport const USER_ANIME_STATUSES_ARRAY = ['Watching', 'Completed', 'On Hold', 'Dropped', 'Plan to Watch'];\r\nexport const USER_MANGA_STATUSES_ARRAY = ['Reading', 'Completed', 'On Hold', 'Dropped', 'Plan to Read'];\r\nexport const ANIME_AUDIO_CHANNELS = ['2.0', '5.1'];\r\nexport const ANIME_GENRES = [\r\n    'Comedy', 'Drama', 'Romance', 'School', 'Slice of Life', 'Adventure', 'Ecchi', 'Fantasy', 'Magic', 'Mystery',\r\n    'Shoujo Ai', 'Action', 'Mecha', 'Military', 'Police', 'Sci-Fi', 'Parody', 'Shounen', 'Super Power', 'Supernatural',\r\n    'Vampire', 'Seinen', 'Shoujo', 'Historical', 'Samurai', 'Harem', 'Psychological', 'Shounen Ai', 'Space', 'Josei',\r\n    'Dementia', 'Thriller', 'Sports', 'Game', 'Music', 'Horror', 'Kids', 'Martial Arts', 'Hentai', 'Demons', 'Cars',\r\n    'Yaoi', 'Yuri'\r\n].sort();\r\nexport const USER_ANIME_STATUSES = {\r\n    watching: 'Watching',\r\n    completed: 'Completed',\r\n    on_hold: 'On Hold',\r\n    dropped: 'Dropped',\r\n    plan_to_watch: 'Plan to Watch',\r\n};\r\nexport const USER_MANGA_STATUSES = {\r\n    reading: 'Reading',\r\n    completed: 'Completed',\r\n    on_hold: 'On Hold',\r\n    dropped: 'Dropped',\r\n    plan_to_read: 'Plan to Read',\r\n};\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_MANGA_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        volumes_range: [0, 53],\r\n        chapters_range: [0, 53],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\nexport const MANGA_ORDERINGS = [\r\n    'members', 'score', 'id', 'type', 'volumes', 'chapters', 'scored_by', 'favorites', 'air_start', 'air_end'\r\n];\r\nexport const USER_MANGA_ORDERINGS = [\r\n    'read_volumes', 'read_chapters', 'my_score', 'times_read', 'start_date', 'finish_date'\r\n];\r\nexport const MANGA_TYPES = ['Manga', 'Manhwa', 'Novel', 'Doujinshi', 'One-shot', 'Manhua', 'OEL', 'LightNovel'];\r\nexport const MANGA_STATUSES = ['Publishing', 'Finished', 'Not yet published', 'Discontinued', 'On Hiatus'];\r\nexport const MANGA_GENRES = [\r\n    'Fantasy', 'Sci-Fi', 'Comedy', 'Drama', 'Romance', 'School', 'Slice of Life', 'Josei', 'Hentai', 'Doujinshi',\r\n    'Yaoi', 'Historical', 'Shoujo Ai', 'Shoujo', 'Supernatural', 'Seinen', 'Shounen', 'Shounen Ai', 'Action',\r\n    'Adventure', 'Ecchi', 'Harem', 'Mystery', 'Vampire', 'Gender Bender', 'Magic', 'Military', 'Psychological',\r\n    'Demons', 'Horror', 'Martial Arts', 'Game', 'Thriller', 'Sports', 'Yuri', 'Parody', 'Space', 'Super Power',\r\n    'Mecha', 'Kids', 'Police', 'Samurai', 'Music', 'Dementia', 'Cars'\r\n].sort();\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_EROGE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        type: [],\r\n        downloaded: '',\r\n        platforms: [],\r\n        language: [],\r\n        censorship: [],\r\n        tags: [],\r\n        ordering: '-date_added',\r\n    };\r\n}\r\nexport const EROGE_ORDERINGS = ['rating', 'rated_by', 'size', 'date_added'];\r\nexport const EROGE_TYPES = ['Adventure', 'Visual Novel', 'RPG', 'Puzzle', 'Simulation'];\r\nexport const EROGE_PLATFORMS = ['Android', 'Windows'];\r\nexport const EROGE_CENSORSHIPS = ['Censored', 'Uncensored', 'Mosaic'];\r\nexport const EROGE_LANGUAGES = ['English', 'Japanese'];\r\nexport const EROGE_TAGS = [\r\n    '3D', 'Female Protagonist', 'Animated', 'Futanari', 'Incest', 'Corruption', 'Harem', 'BDSM', 'Big Breasts', 'Milf',\r\n    'Bestiality', 'Romance', 'Pregnancy', 'Male Protagonist', 'Group Sex', 'School', 'NTR', 'Mind Control', 'Femdom',\r\n    'Exhibitionism', 'Yuri', 'Fantasy', 'Blackmail', 'Tentacles', 'Rape', 'Urination', 'Voyeurism', 'Witches',\r\n    'Seduction', 'Peeping', 'Hypnosis', 'Prostitution', 'Gangbang', 'Bukkake', 'Dark Skin', 'Voyeur', 'Netori', 'Touch',\r\n    'Paizuri', 'Footjob', 'Parody', 'Combat', 'Defloration', 'Cunnilingus', 'Masturbation', 'Tiny Breasts', 'Blow Job',\r\n    'Big Boobs', 'Nukige', 'Stripping'\r\n];\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_CHARACTERS_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\nexport const CHARACTERS_ORDERINGS = ['favorites', 'id'];\r\n\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_PEOPLE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\nexport const PEOPLE_ORDERINGS = ['favorites', 'id', 'birthday'];\r\n\r\n\r\nexport function getPriorityLabel(priority) {\r\n    switch (priority) {\r\n        case 0:\r\n            return 'Very Low';\r\n        case 1:\r\n            return 'Low';\r\n        case 2:\r\n            return 'Medium';\r\n        case 3:\r\n            return 'High';\r\n        case 4:\r\n            return 'Very High';\r\n        default:\r\n            return 'Very Low'\r\n    }\r\n}\r\n","import {CYBER_GENESIS_URL} from \"../globals\";\r\n\r\nexport const BASE_URL = CYBER_GENESIS_URL;\r\n\r\n\r\n// AUTH\r\nexport const API_AUTH_USER = `${BASE_URL}/api/auth/user`;\r\nexport const API_LOGIN = `${BASE_URL}/api/auth/login`;\r\nexport const API_REGISTER = `${BASE_URL}/api/auth/register`;\r\nexport const API_LOGOUT = `${BASE_URL}/api/auth/logout/`;\r\nexport function API_GET_USER(id) {\r\n    return `${BASE_URL}/api/users-api/${id}/`;\r\n}\r\n\r\n// USERS\r\nexport const API_GET_ALL_USERS = `${BASE_URL}/api/users-api/`;\r\nexport const API_USER_ANIME_FILTERS_PRESET = `${BASE_URL}/api/anime-filter-preset/`;\r\nexport const API_USER_MANGA_FILTERS_PRESET = `${BASE_URL}/api/manga-filter-preset/`;\r\nexport const API_USER_EROGE_FILTERS_PRESET = `${BASE_URL}/api/eroge-filter-preset/`;\r\nexport const API_CHANGE_USER_PROFILE_IMAGE = `${BASE_URL}/api/profile/change_profile_image/`;\r\nexport const API_IMPORT_MAL_XML_FOR_ANIME_LIST = `${BASE_URL}/api/user-list/upload_anime_list_mal_xml_file/`;\r\nexport const API_IMPORT_MAL_XML_FOR_MANGA_LIST = `${BASE_URL}/api/user-list/upload_manga_list_mal_xml_file/`;\r\nexport const API_EDIT_USER_BIO = `${BASE_URL}/api/profile/edit_bio/`;\r\nexport const API_EDIT_USER_ABOUT_ME_BBCODE = `${BASE_URL}/api/profile/edit_about_me_bbcode/`;\r\nexport const API_EDIT_USER_ABOUT_ME_BACKGROUND = `${BASE_URL}/api/profile/edit_about_me_background/`;\r\nexport const API_SCRAPE_EPISODE_HISTORY_FROM_MAL = `${BASE_URL}/api/user-list/scrape_and_update_user_episode_history_from_mal/`;\r\nexport const API_CHANGE_CYBER_SOUND_STATUS = `${BASE_URL}/api/profile/change_cyber_sound_status/`;\r\nexport const API_USER_ANIME_ENTRY_NOID = `${BASE_URL}/api/anime-entry/`;\r\nexport const API_USER_MANGA_ENTRY_NOID = `${BASE_URL}/api/manga-entry/`;\r\nexport const API_USER_ANIME_ENTRY_STATUSES = `${BASE_URL}/api/user-list/user_anime_statuses/`;\r\nexport const API_USER_MANGA_ENTRY_STATUSES = `${BASE_URL}/api/user-list/user_manga_statuses/`;\r\nexport const API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS = `${BASE_URL}/api/user-list/get_user_episode_history_scrape_progress`;\r\nexport const API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES = `${BASE_URL}/api/anime-entry/fix_user_start_and_finished_date`;\r\nexport const API_SET_PROFILE_TO_PRIVATE = `${BASE_URL}/api/profile/set_profile_to_private`;\r\nexport const API_SET_PROFILE_TO_PUBLIC = `${BASE_URL}/api/profile/set_profile_to_public`;\r\nexport const API_SET_ANIME_LIST_TO_PRIVATE = `${BASE_URL}/api/profile/set_anime_list_to_private`;\r\nexport const API_SET_ANIME_LIST_TO_PUBLIC = `${BASE_URL}/api/profile/set_anime_list_to_public`;\r\nexport const API_SET_ANIME_HISTORY_TO_PRIVATE = `${BASE_URL}/api/profile/set_anime_history_to_private`;\r\nexport const API_SET_ANIME_HISTORY_TO_PUBLIC = `${BASE_URL}/api/profile/set_anime_history_to_public`;\r\nexport const API_SET_MANGA_LIST_TO_PRIVATE = `${BASE_URL}/api/profile/set_manga_list_to_private`;\r\nexport const API_SET_MANGA_LIST_TO_PUBLIC = `${BASE_URL}/api/profile/set_manga_list_to_public`;\r\nexport const API_SET_MANGA_HISTORY_TO_PRIVATE = `${BASE_URL}/api/profile/set_manga_history_to_private`;\r\nexport const API_SET_MANGA_HISTORY_TO_PUBLIC = `${BASE_URL}/api/profile/set_manga_history_to_public`;\r\nexport const API_UPDATE_USER_ANIME_DISPLAY_SETTINGS = `${BASE_URL}/api/profile/update_user_anime_display_settings/`;\r\nexport const API_UPDATE_USER_ANIME_LIST_SETTINGS = `${BASE_URL}/api/profile/update_user_anime_list_settings/`;\r\nexport const API_UPDATE_USER_MANGA_DISPLAY_SETTINGS = `${BASE_URL}/api/profile/update_user_manga_display_settings/`;\r\nexport const API_UPDATE_USER_MANGA_LIST_SETTINGS = `${BASE_URL}/api/profile/update_user_manga_list_settings/`;\r\nexport const API_UPDATE_USER_EROGE_DISPLAY_SETTINGS = `${BASE_URL}/api/profile/update_user_eroge_display_settings/`;\r\nexport function API_ADD_TO_FAVORITES(branch) {\r\n    return `${BASE_URL}/api/profile/${branch.toLowerCase()}/add_to_favorites/`;\r\n}\r\nexport function API_REMOVE_FROM_FAVORITES(branch) {\r\n    return `${BASE_URL}/api/profile/${branch.toLowerCase()}/remove_from_favorites/`;\r\n}\r\nexport function API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/anime-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/manga-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/eroge-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_ANIME_ENTRY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/`;\r\n}\r\nexport function API_USER_ANIME_UPDATE_EPISODE(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/update_anime_episode/`;\r\n}\r\nexport function API_USER_MANGA_UPDATE_VOLUME(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/update_manga_volume/`;\r\n}\r\nexport function API_USER_MANGA_UPDATE_CHAPTER(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/update_manga_chapter/`;\r\n}\r\nexport function API_DELETE_ANIME_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/delete_anime_history_entry/`;\r\n}\r\nexport function API_DELETE_MANGA_VOLUME_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/delete_manga_history_volume_entry/`;\r\n}\r\nexport function API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/delete_manga_history_chapter_entry/`;\r\n}\r\nexport function API_USER_MANGA_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/`;\r\n}\r\nexport function API_UPDATE_AND_GET_USER_ANIME_STATISTICS(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/update_anime_statistics/`;\r\n}\r\nexport function API_GET_USER_LIST(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/`;\r\n}\r\nexport function API_UPDATE_USER_LIST(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/update_user_list/`;\r\n}\r\nexport function API_GET_VISITED_USER_ANIME_HISTORY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/get_visited_user_anime_history/`;\r\n}\r\nexport function API_GET_VISITED_USER_MANGA_HISTORY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/get_visited_user_manga_history/`;\r\n}\r\nexport function API_GET_USER_ACHIEVEMENTS(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/get_user_achievements/`;\r\n}\r\n\r\n// ANIME\r\nexport const API_GET_ANIME_DATA = `${BASE_URL}/api/anime-data-api/`;\r\nexport const API_GET_ANIME_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/anime-data-api/anime_home`;\r\nexport const API_GET_ANIME_DATA_WITH_STATISTICS = `${BASE_URL}/api/anime-data-api/statistics/`;\r\nexport const API_GET_ANIME_ACHIEVEMENT_THRESHOLDS = `${BASE_URL}/api/anime-data-api/achievement_thresholds/`;\r\nexport const API_FILTER_ANIME = `${BASE_URL}/api/anime-api/`;\r\nexport const API_GET_ANIME_SEARCHABLE_TITLES = `${BASE_URL}/api/anime-api/searchable_titles/`;\r\nexport function API_GET_ONE_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}`;\r\n}\r\nexport function API_GET_ALL_CHARACTERS_FOR_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/get_all_characters_for_anime`;\r\n}\r\nexport function API_GET_RELATIONS_FOR_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/get_relations_for_anime`;\r\n}\r\nexport function API_GET_ANIME_FRANCHISE(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/franchise`;\r\n}\r\n\r\n// MANGA\r\nexport const API_GET_MANGA_DATA = `${BASE_URL}/api/manga-data-api/`;\r\nexport const API_GET_MANGA_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/manga-data-api/manga_home`;\r\nexport const API_FILTER_MANGA = `${BASE_URL}/api/manga-api/`;\r\nexport function API_GET_ONE_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}`;\r\n}\r\nexport function API_GET_ALL_CHARACTERS_FOR_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}/get_all_characters_for_manga`;\r\n}\r\nexport function API_GET_RELATIONS_FOR_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}/get_relations_for_manga`;\r\n}\r\n\r\n// CHARACTERS\r\nexport const API_FILTER_CHARACTERS = `${BASE_URL}/api/characters-api/`;\r\nexport function API_GET_ONE_CHARACTER(id) {\r\n    return `${BASE_URL}/api/characters-api/${id}`;\r\n}\r\n\r\n// PEOPLE\r\nexport const API_FILTER_PEOPLE = `${BASE_URL}/api/people/`;\r\nexport function API_GET_ONE_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}`;\r\n}\r\nexport function API_GET_VOICE_ACTOR_ROLES_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/voice_actor_roles`;\r\n}\r\nexport function API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/anime_staff_positions`;\r\n}\r\nexport function API_GET_PUBLISHED_MANGA_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/published_manga`;\r\n}\r\n\r\n// EROGE\r\nexport const API_FILTER_EROGE = `${BASE_URL}/api/eroge-api/`;\r\nexport const API_GET_EROGE_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/eroge-data-api/eroge_home`;\r\nexport function API_GET_ONE_EROGE(id) {\r\n    return `${BASE_URL}/api/eroge-api/${id}`;\r\n}\r\n\r\n// REQUIEM\r\nexport const API_REQUIEM_GET_STORAGE_INFO = `${BASE_URL}/api/requiem-api/get_storage_info/`;\r\nexport const API_ADD_ANIME_TO_SERVER = `${BASE_URL}/api/anime-server-api/`;\r\nexport const API_GET_NEWS = `${BASE_URL}/api/news-api/`;\r\nexport function API_UPDATE_ANIME_TO_SERVER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/`;\r\n}\r\nexport function API_OPEN_ANIME_FOLDER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/open_anime_folder/`;\r\n}\r\nexport function API_OPEN_EROGE_FOLDER(id) {\r\n    return `${BASE_URL}/api/eroge-api/${id}/open_eroge_folder/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_ANIME_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_anime_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_MANGA_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_manga_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_CHARACTER_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_character_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_PERSON_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_person_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_EROGE_HENTAIGAMER(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_eroge_hentaigamer/`;\r\n}\r\nexport function API_REQUIEM_DOWNLOAD_ANIME_TORRENT(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/download_torrent/`;\r\n}\r\nexport function API_REQUIEM_GET_ANIME_TORRENT_PROGRESS(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/get_torrent_progress/`;\r\n}\r\nexport function API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/delete_anime_server_info_and_torrent/`;\r\n}\r\nexport function API_REQUIEM_GET_TORRENT_PROGRESS(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/get_torrent_progress/`;\r\n}\r\n\r\n// INDUSTRY\r\nexport const API_GET_INDUSTRY_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/industry-data/industry_home`;\r\n","// COOKIES\r\nimport {API_GET_ANIME_SEARCHABLE_TITLES, API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON} from \"./api_urls\";\r\n\r\nexport const SET_ANIME_FILTERS = 'SET_ANIME_FILTERS';\r\nexport const SET_MANGA_FILTERS = 'SET_MANGA_FILTERS';\r\nexport const SET_CHARACTERS_FILTERS = 'SET_CHARACTERS_FILTERS';\r\nexport const SET_PEOPLE_FILTERS = 'SET_PEOPLE_FILTERS';\r\nexport const SET_EROGE_FILTERS = 'SET_EROGE_FILTERS';\r\nexport const SET_COOKIE_SHOW_FILTERS = 'SET_COOKIE_SHOW_FILTERS';\r\n\r\n\r\nexport const SET_SELECTED_SEASON = 'SET_SELECTED_SEASON';\r\nexport const CLEAR_SELECTED_SEASON = 'CLEAR_SELECTED_SEASON';\r\n\r\n// AUTH\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const AUTH_USER = 'AUTH_USER';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const SET_REDIRECT_URL = 'SET_REDIRECT_URL';\r\n\r\n// REQUIEM\r\nexport const GET_REQUIEM = \"GET_REQUIEM\";\r\nexport const REQUIEM_LOADING = \"REQUIEM_LOADING\";\r\nexport const GET_REPORTS = \"GET_REPORTS\";\r\nexport const REPORTS_LOADING = \"REPORTS_LOADING\";\r\nexport const GET_NEWS = \"GET_NEWS\";\r\nexport const NEWS_LOADING = \"NEWS_LOADING\";\r\nexport const DOWNLOAD_TORRENT = \"DOWNLOAD_TORRENT\";\r\nexport const GET_TORRENT_PROGRESS = \"GET_TORRENT_PROGRESS\";\r\nexport const GET_ACTIVE_TORRENTS_PROGRESS = \"GET_ACTIVE_TORRENTS_PROGRESS\";\r\nexport const CLEAR_ANIME_TORRENT_PROGRESS = \"CLEAR_ANIME_TORRENT_PROGRESS\";\r\nexport const GET_STORAGE_INFO = \"GET_STORAGE_INFO\";\r\nexport const GET_TARGETS = \"GET_TARGETS\";\r\n\r\n// USERS\r\nexport const USERS_LOADING = 'USERS_LOADING';\r\nexport const USER_LIST_LOADING = 'USER_LIST_LOADING';\r\nexport const CANCEL_USER_LIST_LOADING = 'CANCEL_USER_LIST_LOADING';\r\nexport const GET_USER = 'GET_USER';\r\nexport const GET_ALL_USERS = 'GET_ALL_USERS';\r\nexport const UPDATE_USER_PROFILE_IMAGE = 'UPDATE_USER_PROFILE_IMAGE';\r\nexport const USER_ENTRY_LOADING = 'USER_ENTRY_LOADING';\r\nexport const FINISH_LOADING_USER_ENTRY = 'FINISH_LOADING_USER_ENTRY';\r\nexport const GET_USER_ANIME_ENTRY = 'GET_USER_ANIME_ENTRY';\r\nexport const AUTH_ERROR_CLEAR_USER_INFO = 'AUTH_ERROR_CLEAR_USER_INFO';\r\nexport const CLEAR_USER_ANIME_ENTRY = 'CLEAR_USER_ANIME_ENTRY';\r\nexport const GET_USER_MANGA_ENTRY = 'GET_USER_MANGA_ENTRY';\r\nexport const CLEAR_USER_MANGA_ENTRY = 'CLEAR_USER_MANGA_ENTRY';\r\nexport const GET_USER_LIST = 'GET_USER_LIST';\r\nexport const UPDATE_USER_LIST = 'UPDATE_USER_LIST';\r\nexport const USER_STATISTICS_LOADING = 'USER_STATISTICS_LOADING';\r\nexport const UPDATE_USER_ANIME_STATISTICS = 'UPDATE_USER_ANIME_STATISTICS';\r\nexport const UPLOADING_FILE = 'UPLOADING_FILE';\r\nexport const FINISH_UPLOADING_FILE = 'FINISH_UPLOADING_FILE';\r\nexport const UPLOAD_ANIME_LIST_MAL_XML = 'UPLOAD_ANIME_LIST_MAL_XML';\r\nexport const UPLOAD_MANGA_LIST_MAL_XML = 'UPLOAD_MANGA_LIST_MAL_XML';\r\nexport const USER_INFO_LOADING = 'USER_INFO_LOADING';\r\nexport const USER_ACHIEVEMENTS_LOADING = 'USER_ACHIEVEMENTS_LOADING';\r\nexport const CANCEL_USER_ACHIEVEMENTS_LOADING = 'CANCEL_USER_ACHIEVEMENTS_LOADING';\r\nexport const GET_USER_ACHIEVEMENTS = 'GET_USER_ACHIEVEMENTS';\r\nexport const CLEAR_USER_ACHIEVEMENTS = 'CLEAR_USER_ACHIEVEMENTS';\r\nexport const GET_VISITED_USER_ANIME_HISTORY = 'GET_VISITED_USER_ANIME_HISTORY';\r\nexport const GET_VISITED_USER_MANGA_HISTORY = 'GET_VISITED_USER_MANGA_HISTORY';\r\nexport const GET_ANIME_FILTER_PRESETS = 'GET_ANIME_FILTER_PRESETS';\r\nexport const GET_MANGA_FILTER_PRESETS = 'GET_MANGA_FILTER_PRESETS';\r\nexport const GET_EROGE_FILTER_PRESETS = 'GET_EROGE_FILTER_PRESETS';\r\nexport const SET_ANIME_PRESET = 'SET_ANIME_PRESET';\r\nexport const SET_MANGA_PRESET = 'SET_MANGA_PRESET';\r\nexport const SET_EROGE_PRESET = 'SET_EROGE_PRESET';\r\nexport const GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES = 'GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES';\r\nexport const GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES = 'GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES';\r\nexport const UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES = 'UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES';\r\nexport const UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES = 'UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES';\r\nexport const GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS = 'GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS';\r\nexport const GET_PROFILE_PRIVACY_SETTINGS = 'GET_PROFILE_PRIVACY_SETTINGS';\r\nexport const UPDATE_USER_DISPLAY_SETTINGS_STORE = 'UPDATE_USER_DISPLAY_SETTINGS_STORE';\r\nexport const UPDATE_USER_LIST_DESIGN_SETTINGS_STORE = 'UPDATE_USER_LIST_DESIGN_SETTINGS_STORE';\r\nexport const UPDATE_USER_ANIME_BROWSE_SETTINGS = 'UPDATE_USER_ANIME_BROWSE_SETTINGS';\r\nexport const UPDATE_USER_ANIME_LIST_SETTINGS = 'UPDATE_USER_ANIME_LIST_SETTINGS';\r\nexport const UPDATE_USER_MANGA_BROWSE_SETTINGS = 'UPDATE_USER_MANGA_BROWSE_SETTINGS';\r\nexport const UPDATE_USER_MANGA_LIST_SETTINGS = 'UPDATE_USER_MANGA_LIST_SETTINGS';\r\nexport const UPDATE_USER_EROGE_BROWSE_SETTINGS = 'UPDATE_USER_EROGE_BROWSE_SETTINGS';\r\n\r\n// ANIME\r\nexport const GET_ANIME_DATA = 'GET_ANIME_DATA';\r\nexport const GET_ANIME_DATA_STATISTICS = 'GET_ANIME_DATA_STATISTICS';\r\nexport const GET_ANIME_ACHIEVEMENT_THRESHOLDS = 'GET_ANIME_ACHIEVEMENT_THRESHOLDS';\r\nexport const GET_ANIME = 'GET_ANIME';\r\nexport const GET_ALL_CHARACTERS_FOR_ANIME = 'GET_ALL_CHARACTERS_FOR_ANIME';\r\nexport const GET_RELATIONS_FOR_ANIME = 'GET_RELATIONS_FOR_ANIME';\r\nexport const FILTER_ANIME = 'FILTER_ANIME';\r\nexport const ANIME_LOADING = 'ANIME_LOADING';\r\nexport const CANCEL_ANIME_LOADING = 'CANCEL_ANIME_LOADING';\r\nexport const ANIME_FRANCHISE_LOADING = 'ANIME_FRANCHISE_LOADING';\r\nexport const GET_CURRENT_ANIME_FRANCHISE = 'GET_CURRENT_ANIME_FRANCHISE';\r\nexport const GET_ANIME_SEARCHABLE_TITLES = 'GET_ANIME_SEARCHABLE_TITLES';\r\n\r\n// MANGA\r\nexport const GET_MANGA_DATA = 'GET_MANGA_DATA';\r\nexport const GET_MANGA = 'GET_MANGA';\r\nexport const GET_ALL_CHARACTERS_FOR_MANGA = 'GET_ALL_CHARACTERS_FOR_MANGA';\r\nexport const GET_RELATIONS_FOR_MANGA = 'GET_RELATIONS_FOR_MANGA';\r\nexport const FILTER_MANGA = 'FILTER_MANGA';\r\nexport const MANGA_LOADING = 'MANGA_LOADING';\r\nexport const CANCEL_MANGA_LOADING = 'CANCEL_MANGA_LOADING';\r\n\r\n// CHARACTERS\r\nexport const GET_CHARACTER = 'GET_CHARACTER';\r\nexport const FILTER_CHARACTERS = 'FILTER_CHARACTERS';\r\nexport const CHARACTERS_LOADING = 'CHARACTERS_LOADING';\r\nexport const CANCEL_CHARACTERS_LOADING = 'CANCEL_CHARACTERS_LOADING';\r\n\r\n// PEOPLE\r\nexport const GET_PERSON = 'GET_PERSON';\r\nexport const GET_PEOPLE_DATA = 'GET_PEOPLE_DATA';\r\nexport const GET_VOICE_ACTOR_ROLES_FOR_PERSON = 'GET_VOICE_ACTOR_ROLES_FOR_PERSON';\r\nexport const GET_ANIME_STAFF_POSITIONS_FOR_PERSON = 'GET_ANIME_STAFF_POSITIONS_FOR_PERSON';\r\nexport const GET_PUBLISHED_MANGA_FOR_PERSON = 'GET_PUBLISHED_MANGA_FOR_PERSON';\r\nexport const FILTER_PEOPLE = 'FILTER_PEOPLE';\r\nexport const PEOPLE_LOADING = 'PEOPLE_LOADING';\r\nexport const CANCEL_PEOPLE_LOADING = 'CANCEL_PEOPLE_LOADING';\r\n\r\n// EROGE\r\nexport const GET_EROGE = 'GET_EROGE';\r\nexport const GET_EROGE_DATA = 'GET_EROGE_DATA';\r\nexport const FILTER_EROGE = 'FILTER_EROGE';\r\nexport const EROGE_LOADING = 'EROGE_LOADING';\r\nexport const CANCEL_EROGE_LOADING = 'CANCEL_EROGE_LOADING';\r\n\r\n// ERRORS\r\nexport const CREATE_MESSAGE = 'CREATE_MESSAGE';\r\nexport const CLEAR_MESSAGE = 'CLEAR_MESSAGE';\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAN_ERRORS = 'CLEAN_ERRORS';\r\n\r\n// BRANCHES\r\nexport const SET_BROWSE_BRANCH = 'SET_BROWSE_BRANCH';\r\nexport const SET_DISPLAY_BRANCH = 'SET_DISPLAY_BRANCH';\r\nexport const SET_TITLE_BRANCH = 'SET_TITLE_BRANCH';\r\n\r\n// INDUSTRY\r\nexport const GET_INDUSTRY_DATA = 'GET_INDUSTRY_DATA';\r\nexport const INDUSTRY_DATA_LOADING = 'INDUSTRY_DATA_LOADING';\r\n","export class Cookie {\r\n    static show_filters = 'show_filters';\r\n    static sound_effects = 'sound_effects';\r\n    static anime_browse_filters = 'anime_browse_filters';\r\n    static anime_season_filters = 'anime_season_filters';\r\n    static anime_list_filters = 'anime_list_filters';\r\n    static manga_browse_filters = 'manga_browse_filters';\r\n    static manga_season_filters = 'manga_season_filters';\r\n    static manga_list_filters = 'manga_list_filters';\r\n    static characters_filters = 'characters_filters';\r\n    static people_filters = 'people_filters';\r\n    static eroge_browse_filters = 'eroge_browse_filters';\r\n}\r\n\r\nexport class Alert {\r\n    static type_success = 'success';\r\n    static type_info = 'info';\r\n    static type_error = 'error';\r\n}\r\n\r\nexport class ApiResult {\r\n    static count = 'count';\r\n    static next = 'next';\r\n    static previous = 'previous';\r\n    static results = 'results';\r\n}\r\n\r\nexport class User {\r\n    static id = 'id';\r\n    static username = 'username';\r\n    static profile = 'profile';\r\n    static email = 'email';\r\n    static is_superuser = 'is_superuser';\r\n    static date_joined = 'date_joined';\r\n    static last_login = 'last_login';\r\n    static first_name = 'first_name';\r\n    static last_name = 'last_name';\r\n    static is_staff = 'is_staff';\r\n    static is_active = 'is_active';\r\n}\r\n\r\nexport class UserStatistics {\r\n    static the_crusade = 'the_crusade';\r\n    static the_crusade_progress = 'the_crusade_progress';\r\n    static romance_progress = 'romance_progress';\r\n    static romance_1 = 'romance_1';\r\n    static romance_2 = 'romance_2';\r\n    static romance_3 = 'romance_3';\r\n    static romance_4 = 'romance_4';\r\n    static pervert_progress = 'pervert_progress';\r\n    static pervert_1 = 'pervert_1';\r\n    static pervert_2 = 'pervert_2';\r\n    static pervert_3 = 'pervert_3';\r\n    static pervert_4 = 'pervert_4';\r\n    static classics_progress = 'classics_progress';\r\n    static classics_1 = 'classics_1';\r\n    static classics_2 = 'classics_2';\r\n    static classics_3 = 'classics_3';\r\n    static classics_4 = 'classics_4';\r\n    static dementia_psychological_progress = 'dementia_psychological_progress';\r\n    static dementia_psychological_1 = 'dementia_psychological_1';\r\n    static dementia_psychological_2 = 'dementia_psychological_2';\r\n    static dementia_psychological_3 = 'dementia_psychological_3';\r\n    static dementia_psychological_4 = 'dementia_psychological_4';\r\n    static horror_thriller_progress = 'horror_thriller_progress';\r\n    static horror_thriller_1 = 'horror_thriller_1';\r\n    static horror_thriller_2 = 'horror_thriller_2';\r\n    static horror_thriller_3 = 'horror_thriller_3';\r\n    static horror_thriller_4 = 'horror_thriller_4';\r\n    static mystery_progress = 'mystery_progress';\r\n    static mystery_1 = 'mystery_1';\r\n    static mystery_2 = 'mystery_2';\r\n    static mystery_3 = 'mystery_3';\r\n    static mystery_4 = 'mystery_4';\r\n}\r\n\r\n\r\nexport class Profile {\r\n    static id = 'id';\r\n    static avatar = 'avatar';\r\n    static profile_cover = 'profile_cover';\r\n    static profile_image = 'profile_image';\r\n    static title = 'title';\r\n    static bio = 'bio';\r\n    static user = 'user';\r\n    static favorite_anime = 'favorite_anime';\r\n    static favorite_manga = 'favorite_manga';\r\n    static favorite_characters = 'favorite_characters';\r\n    static favorite_people = 'favorite_people';\r\n    static active_theme = 'active_theme';\r\n    static theme_sounds = 'theme_sounds';\r\n    static show_adult = 'show_adult';\r\n    static about_section_bbcode = 'about_section_bbcode';\r\n    static about_section_background_style = 'about_section_background_style';\r\n    static is_profile_private = 'is_profile_private';\r\n    static is_anime_list_private = 'is_anime_list_private';\r\n    static is_anime_history_private = 'is_anime_history_private';\r\n    static is_manga_list_private = 'is_manga_list_private';\r\n    static is_manga_history_private = 'is_manga_history_private';\r\n    static user_anime_display_settings = 'user_anime_display_settings';\r\n    static user_manga_display_settings = 'user_manga_display_settings';\r\n    static user_eroge_display_settings = 'user_eroge_display_settings';\r\n    static user_anime_list_design_settings = 'user_anime_list_design_settings';\r\n    static user_manga_list_design_settings = 'user_manga_list_design_settings';\r\n}\r\n\r\n\r\nexport class UserList {\r\n    static owner = 'owner';\r\n    static is_updating = 'is_updating';\r\n    static is_scraping_episode_history_from_mal = 'is_scraping_episode_history_from_mal';\r\n    static scraping_episode_history_from_mal_progress = 'scraping_episode_history_from_mal_progress';\r\n    static xml_mal_anime_list = 'xml_mal_anime_list';\r\n    static anime_watching = 'anime_watching';\r\n    static anime_completed = 'anime_completed';\r\n    static anime_on_hold = 'anime_on_hold';\r\n    static anime_dropped = 'anime_dropped';\r\n    static anime_plan_to_watch = 'anime_plan_to_watch';\r\n    static anime_total_finished = 'anime_total_finished';\r\n    static anime_total_entries = 'anime_total_entries';\r\n    static anime_mean_score = 'anime_mean_score';\r\n    static anime_episodes_watched = 'anime_episodes_watched';\r\n    static anime_mins_spent_watching = 'anime_mins_spent_watching';\r\n    static anime_started_watching_on = 'anime_started_watching_on';\r\n    static manga_reading = 'manga_reading';\r\n    static manga_completed = 'manga_completed';\r\n    static manga_on_hold = 'manga_on_hold';\r\n    static manga_dropped = 'manga_dropped';\r\n    static manga_plan_to_read = 'manga_plan_to_read';\r\n    static manga_total_finished = 'manga_total_finished';\r\n    static manga_mean_score = 'manga_mean_score';\r\n    static manga_total_entries = 'manga_total_entries';\r\n    static manga_volumes_read = 'manga_volumes_read';\r\n    static manga_chapters_read = 'manga_chapters_read';\r\n    static manga_mins_spent_reading = 'manga_mins_spent_reading';\r\n    static manga_started_reading_on = 'manga_started_reading_on';\r\n}\r\n\r\nexport class UserAnimeEntry {\r\n    static id = 'id';\r\n    static anime = 'anime';\r\n    static episode_history = 'episode_history';\r\n    static watched_episodes = 'watched_episodes';\r\n    static start_date = 'start_date';\r\n    static finish_date = 'finish_date';\r\n    static score = 'score';\r\n    static status = 'status';\r\n    static times_watched = 'times_watched';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static priority = 'priority';\r\n    static rewatching = 'rewatching';\r\n    static rewatching_episode = 'rewatching_episode';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static anime_list = 'anime_list';\r\n}\r\n\r\nexport class UserMangaEntry {\r\n    static id = 'id';\r\n    static manga = 'manga';\r\n    static start_date = 'start_date';\r\n    static finish_date = 'finish_date';\r\n    static volume_history = 'volume_history';\r\n    static chapter_history = 'chapter_history';\r\n    static read_volumes = 'read_volumes';\r\n    static read_chapters = 'read_chapters';\r\n    static score = 'score';\r\n    static status = 'status';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static times_read = 'times_read';\r\n    static priority = 'priority';\r\n    static rereading = 'rereading';\r\n    static rereading_chapter = 'rereading_chapter';\r\n    static rereading_volume = 'rereading_volume';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class AnimeData {\r\n    static total_anime_per_season_json = 'total_anime_per_season_json';\r\n    static current_anime_season = 'current_anime_season';\r\n    static top_scored_anime = 'top_scored_anime';\r\n    static top_upcoming_anime = 'top_upcoming_anime';\r\n    static most_popular_anime = 'most_popular_anime';\r\n    static top_70s_anime = 'top_70s_anime';\r\n    static top_80s_anime = 'top_80s_anime';\r\n    static top_90s_anime = 'top_90s_anime';\r\n    static top_2000s_anime = 'top_2000s_anime';\r\n    static top_2010s_anime = 'top_2010s_anime';\r\n    static recently_added_anime = 'recently_added_anime';\r\n    static recently_downloaded_anime = 'recently_downloaded_anime';\r\n}\r\n\r\nexport class MangaData {\r\n    static total_manga_per_season_json = 'total_manga_per_season_json';\r\n    static current_manga_season = 'current_manga_season';\r\n    static top_scored_manga = 'top_scored_manga';\r\n    static top_upcoming_manga = 'top_upcoming_manga';\r\n    static most_popular_manga = 'most_popular_manga';\r\n    static top_70s_manga = 'top_70s_manga';\r\n    static top_80s_manga = 'top_80s_manga';\r\n    static top_90s_manga = 'top_90s_manga';\r\n    static top_2000s_manga = 'top_2000s_manga';\r\n    static top_2010s_manga = 'top_2010s_manga';\r\n    static recently_added_manga = 'recently_added_manga';\r\n    static recently_downloaded_manga = 'recently_downloaded_manga';\r\n}\r\n\r\nexport class IndustryData {\r\n    static most_popular_characters = 'most_popular_characters';\r\n    static recently_added_characters = 'recently_added_characters';\r\n}\r\n\r\nexport class ErogeData {\r\n    static top_scored_eroge = 'top_scored_eroge';\r\n    static most_popular_eroge = 'most_popular_eroge';\r\n    static top_windows_eroge = 'top_windows_eroge';\r\n    static top_android_eroge = 'top_android_eroge';\r\n    static largest_size_eroge = 'largest_size_eroge';\r\n    static recently_added_eroge = 'recently_added_eroge';\r\n}\r\n\r\nexport class SeasonYear {\r\n    static seasons = 'seasons';\r\n    static year = 'year';\r\n}\r\n\r\nexport class Anime {\r\n    static id = 'id';\r\n    static title = 'title';\r\n    static title_english = 'title_english';\r\n    static title_synonyms = 'title_synonyms';\r\n    static title_japanese = 'title_japanese';\r\n    static anime_cover_images = 'anime_cover_images';\r\n    static anime_cdn_cover_images = 'anime_cdn_cover_images';\r\n    static anime_on_server = 'anime_on_server';\r\n    static air_end = 'air_end';\r\n    static air_end_known = 'air_end_known';\r\n    static air_start = 'air_start';\r\n    static air_start_known = 'air_start_known';\r\n    static aired_string = 'aired_string';\r\n    static airing = 'airing';\r\n    static approved = 'approved';\r\n    static background = 'background';\r\n    static broadcast = 'broadcast';\r\n    static cannot_download = 'cannot_download';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static duration = 'duration';\r\n    static ending_theme = 'ending_theme';\r\n    static episodes = 'episodes';\r\n    static favorites = 'favorites';\r\n    static franchise = 'franchise';\r\n    static genres_csv = 'genres_csv';\r\n    static is_downloading = 'is_downloading';\r\n    static licensor = 'licensor';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static members = 'members';\r\n    static minutes_per_episode = 'minutes_per_episode';\r\n    static opening_theme = 'opening_theme';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static popularity = 'popularity';\r\n    static premiered = 'premiered';\r\n    static producer = 'producer';\r\n    static rank = 'rank';\r\n    static rating = 'rating';\r\n    static rating_short = 'rating_short';\r\n    static score = 'score';\r\n    static scored_by = 'scored_by';\r\n    static source = 'source';\r\n    static status = 'status';\r\n    static studio = 'studio';\r\n    static synopsis = 'synopsis';\r\n    static total_time_mins = 'total_time_mins';\r\n    static type = 'type';\r\n    static uuid_name = 'uuid_name';\r\n    static anime_roles = 'anime_roles';\r\n    static main_characters = 'main_characters';\r\n    static all_characters = 'all_characters';\r\n    static anime_relations = 'anime_relations';\r\n}\r\n\r\nexport const VALID_ANIME_RELATIONS = ['anime_relation_adaptation', 'anime_relation_alternative_setting',\r\n    'anime_relation_alternative_version', 'anime_relation_sequel', 'anime_relation_prequel',\r\n    'anime_relation_side_story', 'anime_relation_spin_off', 'anime_relation_other', 'anime_relation_summary',\r\n    'anime_relation_character', 'anime_relation_parent_story', 'anime_relation_full_story'];\r\nexport const VALID_ANIME_RELATION_NAMES = {\r\n    'anime_relation_adaptation': \"Adaptation\",\r\n    'anime_relation_alternative_setting': \"Alternative Setting\",\r\n    'anime_relation_alternative_version': \"Alternative Version\",\r\n    'anime_relation_sequel': \"Sequel\",\r\n    'anime_relation_prequel': \"Prequel\",\r\n    'anime_relation_side_story': \"Side Story\",\r\n    'anime_relation_spin_off': \"Spin Off\",\r\n    'anime_relation_other': \"Other\",\r\n    'anime_relation_summary': \"Summary\",\r\n    'anime_relation_character': \"Character\",\r\n    'anime_relation_parent_story': \"Parent Story\",\r\n    'anime_relation_full_story': \"Full Story\"\r\n};\r\n\r\nexport const ANIME_SHORT_STATUS = {\r\n    'Finished Airing': {label: 'FA', color: 'primary'},\r\n    'Not yet aired': {label: 'NA', color: 'default'},\r\n    'Currently Airing': {label: 'CA', color: 'success'},\r\n};\r\n\r\nexport const MANGA_SHORT_STATUS = {\r\n    'Finished': {label: 'F', color: 'primary'},\r\n    'Not yet published': {label: 'NP', color: 'default'},\r\n    'Publishing': {label: 'P', color: 'success'},\r\n    'Discontinued': {label: 'D', color: 'danger'},\r\n    'On Hiatus': {label: 'OH', color: 'warning'},\r\n};\r\n\r\nexport class AnimeOnServer {\r\n    static additional_dubs = 'additional_dubs';\r\n    static additional_info = 'additional_info';\r\n    static additional_subtitles = 'additional_subtitles';\r\n    static anime = 'anime';\r\n    static approved = 'approved';\r\n    static arabic_dub = 'arabic_dub';\r\n    static arabic_sub = 'arabic_sub';\r\n    static audio_channel = 'audio_channel';\r\n    static bulgarian_dub = 'bulgarian_dub';\r\n    static bulgarian_sub = 'bulgarian_sub';\r\n    static catalan_dub = 'catalan_dub';\r\n    static catalan_sub = 'catalan_sub';\r\n    static chinese_dub = 'chinese_dub';\r\n    static chinese_sub = 'chinese_sub';\r\n    static czech_dub = 'czech_dub';\r\n    static czech_sub = 'czech_sub';\r\n    static danish_dub = 'danish_dub';\r\n    static danish_sub = 'danish_sub';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static downloading = 'downloading';\r\n    static dutch_dub = 'dutch_dub';\r\n    static dutch_sub = 'dutch_sub';\r\n    static english_dub = 'english_dub';\r\n    static english_sub = 'english_sub';\r\n    static english_subs = 'english_subs';\r\n    static extract_subs = 'extract_subs';\r\n    static finnish_dub = 'finnish_dub';\r\n    static finnish_sub = 'finnish_sub';\r\n    static franchise_folder_name = 'franchise_folder_name';\r\n    static french_dub = 'french_dub';\r\n    static french_sub = 'french_sub';\r\n    static german_dub = 'german_dub';\r\n    static german_sub = 'german_sub';\r\n    static greek_dub = 'greek_dub';\r\n    static greek_sub = 'greek_sub';\r\n    static hebrew_dub = 'hebrew_dub';\r\n    static hebrew_sub = 'hebrew_sub';\r\n    static hungarian_dub = 'hungarian_dub';\r\n    static hungarian_sub = 'hungarian_sub';\r\n    static incomplete = 'incomplete';\r\n    static incomplete_progress = 'incomplete_progress';\r\n    static indonesian_dub = 'indonesian_dub';\r\n    static indonesian_sub = 'indonesian_sub';\r\n    static italian_dub = 'italian_dub';\r\n    static italian_sub = 'italian_sub';\r\n    static japanese_dub = 'japanese_dub';\r\n    static japanese_sub = 'japanese_sub';\r\n    static korean_dub = 'korean_dub';\r\n    static korean_sub = 'korean_sub';\r\n    static location = 'location';\r\n    static main_torrent_info = 'main_torrent_info';\r\n    static malay_dub = 'malay_dub';\r\n    static malay_sub = 'malay_sub';\r\n    static norwegian_dub = 'norwegian_dub';\r\n    static norwegian_sub = 'norwegian_sub';\r\n    static persian_dub = 'persian_dub';\r\n    static persian_sub = 'persian_sub';\r\n    static polish_dub = 'polish_dub';\r\n    static polish_sub = 'polish_sub';\r\n    static portuguese_dub = 'portuguese_dub';\r\n    static portuguese_sub = 'portuguese_sub';\r\n    static requiem = 'requiem';\r\n    static romanian_dub = 'romanian_dub';\r\n    static romanian_sub = 'romanian_sub';\r\n    static russian_dub = 'russian_dub';\r\n    static russian_sub = 'russian_sub';\r\n    static shared_torrent_with = 'shared_torrent_with';\r\n    static size_on_HDD_GB = 'size_on_HDD_GB';\r\n    static slovak_dub = 'slovak_dub';\r\n    static slovak_sub = 'slovak_sub';\r\n    static spanish_dub = 'spanish_dub';\r\n    static spanish_sub = 'spanish_sub';\r\n    static swedish_dub = 'swedish_dub';\r\n    static swedish_sub = 'swedish_sub';\r\n    static thai_dub = 'thai_dub';\r\n    static thai_sub = 'thai_sub';\r\n    static torrent_file = 'torrent_file';\r\n    static torrent_hash = 'torrent_hash';\r\n    static torrent_magnet = 'torrent_magnet';\r\n    static turkish_dub = 'turkish_dub';\r\n    static turkish_sub = 'turkish_sub';\r\n    static video_quality = 'video_quality';\r\n    static video_resolution = 'video_resolution';\r\n    static vietnamese_dub = 'vietnamese_dub';\r\n    static vietnamese_sub = 'vietnamese_sub';\r\n}\r\n\r\nexport class AnimeFranchise {\r\n    static id = 'id';\r\n    static title = 'title';\r\n    static cover_image = 'cover_image';\r\n    static total_titles = 'total_titles';\r\n    static top_members = 'top_members';\r\n    static total_members = 'total_members';\r\n    static top_score = 'top_score';\r\n    static average_score = 'average_score';\r\n    static total_minutes = 'total_minutes';\r\n    static total_episodes = 'total_episodes';\r\n    static anime_franchise = 'anime_franchise';\r\n}\r\n\r\nexport class Manga {\r\n    static active_image_name = 'active_image_name';\r\n    static air_end = 'air_end';\r\n    static air_end_known = 'air_end_known';\r\n    static air_start = 'air_start';\r\n    static air_start_known = 'air_start_known';\r\n    static anidb_image_url = 'anidb_image_url';\r\n    static ann_image_url = 'ann_image_url';\r\n    static approved = 'approved';\r\n    static authors = 'authors';\r\n    static background = 'background';\r\n    static cannot_download = 'cannot_download';\r\n    static chapters = 'chapters';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static favorites = 'favorites';\r\n    static genres = 'genres';\r\n    static genres_csv = 'genres_csv';\r\n    static id = 'id';\r\n    static image_url = 'image_url';\r\n    static is_downloading = 'is_downloading';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static manga_cover_images = 'manga_cover_images';\r\n    static manga_cdn_cover_images = 'manga_cdn_cover_images';\r\n    static manga_on_server = 'manga_on_server';\r\n    static members = 'members';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static popularity = 'popularity';\r\n    static published_string = 'published_string';\r\n    static publishing = 'publishing';\r\n    static rank = 'rank';\r\n    static related = 'related';\r\n    static score = 'score';\r\n    static scored_by = 'scored_by';\r\n    static serialization = 'serialization';\r\n    static status = 'status';\r\n    static synopsis = 'synopsis';\r\n    static title = 'title';\r\n    static title_english = 'title_english';\r\n    static title_japanese = 'title_japanese';\r\n    static title_synonyms = 'title_synonyms';\r\n    static type = 'type';\r\n    static uuid_name = 'uuid_name';\r\n    static volumes = 'volumes';\r\n    static manga_roles = 'manga_roles';\r\n    static main_characters = 'main_characters';\r\n    static all_characters = 'all_characters';\r\n    static manga_relations = 'manga_relations';\r\n}\r\n\r\nexport const VALID_MANGA_RELATIONS = [\r\n    'manga_relation_adaptation',\r\n    'manga_relation_alternative_setting',\r\n    'manga_relation_alternative_version',\r\n    'manga_relation_sequel',\r\n    'manga_relation_prequel',\r\n    'manga_relation_side_story',\r\n    'manga_relation_spin_off',\r\n    'manga_relation_other',\r\n    'manga_relation_summary',\r\n    'manga_relation_character',\r\n    'manga_relation_parent_story',\r\n    'manga_relation_full_story'\r\n];\r\n\r\nexport const VALID_MANGA_RELATION_NAMES = {\r\n    'manga_relation_adaptation': \"Adaptation\",\r\n    'manga_relation_alternative_setting': \"Alternative Setting\",\r\n    'manga_relation_alternative_version': \"Alternative Version\",\r\n    'manga_relation_sequel': \"Sequel\",\r\n    'manga_relation_prequel': \"Prequel\",\r\n    'manga_relation_side_story': \"Side Story\",\r\n    'manga_relation_spin_off': \"Spin Off\",\r\n    'manga_relation_other': \"Other\",\r\n    'manga_relation_summary': \"Summary\",\r\n    'manga_relation_character': \"Character\",\r\n    'manga_relation_parent_story': \"Parent Story\",\r\n    'manga_relation_full_story': \"Full Story\"\r\n};\r\n\r\nexport class Character {\r\n    static id = 'id';\r\n    static character_cover_images = 'character_cover_images';\r\n    static character_cdn_cover_images = 'character_cdn_cover_images';\r\n    static anime_roles = 'anime_roles';\r\n    static manga_roles = 'manga_roles';\r\n    static uuid_name = 'uuid_name';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static approved = 'approved';\r\n    static character_name = 'name';\r\n    static nickname = 'nickname';\r\n    static short_name = 'short_name';\r\n    static image_url = 'image_url';\r\n    static anidb_image_url = 'anidb_image_url';\r\n    static ann_image_url = 'ann_image_url';\r\n    static active_image_name = 'active_image_name';\r\n    static favorites = 'favorites';\r\n    static description = 'description';\r\n    static voice_actors = 'voice_actors';\r\n    static role = 'role';\r\n    static anime_roles_defined = 'anime_roles_defined';\r\n    static manga_roles_defined = 'manga_roles_defined';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class Person {\r\n    static id = 'id';\r\n    static uuid_name = 'uuid_name';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static approved = 'approved';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static person_cover_images = 'person_cover_images';\r\n    static person_cdn_cover_images = 'person_cdn_cover_images';\r\n    static person_name = 'name';\r\n    static given_name = 'given_name';\r\n    static family_name = 'family_name';\r\n    static alternative_names = 'alternative_names';\r\n    static image_url = 'image_url';\r\n    static birthday = 'birthday';\r\n    static website = 'website';\r\n    static favorites = 'favorites';\r\n    static more_info = 'more_info';\r\n    static has_roles = 'has_roles';\r\n    static voice_actor_roles = 'voice_actor_roles';\r\n    static voice_actor_anime_roles = 'voice_actor_anime_roles';\r\n    static anime_staff_positions = 'anime_staff_positions';\r\n    static anime_staff_positions_roles = 'anime_staff_positions_roles';\r\n    static published_manga = 'published_manga';\r\n    static published_manga_roles = 'published_manga_roles';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class Eroge {\r\n    static censorship = 'censorship';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static date_updated = 'date_updated';\r\n    static description = 'description';\r\n    static download_url = 'download_url';\r\n    static downloaded = 'downloaded';\r\n    static eroge_cover_images = 'eroge_cover_images';\r\n    static eroge_screenshots = 'eroge_screenshots';\r\n    static game_location = 'game_location';\r\n    static game_url = 'game_url';\r\n    static id = 'id';\r\n    static language = 'language';\r\n    static eroge_name = 'name';\r\n    static platforms = 'platforms';\r\n    static rated_by = 'rated_by';\r\n    static rating = 'rating';\r\n    static scraped_from = 'scraped_from';\r\n    static size = 'size';\r\n    static source = 'source';\r\n    static tags = 'tags';\r\n    static type = 'type';\r\n}\r\n\r\nexport class CoverImages {\r\n    static image = 'image';\r\n}\r\n\r\nexport class CDNCoverImages {\r\n    static image_url = 'image_url';\r\n    static thumbnail_url = 'thumbnail_url';\r\n    static size = 'size';\r\n    static width = 'width';\r\n    static height = 'height';\r\n}\r\n\r\nexport class FiltersPreset {\r\n    static id = 'id';\r\n    static preset_name = 'name';\r\n    static filters = 'filters';\r\n}\r\n\r\nexport class AnimeDataStatistics {\r\n    static anime_data = 'anime_data';\r\n    static total_anime = 'total_anime';\r\n    static total_anime_deleted_mal = 'total_anime_deleted_mal';\r\n    static total_anime_pending_mal = 'total_anime_pending_mal';\r\n    static total_anime_downloaded = 'total_anime_downloaded';\r\n    static total_anime_downloading = 'total_anime_downloading';\r\n    static total_downloaded_size = 'total_downloaded_size';\r\n    static mean_score = 'mean_score';\r\n    static total_episodes = 'total_episodes';\r\n    static total_minutes = 'total_minutes';\r\n    static total_quality_2160p = 'total_quality_2160p';\r\n    static total_quality_1080p = 'total_quality_1080p';\r\n    static total_quality_960p = 'total_quality_960p';\r\n    static total_quality_720p = 'total_quality_720p';\r\n    static total_quality_576p = 'total_quality_576p';\r\n    static total_quality_560p = 'total_quality_560p';\r\n    static total_quality_540p = 'total_quality_540p';\r\n    static total_quality_528p = 'total_quality_528p';\r\n    static total_quality_480p = 'total_quality_480p';\r\n    static total_quality_396p = 'total_quality_396p';\r\n    static total_quality_360p = 'total_quality_360p';\r\n    static total_quality_288p = 'total_quality_288p';\r\n    static total_quality_240p = 'total_quality_240p';\r\n    static total_original_anime = 'total_original_anime';\r\n    static total_original_anime_mean = 'total_original_anime_mean';\r\n    static total_anime_from_light_novel = 'total_anime_from_light_novel';\r\n    static total_anime_from_light_novel_mean = 'total_anime_from_light_novel_mean';\r\n    static total_anime_from_music = 'total_anime_from_music';\r\n    static total_anime_from_music_mean = 'total_anime_from_music_mean';\r\n    static total_anime_from_manga = 'total_anime_from_manga';\r\n    static total_anime_from_manga_mean = 'total_anime_from_manga_mean';\r\n    static total_anime_from_other = 'total_anime_from_other';\r\n    static total_anime_from_other_mean = 'total_anime_from_other_mean';\r\n    static total_anime_from_visual_novel = 'total_anime_from_visual_novel';\r\n    static total_anime_from_visual_novel_mean = 'total_anime_from_visual_novel_mean';\r\n    static total_anime_from_book = 'total_anime_from_book';\r\n    static total_anime_from_book_mean = 'total_anime_from_book_mean';\r\n    static total_anime_from_game = 'total_anime_from_game';\r\n    static total_anime_from_game_mean = 'total_anime_from_game_mean';\r\n    static total_anime_from_web_manga = 'total_anime_from_web_manga';\r\n    static total_anime_from_web_manga_mean = 'total_anime_from_web_manga_mean';\r\n    static total_anime_from_novel = 'total_anime_from_novel';\r\n    static total_anime_from_novel_mean = 'total_anime_from_novel_mean';\r\n    static total_anime_from_picture_book = 'total_anime_from_picture_book';\r\n    static total_anime_from_picture_book_mean = 'total_anime_from_picture_book_mean';\r\n    static total_anime_from_card_game = 'total_anime_from_card_game';\r\n    static total_anime_from_card_game_mean = 'total_anime_from_card_game_mean';\r\n    static total_anime_from_4_kom_manga = 'total_anime_from_4_kom_manga';\r\n    static total_anime_from_4_kom_manga_mean = 'total_anime_from_4_kom_manga_mean';\r\n    static total_anime_from_digital_manga = 'total_anime_from_digital_manga';\r\n    static total_anime_from_digital_manga_mean = 'total_anime_from_digital_manga_mean';\r\n    static total_anime_from_radio = 'total_anime_from_radio';\r\n    static total_anime_from_radio_mean = 'total_anime_from_radio_mean';\r\n    static total_movie = 'total_movie';\r\n    static total_music = 'total_music';\r\n    static total_ona = 'total_ona';\r\n    static total_ova = 'total_ova';\r\n    static total_special = 'total_special';\r\n    static total_tv = 'total_tv';\r\n    static total_finished_airing = 'total_finished_airing';\r\n    static total_currently_airing = 'total_currently_airing';\r\n    static total_not_yet_aired = 'total_not_yet_aired';\r\n    static total_rated_g = 'total_rated_g';\r\n    static total_rated_pgc = 'total_rated_pgc';\r\n    static total_rated_pg13 = 'total_rated_pg13';\r\n    static total_rated_r = 'total_rated_r';\r\n    static total_rated_r_plus = 'total_rated_r_plus';\r\n    static total_rated_rx = 'total_rated_rx';\r\n    static total_rated_none = 'total_rated_none';\r\n    static total_genre_action = 'total_genre_action';\r\n    static total_genre_adventure = 'total_genre_adventure';\r\n    static total_genre_cars = 'total_genre_cars';\r\n    static total_genre_comedy = 'total_genre_comedy';\r\n    static total_genre_dementia = 'total_genre_dementia';\r\n    static total_genre_demons = 'total_genre_demons';\r\n    static total_genre_drama = 'total_genre_drama';\r\n    static total_genre_ecchi = 'total_genre_ecchi';\r\n    static total_genre_fantasy = 'total_genre_fantasy';\r\n    static total_genre_game = 'total_genre_game';\r\n    static total_genre_harem = 'total_genre_harem';\r\n    static total_genre_hentai = 'total_genre_hentai';\r\n    static total_genre_historical = 'total_genre_historical';\r\n    static total_genre_horror = 'total_genre_horror';\r\n    static total_genre_josei = 'total_genre_josei';\r\n    static total_genre_kids = 'total_genre_kids';\r\n    static total_genre_magic = 'total_genre_magic';\r\n    static total_genre_martial_arts = 'total_genre_martial_arts';\r\n    static total_genre_mecha = 'total_genre_mecha';\r\n    static total_genre_military = 'total_genre_military';\r\n    static total_genre_music = 'total_genre_music';\r\n    static total_genre_mystery = 'total_genre_mystery';\r\n    static total_genre_parody = 'total_genre_parody';\r\n    static total_genre_police = 'total_genre_police';\r\n    static total_genre_psychological = 'total_genre_psychological';\r\n    static total_genre_romance = 'total_genre_romance';\r\n    static total_genre_samurai = 'total_genre_samurai';\r\n    static total_genre_school = 'total_genre_school';\r\n    static total_genre_sci_fi = 'total_genre_sci_fi';\r\n    static total_genre_seinen = 'total_genre_seinen';\r\n    static total_genre_shoujo = 'total_genre_shoujo';\r\n    static total_genre_shoujo_ai = 'total_genre_shoujo_ai';\r\n    static total_genre_shounen = 'total_genre_shounen';\r\n    static total_genre_shounen_ai = 'total_genre_shounen_ai';\r\n    static total_genre_slice_of_life = 'total_genre_slice_of_life';\r\n    static total_genre_space = 'total_genre_space';\r\n    static total_genre_sports = 'total_genre_sports';\r\n    static total_genre_super_power = 'total_genre_super_power';\r\n    static total_genre_supernatural = 'total_genre_supernatural';\r\n    static total_genre_thriller = 'total_genre_thriller';\r\n    static total_genre_vampire = 'total_genre_vampire';\r\n    static total_genre_yaoi = 'total_genre_yaoi';\r\n    static total_genre_yuri = 'total_genre_yuri';\r\n    static anime_achievement_romance_thresholds = 'anime_achievement_romance_thresholds';\r\n    static anime_achievement_romance_info = 'anime_achievement_romance_info';\r\n    static anime_achievement_classics_thresholds = 'anime_achievement_classics_thresholds';\r\n    static anime_achievement_classics_info = 'anime_achievement_classics_info';\r\n    static anime_achievement_pervert_thresholds = 'anime_achievement_pervert_thresholds';\r\n    static anime_achievement_pervert_info = 'anime_achievement_pervert_info';\r\n    static anime_achievement_dementia_psychological_thresholds = 'anime_achievement_dementia_psychological_thresholds';\r\n    static anime_achievement_dementia_psychological_info = 'anime_achievement_dementia_psychological_info';\r\n    static anime_achievement_horror_thriller_thresholds = 'anime_achievement_horror_thriller_thresholds';\r\n    static anime_achievement_horror_thriller_info = 'anime_achievement_horror_thriller_info';\r\n    static anime_achievement_mystery_thresholds = 'anime_achievement_mystery_thresholds';\r\n    static anime_achievement_mystery_info = 'anime_achievement_mystery_info';\r\n}\r\n\r\nexport class AchievementInfo {\r\n    static title = 'title';\r\n    static requirement = 'requirement';\r\n    static tier_1 = 'tier_1';\r\n    static tier_2 = 'tier_2';\r\n    static tier_3 = 'tier_3';\r\n    static tier_4 = 'tier_4';\r\n}\r\n\r\nexport class AchievementTier {\r\n    static title = 'title';\r\n    static description = 'description';\r\n    static image = 'image';\r\n}\r\n\r\n\r\nexport class UserAnimeDisplaySettingsSchema {\r\n    static cards = 'cards';\r\n    static type = 'type';\r\n    static episodes = 'episodes';\r\n    static mins_per_ep = 'mins_per_ep';\r\n    static rating = 'rating';\r\n    static genres = 'genres';\r\n    static mal_score = 'mal_score';\r\n    static aired = 'aired';\r\n}\r\n\r\n\r\nexport class UserMangaDisplaySettingsSchema {\r\n    static cards = 'cards';\r\n    static type = 'type';\r\n    static volumes = 'volumes';\r\n    static chapters = 'chapters';\r\n    static genres = 'genres';\r\n    static mal_score = 'mal_score';\r\n    static aired = 'aired';\r\n}\r\n\r\n\r\nexport class UserErogeDisplaySettingsSchema {\r\n    static cards = 'cards';\r\n    static type = 'type';\r\n    static censorship = 'censorship';\r\n    static language = 'language';\r\n    static platforms = 'platforms';\r\n    static tags = 'tags';\r\n    static hg_score = 'hg_score';\r\n}\r\n","import React from 'react';\r\nimport {Howl} from 'howler';\r\nimport {Profile, User} from \"../../models\";\r\nimport store from \"../../store\";\r\n\r\n\r\nexport function loadSounds() {\r\n    playClickSound(0);\r\n    playHoverSound(0);\r\n    playExpand3Sound(0);\r\n    playExpand2Sound(0);\r\n    playExpandSound(0);\r\n    playErrorSound(0);\r\n    playWarningSound(0);\r\n    playDeploySound(0);\r\n}\r\n\r\nexport function playWelcomeSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/welcome.ogg'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playClickSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/click.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playDeploySound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/deploy.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playHoverSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/hover.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpandSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpand2Sound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand-2.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpand3Sound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 0.05;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand-3.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playFadeSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/fade.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playErrorSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/error.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playWarningSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/warning.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n","import {\r\n    ANIME_LOADING,\r\n    GET_ANIME,\r\n    CANCEL_ANIME_LOADING,\r\n    FILTER_ANIME,\r\n    GET_ANIME_DATA,\r\n    GET_ALL_CHARACTERS_FOR_ANIME,\r\n    GET_RELATIONS_FOR_ANIME,\r\n    GET_CURRENT_ANIME_FRANCHISE,\r\n    ANIME_FRANCHISE_LOADING,\r\n    GET_ANIME_DATA_STATISTICS, GET_ANIME_SEARCHABLE_TITLES, GET_ANIME_ACHIEVEMENT_THRESHOLDS\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Anime} from \"../models\";\r\n\r\nconst initialState = {\r\n    searchable_titles: [],\r\n\r\n    anime_loading: false,\r\n    anime: {},\r\n    anime_loaded: false,\r\n\r\n    anime_data: {},\r\n    anime_data_statistics: {},\r\n    anime_data_loaded: false,\r\n\r\n    filtered_anime: {},\r\n    filtered_anime_loaded: false,\r\n\r\n    anime_franchise_loading: false,\r\n    anime_franchise: {}\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case ANIME_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_loading: true,\r\n                anime_loaded: false,\r\n                anime_data_loaded: false,\r\n                filtered_anime_loaded: false,\r\n            };\r\n        case CANCEL_ANIME_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_loaded: false,\r\n                anime_data_loaded: false,\r\n                filtered_anime_loaded: false,\r\n            };\r\n        case GET_ANIME_SEARCHABLE_TITLES:\r\n            return {\r\n                ...state,\r\n                searchable_titles: action.payload,\r\n            };\r\n        case GET_ANIME_DATA:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_data: action.payload,\r\n                anime_data_loaded: true,\r\n            };\r\n        case GET_ANIME_DATA_STATISTICS:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_data_statistics: action.payload['anime_statistics'],\r\n                anime_data_loaded: true,\r\n            };\r\n        case GET_ANIME_ACHIEVEMENT_THRESHOLDS:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_achievement_thresholds: action.payload,\r\n            };\r\n        case GET_ANIME:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                anime: action.payload,\r\n                anime_loading: false,\r\n                anime_loaded: true\r\n            };\r\n        case FILTER_ANIME:\r\n            return {\r\n                ...state,\r\n                filtered_anime: action.payload,\r\n                anime_loading: false,\r\n                filtered_anime_loaded: true\r\n            };\r\n        case GET_ALL_CHARACTERS_FOR_ANIME:\r\n            state.anime[Anime.all_characters] = action.payload;\r\n            return {\r\n                ...state,\r\n                anime: state.anime\r\n            };\r\n        case GET_RELATIONS_FOR_ANIME:\r\n            state.anime[Anime.anime_relations] = action.payload;\r\n            return {\r\n                ...state,\r\n                anime: state.anime\r\n            };\r\n        case ANIME_FRANCHISE_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_franchise_loading: true\r\n            };\r\n        case GET_CURRENT_ANIME_FRANCHISE:\r\n            return {\r\n                ...state,\r\n                anime_franchise: action.payload,\r\n                anime_franchise_loading: false\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    MANGA_LOADING,\r\n    GET_MANGA,\r\n    CANCEL_MANGA_LOADING,\r\n    FILTER_MANGA,\r\n    GET_MANGA_DATA,\r\n    GET_ALL_CHARACTERS_FOR_MANGA,\r\n    GET_RELATIONS_FOR_MANGA\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Manga} from \"../models\";\r\n\r\nconst initialState = {\r\n    manga_loading: false,\r\n    manga: {},\r\n    manga_loaded: false,\r\n    manga_data: {},\r\n    manga_data_loaded: {},\r\n    filtered_manga: {},\r\n    filtered_manga_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case MANGA_LOADING:\r\n            return {\r\n                ...state,\r\n                manga_loading: true,\r\n                manga_loaded: false,\r\n                manga_data_loaded: false,\r\n                filtered_manga_loaded: false,\r\n            };\r\n        case CANCEL_MANGA_LOADING:\r\n            return {\r\n                ...state,\r\n                manga_loading: false,\r\n                manga_loaded: false,\r\n                manga_data_loaded: false,\r\n                filtered_manga_loaded: false,\r\n            };\r\n        case GET_MANGA_DATA:\r\n            return {\r\n                ...state,\r\n                manga_loading: false,\r\n                manga_data: action.payload,\r\n                manga_data_loaded: true,\r\n            };\r\n        case GET_MANGA:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                manga: action.payload,\r\n                manga_loading: false,\r\n                manga_loaded: true\r\n            };\r\n        case FILTER_MANGA:\r\n            return {\r\n                ...state,\r\n                filtered_manga: action.payload,\r\n                manga_loading: false,\r\n                filtered_manga_loaded: true\r\n            };\r\n        case GET_ALL_CHARACTERS_FOR_MANGA:\r\n            state.manga[Manga.all_characters] = action.payload;\r\n            return {\r\n                ...state,\r\n                manga: state.manga\r\n            };\r\n        case GET_RELATIONS_FOR_MANGA:\r\n            state.manga[Manga.manga_relations] = action.payload;\r\n            return {\r\n                ...state,\r\n                manga: state.manga\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CREATE_MESSAGE, GET_ERRORS, CLEAN_ERRORS, CLEAR_MESSAGE} from \"./types\";\n\n// CREATE MESSAGE\nexport const createMessage = (msg, type) => {\n    return {\n        type: CREATE_MESSAGE,\n        payload: {msg, type}\n    };\n};\n\n// CLEAR MESSAGE\nexport const clearMessage = () => {\n    return {\n        type: CLEAR_MESSAGE,\n    };\n};\n\n// RETURN ERRORS\nexport const returnErrors = (msg, status) => {\n    return {\n        type: GET_ERRORS,\n        payload: {msg, status}\n    };\n};\n\n// CLEAN ERRORS\nexport const cleanErrors = () => {\n    return {\n        type: CLEAN_ERRORS,\n    };\n};\n","import axios from \"axios\";\r\n\r\nimport {\r\n    AUTH_USER, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL,\r\n    GET_USER, SET_REDIRECT_URL, UPDATE_USER_DISPLAY_SETTINGS_STORE, UPDATE_USER_LIST_DESIGN_SETTINGS_STORE\r\n} from \"./types\";\r\nimport {API_AUTH_USER, API_LOGIN, API_REGISTER, API_LOGOUT, API_GET_USER} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\n\r\n\r\n// GET A SPECIFIC USER\r\nexport const getUser = id => (dispatch, getState) => {\r\n    dispatch({type: USER_LOADING});\r\n    axios\r\n        .get(API_GET_USER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// CHECK TOKEN & LOAD USER (GET LOGGED-IN USER)\r\nexport const authUser = () => (dispatch, getState) => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // noinspection JSUnusedLocalSymbols\r\n    axios\r\n        .get(API_AUTH_USER, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: AUTH_USER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n        });\r\n};\r\n\r\n// LOGIN USER\r\nexport const login = (username, password) => dispatch => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    // Request Body\r\n    const body = JSON.stringify({username, password});\r\n\r\n    axios\r\n        .post(API_LOGIN, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n// REGISTER USER\r\nexport const register = ({username, password, email}) => dispatch => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    // Request Body\r\n    const body = JSON.stringify({username, email, password});\r\n\r\n    axios\r\n        .post(API_REGISTER, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// LOGOUT USER\r\nexport const logout = () => (dispatch, getState) => {\r\n    // noinspection JSUnusedLocalSymbols\r\n    axios\r\n        .post(API_LOGOUT, null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// setRedirectUrl\r\nexport const setRedirectUrl = pathname => dispatch => {\r\n    dispatch({\r\n        type: SET_REDIRECT_URL,\r\n        payload: pathname\r\n    });\r\n};\r\n\r\n\r\n// UPDATE USER ANIME DISPLAY SETTINGS\r\nexport const updateUserDisplaySettingsStore = (branch, settings) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_USER_DISPLAY_SETTINGS_STORE,\r\n        payload: settings,\r\n        branch: branch,\r\n    });\r\n};\r\n\r\n\r\n// UPDATE USER ANIME DISPLAY SETTINGS\r\nexport const updateUserListDesignSettingsStore = (branch, settings) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_USER_LIST_DESIGN_SETTINGS_STORE,\r\n        payload: settings,\r\n        branch: branch,\r\n    });\r\n};\r\n\r\n\r\n// Setup config with token - helper function\r\nexport const tokenConfig = getState => {\r\n    const token = getState().auth.token;\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    if (token)\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    return config;\r\n};\r\n","/**\r\n * These filter names must be the same as the field names in the django api function\r\n */\r\nexport class AnimeFilterNames {\r\n    static year = 'year';\r\n    static season = 'season';\r\n    static search = 'search';\r\n    static downloaded = 'downloaded';\r\n    static is_downloading = 'is_downloading';\r\n    static cannot_download = 'cannot_download';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static anime_on_server__english_sub = 'anime_on_server__english_sub';\r\n    static anime_on_server__english_dub = 'anime_on_server__english_dub';\r\n    static anime_on_server__japanese_dub = 'anime_on_server__japanese_dub';\r\n    static anime_on_server__japanese_sub = 'anime_on_server__japanese_sub';\r\n    static type = 'type';\r\n    static status = 'status';\r\n    static rating_short = 'rating_short';\r\n    static genres = 'genres';\r\n    static episodes_range = 'episodes_range';\r\n    static length_range = 'length_range';\r\n    static video_quality = 'video_quality';\r\n    static audio_channel = 'audio_channel';\r\n    static user_exclude = 'user_exclude';\r\n    static ordering = 'ordering';\r\n\r\n    static user_list_pk = 'user_list_pk';\r\n    static user_list_filter = 'user_list_filter';\r\n}\r\n\r\nexport class MangaFilterNames {\r\n    static year = 'year';\r\n    static season = 'season';\r\n    static search = 'search';\r\n    static downloaded = 'downloaded';\r\n    static is_downloading = 'is_downloading';\r\n    static cannot_download = 'cannot_download';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static volumes_range = 'volumes_range';\r\n    static chapters_range = 'chapters_range';\r\n    static genres = 'genres';\r\n    static type = 'type';\r\n    static status = 'status';\r\n    static user_exclude = 'user_exclude';\r\n    static ordering = 'ordering';\r\n\r\n    static user_list_pk = 'user_list_pk';\r\n    static user_list_filter = 'user_list_filter';\r\n}\r\n\r\nexport class ErogeFilterNames {\r\n    static search = 'search';\r\n    static type = 'type';\r\n    static downloaded = 'downloaded';\r\n    static platforms = 'platforms';\r\n    static language = 'language';\r\n    static censorship = 'censorship';\r\n    static tags = 'tags';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class CharactersFilterNames {\r\n    static search = 'search';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class PeopleFilterNames {\r\n    static search = 'search';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class FilterLabels {\r\n    static downloaded = 'Downloaded';\r\n    static is_downloading = 'Downloading';\r\n    static cannot_download = 'Dead';\r\n    static deleted_by_MAL = 'M-DEL';\r\n    static pending_by_MAL = 'M-PEN';\r\n}\r\n\r\nexport class FilterSchema {\r\n    static filter_name = 'name';\r\n    static label = 'label';\r\n    static color = 'color';\r\n    static content = 'content';\r\n    static marks = 'marks';\r\n    static max = 'max';\r\n    static min = 'min';\r\n    static type = 'type';\r\n}\r\n\r\nexport class FilterSchemaType {\r\n    static standard = 'standard';\r\n    static component = 'component';\r\n    static wide = 'wide';\r\n    static slider = 'slider';\r\n}","import {\r\n    SET_ANIME_FILTERS, SET_CHARACTERS_FILTERS,\r\n    SET_COOKIE_SHOW_FILTERS, SET_EROGE_FILTERS,\r\n    SET_MANGA_FILTERS, SET_PEOPLE_FILTERS\r\n} from \"./types\";\r\n\r\n\r\n// SET COOKIE SHOW FILTERS\r\nexport const setCookieShowFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_COOKIE_SHOW_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE ANIME FILTERS\r\nexport const setCookieAnimeFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_ANIME_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE MANGA FILTERS\r\nexport const setCookieMangaFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_MANGA_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE CHARACTERS FILTERS\r\nexport const setCookieCharactersFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_CHARACTERS_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE CHARACTERS FILTERS\r\nexport const setCookiePeopleFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_PEOPLE_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE EROGE FILTERS\r\nexport const setCookieErogeFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_EROGE_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};","import Moment from \"react-moment\";\r\nimport React from \"react\";\r\n\r\nimport moment from 'moment'\r\nimport {CYBER_GENESIS_URL} from \"../globals\";\r\nimport {CDNCoverImages, CoverImages} from \"../models\";\r\n\r\n\r\n/**\r\n * Check if an object is empty.\r\n * @param obj {Object} Object to check\r\n * @returns {boolean} True if the object is empty.\r\n */\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport function isEmpty(obj) {\r\n    if (obj == null) return true;\r\n    if (obj.length > 0) return false;\r\n    if (obj.length === 0) return true;\r\n    if (typeof obj !== \"object\") return true;\r\n    for (let key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n /**\r\n  * Formats the date based on the known info about the date, this is used for titles from MAL\r\n  * some titles only have the year of the date, so only the year will be displayed.\r\n  * @param  {String} date          The actual date.\r\n  * @param  {String} known_date    The known date.\r\n  * @param  {Boolean} str          If the return should be string instead.\r\n  * @return {JSX.Element || String}          Moment.js component or string.\r\n  */\r\nexport function formatContentDateByKnown(date, known_date, str = false) {\r\n    if (!known_date)\r\n        return null;\r\n    if (known_date.indexOf('day') >= 0 && known_date.indexOf('month') && known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('Do MMM YYYY');\r\n        return <Moment format=\"Do MMM YYYY\" date={date}/>;\r\n    } else if (known_date.indexOf('month') >= 0 && known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('MMM YYYY');\r\n        return <Moment format=\"MMM YYYY\" date={date}/>\r\n    }\r\n    else if (known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('YYYY');\r\n        return <Moment format=\"YYYY\" date={date}/>\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * Get cols number for browse titles cards based on window width.\r\n * @returns {number}\r\n */\r\nexport function getBrowseGridListCols() {\r\n    if (window.innerWidth >= 2800)\r\n        return 9;\r\n    if (window.innerWidth >= 2400)\r\n        return 8;\r\n    else if (window.innerWidth >= 1800)\r\n        return 7;\r\n    else if (window.innerWidth >= 1450)\r\n        return 6;\r\n    else if (window.innerWidth >= 1200)\r\n        return 5;\r\n    else if (window.innerWidth >= 980)\r\n        return 4;\r\n    else if (window.innerWidth >= 720)\r\n        return 3;\r\n    return 2\r\n}\r\n\r\n/**\r\n * Parse number of bytes to human readable format.\r\n * @param size {Number}\r\n * @returns {string}\r\n */\r\nexport function formatBytes(size) {\r\n    const terabyte = 1099511627776;\r\n    const gigabyte = 1073741824;\r\n    const megabyte = 1048576;\r\n\r\n    if (size >= 10995116277760)  // More than 10TB\r\n        return `${(size / terabyte).toFixed(1)}TB`;\r\n    else if (size >= 1099511627776)  // More than 1TB\r\n        return `${(size / terabyte).toFixed(2)}TB`;\r\n    else if (size >= 107374182400) // More than 100GB\r\n        return `${Math.ceil(size / gigabyte)}GB`;\r\n    else if (size >= 10737418240) // More than 10GB\r\n        return `${(size / gigabyte).toFixed(1)}GB`;\r\n    else if (size >= 1073741824) // More than 1GB\r\n        return `${(size / gigabyte).toFixed(2)}GB`;\r\n    else  // Less then 1GB\r\n        return `${Math.ceil(size / megabyte)}MB`;\r\n}\r\n\r\n\r\n/**\r\n * Returns a label representation of the season number sent.\r\n * @param season {Number} Season number.\r\n * @returns {string} Season label.\r\n */\r\nexport function getSeasonLabelFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1:\r\n            return 'Spring';\r\n        case 2:\r\n            return 'Summer';\r\n        case 3:\r\n            return 'Fall';\r\n        case 4:\r\n            return 'Winter';\r\n        default:\r\n            return 'Spring';\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * The program sleeps for the X ms provided.\r\n * @param ms {Number} Milliseconds for the program to sleep\r\n */\r\nexport function sleep(ms) {\r\n    let start = new Date().getTime();\r\n    let end = start;\r\n    while (end < start + ms) end = new Date().getTime();\r\n}\r\n\r\n\r\n/**\r\n * Converts a given date from CEST/UTC to local user time\r\n * @param date {Date} Date to convert\r\n * @returns {Date} returns a calculated Date in local user time\r\n */\r\nexport function convertUTCDateToLocalDate(date) {\r\n    let newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);\r\n\r\n    let offset = date.getTimezoneOffset() / 60;\r\n    let hours = date.getHours();\r\n\r\n    newDate.setHours(hours - offset);\r\n\r\n    return newDate;\r\n}\r\n\r\n\r\n/**\r\n * Get a cover picture for a title, prioritise the CDN image, and prioritise them by size.\r\n * @param {array} cdn_cover_images\r\n * @param {array} cover_images\r\n * @param {boolean} thumbnail: If true, try to return the thumbnail image\r\n * @returns {string}\r\n */\r\nexport function getTitleCoverImage(cdn_cover_images=[], cover_images=[], thumbnail=false) {\r\n    let img_url = `${CYBER_GENESIS_URL}/frontend/static/frontend/images/image-not-found.png`;\r\n    const len_cdn_images = cdn_cover_images.length;\r\n    const len_images = cover_images.length;\r\n\r\n    if (len_cdn_images > 0) {\r\n        if (len_cdn_images > 0) {\r\n            let largest = 0;\r\n            for (let x = 0; x < len_cdn_images; x ++) {\r\n                if (cdn_cover_images[x][CDNCoverImages.size] > largest) {\r\n                    largest = cdn_cover_images[x][CDNCoverImages.size];\r\n                    if (thumbnail)\r\n                        img_url = cdn_cover_images[x][CDNCoverImages.thumbnail_url];\r\n                    else\r\n                        img_url = cdn_cover_images[x][CDNCoverImages.image_url];\r\n                }\r\n            }\r\n        }\r\n    } else if (len_images > 0) {\r\n        if (len_images > 0) {\r\n            if (cover_images[len_images - 1][CoverImages.image][0] === '/')\r\n                img_url = `${CYBER_GENESIS_URL}${cover_images[len_images - 1][CoverImages.image]}`;\r\n            else\r\n                img_url = cover_images[len_images - 1][CoverImages.image];\r\n        }\r\n    }\r\n\r\n    return img_url\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} priority\r\n */\r\nexport function userTitlePriorityNumberToText(priority) {\r\n    if (priority === 4) return 'Very High'\r\n    if (priority === 3) return 'High'\r\n    if (priority === 2) return 'Medium'\r\n    if (priority === 1) return 'Low'\r\n    if (priority === 0) return 'Very Low'\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} statuses\r\n * @param {Number} title_id\r\n */\r\nexport function isIdInStatuses(statuses, title_id) {\r\n    return statuses.hasOwnProperty(title_id)\r\n}\r\n\r\n\r\nconst REFERENCE = moment();\r\nconst TODAY = REFERENCE.clone().startOf('day');\r\nconst YESTERDAY = REFERENCE.clone().subtract(1, 'days').startOf('day');\r\nconst A_WEEK_OLD = REFERENCE.clone().subtract(7, 'days').startOf('day');\r\nconst A_MONTH_OLD = REFERENCE.clone().subtract(30, 'days').startOf('day');\r\nconst SIX_MONTHS_OLD = REFERENCE.clone().subtract(180, 'days').startOf('day');\r\nconst A_YEAR_OLD = REFERENCE.clone().subtract(1, 'years').startOf('years');\r\nconst TWO_YEARS_OLD = REFERENCE.clone().subtract(2, 'years').startOf('years');\r\n\r\nexport function isTimeLessThanAnHourAgo(last_login) {\r\n    const ONE_HOUR = 60 * 60 * 1000; /* ms */\r\n    return ((new Date) - last_login) < ONE_HOUR;\r\n}\r\n\r\nexport function isTimeLessThanSixHoursAgo(last_login) {\r\n    const ONE_HOUR = 60 * 60 * 1000; /* ms */\r\n    return ((new Date) - last_login) < ONE_HOUR * 6;\r\n}\r\n\r\nexport function isToday(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isSame(TODAY, 'd');\r\n}\r\nexport function isYesterday(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isSame(YESTERDAY, 'd');\r\n}\r\nexport function isWithinAWeek(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_WEEK_OLD);\r\n}\r\nexport function isWithinAMonth(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_MONTH_OLD);\r\n}\r\nexport function isWithinSixMonths(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(SIX_MONTHS_OLD);\r\n}\r\nexport function isWithinAYear(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_YEAR_OLD);\r\n}\r\nexport function isMoreThanAYear(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(TWO_YEARS_OLD);\r\n}","import axios from 'axios';\r\n\r\nimport {\r\n    GET_ANIME,\r\n    ANIME_LOADING,\r\n    FILTER_ANIME,\r\n    CANCEL_ANIME_LOADING,\r\n    GET_ANIME_DATA,\r\n    GET_ALL_CHARACTERS_FOR_ANIME,\r\n    CHARACTERS_LOADING,\r\n    GET_RELATIONS_FOR_ANIME,\r\n    ANIME_FRANCHISE_LOADING,\r\n    GET_CURRENT_ANIME_FRANCHISE,\r\n    UPDATE_USER_ENTRY_IN_FILTERED_USER_ANIME_ENTRIES,\r\n    GET_ANIME_DATA_STATISTICS,\r\n    GET_ANIME_SEARCHABLE_TITLES, GET_ANIME_ACHIEVEMENT_THRESHOLDS\r\n} from './types'\r\nimport {\r\n    API_FILTER_ANIME,\r\n    API_GET_ALL_CHARACTERS_FOR_ANIME, API_GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n    API_GET_ANIME_DATA,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_ANIME_DATA_WITH_STATISTICS,\r\n    API_GET_ANIME_FRANCHISE,\r\n    API_GET_ANIME_SEARCHABLE_TITLES,\r\n    API_GET_ONE_ANIME,\r\n    API_GET_RELATIONS_FOR_ANIME\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {AnimeFilterNames, MangaFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {setCookieAnimeFilters} from \"./cookies\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {TYPE_BROWSE, TYPE_LIST, TYPE_SEASON, USER_ANIME_ORDERINGS} from \"../globals\";\r\nimport {tokenConfig} from \"./auth\";\r\n\r\n\r\n// GET ANIME DATA\r\nexport const getAnimeData = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ANIME_DATA, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME DATA FOR ANIME HOME PAGE\r\nexport const getAnimeDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME DATA WITH STATISTICS\r\nexport const getAnimeDataWithStatistics = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ANIME_DATA_WITH_STATISTICS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA_STATISTICS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME ACHIEVEMENTS THRESHOLDS\r\nexport const getAnimeAchievementsThresholds = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_ACHIEVEMENT_THRESHOLDS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A ONE ANIME\r\nexport const getAnime = id => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ONE_ANIME(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ALL CHARACTERS FOR ANIME\r\nexport const getAllCharactersForAnime = (id, page) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ALL_CHARACTERS_FOR_ANIME(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_CHARACTERS_FOR_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET RELATIONS FOR ANIME\r\nexport const getRelationsForAnime = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_RELATIONS_FOR_ANIME(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_RELATIONS_FOR_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME SPECIFIC FRANCHISE\r\nexport const getAnimeFranchise = (id) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_FRANCHISE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_FRANCHISE(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CURRENT_ANIME_FRANCHISE,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {})\r\n};\r\n\r\n\r\n// GET ANIME SEARCHABLE TITLES\r\nexport const getAnimeSearchableTitles = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_ANIME_SEARCHABLE_TITLES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_SEARCHABLE_TITLES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {})\r\n};\r\n\r\n\r\n// FILTER ALL ANIME\r\nexport const filterAnime = (page, filters, season, list, loading = true, save_cookie = true) => (dispatch, getState) => {\r\n    if (loading)\r\n        dispatch({type: ANIME_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n    if (season !== undefined && season !== 'undefined' && !isEmpty(season)) {\r\n        config.params = setAnimeSeasonParams(config.params, season);\r\n        page_type = TYPE_SEASON;\r\n    }\r\n    if (list !== undefined && list !== 'undefined' && !isEmpty(list)) {\r\n        config.params = setAnimeListParams(config.params, list);\r\n        page_type = TYPE_LIST;\r\n    } else if (USER_ANIME_ORDERINGS.indexOf(config.params[AnimeFilterNames.ordering].replace('-', '')) > -1)\r\n        config.params[AnimeFilterNames.ordering] = '-members';\r\n\r\n    axios\r\n        .get(API_FILTER_ANIME, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_ANIME,\r\n                payload: res.data\r\n            });\r\n            if (save_cookie && filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieAnimeFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// CANCEL ANIME LOADING\r\nexport const cancelAnimeLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_ANIME_LOADING,\r\n    })\r\n};\r\n\r\n\r\nexport function setAnimeFilterParams(params, filters) {\r\n    if (filters[AnimeFilterNames.search] && typeof filters[AnimeFilterNames.search] == 'string') params[AnimeFilterNames.search] = filters[AnimeFilterNames.search];\r\n    if (filters[AnimeFilterNames.downloaded]) params[AnimeFilterNames.downloaded] = filters[AnimeFilterNames.downloaded];\r\n    if (filters[AnimeFilterNames.is_downloading]) params[AnimeFilterNames.is_downloading] = filters[AnimeFilterNames.is_downloading];\r\n    if (filters[AnimeFilterNames.cannot_download]) params[AnimeFilterNames.cannot_download] = filters[AnimeFilterNames.cannot_download];\r\n    if (filters[AnimeFilterNames.deleted_by_MAL]) params[AnimeFilterNames.deleted_by_MAL] = filters[AnimeFilterNames.deleted_by_MAL];\r\n    if (filters[AnimeFilterNames.pending_by_MAL]) params[AnimeFilterNames.pending_by_MAL] = filters[AnimeFilterNames.pending_by_MAL];\r\n    if (filters[AnimeFilterNames.anime_on_server__english_sub])\r\n        params[AnimeFilterNames.anime_on_server__english_sub] = filters[AnimeFilterNames.anime_on_server__english_sub];\r\n    if (filters[AnimeFilterNames.anime_on_server__english_dub])\r\n        params[AnimeFilterNames.anime_on_server__english_dub] = filters[AnimeFilterNames.anime_on_server__english_dub];\r\n    if (filters[AnimeFilterNames.anime_on_server__japanese_sub])\r\n        params[AnimeFilterNames.anime_on_server__japanese_sub] = filters[AnimeFilterNames.anime_on_server__japanese_sub];\r\n    if (filters[AnimeFilterNames.anime_on_server__japanese_dub])\r\n        params[AnimeFilterNames.anime_on_server__japanese_dub] = filters[AnimeFilterNames.anime_on_server__japanese_dub];\r\n    if (filters[AnimeFilterNames.episodes_range].length > 0) params[AnimeFilterNames.episodes_range] = filters[AnimeFilterNames.episodes_range].join();\r\n    if (filters[AnimeFilterNames.length_range].length > 0) params[AnimeFilterNames.length_range] = filters[AnimeFilterNames.length_range].join();\r\n    if (filters[AnimeFilterNames.genres].length > 0) params[AnimeFilterNames.genres] = filters[AnimeFilterNames.genres].join();\r\n    if (filters[AnimeFilterNames.type].length > 0) params[AnimeFilterNames.type] = filters[AnimeFilterNames.type].join();\r\n    if (filters[AnimeFilterNames.status].length > 0) params[AnimeFilterNames.status] = filters[AnimeFilterNames.status].join();\r\n    if (filters[AnimeFilterNames.rating_short].length > 0) params[AnimeFilterNames.rating_short] = filters[AnimeFilterNames.rating_short].join();\r\n    if (filters[AnimeFilterNames.video_quality].length > 0) params[AnimeFilterNames.video_quality] = filters[AnimeFilterNames.video_quality].join();\r\n    if (filters[AnimeFilterNames.audio_channel].length > 0) params[AnimeFilterNames.audio_channel] = filters[AnimeFilterNames.audio_channel].join();\r\n    if (filters[AnimeFilterNames.user_exclude].length > 0) params[AnimeFilterNames.user_exclude] = filters[AnimeFilterNames.user_exclude].join();\r\n    if (filters[AnimeFilterNames.ordering]) params[AnimeFilterNames.ordering] = filters[AnimeFilterNames.ordering];\r\n    return params\r\n}\r\n\r\nfunction setAnimeSeasonParams(params, season) {\r\n    params[AnimeFilterNames.year] = season[AnimeFilterNames.year];\r\n    params[AnimeFilterNames.season] = season[AnimeFilterNames.season];\r\n    return params\r\n}\r\n\r\nfunction setAnimeListParams(params, list) {\r\n    params[AnimeFilterNames.user_list_filter] = list[AnimeFilterNames.user_list_filter];\r\n    params[AnimeFilterNames.user_list_pk] = list[AnimeFilterNames.user_list_pk];\r\n    if (params[AnimeFilterNames.user_exclude] && params[AnimeFilterNames.user_exclude].length > 0)\r\n        params[AnimeFilterNames.user_exclude] = null;\r\n    return params\r\n}\r\n","import {\r\n    MANGA_LOADING,\r\n    CANCEL_MANGA_LOADING,\r\n    GET_MANGA,\r\n    FILTER_MANGA,\r\n    GET_MANGA_DATA,\r\n    GET_ALL_CHARACTERS_FOR_MANGA,\r\n    GET_RELATIONS_FOR_MANGA, CANCEL_CHARACTERS_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_MANGA,\r\n    API_GET_ALL_CHARACTERS_FOR_MANGA,\r\n    API_GET_MANGA_DATA, API_GET_MANGA_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_MANGA,\r\n    API_GET_RELATIONS_FOR_MANGA\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {MangaFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {setCookieMangaFilters} from \"./cookies\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {TYPE_BROWSE, TYPE_LIST, TYPE_SEASON, USER_MANGA_ORDERINGS} from \"../globals\";\r\n\r\n\r\n// GET MANGA DATA\r\nexport const getMangaData = () => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n    axios\r\n        .get(API_GET_MANGA_DATA, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET MANGA DATA FOR MANGA HOME PAGE\r\nexport const getMangaDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_MANGA_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A ONE MANGA\r\nexport const getManga = id => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_MANGA(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ALL CHARACTERS FOR MANGA\r\nexport const getAllCharactersForManga = (id, page) => (dispatch, getState) => {\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ALL_CHARACTERS_FOR_MANGA(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_CHARACTERS_FOR_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET RELATIONS FOR MANGA\r\nexport const getRelationsForManga = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_RELATIONS_FOR_MANGA(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_RELATIONS_FOR_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL MANGA\r\nexport const filterManga = (page, filters, season, list, loading = true, save_cookie = true) => (dispatch, getState) => {\r\n    if (loading)\r\n        dispatch({type: MANGA_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n    if (season !== undefined && season !== 'undefined' && !isEmpty(season)) {\r\n        config.params = setMangaSeasonParams(config.params, season);\r\n        page_type = TYPE_SEASON;\r\n    }\r\n    if (list !== undefined && list !== 'undefined' && !isEmpty(list)) {\r\n        config.params = setMangaListParams(config.params, list);\r\n        page_type = TYPE_LIST;\r\n    } else if (USER_MANGA_ORDERINGS.indexOf(config.params[MangaFilterNames.ordering].replace('-', '')) > -1)\r\n        config.params[MangaFilterNames.ordering] = '-members';\r\n\r\n    axios\r\n        .get(API_FILTER_MANGA, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_MANGA,\r\n                payload: res.data\r\n            });\r\n            if (save_cookie && filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieMangaFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setMangaFilterParams(params, filters) {\r\n    if (filters[MangaFilterNames.search] && typeof filters[MangaFilterNames.search] == 'string') params[MangaFilterNames.search] = filters[MangaFilterNames.search];\r\n    if (filters[MangaFilterNames.downloaded]) params[MangaFilterNames.downloaded] = filters[MangaFilterNames.downloaded];\r\n    if (filters[MangaFilterNames.is_downloading]) params[MangaFilterNames.is_downloading] = filters[MangaFilterNames.is_downloading];\r\n    if (filters[MangaFilterNames.cannot_download]) params[MangaFilterNames.cannot_download] = filters[MangaFilterNames.cannot_download];\r\n    if (filters[MangaFilterNames.deleted_by_MAL]) params[MangaFilterNames.deleted_by_MAL] = filters[MangaFilterNames.deleted_by_MAL];\r\n    if (filters[MangaFilterNames.pending_by_MAL]) params[MangaFilterNames.pending_by_MAL] = filters[MangaFilterNames.pending_by_MAL];\r\n    if (filters[MangaFilterNames.volumes_range].length > 0) params[MangaFilterNames.volumes_range] = filters[MangaFilterNames.volumes_range].join();\r\n    if (filters[MangaFilterNames.chapters_range].length > 0) params[MangaFilterNames.chapters_range] = filters[MangaFilterNames.chapters_range].join();\r\n    if (filters[MangaFilterNames.genres].length > 0) params[MangaFilterNames.genres] = filters[MangaFilterNames.genres].join();\r\n    if (filters[MangaFilterNames.type].length > 0) params[MangaFilterNames.type] = filters[MangaFilterNames.type].join();\r\n    if (filters[MangaFilterNames.status].length > 0) params[MangaFilterNames.status] = filters[MangaFilterNames.status].join();\r\n    if (filters[MangaFilterNames.user_exclude].length > 0) params[MangaFilterNames.user_exclude] = filters[MangaFilterNames.user_exclude].join();\r\n    if (filters[MangaFilterNames.ordering]) params[MangaFilterNames.ordering] = filters[MangaFilterNames.ordering];\r\n    return params\r\n}\r\n\r\nexport function setMangaSeasonParams(params, season) {\r\n    params[MangaFilterNames.year] = season[MangaFilterNames.year];\r\n    params[MangaFilterNames.season] = season[MangaFilterNames.season];\r\n    return params\r\n}\r\n\r\nexport function setMangaListParams(params, season) {\r\n    params[MangaFilterNames.user_list_filter] = season[MangaFilterNames.user_list_filter];\r\n    params[MangaFilterNames.user_list_pk] = season[MangaFilterNames.user_list_pk];\r\n    if (params[MangaFilterNames.user_exclude] && params[MangaFilterNames.user_exclude].length > 0)\r\n        params[MangaFilterNames.user_exclude] = null;\r\n    return params\r\n}\r\n\r\n\r\n// CANCEL MANGA LOADING\r\nexport const cancelMangaLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_MANGA_LOADING,\r\n    })\r\n};\r\n","import axios from \"axios\";\r\n\r\nimport {\r\n    ANIME_LOADING,\r\n    CANCEL_EROGE_LOADING,\r\n    EROGE_LOADING,\r\n    FILTER_EROGE, GET_ANIME_DATA,\r\n    GET_EROGE, GET_EROGE_DATA\r\n} from \"./types\";\r\nimport {\r\n    API_FILTER_EROGE,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_EROGE_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_EROGE\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieErogeFilters} from \"./cookies\";\r\nimport {ErogeFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {TYPE_BROWSE} from \"../globals\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\n\r\n\r\n// GET A ONE EROGE\r\nexport const getEroge = id => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_EROGE(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET EROGE DATA FOR EROGE HOME PAGE\r\nexport const getErogeDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_EROGE_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL EROGE\r\nexport const filterEroge = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_EROGE, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_EROGE,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieErogeFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setErogeFilterParams(params, filters) {\r\n    if (filters[ErogeFilterNames.search] && typeof filters[ErogeFilterNames.search] == 'string') params[ErogeFilterNames.search] = filters[ErogeFilterNames.search];\r\n    if (filters[ErogeFilterNames.downloaded]) params[ErogeFilterNames.downloaded] = filters[ErogeFilterNames.downloaded];\r\n    if (filters[ErogeFilterNames.type].length > 0) params[ErogeFilterNames.type] = filters[ErogeFilterNames.type].join();\r\n    if (filters[ErogeFilterNames.platforms].length > 0) params[ErogeFilterNames.platforms] = filters[ErogeFilterNames.platforms].join();\r\n    if (filters[ErogeFilterNames.censorship].length > 0) params[ErogeFilterNames.censorship] = filters[ErogeFilterNames.censorship].join();\r\n    if (filters[ErogeFilterNames.language].length > 0) params[ErogeFilterNames.language] = filters[ErogeFilterNames.language].join();\r\n    if (filters[ErogeFilterNames.tags].length > 0) params[ErogeFilterNames.tags] = filters[ErogeFilterNames.tags].join();\r\n    if (filters[ErogeFilterNames.ordering]) params[ErogeFilterNames.ordering] = filters[ErogeFilterNames.ordering];\r\n    return params\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA,\r\n    store_reducer_cookies,\r\n    store_reducers,\r\n    USER_ANIME_STATUSES,\r\n    USER_MANGA_STATUSES\r\n} from \"../globals\";\r\nimport {\r\n    API_CHANGE_USER_PROFILE_IMAGE,\r\n    API_DELETE_ANIME_HISTORY_ENTRY,\r\n    API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY,\r\n    API_DELETE_MANGA_VOLUME_HISTORY_ENTRY,\r\n    API_EDIT_USER_BIO,\r\n    API_GET_ALL_USERS,\r\n    API_GET_USER_LIST,\r\n    API_GET_VISITED_USER_ANIME_HISTORY,\r\n    API_GET_VISITED_USER_MANGA_HISTORY,\r\n    API_IMPORT_MAL_XML_FOR_ANIME_LIST,\r\n    API_UPDATE_AND_GET_USER_ANIME_STATISTICS,\r\n    API_UPDATE_USER_LIST,\r\n    API_USER_ANIME_ENTRY,\r\n    API_USER_ANIME_ENTRY_NOID,\r\n    API_USER_ANIME_ENTRY_STATUSES,\r\n    API_USER_ANIME_UPDATE_EPISODE,\r\n    API_USER_ANIME_FILTERS_PRESET,\r\n    API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_USER_MANGA_ENTRY,\r\n    API_USER_MANGA_ENTRY_NOID,\r\n    API_USER_MANGA_ENTRY_STATUSES,\r\n    API_USER_MANGA_UPDATE_CHAPTER,\r\n    API_USER_MANGA_UPDATE_VOLUME,\r\n    API_USER_MANGA_FILTERS_PRESET,\r\n    API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_CHANGE_CYBER_SOUND_STATUS,\r\n    API_ADD_TO_FAVORITES,\r\n    API_REMOVE_FROM_FAVORITES,\r\n    API_EDIT_USER_ABOUT_ME_BBCODE,\r\n    API_USER_EROGE_FILTERS_PRESET,\r\n    API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_SCRAPE_EPISODE_HISTORY_FROM_MAL,\r\n    API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES,\r\n    API_GET_USER_ACHIEVEMENTS,\r\n    API_IMPORT_MAL_XML_FOR_MANGA_LIST,\r\n    API_SET_ANIME_LIST_TO_PRIVATE,\r\n    API_SET_ANIME_LIST_TO_PUBLIC,\r\n    API_SET_ANIME_HISTORY_TO_PRIVATE,\r\n    API_SET_ANIME_HISTORY_TO_PUBLIC,\r\n    API_SET_MANGA_LIST_TO_PRIVATE,\r\n    API_SET_MANGA_LIST_TO_PUBLIC,\r\n    API_SET_MANGA_HISTORY_TO_PRIVATE,\r\n    API_SET_MANGA_HISTORY_TO_PUBLIC,\r\n    API_EDIT_USER_ABOUT_ME_BACKGROUND,\r\n    API_UPDATE_USER_ANIME_DISPLAY_SETTINGS,\r\n    API_UPDATE_USER_MANGA_DISPLAY_SETTINGS,\r\n    API_UPDATE_USER_EROGE_DISPLAY_SETTINGS, API_UPDATE_USER_ANIME_LIST_SETTINGS, API_UPDATE_USER_MANGA_LIST_SETTINGS,\r\n} from \"./api_urls\";\r\nimport {\r\n    AUTH_USER,\r\n    CANCEL_USER_ACHIEVEMENTS_LOADING,\r\n    CANCEL_USER_LIST_LOADING,\r\n    CLEAR_USER_ACHIEVEMENTS,\r\n    CLEAR_USER_ANIME_ENTRY,\r\n    CLEAR_USER_MANGA_ENTRY,\r\n    FINISH_LOADING_USER_ENTRY,\r\n    FINISH_UPLOADING_FILE,\r\n    GET_ALL_USERS,\r\n    GET_ANIME_FILTER_PRESETS,\r\n    GET_EROGE_FILTER_PRESETS,\r\n    GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    GET_MANGA_FILTER_PRESETS,\r\n    GET_PROFILE_PRIVACY_SETTINGS,\r\n    GET_USER_ACHIEVEMENTS,\r\n    GET_USER_ANIME_ENTRY,\r\n    GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    GET_USER_LIST,\r\n    GET_USER_MANGA_ENTRY,\r\n    GET_VISITED_USER_ANIME_HISTORY,\r\n    GET_VISITED_USER_MANGA_HISTORY,\r\n    SET_ANIME_PRESET,\r\n    SET_EROGE_PRESET,\r\n    SET_MANGA_PRESET,\r\n    UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    UPDATE_USER_ANIME_BROWSE_SETTINGS, UPDATE_USER_ANIME_LIST_SETTINGS,\r\n    UPDATE_USER_ANIME_STATISTICS,\r\n    UPDATE_USER_EROGE_BROWSE_SETTINGS,\r\n    UPDATE_USER_LIST,\r\n    UPDATE_USER_MANGA_BROWSE_SETTINGS, UPDATE_USER_MANGA_LIST_SETTINGS,\r\n    UPLOAD_ANIME_LIST_MAL_XML,\r\n    UPLOAD_MANGA_LIST_MAL_XML,\r\n    UPLOADING_FILE,\r\n    USER_ACHIEVEMENTS_LOADING,\r\n    USER_ENTRY_LOADING,\r\n    USER_INFO_LOADING,\r\n    USER_LIST_LOADING,\r\n    USER_STATISTICS_LOADING\r\n} from \"./types\";\r\nimport store from \"../store\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\nimport {authUser, getUser, tokenConfig, updateUserDisplaySettingsStore, updateUserListDesignSettingsStore} from \"./auth\";\r\nimport {Alert} from \"../models\";\r\nimport {filterAnime, setAnimeFilterParams} from \"./anime\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {filterManga, setMangaFilterParams} from \"./manga\";\r\nimport {setErogeFilterParams} from \"./eroge\";\r\n\r\n\r\n// GET ALL USERS\r\nexport const getAllUsers = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_ALL_USERS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_USERS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET FILTER PRESETS\r\nexport const getAnimeFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_ANIME_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE FILTER PRESET\r\nexport const saveAnimeFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_ANIME_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateAnimeFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteAnimeFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET MANGA FILTER PRESETS\r\nexport const getMangaFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_MANGA_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE MANGA FILTER PRESET\r\nexport const saveMangaFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_MANGA_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateMangaFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteMangaFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET FILTER PRESETS\r\nexport const getErogeFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_EROGE_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE FILTER PRESET\r\nexport const saveErogeFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_EROGE_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateErogeFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteErogeFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPLOAD COVER IMAGE AND UPDATE THE USER\r\nexport const updateUserProfileImage = (file, id) => (dispatch, getState) => {\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_CHANGE_USER_PROFILE_IMAGE, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Profile Image changed successfully!', Alert.type_success));\r\n            dispatch({type: FINISH_UPLOADING_FILE});\r\n            dispatch(getUser(id));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: FINISH_UPLOADING_FILE});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPLOAD XML FILE IN MAL FORMAT TO UPDATE THE ANIME LIST\r\nexport const importMalXmlForAnimeList = file => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    dispatch(createMessage('Importing Anime List..', Alert.type_info));\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_IMPORT_MAL_XML_FOR_ANIME_LIST, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Anime List imported successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: UPLOAD_ANIME_LIST_MAL_XML,\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        });\r\n};\r\n\r\n\r\n// UPLOAD XML FILE IN MAL FORMAT TO UPDATE THE MANGA LIST\r\nexport const importMalXmlForMangaList = file => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    dispatch(createMessage('Importing Manga List..', Alert.type_info));\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_IMPORT_MAL_XML_FOR_MANGA_LIST, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Manga List imported successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: UPLOAD_MANGA_LIST_MAL_XML,\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        });\r\n};\r\n\r\n\r\n// SCRAPE USER ANIME EPISODE HISTORY FROM MAL\r\nexport const scrapeEpisodeHistoryFromMal = (malhlogsessid, malsessionid) => (dispatch, getState) => {\r\n    const formData = new FormData();\r\n    console.log('MAL COOKIES:', malhlogsessid, malsessionid);\r\n    formData.append('MALHLOGSESSID', malhlogsessid);\r\n    formData.append('MALSESSIONID', malsessionid);\r\n\r\n    const config = tokenConfig(getState);\r\n\r\n    dispatch({type: USER_LIST_LOADING});\r\n\r\n    axios\r\n        .post(API_SCRAPE_EPISODE_HISTORY_FROM_MAL, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('The scraper has started successfully. This may last up to few hours ' +\r\n                'depending on your list size.', Alert.type_info));\r\n            dispatch({\r\n                type: GET_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_USER_LIST_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// EDIT USER'S BIO\r\nexport const editUserBio = (bio) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('bio', bio);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_BIO, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User bio changed successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// EDIT USER'S ABOUT ME BBCODE\r\nexport const editUserAboutMeBBCode = (bbcode) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('bbcode', bbcode);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_ABOUT_ME_BBCODE, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User About me BBCode changed successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n\r\n// EDIT USER'S ABOUT ME BACKGROUND\r\nexport const editUserAboutMeBackground = (background_style) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('background_style', JSON.stringify(background_style));\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_ABOUT_ME_BACKGROUND, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User About me Background updated successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// GET USER LISTS\r\nexport const getUserList = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_GET_USER_LIST(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// ANIME USER ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// UPDATE & GET USER ANIME STATISTICS\r\nexport const updateAndGetUserAnimeStatistics = id => (dispatch, getState) => {\r\n    dispatch({type: USER_STATISTICS_LOADING});\r\n    axios\r\n        .get(API_UPDATE_AND_GET_USER_ANIME_STATISTICS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Stats updated!', Alert.type_success));\r\n            dispatch({\r\n                type: UPDATE_USER_ANIME_STATISTICS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            // if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            // else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET USER VISITED USER ANIME HISTORY\r\nexport const getVisitedUserAnimeHistory = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: USER_INFO_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    if (page && page !== 1) config.params = {'page': page};\r\n\r\n    axios\r\n        .get(API_GET_VISITED_USER_ANIME_HISTORY(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_VISITED_USER_ANIME_HISTORY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {});\r\n};\r\n\r\n\r\n// UPDATE USER ANIME STATISTICS\r\nexport const updateUserList = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_UPDATE_USER_LIST(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: UPDATE_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET_USER_ACHIEVEMENTS\r\nexport const getUserAchievements = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ACHIEVEMENTS_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_USER_ACHIEVEMENTS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ACHIEVEMENTS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_USER_ACHIEVEMENTS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// CLEAR_USER_ACHIEVEMENTS\r\nexport const clearUserAchievements = () => dispatch => {\r\n    dispatch({\r\n        type: CLEAR_USER_ACHIEVEMENTS,\r\n    })\r\n};\r\n\r\n\r\n// GET USER ANIME ENTRY\r\n/**\r\n * Pass the Anime ID corresponding to the user entry\r\n * @param id {Number} Anime ID\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const getUserAnimeEntry = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .get(API_USER_ANIME_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: CLEAR_USER_ANIME_ENTRY,\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// ADD/CREATE USER ANIME ENTRY\r\nexport const addAnimeEntry = entryInfo => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entryInfo);\r\n\r\n    axios\r\n        .post(API_USER_ANIME_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime added!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// INSTANT DROP AN ANIME\r\nexport const addAnimeEntryInstantDrop = (id) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    const body = JSON.stringify({\r\n        anime: id,\r\n        watched_episodes: 0,\r\n        start_date: new Date(),\r\n        finish_date: new Date(),\r\n        score: 0,\r\n        status: USER_ANIME_STATUSES.dropped,\r\n        times_watched: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rewatching: false,\r\n        rewatching_episode: 0,\r\n    });\r\n\r\n    axios\r\n        .post(API_USER_ANIME_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime dropped!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE USER ANIME ENTRY\r\nexport const updateAnimeEntry = (id, entry_info, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entry_info);\r\n\r\n    axios\r\n        .put(API_USER_ANIME_ENTRY(id), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Entry updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_ANIME_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE ANIME EPISODE\r\nexport const updateAnimeEpisode = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .post(API_USER_ANIME_UPDATE_EPISODE(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Episode updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_ANIME_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// DELETE USER ANIME ENTRY\r\n/**\r\n *\r\n * @param {Number} id - ID of the anime\r\n * @param {Object} list\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const deleteAnimeEntry = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .delete(API_USER_ANIME_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime deleted', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: CLEAR_USER_ANIME_ENTRY,\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// DELETE USER ANIME ENTRY HISTORY\r\nexport const deleteAnimeHistoryEntry = (history_id, anime_id) => (dispatch, getState) => {\r\n\r\n    axios\r\n        .delete(API_DELETE_ANIME_HISTORY_ENTRY(history_id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('History entry deleted!', Alert.type_success));\r\n            dispatch(getUserAnimeEntry(anime_id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// MANGA USER ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// GET USER VISITED USER MANGA HISTORY\r\nexport const getVisitedUserMangaHistory = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: USER_INFO_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    if (page && page !== 1) config.params = {'page': page};\r\n\r\n    axios\r\n        .get(API_GET_VISITED_USER_MANGA_HISTORY(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_VISITED_USER_MANGA_HISTORY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {});\r\n};\r\n\r\n\r\n// GET USER MANGA ENTRY\r\n/**\r\n * Pass the Manga ID corresponding to the user entry\r\n * @param id {Number} Manga ID\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const getUserMangaEntry = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .get(API_USER_MANGA_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: CLEAR_USER_MANGA_ENTRY,\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// ADD/CREATE USER MANGA ENTRY\r\nexport const addMangaEntry = entryInfo => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entryInfo);\r\n\r\n    axios\r\n        .post(API_USER_MANGA_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga added!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// INSTANT DROP A MANGA\r\nexport const addMangaEntryInstantDrop = (id) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    const initial_values = {\r\n        manga: id,\r\n        read_volumes: 0,\r\n        read_chapters: 0,\r\n        start_date: new Date(),\r\n        finish_date: new Date(),\r\n        score: 0,\r\n        status: USER_MANGA_STATUSES.dropped,\r\n        times_read: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rereading: false,\r\n        rereading_volume: 0,\r\n        rereading_chapter: 0,\r\n        errors: false\r\n    };\r\n    const body = JSON.stringify(initial_values);\r\n\r\n    axios\r\n        .post(API_USER_MANGA_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga dropped!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE USER MANGA ENTRY\r\nexport const updateMangaEntry = (id, entry_info, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entry_info);\r\n\r\n    axios\r\n        .put(API_USER_MANGA_ENTRY(id), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Entry updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE MANGA VOLUME\r\nexport const updateMangaVolume = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .post(API_USER_MANGA_UPDATE_VOLUME(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Volume updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE MANGA CHAPTER\r\nexport const updateMangaChapter = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .post(API_USER_MANGA_UPDATE_CHAPTER(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Chapter updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// DELETE USER MANGA ENTRY\r\n/**\r\n *\r\n * @param {Number} id - ID of the Manga\r\n * @param {Object} list\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const deleteMangaEntry = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .delete(API_USER_MANGA_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga deleted', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: CLEAR_USER_MANGA_ENTRY,\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// DELETE USER MANGA ENTRY HISTORY VOLUME/CHAPTER\r\nexport const deleteMangaVolumeChapterHistoryEntry = (history_id, manga_id, type) => (dispatch, getState) => {\r\n    let url = API_DELETE_MANGA_VOLUME_HISTORY_ENTRY(history_id);\r\n\r\n    if (type === 'chapter')\r\n        url = API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY(history_id);\r\n\r\n    axios\r\n        .delete(url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('History entry deleted!', Alert.type_success));\r\n            dispatch(getUserMangaEntry(manga_id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\nexport const setSelectedAnimePreset = (preset) => {\r\n    return {\r\n        type: SET_ANIME_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\nexport const setSelectedMangaPreset = (preset) => {\r\n    return {\r\n        type: SET_MANGA_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\nexport const setSelectedErogePreset = (preset) => {\r\n    return {\r\n        type: SET_EROGE_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\n// GET LOGGED IN USER ANIME ENTRY STATUSES\r\nexport const getLoggedInUserAnimeEntryStatuses = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_ANIME_ENTRY_STATUSES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET LOGGED IN USER ANIME ENTRY STATUSES\r\nexport const getLoggedInUserMangaEntryStatuses = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_MANGA_ENTRY_STATUSES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// MUTE/UNMUTE USER THEME SOUNDS\r\nexport const muteUnmuteThemeSounds = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_CHANGE_CYBER_SOUND_STATUS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: AUTH_USER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// ADD TO FAVORITES\r\nexport const addToFavorites = (branch, id) => (dispatch, getState) => {\r\n    let body = {'title_id': id};\r\n\r\n    axios\r\n        .post(API_ADD_TO_FAVORITES(branch), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} added to favorites`, Alert.type_success));\r\n            dispatch(authUser())\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// ADD TO FAVORITES\r\nexport const removeFromFavorites = (branch, id) => (dispatch, getState) => {\r\n    let body = {'title_id': id};\r\n\r\n    axios\r\n        .post(API_REMOVE_FROM_FAVORITES(branch), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} removed from favorites`, Alert.type_success));\r\n            dispatch(authUser())\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// GET USER EPISODE HISTORY SCRAPER PROGRESS\r\nexport const getUserEpisodeHistoryScraperProgress = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FIX USER START AND FINISH DATE FOR ANIME ENTRIES\r\nexport const fixUserStartAndFinishDateForAnimeEntries = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Fixing completed.', Alert.type_success))\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER ANIME LIST PRIVACY\r\nexport const updateUserAnimeListPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_ANIME_LIST_TO_PRIVATE : API_SET_ANIME_LIST_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Anime List has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER ANIME HISTORY PRIVACY\r\nexport const updateUserAnimeHistoryPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_ANIME_HISTORY_TO_PRIVATE : API_SET_ANIME_HISTORY_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Anime History has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER MANGA LIST PRIVACY\r\nexport const updateUserMangaListPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_MANGA_LIST_TO_PRIVATE : API_SET_MANGA_LIST_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Manga List has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER MANGA HISTORY PRIVACY\r\nexport const updateUserMangaHistoryPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_MANGA_HISTORY_TO_PRIVATE : API_SET_MANGA_HISTORY_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Manga History has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER TITLE DISPLAY SETTINGS\r\nexport const setUserTitleDisplaySettings = (branch, settings, update= false) => (dispatch, getState) => {\r\n    let api_url;\r\n    let dispatch_type;\r\n    if (branch === BRANCH_ANIME) {\r\n        api_url = API_UPDATE_USER_ANIME_DISPLAY_SETTINGS;\r\n        dispatch_type = UPDATE_USER_ANIME_BROWSE_SETTINGS;\r\n    } else if (branch === BRANCH_MANGA) {\r\n        api_url = API_UPDATE_USER_MANGA_DISPLAY_SETTINGS;\r\n        dispatch_type = UPDATE_USER_MANGA_BROWSE_SETTINGS;\r\n    } else if (branch === BRANCH_EROGE) {\r\n        api_url = API_UPDATE_USER_EROGE_DISPLAY_SETTINGS;\r\n        dispatch_type = UPDATE_USER_EROGE_BROWSE_SETTINGS;\r\n    }\r\n\r\n    if (update) {\r\n        const token = getState().auth.token;\r\n        const formData = new FormData();\r\n        formData.append('data', JSON.stringify(settings));\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        if (token) config.headers['Authorization'] = `Token ${token}`;\r\n        else dispatch(returnErrors('Auth token not provided!', 0));\r\n\r\n        axios\r\n            .post(api_url, formData, config)\r\n            .then(res => {\r\n                dispatch(createMessage(`Display settings updated successfully.`, Alert.type_success));\r\n                dispatch(updateUserDisplaySettingsStore(branch, settings));\r\n            })\r\n            .catch(err => {\r\n            })\r\n    }\r\n\r\n    dispatch({\r\n        type: dispatch_type,\r\n        payload: settings,\r\n    })\r\n};\r\n\r\n\r\n// UPDATE USER LIST DESIGN SETTINGS\r\nexport const setUserListDesignSettings = (branch, settings, update= false) => (dispatch, getState) => {\r\n    let api_url;\r\n    let dispatch_type;\r\n    if (branch === BRANCH_ANIME) {\r\n        api_url = API_UPDATE_USER_ANIME_LIST_SETTINGS;\r\n        dispatch_type = UPDATE_USER_ANIME_LIST_SETTINGS;\r\n    } else if (branch === BRANCH_MANGA) {\r\n        api_url = API_UPDATE_USER_MANGA_LIST_SETTINGS;\r\n        dispatch_type = UPDATE_USER_MANGA_LIST_SETTINGS;\r\n    }\r\n\r\n    if (update) {\r\n        const token = getState().auth.token;\r\n        const formData = new FormData();\r\n        formData.append('data', JSON.stringify(settings));\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        if (token) config.headers['Authorization'] = `Token ${token}`;\r\n        else dispatch(returnErrors('Auth token not provided!', 0));\r\n\r\n        axios\r\n            .post(api_url, formData, config)\r\n            .then(res => {\r\n                dispatch(createMessage(`${branch} list settings updated successfully.`, Alert.type_success));\r\n                dispatch(updateUserListDesignSettingsStore(branch, settings));\r\n            })\r\n            .catch(err => {\r\n            })\r\n    }\r\n\r\n    dispatch({\r\n        type: dispatch_type,\r\n        payload: settings,\r\n    })\r\n};\r\n","import {\r\n    AUTH_USER,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    GET_USER,\r\n    GET_PROFILE_PRIVACY_SETTINGS,\r\n    SET_REDIRECT_URL,\r\n    UPDATE_USER_ANIME_BROWSE_SETTINGS,\r\n    UPDATE_USER_DISPLAY_SETTINGS_STORE, UPDATE_USER_MANGA_BROWSE_SETTINGS, UPDATE_USER_LIST_DESIGN_SETTINGS_STORE\r\n} from \"../actions/types\";\r\nimport {playExpand2Sound} from \"../components/layout/sounds\";\r\nimport {Profile, User} from \"../models\";\r\nimport store from \"../store\";\r\nimport {setUserAnimeDisplaySettings} from \"../actions/users\";\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../globals\";\r\nimport {API_UPDATE_USER_ANIME_DISPLAY_SETTINGS, API_UPDATE_USER_MANGA_DISPLAY_SETTINGS} from \"../actions/api_urls\";\r\n\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    initial_auth: true,\r\n    user_loading: false,\r\n    user: null,\r\n    user_authenticated: null,\r\n    visited_user_loaded: false,\r\n    visited_user: null,\r\n    redirect_url: null,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                user_loading: true\r\n            };\r\n        case GET_USER:\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                visited_user_loaded: true,\r\n                visited_user: action.payload,\r\n            };\r\n        case AUTH_USER:\r\n            return {\r\n                ...state,\r\n                user_authenticated: true,\r\n                user_loading: false,\r\n                user: action.payload,\r\n                initial_auth: false,\r\n            };\r\n        case GET_PROFILE_PRIVACY_SETTINGS: {\r\n            let updated_user = {};\r\n            Object.assign(updated_user, state.user);\r\n            updated_user[User.profile][Profile.is_anime_list_private] = action.payload[Profile.is_anime_list_private];\r\n            updated_user[User.profile][Profile.is_anime_history_private] = action.payload[Profile.is_anime_history_private];\r\n            updated_user[User.profile][Profile.is_manga_list_private] = action.payload[Profile.is_manga_list_private];\r\n            updated_user[User.profile][Profile.is_manga_history_private] = action.payload[Profile.is_manga_history_private];\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                user: updated_user,\r\n            };\r\n        }\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            playExpand2Sound();\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                user_authenticated: true,\r\n                user_loading: false,\r\n            };\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: null,\r\n                user_authenticated: false,\r\n                user_loading: false,\r\n                initial_auth: false,\r\n            };\r\n        case SET_REDIRECT_URL:\r\n            return {\r\n                ...state,\r\n                redirect_url: action.payload,\r\n            };\r\n        case UPDATE_USER_DISPLAY_SETTINGS_STORE: {\r\n            let updated_user = {};\r\n            Object.assign(updated_user, state.user);\r\n\r\n            if (action.branch === BRANCH_ANIME) {\r\n                updated_user[User.profile][Profile.user_anime_display_settings] = action.payload;\r\n            } else if (action.branch === BRANCH_MANGA) {\r\n                updated_user[User.profile][Profile.user_manga_display_settings] = action.payload;\r\n            } else if (action.branch === BRANCH_EROGE) {\r\n                updated_user[User.profile][Profile.user_eroge_display_settings] = action.payload;\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                user: updated_user,\r\n            };\r\n        }\r\n        case UPDATE_USER_LIST_DESIGN_SETTINGS_STORE: {\r\n            let updated_user = {};\r\n            Object.assign(updated_user, state.user);\r\n\r\n            if (action.branch === BRANCH_ANIME)\r\n                updated_user[User.profile][Profile.user_anime_list_design_settings] = action.payload;\r\n            else if (action.branch === BRANCH_MANGA)\r\n                updated_user[User.profile][Profile.user_manga_list_design_settings] = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                user: updated_user,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {GET_ERRORS, CLEAN_ERRORS} from \"../actions/types\";\n\n\nconst initialState = {\n    message: null,\n    status: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                message: action.payload.msg,\n                status: action.payload.status\n            };\n        case CLEAN_ERRORS:\n            return {\n                message: null,\n                status: null\n            };\n        default:\n            return state;\n    }\n}\n","import {\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CHARACTERS_LOADING,\r\n    FILTER_CHARACTERS,\r\n    GET_CHARACTER,\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\n\r\nconst initialState = {\r\n    characters_loading: false,\r\n    character: {},\r\n    characters_loaded: false,\r\n\r\n    filtered_characters: {},\r\n    filtered_characters_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case CHARACTERS_LOADING:\r\n            return {\r\n                ...state,\r\n                characters_loading: true,\r\n                characters_loaded: false,\r\n                filtered_characters_loaded: false,\r\n            };\r\n        case CANCEL_CHARACTERS_LOADING:\r\n            return {\r\n                ...state,\r\n                characters_loading: false,\r\n                characters_loaded: false,\r\n                filtered_characters_loaded: false,\r\n            };\r\n        case GET_CHARACTER:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                character: action.payload,\r\n                characters_loading: false,\r\n                characters_loaded: true\r\n            };\r\n        case FILTER_CHARACTERS:\r\n            return {\r\n                ...state,\r\n                filtered_characters: action.payload,\r\n                characters_loading: false,\r\n                filtered_characters_loaded: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CANCEL_EROGE_LOADING,\r\n    EROGE_LOADING,\r\n    FILTER_EROGE,\r\n    GET_ANIME_DATA,\r\n    GET_EROGE,\r\n    GET_EROGE_DATA\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\n\r\nconst initialState = {\r\n    eroge_loading: false,\r\n    eroge: {},\r\n    eroge_loaded: false,\r\n\r\n    filtered_eroge: {},\r\n    filtered_eroge_loaded: false,\r\n\r\n    eroge_data: {},\r\n    eroge_data_statistics: {},\r\n    eroge_data_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case EROGE_LOADING:\r\n            return {\r\n                ...state,\r\n                eroge_loading: true,\r\n                eroge_loaded: false,\r\n                filtered_eroge_loaded: false,\r\n            };\r\n        case CANCEL_EROGE_LOADING:\r\n            return {\r\n                ...state,\r\n                eroge_loading: false,\r\n                eroge_loaded: false,\r\n                filtered_eroge_loaded: false,\r\n            };\r\n        case GET_EROGE:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                eroge: action.payload,\r\n                eroge_loading: false,\r\n                eroge_loaded: true\r\n            };\r\n        case FILTER_EROGE:\r\n            return {\r\n                ...state,\r\n                filtered_eroge: action.payload,\r\n                eroge_loading: false,\r\n                filtered_eroge_loaded: true\r\n            };\r\n        case GET_EROGE_DATA:\r\n            return {\r\n                ...state,\r\n                eroge_loading: false,\r\n                eroge_data: action.payload,\r\n                eroge_data_loaded: true,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import Cookies from \"js-cookie\";\r\nimport {Cookie} from \"../../models\";\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_ANIME_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        anime_on_server__english_sub: false,\r\n        anime_on_server__english_dub: false,\r\n        anime_on_server__japanese_dub: false,\r\n        anime_on_server__japanese_sub: false,\r\n        episodes_range: [0, 53],\r\n        length_range: [0, 61],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        rating_short: [],\r\n        video_quality: [],\r\n        audio_channel: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_MANGA_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        volumes_range: [0, 53],\r\n        chapters_range: [0, 53],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_CHARACTERS_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_PEOPLE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_EROGE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        type: [],\r\n        downloaded: '',\r\n        platforms: [],\r\n        language: [],\r\n        censorship: [],\r\n        tags: [],\r\n        ordering: '-date_added',\r\n    };\r\n}\r\n\r\n\r\nexport function loadCookies() {\r\n    let loaded_cookies = {\r\n        anime_browse_filters: {},\r\n        anime_season_filters: {},\r\n        anime_list_filters: {},\r\n        manga_browse_filters: {},\r\n        manga_season_filters: {},\r\n        manga_list_filters: {},\r\n        characters_filters: {},\r\n        people_filters: {},\r\n        eroge_browse_filters: {},\r\n    };\r\n\r\n    if (Cookies.get(Cookie.show_filters) === undefined || Cookies.get(Cookie.show_filters) === 'undefined')\r\n        Cookies.set(Cookie.show_filters, true);\r\n\r\n    const new_anime_values = new FILTER_ANIME_INITIAL_VALUES();\r\n    let anime_browse_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_browse_filters) === undefined || Cookies.get(Cookie.anime_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_browse_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_browse_filters = JSON.parse(Cookies.get(Cookie.anime_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    let anime_season_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_season_filters) === undefined || Cookies.get(Cookie.anime_season_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_season_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_season_filters = JSON.parse(Cookies.get(Cookie.anime_season_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    let anime_list_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_list_filters) === undefined || Cookies.get(Cookie.anime_list_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_list_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_list_filters = JSON.parse(Cookies.get(Cookie.anime_list_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.anime_browse_filters = anime_browse_filters;\r\n    loaded_cookies.anime_season_filters = anime_season_filters;\r\n    loaded_cookies.anime_list_filters = anime_list_filters;\r\n\r\n    const new_manga_values = new FILTER_MANGA_INITIAL_VALUES();\r\n    let manga_browse_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_browse_filters) === undefined || Cookies.get(Cookie.manga_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_browse_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_browse_filters = JSON.parse(Cookies.get(Cookie.manga_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    let manga_season_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_season_filters) === undefined || Cookies.get(Cookie.manga_season_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_season_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_season_filters = JSON.parse(Cookies.get(Cookie.manga_season_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    let manga_list_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_list_filters) === undefined || Cookies.get(Cookie.manga_list_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_list_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_list_filters = JSON.parse(Cookies.get(Cookie.manga_list_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.manga_browse_filters = manga_browse_filters;\r\n    loaded_cookies.manga_season_filters = manga_season_filters;\r\n    loaded_cookies.manga_list_filters = manga_list_filters;\r\n\r\n    const new_characters_values = new FILTER_CHARACTERS_INITIAL_VALUES();\r\n    let characters_filters = new_characters_values.VALUES;\r\n    if (Cookies.get(Cookie.characters_filters) === undefined || Cookies.get(Cookie.characters_filters) === 'undefined')\r\n        Cookies.set(Cookie.characters_filters, new_characters_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            characters_filters = JSON.parse(Cookies.get(Cookie.characters_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.characters_filters = characters_filters;\r\n\r\n    const new_people_values = new FILTER_PEOPLE_INITIAL_VALUES();\r\n    let people_filters = new_people_values.VALUES;\r\n    if (Cookies.get(Cookie.people_filters) === undefined || Cookies.get(Cookie.people_filters) === 'undefined')\r\n        Cookies.set(Cookie.people_filters, new_people_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            people_filters = JSON.parse(Cookies.get(Cookie.people_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.people_filters = people_filters;\r\n\r\n    const new_eroge_values = new FILTER_EROGE_INITIAL_VALUES();\r\n    let eroge_filters = new_eroge_values.VALUES;\r\n    if (Cookies.get(Cookie.eroge_browse_filters) === undefined || Cookies.get(Cookie.eroge_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.eroge_browse_filters, new_eroge_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            eroge_filters = JSON.parse(Cookies.get(Cookie.eroge_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.eroge_browse_filters = eroge_filters;\r\n\r\n    return loaded_cookies\r\n}\r\n","import Cookies from 'js-cookie'\r\n\r\nimport {\r\n    TYPE_BROWSE, TYPE_LIST, TYPE_SEASON\r\n} from \"../globals\";\r\nimport {\r\n    SET_ANIME_FILTERS, SET_CHARACTERS_FILTERS,\r\n    SET_COOKIE_SHOW_FILTERS, SET_EROGE_FILTERS,\r\n    SET_MANGA_FILTERS, SET_PEOPLE_FILTERS\r\n} from \"../actions/types\";\r\nimport {Cookie} from \"../models\";\r\nimport {loadCookies} from \"../components/cookies/load_cookies\";\r\n\r\n\r\nconst loaded_cookies = loadCookies();\r\nconst initialState = {\r\n    show_filters: Cookies.get(Cookie.show_filters) === undefined ? true : Cookies.get(Cookie.show_filters) === 'true',\r\n    anime_browse_filters: loaded_cookies.anime_browse_filters,\r\n    anime_season_filters: loaded_cookies.anime_season_filters,\r\n    anime_list_filters: loaded_cookies.anime_list_filters,\r\n    manga_browse_filters: loaded_cookies.manga_browse_filters,\r\n    manga_season_filters: loaded_cookies.manga_season_filters,\r\n    manga_list_filters: loaded_cookies.manga_list_filters,\r\n    characters_filters: loaded_cookies.characters_filters,\r\n    people_filters: loaded_cookies.people_filters,\r\n    eroge_browse_filters: loaded_cookies.eroge_browse_filters,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_COOKIE_SHOW_FILTERS:\r\n            Cookies.set(Cookie.show_filters, action.value);\r\n            return {\r\n                ...state,\r\n                show_filters: action.value,\r\n            };\r\n        case SET_ANIME_FILTERS:\r\n            return update_anime_filter_state(state, action);\r\n        case SET_MANGA_FILTERS:\r\n            return update_manga_filter_state(state, action);\r\n        case SET_CHARACTERS_FILTERS:\r\n            Cookies.set(Cookie.characters_filters, action.value);\r\n            return {\r\n                ...state,\r\n                characters_filters: action.value,\r\n            };\r\n        case SET_PEOPLE_FILTERS:\r\n            Cookies.set(Cookie.people_filters, action.value);\r\n            return {\r\n                ...state,\r\n                people_filters: action.value,\r\n            };\r\n        case SET_EROGE_FILTERS:\r\n            Cookies.set(Cookie.eroge_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                eroge_browse_filters: action.value,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction update_anime_filter_state(state, action) {\r\n    switch (action.page_type) {\r\n        case TYPE_BROWSE:\r\n            Cookies.set(Cookie.anime_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_browse_filters: action.value,\r\n            };\r\n        case TYPE_SEASON:\r\n            Cookies.set(Cookie.anime_season_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_season_filters: action.value,\r\n            };\r\n        case TYPE_LIST:\r\n            Cookies.set(Cookie.anime_list_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_list_filters: action.value,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n                anime_browse_filters: action.value,\r\n            };\r\n    }\r\n}\r\n\r\nfunction update_manga_filter_state(state, action) {\r\n    switch (action.page_type) {\r\n        case TYPE_BROWSE:\r\n            Cookies.set(Cookie.manga_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_browse_filters: action.value,\r\n            };\r\n        case TYPE_SEASON:\r\n            Cookies.set(Cookie.manga_season_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_season_filters: action.value,\r\n            };\r\n        case TYPE_LIST:\r\n            Cookies.set(Cookie.manga_list_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_list_filters: action.value,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n                manga_browse_filters: action.value,\r\n            };\r\n    }\r\n}\r\n","import {CLEAR_MESSAGE, CREATE_MESSAGE} from \"../actions/types\";\n\n\nconst initialState = {\n    message: null,\n    type: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_MESSAGE:\n            return {\n                message: action.payload.msg,\n                type: action.payload.type\n            };\n        case CLEAR_MESSAGE:\n            return {\n                message: null,\n                type: null\n            };\n        default:\n            return state;\n    }\n}\n","import {\r\n    AUTH_ERROR_CLEAR_USER_INFO,\r\n    CANCEL_USER_ACHIEVEMENTS_LOADING,\r\n    CANCEL_USER_LIST_LOADING,\r\n    CLEAR_USER_ACHIEVEMENTS,\r\n    CLEAR_USER_ANIME_ENTRY,\r\n    CLEAR_USER_MANGA_ENTRY,\r\n    FINISH_LOADING_USER_ENTRY,\r\n    FINISH_UPLOADING_FILE,\r\n    GET_ALL_USERS,\r\n    GET_ANIME_FILTER_PRESETS,\r\n    GET_EROGE_FILTER_PRESETS,\r\n    GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    GET_MANGA_FILTER_PRESETS,\r\n    GET_USER_ACHIEVEMENTS,\r\n    GET_USER_ANIME_ENTRY,\r\n    GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    GET_USER_LIST,\r\n    GET_USER_MANGA_ENTRY,\r\n    GET_VISITED_USER_ANIME_HISTORY,\r\n    GET_VISITED_USER_MANGA_HISTORY,\r\n    SET_ANIME_PRESET,\r\n    SET_EROGE_PRESET,\r\n    SET_MANGA_PRESET,\r\n    UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    UPDATE_USER_ANIME_BROWSE_SETTINGS, UPDATE_USER_ANIME_LIST_SETTINGS,\r\n    UPDATE_USER_ANIME_STATISTICS,\r\n    UPDATE_USER_EROGE_BROWSE_SETTINGS,\r\n    UPDATE_USER_LIST,\r\n    UPDATE_USER_MANGA_BROWSE_SETTINGS, UPDATE_USER_MANGA_LIST_SETTINGS,\r\n    UPLOAD_ANIME_LIST_MAL_XML,\r\n    UPLOAD_MANGA_LIST_MAL_XML,\r\n    UPLOADING_FILE,\r\n    USER_ACHIEVEMENTS_LOADING,\r\n    USER_ENTRY_LOADING,\r\n    USER_INFO_LOADING,\r\n    USER_LIST_LOADING,\r\n    USER_STATISTICS_LOADING,\r\n    USERS_LOADING\r\n} from \"../actions/types\";\r\nimport {Anime, Manga, UserAnimeEntry, UserList, UserMangaEntry} from \"../models\";\r\n\r\n\r\nconst initialState = {\r\n    all_users: [],\r\n    users_loading: false,\r\n    all_users_loaded: false,\r\n\r\n    entry_loading: false,\r\n    user_anime_entry: {},\r\n    user_anime_entry_loaded: false,\r\n    user_manga_entry: {},\r\n    user_manga_entry_loaded: false,\r\n\r\n    uploading_file: false,\r\n\r\n    user_list: {},\r\n    user_list_loading: false,\r\n    user_statistics_loading: false,\r\n    user_anime_statistics: {},\r\n    user_manga_statistics: {},\r\n\r\n    user_info_loading: false,\r\n\r\n    user_anime_history: {},\r\n    user_manga_history: {},\r\n\r\n    anime_filter_presets: [],\r\n    manga_filter_presets: [],\r\n    eroge_filter_presets: [],\r\n    selected_anime_preset: {},\r\n    selected_manga_preset: {},\r\n    selected_eroge_preset: {},\r\n\r\n    user_anime_entry_statuses: {},\r\n    user_manga_entry_statuses: {},\r\n\r\n    user_achievements_loading: false,\r\n    user_achievements: {},\r\n\r\n    user_anime_display_settings: {},\r\n    user_manga_display_settings: {},\r\n    user_eroge_display_settings: {},\r\n    user_anime_list_design_settings: {},\r\n    user_manga_list_design_settings: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USERS_LOADING:\r\n            return {\r\n                ...state,\r\n                users_loading: true,\r\n                all_users_loaded: false\r\n            };\r\n        case USER_LIST_LOADING:\r\n            return {\r\n                ...state,\r\n                user_list_loading: true,\r\n            };\r\n        case CANCEL_USER_LIST_LOADING:\r\n            return {\r\n                ...state,\r\n                user_list_loading: false,\r\n            };\r\n        case GET_ALL_USERS:\r\n            return {\r\n                ...state,\r\n                all_users: action.payload,\r\n                users_loading: false,\r\n                all_users_loaded: true\r\n            };\r\n        case USER_ENTRY_LOADING:\r\n            return {\r\n                ...state,\r\n                entry_loading: true,\r\n                user_anime_entry_loaded: false,\r\n                user_manga_entry_loaded: false\r\n            };\r\n        case USER_STATISTICS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_statistics_loading: true,\r\n            };\r\n        case FINISH_LOADING_USER_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n            };\r\n        case GET_USER_ANIME_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_anime_entry_loaded: true,\r\n                user_anime_entry: action.payload\r\n            };\r\n        case CLEAR_USER_ANIME_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_anime_entry_loaded: false,\r\n                user_anime_entry: {}\r\n            };\r\n        case GET_USER_MANGA_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_manga_entry_loaded: true,\r\n                user_manga_entry: action.payload\r\n            };\r\n        case CLEAR_USER_MANGA_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_manga_entry_loaded: false,\r\n                user_manga_entry: {}\r\n            };\r\n        case UPDATE_USER_LIST:\r\n        case GET_USER_LIST:\r\n            return {\r\n                ...state,\r\n                user_list: action.payload,\r\n                user_list_loading: false,\r\n            };\r\n        case UPDATE_USER_ANIME_STATISTICS:\r\n            return {\r\n                ...state,\r\n                user_statistics_loading: false,\r\n                user_anime_statistics: action.payload,\r\n            };\r\n        case UPLOADING_FILE:\r\n            return {\r\n                ...state,\r\n                uploading_file: true\r\n            };\r\n        case FINISH_UPLOADING_FILE:\r\n            return {\r\n                ...state,\r\n                uploading_file: false\r\n            };\r\n        case UPLOAD_ANIME_LIST_MAL_XML:\r\n        case UPLOAD_MANGA_LIST_MAL_XML:\r\n            return {\r\n                ...state,\r\n                uploading_file: false\r\n            };\r\n        case USER_INFO_LOADING:\r\n            return {\r\n                ...state,\r\n                user_info_loading: true\r\n            };\r\n        case GET_VISITED_USER_ANIME_HISTORY:\r\n            return {\r\n                ...state,\r\n                user_anime_history: action.payload,\r\n                user_info_loading: false\r\n            };\r\n        case GET_VISITED_USER_MANGA_HISTORY:\r\n            return {\r\n                ...state,\r\n                user_manga_history: action.payload,\r\n                user_info_loading: false\r\n            };\r\n        case GET_ANIME_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                anime_filter_presets: action.payload,\r\n            };\r\n        case GET_MANGA_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                manga_filter_presets: action.payload,\r\n            };\r\n        case GET_EROGE_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                eroge_filter_presets: action.payload,\r\n            };\r\n        case SET_ANIME_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_anime_preset: action.payload,\r\n            };\r\n        case SET_MANGA_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_manga_preset: action.payload,\r\n            };\r\n        case SET_EROGE_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_eroge_preset: action.payload,\r\n            };\r\n        case GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES:\r\n            return {\r\n                ...state,\r\n                user_anime_entry_statuses: action.payload,\r\n            };\r\n        case UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES:\r\n            let current_statuses = {};\r\n            if (typeof action.payload === 'object' && action.payload !== null) {\r\n                Object.assign(current_statuses, state.user_anime_entry_statuses);\r\n                current_statuses[action.payload[UserAnimeEntry.anime][Anime.id]] = action.payload[UserAnimeEntry.status];\r\n            } else if (!isNaN(action.payload)) {\r\n                delete state.user_anime_entry_statuses[action.payload];\r\n                Object.assign(current_statuses, state.user_anime_entry_statuses);\r\n            }\r\n            return {\r\n                ...state,\r\n                user_anime_entry_statuses: current_statuses,\r\n            };\r\n        case GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES:\r\n            return {\r\n                ...state,\r\n                user_manga_entry_statuses: action.payload,\r\n            };\r\n        case UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES:\r\n            let current_manga_statuses = {};\r\n            if (typeof action.payload === 'object' && action.payload !== null) {\r\n                Object.assign(current_manga_statuses, state.user_manga_entry_statuses);\r\n                current_manga_statuses[action.payload[UserMangaEntry.manga][Manga.id]] = action.payload[UserMangaEntry.status];\r\n            } else if (!isNaN(action.payload)) {\r\n                delete state.user_manga_entry_statuses[action.payload];\r\n                Object.assign(current_manga_statuses, state.user_manga_entry_statuses);\r\n            }\r\n            return {\r\n                ...state,\r\n                user_manga_entry_statuses: current_manga_statuses,\r\n            };\r\n        case GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS:\r\n            let this_user_list = state.user_list;\r\n            this_user_list[UserList.scraping_episode_history_from_mal_progress] = action.payload;\r\n            return {\r\n                ...state,\r\n                user_list: this_user_list,\r\n            };\r\n        case USER_ACHIEVEMENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: true\r\n            };\r\n        case CANCEL_USER_ACHIEVEMENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: {}\r\n            };\r\n        case GET_USER_ACHIEVEMENTS:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: action.payload\r\n            };\r\n        case CLEAR_USER_ACHIEVEMENTS:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: {}\r\n            };\r\n        case UPDATE_USER_ANIME_BROWSE_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_anime_display_settings: current_settings\r\n            };\r\n        }\r\n        case UPDATE_USER_MANGA_BROWSE_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_manga_display_settings: current_settings\r\n            };\r\n        }\r\n        case UPDATE_USER_EROGE_BROWSE_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_eroge_display_settings: current_settings\r\n            };\r\n        }\r\n        case UPDATE_USER_ANIME_LIST_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_anime_list_design_settings: current_settings\r\n            };\r\n        }\r\n        case UPDATE_USER_MANGA_LIST_SETTINGS: {\r\n            let current_settings = {};\r\n            Object.assign(current_settings, action.payload);\r\n            return {\r\n                ...state,\r\n                user_manga_list_design_settings: action.payload\r\n            };\r\n        }\r\n        case AUTH_ERROR_CLEAR_USER_INFO:\r\n            return {\r\n                ...state,\r\n                current_anime_entry: {},\r\n                current_manga_entry: {},\r\n                user_anime_entry_statuses: {},\r\n                user_manga_entry_statuses: {},\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    GET_REQUIEM,\r\n    REQUIEM_LOADING,\r\n    GET_REPORTS,\r\n    REPORTS_LOADING,\r\n    GET_NEWS,\r\n    NEWS_LOADING,\r\n    GET_TORRENT_PROGRESS,\r\n    GET_ACTIVE_TORRENTS_PROGRESS,\r\n    GET_STORAGE_INFO,\r\n    GET_TARGETS,\r\n    CLEAR_ANIME_TORRENT_PROGRESS\r\n} from '../actions/types'\r\n\r\n\r\nconst initialState = {\r\n    requiem_is_loading: false,\r\n    requiem: {},\r\n\r\n    targets: [],\r\n    reports: {},\r\n    news: {},\r\n    storage: [],\r\n    torrent_progress: [],\r\n    active_torrents: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_REQUIEM:\r\n            return {\r\n                ...state,\r\n                requiem: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_REPORTS:\r\n            return {\r\n                ...state,\r\n                reports: action.payload,\r\n                reports_is_loading: false\r\n            };\r\n        case GET_TARGETS:\r\n            return {\r\n                ...state,\r\n                targets: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_NEWS:\r\n            return {\r\n                ...state,\r\n                news: action.payload,\r\n                news_is_loading: false\r\n            };\r\n        case GET_STORAGE_INFO:\r\n            return {\r\n                ...state,\r\n                storage: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_TORRENT_PROGRESS:\r\n            return {\r\n                ...state,\r\n                torrent_progress: action.payload,\r\n            };\r\n        case GET_ACTIVE_TORRENTS_PROGRESS:\r\n            return {\r\n                ...state,\r\n                active_torrents: action.payload,\r\n            };\r\n        case CLEAR_ANIME_TORRENT_PROGRESS:\r\n            return {\r\n                ...state,\r\n                torrent_progress: [],\r\n            };\r\n        case REQUIEM_LOADING:\r\n            return {\r\n                ...state,\r\n                requiem_is_loading: true\r\n            };\r\n        case REPORTS_LOADING:\r\n            return {\r\n                ...state,\r\n                reports_is_loading: true\r\n            };\r\n        case NEWS_LOADING:\r\n            return {\r\n                ...state,\r\n                news_is_loading: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    ANIME_LOADING, CANCEL_ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CHARACTERS_LOADING, FILTER_CHARACTERS, GET_ANIME_DATA,\r\n    GET_CHARACTER, GET_CHARACTERS_DATA, GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_CHARACTERS,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_CHARACTERS_DATA_FOR_HOME_PAGE, API_GET_INDUSTRY_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_CHARACTER\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieCharactersFilters} from \"./cookies\";\r\nimport {CharactersFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\n\r\n\r\n// GET A ONE CHARACTER\r\nexport const getCharacter = id => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_CHARACTER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CHARACTER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL CHARACTERS\r\nexport const filterCharacters = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setCharactersFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_CHARACTERS, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_CHARACTERS,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieCharactersFilters(filters))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setCharactersFilterParams(params, filters) {\r\n    if (filters[CharactersFilterNames.search] && typeof filters[CharactersFilterNames.search] == 'string')\r\n        params[CharactersFilterNames.search] = filters[CharactersFilterNames.search];\r\n    if (filters[CharactersFilterNames.ordering])\r\n        params[CharactersFilterNames.ordering] = filters[CharactersFilterNames.ordering];\r\n    return params\r\n}\r\n\r\n\r\n// CANCEL CHARACTERS LOADING\r\nexport const cancelCharactersLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_CHARACTERS_LOADING,\r\n    })\r\n};\r\n","import {\r\n    CANCEL_PEOPLE_LOADING,\r\n    FILTER_CHARACTERS,\r\n    FILTER_PEOPLE,\r\n    GET_ALL_CHARACTERS_FOR_ANIME, GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    GET_PERSON, GET_PUBLISHED_MANGA_FOR_PERSON, GET_VOICE_ACTOR_ROLES_FOR_PERSON,\r\n    PEOPLE_LOADING\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Anime, Person} from \"../models\";\r\nimport store from \"../store\";\r\nimport {cancelAnimeLoading} from \"../actions/anime\";\r\nimport {cancelCharactersLoading} from \"../actions/characters\";\r\n\r\nconst initialState = {\r\n    people_loading: false,\r\n    person: {},\r\n    people_loaded: false,\r\n\r\n    people_data: {},\r\n    people_data_statistics: {},\r\n    people_data_loaded: false,\r\n\r\n    filtered_people: {},\r\n    filtered_people_loaded: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case PEOPLE_LOADING:\r\n            return {\r\n                ...state,\r\n                people_loading: true,\r\n                people_loaded: false,\r\n                filtered_people_loaded: false,\r\n            };\r\n        case CANCEL_PEOPLE_LOADING:\r\n            return {\r\n                ...state,\r\n                people_loading: false,\r\n                people_loaded: false,\r\n                filtered_people_loaded: false,\r\n            };\r\n        case GET_PERSON:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                person: action.payload,\r\n                people_loading: false,\r\n                people_loaded: true\r\n            };\r\n        case GET_VOICE_ACTOR_ROLES_FOR_PERSON:\r\n            state.person[Person.voice_actor_roles] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case GET_ANIME_STAFF_POSITIONS_FOR_PERSON:\r\n            state.person[Person.anime_staff_positions] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case GET_PUBLISHED_MANGA_FOR_PERSON:\r\n            state.person[Person.published_manga] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case FILTER_PEOPLE:\r\n            return {\r\n                ...state,\r\n                filtered_people: action.payload,\r\n                people_loading: false,\r\n                filtered_people_loaded: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    industry_data: {},\r\n    industry_data_loading: {},\r\n    industry_data_statistics: {},\r\n    industry_data_loaded: false,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case INDUSTRY_DATA_LOADING:\r\n            return {\r\n                ...state,\r\n                industry_data_loading: true,\r\n                industry_data_loaded: false,\r\n            };\r\n        case GET_INDUSTRY_DATA:\r\n            return {\r\n                ...state,\r\n                industry_data_loading: false,\r\n                industry_data: action.payload,\r\n                industry_data_loaded: true,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport anime from './anime'\r\nimport manga from './manga'\r\nimport auth from './auth'\r\nimport errors from './errors'\r\nimport characters from './characters'\r\nimport eroge from './eroge'\r\nimport cookies from './cookies'\r\nimport success from './success'\r\nimport users from './users'\r\nimport requiem from './requiem'\r\nimport people from './people'\r\nimport industry from './industry'\r\n\r\nexport default combineReducers({\r\n    cookies, auth, users, errors, success, requiem, anime, manga, characters, people, eroge, industry\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './reducers'\r\n\r\n\r\nconst initialState = {};\r\n\r\n// const middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CYBER_GENESIS_URL} from \"./globals\";\r\n\r\nexport const INDEX = '/';\r\nexport const NOT_FOUND = '/404';\r\nexport const HOME = '/home';\r\n\r\nexport const REQUIEM = '/requiem';\r\n\r\nexport const ADMIN = `${CYBER_GENESIS_URL}/admin`;\r\nexport function ADMIN_EDIT_ANIME(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/anime/anime/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_ANIME_ON_SERVER(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/anime/animeonserver/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_MANGA(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/manga/manga/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_CHARACTER(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/characters/character/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_EROGE(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/eroge/eroge/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_PERSON(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/industry/person/${id}/change/`;\r\n}\r\n\r\nexport const LOGIN = '/login';\r\nexport const REGISTER = '/register';\r\nexport const SETTINGS = '/settings';\r\nexport const BBCODE_EDITOR = '/bbcode-editor';\r\nexport function PROFILE(id) {\r\n    if (id) return `/profile/${id}`;\r\n    return '/profile/:id'\r\n}\r\nexport function USER_ANIME_LIST(id) {\r\n    if (id) return `/anime-list/${id}`;\r\n    return '/anime-list/:id'\r\n}\r\nexport function USER_MANGA_LIST(id) {\r\n    if (id) return `/manga-list/${id}`;\r\n    return '/manga-list/:id'\r\n}\r\nexport function USER_EROGE_LIST(id) {\r\n    if (id) return `/eroge-list/${id}`;\r\n    return '/eroge-list/:id'\r\n}\r\nexport function USER_ANIME_STATISTICS(id) {\r\n    if (id) return `/profile/statistics/${id}`;\r\n    return '/profile/statistics/:id'\r\n}\r\nexport function USER_ANIME_HISTORY(id) {\r\n    if (id) return `/profile/history/anime/${id}`;\r\n    return '/profile/history/anime/:id'\r\n}\r\nexport function USER_MANGA_HISTORY(id) {\r\n    if (id) return `/profile/history/manga/${id}`;\r\n    return '/profile/history/manga/:id'\r\n}\r\n\r\nexport const ANIME_HOME = '/anime';\r\nexport const ANIME_BROWSE = '/anime/browse';\r\nexport const ANIME_SEASONS = '/anime/seasons';\r\nexport function ANIME_SEASON_DISPLAY(year, season) {\r\n    if (year && season >= 0) return `/anime/seasons/${year}/${season}`;\r\n    return '/anime/seasons/:year/:season'\r\n}\r\nexport const ANIME_FRANCHISES = '/anime/franchises';\r\nexport function ANIME_DISPLAY(id) {\r\n    if (id)\r\n        return `/anime/${id}`;\r\n    return '/anime/:id'\r\n}\r\nexport function ANIME_FRANCHISE_DISPLAY(id) {\r\n    if (id)\r\n        return `/anime/franchises/${id}`;\r\n    return '/anime/franchises/:id'\r\n}\r\n\r\nexport const MANGA_HOME = '/manga';\r\nexport const MANGA_BROWSE = '/manga/browse';\r\nexport const MANGA_SEASONS = '/manga/seasons';\r\nexport function MANGA_SEASON_DISPLAY(year, season) {\r\n    if (year && season >= 0) return `/manga/seasons/${year}/${season}`;\r\n    return '/manga/seasons/:year/:season'\r\n}\r\nexport const MANGA_FRANCHISES = '/manga/franchises';\r\nexport function MANGA_DISPLAY(id) {\r\n    if (id) return `/manga/${id}`;\r\n    return '/manga/:id'\r\n}\r\n\r\nexport const CHARACTERS_HOME = '/characters';\r\nexport const CHARACTERS_BROWSE = '/characters/browse';\r\nexport function CHARACTERS_DISPLAY(id) {\r\n    if (id) return `/characters/${id}`;\r\n    return '/characters/:id'\r\n}\r\n\r\nexport const PEOPLE_HOME = '/people';\r\nexport const PEOPLE_BROWSE = '/people/browse';\r\nexport function PERSON_DISPLAY(id) {\r\n    if (id) return `/person/${id}`;\r\n    return '/person/:id'\r\n}\r\n\r\nexport const EROGE_HOME = '/eroge';\r\nexport const EROGE_BROWSE = '/eroge/browse';\r\nexport function EROGE_DISPLAY(id) {\r\n    if (id) return `/eroge/${id}`;\r\n    return '/eroge/:id'\r\n}\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n    ANIME_BROWSE,\r\n    ANIME_FRANCHISES,\r\n    ANIME_HOME,\r\n    ANIME_SEASONS,\r\n    CHARACTERS_BROWSE,\r\n    CHARACTERS_HOME,\r\n    EROGE_BROWSE,\r\n    EROGE_HOME,\r\n    LOGIN,\r\n    MANGA_BROWSE,\r\n    MANGA_FRANCHISES,\r\n    MANGA_HOME,\r\n    MANGA_SEASONS,\r\n    PEOPLE_BROWSE,\r\n    SETTINGS,\r\n    USER_ANIME_LIST,\r\n    USER_ANIME_STATISTICS,\r\n    USER_EROGE_LIST,\r\n    USER_MANGA_LIST\r\n} from \"../../../urls\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport store from \"../../../store\";\r\nimport {logout} from \"../../../actions/auth\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faCalendarAlt,\r\n    faChartLine,\r\n    faCog,\r\n    faHome,\r\n    faSearch, faSignOutAlt,\r\n    faSitemap,\r\n    faThList\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nexport default function AnimeMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={ANIME_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={ANIME_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n            <Link to={ANIME_SEASONS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCalendarAlt}/> Seasons</Link>\r\n            <Link to={ANIME_FRANCHISES} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSitemap}/> Franchises</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MangaMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={MANGA_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={MANGA_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n            <Link to={MANGA_SEASONS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCalendarAlt}/> Seasons</Link>\r\n            <Link to={MANGA_FRANCHISES} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSitemap}/> Franchises</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function CharactersMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={CHARACTERS_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={CHARACTERS_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Characters</Link>\r\n            <Link to={PEOPLE_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> People</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ErogeMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={EROGE_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={EROGE_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function AuthMenu(props) {\r\n    const {show, onLeave, user_id} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu desktop-menu-reversed show-dropdown' : 'desktop-menu desktop-menu-reversed'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={USER_ANIME_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Anime List</Link>\r\n            <Link to={USER_MANGA_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Manga List</Link>\r\n            <Link to={USER_EROGE_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Eroge List</Link>\r\n            <Link to={USER_ANIME_STATISTICS(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faChartLine}/> Statistics</Link>\r\n            <Link to={SETTINGS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCog}/> Settings</Link>\r\n            <Link to={LOGIN} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={() => {\r\n                playClickSound();\r\n                store.dispatch(logout());\r\n            }}><FontAwesomeIcon className=\"navbar-icon\" icon={faSignOutAlt}/> Logout</Link>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nimport '../../../assets/css/layout.css'\r\nimport {ADMIN, HOME, INDEX, LOGIN, PROFILE} from \"../../../urls\";\r\nimport AnimeMenu, {AuthMenu, CharactersMenu, ErogeMenu, MangaMenu} from \"./menus\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faUser} from \"@fortawesome/free-solid-svg-icons/faUser\";\r\n\r\nconst STYLE = {top: 25, left: 25};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        zIndex: 900\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        background: 'none',\r\n    },\r\n    toolbar: {\r\n        minHeight: 42,\r\n    },\r\n    title: {\r\n        marginRight: theme.spacing(3),\r\n        fontFamily: 'Quicksand',\r\n        fontVariant: 'small-caps',\r\n        userSelect: \"none\"\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        fontSize: \"medium\",\r\n    },\r\n    menuButtonLink: {\r\n        color: \"inherit\",\r\n        textDecoration: \"none\"\r\n    },\r\n    menuLinks: {\r\n        top: 35,\r\n        left: 25\r\n    },\r\n    sectionDesktop: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'flex',\r\n        },\r\n    },\r\n    sectionMobile: {\r\n        display: 'flex',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function MenuAppBar(props) {\r\n    const {user_authenticated, user_id, username, superuser} = props;\r\n    const classes = useStyles();\r\n    const [profileAnchorEl, setProfileAnchorEl] = React.useState(null);\r\n    const [animeAnchorEl, setAnimeAnchorEl] = React.useState(null);\r\n    const [mobileAnchorEl, setMobileAnchorEl] = React.useState(null);\r\n    const isProfileOpen = Boolean(profileAnchorEl);\r\n    const isAnimeOpen = Boolean(animeAnchorEl);\r\n    const isMobileMenuOpen = Boolean(mobileAnchorEl);\r\n\r\n    const [desktopAnimeMenu, setDesktopAnimeMenu] = React.useState(false);\r\n    const [desktopMangaMenu, setDesktopMangaMenu] = React.useState(false);\r\n    const [desktopCharactersMenu, setDesktopCharactersMenu] = React.useState(false);\r\n    const [desktopErogeMenu, setDesktopErogeMenu] = React.useState(false);\r\n    const [desktopAuthMenu, setDesktopAuthMenu] = React.useState(false);\r\n    const anime = 'anime';\r\n    const manga = 'manga';\r\n    const characters = 'characters';\r\n    const eroge = 'eroge';\r\n    const auth = 'auth';\r\n\r\n    // Handle methods\r\n    const handleProfileMenu = (event) => {\r\n        setProfileAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleAnimeMenu = (event) => {\r\n        setAnimeAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMobileMenu = (event) => {\r\n        setMobileAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    // Close methods\r\n    const handleProfileClose = () => {\r\n        setProfileAnchorEl(null);\r\n    };\r\n\r\n    const handleAnimeClose = () => {\r\n        setAnimeAnchorEl(null);\r\n        handleMobileClose()\r\n    };\r\n\r\n    const handleMobileClose = () => {\r\n        setMobileAnchorEl(null);\r\n    };\r\n\r\n    // Desktop methods\r\n    const onDesktopMenuLeave = () => {\r\n        setDesktopAnimeMenu(false);\r\n        setDesktopMangaMenu(false);\r\n        setDesktopCharactersMenu(false);\r\n        setDesktopErogeMenu(false);\r\n        setDesktopAuthMenu(false);\r\n    };\r\n\r\n    const onDesktopMenuEnter = (menuName) => {\r\n        onDesktopMenuLeave();\r\n        playHoverSound();\r\n        if (menuName === anime) {\r\n            setDesktopAnimeMenu(true);\r\n        } else if (menuName === manga) {\r\n            setDesktopMangaMenu(true)\r\n        } else if (menuName === characters) {\r\n            setDesktopCharactersMenu(true)\r\n        } else if (menuName === eroge) {\r\n            setDesktopErogeMenu(true)\r\n        } else if (menuName === auth) {\r\n            setDesktopAuthMenu(true)\r\n        }\r\n    };\r\n\r\n    const handleScroll = () => {\r\n        let navbar = document.getElementById('Cyber-Navbar');\r\n\r\n        if (window.scrollY > 40) {\r\n            navbar.classList.add('Cyber-Navbar-scrolled');\r\n        } else {\r\n            try {\r\n                navbar.classList.remove('Cyber-Navbar-scrolled');\r\n            } catch (e) {\r\n            }\r\n        }\r\n    };\r\n\r\n    const animeMobileMenu = 'anime-mobile-menu';\r\n    const renderAnimeMenu = (\r\n        <Menu\r\n            id={animeMobileMenu}\r\n            anchorEl={animeAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            transformOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            keepMounted\r\n            open={isAnimeOpen}\r\n            onClose={handleAnimeClose}\r\n            style={STYLE}\r\n        >\r\n            <MenuItem onClick={handleAnimeClose}>Home</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Browse</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Seasons</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Franchises</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileClose}\r\n        >\r\n            <MenuItem onClick={handleAnimeMenu}>\r\n                <Button\r\n                    aria-label=\"anime links\"\r\n                    aria-controls={animeMobileMenu}\r\n                    aria-haspopup=\"true\">\r\n                    Anime\r\n                </Button>\r\n            </MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    document.addEventListener('scroll', handleScroll);\r\n\r\n    return (\r\n        <div id=\"Cyber-Navbar\" className={classes.root} onMouseLeave={onDesktopMenuLeave}>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton edge=\"start\" className={classes.sectionMobile} color=\"inherit\" aria-label=\"menu\"\r\n                                onClick={handleMobileMenu}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        <Link to={INDEX} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                              onClick={playClickSound}>Cyber-Genesis</Link>\r\n                    </Typography>\r\n\r\n                    <div className={classes.sectionDesktop + ' desktop'}>\r\n                        <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={HOME} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Home</Link>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(anime)\r\n                        }}>\r\n                            Anime\r\n                            <AnimeMenu show={desktopAnimeMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(manga)\r\n                        }}>\r\n                            Manga\r\n                            <MangaMenu show={desktopMangaMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(characters)\r\n                        }}>\r\n                            Industry\r\n                            <CharactersMenu show={desktopCharactersMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(eroge)\r\n                        }}>\r\n                            Eroge\r\n                            <ErogeMenu show={desktopErogeMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        {superuser ? <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <a href={ADMIN} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Admin</a>\r\n                        </span> : null}\r\n                    </div>\r\n\r\n                    <div className={classes.grow}/>\r\n\r\n                    {user_authenticated ? <div className={classes.sectionDesktop + ' desktop'}>\r\n                        <span onMouseEnter={() => {\r\n                            onDesktopMenuEnter(auth)\r\n                        }}>\r\n                            <Link to={PROFILE(user_id)} onMouseOver={playHoverSound} onClick={playClickSound}>\r\n                                {username} <FontAwesomeIcon icon={faUser}/></Link>\r\n                            <AuthMenu user_id={user_id} show={desktopAuthMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n                    </div> : user_authenticated != null ?\r\n                        <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={LOGIN} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Login</Link>\r\n                        </span> : null}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n            {renderAnimeMenu}\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {User} from \"../../../models\";\r\nimport MenuAppBar from \"./CyberHeader\";\r\n\r\n\r\nclass CyberNavbar extends Component {\r\n    render() {\r\n        return <MenuAppBar user_authenticated={this.props.user_authenticated} user_id={this.props.user_id}\r\n                           username={this.props.username} superuser={this.props.superuser}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    user_id: state.auth.user ? state.auth.user[User.id] : null,\r\n    superuser: state.auth.user ? state.auth.user[User.is_superuser] : false,\r\n    username: state.auth.user ? state.auth.user[User.username] : null\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CyberNavbar)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Parallax} from \"react-parallax\";\r\n\r\nimport '../../../assets/css/layout.css'\r\n\r\n\r\nclass CyberFooter extends Component {\r\n    render() {\r\n        return (\r\n            <div style={this.props.margin === false ? null : {marginTop: '150px'}} id=\"Footer\">\r\n                <Parallax\r\n                    blur={0}\r\n                    bgImage={'/images/object.png'}\r\n                    bgImageAlt=\"footer\"\r\n                    strength={200}>\r\n                    <div className=\"logos-container\">\r\n                        <p className=\"\">Powered by</p>\r\n                        <div className=\"logo-container logo-container-side\">\r\n                            <img src=\"/images/cyber-administration-logo.png\" alt={''}/>\r\n                            <h5 className=\"color-\">Cyber-Admin</h5>\r\n                        </div>\r\n                        <div className=\"logo-container logo-container-main\">\r\n                            <img src=\"/images/cyber-genesis-logo.png\" alt={''}/>\r\n                            <h3 className=\"color-\">Cyber-Genesis</h3>\r\n                        </div>\r\n                        <div className=\"logo-container logo-container-side\">\r\n                            <img src=\"/images/cyber-requiem-logo.png\" alt={''}/>\r\n                            <h5 className=\"color-\">Cyber-Requiem</h5>\r\n                        </div>\r\n                    </div>\r\n                </Parallax>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(CyberFooter)\r\n","import React, { Component } from 'react';\r\n\r\n// https://bbbootstrap.com/snippets/circle-loader-63353068 BETTER LOADING!!!\r\n\r\nimport '../../../assets/css/layout.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass Loading extends Component {\r\n    static propTypes = {\r\n        /** String that will be displayed below the img */\r\n        text: PropTypes.string,\r\n        /** Removes all text */\r\n        no_text: PropTypes.bool,\r\n        /** Used for width and height for the img in pixels */\r\n        size: PropTypes.number,\r\n        /** Used for calculating the top and bottom offset of the container */\r\n        offset: PropTypes.number,\r\n        /** Applies a css class to the container to remove the relative position */\r\n        block: PropTypes.bool,\r\n    };\r\n\r\n    render() {\r\n        const {text, size, offset, block, no_text} = this.props;\r\n\r\n        return (\r\n            <div className={block ? 'triangle-loader triangle-loader-initial' : 'triangle-loader'}\r\n                 style={offset ? {height: `calc(100vh - ${offset}px)`} : null}>\r\n                <div className=\"triangle-loader-svg\">\r\n                    <svg id=\"triangle\" width={size ? size : '160'} height={size ? size : '160'} viewBox=\"-3 -4 39 39\">\r\n                        <polygon fill=\"transparent\" stroke=\"cyan\" strokeWidth=\"1\" points=\"16,0 32,32 0,32\"/>\r\n                    </svg>\r\n                    {!no_text ? text ? text.toUpperCase() : 'LOADING' : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ANIME_GENRES} from \"../../../globals\";\r\n\r\n/**\r\n * Cyber-Genesis version of the Button component from Material-ui\r\n * @param props.classNames {String}\r\n * @param props.variant {String}\r\n * @param props.component {String}\r\n * @param props.color {String}\r\n * @param props.type {String}\r\n * @param props.disabled {Boolean}\r\n * @param props.title {String}\r\n * @param props.onClick {Function}\r\n * @param props.children {JSX.Element}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CyberButton(props) {\r\n    const {classNames, variant, component, color, type, disabled, title, onClick, children} = props;\r\n    return <Button type={type} component={component} variant={variant} color={color} className={classNames} onMouseEnter={playHoverSound}\r\n                   disabled={disabled} title={title}\r\n                   onClick={() => {\r\n                       playClickSound();\r\n                       if (onClick) onClick()\r\n                   }}>\r\n        {children}\r\n    </Button>\r\n}\r\n\r\n/**\r\n * Cyber-Genesis version of the Link component from Material-ui\r\n * @param props.classNames {Object}\r\n * @param props.to {Object}\r\n * @param props.children {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CyberLink(props) {\r\n    const {classNames, to, children} = props;\r\n    return <Link to={to} className={classNames} onMouseEnter={playHoverSound} onClick={playClickSound}>\r\n        {children}\r\n    </Link>\r\n}\r\n\r\n/**\r\n *\r\n * @param props.src {string} Src of the image.\r\n * @param props.alt {string} Alt of the image.\r\n * @param props.className {string} Additional classes for the image.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function PreLoadImage(props) {\r\n    const {className, src, alt} = props;\r\n\r\n    const [loaded, setLoaded] = React.useState(false);\r\n\r\n    return <>\r\n        <img src={src}\r\n             className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n             onLoad={() => {setLoaded(true)}}\r\n        />\r\n        <img className={loaded ? className ? `fade-in ${className}` : 'fade-in' : className ? `before-fade-in ${className}` : 'before-fade-in'}\r\n             src={src} alt={alt ? alt : 'Image'}\r\n        />\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function LoadGifs(props) {\r\n    console.log('loading gifs');\r\n    return <div style={{position: 'absolute', opacity: 0, height: 0}}>\r\n        {ANIME_GENRES.map(genre => (\r\n            <img style={{position: 'absolute', opacity: 0, height: 0}} src={`/images/genre_icons/${genre}.gif`}/>\r\n        ))}\r\n    </div>\r\n}","import {\r\n    ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CANCEL_PEOPLE_LOADING,\r\n    CHARACTERS_LOADING,\r\n    FILTER_CHARACTERS,\r\n    FILTER_PEOPLE,\r\n    GET_ALL_CHARACTERS_FOR_ANIME, GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    GET_PERSON, GET_PUBLISHED_MANGA_FOR_PERSON, GET_VOICE_ACTOR_ROLES_FOR_PERSON, MANGA_LOADING,\r\n    PEOPLE_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_PEOPLE,\r\n    API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    API_GET_ONE_PERSON, API_GET_PUBLISHED_MANGA_FOR_PERSON,\r\n    API_GET_VOICE_ACTOR_ROLES_FOR_PERSON\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieCharactersFilters, setCookiePeopleFilters} from \"./cookies\";\r\nimport {CharactersFilterNames, PeopleFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\nimport {cancelCharactersLoading} from \"./characters\";\r\nimport {cancelMangaLoading} from \"./manga\";\r\nimport {MANGA_ORDERINGS} from \"../globals\";\r\n\r\n\r\n// GET A ONE PERSON\r\nexport const getPerson = id => (dispatch, getState) => {\r\n    dispatch({type: PEOPLE_LOADING});\r\n    axios\r\n        .get(API_GET_ONE_PERSON(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET VOICE ACTOR ROLES (CHARACTERS) FOR PERSON\r\nexport const getVoiceActorRolesForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_VOICE_ACTOR_ROLES_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelCharactersLoading());\r\n            dispatch({\r\n                type: GET_VOICE_ACTOR_ROLES_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME STAFF POSITIONS (ANIME) FOR PERSON\r\nexport const getAnimeStaffPositionsForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelAnimeLoading());\r\n            dispatch({\r\n                type: GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET PUBLISHED MANGA (MANGA) FOR PERSON\r\nexport const getPublishedMangaForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_PUBLISHED_MANGA_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelMangaLoading());\r\n            dispatch({\r\n                type: GET_PUBLISHED_MANGA_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL PEOPLE\r\nexport const filterPeople = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: PEOPLE_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setPeopleFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_PEOPLE, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_PEOPLE,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookiePeopleFilters(filters))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setPeopleFilterParams(params, filters) {\r\n    if (filters[PeopleFilterNames.search] && typeof filters[PeopleFilterNames.search] == 'string')\r\n        params[PeopleFilterNames.search] = filters[PeopleFilterNames.search];\r\n    if (filters[PeopleFilterNames.ordering])\r\n        params[PeopleFilterNames.ordering] = filters[PeopleFilterNames.ordering];\r\n    return params\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA, BRANCH_PEOPLE} from \"../globals\";\r\nimport {getAnime} from \"./anime\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\nimport store from \"../store\";\r\nimport {getUserAnimeEntry, getUserMangaEntry} from \"./users\";\r\nimport {\r\n    API_ADD_ANIME_TO_SERVER, API_GET_NEWS, API_OPEN_ANIME_FOLDER, API_OPEN_EROGE_FOLDER,\r\n    API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS,\r\n    API_REQUIEM_DOWNLOAD_ANIME_TORRENT, API_REQUIEM_GET_STORAGE_INFO, API_REQUIEM_GET_TORRENT_PROGRESS,\r\n    API_REQUIEM_UPDATE_ANIME_MAL,\r\n    API_REQUIEM_UPDATE_CHARACTER_MAL,\r\n    API_REQUIEM_UPDATE_EROGE_HENTAIGAMER,\r\n    API_REQUIEM_UPDATE_MANGA_MAL, API_REQUIEM_UPDATE_PERSON_MAL, API_UPDATE_ANIME_TO_SERVER\r\n} from \"./api_urls\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {Alert, Anime} from \"../models\";\r\nimport {getManga} from \"./manga\";\r\nimport {getCharacter} from \"./characters\";\r\nimport {getEroge} from \"./eroge\";\r\nimport {\r\n    ANIME_LOADING,\r\n    CANCEL_ANIME_LOADING, CANCEL_CHARACTERS_LOADING, CANCEL_EROGE_LOADING,\r\n    CANCEL_MANGA_LOADING, CANCEL_PEOPLE_LOADING,\r\n    CHARACTERS_LOADING, DOWNLOAD_TORRENT,\r\n    EROGE_LOADING, GET_NEWS, GET_STORAGE_INFO, GET_TORRENT_PROGRESS,\r\n    MANGA_LOADING, NEWS_LOADING, PEOPLE_LOADING, REQUIEM_LOADING\r\n} from \"./types\";\r\nimport {getPerson} from \"./people\";\r\n\r\n\r\nfunction scrapeUpdateTitleApiUrl(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return API_REQUIEM_UPDATE_ANIME_MAL(id);\r\n        case BRANCH_MANGA:\r\n            return API_REQUIEM_UPDATE_MANGA_MAL(id);\r\n        case BRANCH_CHARACTERS:\r\n            return API_REQUIEM_UPDATE_CHARACTER_MAL(id);\r\n        case BRANCH_PEOPLE:\r\n            return API_REQUIEM_UPDATE_PERSON_MAL(id);\r\n        case BRANCH_EROGE:\r\n            return API_REQUIEM_UPDATE_EROGE_HENTAIGAMER(id);\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\n\r\n// SCRAPE UPDATE SINGLE TITLE\r\nexport const scrapeUpdateTitle = (id, branch) => (dispatch, getState) => {\r\n    if (branch === BRANCH_ANIME)\r\n        dispatch({type: ANIME_LOADING});\r\n    else if (branch === BRANCH_MANGA)\r\n        dispatch({type: MANGA_LOADING});\r\n    else if (branch === BRANCH_CHARACTERS)\r\n        dispatch({type: CHARACTERS_LOADING});\r\n    else if (branch === BRANCH_EROGE)\r\n        dispatch({type: EROGE_LOADING});\r\n    else if (branch === BRANCH_PEOPLE)\r\n        dispatch({type: PEOPLE_LOADING});\r\n    else return;\r\n\r\n    axios\r\n        .get(scrapeUpdateTitleApiUrl(branch, id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} Scraped & Updated`, Alert.type_success));\r\n            if (branch === BRANCH_ANIME) dispatch(getAnime(id));\r\n            else if (branch === BRANCH_MANGA) dispatch(getManga(id));\r\n            else if (branch === BRANCH_CHARACTERS) dispatch(getCharacter(id));\r\n            else if (branch === BRANCH_EROGE) dispatch(getEroge(id));\r\n            else if (branch === BRANCH_PEOPLE) dispatch(getPerson(id));\r\n        })\r\n        .catch(err => {\r\n            if (branch === BRANCH_ANIME)\r\n                dispatch({type: CANCEL_ANIME_LOADING});\r\n            else if (branch === BRANCH_MANGA)\r\n                dispatch({type: CANCEL_MANGA_LOADING});\r\n            else if (branch === BRANCH_CHARACTERS)\r\n                dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            else if (branch === BRANCH_EROGE)\r\n                dispatch({type: CANCEL_EROGE_LOADING});\r\n            else if (branch === BRANCH_PEOPLE)\r\n                dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET STORAGE INFO\r\nexport const getStorageInfo = () => (dispatch, getState) => {\r\n    dispatch({type: REQUIEM_LOADING});\r\n    axios\r\n        .get(API_REQUIEM_GET_STORAGE_INFO, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_STORAGE_INFO,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DOWNLOAD TORRENT\r\nexport const downloadTorrent = (id, data) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    for (let x = 0; x < data['files'].length; x++) formData.append('file-' + x, data['files'][x]);\r\n    formData.append('disk', data['disk']);\r\n    formData.append('magnet', data['magnet']);\r\n    formData.append('extra_ids', data['extra_ids']);\r\n    formData.append('extract_subs', data['extract_subs']);\r\n    formData.append('additional_info', data['additional_info']);\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .post(API_REQUIEM_DOWNLOAD_ANIME_TORRENT(id), formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Torrent is downloading', Alert.type_success));\r\n            dispatch(getAnime(id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// DELETE ANIME_SERVE_INFO AND ITS TORRENTS\r\nexport const deleteAnimeServerInfoAndTorrents = (id) => (dispatch, getState) => {\r\n    let config = tokenConfig(getState);\r\n    config['headers']['withCredentials'] = true;\r\n\r\n    axios\r\n        .get(API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS(id), config)\r\n        .then(res => {\r\n            dispatch(getAnime(id))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET TORRENT PROGRESS INFO\r\nexport const getTorrentProgress = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_REQUIEM_GET_TORRENT_PROGRESS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TORRENT_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// ADD ANIME TO SERVER\r\nexport const addAnimeToServer = animeInfo => (dispatch, getState) => {\r\n    const body = JSON.stringify(animeInfo);\r\n\r\n    axios\r\n        .post(API_ADD_ANIME_TO_SERVER, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('The Anime has been added to the server', Alert.type_success));\r\n            dispatch(getAnime(animeInfo['anime']))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// UPDATE ANIME TO SERVER\r\nexport const updateAnimeToServer = animeInfo => (dispatch, getState) => {\r\n    const body = JSON.stringify(animeInfo);\r\n\r\n    axios\r\n        .put(API_UPDATE_ANIME_TO_SERVER(animeInfo['anime']), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('The Anime Server Info has been updated successfully!', Alert.type_success));\r\n            dispatch(getAnime(animeInfo['anime']))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET NEWS\r\nexport const getNews = (page) => (dispatch, getState) => {\r\n    dispatch({type: NEWS_LOADING});\r\n    let config = tokenConfig(getState);\r\n    if (page) if (page !== 1) config.params = {'page': page};\r\n\r\n\r\n    axios\r\n        .get(API_GET_NEWS, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_NEWS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// OPEN ANIME FOLDER\r\nexport const openAnimeFolder = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_OPEN_ANIME_FOLDER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Folder opened', Alert.type_info));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// OPEN EROGE FOLDER\r\nexport const openErogeFolder = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_OPEN_EROGE_FOLDER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Folder opened', Alert.type_info));\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};","import moment from \"moment\";\r\nimport {\r\n    faArrowDown,\r\n    faArrowUp,\r\n    faBan,\r\n    faClock, faDownload, faHdd, faInfinity,\r\n    faPause, faPuzzlePiece,\r\n    faSpinner, faUpload, faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\n\r\nexport function getBytesToSize(size) {\r\n    const terabyte = 1099511627776;\r\n    const gigabyte = 1073741824;\r\n    const megabyte = 1048576;\r\n\r\n    if (size >= 10995116277760)  // More than 10TB\r\n        return `${(size / terabyte).toFixed(1)}TB`;\r\n    else if (size >= 1099511627776)  // More than 1TB\r\n        return `${(size / terabyte).toFixed(2)}TB`;\r\n    else if (size >= 107374182400) // More than 100GB\r\n        return `${Math.ceil(size / gigabyte)}GB`;\r\n    else if (size >= 10737418240) // More than 10GB\r\n        return `${(size / gigabyte).toFixed(1)}GB`;\r\n    else if (size >= 1073741824) // More than 1GB\r\n        return `${(size / gigabyte).toFixed(2)}GB`;\r\n    else  // Less then 1GB\r\n        return `${Math.ceil(size / megabyte)}MB`;\r\n}\r\n\r\n\r\nexport function getTime(sec) {\r\n    let hrs = Math.floor(sec / 3600);\r\n    let min = Math.floor((sec - (hrs * 3600)) / 60);\r\n    let seconds = sec - (hrs * 3600) - (min * 60);\r\n    seconds = Math.round(seconds * 100) / 100;\r\n\r\n    let result = (hrs < 10 ? \"0\" + hrs : hrs);\r\n    result += \":\" + (min < 10 ? \"0\" + min : min);\r\n    result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\r\n    return result;\r\n}\r\n\r\n\r\nexport function getProgress(progress) {\r\n    return (progress * 100).toFixed(1);\r\n}\r\n\r\n\r\nexport function getSpeed(speed) {\r\n    if (speed < 1000000) return `${(speed / 1024.0).toFixed(1)}Kb/s`;\r\n    else return `${(speed / (1024 * 1024.0)).toFixed(1)}Mb/s`;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.torrent {Object}\r\n * @param props.filters {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TorrentProgressInfo(props) {\r\n    const {torrent, filters} = props;\r\n    let days = parseInt(moment.utc(torrent['eta'] * 1000).format('DDD')) - 1;\r\n    let hours = parseInt(moment.utc(torrent['eta'] * 1000).format('HH'));\r\n    let minutes = parseInt(moment.utc(torrent['eta'] * 1000).format('mm'));\r\n    let eta_str = '';\r\n    let status_icon;\r\n\r\n    if (days > 0) eta_str += `${days}d `;\r\n    if (hours > 0) eta_str += `${hours}h `;\r\n    if (minutes > 0) eta_str += `${minutes}m`;\r\n\r\n    if (torrent['torrent_status'].indexOf('downloading') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowDown}/>;\r\n    else if (torrent['torrent_status'].indexOf('forcedDL') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowDown}/>;\r\n    else if (torrent['torrent_status'].indexOf('upload') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowUp}/>;\r\n    else if (torrent['torrent_status'].indexOf('pause') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faPause}/>;\r\n    else if (torrent['torrent_status'].indexOf('check') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faSpinner} title=\"Checking\"/>;\r\n    else if (torrent['torrent_status'].indexOf('stall') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faBan} title=\"Stalled\"/>;\r\n    else if (torrent['torrent_status'].indexOf('queued') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faClock} title=\"Queued\"/>;\r\n    else\r\n        status_icon = <span className=\"margin-left-10\">{torrent['torrent_status']}</span>;\r\n\r\n    return filters['name'] ?\r\n        <tbody className=\"torrent-info-container\">\r\n        <tr>\r\n            <td>\r\n                {torrent['name'].replace('[NotAdded]', '')}\r\n            </td>\r\n            {filters['size'] ? <td>\r\n                <FontAwesomeIcon icon={faHdd}/>\r\n                <span className=\"color-secondary\">{getBytesToSize(torrent['size'])}</span>\r\n            </td> : null}\r\n            <td>\r\n                {status_icon} <span className=\"color-secondary\">{getProgress(torrent['progress'])}%</span>\r\n            </td>\r\n            {filters['dl_speed'] ? <td>\r\n                            <span><FontAwesomeIcon icon={faDownload}/>{' '}\r\n                                <span className={torrent['dl_speed'] > 0 ? 'color-secondary' : null}>\r\n                                {getSpeed(torrent['dl_speed'])}</span></span>\r\n            </td> : null}\r\n            {filters['up_speed'] ? <td>\r\n                            <span><FontAwesomeIcon icon={faUpload}/>{' '}\r\n                                <span className={torrent['up_speed'] > 0 ? 'color-secondary' : null}>\r\n                                {getSpeed(torrent['up_speed'])}</span></span>\r\n            </td> : null}\r\n            {filters['remaining'] ? <td>\r\n                <FontAwesomeIcon icon={faPuzzlePiece} title=\"Remaining\"/>{' '}\r\n                <span className=\"color-secondary\">{getBytesToSize(torrent['amount_left'])}</span>\r\n            </td> : null}\r\n            {filters['seeds'] ? <td>\r\n                <FontAwesomeIcon icon={faUsers} className=\"color-green\"/>{' '}\r\n                <span className=\"color-secondary\">{torrent['num_seeds']}</span>\r\n            </td> : null}\r\n            {filters['leechs'] ? <td>\r\n                <FontAwesomeIcon icon={faUsers} className=\"color-danger\"/>{' '}\r\n                <span className=\"color-secondary\">{torrent['num_leechs']}</span>\r\n            </td> : null}\r\n            {filters['eta'] ? <td>\r\n                <FontAwesomeIcon icon={faClock}/>{' '}\r\n                <span className=\"color-secondary\">{torrent['eta'] < 8640000 ? eta_str :\r\n                    <FontAwesomeIcon icon={faInfinity}/>}</span>\r\n            </td> : null}\r\n        </tr>\r\n        <tr>\r\n            <td className=\"padding-bottom-10\" colSpan=\"20\">\r\n                <LinearProgress variant=\"determinate\" color=\"secondary\" value={getProgress(torrent['progress'])}/>\r\n            </td>\r\n        </tr>\r\n        </tbody> :\r\n        <div className=\"torrent-info-container\">\r\n            <div>\r\n                <p className=\"color-secondary-dark\">\r\n                    {filters['name'] ? <span className=\"torrent-info\">\r\n                    {torrent['name'].replace('[NotAdded]', '')}\r\n                </span> : null}\r\n\r\n                    {filters['size'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faHdd}/>{' '}\r\n                        <span>{getBytesToSize(torrent['size'])}</span>\r\n                </span> : null}\r\n\r\n                    <span className=\"torrent-info\">{status_icon} {getProgress(torrent['progress'])}%</span>\r\n\r\n                    {filters['dl_speed'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faDownload}/>{' '}\r\n                        <span className={torrent['dl_speed'] > 0 ? 'color-secondary' : null}>\r\n                        {getSpeed(torrent['dl_speed'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['up_speed'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUpload}/>{' '}\r\n                        <span className={torrent['up_speed'] > 0 ? 'color-secondary' : null}>\r\n                        {getSpeed(torrent['up_speed'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['remaining'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faPuzzlePiece} title=\"Remaining\"/>{' '}\r\n                        <span>{getBytesToSize(torrent['amount_left'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['seeds'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUsers} className=\"color-green\"/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['num_seeds']}</span>\r\n                </span> : null}\r\n                    {filters['leechs'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUsers} className=\"color-danger\"/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['num_leechs']}</span>\r\n                </span> : null}\r\n\r\n                    {filters['eta'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faClock}/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['eta'] < 8640000 ? eta_str :\r\n                            <FontAwesomeIcon icon={faInfinity}/>}</span>&nbsp;\r\n                </span> : null}\r\n                </p>\r\n            </div>\r\n            <LinearProgress variant=\"determinate\" color=\"secondary\" value={getProgress(torrent['progress'])}/>\r\n        </div>;\r\n}","import * as Yup from \"yup\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {Form, Formik} from \"formik\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function GoToPageDialog(props) {\r\n    const {open, current_page, total_pages, onClose, goToPage} = props;\r\n\r\n    const GoToPageSchema = Yup.object().shape({\r\n        page_number: Yup.number()\r\n            .min(1, \"Page number must be above 1.\")\r\n            .max(total_pages, `Page number can't exceed the last page ${total_pages}.`)\r\n            .required('Required'),\r\n    });\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"go-to-page-dialog-title\" open={open}>\r\n            <div className=\"go-to-page-dialog\">\r\n                <DialogTitle id=\"go-to-page-dialog-title\">Go to page</DialogTitle>\r\n\r\n                <Formik\r\n                    initialValues={{page_number: current_page}}\r\n                    validationSchema={GoToPageSchema}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        goToPage(values.page_number);\r\n                        onClose();\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({isSubmitting, errors, touched, values, handleChange, handleBlur}) => (\r\n                        <Form className=\"content-container\">\r\n                            <TextField\r\n                                label=\"Page\"\r\n                                type=\"number\"\r\n                                name=\"page_number\"\r\n                                value={values.page_number}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                error={errors.page_number && touched.page_number}\r\n                                helperText={(errors.page_number && touched.page_number) && errors.page_number}/>\r\n                            <CyberButton color=\"primary\" type=\"submit\" variant=\"contained\"\r\n                                         disabled={isSubmitting}>Go</CyberButton>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Moment from 'react-moment'\r\n\r\nimport {getNews} from '../../../actions/requiem'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {getTime} from \"./snippets\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass News extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getNews();\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.news[ApiResult.count] / 5)) {\r\n            this.setState({current_page: page});\r\n            this.props.getNews(page);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {news, news_is_loading} = this.props;\r\n        let news_results = [];\r\n\r\n        try {\r\n            if (news['results'].length > 0) news_results = news['results'];\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <Grid id=\"News-Container\" container>\r\n                {!news_is_loading ?\r\n                    news_results.map((post, i) => (\r\n                        <Grid item xs={12} className=\"report box-light\" key={i}>\r\n                            <h3 className=\"color-blue\">{post['title']}</h3>\r\n                            <p className=\"color-dark-blue indent-1em\">{post['description']}</p>\r\n                            {post['anime_entries'].length > 0 ?\r\n                                <p className=\"color-dark-blue\">Total <span className={post['title']\r\n                                    .indexOf('removed') >= 0 ? 'color-red' : 'color-blue'}>\r\n                                            {post['anime_entries'].length}</span></p>\r\n                                : post['anime_server_entries'].length > 0 ?\r\n                                    <p className=\"color-dark-blue\">Total <span className=\"color-magenta\">\r\n                                                {post['anime_server_entries'].length}</span></p>\r\n                                    : post['manga_entries'].length > 0 ?\r\n                                        <p className=\"color-dark-blue\">Total <span className={post['title']\r\n                                            .indexOf('removed') >= 0 ? 'color-red' : 'color-blue'}>\r\n                                                    {post['manga_entries'].length}</span></p>\r\n                                        : post['manga_server_entries'].length > 0 ?\r\n                                            <p className=\"color-dark-blue\">Total&nbsp;\r\n                                                <span className=\"color-magenta\">\r\n                                                            {post['manga_server_entries'].length}</span></p>\r\n                                            : post['characters_entries'].length > 0 ?\r\n                                                <p className=\"color-dark-blue\">\r\n                                                    Total <span className={post['title']\r\n                                                    .indexOf('removed') >= 0 ? 'color-red'\r\n                                                    : 'color-blue'}>\r\n                                                            {post['characters_entries'].length}</span></p>\r\n                                                : null}\r\n                            {/*{post['anime_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['anime_entries']} branch={BRANCH_TYPE_ANIME}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    server={false}/> : null}*/}\r\n                            {/*{post['anime_server_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['anime_server_entries']}*/}\r\n                            {/*                    branch={BRANCH_TYPE_ANIME} server={true}/> : null}*/}\r\n                            {/*{post['manga_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['manga_entries']} branch={BRANCH_TYPE_MANGA}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    server={false}/> : null}*/}\r\n                            {/*{post['manga_server_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['manga_server_entries']}*/}\r\n                            {/*                    branch={BRANCH_TYPE_MANGA} server={true}/> : null}*/}\r\n                            {/*{post['characters_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['characters_entries']}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    branch={BRANCH_TYPE_CHARACTERS} server={false}/> : null}*/}\r\n                            <div className=\"duration\">\r\n                                <p className=\"color-dark-blue\">\r\n                                    Date: <span className=\"color-white\"><Moment\r\n                                    format=\"DD MMM YYYY HH:mm:ss\"\r\n                                    date={post['datetime_created']}/>\r\n                                        </span>\r\n                                </p>\r\n                                {post['operation_duration_sec'] ?\r\n                                    <p className=\"color-dark-blue margin-left-20\">\r\n                                        Duration: <span className=\"color-white\">\r\n                                                {getTime(post['operation_duration_sec'])}\r\n                                            </span>\r\n                                    </p>\r\n                                    : null}\r\n                            </div>\r\n                        </Grid>))\r\n                    : <Loading text={'News Loading'}/>}\r\n\r\n                {!news_is_loading ? <div className=\"pagination\">\r\n                    <Pagination\r\n                        count={Math.ceil(this.props.news[ApiResult.count] / 5)}\r\n                        color=\"primary\"\r\n                        siblingCount={3}\r\n                        page={this.state.current_page}\r\n                        onChange={(type, page) => {\r\n                            playClickSound();\r\n                            if (page !== this.state.current_page)\r\n                                this.goToPage(page);\r\n                            else\r\n                                this.setState({page_dialog_open: true})\r\n                        }}\r\n                    />\r\n                    <GoToPageDialog\r\n                        open={this.state.page_dialog_open}\r\n                        current_page={this.state.current_page}\r\n                        total_pages={Math.ceil(this.props.news[ApiResult.count] / 5)}\r\n                        goToPage={this.goToPage}\r\n                        onClose={this.closePageDialog}/>\r\n                </div> : null}\r\n\r\n\r\n                     {/*<Pagination page={news} items_per_page={5} getItems={getNews}*/}\r\n                     {/*                            scroll_to={[0, 550]}/> : null}*/}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    news_is_loading: state.requiem.news_is_loading,\r\n    news: state.requiem.news,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getNews})(News)\r\n","export const particles_params = {\r\n    \"particles\": {\r\n        \"number\": {\r\n            \"value\": 100,\r\n            \"density\": {\r\n                \"enable\": true,\r\n                \"value_area\": 263\r\n            }\r\n        },\r\n        \"color\": {\r\n            \"value\": \"#ffffff\"\r\n        },\r\n        \"shape\": {\r\n            \"type\": \"circle\",\r\n            \"stroke\": {\r\n                \"width\": 0,\r\n                \"color\": \"#000000\"\r\n            },\r\n            \"polygon\": {\r\n                \"nb_sides\": 5\r\n            },\r\n            \"image\": {\r\n                \"src\": \"img/github.svg\",\r\n                \"width\": 100,\r\n                \"height\": 100\r\n            }\r\n        },\r\n        \"opacity\": {\r\n            \"value\": 0.3,\r\n            \"random\": false,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 1,\r\n                \"opacity_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"size\": {\r\n            \"value\": 2,\r\n            \"random\": true,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 40,\r\n                \"size_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"line_linked\": {\r\n            \"enable\": true,\r\n            \"distance\": 40,\r\n            \"color\": \"#ffffff\",\r\n            \"opacity\": 0.15,\r\n            \"width\": 1\r\n        },\r\n        \"move\": {\r\n            \"enable\": true,\r\n            \"speed\": 0.2,\r\n            \"direction\": \"none\",\r\n            \"random\": true,\r\n            \"straight\": false,\r\n            \"out_mode\": \"out\",\r\n            \"bounce\": false,\r\n            \"attract\": {\r\n                \"enable\": false,\r\n                \"rotateX\": 600,\r\n                \"rotateY\": 1200\r\n            }\r\n        }\r\n    },\r\n    \"interactivity\": {\r\n        \"detect_on\": \"window\",\r\n        \"events\": {\r\n            \"onhover\": {\r\n                \"enable\": true,\r\n                \"mode\": \"grab\"\r\n            },\r\n            \"onclick\": {\r\n                \"enable\": true,\r\n                \"mode\": \"push\"\r\n            },\r\n            \"resize\": true\r\n        },\r\n        \"modes\": {\r\n            \"grab\": {\r\n                \"distance\": 50,\r\n                \"line_linked\": {\r\n                    \"opacity\": 1\r\n                }\r\n            },\r\n            \"bubble\": {\r\n                \"distance\": 400,\r\n                \"size\": 40,\r\n                \"duration\": 2,\r\n                \"opacity\": 8,\r\n                \"speed\": 3\r\n            },\r\n            \"repulse\": {\r\n                \"distance\": 200,\r\n                \"duration\": 0.4\r\n            },\r\n            \"push\": {\r\n                \"particles_nb\": 4\r\n            },\r\n            \"remove\": {\r\n                \"particles_nb\": 2\r\n            }\r\n        }\r\n    },\r\n    \"retina_detect\": true\r\n};\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Particles from 'react-particles-js';\r\n\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/home.css'\r\nimport {getAllUsers} from \"../../actions/users\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport {Profile as ProfileModel, User} from \"../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../layout/common/common\";\r\nimport {CYBER_GENESIS_URL} from \"../../globals\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport {getBrowseGridListCols} from \"../functions\";\r\nimport {PROFILE} from \"../../urls\";\r\nimport News from \"../requiem/snippets/News\";\r\nimport {particles_params} from \"./functions\";\r\n\r\n\r\nclass Home extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber-Space';\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        this.props.getAllUsers();\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    render() {\r\n        // const video_url = 'https://finkiukim-my.sharepoint.com/personal/adrian_kostoski_students_finki_ukim_mk/_layouts/15/download.aspx?SourceUrl=%2Fpersonal%2Fadrian_kostoski_students_finki_ukim_mk%2FDocuments%2FAnime-Hosting%2F%5BCoalgirls%5D_Infinite_Stratos_01_(1920x1080_Blu-Ray_FLAC)_%5BA9B39255%5D.mkv&correlationId=a16fc107-db97-49a0-8f22-34972ccd6a98&psi=a98eab6f-0e64-4e87-ae49-72aef5c08037&ccat=2&cs=fHxPbmVVcFdlYlBsYXllcg%3D%3D&App=OneDriveWebVideo';\r\n        // const video_url2 = 'https://finkiukim-my.sharepoint.com/personal/adrian_kostoski_students_finki_ukim_mk/_layouts/15/download.aspx?SourceUrl=%2Fpersonal%2Fadrian_kostoski_students_finki_ukim_mk%2FDocuments%2FAnime-Hosting%2F%5BCoalgirls%5D_Infinite_Stratos_01_(1920x1080_Blu-Ray_FLAC)_%5BA9B39255%5D.mkv&correlationId=a16fc107-db97-49a0-8f22-34972ccd6a98&psi=a98eab6f-0e64-4e87-ae49-72aef5c08037&ccat=2&cs=fHxPbmVVcFdlYlBsYXllcg%3D%3D&App=download';\r\n\r\n        const video_url_dropbox = 'https://www.dropbox.com/s/zoy9wf489bvyhmq/%5BHorribleSubs%5D%20Kateikyoushi%20Hitman%20Reborn%21%20-%2001%20%5B480p%5D.mkv?raw=1';\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"Home\" container>\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <News/>*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid item xs={12}>\r\n                        <Particles className=\"bg-particles\" params={particles_params}/>\r\n                    </Grid>\r\n\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <iframe*/}\r\n                    {/*        src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fmijomir.bulgarin%2Fposts%2F467447447764547&width=500&show_text=false&height=281&appId\"*/}\r\n                    {/*        width=\"500\" height=\"281\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameBorder=\"0\"*/}\r\n                    {/*        allowFullScreen=true*/}\r\n                    {/*        allow=\"autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share\"*/}\r\n                    {/*        allowFullScreen=\"true\"></iframe>*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <p>Video:</p>*/}\r\n                    {/*    <video width=\"30%\" controls>*/}\r\n                    {/*        <source*/}\r\n                    {/*            src={video_url_dropbox}*/}\r\n                    {/*        />*/}\r\n                    {/*        Your browser does not support the video tag.*/}\r\n                    {/*    </video>*/}\r\n                    {/*    /!*<video width=\"30%\" controls>*!/*/}\r\n                    {/*    /!*    <source*!/*/}\r\n                    {/*    /!*        src={video_url}*!/*/}\r\n                    {/*    /!*    />*!/*/}\r\n                    {/*    /!*    Your browser does not support the video tag.*!/*/}\r\n                    {/*    /!*</video>*!/*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid item xs={12}>\r\n                        <h1>Users</h1>\r\n                    </Grid>\r\n\r\n                    {this.props.all_users_loaded ? <Grid item xs={12}>\r\n                        <GridList cellHeight={400} className=\"user-card-container\" cols={this.state.gridlist_cols}>\r\n                            {this.props.all_users.map((user, x) => (\r\n                                <GridListTile key={x} cols={1}>\r\n                                    <CyberLink classNames=\"user-card\" to={PROFILE(user[User.id])}>\r\n                                        <div className=\"card-text\">\r\n                                            <h2>{user[User.username]}</h2>\r\n                                        </div>\r\n                                        <PreLoadImage\r\n                                            src={`${CYBER_GENESIS_URL}${user[User.profile][ProfileModel.profile_image]}`}\r\n                                            alt={'Avatar'}/>\r\n                                    </CyberLink>\r\n                                </GridListTile>\r\n\r\n                                // <Card className=\"user-card\" variant=\"outlined\">\r\n                                //     <CardContent>\r\n                                //         <Typography gutterBottom>{user[User.username]}</Typography>\r\n                                //         <PreLoadImage\r\n                                //             src={`${CYBER_GENESIS_URL}${user[User.profile][ProfileModel.profile_image]}`}\r\n                                //             alt={'Avatar'}/>\r\n                                //     </CardContent>\r\n                                //     <CardActions>\r\n                                //     </CardActions>\r\n                                // </Card>\r\n                            ))}\r\n                        </GridList>\r\n                    </Grid> : this.props.users_loading ? <Loading/> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    users_loading: state.users.users_loading,\r\n    all_users_loaded: state.users.all_users_loaded,\r\n    all_users: state.users.all_users,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllUsers})(Home)\r\n","function compareByLabel(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = a['label'];\r\n    const second = b['label'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nfunction compareByStat(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['stat'];\r\n    const second = a['stat'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nexport function getDataTypes(statistics) {\r\n\r\n    let data = [\r\n        {label: 'Movie', stat: statistics['total_movie'], color: '', hoverColor: ''},\r\n        {label: 'Music', stat: statistics['total_music'], color: '', hoverColor: ''},\r\n        {label: 'ONA', stat: statistics['total_ona'], color: '', hoverColor: ''},\r\n        {label: 'OVA', stat: statistics['total_ova'], color: '', hoverColor: ''},\r\n        {label: 'Special', stat: statistics['total_special'], color: '', hoverColor: ''},\r\n        {label: 'TV', stat: statistics['total_tv'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            // borderColor: 'white',\r\n            // hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataSources(statistics) {\r\n    let data = [\r\n        {label: 'Original', stat: statistics['total_original_anime'], meanScore: 0},\r\n        {label: 'Light Novel', stat: statistics['total_anime_from_light_novel'], meanScore: 0},\r\n        {label: 'Music', stat: statistics['total_anime_from_music'], meanScore: 0},\r\n        {label: 'Manga', stat: statistics['total_anime_from_manga'], meanScore: 0},\r\n        {label: 'Other', stat: statistics['total_anime_from_other'], meanScore: 0},\r\n        {label: 'Visual Novel', stat: statistics['total_anime_from_visual_novel'], meanScore: 0},\r\n        {label: 'Book', stat: statistics['total_anime_from_book'], meanScore: 0},\r\n        {label: 'Game', stat: statistics['total_anime_from_game'], meanScore: 0},\r\n        {label: 'Web Manga', stat: statistics['total_anime_from_web_manga'], meanScore: 0},\r\n        {label: 'Novel', stat: statistics['total_anime_from_novel'], meanScore: 0},\r\n        {label: 'Picture Book', stat: statistics['total_anime_from_picture_book'], meanScore: 0},\r\n        {label: 'Card Game', stat: statistics['total_anime_from_card_game'], meanScore: 0},\r\n        {label: '4-Kom Manga', stat: statistics['total_anime_from_4_kom_manga'], meanScore: 0},\r\n        {label: 'Digital Manga', stat: statistics['total_anime_from_digital_manga'], meanScore: 0},\r\n        {label: 'Radio', stat: statistics['total_anime_from_radio'], meanScore: 0},\r\n    ];\r\n    try {\r\n        data = [\r\n            {\r\n                label: 'Original',\r\n                stat: statistics['total_original_anime'],\r\n                meanScore: statistics['total_original_anime_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Light Novel',\r\n                stat: statistics['total_anime_from_light_novel'],\r\n                meanScore: statistics['total_anime_from_light_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Music',\r\n                stat: statistics['total_anime_from_music'],\r\n                meanScore: statistics['total_anime_from_music_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Manga',\r\n                stat: statistics['total_anime_from_manga'],\r\n                meanScore: statistics['total_anime_from_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Other',\r\n                stat: statistics['total_anime_from_other'],\r\n                meanScore: statistics['total_anime_from_other_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Visual Novel',\r\n                stat: statistics['total_anime_from_visual_novel'],\r\n                meanScore: statistics['total_anime_from_visual_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Book',\r\n                stat: statistics['total_anime_from_book'],\r\n                meanScore: statistics['total_anime_from_book_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Game',\r\n                stat: statistics['total_anime_from_game'],\r\n                meanScore: statistics['total_anime_from_game_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Web Manga',\r\n                stat: statistics['total_anime_from_web_manga'],\r\n                meanScore: statistics['total_anime_from_web_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Novel',\r\n                stat: statistics['total_anime_from_novel'],\r\n                meanScore: statistics['total_anime_from_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Picture Book',\r\n                stat: statistics['total_anime_from_picture_book'],\r\n                meanScore: statistics['total_anime_from_picture_book_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Card Game',\r\n                stat: statistics['total_anime_from_card_game'],\r\n                meanScore: statistics['total_anime_from_card_game_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: '4-Kom Manga',\r\n                stat: statistics['total_anime_from_4_kom_manga'],\r\n                meanScore: statistics['total_anime_from_4_kom_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Digital Manga',\r\n                stat: statistics['total_anime_from_digital_manga'],\r\n                meanScore: statistics['total_anime_from_digital_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Radio',\r\n                stat: statistics['total_anime_from_radio'],\r\n                meanScore: statistics['total_anime_from_radio_mean'].toFixed(2)\r\n            },\r\n        ];\r\n    } catch (e) {\r\n    }\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let mean_score_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n        mean_score_data.push(data[x].meanScore);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: mean_score_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '#',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {\r\n                mode: 'label'\r\n            },\r\n            elements: {\r\n                line: {\r\n                    fill: false\r\n                }\r\n            },\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {\r\n                            display: false\r\n                        },\r\n                        labels: {\r\n                            show: true\r\n                        }\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {\r\n                            display: false\r\n                        },\r\n                        labels: {\r\n                            show: true\r\n                        },\r\n                        ticks: {\r\n                            min: 0,\r\n                            max: 10,\r\n                            stepSize: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n\r\nexport function getDataStatuses(statistics) {\r\n\r\n    return {\r\n        labels: [\r\n            'Finished Airing',\r\n            'Not yet Aired',\r\n            'Currently Airing'\r\n        ],\r\n        datasets: [{\r\n            data: [16952, 428, 387],\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRated(statistics) {\r\n\r\n    let data = [\r\n        {label: 'G', stat: statistics['total_rated_g'], color: '', hoverColor: ''},\r\n        {label: 'PG-C', stat: statistics['total_rated_pgc'], color: '', hoverColor: ''},\r\n        {label: 'PG-13', stat: statistics['total_rated_pg13'], color: '', hoverColor: ''},\r\n        {label: 'R', stat: statistics['total_rated_r'], color: '', hoverColor: ''},\r\n        {label: 'R+', stat: statistics['total_rated_r_plus'], color: '', hoverColor: ''},\r\n        {label: 'Rx', stat: statistics['total_rated_rx'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataQualities(statistics) {\r\n\r\n    let data = [\r\n        {label: '2160p', stat: statistics['total_quality_2160p']},\r\n        {\r\n            label: '1080p',\r\n            stat: (statistics['total_quality_1080p'] + statistics['total_quality_960p']),\r\n        },\r\n        {label: '720p', stat: statistics['total_quality_720p']},\r\n        {\r\n            label: '480p',\r\n            stat: (statistics['total_quality_480p'] + statistics['total_quality_528p'] +\r\n                statistics['total_quality_540p'] + statistics['total_quality_560p'] + statistics['total_quality_576p']),\r\n        },\r\n        {\r\n            label: '360p',\r\n            stat: (statistics['total_quality_360p'] + statistics['total_quality_396p']),\r\n        },\r\n        {\r\n            label: '240p',\r\n            stat: (statistics['total_quality_240p'] + statistics['total_quality_288p']),\r\n        },\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataGenres(statistics) {\r\n\r\n    let data = [\r\n        {label: 'Action', stat: statistics['total_genre_action'], color: '', hoverColor: ''},\r\n        {label: 'Adventure', stat: statistics['total_genre_adventure'], color: '', hoverColor: ''},\r\n        {label: 'Cars', stat: statistics['total_genre_cars'], color: '', hoverColor: ''},\r\n        {label: 'Comedy', stat: statistics['total_genre_comedy'], color: '', hoverColor: ''},\r\n        {label: 'Dementia', stat: statistics['total_genre_dementia'], color: '', hoverColor: ''},\r\n        {label: 'Demons', stat: statistics['total_genre_demons'], color: '', hoverColor: ''},\r\n        {label: 'Drama', stat: statistics['total_genre_drama'], color: '', hoverColor: ''},\r\n        {label: 'Ecchi', stat: statistics['total_genre_ecchi'], color: '', hoverColor: ''},\r\n        {label: 'Fantasy', stat: statistics['total_genre_fantasy'], color: '', hoverColor: ''},\r\n        {label: 'Game', stat: statistics['total_genre_game'], color: '', hoverColor: ''},\r\n        {label: 'Harem', stat: statistics['total_genre_harem'], color: '', hoverColor: ''},\r\n        {label: 'Hentai', stat: statistics['total_genre_hentai'], color: '', hoverColor: ''},\r\n        {label: 'Historical', stat: statistics['total_genre_historical'], color: '', hoverColor: ''},\r\n        {label: 'Horror', stat: statistics['total_genre_horror'], color: '', hoverColor: ''},\r\n        {label: 'Josei', stat: statistics['total_genre_josei'], color: '', hoverColor: ''},\r\n        {label: 'Kids', stat: statistics['total_genre_kids'], color: '', hoverColor: ''},\r\n        {label: 'Magic', stat: statistics['total_genre_magic'], color: '', hoverColor: ''},\r\n        {label: 'Martial Arts', stat: statistics['total_genre_martial_arts'], color: '', hoverColor: ''},\r\n        {label: 'Mecha', stat: statistics['total_genre_mecha'], color: '', hoverColor: ''},\r\n        {label: 'Military', stat: statistics['total_genre_military'], color: '', hoverColor: ''},\r\n        {label: 'Music', stat: statistics['total_genre_music'], color: '', hoverColor: ''},\r\n        {label: 'Mystery', stat: statistics['total_genre_mystery'], color: '', hoverColor: ''},\r\n        {label: 'Parody', stat: statistics['total_genre_parody'], color: '', hoverColor: ''},\r\n        {label: 'Police', stat: statistics['total_genre_police'], color: '', hoverColor: ''},\r\n        {label: 'Psychological', stat: statistics['total_genre_psychological'], color: '', hoverColor: ''},\r\n        {label: 'Romance', stat: statistics['total_genre_romance'], color: '', hoverColor: ''},\r\n        {label: 'Samurai', stat: statistics['total_genre_samurai'], color: '', hoverColor: ''},\r\n        {label: 'School', stat: statistics['total_genre_school'], color: '', hoverColor: ''},\r\n        {label: 'Sci-Fi', stat: statistics['total_genre_sci_fi'], color: '', hoverColor: ''},\r\n        {label: 'Seinen', stat: statistics['total_genre_seinen'], color: '', hoverColor: ''},\r\n        {label: 'Shoujo', stat: statistics['total_genre_shoujo'], color: '', hoverColor: ''},\r\n        {label: 'Shoujo Ai', stat: statistics['total_genre_shoujo_ai'], color: '', hoverColor: ''},\r\n        {label: 'Shounen', stat: statistics['total_genre_shounen'], color: '', hoverColor: ''},\r\n        {label: 'Shounen Ai', stat: statistics['total_genre_shounen_ai'], color: '', hoverColor: ''},\r\n        {label: 'Slice of Life', stat: statistics['total_genre_slice_of_life'], color: '', hoverColor: ''},\r\n        {label: 'Space', stat: statistics['total_genre_space'], color: '', hoverColor: ''},\r\n        {label: 'Sports', stat: statistics['total_genre_sports'], color: '', hoverColor: ''},\r\n        {label: 'Super Power', stat: statistics['total_genre_super_power'], color: '', hoverColor: ''},\r\n        {label: 'Supernatural', stat: statistics['total_genre_supernatural'], color: '', hoverColor: ''},\r\n        {label: 'Thriller', stat: statistics['total_genre_thriller'], color: '', hoverColor: ''},\r\n        {label: 'Vampire', stat: statistics['total_genre_vampire'], color: '', hoverColor: ''},\r\n        {label: 'Yaoi', stat: statistics['total_genre_yaoi'], color: '', hoverColor: ''},\r\n        {label: 'Yuri', stat: statistics['total_genre_yuri'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '#',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataYears(statistics) {\r\n\r\n    let parsed_data;\r\n    let parsed_data_keys;\r\n    let data = [];\r\n    try {\r\n        parsed_data = JSON.parse(statistics['total_anime_per_year']);\r\n        parsed_data_keys = Object.keys(parsed_data);\r\n        for (let x = 0; x < parsed_data_keys.length; x++) {\r\n            let element = {label: parsed_data_keys[x], stat: parsed_data[parsed_data_keys[x]]};\r\n            data.push(element)\r\n        }\r\n    } catch (e) {\r\n    }\r\n\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '#',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {Bar, Doughnut} from 'react-chartjs-2';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport {getAnimeDataWithStatistics} from '../../../actions/anime'\r\nimport {\r\n    getDataGenres,\r\n    getDataQualities,\r\n    getDataRated,\r\n    getDataSources,\r\n    getDataStatuses,\r\n    getDataTypes,\r\n    getDataYears\r\n} from \"./statistics\";\r\nimport {AnimeDataStatistics, UserList} from \"../../../models\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport CountUp from \"react-countup\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nclass AnimeStatistics extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeDataWithStatistics();\r\n    }\r\n\r\n    render() {\r\n        let data_types = getDataTypes(this.props.anime_data_statistics);\r\n        let data_sources = getDataSources(this.props.anime_data_statistics)[0];\r\n        let data_sources_options = getDataSources(this.props.anime_data_statistics)[1];\r\n        let data_statuses = getDataStatuses(this.props.anime_data_statistics);\r\n        let data_rated = getDataRated(this.props.anime_data_statistics);\r\n        let data_genres = getDataGenres(this.props.anime_data_statistics);\r\n        let data_qualities = getDataQualities(this.props.anime_data_statistics);\r\n        let data_years = getDataYears(this.props.anime_data_statistics);\r\n\r\n        return (\r\n            <Grid container id=\"Anime-Statistics\">\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <h3>ANIME STATISTICS</h3>\r\n                </Grid>\r\n                <Grid item xl={2}/>\r\n                <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total anime:</td>\r\n                            <td><p>{this.props.anime_data_statistics[AnimeDataStatistics.total_anime]} (\r\n                                {this.props.anime_data_statistics[AnimeDataStatistics.total_anime] +\r\n                                this.props.anime_data_statistics[AnimeDataStatistics.total_anime_pending_mal] +\r\n                                this.props.anime_data_statistics[AnimeDataStatistics.total_anime_deleted_mal]}\r\n                                )</p></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Pending by MAL:</td>\r\n                            <td>\r\n                                <p className=\"color-warning\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_pending_mal]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Deleted by MAL:</td>\r\n                            <td>\r\n                                <p className=\"color-danger\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_deleted_mal]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Mean Score:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.mean_score] ?\r\n                                        this.props.anime_data_statistics[AnimeDataStatistics.mean_score].toFixed(2) : null}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total episodes:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_episodes]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total duration:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_minutes]}min (\r\n                                    {(this.props.anime_data_statistics[AnimeDataStatistics.total_minutes] / 1440)\r\n                                        .toFixed(2)} days)\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Downloaded:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_downloaded]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Downloading:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_downloading]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Total size:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {(this.props.anime_data_statistics[AnimeDataStatistics.total_downloaded_size] / 1024)\r\n                                        .toFixed(1)}TB\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Type</h5>\r\n                        <Doughnut height={100} width={100} data={data_types}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Rated</h5>\r\n                        <Doughnut height={100} width={100} data={data_rated}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Quality</h5>\r\n                        <Doughnut height={100} width={100} data={data_qualities}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Status</h5>\r\n                        <Doughnut height={100} width={100} data={data_statuses}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Sources</h5>\r\n                        <Bar\r\n                            data={data_sources}\r\n                            width={100}\r\n                            height={50}\r\n                            options={data_sources_options}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Genres</h5>\r\n                        <Bar\r\n                            data={data_genres}\r\n                            width={100}\r\n                            height={50}\r\n                            options={{\r\n                                maintainAspectRatio: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Anime per Year</h5>\r\n                        <Bar\r\n                            data={data_years}\r\n                            width={100}\r\n                            height={50}\r\n                            options={{\r\n                                maintainAspectRatio: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data_statistics: state.anime.anime_data_statistics,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeDataWithStatistics})(AnimeStatistics)","import React from 'react';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\r\n\r\n\r\nexport function CopyTextToClipboard(props) {\r\n    const {text} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleTooltipClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleTooltipOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"copy-to-clipboard-text\">\r\n            <ClickAwayListener onClickAway={handleTooltipClose}>\r\n                <Tooltip\r\n                    PopperProps={{disablePortal: true,}}\r\n                    onClose={handleTooltipClose}\r\n                    open={open}\r\n                    disableFocusListener\r\n                    disableHoverListener\r\n                    disableTouchListener\r\n                    title=\"Copied!\"\r\n                >\r\n                    <CopyToClipboard text={text}>\r\n                        <span onClick={handleTooltipOpen}>{text}</span>\r\n                    </CopyToClipboard>\r\n                </Tooltip>\r\n            </ClickAwayListener>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../layout/sounds\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DisplayTabs(props) {\r\n    const {tabs} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    {tabs.map((tab, x) => (\r\n                        <Tab disabled={tab.disabled} label={tab.label} {...a11yProps(x)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    ))}\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                {tabs.map((tab, x) => (\r\n                    <TabPanel value={value} index={x} dir={theme.direction} className=\"box-light\">\r\n                        {tab.tab}\r\n                    </TabPanel>\r\n                ))}\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {addAnimeEntry, deleteAnimeEntry, updateAnimeEntry} from \"../../../../actions/users\";\r\nimport {getUserAnimeEntryFormInitialValues, UserAnimeEntryForm} from \"./forms\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\nimport '../../../../assets/css/forms.css';\r\n\r\n\r\nclass AnimeEntryModalForm extends Component {\r\n    static propTypes = {\r\n        /** Classnames for the open dialog btn */\r\n        classNames: PropTypes.object,\r\n        /** Title of the Anime */\r\n        title: PropTypes.string,\r\n        /** ID of the Anime */\r\n        id: PropTypes.number.isRequired,\r\n        /** User entry of the anime */\r\n        user_anime_entry: PropTypes.object,\r\n        /** If the entry is being edited */\r\n        edit: PropTypes.bool,\r\n        /** User list info for filtering on update entry\r\n         * {user_list_pk: list_pk, user_list_filter: selected_filter} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let edit = true;\r\n        if (this.props.edit === undefined) {\r\n            if (isEmpty(this.props.user_anime_entry))\r\n                edit = false;\r\n        } else edit = this.props.edit;\r\n\r\n        const initial_values = getUserAnimeEntryFormInitialValues(this.props.id, this.props.user_anime_entry, edit);\r\n\r\n        return (\r\n                <div id=\"User-Title-Entry\">\r\n                    <CyberButton classNames={this.props.classNames} variant=\"outlined\" color=\"primary\"\r\n                                 onClick={this.handleClickOpen}>\r\n                        <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                    </CyberButton>\r\n                    <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                            className=\"user-title-entry-dialog\">\r\n                        {edit ? <DialogTitle id=\"form-dialog-title\">Edit {this.props.title}</DialogTitle>\r\n                            : <DialogTitle id=\"form-dialog-title\">Add {this.props.title}</DialogTitle>}\r\n                        <DialogContent>\r\n                            <UserAnimeEntryForm initial_values={initial_values} edit={edit} id={this.props.id}\r\n                                                list={this.props.list} handleClose={this.handleClose}/>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateAnimeEntry, addAnimeEntry, deleteAnimeEntry})(AnimeEntryModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {faEdit, faMinusSquare, faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons/faPlay\";\r\n\r\nimport {ANIME_TAB_NAME, CYBER_GENESIS_TAB_NAME, CYBER_GENESIS_URL} from \"../../globals\";\r\nimport {NOT_FOUND} from \"../../urls\";\r\nimport {Anime, AnimeOnServer, CDNCoverImages, CoverImages, User, UserAnimeEntry} from \"../../models\";\r\nimport {playClickSound, playHoverSound} from \"../layout/sounds\";\r\nimport {formatContentDateByKnown, getTitleCoverImage, isEmpty} from \"../functions\";\r\nimport {getAnime} from '../../actions/anime'\r\nimport {CopyTextToClipboard} from \"./snippets\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {DisplayTabs} from \"./TabsRoot\";\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {PreLoadImage} from \"../layout/common/common\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport {\r\n    AdminModalForms,\r\n    formatTitle,\r\n    getTitle,\r\n    getUserModalForms,\r\n    getUserTitleStatus,\r\n    getUserTitleStatusSummary, UserModalForms\r\n} from \"./functions\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/display.css'\r\nimport {faDownload, faPlus, faPlusSquare, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\nimport AnimeEntryModalForm from \"../user/forms/anime/AnimeEntryModalForm\";\r\nimport {getUserAnimeEntry} from \"../../actions/users\";\r\n\r\n\r\nexport const NONE = <span className=\"color-gray\">---</span>;\r\n\r\n\r\nclass Display extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** ID of the title */\r\n        param_id: PropTypes.number.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        title_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        title_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        title: PropTypes.object.isRequired,\r\n        /** Redux prop of user_title_status */\r\n        user_title_status: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        getTitle(this.props.branch, this.props.param_id);\r\n        if (this.props.user_authenticated)\r\n            getUserTitleStatus(this.props.branch, this.props.param_id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.user_authenticated !== this.props.user_authenticated)\r\n            getUserTitleStatus(this.props.branch, this.props.param_id);\r\n        if (prevProps.param_id !== this.props.param_id) {\r\n            window.scrollTo(0, 0);\r\n            getTitle(this.props.branch, this.props.param_id);\r\n            getUserTitleStatus(this.props.branch, this.props.param_id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const superuser = this.props.user && this.props.user[User.is_superuser];\r\n        const display_title = this.props.title_loaded ?\r\n            formatTitle(this.props.branch, this.props.title, superuser) : formatTitle();\r\n        const img_url = getTitleCoverImage(display_title.cdn_cover_images, display_title.cover_images);\r\n        const tabs_margin = !!(display_title.primary_set || display_title.primary_set_wide ||\r\n            display_title.secondary_set);\r\n        document.title = display_title.title ? display_title.title : CYBER_GENESIS_TAB_NAME;\r\n\r\n        if (this.props.status && this.props.status === 404)\r\n            return <Redirect to={NOT_FOUND}/>;\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Display\">\r\n                    {this.props.title_loaded ? <Grid container style={{marginBottom: 100}}>\r\n                        <Grid item xs={12} className=\"title-container\">\r\n                            <h1><CopyTextToClipboard text={display_title.title}/></h1>\r\n                            {superuser ? <AdminModalForms\r\n                                id={this.props.param_id}\r\n                                branch={this.props.branch}\r\n                                title={this.props.title}/> : null}\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <div className=\"details-container\">\r\n                                <div className=\"img-container\">\r\n                                    <PreLoadImage src={img_url} alt={`${this.props.branch} cover image`}/>\r\n                                </div>\r\n                                {this.props.user_authenticated ? <div className=\"user-buttons-container\">\r\n                                    <UserModalForms branch={this.props.branch} id={this.props.param_id} title={display_title.title} entry={this.props.user_title_status}/>\r\n                                    </div> : null}\r\n                                <div className=\"info-container box-light\">\r\n                                    <h2>Alternative Titles</h2>\r\n                                    <table>\r\n                                        <tbody>\r\n                                        {display_title.title_1 ? <tr>\r\n                                            <td>{display_title.title_1.label}</td>\r\n                                            <td>{display_title.title_1.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_1.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        {display_title.title_2 ? <tr>\r\n                                            <td>{display_title.title_2.label}</td>\r\n                                            <td>{display_title.title_2.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_2.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        {display_title.title_3 ? <tr>\r\n                                            <td>{display_title.title_3.label}</td>\r\n                                            <td>{display_title.title_3.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_3.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        </tbody>\r\n                                    </table>\r\n                                    <h2>Information</h2>\r\n                                    <h4>{this.props.branch} Information</h4>\r\n                                    {display_title.info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                    <h4>Database Information</h4>\r\n                                    {display_title.db_info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.db_info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                    <h4>Users Information</h4>\r\n                                    {display_title.users_info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.users_info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={9} className=\"main-container\">\r\n                            {this.props.user_authenticated && !isEmpty(this.props.user_title_status) ?\r\n                                getUserTitleStatusSummary(this.props.branch, this.props.user_title_status) : null}\r\n                            {display_title.primary_set ? <Grid container className=\"summery-container box-light\">\r\n                                {display_title.primary_set.map(item => (\r\n                                    <Grid item xs={2}>\r\n                                        <p>{item.label}</p>\r\n                                        <p>{item.info ? item.info : NONE}</p>\r\n                                    </Grid>\r\n                                ))}\r\n                                {display_title.primary_set_wide ? display_title.primary_set_wide.map(item => (\r\n                                    <Grid item xs={12} className=\"genres-container\">\r\n                                        <p>{item.label}</p>\r\n                                        <p>{item.info ? item.info : NONE}</p>\r\n                                    </Grid>\r\n                                )) : null}\r\n                            </Grid> : null}\r\n                            {display_title.secondary_set ?\r\n                                <Grid container className=\"summery-container box-light color-secondary\">\r\n                                    {display_title.secondary_set.map(item => (\r\n                                        <Grid item xs={Math.floor(12 / display_title.secondary_set.length)}>\r\n                                            <p>{item.label}</p>\r\n                                            <p>{item.info ? item.info : NONE}</p>\r\n                                        </Grid>\r\n                                    ))}\r\n                                </Grid> : null}\r\n\r\n                            {display_title.tabs ? <Grid container className=\"tabs-container\"\r\n                                                        style={{marginTop: tabs_margin ? 15 : 0}}>\r\n                                <DisplayTabs tabs={display_title.tabs}/>\r\n                            </Grid> : null}\r\n                        </Grid>\r\n                    </Grid> : this.props.title_loading ?\r\n                        <Loading text={`${this.props.branch} Loading`} offset={100}/> : null}\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    status: state.errors.status,\r\n    user_authenticated: state.auth.user_authenticated,\r\n\r\n    /**\r\n     * @user: state.auth.user is here for checking if the logged in user is admin and to update the component\r\n     * when adding/removing title from favorites etc.\r\n     * @torrent_progress: is here for re-rendering the component on change\r\n     */\r\n    user: state.auth.user,\r\n    // torrent_progress: state.requiem.torrent_progress\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnime})(Display)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\n\r\nexport function getSynopsys(synopsys) {\r\n    if (!synopsys || synopsys.indexOf('No synopsis information has been added to this title') >= 0)\r\n        return null;\r\n    return synopsys\r\n}\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const synopsys = getSynopsys(this.props.anime[Anime.synopsis]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsis</h2>\r\n                    <p>{synopsys ? synopsys : NONE}</p>\r\n                    {this.props.anime[Anime.background] ?\r\n                        <>\r\n                            <h2>Background</h2>\r\n                            <p>{this.props.anime[Anime.background]}</p>\r\n                        </> : null}\r\n                    {this.props.anime[Anime.opening_theme] || this.props.anime[Anime.ending_theme] ? <>\r\n                        <h2>OST</h2>\r\n                        <p><span>Openings:</span> {this.props.anime[Anime.opening_theme] ?\r\n                            this.props.anime[Anime.opening_theme] : NONE}</p>\r\n                        <p><span>Endings:</span> {this.props.anime[Anime.ending_theme] ?\r\n                            this.props.anime[Anime.ending_theme] : NONE}</p>\r\n                    </> : null}\r\n\r\n                    <h2>Main Characters</h2>\r\n                </div>\r\n\r\n                {this.props.anime[Anime.main_characters].length > 0 ?\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.anime[Anime.main_characters].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList> : <p className=\"none-characters\">{NONE}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Manga} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {getSynopsys} from \"../../../anime/display/tabs/GeneralTab\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const synopsys = getSynopsys(this.props.manga[Manga.synopsis]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsis</h2>\r\n                    <p>{synopsys ? synopsys : NONE}</p>\r\n                    {this.props.manga[Manga.background] ?\r\n                        <>\r\n                            <h2>Background</h2>\r\n                            <p>{this.props.manga[Manga.background]}</p>\r\n                        </> : null}\r\n\r\n                    <h2>Main Characters</h2>\r\n                </div>\r\n\r\n                {this.props.manga[Manga.main_characters].length > 0 ?\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.manga[Manga.main_characters].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList> : <p className=\"none-characters\">{NONE}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport {faExpandArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {Character} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nfunction DisplayVoiceActors(props) {\r\n    const {voice_actors} = props;\r\n    const formatted = voice_actors.split('window._taboola')[0];\r\n    const [expand, setExpand] = useState(false);\r\n    return <>\r\n        <h2>Voice Actors{' '}\r\n            <CyberButton component=\"span\" onClick={() => {setExpand(!expand)}}>\r\n                <FontAwesomeIcon icon={faExpandArrowsAlt}/>\r\n            </CyberButton>\r\n        </h2>\r\n        {expand ? <pre>{formatted}</pre> : <p>{formatted}</p>}\r\n    </>\r\n}\r\n\r\n\r\nfunction getDescription(description) {\r\n    if (!description || description.indexOf('No biography written') >= 0)\r\n        return null;\r\n    return description\r\n}\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const description = getDescription(this.props.character[Character.description]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Description</h2>\r\n                    <p>{description ? description : NONE}</p>\r\n\r\n                    {this.props.character[Character.voice_actors] ?\r\n                        <DisplayVoiceActors voice_actors={this.props.character[Character.voice_actors]}/> : null}\r\n\r\n                    {this.props.character[Character.anime_roles] &&\r\n                    this.props.character[Character.anime_roles].length > 0 ? <h2>Animeography</h2> : null}\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.character[Character.anime_roles].map((anime, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_ANIME} title={anime}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n                <div className=\"general-description\">\r\n                    {this.props.character[Character.manga_roles] &&\r\n                    this.props.character[Character.manga_roles].length > 0 ? <h2>Mangaography</h2> : null}\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.character[Character.manga_roles].map((manga, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_MANGA} title={manga}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    character: state.characters.character,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport reactPreset from \"@bbob/preset-react\";\r\nimport BBCode from \"@bbob/react/lib/Component\";\r\n\r\nimport {Person} from \"../../../../models\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\nimport '../../../../assets/css/people.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>More Info</h2>\r\n                    {this.props.person[Person.more_info] ? <BBCode plugins={[reactPreset()]}>\r\n                        {this.props.person[Person.more_info]}\r\n                    </BBCode> : NONE}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ImageGallery from 'react-image-gallery';\r\n\r\nimport {CYBER_GENESIS_URL} from \"../../../../globals\";\r\nimport {CoverImages, Eroge} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport '../../../../../node_modules/react-image-gallery/styles/css/image-gallery.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        let images = [];\r\n        if (this.props.eroge[Eroge.eroge_screenshots])\r\n            for (let i = 0; i < this.props.eroge[Eroge.eroge_screenshots].length; i++)\r\n                images.push({\r\n                    original: `${CYBER_GENESIS_URL}${this.props.eroge[Eroge.eroge_screenshots][i][CoverImages.image]}`,\r\n                    thumbnail: `${CYBER_GENESIS_URL}${this.props.eroge[Eroge.eroge_screenshots][i][CoverImages.image]}`\r\n                });\r\n\r\n        return (\r\n            <div className=\"general-tab\">\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsys</h2>\r\n                    <p>{this.props.eroge[Eroge.description]}</p>\r\n\r\n                    <h2>Screenshots</h2>\r\n                    <Grid container>\r\n                        <Grid item xs={2}/>\r\n                        <Grid item xs={8} className=\"image-gallery\">\r\n                            <ImageGallery items={images}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge: state.eroge.eroge,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult} from \"../../../../models\";\r\nimport {getAllCharactersForAnime} from \"../../../../actions/anime\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass CharactersTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.anime[Anime.all_characters] || this.props.all_characters[ApiResult.previous])\r\n            this.props.getAllCharactersForAnime(this.props.anime[Anime.id])\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.all_characters[ApiResult.count] / 50)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAllCharactersForAnime(this.props.anime[Anime.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"characters-tab\">\r\n                {this.props.all_characters ? <>\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.all_characters[ApiResult.results].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    all_characters: state.anime.anime[Anime.all_characters],\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllCharactersForAnime})(CharactersTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Manga} from \"../../../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {getAllCharactersForManga} from \"../../../../actions/manga\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass CharactersTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.manga[Manga.all_characters] || this.props.all_characters[ApiResult.previous])\r\n            this.props.getAllCharactersForManga(this.props.manga[Manga.id])\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.all_characters[ApiResult.count] / 50)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAllCharactersForManga(this.props.manga[Manga.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"characters-tab\">\r\n                {this.props.all_characters ? <>\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.all_characters[ApiResult.results].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    all_characters: state.manga.manga[Manga.all_characters],\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllCharactersForManga})(CharactersTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {Anime, Manga, VALID_MANGA_RELATION_NAMES, VALID_MANGA_RELATIONS} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getRelationsForManga} from \"../../../../actions/manga\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass RelationsTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.manga_relations))\r\n            this.props.getRelationsForManga(this.props.manga[Manga.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"relations-tab\">\r\n                {!isEmpty(this.props.manga_relations) ? <>\r\n                    {this.props.manga_relations['manga_relation_adaptation'].length > 0 ?\r\n                        <div>\r\n                            <h2 className=\"relation-name\">Adaptation</h2>\r\n                            <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                {this.props.manga_relations['manga_relation_adaptation'].map((anime, x) => (\r\n                                    <Grow key={x} in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1}>\r\n                                            <TitleCard\r\n                                                branch={BRANCH_ANIME}\r\n                                                title={anime}\r\n                                                user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                    this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                            />\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                ))}\r\n                            </GridList>\r\n                        </div> : null}\r\n\r\n                    {VALID_MANGA_RELATIONS.map((relation_name, i) => (\r\n                        relation_name !== 'manga_relation_adaptation' ?\r\n                            <div key={i}>\r\n                                {this.props.manga_relations[relation_name].length > 0 ?\r\n                                    <h2 className=\"relation-name\">{VALID_MANGA_RELATION_NAMES[relation_name]}</h2> : null}\r\n\r\n                                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                    {this.props.manga_relations[relation_name].map((manga, y) => (\r\n                                        <Grow key={y} in {...({timeout: 200 + (y * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={BRANCH_MANGA}\r\n                                                    title={manga}\r\n                                                    user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                                            this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                            </div> : null))}\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    manga_relations: state.manga.manga[Manga.manga_relations],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRelationsForManga})(RelationsTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Field, Form, Formik} from 'formik';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport {downloadTorrent, getStorageInfo} from \"../../../actions/requiem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Anime, AnimeFranchise} from \"../../../models\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {faCheck, faPlus, faPlusCircle, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\nimport '../../../assets/css/requiem.css'\r\nimport {getAnimeFranchise} from \"../../../actions/anime\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\n\r\nclass DownloadTorrentForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleAddIdToExtraIds = this.handleAddIdToExtraIds.bind(this);\r\n        this.clearExtraIds = this.clearExtraIds.bind(this);\r\n        this.toggleAddExtra = this.toggleAddExtra.bind(this);\r\n        this.state = {extra: false, extra_ids: []}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getStorageInfo();\r\n        if (isEmpty(this.props.anime_franchise))\r\n            this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    toggleAddExtra() {\r\n        playClickSound();\r\n        this.setState({extra: !this.state.extra, extra_ids: []})\r\n    }\r\n\r\n    clearExtraIds() {\r\n        playClickSound();\r\n        this.setState({extra_ids: []})\r\n    }\r\n\r\n    handleAddIdToExtraIds(id) {\r\n        let extra_ids = this.state.extra_ids;\r\n        const index = extra_ids.indexOf(id);\r\n\r\n        if (index > -1) extra_ids.splice(index, 1);\r\n        else extra_ids.push(id);\r\n\r\n        this.setState({extra_ids: extra_ids});\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            disk: 'disk',\r\n            files: 'files',\r\n            extract_subs: 'extract_subs',\r\n            magnet: 'magnet',\r\n            extra_ids: 'extra_ids',\r\n            additional_info: 'additional_info',\r\n        };\r\n\r\n        let initial_values = {\r\n            anime: this.props.anime[Anime.id],\r\n            disk: 'L',\r\n            files: '',\r\n            extract_subs: false,\r\n            magnet: '',\r\n            extra_ids: '',\r\n            additional_info: '',\r\n        };\r\n\r\n        return (\r\n            <div id=\"Download-Anime-Torrent-Form\" className=\"modal-container modal-container-requiem\">\r\n                <Formik\r\n                    initialValues={initial_values}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        values.extra_ids = this.state.extra_ids.join(', ');\r\n                        console.log(values);\r\n                        this.props.downloadTorrent(this.props.anime[Anime.id], values);\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({\r\n                          isSubmitting, values, handleChange,\r\n                          handleBlur, setValues, setFieldValue\r\n                      }) => (\r\n                        <Form className=\"content-container\">\r\n                            {/*<Grid container>*/}\r\n                            {/*    {storage.map((disk, i) => (*/}\r\n                            {/*        <Grid item xs={12} md={4}>*/}\r\n                            {/*            <StorageDiskInfo key={i} disk={disk}/>*/}\r\n                            {/*        </Grid>*/}\r\n                            {/*    ))}*/}\r\n                            {/*</Grid>*/}\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={4}>\r\n                                    <InputLabel id=\"disk\">Disk</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"disk\"\r\n                                        className=\"form-control\"\r\n                                        color=\"secondary\"\r\n                                        value={values[field_names.disk]}\r\n                                        name={field_names.disk}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    >\r\n                                        <MenuItem value=\"F\">F</MenuItem>\r\n                                        <MenuItem value=\"G\">G</MenuItem>\r\n                                        <MenuItem value=\"H\">H</MenuItem>\r\n                                        <MenuItem value=\"I\">I</MenuItem>\r\n                                        <MenuItem value=\"J\">J</MenuItem>\r\n                                        <MenuItem value=\"K\">K</MenuItem>\r\n                                        <MenuItem value=\"L\">L</MenuItem>\r\n                                        <MenuItem value=\"M\">M</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={8} className=\"extract-subs-container\">\r\n                                    <label>Extract Subs</label>\r\n                                    <Checkbox\r\n                                        value={values[field_names.extract_subs]}\r\n                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        name={field_names.extract_subs}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Magnet\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.magnet}\r\n                                        value={values[field_names.magnet]}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group torrent-form-group\">\r\n                                <Grid item xs={2} className=\"torrent-label-container\">\r\n                                    <label>Torrent</label>\r\n                                </Grid>\r\n                                <Grid item xs={9}>\r\n                                    <Dropzone onDrop={acceptedFiles => setFieldValue(field_names.files, acceptedFiles)}>\r\n                                        {({getRootProps, getInputProps, isDragActive}) => (\r\n                                            <section className={isDragActive ? 'dropzone dropzone-active' : 'dropzone'}>\r\n                                                <div className=\"\" {...getRootProps()}>\r\n                                                    <input {...getInputProps()} />\r\n                                                    {isDragActive ?\r\n                                                        <p className=\"hovered\">\r\n                                                            Drop the torrent here ...</p> :\r\n                                                        <p>\r\n                                                            Drag and drop the torrent files here, or click to select\r\n                                                            from explorer</p>\r\n                                                    }\r\n                                                </div>\r\n                                            </section>\r\n                                        )}\r\n                                    </Dropzone>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    {values[field_names.files] ? values[field_names.files].map((file, x) => (\r\n                                        <p key={x} className=\"text-center color-magenta\">> {file['name']}</p>\r\n                                    )) : null}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={1} className=\"extra-buttons-containers\">\r\n                                    <span id=\"extra-btn\" className={this.state.extra ? 'selected' : ''}\r\n                                          onClick={this.toggleAddExtra} onMouseEnter={playHoverSound}>\r\n                                        <FontAwesomeIcon icon={this.state.extra ? faCheck : faPlus}/>\r\n                                    </span>\r\n                                </Grid>\r\n                                <Grid item xs={10}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Extras\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.extra_ids}\r\n                                        value={this.state.extra_ids.join(', ')}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                                <Grid item xs={1} className=\"extra-buttons-containers\">\r\n                                    <span id=\"trash-btn\" onClick={this.clearExtraIds} onMouseEnter={playHoverSound}>\r\n                                        <FontAwesomeIcon icon={faTrash}/>\r\n                                    </span>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                {this.state.extra ? <Grid item xs={12}>\r\n                                    {!this.props.anime_franchise_loading ?\r\n                                        <GridList cellHeight={200} cols={4}>\r\n                                            {this.props.anime_franchise[AnimeFranchise.anime_franchise].map((anime, x) => (\r\n                                                !anime[Anime.anime_on_server] && anime[Anime.id] !== this.props.anime[Anime.id] ?\r\n                                                    <GridListTile\r\n                                                        cols={1}\r\n                                                        className={this.state.extra_ids.indexOf(anime[Anime.id]) >= 0 ?\r\n                                                            'add-franchises-container added-franchise' :\r\n                                                            'add-franchises-container'}>\r\n                                                    <span className=\"add-to-extra-ids-btn\" title={anime[Anime.id]}\r\n                                                          onClick={() => {\r\n                                                              playClickSound();\r\n                                                              this.handleAddIdToExtraIds(anime[Anime.id])\r\n                                                          }}><FontAwesomeIcon icon={faPlusCircle}/></span>\r\n                                                        <TitleCard\r\n                                                            branch={BRANCH_ANIME}\r\n                                                            title={anime}\r\n                                                            mini={true}/>\r\n                                                    </GridListTile> : null))}\r\n                                        </GridList>\r\n                                        : <Loading text={'Franchise loading'}/>}\r\n                                </Grid> : null}\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Additional Info\"\r\n                                        color=\"secondary\"\r\n                                        multiline\r\n                                        value={values[field_names.additional_info]}\r\n                                        name={field_names.additional_info}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <div className=\"submit-container\">\r\n                                <CyberButton variant=\"outlined\" type=\"submit\" onClick={this.props.handleClose}\r\n                                             disabled={isSubmitting}>\r\n                                    Submit\r\n                                </CyberButton>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    storage: state.requiem.storage,\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {downloadTorrent, getStorageInfo, getAnimeFranchise})(DownloadTorrentForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faDownload, faEdit, faExpandArrowsAlt, faPlus, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport DownloadTorrentForm from \"./DownloadTorrentForm\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {Anime, AnimeOnServer, UserAnimeEntry} from \"../../../models\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {LANGUAGES} from \"../../../globals\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {addAnimeToServer, updateAnimeToServer} from \"../../../actions/requiem\";\r\n\r\n\r\nclass DownloadTorrentModalForm extends Component {\r\n    static propTypes = {\r\n        /** classNames */\r\n        classNames: PropTypes.string,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.toggleExpandLanguages = this.toggleExpandLanguages.bind(this);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n            expand_languages: false,\r\n        };\r\n    }\r\n\r\n    toggleExpandLanguages() {\r\n        this.setState({expand_languages: !this.state.expand_languages})\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        const edit = !!this.props.anime[Anime.anime_on_server];\r\n        const languages = this.state.expand_languages ? LANGUAGES : [LANGUAGES[0], LANGUAGES[1]];\r\n        const field_names = {\r\n            anime: 'anime',\r\n            location: 'location',\r\n            size_on_HDD_GB: 'size_on_HDD_GB',\r\n            additional_info: 'additional_info',\r\n            audio_channel: 'audio_channel',\r\n            video_quality: 'video_quality',\r\n            incomplete: 'incomplete',\r\n            incomplete_progress: 'incomplete_progress',\r\n        };\r\n\r\n        let initial_values = {\r\n            anime: this.props.anime[Anime.id],\r\n            location: '',\r\n            size_on_HDD_GB: 0.00,\r\n            additional_info: '',\r\n            audio_channel: '2.0',\r\n            video_quality: '1080p',\r\n            incomplete: false,\r\n            incomplete_progress: 0,\r\n        };\r\n\r\n        LANGUAGES.forEach((language) => {\r\n            const lang = language.toLowerCase();\r\n            initial_values[lang + '_dub'] = false;\r\n            initial_values[lang + '_sub'] = false;\r\n        });\r\n\r\n        if (edit) {\r\n            initial_values = {\r\n                anime: this.props.anime[Anime.id],\r\n                location: this.props.anime[Anime.anime_on_server][AnimeOnServer.location],\r\n                size_on_HDD_GB: this.props.anime[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB],\r\n                additional_info: this.props.anime[Anime.anime_on_server][AnimeOnServer.additional_info],\r\n                audio_channel: this.props.anime[Anime.anime_on_server][AnimeOnServer.audio_channel],\r\n                video_quality: this.props.anime[Anime.anime_on_server][AnimeOnServer.video_quality],\r\n                incomplete: this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete],\r\n                incomplete_progress: this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete_progress],\r\n            };\r\n            LANGUAGES.forEach((language) => {\r\n                const lang = language.toLowerCase();\r\n                initial_values[lang + '_dub'] = this.props.anime[Anime.anime_on_server][`${lang}_dub`];\r\n                initial_values[lang + '_sub'] = this.props.anime[Anime.anime_on_server][`${lang}_sub`];\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div id=\"Edit-Anime-On-Server-Modal\" className={this.props.classNames}>\r\n                <CyberButton classNames=\"btn-contained-secondary\" onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"edit-anime-on-server-dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{edit ? 'Edit' : 'Add'} anime to server</DialogTitle>\r\n                    <DialogContent>\r\n                        <Formik\r\n                            initialValues={initial_values}\r\n                            onSubmit={(values, {setSubmitting}) => {\r\n                                console.log('values', values);\r\n\r\n                                if (edit) this.props.updateAnimeToServer(values);\r\n                                else this.props.addAnimeToServer(values);\r\n\r\n                                setSubmitting(false);\r\n                            }}>\r\n                            {({\r\n                                  isSubmitting, values, handleChange,\r\n                                  handleBlur\r\n                              }) => (\r\n                                <Form id=\"Edit-Anime-On-Server-Form\">\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Location\"\r\n                                                color=\"secondary\"\r\n                                                autoComplete={false}\r\n                                                name={field_names.location}\r\n                                                value={values[field_names.location]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={2}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Size\"\r\n                                                color=\"secondary\"\r\n                                                type=\"number\"\r\n                                                name={field_names.size_on_HDD_GB}\r\n                                                value={values[field_names.size_on_HDD_GB]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                        <Grid item xs={5}>\r\n                                            <InputLabel id=\"video-quality\" className=\"input-label\">Video\r\n                                                Quality</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"video-quality\"\r\n                                                className=\"form-control\"\r\n                                                color=\"secondary\"\r\n                                                value={values[field_names.video_quality]}\r\n                                                name={field_names.video_quality}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            >\r\n                                                <MenuItem value=\"2160p\">2160p</MenuItem>\r\n                                                <MenuItem value=\"1080p\">1080p</MenuItem>\r\n                                                <MenuItem value=\"720p\">720p</MenuItem>\r\n                                                <MenuItem value=\"580p\">580p</MenuItem>\r\n                                                <MenuItem value=\"480p\">480p</MenuItem>\r\n                                                <MenuItem value=\"360p\">360p</MenuItem>\r\n                                                <MenuItem value=\"240p\">240p</MenuItem>\r\n                                            </Select>\r\n                                        </Grid>\r\n                                        <Grid item xs={5}>\r\n                                            <InputLabel id=\"audio-quality\" className=\"input-label\">Audio\r\n                                                Channel</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"audio-quality\"\r\n                                                className=\"form-control\"\r\n                                                color=\"secondary\"\r\n                                                value={values[field_names.audio_channel]}\r\n                                                name={field_names.audio_channel}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            >\r\n                                                <MenuItem value=\"2.0\">2.0</MenuItem>\r\n                                                <MenuItem value=\"5.1\">5.1</MenuItem>\r\n                                            </Select>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={6}>\r\n                                            <label>Incomplete</label>\r\n                                            <Checkbox\r\n                                                value={values[field_names.incomplete]}\r\n                                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                name={field_names.incomplete}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Incomplete Progress\"\r\n                                                color=\"secondary\"\r\n                                                type=\"number\"\r\n                                                disabled={!values[field_names.incomplete]}\r\n                                                name={field_names.incomplete_progress}\r\n                                                value={values[field_names.incomplete_progress]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <label>Dubs</label>\r\n                                            <CyberButton classNames=\"expand-btn\" onClick={this.toggleExpandLanguages}>\r\n                                                <FontAwesomeIcon icon={faExpandArrowsAlt}/>\r\n                                            </CyberButton>\r\n                                        </Grid>\r\n                                        {languages.map((language, x) => (\r\n                                            <Grid item xs={3}>\r\n                                                <div className=\"language-box\" key={x}>\r\n                                                    <Checkbox\r\n                                                        value={values[language.toLowerCase() + '_dub']}\r\n                                                        checked={values[language.toLowerCase() + '_dub']}\r\n                                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                        name={language.toLowerCase() + '_dub'}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                    />\r\n                                                    <label>{language}</label>\r\n                                                </div>\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <label>Subs</label>\r\n                                        </Grid>\r\n                                        {languages.map((language, x) => (\r\n                                            <Grid item xs={3}>\r\n                                                <div className=\"language-box\" key={x}>\r\n                                                    <Checkbox\r\n                                                        value={values[language.toLowerCase() + '_sub']}\r\n                                                        checked={values[language.toLowerCase() + '_sub']}\r\n                                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                        name={language.toLowerCase() + '_sub'}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                    />\r\n                                                    <label>{language}</label>\r\n                                                </div>\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\"\r\n                                                         onClick={this.handleClose} disabled={isSubmitting}>\r\n                                                <FontAwesomeIcon icon={faCheck}/>\r\n                                            </CyberButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime\r\n});\r\n\r\nexport default connect(mapStateToProps, {addAnimeToServer, updateAnimeToServer})(DownloadTorrentModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport {Anime, AnimeOnServer, User} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {faFolder, faMagnet, faTrash, faUserEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {deleteAnimeServerInfoAndTorrents, openAnimeFolder} from \"../../../../actions/requiem\";\r\nimport {ADMIN_EDIT_ANIME_ON_SERVER} from \"../../../../urls\";\r\nimport EditAnimeOnServerModalForm from \"../../../requiem/forms/EditAnimeOnServerModalForm\";\r\n\r\n\r\nclass ServerTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"server-tab\">\r\n                {this.props.user && this.props.user[User.is_superuser] ? <div className=\"btn-group\">\r\n                    <CyberButton classNames=\"btn-contained-secondary\" onClick={() => {\r\n                         this.props.openAnimeFolder(this.props.anime[Anime.id]);\r\n                     }}><FontAwesomeIcon icon={faFolder}/></CyberButton>\r\n                    <EditAnimeOnServerModalForm classNames=\"edit-btn\"/>\r\n                    <a href={ADMIN_EDIT_ANIME_ON_SERVER(this.props.anime[Anime.id])} className=\"margin-left-10\">\r\n                        <CyberButton classNames=\"btn-contained-secondary\" component=\"span\">\r\n                            <FontAwesomeIcon icon={faUserEdit}/>\r\n                        </CyberButton>\r\n                    </a>\r\n                    <CyberButton classNames=\"btn-contained-danger\" onClick={() => {\r\n                         if (window.confirm(\"Are you sure?\")) this.props.deleteAnimeServerInfoAndTorrents(this.props.anime[Anime.id]);\r\n                     }}>\r\n                        <FontAwesomeIcon icon={faTrash}/>\r\n                    </CyberButton>\r\n                </div> : null}\r\n\r\n                <TableContainer>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>Status</TableCell>\r\n                                <TableCell>\r\n                                    {this.props.anime[Anime.anime_on_server][AnimeOnServer.approved] ?\r\n                                        <span className=\"color-green\">Approved</span> :\r\n                                        <span className=\"color-danger\">Pending</span>}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Location</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.location]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Size</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB]}GB</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Video</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.video_quality]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Audio</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.audio_channel]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Dubs</TableCell>\r\n                                <TableCell className=\"lang-chipset\">\r\n                                    {Object.keys(AnimeOnServer).map(key => (\r\n                                        key.endsWith('_dub') ?\r\n                                            this.props.anime[Anime.anime_on_server][key] ?\r\n                                                <Chip variant=\"outlined\" label={key.replace('_dub', '')}/> : null : null\r\n                                    ))}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Subs</TableCell>\r\n                                <TableCell className=\"lang-chipset\">\r\n                                    {Object.keys(AnimeOnServer).map(key => (\r\n                                        key.endsWith('_sub') ?\r\n                                            this.props.anime[Anime.anime_on_server][key] ?\r\n                                                <Chip variant=\"outlined\" label={key.replace('_sub', '')}/> : null : null\r\n                                    ))}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Additional Info</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.additional_info]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Extract Subs</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.extract_subs] ? 'Yes' : 'No'}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Incomplete</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete] ? 'Yes' : 'No'}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Hash</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_hash]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Magnet</TableCell>\r\n                                <TableCell>\r\n                                    {this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_magnet] ?\r\n                                        <CyberButton classNames=\"btn-secondary\" variant=\"outlined\" onClick={() => {\r\n                                            window.open(this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_magnet]);\r\n                                        }}>\r\n                                            <FontAwesomeIcon icon={faMagnet}/>\r\n                                        </CyberButton> : null}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Downloaded on</TableCell>\r\n                                <TableCell><Moment\r\n                                    date={this.props.anime[Anime.anime_on_server][AnimeOnServer.date_added]}\r\n                                    format={'Do MMM YYYY'}/></TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Last Modified</TableCell>\r\n                                <TableCell><Moment\r\n                                    date={this.props.anime[Anime.anime_on_server][AnimeOnServer.date_last_modified]}\r\n                                    format={'Do MMM YYYY'}/></TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {deleteAnimeServerInfoAndTorrents, openAnimeFolder})(ServerTab)\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport store from \"../../../../store\";\r\nimport {updateAnimeEpisode} from \"../../../../actions/users\";\r\nimport {Anime, UserAnimeEntry} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/users.css'\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\n/**\r\n * Increase episode number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the anime to update\r\n * @param props.entry {Object} The user anime entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function UpdateAnimeEpisodeButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserAnimeEntry.watched_episodes] === entry[UserAnimeEntry.anime][Anime.episodes] && entry[UserAnimeEntry.anime][Anime.episodes] > 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                store.dispatch(updateAnimeEpisode(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHistory, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Anime, User, UserAnimeEntry} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Moment from \"react-moment\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport store from \"../../../../store\";\r\nimport {deleteAnimeHistoryEntry} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.entry {Object} Anime entry of the user\r\n * @param props.title {String} Title of the Anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function AnimeEpisodeHistoryModal(props) {\r\n    const {entry, title} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"History-Modal\">\r\n            <CyberButton disabled={isEmpty(entry) || entry[UserAnimeEntry.episode_history].length === 0}\r\n                         variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <FontAwesomeIcon icon={faHistory}/>\r\n            </CyberButton>\r\n            {!isEmpty(entry) && entry[UserAnimeEntry.episode_history].length > 0 ?\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" id=\"History-Modal-Dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"header-title\">\r\n                            History\r\n                        </DialogContentText>\r\n                        {entry[UserAnimeEntry.episode_history].map(history => (\r\n                            <p>Episode <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['episode']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteAnimeEpisodeHistoryButton\r\n                                    history_id={history['id']}\r\n                                    anime_id={entry[UserAnimeEntry.anime][Anime.id]}/>\r\n                            </p>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <CyberButton onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                            Close\r\n                        </CyberButton>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.anime_id {Number} ID of the anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteAnimeEpisodeHistoryButton(props) {\r\n    const {history_id, anime_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteAnimeHistoryEntry(history_id, anime_id));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport {Form, Formik} from \"formik\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport BBCodeQuickGuideDialog from \"./snippets/snippets\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faFileUpload, faLevelDownAlt, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport store from \"../../../store\";\r\nimport {\r\n    addAnimeEntryInstantDrop,\r\n    addMangaEntryInstantDrop, addToFavorites,\r\n    editUserAboutMeBBCode,\r\n    editUserBio,\r\n    importMalXmlForAnimeList,\r\n    importMalXmlForMangaList, removeFromFavorites,\r\n    scrapeEpisodeHistoryFromMal\r\n} from \"../../../actions/users\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {BRANCH_ANIME, store_reducer_users, store_reducers} from \"../../../globals\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {isTitleInFavorites} from \"../../display/functions\";\r\n\r\n\r\n/**\r\n * @param props.branch\r\n * @param props.id\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AddRemoveFromFavorites(props) {\r\n    const {branch, id} = props;\r\n    const initial = isTitleInFavorites(branch, id);\r\n    const [inFavorites, setInFavorites] = useState(initial);\r\n\r\n    return <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n        if (inFavorites) store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n        else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n        setInFavorites(!inFavorites)\r\n    }} title={inFavorites ? 'Remove from favorites' : 'Add to favorites'}>\r\n        <FontAwesomeIcon icon={inFavorites ? faStarSolid : faStar}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n * Form for editing user's bio\r\n * @param props {Object} user's bio\r\n * @param props.bio {String} user's bio\r\n * @param props.closeBio {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function EditBioForm(props) {\r\n    const {bio, closeBio} = props;\r\n    const field_names = {\r\n        bio: 'bio',\r\n    };\r\n\r\n    const initial_values = {\r\n        bio: bio,\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            store.dispatch(editUserBio(values.bio));\r\n            setSubmitting(false);\r\n            closeBio();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"edit-user-bio-form\">\r\n                <TextField\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                            e.preventDefault();\r\n                            handleSubmit();\r\n                        }\r\n                    }}\r\n                    label=\"Bio\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={values.bio}\r\n                    name={field_names.bio}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={errors.bio && touched.bio}\r\n                    helperText={(errors.bio && touched.bio) && errors.bio}/>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props {Object}\r\n * @param props.bbcode {String}\r\n * @param props.closeForm {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function EditAboutMeBBCodeForm(props) {\r\n    const {bbcode, closeForm} = props;\r\n    const field_names = {\r\n        bbcode: 'bbcode',\r\n    };\r\n\r\n    const initial_values = {\r\n        bbcode: bbcode,\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            values.bbcode = values.bbcode.replaceAll('\\n', '[br]');\r\n            store.dispatch(editUserAboutMeBBCode(values.bbcode));\r\n            setSubmitting(false);\r\n            closeForm();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"edit-user-about-me-bbcode-form\">\r\n                <TextField\r\n                    label=\"BBCode\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={values.bbcode.replaceAll('[br]', '\\n')}\r\n                    name={field_names.bbcode}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={errors.bbcode && touched.bbcode}\r\n                    helperText={(errors.bbcode && touched.bbcode) && errors.bbcode}\r\n                />\r\n                <div className=\"button-group\">\r\n                    <BBCodeQuickGuideDialog/>\r\n                    <CyberButton classNames=\"btn-contained-primary\" type=\"submit\"><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\nexport function EditAboutMeBBCodeDialog(props) {\r\n    const {open, onClose, bbcode} = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"edit-user-about-me-bbcode-title\" open={open}>\r\n            <div id=\"edit-user-about-me-bbcode\">\r\n                <DialogTitle id=\"edit-user-about-me-bbcode-title\">Edit BBCode</DialogTitle>\r\n                <EditAboutMeBBCodeForm bbcode={bbcode} closeForm={onClose}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props {Object}\r\n * @param props.bbcode {String}\r\n * @param props.closeForm {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function ScrapeEpisodeHistoryFromMalForm(props) {\r\n    const {closeForm} = props;\r\n    const field_names = {\r\n        MALHLOGSESSID: 'MALHLOGSESSID',\r\n        MALSESSIONID: 'MALSESSIONID',\r\n    };\r\n\r\n    const initial_values = {\r\n        MALHLOGSESSID: '',\r\n        MALSESSIONID: '',\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            store.dispatch(scrapeEpisodeHistoryFromMal(values[field_names.MALHLOGSESSID], values[field_names.MALSESSIONID]));\r\n            setSubmitting(false);\r\n            closeForm();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"scrape-episode-history-from-mal-form\">\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label={field_names.MALHLOGSESSID}\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={values[field_names.MALHLOGSESSID]}\r\n                            name={field_names.MALHLOGSESSID}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.MALHLOGSESSID && touched.MALHLOGSESSID}\r\n                            helperText={(errors.MALHLOGSESSID && touched.MALHLOGSESSID) && errors.MALHLOGSESSID}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label={field_names.MALSESSIONID}\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={values[field_names.MALSESSIONID]}\r\n                            name={field_names.MALSESSIONID}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.MALSESSIONID && touched.MALSESSIONID}\r\n                            helperText={(errors.MALSESSIONID && touched.MALSESSIONID) && errors.MALSESSIONID}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <div className=\"button-group\">\r\n                    <CyberButton classNames=\"btn-contained-primary\" type=\"submit\">\r\n                        <FontAwesomeIcon icon={faCheck}/>\r\n                    </CyberButton>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\nexport function ScrapeEpisodeHistoryFromMalDialog(props) {\r\n    const {open, onClose} = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"scrape-episode-history-from-mal-title\" open={open}>\r\n            <div id=\"scrape-episode-history-from-mal\">\r\n                <DialogTitle id=\"scrape-episode-history-from-mal-title\">MAL Episode History scraper</DialogTitle>\r\n                <ScrapeEpisodeHistoryFromMalForm closeForm={onClose}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * Button for importing xml file from MAL and updating the user's list\r\n * @returns {JSX.Element}\r\n */\r\nexport function ImportAnimeListFromMal(props) {\r\n    const {} = props;\r\n    const uploading = store.getState()[store_reducers.users][store_reducer_users.uploading_file];\r\n\r\n    return <div>\r\n        <input\r\n            accept=\"text/xml\"\r\n            style={{display: 'none'}}\r\n            id=\"import-mal-anime-list-xml\"\r\n            multiple={false}\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n                store.dispatch(importMalXmlForAnimeList(e.target.files[0]))\r\n            }}\r\n        />\r\n        {uploading ? <CircularProgress/> : <label htmlFor=\"import-mal-anime-list-xml\" className=\"upload-img-btn\">\r\n            <Button variant=\"outlined\" color=\"primary\" component=\"span\" onMouseEnter={playHoverSound}\r\n                    onClick={playClickSound}>\r\n                <FontAwesomeIcon icon={faFileUpload}/>\r\n            </Button>\r\n        </label>}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * Button for importing xml file from MAL and updating the user's list\r\n * @returns {JSX.Element}\r\n */\r\nexport function ImportMangaListFromMal(props) {\r\n    const {} = props;\r\n    const uploading = store.getState()[store_reducers.users][store_reducer_users.uploading_file];\r\n\r\n    return <div>\r\n        <input\r\n            accept=\"text/xml\"\r\n            style={{display: 'none'}}\r\n            id=\"import-mal-manga-list-xml\"\r\n            multiple={false}\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n                store.dispatch(importMalXmlForMangaList(e.target.files[0]))\r\n            }}\r\n        />\r\n        {uploading ? <CircularProgress/> : <label htmlFor=\"import-mal-manga-list-xml\" className=\"upload-img-btn\">\r\n            <Button variant=\"outlined\" color=\"primary\" component=\"span\" onMouseEnter={playHoverSound}\r\n                    onClick={playClickSound}>\r\n                <FontAwesomeIcon icon={faFileUpload}/>\r\n            </Button>\r\n        </label>}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * Button for instant dropping an anime\r\n * @param props.anime_id {Number} ID of the anime to be dropped\r\n * @param props.classNames {String} extra classname to pass to the btn\r\n * @param props.variant {String} variant of the MaterialUi btn\r\n * @returns {JSX.Element}\r\n */\r\nexport function AddAnimeEntryInstantDropButton(props) {\r\n    const {anime_id, classNames, variant} = props;\r\n    return <CyberButton variant={variant ? variant : 'outlined'} classNames={classNames} color=\"primary\" title={'Instant Drop'}\r\n                        onClick={() => {\r\n        store.dispatch(addAnimeEntryInstantDrop(anime_id))\r\n    }}>\r\n        <FontAwesomeIcon icon={faLevelDownAlt}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n * Button for instant dropping a manga\r\n * @param props.manga_id {Number} ID of the manga to be dropped\r\n * @param props.classNames {String} extra classname to pass to the btn\r\n * @param props.variant {String} variant of the MaterialUi btn\r\n * @returns {JSX.Element}\r\n */\r\nexport function AddMangaEntryInstantDropButton(props) {\r\n    const {manga_id, classNames, variant} = props;\r\n    return <CyberButton variant={variant ? variant : 'outlined'} classNames={classNames} color=\"primary\" title={'Instant Drop'} onClick={() => {\r\n        store.dispatch(addMangaEntryInstantDrop(manga_id))\r\n    }}>\r\n        <FontAwesomeIcon icon={faLevelDownAlt}/>\r\n    </CyberButton>\r\n}\r\n","import React from \"react\";\r\n\r\nimport 'date-fns';\r\nimport {KeyboardDateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {Form, Formik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {faCheck, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {UserMangaEntry} from \"../../../../models\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport store from \"../../../../store\";\r\nimport {\r\n    addMangaEntry,\r\n    deleteMangaEntry,\r\n    updateMangaEntry\r\n} from \"../../../../actions/users\";\r\nimport {AddRemoveFromFavorites} from \"../shortForms\";\r\n\r\n\r\nconst FIELD_NAMES = {\r\n    read_volumes: UserMangaEntry.read_volumes,\r\n    read_chapters: UserMangaEntry.read_chapters,\r\n    start_date: UserMangaEntry.start_date,\r\n    finish_date: UserMangaEntry.finish_date,\r\n    score: UserMangaEntry.score,\r\n    status: UserMangaEntry.status,\r\n    times_read: UserMangaEntry.times_read,\r\n    comments: UserMangaEntry.comments,\r\n    tags: UserMangaEntry.tags,\r\n    priority: UserMangaEntry.priority,\r\n    rereading: UserMangaEntry.rereading,\r\n    rereading_volume: UserMangaEntry.rereading_volume,\r\n    rereading_chapter: UserMangaEntry.rereading_chapter,\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param manga_id\r\n * @param user_manga_entry\r\n * @param edit\r\n * @returns {{read_chapters: number, comments: string, priority: string, rereading: boolean, tags: string, score: number, times_read: number, finish_date: string, rereading_chapter: number, read_volumes: number, manga: *, rereading_volume: number, errors: boolean, start_date: string, status: string}}\r\n */\r\nexport function getUserMangaEntryFormInitialValues(manga_id, user_manga_entry, edit = false) {\r\n    let initial_values = {\r\n        manga: manga_id,\r\n        read_volumes: 0,\r\n        read_chapters: 0,\r\n        start_date: '',\r\n        finish_date: '',\r\n        score: 0,\r\n        status: USER_MANGA_STATUSES.plan_to_read,\r\n        times_read: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rereading: false,\r\n        rereading_volume: 0,\r\n        rereading_chapter: 0,\r\n        errors: false\r\n    };\r\n\r\n    if (edit && !isEmpty(user_manga_entry))\r\n        initial_values = {\r\n            manga: manga_id,\r\n            read_volumes: user_manga_entry[UserMangaEntry.read_volumes],\r\n            read_chapters: user_manga_entry[UserMangaEntry.read_chapters],\r\n            start_date: user_manga_entry[UserMangaEntry.start_date],\r\n            finish_date: user_manga_entry[UserMangaEntry.finish_date],\r\n            score: user_manga_entry[UserMangaEntry.score],\r\n            status: user_manga_entry[UserMangaEntry.status],\r\n            times_read: user_manga_entry[UserMangaEntry.times_read],\r\n            comments: user_manga_entry[UserMangaEntry.comments],\r\n            tags: user_manga_entry[UserMangaEntry.tags],\r\n            priority: user_manga_entry[UserMangaEntry.priority],\r\n            rereading: user_manga_entry[UserMangaEntry.rereading],\r\n            rereading_volume: user_manga_entry[UserMangaEntry.rereading_volume],\r\n            rereading_chapter: user_manga_entry[UserMangaEntry.rereading_chapter],\r\n        };\r\n\r\n    return initial_values\r\n}\r\n\r\n\r\nfunction deleteEntry(id, list) {\r\n    if (window.confirm('Are you sure? This will also delete any chapter history of this manga.'))\r\n        store.dispatch(deleteMangaEntry(id, list));\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.initial_values\r\n * @param {boolean} props.edit\r\n * @param {int} props.id\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserMangaEntryForm(props) {\r\n    const {initial_values, edit, id, list, handleClose} = props;\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}><Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            if (values.start_date === '') values.start_date = null;\r\n            if (values.finish_date === '') values.finish_date = null;\r\n            values.score = parseInt(values.score);\r\n\r\n            if (edit) store.dispatch(updateMangaEntry(id, values, list));\r\n            else store.dispatch(addMangaEntry(values));\r\n\r\n            setSubmitting(false);\r\n        }}>\r\n        {({\r\n              isSubmitting, values, handleChange,\r\n              handleBlur, setValues\r\n          }) => (\r\n            <Form id=\"User-Title-Entry-Form\">\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-status\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-status\"\r\n                            className=\"form-control\"\r\n                            label=\"Status\"\r\n                            value={values[FIELD_NAMES.status]}\r\n                            name={FIELD_NAMES.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"Reading\">Reading</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                            <MenuItem value=\"On Hold\">On Hold</MenuItem>\r\n                            <MenuItem value=\"Dropped\">Dropped</MenuItem>\r\n                            <MenuItem value=\"Plan to Read\">Plan to Read</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-value\">Priority</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-value\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.priority]}\r\n                            name={FIELD_NAMES.priority}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"4\">VERY HIGH</MenuItem>\r\n                            <MenuItem value=\"3\">HIGH</MenuItem>\r\n                            <MenuItem value=\"2\">MEDIUM</MenuItem>\r\n                            <MenuItem value=\"1\">LOW</MenuItem>\r\n                            <MenuItem value=\"0\">VERY LOW</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Volume\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.read_volumes}\r\n                            value={values[FIELD_NAMES.read_volumes]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4} md={2}>\r\n                        <div className=\"form-group text-right\">\r\n                            <Checkbox\r\n                                value={values[FIELD_NAMES.rereading]}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                name={FIELD_NAMES.rereading}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={4}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Reread Volume\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rereading_volume}\r\n                            value={values[FIELD_NAMES.rereading_volume]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rereading]}/>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Chapter\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.read_chapters}\r\n                            value={values[FIELD_NAMES.read_chapters]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Reread Chapter\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rereading_chapter}\r\n                            value={values[FIELD_NAMES.rereading_chapter]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rereading]}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-score\">Score</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-score\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.score]}\r\n                            name={FIELD_NAMES.score}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"0\">0</MenuItem>\r\n                            <MenuItem value=\"1\">1</MenuItem>\r\n                            <MenuItem value=\"2\">2</MenuItem>\r\n                            <MenuItem value=\"3\">3</MenuItem>\r\n                            <MenuItem value=\"4\">4</MenuItem>\r\n                            <MenuItem value=\"5\">5</MenuItem>\r\n                            <MenuItem value=\"6\">6</MenuItem>\r\n                            <MenuItem value=\"7\">7</MenuItem>\r\n                            <MenuItem value=\"8\">8</MenuItem>\r\n                            <MenuItem value=\"9\">9</MenuItem>\r\n                            <MenuItem value=\"10\">10</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start date\"\r\n                            value={values[FIELD_NAMES.start_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.start_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Times watched\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.times_read}\r\n                            value={values[FIELD_NAMES.times_read]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Finish date\"\r\n                            value={values[FIELD_NAMES.finish_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.finish_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Comments\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.comments]}\r\n                            name={FIELD_NAMES.comments}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Tags\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.tags]}\r\n                            name={FIELD_NAMES.tags}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <DialogActions>\r\n                    <AddRemoveFromFavorites branch={BRANCH_MANGA} id={parseInt(id)}/>\r\n                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\" onClick={handleClose}\r\n                                 disabled={isSubmitting}><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                    {edit ? <CyberButton classNames=\"btn-danger\" variant=\"outlined\" onClick={(e) => {\r\n                        deleteEntry(id, list);\r\n                        handleClose()\r\n                    }}><FontAwesomeIcon icon={faTrash}/></CyberButton> : null}\r\n                </DialogActions>\r\n            </Form>\r\n        )}\r\n    </Formik></MuiPickersUtilsProvider>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {updateMangaEntry, addMangaEntry, deleteMangaEntry} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getUserMangaEntryFormInitialValues, UserMangaEntryForm} from \"./forms\";\r\n\r\nimport '../../../../assets/css/forms.css';\r\n\r\n\r\nclass MangaEntryModalForm extends Component {\r\n    static propTypes = {\r\n        /** Classnames for the open dialog btn */\r\n        classNames: PropTypes.object,\r\n        /** Title of the Manga */\r\n        title: PropTypes.string,\r\n        /** ID of the Manga */\r\n        id: PropTypes.number.isRequired,\r\n        /** User entry of the manga */\r\n        user_manga_entry: PropTypes.object,\r\n        /** If the entry is being edited */\r\n        edit: PropTypes.bool,\r\n        /** User list info for filtering on update entry\r\n         * {user_list_pk: list_pk, user_list_filter: selected_filter} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let edit = true;\r\n        if (this.props.edit === undefined) {\r\n            if (isEmpty(this.props.user_manga_entry))\r\n                edit = false;\r\n        } else edit = this.props.edit;\r\n\r\n        const initial_values = getUserMangaEntryFormInitialValues(this.props.id, this.props.user_manga_entry, edit);\r\n\r\n        return (\r\n            <div id=\"User-Title-Entry\">\r\n                <CyberButton classNames={this.props.classNames} variant=\"outlined\" color=\"primary\"\r\n                             onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"user-title-entry-dialog\">\r\n                    {edit ? <DialogTitle id=\"form-dialog-title\">Edit {this.props.title}</DialogTitle>\r\n                        : <DialogTitle id=\"form-dialog-title\">Add {this.props.title}</DialogTitle>}\r\n                    <DialogContent>\r\n                        <UserMangaEntryForm initial_values={initial_values} edit={edit} id={this.props.id}\r\n                                            list={this.props.list} handleClose={this.handleClose}/>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateMangaEntry, addMangaEntry, deleteMangaEntry})(MangaEntryModalForm)\r\n","import React, {useState} from \"react\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport store from \"../../../../store\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport {updateMangaChapter, updateMangaVolume} from \"../../../../actions/users\";\r\nimport {Manga, UserMangaEntry} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/users.css'\r\n\r\n\r\n/**\r\n * Increase volume number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the manga to update\r\n * @param props.entry {Object} The user manga entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UpdateMangaVolumeButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserMangaEntry.read_volumes] === entry[UserMangaEntry.manga][Manga.volumes] &&\r\n        entry[UserMangaEntry.manga][Manga.volumes] !== 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserMangaEntry.read_volumes] !== entry[UserMangaEntry.manga][Manga.volumes] ||\r\n                    entry[UserMangaEntry.manga][Manga.volumes] === 0)\r\n                    store.dispatch(updateMangaVolume(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n\r\n\r\n/**\r\n * Increase volume number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the manga to update\r\n * @param props.entry {Object} The user manga entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UpdateMangaChapterButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserMangaEntry.read_chapters] === entry[UserMangaEntry.manga][Manga.chapters] &&\r\n        entry[UserMangaEntry.manga][Manga.chapters] !== 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserMangaEntry.read_chapters] !== entry[UserMangaEntry.manga][Manga.chapters] ||\r\n                    entry[UserMangaEntry.manga][Manga.chapters] === 0)\r\n                    store.dispatch(updateMangaChapter(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHistory, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Anime, Manga, User, UserAnimeEntry, UserMangaEntry} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Moment from \"react-moment\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport store from \"../../../../store\";\r\nimport {deleteAnimeHistoryEntry, deleteMangaVolumeChapterHistoryEntry} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.entry {Object} Manga entry of the user\r\n * @param props.title {String} Title of the Manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function MangaVolumeChapterHistoryModal(props) {\r\n    const {entry, title} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"History-Modal\">\r\n            <CyberButton disabled={isEmpty(entry) ||\r\n            (entry[UserMangaEntry.volume_history].length === 0 && entry[UserMangaEntry.chapter_history].length === 0)}\r\n                         variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <FontAwesomeIcon icon={faHistory}/>\r\n            </CyberButton>\r\n            {!isEmpty(entry) && entry[UserMangaEntry.volume_history].length > 0 ?\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" id=\"History-Modal-Dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"header-title\">\r\n                            Volume History\r\n                        </DialogContentText>\r\n                        {entry[UserMangaEntry.volume_history].map(history => (\r\n                            <p>Volume <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['volume']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteMangaVolumeHistoryButton\r\n                                    history_id={history['id']}\r\n                                    manga_id={entry[UserMangaEntry.manga][Manga.id]}/>\r\n                            </p>\r\n                        ))}\r\n                        <DialogContentText className=\"header-title\">\r\n                            Chapter History\r\n                        </DialogContentText>\r\n                        {entry[UserMangaEntry.chapter_history].map(history => (\r\n                            <p>Chapter <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['chapter']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteMangaChapterHistoryButton\r\n                                    history_id={history['id']}\r\n                                    manga_id={entry[UserMangaEntry.manga][Manga.id]}/>\r\n                            </p>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <CyberButton onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                            Close\r\n                        </CyberButton>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.manga_id {Number} ID of the manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteMangaVolumeHistoryButton(props) {\r\n    const {history_id, manga_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteMangaVolumeChapterHistoryEntry(history_id, manga_id, 'volume'));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.anime_id {Number} ID of the manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteMangaChapterHistoryButton(props) {\r\n    const {history_id, manga_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteMangaVolumeChapterHistoryEntry(history_id, manga_id, 'chapter'));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nimport {Anime, Manga, VALID_ANIME_RELATION_NAMES, VALID_ANIME_RELATIONS} from \"../../../../models\";\r\nimport {getRelationsForAnime} from \"../../../../actions/anime\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass RelationsTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.anime_relations))\r\n            this.props.getRelationsForAnime(this.props.anime[Anime.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"relations-tab\">\r\n                {!isEmpty(this.props.anime_relations) ? <>\r\n                    {this.props.anime_relations['anime_relation_adaptation'].length > 0 ?\r\n                        <div>\r\n                            <h2 className=\"relation-name\">Adaptation</h2>\r\n                            <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                {this.props.anime_relations['anime_relation_adaptation'].map((manga, x) => (\r\n                                    <Grow key={x} in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1}>\r\n                                            <TitleCard\r\n                                                branch={BRANCH_MANGA}\r\n                                                title={manga}\r\n                                                user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                                        this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                            />\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                ))}\r\n                            </GridList>\r\n                        </div> : null}\r\n\r\n                    {VALID_ANIME_RELATIONS.map((relation_name, i) => (\r\n                        relation_name !== 'anime_relation_adaptation' ?\r\n                            <div key={i}>\r\n                                {this.props.anime_relations[relation_name].length > 0 ?\r\n                                    <h2 className=\"relation-name\">{VALID_ANIME_RELATION_NAMES[relation_name]}</h2> : null}\r\n\r\n                                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                    {this.props.anime_relations[relation_name].map((anime, y) => (\r\n                                        <Grow key={y} in {...({timeout: 200 + (y * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={BRANCH_ANIME}\r\n                                                    title={anime}\r\n                                                    user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                        this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                            </div> : null))}\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_relations: state.anime.anime[Anime.anime_relations],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRelationsForAnime})(RelationsTab)\r\n","import React, {Component} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\nimport Tree from 'react-d3-tree';\r\n\r\nimport {\r\n    BRANCH_ANIME\r\n\r\n} from \"../../../globals\";\r\n\r\nimport {VALID_ANIME_RELATION_NAMES, VALID_ANIME_RELATIONS} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {useCenteredTree} from \"./helpers\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faAngleDoubleDown, faAngleDoubleUp} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nlet TITLES = [];\r\nlet LOCAL_VALID_ANIME_RELATIONS = VALID_ANIME_RELATIONS;\r\nlet b = LOCAL_VALID_ANIME_RELATIONS[1];\r\nLOCAL_VALID_ANIME_RELATIONS[1] = LOCAL_VALID_ANIME_RELATIONS[3];\r\nLOCAL_VALID_ANIME_RELATIONS[3] = b;\r\nlet FINAL_TREE = [];\r\n\r\n\r\nfunction setTitles(titles) {\r\n    TITLES = titles;\r\n}\r\n\r\nfunction compareByAired(a, b) {\r\n    let now = new Date();\r\n    let a_value = false;\r\n    let b_value = false;\r\n    if (a['air_start']) {\r\n        let date_a = new Date(a['air_start']);\r\n        a_value = Math.abs(now - date_a);\r\n    }\r\n    if (a['air_start']) {\r\n        let date_b = new Date(b['air_start']);\r\n        b_value = Math.abs(now - date_b);\r\n    }\r\n    return compare(a_value, b_value);\r\n}\r\n\r\nfunction compare(first, second) {\r\n    if (!first) return -1;\r\n    if (!second) return 1;\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison\r\n}\r\n\r\nfunction getFullAnime(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            return TITLES[x];\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction markAnimeAsAdded(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            TITLES[x]['ADDED'] = true;\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction isAdded(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            return TITLES[x]['ADDED'];\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getChildren(parent_node) {\r\n    markAnimeAsAdded(parent_node['attributes']['info']['id']);\r\n\r\n    // console.log(parent_node);\r\n    if (!parent_node['name']) return;\r\n\r\n    for (let z = 0; z < LOCAL_VALID_ANIME_RELATIONS.length; z++) {\r\n        if (LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_prequel' || LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_adaptation') continue;\r\n        let relation = parent_node['attributes']['info']['anime_relations'][LOCAL_VALID_ANIME_RELATIONS[z]];\r\n        for (let x = 0; x < relation.length; x++) {\r\n            let anime = getFullAnime(relation[x]['id']);\r\n            if (!anime || anime['ADDED'] === true) continue;\r\n            if (anime['anime_relations']['anime_relation_prequel'].length > 0) {\r\n                for (let y = 0; y < anime['anime_relations']['anime_relation_prequel'].length; y++) {\r\n                    if (!isAdded(anime['anime_relations']['anime_relation_prequel'][y]['id'])) {\r\n                        console.log(anime['anime_relations']['anime_relation_prequel'][y]);\r\n                    }\r\n                }\r\n            }\r\n            markAnimeAsAdded(relation[x]['id']);\r\n            let node = {\r\n                name: anime['title'],\r\n                attributes: {\r\n                    info: anime,\r\n                    parent_relation: VALID_ANIME_RELATION_NAMES[LOCAL_VALID_ANIME_RELATIONS[z]]\r\n                },\r\n                children: []\r\n            };\r\n\r\n            parent_node.children.push(node)\r\n        }\r\n    }\r\n\r\n    if (parent_node['children'].length > 0) {\r\n        for (let x = 0; x < parent_node['children'].length; x++) {\r\n            getChildren(parent_node['children'][x])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction checkChildrenForFixingSequel(parent_node, sequel_to_find) {\r\n    if (!parent_node) return;\r\n    for (let x = 0; x < parent_node['children'].length; x++) {\r\n        if (parent_node['children'][x]['attributes']['info']['id'] === sequel_to_find['id']) {\r\n            let node_to_return = parent_node['children'][x];\r\n            const index = parent_node['children'].indexOf(parent_node['children'][x]);\r\n            if (index > -1) {\r\n                parent_node['children'].splice(index, 1);\r\n            }\r\n            return node_to_return;\r\n        }\r\n        let node_to_return = checkChildrenForFixingSequel(parent_node['children'][x], sequel_to_find);\r\n        if (node_to_return) return node_to_return;\r\n    }\r\n}\r\n\r\n\r\nfunction fixSequelPriority(parent_node) {\r\n    let parent_anime = getFullAnime(parent_node['attributes']['info']['id']);\r\n\r\n    if (parent_anime['anime_relations']['anime_relation_sequel'].length > 0 &&\r\n        parent_anime['anime_relations']['anime_relation_full_story'].length <= 0) {\r\n        let in_children = false;\r\n        let sequel_to_find;\r\n        for (let x = 0; x < parent_anime['anime_relations']['anime_relation_sequel'].length; x++) {\r\n            let sequel_anime = getFullAnime(parent_anime['anime_relations']['anime_relation_sequel'][x]['id']);\r\n\r\n            for (let y = 0; y < parent_node['children'].length; y++) {\r\n                let anime = getFullAnime(parent_node['children'][y]['attributes']['info']['id']);\r\n                if (sequel_anime['id'] === anime['id']) {\r\n                    in_children = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (sequel_anime['anime_relations']) {\r\n                if (sequel_anime['anime_relations']['anime_relation_prequel'].length > 1 && parent_anime['type'] != 'TV') {\r\n                    in_children = true;\r\n                }\r\n            }\r\n            sequel_to_find = sequel_anime;\r\n        }\r\n\r\n        if (!in_children) {\r\n            // NOW FIND IT IN THE TREE AND CUT IT FROM THERE AND PASTE IT AS ITS SEQUEL IN HIS CHILDREN\r\n            let root_node = FINAL_TREE[0];\r\n            let node_to_fix = checkChildrenForFixingSequel(root_node, sequel_to_find);\r\n            if (node_to_fix) {\r\n                node_to_fix['attributes']['parent_relation'] = 'Sequel';\r\n                parent_node['children'].push(node_to_fix);\r\n            }\r\n        }\r\n    }\r\n    if (parent_node['children'].length > 0) {\r\n        for (let x = 0; x < parent_node['children'].length; x++) {\r\n            fixSequelPriority(parent_node['children'][x])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getRootNode(titles) {\r\n    // First find the root title\r\n    // Root is valid if it doesnt have (Parent Story,\r\n    // Full Story, or Other that is a TV or Movie and current title is not TV)\r\n    let root;\r\n    let root_node;\r\n\r\n    for (let x = 0; x < titles.length; x++) {\r\n        let _continue = false;\r\n        if (titles[x]['anime_relations']['anime_relation_full_story'].length > 0)\r\n            continue;\r\n        else if (titles[x]['anime_relations']['anime_relation_parent_story'].length > 0)\r\n            continue;\r\n        else if (titles[x]['anime_relations']['anime_relation_prequel'].length > 0)\r\n            continue;\r\n        else if (titles[x]['type'] !== 'TV' && titles[x]['anime_relations']['anime_relation_other'].length > 0 && titles[x]['anime_relations']['anime_relation_sequel'].length <= 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_other'].length; y++) {\r\n                if (titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'TV' ||\r\n                    titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'Movie' ||\r\n                    titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'OVA') {\r\n                    _continue = true;\r\n                    break\r\n                }\r\n            }\r\n            if (_continue) continue;\r\n        }\r\n        if (titles[x]['type'] !== 'TV' && titles[x]['anime_relations']['anime_relation_spin_off'].length > 0) {\r\n            let check = true;\r\n            for (let z = 0; z < LOCAL_VALID_ANIME_RELATIONS.length; z++) {\r\n                if (LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_spin_off' || LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_adaptation') continue;\r\n                if (titles[x]['anime_relations'][LOCAL_VALID_ANIME_RELATIONS[z]].length > 0) {\r\n                    check = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (check) {\r\n                for (let y = 0; y < titles[x]['anime_relations']['anime_relation_spin_off'].length; y++) {\r\n                    if (titles[x]['anime_relations']['anime_relation_spin_off'][y]['type'] === 'TV') {\r\n                        _continue = true;\r\n                        break\r\n                    }\r\n                }\r\n                if (_continue) continue;\r\n            }\r\n        }\r\n        if (titles[x]['type'] === 'TV' && titles[x]['anime_relations']['anime_relation_alternative_setting'].length > 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_alternative_setting'].length; y++) {\r\n                let anime = getFullAnime(titles[x]['anime_relations']['anime_relation_alternative_setting'][y]['id']);\r\n                if (anime) {\r\n                    if (anime['anime_relations']['anime_relation_prequel'].length > 0) {\r\n                        _continue = true;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n            if (_continue) continue;\r\n        }\r\n        if (titles[x]['type'] === 'Movie' && titles[x]['anime_relations']['anime_relation_alternative_version'].length > 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_alternative_version'].length; y++) {\r\n                if (titles[x]['anime_relations']['anime_relation_alternative_version'][y]['type'] === 'TV') {\r\n                    _continue = true;\r\n                    break\r\n                }\r\n            }\r\n            if (_continue) continue\r\n        }\r\n\r\n        root = titles[x];\r\n        root_node = {\r\n            name: root['title'],\r\n            attributes: {\r\n                info: root,\r\n                parent_relation: null\r\n            },\r\n            children: []\r\n        };\r\n        return root_node;\r\n    }\r\n    return false\r\n}\r\n\r\nconst renderForeignObjectNode = ({nodeDatum, toggleNode, foreignObjectProps, user_statuses}) => (\r\n    <g>\r\n        {/* `foreignObject` requires width & height to be explicitly set. */}\r\n        <foreignObject {...foreignObjectProps} className=\"foreign-object\">\r\n            {console.log('statuses', user_statuses)}\r\n            <div style={{width: \"50%\"}}>\r\n                <p className=\"card-relation-name\">{nodeDatum['attributes']['parent_relation']}</p>\r\n                <div className=\"card-wrapper\">\r\n                    <TitleCard\r\n                        classNames=\"franchise-card\"\r\n                        branch={BRANCH_ANIME}\r\n                        title={nodeDatum['attributes']['info']}\r\n                        user_status={user_statuses[nodeDatum['attributes']['info']['id'].toString()]}\r\n                    />\r\n                </div>\r\n                {nodeDatum.children.length > 0 && (\r\n                    <CyberButton classNames=\"btn-contained-primary\" style={{width: \"100%\"}} onClick={toggleNode}>\r\n                        <FontAwesomeIcon icon={nodeDatum.__rd3t.collapsed ? faAngleDoubleDown : faAngleDoubleUp}/>\r\n                    </CyberButton>\r\n                )}\r\n            </div>\r\n        </foreignObject>\r\n    </g>\r\n);\r\n\r\nfunction TreeBuilder(props) {\r\n    const {data, user_statuses} = props;\r\n    const [translate, containerRef] = useCenteredTree();\r\n    const nodeSize = {x: 600, y: 600};\r\n    const foreignObjectProps = {width: nodeSize.x, height: nodeSize.y, x: -150, y: -250};\r\n    console.log('in tree builder', user_statuses);\r\n    return (\r\n        <div style={{width: \"100%\", height: \"100vh\"}} ref={containerRef}>\r\n            <Tree\r\n                data={data}\r\n                translate={translate}\r\n                nodeSize={nodeSize}\r\n                pathFunc={'step'}\r\n                renderCustomNodeElement={(rd3tProps) =>\r\n                    renderForeignObjectNode({...rd3tProps, user_statuses, foreignObjectProps})\r\n                }\r\n                orientation=\"vertical\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nclass FranchiseTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {titles, user_anime_entry_statuses, mini} = this.props;\r\n\r\n        // let translate = {x: innerWidth / 2, y: innerHeight / 3};\r\n        let node_size = {x: 294, y: 500};\r\n        let foreign_object_wrapper = {x: -132, y: -230};\r\n        let svgSquare = {\r\n            shape: 'rect',\r\n            shapeProps: {\r\n                width: 265,\r\n                height: 450,\r\n                x: -125,\r\n                y: -230,\r\n            }\r\n        };\r\n\r\n        // console.log(mini);\r\n\r\n        if (mini) {\r\n            svgSquare.shapeProps = {\r\n                width: 120,\r\n                height: 200,\r\n                x: -80,\r\n                y: -100,\r\n            };\r\n            foreign_object_wrapper = {x: -75, y: -120};\r\n            node_size = {x: 184, y: 300};\r\n            // translate.y = innerHeight / 4;\r\n        }\r\n\r\n        for (let x = 0; x < titles.length; x++) {\r\n            titles[x]['ADDED'] = false\r\n        }\r\n\r\n        setTitles(titles);\r\n        titles.sort(compareByAired).reverse();\r\n\r\n        let root_node = getRootNode(titles);\r\n\r\n        FINAL_TREE = [\r\n            root_node\r\n        ];\r\n\r\n        if (root_node) {\r\n            getChildren(root_node);\r\n            FINAL_TREE = [\r\n                root_node\r\n            ];\r\n            try {\r\n                fixSequelPriority(root_node);\r\n            } catch (e) {\r\n            }\r\n            FINAL_TREE = [\r\n                root_node\r\n            ];\r\n            // fixSequelPriority(root_node);\r\n\r\n            // let missing = false;\r\n            // for (let x = 0; x < titles.length; x++) {\r\n            //     if (!titles[x]['ADDED']) {\r\n            //         missing = true;\r\n            //     }\r\n            // }\r\n\r\n            // if (missing) {\r\n            //     getMissingChildren(root_node);\r\n            // }\r\n\r\n            // let missing = true;\r\n            // while (missing) {\r\n            //     missing = false;\r\n            //     for (let x = 0; x < titles.length; x++) {\r\n            //         if (!titles[x]['ADDED']) {\r\n            //             missing = true;\r\n            //         }\r\n            //     }\r\n            //     fixMissingTitles(root_node, titles)\r\n            // }\r\n        }\r\n\r\n        let TreeData = FINAL_TREE;\r\n        let missing = 0;\r\n        for (let x = 0; x < titles.length; x++) {\r\n            if (!titles[x]['ADDED']) {\r\n                console.log(titles[x]['id']);\r\n                missing += 1;\r\n            }\r\n        }\r\n\r\n        if (root_node) {\r\n            return (\r\n                <div id=\"Franchise-Tree\">\r\n                    <div style={{position: 'absolute'}}>{missing}</div>\r\n                    {/*<div className=\"card-size-btn-container\"><Button color={'primary'} onClick={this.toggleCard}>X</Button></div>*/}\r\n                    <TreeBuilder data={TreeData} user_statuses={this.props.user_anime_entry_statuses}/>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <p className=\"color-blue\">Could not generate franchise</p>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    // mini: state.anime.display_franchise_mini,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(FranchiseTree)\r\n","import { useCallback, useState } from \"react\";\r\n\r\n\r\nexport const useCenteredTree = (defaultTranslate = { x: 0, y: 0 }) => {\r\n  const [translate, setTranslate] = useState(defaultTranslate);\r\n  const containerRef = useCallback((containerElem) => {\r\n    if (containerElem !== null) {\r\n      const { width, height } = containerElem.getBoundingClientRect();\r\n      setTranslate({ x: width / 2, y: height / 2 });\r\n    }\r\n  }, []);\r\n  return [translate, containerRef];\r\n};","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, AnimeFranchise} from \"../../../../models\";\r\nimport {getAnimeFranchise} from \"../../../../actions/anime\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport FranchiseTree from \"../../../franchises/display/FranchiseTree\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {ANIME_FRANCHISE_DISPLAY} from \"../../../../urls\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSitemap} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass FranchiseTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.anime_franchise))\r\n            this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Display-Franchise\" className=\"franchise-tab\">\r\n                <CyberLink to={ANIME_FRANCHISE_DISPLAY(this.props.anime[Anime.franchise])}><CyberButton variant=\"outlined\"><FontAwesomeIcon icon={faSitemap}/></CyberButton></CyberLink>\r\n                {!isEmpty(this.props.anime_franchise) ?\r\n                    <FranchiseTree titles={this.props.anime_franchise[AnimeFranchise.anime_franchise]}/>\r\n                    : this.props.anime_franchise_loading ? <Loading text={'Franchise Loading'}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise})(FranchiseTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faDownload} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport DownloadTorrentForm from \"./DownloadTorrentForm\";\r\n\r\n\r\nclass DownloadTorrentModalForm extends Component {\r\n    static propTypes = {\r\n        /** classNames */\r\n        classNames: PropTypes.string,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Download-Anime-Torrent-Modal\" className={this.props.classNames}>\r\n                <CyberButton classNames=\"btn-contained-secondary\" onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={faDownload}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"download-torrent-dialog\">\r\n                        <DialogTitle id=\"form-dialog-title\">Download torrent</DialogTitle>\r\n                        <DialogContent>\r\n                            <DownloadTorrentForm handleClose={this.handleClose}/>\r\n                        </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(DownloadTorrentModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {Anime, AnimeOnServer} from \"../../../models\";\r\nimport moment from \"moment\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown,\r\n    faArrowUp,\r\n    faBan,\r\n    faClock,\r\n    faDownload,\r\n    faHdd,\r\n    faPause, faPuzzlePiece,\r\n    faSpinner, faUpload, faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {getBytesToSize, getProgress, getSpeed, TorrentProgressInfo} from \"./snippets\";\r\nimport PropTypes from \"prop-types\";\r\nimport {getTorrentProgress} from \"../../../actions/requiem\";\r\nimport {sleep} from \"../../functions\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nclass DisplayTorrentProgress extends Component {\r\n    static propTypes = {\r\n        /** ID of the title to get torrent progress for */\r\n        id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            torrent_progress_reading: false,\r\n            update_interval: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTorrentProgress(this.props.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {id, getTorrentProgress} = this.props;\r\n        setTimeout(() => { getTorrentProgress(id) }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const torrent_filters = {\r\n            'name': false, 'size': true, 'dl_speed': true, 'up_speed': true, 'remaining': true,\r\n            'seeds': true, 'leechs': true, 'eta': true\r\n        };\r\n\r\n        return this.props.torrent_progress && this.props.torrent_progress.length > 0 ?\r\n            this.props.torrent_progress.map(torrent => (\r\n                <TorrentProgressInfo torrent={torrent} filters={torrent_filters}/>\r\n            )) : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    torrent_progress: state.requiem.torrent_progress\r\n});\r\n\r\nexport default connect(mapStateToProps, {getTorrentProgress})(DisplayTorrentProgress)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Character, Person} from \"../../../../models\";\r\nimport {getVoiceActorRolesForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../../actions/users\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\nconst ITEMS_PER_PAGE = 20;\r\n\r\n\r\nclass VoiceActorRolesTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.voice_actor_roles] || this.props.voice_actor_roles[ApiResult.previous])\r\n            this.props.getVoiceActorRolesForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_anime_entry_statuses))\r\n            this.props.getLoggedInUserAnimeEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getVoiceActorRolesForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"person-voice-actor-roles-tab person-tab\">\r\n                {this.props.voice_actor_roles ? <>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Anime</td>\r\n                                <td>Character</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.props.voice_actor_roles[ApiResult.results].map((character, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    {character[Character.anime_roles].map((anime, x) => (\r\n                                        this.props.person?.[Person.voice_actor_anime_roles]?.[character[Character.id]]?.[anime[Anime.id]] ? <div className=\"anime-role-wrapper\">\r\n                                            <Chip className={this.props.person?.[Person.voice_actor_anime_roles]?.[character[Character.id]]?.[anime[Anime.id]] === 'Main' ? 'role-text chip-primary' : 'role-text'}\r\n                                                  variant=\"default\"\r\n                                                  size=\"small\"\r\n                                                  label={this.props.person?.[Person.voice_actor_anime_roles]?.[character[Character.id]]?.[anime[Anime.id]]}/>\r\n                                            <TitleCard\r\n                                                key={x} branch={BRANCH_ANIME} title={anime}\r\n                                                containerClassNames=\"character-role-wrapper-card-container\"\r\n                                                user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                    this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                            />\r\n                                        </div> : null\r\n                                    ))}\r\n                                </td>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        containerClassNames=\"character-role-wrapper-card-container character-role-center\"\r\n                                        branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    {/*</GridList>*/}\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.characters_loading ? <Loading text={'Characters loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    voice_actor_roles: state.people.person[Person.voice_actor_roles],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    characters_loading: state.characters.characters_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getVoiceActorRolesForPerson, getLoggedInUserAnimeEntryStatuses\r\n})(VoiceActorRolesTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Character, Person} from \"../../../../models\";\r\nimport {getAnimeStaffPositionsForPerson, getVoiceActorRolesForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 50;\r\n\r\n\r\nclass AnimeStaffPositionsTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.anime_staff_positions] || this.props.anime_staff_positions[ApiResult.previous])\r\n            this.props.getAnimeStaffPositionsForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_anime_entry_statuses))\r\n            this.props.getLoggedInUserAnimeEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAnimeStaffPositionsForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const positions_roles = JSON.parse(this.props.person[Person.anime_staff_positions_roles]);\r\n        return (\r\n            <div className=\"person-tab\">\r\n                {this.props.anime_staff_positions ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.anime_staff_positions[ApiResult.results].map((anime, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        key={i} branch={BRANCH_ANIME} title={anime}\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                            this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                    />\r\n                                </td>\r\n                                <td><p className=\"role\">{positions_roles[anime[Anime.id]]}</p></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.anime_loading ? <Loading text={'Anime loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    anime_staff_positions: state.people.person[Person.anime_staff_positions],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    anime_loading: state.anime.anime_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getAnimeStaffPositionsForPerson, getLoggedInUserAnimeEntryStatuses\r\n})(AnimeStaffPositionsTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Manga, Person} from \"../../../../models\";\r\nimport {getPublishedMangaForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {getLoggedInUserMangaEntryStatuses} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 50;\r\n\r\n\r\nclass PublishedMangaTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.published_manga] || this.props.published_manga[ApiResult.previous])\r\n            this.props.getPublishedMangaForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_manga_entry_statuses))\r\n            this.props.getLoggedInUserMangaEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getPublishedMangaForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const manga_roles = JSON.parse(this.props.person[Person.published_manga_roles]);\r\n        return (\r\n            <div className=\"person-tab\">\r\n                {this.props.published_manga ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.published_manga[ApiResult.results].map((manga, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        key={i} branch={BRANCH_MANGA} title={manga}\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                            this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                    />\r\n                                </td>\r\n                                <td><p className=\"role\">{manga_roles[manga[Manga.id]]}</p></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.manga_loading ? <Loading text={'Manga loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    published_manga: state.people.person[Person.published_manga],\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n    manga_loading: state.manga.manga_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPublishedMangaForPerson, getLoggedInUserMangaEntryStatuses\r\n})(PublishedMangaTab)\r\n","import {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA, BRANCH_PEOPLE,\r\n    store_reducer_users,\r\n    store_reducers, USER_ANIME_STATUSES, USER_MANGA_STATUSES\r\n} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {getAnime} from \"../../actions/anime\";\r\nimport {getManga} from \"../../actions/manga\";\r\nimport {formatBytes, formatContentDateByKnown, isEmpty} from \"../functions\";\r\nimport {\r\n    Anime,\r\n    AnimeOnServer,\r\n    Character,\r\n    Eroge,\r\n    Manga, Person,\r\n    Profile,\r\n    User,\r\n    UserAnimeEntry,\r\n    UserMangaEntry\r\n} from \"../../models\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons/faPlay\";\r\nimport React from \"react\";\r\nimport GeneralTab from \"../anime/display/tabs/GeneralTab\";\r\nimport MangaGeneralTab from \"../manga/display/tabs/GeneralTab\";\r\nimport CharactersGeneralTab from \"../characters/display/tabs/GeneralTab\";\r\nimport PeopleGeneralTab from \"../people/display/tabs/GeneralTab\";\r\nimport ErogeGeneralTab from \"../eroge/display/tabs/GeneralTab\";\r\nimport CharactersTab from \"../anime/display/tabs/CharactersTab\";\r\nimport MangaCharactersTab from \"../manga/display/tabs/CharactersTab\";\r\nimport MangaRelationsTab from \"../manga/display/tabs/RelationsTab\";\r\nimport ServerTab from \"../anime/display/tabs/ServerTab\";\r\nimport {\r\n    faBookOpen,\r\n    faCodeBranch,\r\n    faDownload, faEdit,\r\n    faHistory,\r\n    faInfo, faLevelDownAlt, faMinusSquare,\r\n    faServer,\r\n    faSitemap, faSyncAlt, faUserCog,\r\n    faUserFriends\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {getCharacter} from \"../../actions/characters\";\r\nimport {getEroge} from \"../../actions/eroge\";\r\nimport Moment from \"react-moment\";\r\nimport {\r\n    addToFavorites,\r\n    getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses,\r\n    getUserAnimeEntry,\r\n    getUserMangaEntry,\r\n    removeFromFavorites\r\n} from \"../../actions/users\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AnimeEntryModalForm from \"../user/forms/anime/AnimeEntryModalForm\";\r\nimport {faPlus, faPlusSquare, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\nimport UpdateAnimeEpisodeButton from \"../user/forms/anime/UpdateAnimeEpisodeButton\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport AnimeEpisodeHistoryModal from \"../user/forms/anime/AnimeEpisodeHistoryModal\";\r\nimport MangaEntryModalForm from \"../user/forms/manga/MangaEntryModalForm\";\r\nimport {\r\n    UpdateMangaVolumeButton,\r\n    UpdateMangaChapterButton\r\n} from \"../user/forms/manga/UpdateMangaVolumeChapterButtons\";\r\nimport MangaVolumeChapterHistoryModal from \"../user/forms/manga/MangaVolumeChapterHistoryModal\";\r\nimport RelationsTab from \"../anime/display/tabs/RelationsTab\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {element} from \"prop-types\";\r\nimport {\r\n    ADMIN_EDIT_ANIME,\r\n    ADMIN_EDIT_CHARACTER,\r\n    ADMIN_EDIT_EROGE,\r\n    ADMIN_EDIT_MANGA, ADMIN_EDIT_PERSON,\r\n    ANIME_FRANCHISE_DISPLAY\r\n} from \"../../urls\";\r\nimport FranchiseTab from \"../anime/display/tabs/FranchiseTab\";\r\nimport {getTorrentProgress, scrapeUpdateTitle} from \"../../actions/requiem\";\r\nimport DownloadTorrentModalForm from \"../requiem/forms/DownloadTorrentModalForm\";\r\nimport {TorrentProgressInfo} from \"../requiem/snippets/snippets\";\r\nimport DisplayTorrentProgress from \"../requiem/snippets/DisplayTorrentProgress\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport EditAnimeOnServerModalForm from \"../requiem/forms/EditAnimeOnServerModalForm\";\r\nimport {AddAnimeEntryInstantDropButton, AddMangaEntryInstantDropButton} from \"../user/forms/shortForms\";\r\nimport {getPerson} from \"../../actions/people\";\r\nimport VoiceActorRolesTab from \"../people/display/tabs/VoiceActorRolesTab\";\r\nimport AnimeStaffPositionsTab from \"../people/display/tabs/AnimeStaffPositionsTab\";\r\nimport PublishedMangaTab from \"../people/display/tabs/PublishedMangaTab\";\r\n\r\n\r\nexport function UserAnimeEntryStatus(props) {\r\n    const {classNames, entry} = props;\r\n    let status_classname = 'chip-primary';\r\n\r\n    switch (entry[UserAnimeEntry.status]) {\r\n        case USER_ANIME_STATUSES.watching:\r\n            status_classname = 'chip-success';\r\n            break;\r\n        case USER_ANIME_STATUSES.on_hold:\r\n            status_classname = 'chip-warning';\r\n            break;\r\n        case USER_ANIME_STATUSES.dropped:\r\n            status_classname = 'chip-danger';\r\n            break;\r\n        case USER_ANIME_STATUSES.plan_to_watch:\r\n            status_classname = 'chip-default';\r\n            break;\r\n    }\r\n\r\n    return <Grid container className=\"summery-container box-light\">\r\n        <Grid item xs={2}>\r\n            <p>My Status</p>\r\n            <p><Chip className={status_classname} label={entry[UserAnimeEntry.status]}/></p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Progress</p>\r\n            <p>{entry[UserAnimeEntry.watched_episodes]}\r\n                {entry[UserAnimeEntry.status] !== USER_ANIME_STATUSES.completed ?\r\n                    <UpdateAnimeEpisodeButton id={entry[UserAnimeEntry.anime][UserAnimeEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Score</p>\r\n            <p>{entry[UserAnimeEntry.score] === 0 ?\r\n                <span className=\"color-gray\">0</span> : entry[UserAnimeEntry.score]}</p>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n            <p>Started Watching</p>\r\n            <p>{entry[UserAnimeEntry.start_date] ?\r\n                <Moment date={entry[UserAnimeEntry.start_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n            <p>Finished Watching</p>\r\n            <p>{entry[UserAnimeEntry.finish_date] ?\r\n                <Moment date={entry[UserAnimeEntry.finish_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport function UserMangaEntryStatus(props) {\r\n    const {classNames, entry} = props;\r\n    let status_classname = 'chip-primary';\r\n\r\n    switch (entry[UserAnimeEntry.status]) {\r\n        case USER_MANGA_STATUSES.reading:\r\n            status_classname = 'chip-success';\r\n            break;\r\n        case USER_MANGA_STATUSES.on_hold:\r\n            status_classname = 'chip-warning';\r\n            break;\r\n        case USER_MANGA_STATUSES.dropped:\r\n            status_classname = 'chip-danger';\r\n            break;\r\n        case USER_MANGA_STATUSES.plan_to_read:\r\n            status_classname = 'chip-default';\r\n            break;\r\n    }\r\n\r\n    return <Grid container className=\"summery-container box-light\">\r\n        <Grid item xs={2}>\r\n            <p>My Status</p>\r\n            <p><Chip className={status_classname} label={entry[UserMangaEntry.status]}/></p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Volumes</p>\r\n            <p>{entry[UserMangaEntry.read_volumes]}\r\n                {entry[UserMangaEntry.status] !== USER_MANGA_STATUSES.completed ?\r\n                    <UpdateMangaVolumeButton id={entry[UserMangaEntry.manga][UserMangaEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Chapters</p>\r\n            <p>{entry[UserMangaEntry.read_chapters]}\r\n                {entry[UserMangaEntry.status] !== USER_MANGA_STATUSES.completed ?\r\n                    <UpdateMangaChapterButton id={entry[UserMangaEntry.manga][UserMangaEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Score</p>\r\n            <p>{entry[UserMangaEntry.score] === 0 ?\r\n                <span className=\"color-gray\">0</span> : entry[UserMangaEntry.score]}</p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>Started Reading</p>\r\n            <p>{entry[UserMangaEntry.start_date] ?\r\n                <Moment date={entry[UserMangaEntry.start_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>Finished Reading</p>\r\n            <p>{entry[UserMangaEntry.finish_date] ?\r\n                <Moment date={entry[UserMangaEntry.finish_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport function getTitle(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(getAnime(id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(getManga(id));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            store.dispatch(getCharacter(id));\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(getEroge(id));\r\n            return;\r\n        case BRANCH_PEOPLE:\r\n            store.dispatch(getPerson(id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getUserTitleStatus(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(getUserAnimeEntry(id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(getUserMangaEntry(id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport function getUserTitleStatusSummary(branch, entry) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <UserAnimeEntryStatus entry={entry}/>;\r\n        case BRANCH_MANGA:\r\n            return <UserMangaEntryStatus entry={entry}/>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\nfunction checkFavorites(favoriteTitles, currentTitleId) {\r\n    if (favoriteTitles.length <= 0) return false;\r\n    else\r\n        for (let x = 0; x < favoriteTitles.length; x++) {\r\n            if (favoriteTitles[x]['id'] === currentTitleId) return true;\r\n        }\r\n    return false\r\n}\r\n\r\n\r\nexport function isTitleInFavorites(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            let favorite_anime = store.getState().auth.user[User.profile][Profile.favorite_anime];\r\n            return checkFavorites(favorite_anime, parseInt(id));\r\n        case BRANCH_MANGA:\r\n            let favorite_manga = store.getState().auth.user[User.profile][Profile.favorite_manga];\r\n            return checkFavorites(favorite_manga, parseInt(id));\r\n        case BRANCH_CHARACTERS:\r\n            let favorite_characters = store.getState().auth.user[User.profile][Profile.favorite_characters];\r\n            return checkFavorites(favorite_characters, parseInt(id));\r\n        case BRANCH_PEOPLE:\r\n            let favorite_people = store.getState().auth.user[User.profile][Profile.favorite_people];\r\n            return checkFavorites(favorite_people, parseInt(id));\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.entry {Object} Entry of the user\r\n * @param props.title {String} Title\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserModalForms(props) {\r\n    const {branch, id, entry, title} = props;\r\n    const in_favorites = isTitleInFavorites(branch, id);\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <>\r\n                <AnimeEntryModalForm\r\n                    id={id} title={title}\r\n                    user_anime_entry={entry}/>\r\n                {isEmpty(entry) ? <AddAnimeEntryInstantDropButton anime_id={parseInt(id)}/> : null}\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n                <CyberButton disabled={true} variant=\"outlined\" color=\"primary\">\r\n                    <FontAwesomeIcon icon={faPlusSquare}/>\r\n                </CyberButton>\r\n                <AnimeEpisodeHistoryModal title={title} entry={entry}/>\r\n            </>;\r\n        case BRANCH_MANGA:\r\n            return <>\r\n                <MangaEntryModalForm\r\n                    id={id} title={title}\r\n                    user_manga_entry={entry}/>\r\n                {isEmpty(entry) ? <AddMangaEntryInstantDropButton manga_id={parseInt(id)}/> : null}\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n                <CyberButton disabled={true} variant=\"outlined\" color=\"primary\">\r\n                    <FontAwesomeIcon icon={faPlusSquare}/>\r\n                </CyberButton>\r\n                <MangaVolumeChapterHistoryModal title={title} entry={entry}/>\r\n            </>;\r\n        case BRANCH_CHARACTERS:\r\n            return <>\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_PEOPLE:\r\n            return <>\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n            </>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.entry {Object} Entry of the user\r\n * @param props.title {String} Title\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AdminModalForms(props) {\r\n    const {branch, id, entry, title} = props;\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <>\r\n                <a href={ADMIN_EDIT_ANIME(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n                {isEmpty(title[Anime.anime_on_server]) ? <>\r\n                    <DownloadTorrentModalForm classNames=\"download-torrent-btn\"/>\r\n                    <EditAnimeOnServerModalForm classNames=\"download-torrent-btn\"/>\r\n                    </>\r\n                    : null}\r\n            </>;\r\n        case BRANCH_MANGA:\r\n            return <>\r\n                <a href={ADMIN_EDIT_MANGA(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_CHARACTERS:\r\n            return <>\r\n                <a href={ADMIN_EDIT_CHARACTER(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_EROGE:\r\n            return <>\r\n                <a href={ADMIN_EDIT_EROGE(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_PEOPLE:\r\n            return <>\r\n                <a href={ADMIN_EDIT_PERSON(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function formatTitle(branch, title, superuser) {\r\n    let display_title = {\r\n        id: 0,\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: null,\r\n        title_1: null,\r\n        title_2: null,\r\n        title_3: null,\r\n        info_set: null,\r\n        db_info_set: null,\r\n        users_info_set: null,\r\n        primary_set: null,\r\n        primary_set_wide: null,\r\n        secondary_set: null,\r\n        tabs: null\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            display_title.id = title[Anime.id];\r\n            display_title.cover_images = title[Anime.anime_cover_images] ? title[Anime.anime_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Anime.anime_cdn_cover_images] ? title[Anime.anime_cdn_cover_images] : [];\r\n            display_title.title = title[Anime.title];\r\n            display_title.title_1 = {label: 'English', title: title[Anime.title_english]};\r\n            display_title.title_2 = {label: 'Synonyms', title: title[Anime.title_synonyms]};\r\n            display_title.title_3 = {label: 'Japanese', title: title[Anime.title_japanese]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Anime.mal_link]}>MAL</a>},\r\n                {label: 'Aired', info: title[Anime.aired_string]},\r\n                {label: 'Premiered', info: title[Anime.premiered]},\r\n                {label: 'Broadcast', info: title[Anime.broadcast]},\r\n                {label: 'Producer', info: title[Anime.producer]},\r\n                {label: 'Licensor', info: title[Anime.licensor]},\r\n                {label: 'Studio', info: title[Anime.studio]},\r\n                {label: 'Source', info: title[Anime.source]},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Anime.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Anime.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Anime.score]},\r\n                {label: 'Scored by', info: title[Anime.scored_by]},\r\n                {label: 'Rank', info: title[Anime.rank]},\r\n                {label: 'Popularity', info: title[Anime.popularity]},\r\n                {label: 'Members', info: title[Anime.members]},\r\n                {label: 'Favorites', info: title[Anime.favorites]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Status', info: title[Anime.status]},\r\n                {label: 'Type', info: title[Anime.type]},\r\n                {label: 'Episodes', info: title[Anime.episodes] ? title[Anime.episodes] : '?'},\r\n                {\r\n                    label: 'Duration',\r\n                    info: title[Anime.minutes_per_episode] ? `${title[Anime.minutes_per_episode]}m per ep` : '?'\r\n                },\r\n                {label: 'Rating', info: title[Anime.rating_short]},\r\n                {\r\n                    label: 'Aired',\r\n                    info: formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true)\r\n                },\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <GeneralTab/>\r\n                },\r\n                {\r\n                    disabled: title[Anime.main_characters].length === 0,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Characters</p>,\r\n                    tab: <CharactersTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.anime_relations],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faCodeBranch}/> Relations</p>,\r\n                    tab: <RelationsTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.franchise],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faSitemap}/> Franchise</p>,\r\n                    tab: <FranchiseTab/>\r\n                },\r\n            ];\r\n\r\n            if (display_title.primary_set && title[Anime.genres_csv]) {\r\n                const genres = title[Anime.genres_csv].split(', ');\r\n                let info = [];\r\n                genres.forEach(genre => {\r\n                    info.push(<span className=\"genre-spacing\">{genre}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Genres', info: info},\r\n                ];\r\n            }\r\n            if (title[Anime.anime_on_server]) {\r\n                if (title[Anime.anime_on_server][AnimeOnServer.downloading]) {\r\n                    if (superuser)\r\n                        display_title.secondary_set = [{\r\n                            label: null, info: <DisplayTorrentProgress id={title[Anime.id]}/>\r\n                        }];\r\n                    else\r\n                        display_title.secondary_set = [{\r\n                            label: 'Currently Downloading', info: <CircularProgress color=\"secondary\"/>\r\n                        }];\r\n                } else\r\n                    display_title.secondary_set = [\r\n                        {label: 'Size', info: `${title[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB]}GB`},\r\n                        {label: 'Quality', info: title[Anime.anime_on_server][AnimeOnServer.video_quality]},\r\n                        {label: 'Channel', info: title[Anime.anime_on_server][AnimeOnServer.audio_channel]},\r\n                        {\r\n                            label: 'Japanese Dub',\r\n                            info: title[Anime.anime_on_server][AnimeOnServer.japanese_dub] ? 'Yes' : 'No'\r\n                        },\r\n                        {\r\n                            label: 'English  Sub',\r\n                            info: title[Anime.anime_on_server][AnimeOnServer.english_sub] ? 'Yes' : 'No'\r\n                        },\r\n                        {\r\n                            label: null,\r\n                            info: <CyberButton variant=\"outlined\" color=\"secondary\"><FontAwesomeIcon\r\n                                icon={faPlay}/></CyberButton>\r\n                        },\r\n                    ];\r\n                    display_title.tabs.push({\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon color-secondary\"><FontAwesomeIcon icon={faServer}/> Server</p>,\r\n                    tab: <ServerTab/>\r\n                });\r\n            }\r\n            return display_title;\r\n        case BRANCH_MANGA:\r\n            display_title.id = title[Manga.id];\r\n            display_title.cover_images = title[Manga.manga_cover_images];\r\n            display_title.cdn_cover_images = title[Manga.manga_cdn_cover_images] ? title[Manga.manga_cdn_cover_images] : [];\r\n            display_title.title = title[Manga.title];\r\n            display_title.title_1 = {label: 'English', title: title[Manga.title_english]};\r\n            display_title.title_2 = {label: 'Synonyms', title: title[Manga.title_synonyms]};\r\n            display_title.title_3 = {label: 'Japanese', title: title[Manga.title_japanese]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Manga.mal_link]}>MAL</a>},\r\n                {label: 'Published', info: title[Manga.published_string]},\r\n                {label: 'Authors', info: title[Manga.authors]},\r\n                {label: 'Serialization', info: title[Manga.serialization]},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Manga.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Manga.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Manga.score]},\r\n                {label: 'Scored by', info: title[Manga.scored_by]},\r\n                {label: 'Rank', info: title[Manga.rank]},\r\n                {label: 'Popularity', info: title[Manga.popularity]},\r\n                {label: 'Members', info: title[Manga.members]},\r\n                {label: 'Favorites', info: title[Manga.favorites]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Status', info: title[Manga.status]},\r\n                {label: 'Type', info: title[Manga.type]},\r\n                {label: 'Volumes', info: title[Manga.volumes] ? title[Manga.volumes] : '?'},\r\n                {label: 'Chapters', info: title[Manga.chapters] ? title[Manga.chapters] : '?'},\r\n                {\r\n                    label: 'Published',\r\n                    info: formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true)\r\n                },\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <MangaGeneralTab/>\r\n                },\r\n                {\r\n                    disabled: title[Manga.main_characters].length === 0,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Characters</p>,\r\n                    tab: <MangaCharactersTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Manga.manga_relations],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faCodeBranch}/> Relations</p>,\r\n                    tab: <MangaRelationsTab/>\r\n                },\r\n            ];\r\n            if (display_title.primary_set && title[Manga.genres_csv]) {\r\n                const genres = title[Manga.genres_csv].split(', ');\r\n                let info = [];\r\n                genres.forEach(genre => {\r\n                    info.push(<span className=\"genre-spacing\">{genre}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Genres', info: info},\r\n                ];\r\n            }\r\n            return display_title;\r\n        case BRANCH_CHARACTERS:\r\n            display_title.id = title[Character.id];\r\n            display_title.cover_images = title[Character.character_cover_images] ? title[Character.character_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Character.character_cdn_cover_images] ? title[Character.character_cdn_cover_images] : [];\r\n            display_title.title = title[Character.short_name] ? title[Character.short_name] : title[Character.character_name];\r\n            display_title.title_1 = {label: 'Full Name', title: title[Character.character_name]};\r\n            display_title.title_2 = {label: 'Nickname', title: title[Character.nickname]};\r\n            display_title.title_3 = {label: 'Name', title: title[Character.short_name]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Character.mal_link]}>MAL</a>},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Character.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Character.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Favorites', info: title[Character.favorites]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <CharactersGeneralTab/>\r\n                },\r\n            ];\r\n            return display_title;\r\n        case BRANCH_EROGE:\r\n            display_title.id = title[Eroge.id];\r\n            if (title[Eroge.eroge_cover_images])\r\n                display_title.cover_images = title[Eroge.eroge_cover_images];\r\n            display_title.title = title[Eroge.eroge_name];\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Eroge.game_url]}>HG</a>},\r\n                {\r\n                    label: 'External download',\r\n                    info: <a href={title[Eroge.game_url]}><FontAwesomeIcon icon={faDownload}/></a>\r\n                },\r\n            ];\r\n            display_title.db_info_set = [\r\n                {label: 'Last Modified', info: <Moment date={title[Eroge.date_last_modified]} format={'Do MMM YYYY'}/>},\r\n                {label: 'Added on', info: <Moment date={title[Eroge.date_added]} format={'Do MMM YYYY'}/>},\r\n                {label: 'Last Updated', info: <Moment date={title[Eroge.date_updated]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Eroge.rating]},\r\n                {label: 'Scored by', info: title[Eroge.rated_by]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Size', info: formatBytes(title[Eroge.size])},\r\n                {label: 'Type', info: title[Eroge.type]},\r\n                {label: 'Censorship', info: title[Eroge.censorship]},\r\n                {label: 'Language', info: title[Eroge.language]},\r\n                {label: 'Platforms', info: title[Eroge.platforms]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <ErogeGeneralTab/>\r\n                },\r\n            ];\r\n            if (display_title.primary_set && title[Eroge.tags]) {\r\n                const tags = title[Eroge.tags].split(', ');\r\n                let info = [];\r\n                tags.forEach(tag => {\r\n                    info.push(<span className=\"genre-spacing\">{tag}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Tags', info: info},\r\n                ];\r\n            }\r\n            return display_title;\r\n        case BRANCH_PEOPLE:\r\n            display_title.id = title[Person.id];\r\n            display_title.cover_images = title[Person.person_cover_images] ? title[Person.person_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Person.person_cdn_cover_images] ? title[Person.person_cdn_cover_images] : [];\r\n            display_title.title = title[Person.person_name];\r\n            display_title.title_1 = {label: 'Family Name', title: title[Person.family_name]};\r\n            display_title.title_2 = {label: 'Given Name', title: title[Person.given_name]};\r\n            display_title.title_3 = {label: 'Other Names', title: title[Person.alternative_names]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Person.mal_link]}>MAL</a>},\r\n                {label: 'Birthday', info: title[Person.birthday] ?\r\n                        <Moment date={title[Person.birthday]} format={'Do MMM YYYY'}/> :\r\n                        <span className=\"color-gray\">---</span>},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Person.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Person.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Favorites', info: title[Person.favorites]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <PeopleGeneralTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.has_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Character Roles</p>,\r\n                    tab: <VoiceActorRolesTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.anime_staff_positions_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserCog}/> Anime Staff</p>,\r\n                    tab: <AnimeStaffPositionsTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.published_manga_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faBookOpen}/> Published Manga</p>,\r\n                    tab: <PublishedMangaTab/>\r\n                },\r\n            ];\r\n            return display_title;\r\n        default:\r\n            return display_title\r\n    }\r\n}\r\n","import {Form, Formik} from \"formik\";\r\nimport store from \"../../../../store\";\r\nimport {\r\n    addAnimeEntry,\r\n    addToFavorites,\r\n    deleteAnimeEntry,\r\n    removeFromFavorites,\r\n    updateAnimeEntry\r\n} from \"../../../../actions/users\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport 'date-fns';\r\nimport {KeyboardDateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faStar as faStarSolid, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport React from \"react\";\r\nimport {UserAnimeEntry} from \"../../../../models\";\r\nimport {BRANCH_ANIME, USER_ANIME_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {isTitleInFavorites} from \"../../../display/functions\";\r\nimport {AddRemoveFromFavorites} from \"../shortForms\";\r\n\r\n\r\n\r\nconst FIELD_NAMES = {\r\n    watched_episodes: UserAnimeEntry.watched_episodes,\r\n    start_date: UserAnimeEntry.start_date,\r\n    finish_date: UserAnimeEntry.finish_date,\r\n    score: UserAnimeEntry.score,\r\n    status: UserAnimeEntry.status,\r\n    times_watched: UserAnimeEntry.times_watched,\r\n    comments: UserAnimeEntry.comments,\r\n    tags: UserAnimeEntry.tags,\r\n    priority: UserAnimeEntry.priority,\r\n    rewatching: UserAnimeEntry.rewatching,\r\n    rewatching_episode: UserAnimeEntry.rewatching_episode,\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} anime_id\r\n * @param {Object} user_anime_entry\r\n * @param {boolean} edit - *Optional\r\n * @returns {{comments: string, times_watched: number, rewatching_episode: number, priority: string, tags: string, score: number, watched_episodes: number, rewatching: boolean, finish_date: string, anime: *, errors: boolean, start_date: string, status: string}}\r\n */\r\nexport function getUserAnimeEntryFormInitialValues(anime_id, user_anime_entry, edit = false) {\r\n    let initial_values = {\r\n        anime: anime_id,\r\n        watched_episodes: 0,\r\n        start_date: '',\r\n        finish_date: '',\r\n        score: 0,\r\n        status: USER_ANIME_STATUSES.plan_to_watch,\r\n        times_watched: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rewatching: false,\r\n        rewatching_episode: 0,\r\n        errors: false\r\n    };\r\n\r\n    if (edit && !isEmpty(user_anime_entry))\r\n        initial_values = {\r\n            anime: anime_id,\r\n            watched_episodes: user_anime_entry[UserAnimeEntry.watched_episodes],\r\n            start_date: user_anime_entry[UserAnimeEntry.start_date],\r\n            finish_date: user_anime_entry[UserAnimeEntry.finish_date],\r\n            score: user_anime_entry[UserAnimeEntry.score],\r\n            status: user_anime_entry[UserAnimeEntry.status],\r\n            times_watched: user_anime_entry[UserAnimeEntry.times_watched],\r\n            comments: user_anime_entry[UserAnimeEntry.comments],\r\n            tags: user_anime_entry[UserAnimeEntry.tags],\r\n            priority: user_anime_entry[UserAnimeEntry.priority],\r\n            rewatching: user_anime_entry[UserAnimeEntry.rewatching],\r\n            rewatching_episode: user_anime_entry[UserAnimeEntry.rewatching_episode]\r\n        };\r\n\r\n    return initial_values\r\n}\r\n\r\n\r\nfunction deleteEntry(id, list) {\r\n    if (window.confirm('Are you sure? This will also delete any episode history of this anime.'))\r\n        store.dispatch(deleteAnimeEntry(id, list));\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.initial_values\r\n * @param {boolean} props.edit\r\n * @param {int} props.id\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserAnimeEntryForm(props) {\r\n    const {initial_values, edit, id, list, handleClose} = props;\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}><Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            if (values.start_date === '') values.start_date = null;\r\n            if (values.finish_date === '') values.finish_date = null;\r\n            values[FIELD_NAMES.times_watched] = parseInt(values[FIELD_NAMES.times_watched]);\r\n            if (isNaN(values[FIELD_NAMES.times_watched])) values[FIELD_NAMES.times_watched] = 0;\r\n            values[FIELD_NAMES.watched_episodes] = parseInt(values[FIELD_NAMES.watched_episodes]);\r\n            if (isNaN(values[FIELD_NAMES.watched_episodes])) values[FIELD_NAMES.watched_episodes] = 0;\r\n            values.score = parseInt(values.score);\r\n\r\n            if (edit) store.dispatch(updateAnimeEntry(id, values, list));\r\n            else store.dispatch(addAnimeEntry(values));\r\n\r\n            setSubmitting(false);\r\n        }}>\r\n        {({\r\n              isSubmitting, values, handleChange,\r\n              handleBlur, setValues\r\n          }) => (\r\n            <Form id=\"User-Title-Entry-Form\">\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-status\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-status\"\r\n                            className=\"form-control\"\r\n                            label=\"Status\"\r\n                            value={values[FIELD_NAMES.status]}\r\n                            name={FIELD_NAMES.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"Watching\">Watching</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                            <MenuItem value=\"On Hold\">On Hold</MenuItem>\r\n                            <MenuItem value=\"Dropped\">Dropped</MenuItem>\r\n                            <MenuItem value=\"Plan to Watch\">Plan to Watch</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-value\">Priority</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-value\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.priority]}\r\n                            name={FIELD_NAMES.priority}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"4\">VERY HIGH</MenuItem>\r\n                            <MenuItem value=\"3\">HIGH</MenuItem>\r\n                            <MenuItem value=\"2\">MEDIUM</MenuItem>\r\n                            <MenuItem value=\"1\">LOW</MenuItem>\r\n                            <MenuItem value=\"0\">VERY LOW</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Episode\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.watched_episodes}\r\n                            value={values[FIELD_NAMES.watched_episodes]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4} md={2}>\r\n                        <div className=\"form-group text-right\">\r\n                            <Checkbox\r\n                                value={values[FIELD_NAMES.rewatching]}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                name={FIELD_NAMES.rewatching}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={4}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Rewatch Episode\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rewatching_episode}\r\n                            value={values[FIELD_NAMES.rewatching_episode]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rewatching]}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-score\">Score</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-score\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.score]}\r\n                            name={FIELD_NAMES.score}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"0\">0</MenuItem>\r\n                            <MenuItem value=\"1\">1</MenuItem>\r\n                            <MenuItem value=\"2\">2</MenuItem>\r\n                            <MenuItem value=\"3\">3</MenuItem>\r\n                            <MenuItem value=\"4\">4</MenuItem>\r\n                            <MenuItem value=\"5\">5</MenuItem>\r\n                            <MenuItem value=\"6\">6</MenuItem>\r\n                            <MenuItem value=\"7\">7</MenuItem>\r\n                            <MenuItem value=\"8\">8</MenuItem>\r\n                            <MenuItem value=\"9\">9</MenuItem>\r\n                            <MenuItem value=\"10\">10</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start date\"\r\n                            value={values[FIELD_NAMES.start_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.start_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Times watched\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.times_watched}\r\n                            value={values[FIELD_NAMES.times_watched]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Finish date\"\r\n                            value={values[FIELD_NAMES.finish_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.finish_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Comments\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.comments]}\r\n                            name={FIELD_NAMES.comments}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Tags\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.tags]}\r\n                            name={FIELD_NAMES.tags}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <DialogActions>\r\n                    <AddRemoveFromFavorites branch={BRANCH_ANIME} id={parseInt(id)}/>\r\n                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\" onClick={handleClose}\r\n                                 disabled={isSubmitting}><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                    {edit ? <CyberButton classNames=\"btn-danger\" variant=\"outlined\" onClick={(e) => {\r\n                        deleteEntry(id, list);\r\n                        handleClose()\r\n                    }}><FontAwesomeIcon icon={faTrash}/></CyberButton> : null}\r\n                </DialogActions>\r\n            </Form>\r\n        )}\r\n    </Formik></MuiPickersUtilsProvider>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport {Anime, Manga} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {getUserAnimeEntry, getUserMangaEntry} from \"../../../actions/users\";\r\nimport {getUserAnimeEntryFormInitialValues, UserAnimeEntryForm} from \"../../user/forms/anime/forms\";\r\nimport {AddAnimeEntryInstantDropButton, AddMangaEntryInstantDropButton} from \"../../user/forms/shortForms\";\r\nimport {getUserMangaEntryFormInitialValues, UserMangaEntryForm} from \"../../user/forms/manga/forms\";\r\n\r\n\r\nfunction getTitleNameFromTitle(branch, title) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return title[Anime.title];\r\n        case BRANCH_MANGA:\r\n            return title[Manga.title];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.anime_id\r\n * @param {Object} props.user_anime_entry\r\n * @param {boolean} props.edit\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction QuickUserAnimeEntryForm(props) {\r\n    const {anime_id, user_anime_entry, edit, handleClose} = props;\r\n    const initial_values = getUserAnimeEntryFormInitialValues(anime_id, user_anime_entry, edit);\r\n    return <UserAnimeEntryForm initial_values={initial_values} id={anime_id} edit={edit} handleClose={handleClose}/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.manga_id\r\n * @param {Object} props.user_manga_entry\r\n * @param {boolean} props.edit\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction QuickUserMangaEntryForm(props) {\r\n    const {manga_id, user_manga_entry, edit, handleClose} = props;\r\n    const initial_values = getUserMangaEntryFormInitialValues(manga_id, user_manga_entry, edit);\r\n    return <UserMangaEntryForm initial_values={initial_values} id={manga_id} edit={edit} handleClose={handleClose}/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.title_id\r\n * @param {String} props.branch\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction InstantDropTitleButton(props) {\r\n    const {title_id, branch} = props;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AddAnimeEntryInstantDropButton\r\n                classNames=\"drop-button btn-contained-danger-dh\" variant={'contained'} anime_id={title_id}/>;\r\n        case BRANCH_MANGA:\r\n            return <AddMangaEntryInstantDropButton\r\n                classNames=\"drop-button btn-contained-danger-dh\" variant={'contained'} manga_id={title_id}/>;\r\n        default:\r\n            return null;\r\n    }\r\n\r\n}\r\n\r\n\r\nclass CardUserEditTitleEntry extends Component {\r\n    static propTypes = {\r\n        /** Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Id */\r\n        id: PropTypes.number.isRequired,\r\n        /** Title Object */\r\n        title: PropTypes.object.isRequired,\r\n        /** Status of the user for this title (Completed, Dropped, etc) */\r\n        user_status: PropTypes.string,\r\n        /** Hide the user buttons from the Title Card */\r\n        hideUserButtons: PropTypes.func,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.getUserTitleEntry = this.getUserTitleEntry.bind(this);\r\n        this.getQuickUserTitleEntryForm = this.getQuickUserTitleEntryForm.bind(this);\r\n        this.state = {open: false};\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({open: false});\r\n        if (this.props.hideUserButtons)\r\n            this.props.hideUserButtons();\r\n    };\r\n\r\n    getUserTitleEntry() {\r\n        this.setState({open: true});\r\n        switch (this.props.branch) {\r\n            case BRANCH_ANIME:\r\n                this.props.getUserAnimeEntry(this.props.id);\r\n                return;\r\n            case BRANCH_MANGA:\r\n                this.props.getUserMangaEntry(this.props.id);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    getQuickUserTitleEntryForm(edit) {\r\n        switch (this.props.branch) {\r\n            case BRANCH_ANIME:\r\n                return <QuickUserAnimeEntryForm\r\n                    anime_id={this.props.id}\r\n                    user_anime_entry={this.props.user_anime_entry}\r\n                    edit={edit}\r\n                    handleClose={this.handleClose}\r\n                />;\r\n            case BRANCH_MANGA:\r\n                return <QuickUserMangaEntryForm\r\n                    manga_id={this.props.id}\r\n                    user_manga_entry={this.props.user_manga_entry}\r\n                    edit={edit}\r\n                    handleClose={this.handleClose}\r\n                />;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let edit = !!this.props.user_status;\r\n        const add_button_title = edit ? 'Edit entry' : 'Add to list';\r\n\r\n        return <>\r\n            {this.props.entry_loading ?\r\n                <div className=\"user-buttons-loading\"><CircularProgress thickness={6} size={30}/></div> : <>\r\n                    <CyberButton classNames=\"add-button btn-contained-primary-dh\" color={'primary'}\r\n                                 variant={'contained'} title={add_button_title} onClick={this.getUserTitleEntry}>\r\n                        <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                    </CyberButton>\r\n                    {!edit ? <InstantDropTitleButton branch={this.props.branch} title_id={this.props.id}/> : null}\r\n                </>}\r\n\r\n            <Dialog open={this.state.open} onClose={this.handleClose}\r\n                    aria-labelledby=\"form-dialog-title\" className=\"user-title-entry-dialog\">\r\n                {!this.props.entry_loading ?\r\n                    <DialogTitle>\r\n                        {edit ? 'Edit' : 'Add'} {getTitleNameFromTitle(this.props.branch, this.props.title)}\r\n                    </DialogTitle> : null}\r\n                <DialogContent>\r\n                    {this.props.entry_loading ? <CircularProgress/> : this.getQuickUserTitleEntryForm(edit)}\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_entry: state.users.user_anime_entry,\r\n    user_manga_entry: state.users.user_manga_entry,\r\n    entry_loading: state.users.entry_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUserAnimeEntry, getUserMangaEntry})(CardUserEditTitleEntry)\r\n","import React from \"react\";\r\n\r\nimport {faServer} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA, BRANCH_PEOPLE,\r\n    USER_ANIME_STATUSES,\r\n    USER_MANGA_STATUSES\r\n} from \"../../../globals\";\r\nimport {\r\n    ANIME_DISPLAY,\r\n    CHARACTERS_DISPLAY,\r\n    EROGE_DISPLAY,\r\n    MANGA_DISPLAY,\r\n    PERSON_DISPLAY\r\n} from \"../../../urls\";\r\nimport {\r\n    Anime,\r\n    Character,\r\n    Eroge,\r\n    Manga,\r\n    ANIME_SHORT_STATUS,\r\n    MANGA_SHORT_STATUS,\r\n    Person,\r\n    UserAnimeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema,\r\n    UserErogeDisplaySettingsSchema\r\n} from \"../../../models\";\r\nimport {formatContentDateByKnown, isEmpty} from \"../../functions\";\r\nimport {FilterSchema} from \"../filters/field_names\";\r\nimport CardUserEditTitleEntry from \"./CardUserEditTitleEntry\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nexport function getUserStatusChip(user_status) {\r\n    switch (user_status) {\r\n        case USER_ANIME_STATUSES.completed:\r\n            return {label: user_status, color: 'primary'};\r\n        case USER_ANIME_STATUSES.watching:\r\n            return {label: user_status, color: 'success'};\r\n        case USER_MANGA_STATUSES.reading:\r\n            return {label: user_status, color: 'success'};\r\n        case USER_ANIME_STATUSES.on_hold:\r\n            return {label: user_status, color: 'warning'};\r\n        case USER_ANIME_STATUSES.dropped:\r\n            return {label: user_status, color: 'danger'};\r\n        case USER_ANIME_STATUSES.plan_to_watch:\r\n            return {label: user_status, color: 'default'};\r\n        case USER_MANGA_STATUSES.plan_to_read:\r\n            return {label: user_status, color: 'default'};\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.title {String} Title\r\n * @param props.user_status {String} Status of the user for this anime (Completed, Dropped, etc)\r\n * @param props.hideUserButtons {Function} Function for running on close of the dialog\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserCardButtons(props) {\r\n    const {branch, id, title, user_status, hideUserButtons} = props;\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <CardUserEditTitleEntry id={id} branch={BRANCH_ANIME} title={title} user_status={user_status}\r\n                                           hideUserButtons={hideUserButtons}/>;\r\n        case BRANCH_MANGA:\r\n            return <CardUserEditTitleEntry id={id} branch={BRANCH_MANGA} title={title} user_status={user_status}\r\n                                           hideUserButtons={hideUserButtons}/>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\nexport function formatTitle(branch, title, user_status_param, design_settings = null) {\r\n    let user_status = user_status_param;\r\n    let start_date = '';\r\n    let end_date = '';\r\n    let card_title = {\r\n        id: 0,\r\n        link: '',\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: '',\r\n        chipset_header: [],\r\n        chipset_one: [],\r\n        chipset_two: [],\r\n        chipset_three: [],\r\n        chipset_four: []\r\n    };\r\n    let user_settings = {};\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (isEmpty(design_settings)) user_settings = store.getState().users.user_anime_display_settings;\r\n            else {\r\n                user_settings = {\r\n                    [UserAnimeDisplaySettingsSchema.type]: design_settings.title_type,\r\n                    [UserAnimeDisplaySettingsSchema.episodes]: design_settings.title_episodes,\r\n                    [UserAnimeDisplaySettingsSchema.mins_per_ep]: design_settings.title_mins_per_ep,\r\n                    [UserAnimeDisplaySettingsSchema.rating]: design_settings.title_rating,\r\n                    [UserAnimeDisplaySettingsSchema.genres]: design_settings.title_genres,\r\n                    [UserAnimeDisplaySettingsSchema.mal_score]: design_settings.title_mal_score,\r\n                    [UserAnimeDisplaySettingsSchema.aired]: design_settings.title_aired,\r\n                };\r\n                if (!design_settings.title_status) user_status = null\r\n            }\r\n\r\n            start_date = formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Anime.air_end], title[Anime.air_end_known], true);\r\n\r\n            card_title.id = title[Anime.id];\r\n            card_title.link = ANIME_DISPLAY(title[Anime.id]);\r\n            card_title.cover_images = title[Anime.anime_cover_images];\r\n            card_title.cdn_cover_images = title[Anime.anime_cdn_cover_images];\r\n            card_title.title = title[Anime.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.label],\r\n                    color: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Anime.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Anime.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Anime.anime_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.type])\r\n                card_title.chipset_one.push(title[Anime.type]);\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.episodes] && title[Anime.episodes])\r\n                card_title.chipset_one.push(`${title[Anime.episodes]}ep`);\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.mins_per_ep] && title[Anime.minutes_per_episode])\r\n                card_title.chipset_one.push(`${title[Anime.minutes_per_episode]}m`);\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.rating])\r\n                card_title.chipset_one.push(title[Anime.rating_short]);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.genres])\r\n                card_title.chipset_two = title[Anime.genres_csv] ? title[Anime.genres_csv].split(', ') : [];\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.mal_score] && title[Anime.score])\r\n                card_title.chipset_three.push(`MAL: ${title[Anime.score]}`);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.aired] && start_date)\r\n                card_title.chipset_four.push(`${start_date}${end_date ? ' to ' + end_date : ''}`);\r\n\r\n            return card_title;\r\n        case BRANCH_MANGA:\r\n            // user_settings = store.getState().users.user_manga_display_settings;\r\n            if (isEmpty(design_settings)) user_settings = store.getState().users.user_manga_display_settings;\r\n            else {\r\n                user_settings = {\r\n                    [UserMangaDisplaySettingsSchema.type]: design_settings.title_type,\r\n                    [UserMangaDisplaySettingsSchema.volumes]: design_settings.title_volumes,\r\n                    [UserMangaDisplaySettingsSchema.chapters]: design_settings.title_chapters,\r\n                    [UserMangaDisplaySettingsSchema.genres]: design_settings.title_genres,\r\n                    [UserMangaDisplaySettingsSchema.mal_score]: design_settings.title_mal_score,\r\n                    [UserMangaDisplaySettingsSchema.aired]: design_settings.title_aired,\r\n                };\r\n                if (!design_settings.title_status) user_status = null\r\n            }\r\n\r\n            start_date = formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Manga.air_end], title[Manga.air_end_known], true);\r\n\r\n            card_title.id = title[Manga.id];\r\n            card_title.link = MANGA_DISPLAY(title[Manga.id]);\r\n            card_title.cover_images = title[Manga.manga_cover_images];\r\n            card_title.cdn_cover_images = title[Manga.manga_cdn_cover_images];\r\n            card_title.title = title[Manga.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.label],\r\n                    color: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Manga.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Manga.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Manga.manga_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.type])\r\n                card_title.chipset_one.push(title[Manga.type]);\r\n            if (user_settings[UserMangaDisplaySettingsSchema.volumes] && title[Manga.volumes])\r\n                card_title.chipset_one.push(`${title[Manga.volumes]}v`);\r\n            if (user_settings[UserMangaDisplaySettingsSchema.chapters] && title[Manga.chapters])\r\n                card_title.chipset_one.push(`${title[Manga.chapters]}c`);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.genres])\r\n                card_title.chipset_two = title[Manga.genres_csv] ? title[Manga.genres_csv].split(', ') : [];\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.mal_score] && title[Manga.score])\r\n                card_title.chipset_three.push(`MAL: ${title[Manga.score]}`);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.aired] && start_date)\r\n                card_title.chipset_four.push(`${start_date}${end_date ? ' to ' + end_date : ''}`);\r\n\r\n            return card_title;\r\n        case BRANCH_CHARACTERS:\r\n            card_title.id = title[Character.id];\r\n            card_title.link = CHARACTERS_DISPLAY(title[Character.id]);\r\n            card_title.cover_images = title[Character.character_cover_images];\r\n            card_title.cdn_cover_images = title[Character.character_cdn_cover_images];\r\n            card_title.title = title[Character.short_name] ?\r\n                title[Character.short_name] : title[Character.character_name];\r\n            return card_title;\r\n        case BRANCH_PEOPLE:\r\n            card_title.id = title[Person.id];\r\n            card_title.link = PERSON_DISPLAY(title[Person.id]);\r\n            card_title.cover_images = title[Person.person_cover_images];\r\n            card_title.cdn_cover_images = title[Person.person_cdn_cover_images];\r\n            card_title.title = title[Person.person_name];\r\n            return card_title;\r\n        case BRANCH_EROGE:\r\n            user_settings = store.getState().users.user_eroge_display_settings;\r\n            card_title.id = title[Eroge.id];\r\n            card_title.link = EROGE_DISPLAY(title[Eroge.id]);\r\n            card_title.cover_images = title[Eroge.eroge_cover_images];\r\n            card_title.title = title[Eroge.eroge_name].replace('[Android]', '').trim();\r\n            if (title[Eroge.downloaded])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.type])\r\n                card_title.chipset_one.push(title[Manga.type]);\r\n            if (user_settings[UserErogeDisplaySettingsSchema.platforms] && title[Eroge.platforms])\r\n                card_title.chipset_one.push(title[Eroge.platforms]);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.tags] && title[Eroge.tags])\r\n                card_title.chipset_two = title[Eroge.tags] ? title[Eroge.tags].split(', ') : [];\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.hg_score] && title[Eroge.rating])\r\n                card_title.chipset_three.push(`HG ${title[Eroge.rating]}`);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.language] && title[Eroge.language])\r\n                card_title.chipset_four.push(title[Eroge.language]);\r\n            if (user_settings[UserErogeDisplaySettingsSchema.censorship] && title[Eroge.censorship])\r\n                card_title.chipset_four.push(title[Eroge.censorship]);\r\n\r\n            return card_title;\r\n        default:\r\n            return card_title\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {formatTitle, UserCardButtons} from \"./functions\";\r\nimport {getTitleCoverImage} from \"../../functions\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nclass TitleCard extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Object (Anime, Manga, etc.) */\r\n        title: PropTypes.object.isRequired,\r\n        /** Index number for the card */\r\n        index: PropTypes.number,\r\n        /** Status of the user entry for this title (Watching, Reading, Completed, etc.) */\r\n        user_status: PropTypes.string,\r\n        /** If the card should be in a small format (No chipsets, only title) */\r\n        mini: PropTypes.bool,\r\n        /** If the user edit/add buttons for the title should appear */\r\n        user_buttons: PropTypes.bool,\r\n        /** Custom classname for the title card container */\r\n        containerClassNames: PropTypes.string,\r\n        /** Custom classname for the title card */\r\n        classNames: PropTypes.string,\r\n        /** If true it the card will not use state to check if the cover image is\r\n         * loaded, it will directly add the img background to the card */\r\n        skip_img_preload: PropTypes.bool,\r\n        /** If settings are passed, that means it is used from an user list, so\r\n         * these settings will apply for what content to be displayed, instead\r\n         * of the browse_settings */\r\n        design_settings: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.showUserButtons = this.showUserButtons.bind(this);\r\n        this.hideUserButtons = this.hideUserButtons.bind(this);\r\n        this.cssHideUserButtons = this.cssHideUserButtons.bind(this);\r\n        this.state = {\r\n            img_loaded: false,\r\n            show_user_buttons: false,\r\n            css_hide_buttons: false,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.css_hide_buttons)\r\n            this.setState({css_hide_buttons: false, show_user_buttons: false})\r\n    }\r\n\r\n    showUserButtons() {\r\n        this.setState({show_user_buttons: true, css_hide_buttons: false});\r\n    }\r\n\r\n    hideUserButtons() {\r\n        this.setState({show_user_buttons: false});\r\n    }\r\n\r\n    cssHideUserButtons() {\r\n        this.setState({css_hide_buttons: true});\r\n    }\r\n\r\n    render() {\r\n        const card_title = formatTitle(\r\n            this.props.branch, this.props.title, this.props.user_status, this.props.design_settings);\r\n        let img_url = getTitleCoverImage(card_title.cdn_cover_images, card_title.cover_images);\r\n        let class_names = this.props.mini ? 'title-card-mini' : '';\r\n        if (this.props.classNames)\r\n            class_names = this.props.classNames;\r\n\r\n        let container_class_names = '';\r\n        if (this.props.containerClassNames)\r\n            container_class_names = this.props.containerClassNames;\r\n\r\n        let backgroundImage = this.state.img_loaded || this.props.skip_img_preload ? `url(\"${img_url}\")` : 'none';\r\n\r\n        return (\r\n            <div className={`title-card-container ${container_class_names}`}\r\n                 onMouseOver={this.showUserButtons}\r\n                 onMouseEnter={this.showUserButtons}\r\n                 onMouseLeave={this.hideUserButtons}\r\n            >\r\n                {this.props.user_buttons && this.state.show_user_buttons ?\r\n                    <div className={this.state.css_hide_buttons ? 'user-buttons user-buttons-hidden' : 'user-buttons'}>\r\n                        <UserCardButtons\r\n                            branch={this.props.branch}\r\n                            id={card_title.id}\r\n                            title={this.props.title}\r\n                            user_status={this.props.user_status}\r\n                            hideUserButtons={this.cssHideUserButtons}\r\n                        />\r\n                    </div> : null}\r\n                <Link to={card_title.link}\r\n                      className={this.state.img_loaded ? `title-card fade-in ${class_names}` : `title-card ${class_names}`}\r\n                      style={{backgroundImage: backgroundImage}}\r\n                      onMouseEnter={playHoverSound} onClick={playClickSound}\r\n                >\r\n                    <img src={img_url} className=\"lazy-loaded-img\" alt=\"loader-img\" loading=\"lazy\"\r\n                         onLoad={() => {\r\n                             this.setState({img_loaded: true})\r\n                         }}/>\r\n                    {!this.props.mini ? <div className=\"chip-array\">\r\n                        {this.props.index ? <Chip variant=\"default\" size=\"small\" label={this.props.index}/> : null}\r\n                        {card_title.chipset_header ? card_title.chipset_header.map(chip => (\r\n                            chip ? <Chip variant=\"default\" size=\"small\" className={`chip-${chip['color']}`}\r\n                                         label={chip['label']}/> : null\r\n                        )) : null}\r\n                    </div> : null}\r\n                    {!this.props.mini ? <h3>{card_title.title}</h3> : <h4>{card_title.title}</h4>}\r\n                    {!this.props.mini ? <div className=\"title-card-body\">\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_one.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_two.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_three.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_four.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                    </div> : null}\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_display_settings: state.users.user_anime_display_settings,  // This is here to rerender the cards\r\n    user_manga_display_settings: state.users.user_manga_display_settings,  // This is here to rerender the cards\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,  // This is here to rerender the cards\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TitleCard)\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\n\r\n\r\nfunction checkForKnownDate(known_date) {\r\n    return known_date.indexOf('day') >= 0 && known_date.indexOf('month') >= 0 && known_date.indexOf('year');\r\n}\r\n\r\nfunction horizontalScroll(e, container) {\r\n    e.preventDefault();\r\n    if (e.deltaY > 0) container.scrollLeft += 100;\r\n    else container.scrollLeft -= 100;\r\n}\r\n\r\nfunction addHorizontalScrollEventListener() {\r\n    const container = document.getElementById('season-titles-container');\r\n    container.addEventListener('wheel', (e) => horizontalScroll(e, container));\r\n}\r\n\r\nfunction removeHorizontalScrollEventListener() {\r\n    const container = document.getElementById('season-titles-container');\r\n    container.removeEventListener('wheel', (e) => horizontalScroll(e, container));\r\n}\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\n\r\nclass AnimeCurrentSeason extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n\r\n        this.state = {\r\n            current_year: new Date().getFullYear(),\r\n            current_month: new Date().getMonth() + 1,\r\n            current_season: '',\r\n            current_season_number: 1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let season;\r\n        if (this.state.current_month >= 1 && this.state.current_month <= 3) season = 1;\r\n        else if (this.state.current_month >= 4 && this.state.current_month <= 6) season = 2;\r\n        else if (this.state.current_month >= 7 && this.state.current_month <= 9) season = 3;\r\n        else if (this.state.current_month >= 10 && this.state.current_month <= 12) season = 4;\r\n\r\n        this.setState({current_season: getSeasonLabelFromSeasonNumber(season), current_season_number: season});\r\n\r\n        const season_filter = {year: this.state.current_year, season: season};\r\n        let filters = new FILTER_ANIME_INITIAL_VALUES();\r\n        filters = filters.VALUES;\r\n        this.props.filterAnime(null, filters, season_filter, null, true, false);\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n\r\n        addHorizontalScrollEventListener()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        removeHorizontalScrollEventListener()\r\n    }\r\n\r\n    render() {\r\n        const season_icon_and_class = getIconAndClassFromSeasonNumber(this.state.current_season_number);\r\n        return (\r\n            <div id=\"Current-Season\">\r\n                <div className=\"current-season-header\">\r\n                    <h3>\r\n                        Current Season{' '}\r\n                        <CyberLink to={ANIME_SEASON_DISPLAY(this.state.current_year, this.state.current_season_number)}>\r\n                            {this.state.current_year} {this.state.current_season}\r\n                        </CyberLink>{' '}\r\n                        <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                         className={season_icon_and_class.className}/>\r\n                    </h3>\r\n                </div>\r\n                <div id=\"season-titles-container\" className=\"current-season-titles-container\">\r\n                    {this.props.filtered_anime_loaded ?\r\n                        <div className=\"current-season-titles-wrapper\">\r\n                            {this.props.filtered_anime[ApiResult.results].map(anime => (\r\n                                checkForKnownDate(anime[Anime.air_start_known]) ? <TitleCard\r\n                                    containerClassNames=\"current-season-card-container\"\r\n                                    branch={BRANCH_ANIME}\r\n                                    title={anime}\r\n                                    user_status={\r\n                                        !isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                            this.props.user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                                /> : null\r\n                            ))}\r\n                        </div> : this.props.anime_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filtered_anime: state.anime.filtered_anime,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {filterAnime, getLoggedInUserAnimeEntryStatuses})(AnimeCurrentSeason)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Anime, AnimeData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.recently_added_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', anime_data[AnimeData.recently_added_anime])}\r\n\r\n                    {anime_data[AnimeData.recently_added_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction RecentlyDownloaded(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.recently_downloaded_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', anime_data[AnimeData.recently_added_anime])}\r\n                    {anime_data[AnimeData.recently_downloaded_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopUpcoming(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Upcoming Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_upcoming_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_upcoming_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScoredMal(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_scored_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_scored_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction MostPopularMal(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.most_popular_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.most_popular_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2010s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_2010s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_2010s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2000s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2000s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_2000s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_2000s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top90s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1990s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_90s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_90s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top80s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1980s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_80s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_80s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top70s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1970s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_70s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_70s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopAnimeTabs(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Recently Downloaded</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Upcoming</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Score</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Most popular</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2010s</p>} {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2000s</p>} {...a11yProps(6)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 90s</p>} {...a11yProps(7)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 80s</p>} {...a11yProps(8)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 70s</p>} {...a11yProps(9)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    {console.log('in tab', anime_data)}\r\n                    <RecentlyAdded\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <RecentlyDownloaded\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopUpcoming\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <TopScoredMal\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <MostPopularMal\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={5} dir={theme.direction}>\r\n                    <Top2010s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={6} dir={theme.direction}>\r\n                    <Top2000s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={7} dir={theme.direction}>\r\n                    <Top90s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={8} dir={theme.direction}>\r\n                    <Top80s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={9} dir={theme.direction}>\r\n                    <Top70s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty, isTimeLessThanAnHourAgo} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, AnimeData, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {TopAnimeTabs} from \"./tabs/TopAnimeTabs\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nfunction horizontalScroll(e, container) {\r\n    e.preventDefault();\r\n    if (e.deltaY > 0) container.scrollLeft += 100;\r\n    else container.scrollLeft -= 100;\r\n}\r\n\r\nfunction addHorizontalScrollEventListener() {\r\n    const containers = document.getElementsByClassName('horizontal-scroll');\r\n    for (let x = 0; x < containers.length; x++)\r\n        containers[x].addEventListener('wheel', (e) => horizontalScroll(e, containers[x]));\r\n}\r\n\r\nfunction removeHorizontalScrollEventListener() {\r\n    const containers = document.getElementsByClassName('horizontal-scroll');\r\n    for (let x = 0; x < containers.length; x++)\r\n        containers[x].removeEventListener('wheel', (e) => horizontalScroll(e, containers[x]));\r\n}\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\nfunction CurrentSeason(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    const current_year = new Date().getFullYear();\r\n    let current_month = new Date().getMonth() + 1;\r\n    let current_season_number = 1;\r\n    if (current_month >= 1 && current_month <= 3) current_season_number = 1;\r\n    else if (current_month >= 4 && current_month <= 6) current_season_number = 2;\r\n    else if (current_month >= 7 && current_month <= 9) current_season_number = 3;\r\n    else if (current_month >= 10 && current_month <= 12) current_season_number = 4;\r\n    const current_season = getSeasonLabelFromSeasonNumber(current_season_number);\r\n\r\n    const season_icon_and_class = getIconAndClassFromSeasonNumber(current_season_number);\r\n    return <Grid xs={12} id=\"Current-Season\">\r\n        <div className=\"current-season-header\">\r\n            <h3>\r\n                Current Season{' '}\r\n                <CyberLink to={ANIME_SEASON_DISPLAY(current_year, current_season_number)}>\r\n                    {current_year} {current_season}\r\n                </CyberLink>{' '}\r\n                <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                 className={season_icon_and_class.className}/>\r\n            </h3>\r\n        </div>\r\n        <div id=\"season-titles-container\" className=\"current-season-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.current_anime_season] ?\r\n                <div className=\"current-season-titles-wrapper\">\r\n                    {anime_data[AnimeData.current_anime_season].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"current-season-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nclass TopAnime extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     addHorizontalScrollEventListener()\r\n    // }\r\n    //\r\n    // componentWillUnmount() {\r\n    //     removeHorizontalScrollEventListener()\r\n    // }\r\n\r\n    render() {\r\n        return <>\r\n            <CurrentSeason\r\n                anime_data={this.props.anime_data}\r\n                anime_loading={this.props.anime_loading}\r\n                anime_data_loaded={this.props.anime_data_loaded}\r\n                user_anime_entry_statuses={this.props.user_anime_entry_statuses}\r\n            />\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopAnimeTabs\r\n                anime_data={this.props.anime_data}\r\n                anime_loading={this.props.anime_loading}\r\n                anime_data_loaded={this.props.anime_data_loaded}\r\n                user_anime_entry_statuses={this.props.user_anime_entry_statuses}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data: state.anime.anime_data,\r\n    anime_loading: state.anime.anime_loading,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopAnime)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {ANIME_TAB_NAME, BRANCH_ANIME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport AnimeStatistics from \"./AnimeStatistics\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport AnimeCurrentSeason from \"../seasons/AnimeCurrentSeason\";\r\nimport {getAnimeData, getAnimeDataForHomePage} from \"../../../actions/anime\";\r\nimport {Anime, AnimeData, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport TopAnime from \"./TopAnime\";\r\n\r\n\r\nclass AnimeHome extends Component {\r\n    componentDidMount() {\r\n        document.title = ANIME_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getAnimeDataForHomePage();\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Anime-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopAnime/>\r\n                    <Grid xs={12}>\r\n                        <AnimeStatistics/>\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeDataForHomePage, getLoggedInUserAnimeEntryStatuses})(AnimeHome)\r\n","import * as Yup from 'yup';\r\n\r\n\r\nexport const LoginSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required'),\r\n});\r\n\r\nexport const RegisterSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required!'),\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Required!'),\r\n    password: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!'),\r\n    password2: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!')\r\n        .test('passwords-match', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        }),\r\n});\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Form, Formik} from 'formik';\r\n\r\nimport {LoginSchema} from \"./functions\";\r\nimport {login} from '../../actions/auth'\r\nimport {REGISTER} from \"../../urls\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {playClickSound, playHoverSound, playWarningSound} from \"../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nclass LoginForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            username: 'username',\r\n            password: 'password'\r\n        };\r\n\r\n        const initial_values = {\r\n            username: '',\r\n            password: ''\r\n        };\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={initial_values}\r\n                validationSchema={LoginSchema}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    this.props.login(values.username, values.password);\r\n                    setSubmitting(false);\r\n                }}>\r\n                {({errors, touched, values, handleChange, handleBlur, setSubmitting}) => (\r\n                    !this.props.user_loading ? <Form id=\"Login-Form\">\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            className=\"form-control\"\r\n                            value={values.username}\r\n                            name={field_names.username}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.username && touched.username}\r\n                            helperText={(errors.username && touched.username) && errors.username}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password && touched.password}\r\n                            helperText={(errors.password && touched.password) && errors.password}/>\r\n                        <CyberButton type=\"submit\" onClick={() => {\r\n                            if (errors.password || errors.username)\r\n                                playWarningSound()\r\n                        }}>\r\n                            Login\r\n                        </CyberButton>\r\n                        <p>Don't have an account? <RouterLink to={REGISTER} onClick={playClickSound}\r\n                                                              onMouseOver={playHoverSound}>Register</RouterLink></p>\r\n                    </Form> : <div className=\"loading\"><CircularProgress/></div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(LoginForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {INDEX} from \"../../urls\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nimport '../../assets/css/auth.css';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {img_loaded: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Login';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.user_authenticated) {\r\n            return <Redirect to={this.props.redirect_url ? this.props.redirect_url : INDEX}/>;\r\n        }\r\n\r\n        return (\r\n            <div id=\"Login\" className={this.state.img_loaded ? 'fade-in' : ''}>\r\n                <img src={'/static/media/girl-window.1732e4f9.jpg'} className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n                     onLoad={() => {this.setState({img_loaded: true})}} />\r\n                <Grid container>\r\n                    <Grid item xs={3} className=\"form-container box-light\">\r\n                        <h1>Login</h1>\r\n                        <LoginForm/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    redirect_url: state.auth.redirect_url\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Login)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Form, Formik} from 'formik';\r\n\r\nimport {RegisterSchema} from \"./functions\";\r\nimport {register} from '../../actions/auth'\r\nimport {LOGIN} from \"../../urls\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {playClickSound, playHoverSound, playWarningSound} from \"../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nclass RegisterForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            username: 'username',\r\n            email: 'email',\r\n            password: 'password',\r\n            password2: 'password2'\r\n        };\r\n\r\n        const initial_values = {\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            password2: ''\r\n        };\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={initial_values}\r\n                validationSchema={RegisterSchema}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    const new_user = {\r\n                        username: values.username,\r\n                        password: values.password,\r\n                        email: values.email\r\n                    };\r\n                    this.props.register(new_user);\r\n                    setSubmitting(false);\r\n                }}>\r\n                {({errors, touched, values, handleChange, handleBlur}) => (\r\n                    !this.props.user_loading ? <Form id=\"Register-Form\">\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            className=\"form-control\"\r\n                            value={values.username}\r\n                            name={field_names.username}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.username && touched.username}\r\n                            helperText={(errors.username && touched.username) && errors.username}/>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            className=\"form-control\"\r\n                            value={values.email}\r\n                            name={field_names.email}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.email && touched.email}\r\n                            helperText={(errors.email && touched.email) && errors.email}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password && touched.password}\r\n                            helperText={(errors.password && touched.password) && errors.password}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password2}\r\n                            value={values.password2}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password2 && touched.password2}\r\n                            helperText={(errors.password2 && touched.password2) && errors.password2}/>\r\n                        <CyberButton type=\"submit\" onClick={() => {\r\n                            if (errors.email || errors.username || errors.password || errors.password2)\r\n                                playWarningSound()\r\n                        }}>\r\n                            Register\r\n                        </CyberButton>\r\n                        <p>Already have an account? <RouterLink to={LOGIN} onClick={playClickSound}\r\n                                                              onMouseOver={playHoverSound}>Login</RouterLink></p>\r\n                    </Form> : <div className=\"loading\"><CircularProgress/></div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {register})(RegisterForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {REGISTER_TAB_NAME} from \"../../globals\";\r\nimport {INDEX} from \"../../urls\";\r\nimport RegisterForm from \"./RegisterForm\";\r\n\r\nimport '../../assets/css/auth.css';\r\n\r\n\r\nclass Register extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {img_loaded: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = REGISTER_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.user_authenticated)\r\n            return <Redirect to={INDEX}/>;\r\n\r\n        return (\r\n            <div id=\"Register\" className={this.state.img_loaded ? 'fade-in' : ''}>\r\n                <img src={'/static/media/girl-window.1732e4f9.jpg'} className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n                     onLoad={() => {this.setState({img_loaded: true})}} />\r\n                <Grid container>\r\n                    <Grid item xs={3} className=\"form-container box-light\">\r\n                        <h1>Register</h1>\r\n                        <RegisterForm/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Register)\r\n","import {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA} from \"../../../globals\";\r\nimport {AnimeFilterNames, ErogeFilterNames, MangaFilterNames} from \"./field_names\";\r\nimport {\r\n    deleteAnimeFilterPreset, deleteErogeFilterPreset, deleteMangaFilterPreset,\r\n    saveAnimeFilterPreset, saveErogeFilterPreset, saveMangaFilterPreset,\r\n    setSelectedAnimePreset, setSelectedErogePreset,\r\n    setSelectedMangaPreset,\r\n    updateAnimeFilterPreset, updateErogeFilterPreset,\r\n    updateMangaFilterPreset\r\n} from \"../../../actions/users\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nexport function setPreset(branch, preset, new_values, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (filters) {\r\n                if (filters[AnimeFilterNames.downloaded] === 'true') new_values[AnimeFilterNames.downloaded] = true;\r\n                if (filters[AnimeFilterNames.is_downloading] === 'true') new_values[AnimeFilterNames.is_downloading] = true;\r\n                if (filters[AnimeFilterNames.cannot_download] === 'true') new_values[AnimeFilterNames.cannot_download] = true;\r\n                if (filters[AnimeFilterNames.deleted_by_MAL] === 'true') new_values[AnimeFilterNames.deleted_by_MAL] = true;\r\n                if (filters[AnimeFilterNames.pending_by_MAL] === 'true') new_values[AnimeFilterNames.pending_by_MAL] = true;\r\n                if (filters[AnimeFilterNames.episodes_range]) new_values[AnimeFilterNames.episodes_range] = filters[AnimeFilterNames.episodes_range].split(',');\r\n                if (filters[AnimeFilterNames.length_range]) new_values[AnimeFilterNames.length_range] = filters[AnimeFilterNames.length_range].split(',');\r\n                if (filters[AnimeFilterNames.genres]) new_values[AnimeFilterNames.genres] = filters[AnimeFilterNames.genres].split(',');\r\n                if (filters[AnimeFilterNames.type]) new_values[AnimeFilterNames.type] = filters[AnimeFilterNames.type].split(',');\r\n                if (filters[AnimeFilterNames.status]) new_values[AnimeFilterNames.status] = filters[AnimeFilterNames.status].split(',');\r\n                if (filters[AnimeFilterNames.rating_short]) new_values[AnimeFilterNames.rating_short] = filters[AnimeFilterNames.rating_short].split(',');\r\n                if (filters[AnimeFilterNames.video_quality]) new_values[AnimeFilterNames.video_quality] = filters[AnimeFilterNames.video_quality].split(',');\r\n                if (filters[AnimeFilterNames.audio_channel]) new_values[AnimeFilterNames.audio_channel] = filters[AnimeFilterNames.audio_channel].split(',');\r\n                if (filters[AnimeFilterNames.user_exclude]) new_values[AnimeFilterNames.user_exclude] = filters[AnimeFilterNames.user_exclude].split(',');\r\n                new_values[AnimeFilterNames.ordering] = filters[AnimeFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedAnimePreset(preset));\r\n            return new_values;\r\n        case BRANCH_MANGA:\r\n            if (filters) {\r\n                if (filters[MangaFilterNames.downloaded] === 'true') new_values[MangaFilterNames.downloaded] = true;\r\n                if (filters[MangaFilterNames.is_downloading] === 'true') new_values[MangaFilterNames.is_downloading] = true;\r\n                if (filters[MangaFilterNames.cannot_download] === 'true') new_values[MangaFilterNames.cannot_download] = true;\r\n                if (filters[MangaFilterNames.deleted_by_MAL] === 'true') new_values[MangaFilterNames.deleted_by_MAL] = true;\r\n                if (filters[MangaFilterNames.pending_by_MAL] === 'true') new_values[MangaFilterNames.pending_by_MAL] = true;\r\n                if (filters[MangaFilterNames.volumes_range]) new_values[MangaFilterNames.volumes_range] = filters[MangaFilterNames.volumes_range].split(',');\r\n                if (filters[MangaFilterNames.chapters_range]) new_values[MangaFilterNames.chapters_range] = filters[MangaFilterNames.chapters_range].split(',');\r\n                if (filters[MangaFilterNames.genres]) new_values[MangaFilterNames.genres] = filters[MangaFilterNames.genres].split(',');\r\n                if (filters[MangaFilterNames.type]) new_values[MangaFilterNames.type] = filters[MangaFilterNames.type].split(',');\r\n                if (filters[MangaFilterNames.status]) new_values[MangaFilterNames.status] = filters[MangaFilterNames.status].split(',');\r\n                if (filters[MangaFilterNames.user_exclude]) new_values[MangaFilterNames.user_exclude] = filters[MangaFilterNames.user_exclude].split(',');\r\n                new_values[MangaFilterNames.ordering] = filters[MangaFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedMangaPreset(preset));\r\n            return new_values;\r\n        case BRANCH_CHARACTERS:\r\n            return new_values;\r\n        case BRANCH_EROGE:\r\n            if (filters) {\r\n                if (filters[ErogeFilterNames.downloaded] === 'true') new_values[ErogeFilterNames.downloaded] = true;\r\n                if (filters[ErogeFilterNames.type]) new_values[ErogeFilterNames.type] = filters[ErogeFilterNames.type].split(',');\r\n                if (filters[ErogeFilterNames.platforms]) new_values[ErogeFilterNames.platforms] = filters[ErogeFilterNames.platforms].split(',');\r\n                if (filters[ErogeFilterNames.censorship]) new_values[ErogeFilterNames.censorship] = filters[ErogeFilterNames.censorship].split(',');\r\n                if (filters[ErogeFilterNames.language]) new_values[ErogeFilterNames.language] = filters[ErogeFilterNames.language].split(',');\r\n                if (filters[ErogeFilterNames.tags]) new_values[ErogeFilterNames.tags] = filters[ErogeFilterNames.tags].split(',');\r\n                new_values[ErogeFilterNames.ordering] = filters[ErogeFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedErogePreset(preset));\r\n            return new_values;\r\n        default:\r\n            return new_values\r\n    }\r\n}\r\n\r\n\r\nexport function updateFilterPreset(branch, preset_id, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(updateAnimeFilterPreset(preset_id, filters));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(updateMangaFilterPreset(preset_id, filters));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(updateErogeFilterPreset(preset_id, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function saveFilterPreset(branch, preset_name, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(saveAnimeFilterPreset(preset_name, filters));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(saveMangaFilterPreset(preset_name, filters));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(saveErogeFilterPreset(preset_name, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function deleteFilterPreset(branch, preset_id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(deleteAnimeFilterPreset(preset_id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(deleteMangaFilterPreset(preset_id));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(deleteErogeFilterPreset(preset_id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getSelectedPreset(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return store.getState().users.selected_anime_preset;\r\n        case BRANCH_MANGA:\r\n            return store.getState().users.selected_manga_preset;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            return store.getState().users.selected_eroge_preset;\r\n        default:\r\n            return\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCog, faPlus, faSave, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport {FiltersPreset} from \"../../../models\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {getResetValuesFromBranch} from \"../../browse/functions\";\r\nimport {deleteFilterPreset, getSelectedPreset, saveFilterPreset, setPreset, updateFilterPreset} from \"./functions\";\r\nimport {CyberButton} from \"../common/common\";\r\n\r\n\r\nclass PresetFilters extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Preset filters for the user */\r\n        presets: PropTypes.array.isRequired,\r\n        /** Currently active filters, from state */\r\n        filters: PropTypes.object.isRequired,\r\n        /** Function to run on submit when changing the preset */\r\n        onSubmit: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onPresetChange = this.onPresetChange.bind(this);\r\n        this.onPresetNew = this.onPresetNew.bind(this);\r\n        this.onPresetUpdate = this.onPresetUpdate.bind(this);\r\n        this.onPresetDelete = this.onPresetDelete.bind(this);\r\n        this.state = {\r\n            preset: getSelectedPreset(this.props.branch)\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.preset !== getSelectedPreset(this.props.branch))\r\n            this.setState({preset: getSelectedPreset(this.props.branch)})\r\n    }\r\n\r\n    onPresetChange(e) {\r\n        if (e.target.value === -1) {\r\n            this.setState({preset: {}});\r\n            return;\r\n        }\r\n        for (let x = 0; x < this.props.presets.length; x++) {\r\n            if (this.props.presets[x][FiltersPreset.id] === e.target.value) {\r\n                let new_values = getResetValuesFromBranch(this.props.branch);\r\n\r\n                let filters = this.props.presets[x][FiltersPreset.filters];\r\n                if (typeof this.props.presets[x][FiltersPreset.filters] !== 'object')\r\n                    filters = JSON.parse(this.props.presets[x][FiltersPreset.filters]);\r\n\r\n                new_values = setPreset(this.props.branch, this.props.presets[x], new_values, filters);\r\n\r\n                this.setState({preset: this.props.presets[x]}, () => {\r\n                    this.props.onSubmit(e, new_values);\r\n                });\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    onPresetUpdate() {\r\n        if (!isEmpty(this.state.preset))\r\n            updateFilterPreset(this.props.branch, this.state.preset[FiltersPreset.id], this.props.filters);\r\n    }\r\n\r\n    onPresetNew() {\r\n        let preset_name = prompt('Enter the preset name:', 'New Preset');\r\n        if (preset_name)\r\n            saveFilterPreset(this.props.branch, preset_name, this.props.filters)\r\n    }\r\n\r\n    onPresetDelete() {\r\n        if (window.confirm(`Delete ${this.state.preset[FiltersPreset.preset_name]} preset?`))\r\n            deleteFilterPreset(this.props.branch, this.state.preset[FiltersPreset.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Preset-Filters\">\r\n                <Select label=\"Options\" className=\"preset-settings\" value={-1}>\r\n                    <MenuItem style={{display: 'none'}} value={-1}>\r\n                        <FontAwesomeIcon icon={faCog}/>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={1}>\r\n                        <CyberButton title={'Create preset with current filters'} onClick={this.onPresetNew}>\r\n                            <FontAwesomeIcon icon={faPlus}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={2}>\r\n                        <CyberButton title={'Update selected preset with current filters'} onClick={this.onPresetUpdate}>\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={3}>\r\n                        <CyberButton title={'Delete selected preset'} onClick={this.onPresetDelete}>\r\n                            <FontAwesomeIcon icon={faTrash}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                </Select>\r\n                {this.props.presets ? <>\r\n                    <Select\r\n                        id=\"user-filters-preset\"\r\n                        className=\"preset-selector\"\r\n                        label=\"Preset\"\r\n                        value={this.state.preset[FiltersPreset.id] ? this.state.preset[FiltersPreset.id] : -1}\r\n                        onChange={this.onPresetChange}\r\n                    >\r\n                        <MenuItem value={-1}>\r\n                            Select Preset\r\n                        </MenuItem>\r\n                        {this.props.presets.map(preset => (\r\n                            <MenuItem value={preset[FiltersPreset.id]}>\r\n                                {preset[FiltersPreset.preset_name]}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PresetFilters\r\n","import React from 'react'\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCog, faThLarge, faThList} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../../../globals\";\r\nimport store from \"../../../store\";\r\nimport {\r\n    Profile,\r\n    User,\r\n    UserAnimeDisplaySettingsSchema,\r\n    UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema\r\n} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {setUserTitleDisplaySettings} from \"../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function UserDisplaySettingsDialog(props) {\r\n    switch (props.branch) {\r\n        case BRANCH_ANIME:\r\n            return <UserBrowseAnimeDisplaySettingsDialog user_display_settings={props.user_display_settings}/>;\r\n        case BRANCH_MANGA:\r\n            return <UserBrowseMangaDisplaySettingsDialog user_display_settings={props.user_display_settings}/>;\r\n        case BRANCH_EROGE:\r\n            return <UserBrowseErogeDisplaySettingsDialog user_display_settings={props.user_display_settings}/>;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction UserBrowseAnimeDisplaySettingsDialog(props) {\r\n    let settings = {};\r\n    Object.assign(settings, props.user_display_settings);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [cards, setCards] = React.useState(settings[UserAnimeDisplaySettingsSchema.cards]);\r\n    const [type, setType] = React.useState(settings[UserAnimeDisplaySettingsSchema.type]);\r\n    const [episodes, setEpisodes] = React.useState(settings[UserAnimeDisplaySettingsSchema.episodes]);\r\n    const [mins_per_ep, setMinsPerEp] = React.useState(settings[UserAnimeDisplaySettingsSchema.mins_per_ep]);\r\n    const [rating, setRating] = React.useState(settings[UserAnimeDisplaySettingsSchema.rating]);\r\n    const [genres, setGenres] = React.useState(settings[UserAnimeDisplaySettingsSchema.genres]);\r\n    const [mal_score, setMalScore] = React.useState(settings[UserAnimeDisplaySettingsSchema.mal_score]);\r\n    const [aired, setAired] = React.useState(settings[UserAnimeDisplaySettingsSchema.aired]);\r\n\r\n    const handleClickOpen = () => {\r\n        setCards(settings[UserAnimeDisplaySettingsSchema.cards]);\r\n        setType(settings[UserAnimeDisplaySettingsSchema.type]);\r\n        setEpisodes(settings[UserAnimeDisplaySettingsSchema.episodes]);\r\n        setMinsPerEp(settings[UserAnimeDisplaySettingsSchema.mins_per_ep]);\r\n        setRating(settings[UserAnimeDisplaySettingsSchema.rating]);\r\n        setGenres(settings[UserAnimeDisplaySettingsSchema.genres]);\r\n        setMalScore(settings[UserAnimeDisplaySettingsSchema.mal_score]);\r\n        setAired(settings[UserAnimeDisplaySettingsSchema.aired]);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (reset= true) => {\r\n        if (reset) {\r\n            let previous_settings = {};\r\n            Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_anime_display_settings]);\r\n            store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, previous_settings));\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleCards = () => {\r\n        setCards(!cards);\r\n        settings[UserAnimeDisplaySettingsSchema.cards] = !cards;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleType = (e) => {\r\n        setType(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.type] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleEpisodes = (e) => {\r\n        setEpisodes(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.episodes] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleMinsPerEp = (e) => {\r\n        setMinsPerEp(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.mins_per_ep] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleRating = (e) => {\r\n        setRating(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.rating] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleGenres = (e) => {\r\n        setGenres(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.genres] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleMalScore = (e) => {\r\n        setMalScore(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.mal_score] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    const handleAired = (e) => {\r\n        setAired(e.target.checked);\r\n        settings[UserAnimeDisplaySettingsSchema.aired] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings));\r\n    };\r\n\r\n    return <div className=\"user-browse-display-settings-dialog-container\">\r\n        <CyberButton variant=\"outlined\" onClick={handleClickOpen} title={'Display settings'}>\r\n            <FontAwesomeIcon icon={faCog}/>\r\n        </CyberButton>\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            id=\"User-Browse-Display-Settings-Dialog\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle>User settings</DialogTitle>\r\n            <DialogContent className=\"settings-wrapper\">\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td><p>Titles</p></td>\r\n                        <td className=\"text-center\">\r\n                            <CyberButton classNames=\"btn-contained-primary\" variant=\"contained\"\r\n                                         onClick={handleCards}>\r\n                                <FontAwesomeIcon\r\n                                    icon={cards ? faThList : faThLarge}\r\n                                    title={cards ? 'Table' : 'Cards'}\r\n                                />\r\n                            </CyberButton>\r\n                        </td>\r\n                        <td><p>Type</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={type}\r\n                                onChange={handleType}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><p>Episodes</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={episodes}\r\n                                onChange={handleEpisodes}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                        <td><p>Mins. per episode</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={mins_per_ep}\r\n                                onChange={handleMinsPerEp}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><p>Rating</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={rating}\r\n                                onChange={handleRating}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                        <td><p>Genres</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={genres}\r\n                                onChange={handleGenres}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><p>MAL Score</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={mal_score}\r\n                                onChange={handleMalScore}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                        <td><p>Aired</p></td>\r\n                        <td>\r\n                            <Checkbox\r\n                                checked={aired}\r\n                                onChange={handleAired}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                              />\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <CyberButton variant=\"outlined\" title={'Save settings'} onClick={() => {\r\n                    store.dispatch(setUserTitleDisplaySettings(BRANCH_ANIME, settings, true));\r\n                    handleClose(false);\r\n                }}>\r\n                    Save\r\n                </CyberButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction UserBrowseMangaDisplaySettingsDialog(props) {\r\n    let settings = {};\r\n    Object.assign(settings, props.user_display_settings);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [cards, setCards] = React.useState(settings[UserMangaDisplaySettingsSchema.cards]);\r\n    const [type, setType] = React.useState(settings[UserMangaDisplaySettingsSchema.type]);\r\n    const [volumes, setVolumes] = React.useState(settings[UserMangaDisplaySettingsSchema.volumes]);\r\n    const [chapters, setChapters] = React.useState(settings[UserMangaDisplaySettingsSchema.chapters]);\r\n    const [genres, setGenres] = React.useState(settings[UserMangaDisplaySettingsSchema.genres]);\r\n    const [mal_score, setMalScore] = React.useState(settings[UserMangaDisplaySettingsSchema.mal_score]);\r\n    const [aired, setAired] = React.useState(settings[UserMangaDisplaySettingsSchema.aired]);\r\n\r\n    const handleClickOpen = () => {\r\n        setCards(settings[UserMangaDisplaySettingsSchema.cards]);\r\n        setType(settings[UserMangaDisplaySettingsSchema.type]);\r\n        setVolumes(settings[UserMangaDisplaySettingsSchema.volumes]);\r\n        setChapters(settings[UserMangaDisplaySettingsSchema.chapters]);\r\n        setGenres(settings[UserMangaDisplaySettingsSchema.genres]);\r\n        setMalScore(settings[UserMangaDisplaySettingsSchema.mal_score]);\r\n        setAired(settings[UserMangaDisplaySettingsSchema.aired]);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (reset= true) => {\r\n        if (reset) {\r\n            let previous_settings = {};\r\n            Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_manga_display_settings]);\r\n            store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, previous_settings));\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleCards = () => {\r\n        setCards(!cards);\r\n        settings[UserMangaDisplaySettingsSchema.cards] = !cards;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleType = (e) => {\r\n        setType(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.type] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleVolumes = (e) => {\r\n        setVolumes(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.volumes] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleChapters = (e) => {\r\n        setChapters(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.chapters] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleGenres = (e) => {\r\n        setGenres(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.genres] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleMalScore = (e) => {\r\n        setMalScore(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.mal_score] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    const handleAired = (e) => {\r\n        setAired(e.target.checked);\r\n        settings[UserMangaDisplaySettingsSchema.aired] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings));\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-browse-display-settings-dialog-container\">\r\n            <CyberButton variant=\"outlined\" onClick={handleClickOpen} title={'Display settings'}>\r\n                <FontAwesomeIcon icon={faCog}/>\r\n            </CyberButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                id=\"User-Browse-Display-Settings-Dialog\"\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle>User settings</DialogTitle>\r\n                <DialogContent className=\"settings-wrapper\">\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td><p>Titles</p></td>\r\n                            <td className=\"text-center\">\r\n                                <CyberButton classNames=\"btn-contained-primary\" variant=\"contained\"\r\n                                             onClick={handleCards}>\r\n                                    <FontAwesomeIcon\r\n                                        icon={cards ? faThList : faThLarge}\r\n                                        title={cards ? 'Table' : 'Cards'}\r\n                                    />\r\n                                </CyberButton>\r\n                            </td>\r\n                            <td><p>Type</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={type}\r\n                                    onChange={handleType}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Volumes</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={volumes}\r\n                                    onChange={handleVolumes}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                            <td><p>Chapters</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={chapters}\r\n                                    onChange={handleChapters}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Genres</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={genres}\r\n                                    onChange={handleGenres}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                            <td><p>MAL Score</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={mal_score}\r\n                                    onChange={handleMalScore}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Aired</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={aired}\r\n                                    onChange={handleAired}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <CyberButton variant=\"outlined\" title={'Save settings'} onClick={() => {\r\n                        store.dispatch(setUserTitleDisplaySettings(BRANCH_MANGA, settings, true));\r\n                        handleClose(false);\r\n                    }}>\r\n                        Save\r\n                    </CyberButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction UserBrowseErogeDisplaySettingsDialog(props) {\r\n    let settings = {};\r\n    Object.assign(settings, props.user_display_settings);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [cards, setCards] = React.useState(settings[UserErogeDisplaySettingsSchema.cards]);\r\n    const [type, setType] = React.useState(settings[UserErogeDisplaySettingsSchema.type]);\r\n    const [censorship, setCensorship] = React.useState(settings[UserErogeDisplaySettingsSchema.censorship]);\r\n    const [language, setLanguage] = React.useState(settings[UserErogeDisplaySettingsSchema.language]);\r\n    const [platforms, setPlatforms] = React.useState(settings[UserErogeDisplaySettingsSchema.platforms]);\r\n    const [tags, setTags] = React.useState(settings[UserErogeDisplaySettingsSchema.tags]);\r\n    const [hg_score, setHgScore] = React.useState(settings[UserErogeDisplaySettingsSchema.hg_score]);\r\n\r\n    const handleClickOpen = () => {\r\n        setCards(settings[UserErogeDisplaySettingsSchema.cards]);\r\n        setType(settings[UserErogeDisplaySettingsSchema.type]);\r\n        setCensorship(settings[UserErogeDisplaySettingsSchema.censorship]);\r\n        setLanguage(settings[UserErogeDisplaySettingsSchema.language]);\r\n        setPlatforms(settings[UserErogeDisplaySettingsSchema.platforms]);\r\n        setTags(settings[UserErogeDisplaySettingsSchema.tags]);\r\n        setHgScore(settings[UserErogeDisplaySettingsSchema.hg_score]);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (reset= true) => {\r\n        if (reset) {\r\n            let previous_settings = {};\r\n            Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_eroge_display_settings]);\r\n            store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, previous_settings));\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleCards = () => {\r\n        setCards(!cards);\r\n        settings[UserErogeDisplaySettingsSchema.cards] = !cards;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleType = (e) => {\r\n        setType(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.type] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleCensorship = (e) => {\r\n        setCensorship(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.censorship] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleLanguage = (e) => {\r\n        setLanguage(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.language] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handlePlatforms = (e) => {\r\n        setPlatforms(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.platforms] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleTags = (e) => {\r\n        setTags(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.tags] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    const handleHgScore = (e) => {\r\n        setHgScore(e.target.checked);\r\n        settings[UserErogeDisplaySettingsSchema.hg_score] = e.target.checked;\r\n        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings));\r\n    };\r\n\r\n    return (\r\n        <div className=\"user-browse-display-settings-dialog-container\">\r\n            <CyberButton variant=\"outlined\" onClick={handleClickOpen} title={'Display settings'}>\r\n                <FontAwesomeIcon icon={faCog}/>\r\n            </CyberButton>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                id=\"User-Browse-Display-Settings-Dialog\"\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle>User settings</DialogTitle>\r\n                <DialogContent className=\"settings-wrapper\">\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td><p>Titles</p></td>\r\n                            <td className=\"text-center\">\r\n                                <CyberButton classNames=\"btn-contained-primary\" variant=\"contained\"\r\n                                             onClick={handleCards}>\r\n                                    <FontAwesomeIcon\r\n                                        icon={cards ? faThList : faThLarge}\r\n                                        title={cards ? 'Table' : 'Cards'}\r\n                                    />\r\n                                </CyberButton>\r\n                            </td>\r\n                            <td><p>Type</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={type}\r\n                                    onChange={handleType}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Censorship</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={censorship}\r\n                                    onChange={handleCensorship}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                            <td><p>Language</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={language}\r\n                                    onChange={handleLanguage}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>Platforms</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={platforms}\r\n                                    onChange={handlePlatforms}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                            <td><p>Tags</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={tags}\r\n                                    onChange={handleTags}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><p>HG Score</p></td>\r\n                            <td>\r\n                                <Checkbox\r\n                                    checked={hg_score}\r\n                                    onChange={handleHgScore}\r\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                  />\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <CyberButton variant=\"outlined\" title={'Save settings'} onClick={() => {\r\n                        store.dispatch(setUserTitleDisplaySettings(BRANCH_EROGE, settings, true));\r\n                        handleClose(false);\r\n                    }}>\r\n                        Save\r\n                    </CyberButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown, faFilter, faSortAmountDown, faSortAmountDownAlt, faTimes, faUndoAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {setCookieShowFilters} from \"../../../actions/cookies\";\r\nimport {filterTitles, getResetValuesFromBranch} from \"../../browse/functions\";\r\nimport {ApiResult} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {FilterSchema, FilterSchemaType} from \"./field_names\";\r\nimport store from \"../../../store\";\r\n\r\nimport PresetFilters from \"./PresetFilters\";\r\nimport {setPreset} from \"./functions\";\r\nimport {playClickSound} from \"../sounds\";\r\nimport UserDisplaySettingsDialog from \"./UserBrowseDisplaySettings\";\r\n\r\nimport '../../../assets/css/filters.css'\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nfunction getSliderLabel(values, max, label_name) {\r\n    let value_2 = `${values[1]}`;\r\n    if (values[1] === max)\r\n        value_2 = `${values[1] - 1}+`;\r\n    return `${values[0]} to ${value_2} ${label_name.split('_')[0]}`\r\n}\r\n\r\nfunction checkSliderDefaults(values, min, max) {\r\n    return !(parseInt(values[0]) === min && parseInt(values[1]) === max);\r\n}\r\n\r\nfunction getGenreImgSrc(name, values) {\r\n    const img_name = name.toLowerCase().replaceAll(' ', '_');\r\n    let ext = 'jpg';\r\n    if (values.indexOf(name) >= 0) ext = 'gif';\r\n    return `/images/genre_icons/${img_name}.${ext}`\r\n}\r\n\r\nfunction getOrderIcon(order, active) {\r\n    let ordering = order;\r\n    if (ordering.indexOf('-') === 0 && ordering.replace('-', '') === active)\r\n        return faSortAmountDown;\r\n    return faSortAmountDownAlt\r\n}\r\n\r\nfunction getOrderValue(order, active) {\r\n    return order.replace('-', '') === active;\r\n}\r\n\r\n/**\r\n * Adjusts the height of the filters wrapper based on\r\n * active filters, if no filters are active, the height is set to 0\r\n */\r\nfunction changeHeightOfActiveFiltersWrapperOnChange() {\r\n    let active_filters = document.getElementById('Active-Filters');\r\n    if (active_filters) {\r\n        if (active_filters.childNodes.length > 0) active_filters.parentNode.style.height = 'auto';\r\n        else active_filters.parentNode.style.height = '0';\r\n    }\r\n}\r\n\r\n// noinspection JSIgnoredPromiseFromCall,JSUnresolvedVariable\r\nclass TitlesFilter extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Previous filters from cookies */\r\n        title_filters: PropTypes.object.isRequired,\r\n        /** Selected season, if called from display season page */\r\n        season: PropTypes.object,\r\n        /** User list object {pk: selected filter:} if called from user list page */\r\n        list: PropTypes.object,\r\n        /** Main filters */\r\n        main_filters: PropTypes.array,\r\n        /** Regular filters */\r\n        regular_filters: PropTypes.array,\r\n        /** Wide filters (ex. Genres) */\r\n        wide_filters: PropTypes.array,\r\n        /** Ordering filters */\r\n        order_filters: PropTypes.array,\r\n        /** Preset filters for the user */\r\n        presets: PropTypes.array,\r\n        /** User display settings for the titles */\r\n        user_display_settings: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onGenreEnter = this.onGenreEnter.bind(this);\r\n        this.onGenreLeave = this.onGenreLeave.bind(this);\r\n        this.onGenreChange = this.onGenreChange.bind(this);\r\n        this.checkFormValuesFromCookies = this.checkFormValuesFromCookies.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onReset = this.onReset.bind(this);\r\n\r\n        this.state = this.props.title_filters;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (JSON.stringify(prevProps.title_filters) !== JSON.stringify(this.props.title_filters))\r\n            this.setState(this.props.title_filters);\r\n    }\r\n\r\n    /**\r\n     * Update the Formik values with the cookie filter values, because sometimes\r\n     * when filtering from a user list the values don't update correctly.\r\n     * @returns {boolean} True if the values should be updated\r\n     */\r\n    checkFormValuesFromCookies() {\r\n        let filters = Object.assign({}, this.state);\r\n        let cookie_filters = Object.assign({}, this.props.title_filters);\r\n        return JSON.stringify(filters) !== JSON.stringify(cookie_filters);\r\n    }\r\n\r\n    /**\r\n     * When entering a genre div, change the image .jpg to .gif.\r\n     * @param genreFilter {String} name of the genre.\r\n     */\r\n    onGenreEnter(genreFilter) {\r\n        let img = document.getElementById(\"img_\" + genreFilter);\r\n        if (!img.classList.contains('active-genre'))\r\n            img.src = img.src.slice(0, -3) + 'gif';\r\n    }\r\n\r\n    /**\r\n     * When leaving the genre div revert the .gif image back to .jpg.\r\n     * @param genreFilter {String} name of the genre.\r\n     */\r\n    onGenreLeave(genreFilter) {\r\n        let img = document.getElementById(\"img_\" + genreFilter);\r\n        if (!img.classList.contains('active-genre'))\r\n            img.src = img.src.slice(0, -3) + 'jpg';\r\n    }\r\n\r\n    /**\r\n     * When clicking on a genre set it as active by adding a css\r\n     * class, or remove the class if it was already active.\r\n     * @param e {Object} Mouse event.\r\n     */\r\n    onGenreChange(e) {\r\n        if (e.target.checked)\r\n            e.target.nextSibling.firstChild.classList.add(\"active-genre\");\r\n        else\r\n            e.target.nextSibling.firstChild.classList.remove(\"active-genre\");\r\n    };\r\n\r\n    /**\r\n     * Called on submit of the filters, calls the filter\r\n     * title action with the active filters\r\n     * @param e {Object} Mouse event\r\n     * @param preset {Object} Optional, Filter preset, default null\r\n     */\r\n    onSubmit(e, preset = null) {\r\n        e.preventDefault();\r\n\r\n        if (preset)\r\n            this.setState(preset, () => {\r\n                this.onSubmit(e)\r\n            });\r\n        else filterTitles(this.props.branch, 1, this.state, this.props.season, this.props.list);\r\n    }\r\n\r\n    /**\r\n     * Called on reset of the filters, resets the active\r\n     * filters and ordering to default, and calls the filter title action\r\n     */\r\n    onReset() {\r\n        const reset_values = getResetValuesFromBranch(this.props.branch);\r\n        this.setState(reset_values);\r\n        setPreset(this.props.branch, {});\r\n        filterTitles(this.props.branch, 1, reset_values, this.props.season, this.props.list);\r\n    }\r\n\r\n    render() {\r\n        const uses_presets = this.props.presets !== undefined;\r\n        const field_names = {\r\n            search: 'search',\r\n            ordering: 'ordering',\r\n        };\r\n        changeHeightOfActiveFiltersWrapperOnChange();\r\n\r\n        return (\r\n            <Grid id=\"Filters\" container>\r\n                <Grid item xs={12}>\r\n                    <form className=\"filters-form\" onSubmit={this.onSubmit}>\r\n                        <Grid container>\r\n                            <Grid item xs={12} sm={6} md={4} lg={3} className=\"search-field-container\">\r\n                                <TextField\r\n                                    label=\"Search\"\r\n                                    className=\"form-control search-field\"\r\n                                    value={this.state[field_names.search]}\r\n                                    name={field_names.search}\r\n                                    onChange={(e) => {\r\n                                        this.setState({[e.target.name]: e.target.value});\r\n                                    }}/>\r\n                            </Grid>\r\n                            <Grid item xs={0} md={uses_presets ? 3 : 5} lg={uses_presets ? 4 : 6}>\r\n                                <p className=\"total-results\">Results: <span className=\"total-results-span\">\r\n                                {!this.props.titles_loading ?\r\n                                    this.props.filtered_titles[ApiResult.count] : 'Loading..'}</span>\r\n                                </p>\r\n                            </Grid>\r\n                            {uses_presets ? <Grid item xs={12} md={2}>\r\n                                <PresetFilters\r\n                                    branch={this.props.branch}\r\n                                    presets={this.props.presets}\r\n                                    filters={this.state}\r\n                                    onSubmit={this.onSubmit}/>\r\n                            </Grid> : null}\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton variant=\"outlined\" onClick={() => {\r\n                                    store.dispatch(setCookieShowFilters(!this.props.show_filters))\r\n                                }} title={this.props.show_filters ? 'Hide advanced filters' : 'Show advanced filters'}>\r\n                                    <FontAwesomeIcon\r\n                                        icon={this.props.show_filters ? faTimes : faArrowDown}/></CyberButton>\r\n                            </Grid>\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton variant=\"outlined\" onClick={this.onReset} title={'Reset filters'}>\r\n                                    <FontAwesomeIcon icon={faUndoAlt}/></CyberButton>\r\n                            </Grid>\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton type=\"submit\" variant=\"outlined\" title={'Filter'}>\r\n                                    <FontAwesomeIcon icon={faFilter}/></CyberButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12} className=\"text-center\" style={{height: 0}}>\r\n                                <div id=\"Active-Filters\" className=\"active-filters-wrapper\">\r\n                                    {this.props.main_filters ? this.props.main_filters.map((value, x) => (\r\n                                        this.state[value[FilterSchema.filter_name]] ?\r\n                                            <Chip key={x} className={`chip-${value[FilterSchema.color]}`}\r\n                                                  size=\"small\" label={value[FilterSchema.label]}/> : null\r\n                                    )) : null}\r\n                                    {this.props.regular_filters ? this.props.regular_filters.map((field) => (\r\n                                        field[FilterSchema.type] === FilterSchemaType.standard ?\r\n                                            this.state[field[FilterSchema.filter_name]].map((filter, i) => (\r\n                                                <Chip key={i} className={`chip-${field[FilterSchema.color]}`}\r\n                                                      size=\"small\" label={filter}/>\r\n                                            )) : field[FilterSchema.type] === FilterSchemaType.slider ?\r\n                                            checkSliderDefaults(this.state[field[FilterSchema.filter_name]],\r\n                                                field[FilterSchema.min], field[FilterSchema.max]) ?\r\n                                                <Chip className={`chip-${field[FilterSchema.color]}`} size=\"small\"\r\n                                                      label={getSliderLabel(this.state[field[FilterSchema.filter_name]], field[FilterSchema.max], field[FilterSchema.filter_name])}/>\r\n                                                : null : null\r\n                                    )) : null}\r\n                                    {this.props.wide_filters ? this.props.wide_filters.map((field) => (\r\n                                        this.state[field[FilterSchema.filter_name]].map((filter, i) => (\r\n                                            <Chip key={i} className={`chip-${field[FilterSchema.color]}`}\r\n                                                  size=\"small\" label={filter}/>\r\n                                        ))\r\n                                    )) : null}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <div id=\"filters-collapsable\" className={this.props.show_filters ? 'show-filters' : null}>\r\n                            <Grid container>\r\n                                {this.props.main_filters ?\r\n                                    <Grid item xs={12} md={6} lg={4} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">Main Filters</h6>\r\n                                        {this.props.main_filters.map((value, x) => (\r\n                                            <div key={x} className=\"input-group\">\r\n                                                <input id={value[FilterSchema.filter_name]}\r\n                                                       type=\"checkbox\"\r\n                                                       name={value[FilterSchema.filter_name]}\r\n                                                       hidden=\"hidden\"\r\n                                                       checked={this.state[value[FilterSchema.filter_name]]}\r\n                                                       onChange={(e) => {\r\n                                                           this.setState({\r\n                                                               [e.target.name]: !this.state[value[FilterSchema.filter_name]]\r\n                                                           });\r\n                                                       }}\r\n                                                />\r\n                                                <label htmlFor={value[FilterSchema.filter_name]}\r\n                                                       className={`label-${value[FilterSchema.color]}`}>\r\n                                                    {value[FilterSchema.label]}</label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </Grid> : null}\r\n\r\n                                {this.props.regular_filters ? this.props.regular_filters.map((field, x) => (\r\n                                    <Grid key={x} item xs={12} md={6} lg={4} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">{field[FilterSchema.filter_name].replaceAll('_', ' ')}</h6>\r\n                                        {field[FilterSchema.type] === FilterSchemaType.standard ? field[FilterSchema.content].map((filter, y) => (\r\n                                            <div key={y} className=\"input-group\">\r\n                                                <input\r\n                                                    id={`${field[FilterSchema.filter_name]}_${filter}`}\r\n                                                    type=\"checkbox\"\r\n                                                    name={field[FilterSchema.filter_name]}\r\n                                                    onChange={(e) => {\r\n                                                        if (this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0) {\r\n                                                            let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                            filters.splice(filters.indexOf(filter), 1);\r\n                                                            this.setState({\r\n                                                                [e.target.name]: filters\r\n                                                            });\r\n                                                        } else {\r\n                                                            let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                            filters.push(filter);\r\n                                                            this.setState({\r\n                                                                [e.target.name]: filters\r\n                                                            });\r\n                                                        }\r\n                                                    }}\r\n                                                    checked={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0}\r\n                                                    hidden=\"hidden\"/>\r\n                                                <label\r\n                                                    htmlFor={`${field[FilterSchema.filter_name]}_${filter}`}\r\n                                                    className={`label-${field[FilterSchema.color]}`}>{filter}</label>\r\n                                            </div>\r\n                                        )) : field[FilterSchema.type] === FilterSchemaType.slider ?\r\n                                            <Slider\r\n                                                className=\"slider-group\"\r\n                                                id={field[FilterSchema.filter_name]}\r\n                                                value={this.state[field[FilterSchema.filter_name]]}\r\n                                                onChange={(event, value) => {\r\n                                                    this.setState({\r\n                                                        [field[FilterSchema.filter_name]]: value\r\n                                                    })\r\n                                                }}\r\n                                                max={field[FilterSchema.max]}\r\n                                                min={field[FilterSchema.min]}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                aria-labelledby=\"range-slider\"\r\n                                                marks={field[FilterSchema.marks]}\r\n                                            />\r\n                                            : null}\r\n                                    </Grid>\r\n                                )) : null}\r\n                            </Grid>\r\n\r\n                            {this.props.wide_filters ? <Grid container>\r\n                                {this.props.wide_filters.map((field, x) => (\r\n                                    <Grid key={x} item xs={12} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">{field[FilterSchema.filter_name]}</h6>\r\n                                        {field[FilterSchema.content].map((filter, i) => (\r\n                                            <div key={i} className=\"genre-container\">\r\n                                                <input id={filter} type=\"checkbox\" hidden=\"hidden\"\r\n                                                       name={field[FilterSchema.filter_name]}\r\n                                                       onChange={(e) => {\r\n                                                           if (this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0) {\r\n                                                               let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                               filters.splice(filters.indexOf(filter), 1);\r\n                                                               this.setState({\r\n                                                                   [e.target.name]: filters\r\n                                                               });\r\n                                                           } else {\r\n                                                               let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                               filters.push(filter);\r\n                                                               this.setState({\r\n                                                                   [e.target.name]: filters\r\n                                                               });\r\n                                                           }\r\n                                                       }}\r\n                                                       onClick={this.onGenreChange}\r\n                                                       checked={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0}\r\n                                                />\r\n                                                <label htmlFor={filter}\r\n                                                       onMouseEnter={() => {\r\n                                                           this.onGenreEnter(filter)\r\n                                                       }}\r\n                                                       onMouseLeave={() => {\r\n                                                           this.onGenreLeave(filter)\r\n                                                       }}>\r\n                                                    <img id={`img_${filter}`}\r\n                                                         className={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0 ? 'active-genre' : null}\r\n                                                         src={getGenreImgSrc(filter, this.state[field[FilterSchema.filter_name]])}\r\n                                                         alt=\"\"/>\r\n                                                    <div><p>{filter}</p></div>\r\n                                                </label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid> : null}\r\n                        </div>\r\n\r\n                        <Grid container className=\"ordering-container\">\r\n                            {this.props.order_filters ? <>\r\n                                <Grid item xs={12}>\r\n                                    {this.props.order_filters.map((order, i) => (\r\n                                        <div key={i} className=\"input-group\" onMouseLeave={() => {\r\n                                            let container = document.getElementById(`order_btn_container_${order}`);\r\n                                            container.classList.remove('hovered-order-button-container')\r\n                                        }}>\r\n                                            <label id={`order_label_${order}`}\r\n                                                   className={getOrderValue(this.state[field_names.ordering], order) ?\r\n                                                       'no-hover-color active-order-label' : 'no-hover-color no-border'}\r\n                                                   onMouseEnter={() => {\r\n                                                       let container = document.getElementById(`order_btn_container_${order}`);\r\n                                                       let width = document.getElementById(`order_label_${order}`).offsetWidth;\r\n                                                       container.classList.add('hovered-order-button-container');\r\n                                                       container.setAttribute('style', `margin-left: calc(${width / 2}px - 35px);`)\r\n                                                   }}>\r\n                                                {getOrderValue(this.state[field_names.ordering], order) ? <FontAwesomeIcon\r\n                                                    icon={getOrderIcon(this.state[field_names.ordering], order)}/> : null}\r\n                                                <span className=\"order-label\">{order.replaceAll('_', ' ')}</span>\r\n                                            </label>\r\n                                            <div id={`order_btn_container_${order}`} className=\"order-buttons-container\">\r\n                                                <div className=\"order-btn\">\r\n                                                    <input id={`order_dc_${order}`} type=\"radio\" value={order}\r\n                                                           checked={getOrderValue(this.state[field_names.ordering], order)}\r\n                                                           hidden=\"hidden\" onClick={(e) => {\r\n                                                        playClickSound();\r\n                                                        this.setState({\r\n                                                            [field_names.ordering]: `-${order}`\r\n                                                        }, () => {\r\n                                                            this.onSubmit(e);\r\n                                                        });\r\n                                                    }}/>\r\n                                                    <label htmlFor={`order_dc_${order}`}>\r\n                                                        <FontAwesomeIcon icon={faSortAmountDown}/>\r\n                                                    </label>\r\n                                                </div>\r\n                                                <div className=\"order-btn\">\r\n                                                    <input id={`order_ac_${order}`} type=\"radio\" value={order}\r\n                                                           checked={getOrderValue(this.state[field_names.ordering], order)}\r\n                                                           hidden=\"hidden\" onClick={(e) => {\r\n                                                        playClickSound();\r\n                                                        this.setState({\r\n                                                            [field_names.ordering]: e.target.value\r\n                                                        }, () => {\r\n                                                            this.onSubmit(e);\r\n                                                        });\r\n                                                    }}/>\r\n                                                    <label htmlFor={`order_ac_${order}`}>\r\n                                                        <FontAwesomeIcon icon={faSortAmountDownAlt}/>\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </Grid>\r\n                            </> : <Grid item xs={11}/>}\r\n                        </Grid>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    show_filters: state.cookies.show_filters,\r\n    searchable_titles: state.anime.searchable_titles,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TitlesFilter)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {\r\n    ANIME_AUDIO_CHANNELS, ANIME_GENRES, ANIME_ORDERINGS,\r\n    ANIME_RATING_SHORT,\r\n    ANIME_STATUSES,\r\n    ANIME_TYPES,\r\n    ANIME_VIDEO_QUALITIES,\r\n    BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES, USER_ANIME_ORDERINGS, USER_ANIME_STATUSES, USER_ANIME_STATUSES_ARRAY\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {FilterLabels, AnimeFilterNames, FilterSchemaType} from \"../field_names\";\r\nimport PropTypes from \"prop-types\";\r\nimport {User} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getAnimeFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\n\r\n\r\nclass AnimeFilters extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n        /** User List object, {pk: selected_filter:} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getAnimeFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': AnimeFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n            {'name': AnimeFilterNames.is_downloading, 'label': FilterLabels.is_downloading, 'color': 'default'},\r\n            {'name': AnimeFilterNames.cannot_download, 'label': FilterLabels.cannot_download, 'color': 'danger'},\r\n            {'name': AnimeFilterNames.deleted_by_MAL, 'label': FilterLabels.deleted_by_MAL, 'color': 'danger'},\r\n            {'name': AnimeFilterNames.pending_by_MAL, 'label': FilterLabels.pending_by_MAL, 'color': 'warning'},\r\n        ];\r\n        const episode_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 36,\r\n                label: '36',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const length_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 30,\r\n                label: '30',\r\n            },\r\n            {\r\n                value: 61,\r\n                label: '60+',\r\n            },\r\n        ];\r\n        const initial = new FILTER_ANIME_INITIAL_VALUES();\r\n        const values = initial.VALUES;\r\n        let regular_filters = [\r\n            {'name': AnimeFilterNames.type, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_TYPES},\r\n            {'name': AnimeFilterNames.status, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_STATUSES},\r\n            {'name': AnimeFilterNames.rating_short, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_RATING_SHORT},\r\n            {'name': AnimeFilterNames.episodes_range, 'type': FilterSchemaType.slider, 'marks': episode_marks, 'min': values.episodes_range[0], 'max': values.episodes_range[1], 'color': 'primary', 'content': null},\r\n            {'name': AnimeFilterNames.length_range, 'type': FilterSchemaType.slider, 'marks': length_marks, 'min': values.length_range[0], 'max': values.length_range[1], 'color': 'primary', 'content': null},\r\n            {'name': AnimeFilterNames.video_quality, 'type': FilterSchemaType.standard, 'color': 'secondary', 'content': ANIME_VIDEO_QUALITIES},\r\n            {'name': AnimeFilterNames.audio_channel, 'type': FilterSchemaType.standard, 'color': 'secondary', 'content': ANIME_AUDIO_CHANNELS},\r\n        ];\r\n\r\n        let wide_filters = [\r\n            {'name': AnimeFilterNames.genres, 'type': FilterSchemaType.wide, 'color': 'primary', 'content': ANIME_GENRES},\r\n        ];\r\n\r\n        let orderings = ANIME_ORDERINGS;\r\n        if (!isEmpty(this.props.list)) {\r\n            orderings = orderings.concat(USER_ANIME_ORDERINGS);\r\n        } else {\r\n            if (this.props.user_authenticated)\r\n                regular_filters.push(\r\n                    {'name': AnimeFilterNames.user_exclude, 'type': FilterSchemaType.standard, 'color': 'info', 'content': USER_ANIME_STATUSES_ARRAY},\r\n                );\r\n        }\r\n\r\n        let anime_filters = this.props.anime_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            anime_filters = this.props.anime_season_filters;\r\n        else if (!isEmpty(this.props.list))\r\n            anime_filters = this.props.anime_list_filters;\r\n        \r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_ANIME}\r\n                titles_loading={this.props.anime_loading}\r\n                filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n                filtered_titles={this.props.filtered_anime}\r\n                title_filters={anime_filters}\r\n                season={this.props.season}\r\n                list={this.props.list}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={orderings}\r\n                presets={this.props.anime_filter_presets}\r\n                user_display_settings={isEmpty(this.props.list) ?\r\n                    this.props.user_anime_display_settings : this.props.user_anime_list_display_settings}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_browse_filters: state.cookies.anime_browse_filters,\r\n    anime_season_filters: state.cookies.anime_season_filters,\r\n    anime_list_filters: state.cookies.anime_list_filters,\r\n    anime_filter_presets: state.users.anime_filter_presets,\r\n    user_anime_display_settings: state.users.user_anime_display_settings,\r\n    user_anime_list_display_settings: state.users.user_anime_list_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    BRANCH_MANGA,\r\n    FILTER_MANGA_INITIAL_VALUES,\r\n    MANGA_GENRES, MANGA_ORDERINGS,\r\n    MANGA_STATUSES,\r\n    MANGA_TYPES, USER_MANGA_STATUSES_ARRAY\r\n} from \"../../../../globals\";\r\nimport {FilterLabels, MangaFilterNames, FilterSchemaType} from \"../field_names\";\r\nimport {getMangaFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\nclass MangaFilters extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n        /** User List object, {pk: selected_filter:} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getMangaFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': MangaFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n            {'name': MangaFilterNames.is_downloading, 'label': FilterLabels.is_downloading, 'color': 'default'},\r\n            {'name': MangaFilterNames.cannot_download, 'label': FilterLabels.cannot_download, 'color': 'danger'},\r\n            {'name': MangaFilterNames.deleted_by_MAL, 'label': FilterLabels.deleted_by_MAL, 'color': 'danger'},\r\n            {'name': MangaFilterNames.pending_by_MAL, 'label': FilterLabels.pending_by_MAL, 'color': 'warning'},\r\n        ];\r\n        const volumes_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 36,\r\n                label: '36',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const chapters_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 30,\r\n                label: '30',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const initial = new FILTER_MANGA_INITIAL_VALUES();\r\n        const values = initial.VALUES;\r\n        let regular_filters = [\r\n            {\r\n                'name': MangaFilterNames.type,\r\n                'type': FilterSchemaType.standard,\r\n                'color': 'primary',\r\n                'content': MANGA_TYPES\r\n            },\r\n            {\r\n                'name': MangaFilterNames.status,\r\n                'type': FilterSchemaType.standard,\r\n                'color': 'primary',\r\n                'content': MANGA_STATUSES\r\n            },\r\n            {\r\n                'name': MangaFilterNames.volumes_range,\r\n                'type': FilterSchemaType.slider,\r\n                'marks': volumes_marks,\r\n                'min': values.volumes_range[0],\r\n                'max': values.volumes_range[1],\r\n                'color': 'primary',\r\n                'content': null\r\n            },\r\n            {\r\n                'name': MangaFilterNames.chapters_range,\r\n                'type': FilterSchemaType.slider,\r\n                'marks': chapters_marks,\r\n                'min': values.chapters_range[0],\r\n                'max': values.chapters_range[1],\r\n                'color': 'primary',\r\n                'content': null\r\n            },\r\n        ];\r\n\r\n        if (this.props.user_authenticated) {\r\n            regular_filters.push(\r\n                {\r\n                    'name': MangaFilterNames.user_exclude,\r\n                    'type': FilterSchemaType.standard,\r\n                    'color': 'info',\r\n                    'content': USER_MANGA_STATUSES_ARRAY\r\n                },\r\n            )\r\n        }\r\n\r\n        let wide_filters = [\r\n            {\r\n                'name': MangaFilterNames.genres,\r\n                'type': FilterSchemaType.wide,\r\n                'color': 'primary',\r\n                'content': MANGA_GENRES\r\n            },\r\n        ];\r\n\r\n        let manga_filters = this.props.manga_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            manga_filters = this.props.manga_season_filters;\r\n        else if (!isEmpty(this.props.list))\r\n            manga_filters = this.props.manga_list_filters;\r\n\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_MANGA}\r\n                titles_loading={this.props.manga_loading}\r\n                filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n                filtered_titles={this.props.filtered_manga}\r\n                title_filters={manga_filters}\r\n                season={this.props.season}\r\n                list={this.props.list}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={MANGA_ORDERINGS}\r\n                presets={this.props.manga_filter_presets}\r\n                user_display_settings={isEmpty(this.props.list) ?\r\n                    this.props.user_manga_display_settings : this.props.user_manga_list_display_settings}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_browse_filters: state.cookies.manga_browse_filters,\r\n    manga_season_filters: state.cookies.manga_season_filters,\r\n    manga_list_filters: state.cookies.manga_list_filters,\r\n    manga_filter_presets: state.users.manga_filter_presets,\r\n    user_manga_display_settings: state.users.user_manga_display_settings,\r\n    user_manga_list_display_settings: state.users.user_manga_list_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    BRANCH_EROGE,\r\n    EROGE_CENSORSHIPS,\r\n    EROGE_LANGUAGES, EROGE_ORDERINGS,\r\n    EROGE_PLATFORMS, EROGE_TAGS,\r\n    EROGE_TYPES,\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {ErogeFilterNames, FilterLabels, FilterSchemaType} from \"../field_names\";\r\nimport {getErogeFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\n\r\n\r\nclass ErogeFilters extends Component {\r\n    static propTypes = {\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getErogeFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': ErogeFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n        ];\r\n        let regular_filters = [\r\n            {'name': ErogeFilterNames.type, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_TYPES},\r\n            {'name': ErogeFilterNames.platforms, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_PLATFORMS},\r\n            {'name': ErogeFilterNames.censorship, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_CENSORSHIPS},\r\n            {'name': ErogeFilterNames.language, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_LANGUAGES},\r\n        ];\r\n        let wide_filters = [\r\n            {'name': ErogeFilterNames.tags, 'type': FilterSchemaType.wide, 'color': 'primary', 'content': EROGE_TAGS},\r\n        ];\r\n\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_EROGE}\r\n                titles_loading={this.props.eroge_loading}\r\n                filtered_titles_loaded={this.props.filtered_eroge_loaded}\r\n                filtered_titles={this.props.filtered_eroge}\r\n                title_filters={this.props.eroge_browse_filters}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={EROGE_ORDERINGS}\r\n                presets={this.props.eroge_filter_presets}\r\n                user_display_settings={this.props.user_eroge_display_settings}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    filtered_eroge_loaded: state.eroge.filtered_eroge_loaded,\r\n    filtered_eroge: state.eroge.filtered_eroge,\r\n    eroge_browse_filters: state.cookies.eroge_browse_filters,\r\n    eroge_filter_presets: state.users.eroge_filter_presets,\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ErogeFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {\r\n    BRANCH_CHARACTERS, CHARACTERS_ORDERINGS,\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\n\r\n\r\nclass CharactersFilters extends Component {\r\n    render() {\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_CHARACTERS}\r\n                titles_loading={this.props.characters_loading}\r\n                filtered_titles_loaded={this.props.filtered_characters_loaded}\r\n                filtered_titles={this.props.filtered_characters}\r\n                title_filters={this.props.characters_filters}\r\n                order_filters={CHARACTERS_ORDERINGS}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    characters_loading: state.characters.characters_loading,\r\n    filtered_characters_loaded: state.characters.filtered_characters_loaded,\r\n    filtered_characters: state.characters.filtered_characters,\r\n    characters_filters: state.cookies.characters_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharactersFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE, PEOPLE_ORDERINGS} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\n\r\n\r\nclass PeopleFilters extends Component {\r\n    render() {\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_PEOPLE}\r\n                titles_loading={this.props.people_loading}\r\n                filtered_titles_loaded={this.props.filtered_people_loaded}\r\n                filtered_titles={this.props.filtered_people}\r\n                title_filters={this.props.people_filters}\r\n                order_filters={PEOPLE_ORDERINGS}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people_loading: state.people.people_loading,\r\n    filtered_people_loaded: state.people.filtered_people_loaded,\r\n    filtered_people: state.people.filtered_people,\r\n    people_filters: state.cookies.people_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PeopleFilters)\r\n","import {\r\n    ANIME_BROWSE_TAB_NAME,\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA,\r\n    BRANCH_PEOPLE,\r\n    BROWSE_ANIME_ITEMS_PER_PAGE,\r\n    BROWSE_CHARACTERS_ITEMS_PER_PAGE, BROWSE_EROGE_ITEMS_PER_PAGE,\r\n    BROWSE_MANGA_ITEMS_PER_PAGE, BROWSE_PEOPLE_ITEMS_PER_PAGE,\r\n    CHARACTERS_BROWSE_TAB_NAME,\r\n    EROGE_BROWSE_TAB_NAME,\r\n    FILTER_ANIME_INITIAL_VALUES,\r\n    FILTER_CHARACTERS_INITIAL_VALUES,\r\n    FILTER_EROGE_INITIAL_VALUES,\r\n    FILTER_MANGA_INITIAL_VALUES,\r\n    MANGA_BROWSE_TAB_NAME,\r\n    PEOPLE_BROWSE_TAB_NAME\r\n} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {filterAnime} from \"../../actions/anime\";\r\nimport {filterManga} from \"../../actions/manga\";\r\nimport {filterCharacters} from \"../../actions/characters\";\r\nimport {filterEroge} from \"../../actions/eroge\";\r\nimport AnimeFilters from \"../layout/filters/anime/AnimeFilters\";\r\nimport React from \"react\";\r\nimport MangaFilters from \"../layout/filters/manga/MangaFilters\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../actions/users\";\r\nimport ErogeFilters from \"../layout/filters/eroge/ErogeFilters\";\r\nimport CharactersFilters from \"../layout/filters/characters/CharactersFilters\";\r\nimport {filterPeople} from \"../../actions/people\";\r\nimport PeopleFilters from \"../layout/filters/people/PeopleFilters\";\r\nimport {UserAnimeListDisplaySettingsSchema, UserMangaListDisplaySettingsSchema} from \"../../models\";\r\nimport {isEmpty} from \"../functions\";\r\n\r\n\r\nexport function getTabName(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_BROWSE_TAB_NAME;\r\n        case BRANCH_MANGA:\r\n            return MANGA_BROWSE_TAB_NAME;\r\n        case BRANCH_CHARACTERS:\r\n            return CHARACTERS_BROWSE_TAB_NAME;\r\n        case BRANCH_EROGE:\r\n            return EROGE_BROWSE_TAB_NAME;\r\n        case BRANCH_PEOPLE:\r\n            return PEOPLE_BROWSE_TAB_NAME;\r\n        default:\r\n            return 'Browse'\r\n    }\r\n}\r\n\r\n\r\nexport function getFiltersFromBranch(branch, season, list) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AnimeFilters season={season} list={list}/>;\r\n        case BRANCH_MANGA:\r\n            return <MangaFilters season={season} list={list}/>;\r\n        case BRANCH_CHARACTERS:\r\n            return <CharactersFilters/>;\r\n        case BRANCH_EROGE:\r\n            return <ErogeFilters/>;\r\n        case BRANCH_PEOPLE:\r\n            return <PeopleFilters/>;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getItemsPerPageFromBranch(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return BROWSE_ANIME_ITEMS_PER_PAGE;\r\n        case BRANCH_MANGA:\r\n            return BROWSE_MANGA_ITEMS_PER_PAGE;\r\n        case BRANCH_CHARACTERS:\r\n            return BROWSE_CHARACTERS_ITEMS_PER_PAGE;\r\n        case BRANCH_EROGE:\r\n            return BROWSE_EROGE_ITEMS_PER_PAGE;\r\n        case BRANCH_PEOPLE:\r\n            return BROWSE_PEOPLE_ITEMS_PER_PAGE;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getResetValuesFromBranch(branch) {\r\n    let values;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            values = new FILTER_ANIME_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_MANGA:\r\n            values = new FILTER_MANGA_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_CHARACTERS:\r\n            values = new FILTER_CHARACTERS_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_EROGE:\r\n            values = new FILTER_EROGE_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nexport function filterTitles(branch, page = 1, filters = undefined, season = undefined, list = undefined) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(filterAnime(page, filters, season, list));\r\n            // store.dispatch(getAnimeSearchableTitles());\r\n            store.dispatch(getLoggedInUserAnimeEntryStatuses());\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(filterManga(page, filters, season, list));\r\n            store.dispatch(getLoggedInUserMangaEntryStatuses());\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            store.dispatch(filterCharacters(page, filters));\r\n            return;\r\n        case BRANCH_PEOPLE:\r\n            store.dispatch(filterPeople(page, filters));\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(filterEroge(page, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {getTitleCoverImage} from \"../../functions\";\r\nimport {connect} from \"react-redux\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {formatTitle, UserCardButtons} from \"../cards/functions\";\r\nimport {formatTitleForRows} from \"./functions\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {CyberLink} from \"../common/common\";\r\nimport CardUserEditTitleEntry from \"../cards/CardUserEditTitleEntry\";\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\n\r\n\r\nclass TitleRow extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Object (Anime, Manga, etc.) */\r\n        title: PropTypes.object.isRequired,\r\n        /** Index number for the card */\r\n        index: PropTypes.number,\r\n        /** Status of the user entry for this title (Watching, Reading, Completed, etc.) */\r\n        user_status: PropTypes.string,\r\n        /** If the card should be in a small format (No chipsets, only title) */\r\n        mini: PropTypes.bool,\r\n        /** If the user edit/add buttons for the title should appear */\r\n        user_buttons: PropTypes.bool,\r\n        /** Custom classname for the title card container */\r\n        containerClassNames: PropTypes.string,\r\n        /** Custom classname for the title card */\r\n        classNames: PropTypes.string,\r\n        /** If true it the card will not use state to check if the cover image is\r\n         * loaded, it will directly add the img background to the card */\r\n        skip_img_preload: PropTypes.bool,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const row_title = formatTitleForRows(this.props.branch, this.props.title, this.props.user_status);\r\n        let img_url = getTitleCoverImage(row_title.cdn_cover_images, row_title.cover_images);\r\n\r\n        return <TableRow>\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                {this.props.index}\r\n            </TableCell>\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                <CyberLink to={row_title.link} classNames=\"row-image\">\r\n                    <img src={img_url}/>\r\n                </CyberLink>\r\n            </TableCell>\r\n            <TableCell component=\"th\" scope=\"row\" className=\"row-title-wrapper\">\r\n                <CyberLink to={row_title.link} classNames=\"row-title\">\r\n                    {row_title.chipset_header ? row_title.chipset_header.map(chip => (\r\n                        chip ? <Chip variant=\"default\" size=\"small\" className={`chip-${chip['color']} header-chip`}\r\n                                     label={chip['label']}/> : null\r\n                    )) : null}{' '}<span>{row_title.title}</span>\r\n                </CyberLink>\r\n            </TableCell>\r\n            {this.props.branch !== BRANCH_EROGE ? <TableCell component=\"th\" scope=\"row\" align=\"center\"\r\n                                                             className=\"row-user-buttons\">\r\n                <CardUserEditTitleEntry\r\n                    branch={this.props.branch}\r\n                    id={row_title.id}\r\n                    title={this.props.title}\r\n                    user_status={this.props.user_status}\r\n                />\r\n            </TableCell> : null}\r\n            {row_title.column_set.map((value, i) => (\r\n                <TableCell component=\"th\" scope=\"row\" align=\"center\" key={i}>\r\n                    {value ? value : <span className=\"color-gray\">---</span>}\r\n                </TableCell>\r\n            ))}\r\n        </TableRow>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_display_settings: state.users.user_anime_display_settings,  // This is here to rerender the cards\r\n    user_manga_display_settings: state.users.user_manga_display_settings,  // This is here to rerender the cards\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,  // This is here to rerender the cards\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TitleRow)\r\n","import {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA, BRANCH_PEOPLE} from \"../../../globals\";\r\nimport store from \"../../../store\";\r\nimport {formatContentDateByKnown} from \"../../functions\";\r\nimport {\r\n    Anime,\r\n    ANIME_SHORT_STATUS, Character, Eroge,\r\n    Manga,\r\n    MANGA_SHORT_STATUS, Person,\r\n    UserAnimeDisplaySettingsSchema, UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema\r\n} from \"../../../models\";\r\nimport {ANIME_DISPLAY, CHARACTERS_DISPLAY, EROGE_DISPLAY, MANGA_DISPLAY, PERSON_DISPLAY} from \"../../../urls\";\r\nimport {FilterSchema} from \"../filters/field_names\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faServer} from \"@fortawesome/free-solid-svg-icons\";\r\nimport React from \"react\";\r\nimport {getUserStatusChip} from \"../cards/functions\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\n\r\nexport function formatTitleForRows(branch, title, user_status) {\r\n    let start_date = '';\r\n    let end_date = '';\r\n    let card_title = {\r\n        id: 0,\r\n        link: '',\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: '',\r\n        chipset_header: [],\r\n        column_set: [],\r\n    };\r\n    let user_settings = {};\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            user_settings = store.getState().users.user_anime_display_settings;\r\n            start_date = formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Anime.air_end], title[Anime.air_end_known], true);\r\n\r\n            card_title.id = title[Anime.id];\r\n            card_title.link = ANIME_DISPLAY(title[Anime.id]);\r\n            card_title.cover_images = title[Anime.anime_cover_images];\r\n            card_title.cdn_cover_images = title[Anime.anime_cdn_cover_images];\r\n            card_title.title = title[Anime.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.label],\r\n                    color: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Anime.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Anime.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Anime.anime_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.type])\r\n                if (title[Anime.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.episodes])\r\n                if (title[Anime.episodes])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Anime.episodes]}ep`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.mins_per_ep])\r\n                if (title[Anime.minutes_per_episode])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${title[Anime.minutes_per_episode]}m`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.rating])\r\n                if (title[Anime.rating_short])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.rating_short]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.genres])\r\n                if (title[Anime.genres_csv]) {\r\n                    let genres = [];\r\n                    title[Anime.genres_csv].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.mal_score])\r\n                if (title[Anime.score])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserAnimeDisplaySettingsSchema.aired])\r\n                if (start_date)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${start_date}${end_date ? ' to ' + end_date : ''}`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        case BRANCH_MANGA:\r\n            user_settings = store.getState().users.user_manga_display_settings;\r\n            start_date = formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Manga.air_end], title[Manga.air_end_known], true);\r\n\r\n            card_title.id = title[Manga.id];\r\n            card_title.link = MANGA_DISPLAY(title[Manga.id]);\r\n            card_title.cover_images = title[Manga.manga_cover_images];\r\n            card_title.cdn_cover_images = title[Manga.manga_cdn_cover_images];\r\n            card_title.title = title[Manga.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.label],\r\n                    color: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Manga.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Manga.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Manga.manga_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.type])\r\n                if (title[Manga.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Manga.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.volumes])\r\n                if (title[Manga.volumes])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Manga.volumes]}v`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.chapters])\r\n                if (title[Manga.chapters])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Manga.chapters]}c`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.genres])\r\n                if (title[Manga.genres_csv]) {\r\n                    let genres = [];\r\n                    title[Manga.genres_csv].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.mal_score])\r\n                if (title[Manga.score])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Manga.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserMangaDisplaySettingsSchema.aired])\r\n                if (start_date)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${start_date}${end_date ? ' to ' + end_date : ''}`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        case BRANCH_CHARACTERS:\r\n            card_title.id = title[Character.id];\r\n            card_title.link = CHARACTERS_DISPLAY(title[Character.id]);\r\n            card_title.cover_images = title[Character.character_cover_images];\r\n            card_title.cdn_cover_images = title[Character.character_cdn_cover_images];\r\n            card_title.title = title[Character.short_name] ? title[Character.short_name] : title[Character.character_name];\r\n            return card_title;\r\n        case BRANCH_PEOPLE:\r\n            card_title.id = title[Person.id];\r\n            card_title.link = PERSON_DISPLAY(title[Person.id]);\r\n            card_title.cover_images = title[Person.person_cover_images];\r\n            card_title.cdn_cover_images = title[Person.person_cdn_cover_images];\r\n            card_title.title = title[Person.person_name];\r\n            return card_title;\r\n        case BRANCH_EROGE:\r\n            user_settings = store.getState().users.user_eroge_display_settings;\r\n            card_title.id = title[Eroge.id];\r\n            card_title.link = EROGE_DISPLAY(title[Eroge.id]);\r\n            card_title.cover_images = title[Eroge.eroge_cover_images];\r\n            card_title.title = title[Eroge.eroge_name].replace('[Android]', '').trim();\r\n            if (title[Eroge.downloaded])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.type])\r\n                if (title[Eroge.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.censorship])\r\n                if (title[Eroge.censorship].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.censorship]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.language])\r\n                if (title[Eroge.language].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.language]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.platforms])\r\n                if (title[Eroge.platforms].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.platforms]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.tags])\r\n                if (title[Eroge.tags]) {\r\n                    let genres = [];\r\n                    title[Eroge.tags].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (user_settings[UserErogeDisplaySettingsSchema.hg_score])\r\n                if (title[Eroge.rating])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Eroge.rating]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        default:\r\n            return card_title\r\n    }\r\n}\r\n","import {\r\n    ApiResult,\r\n    UserAnimeDisplaySettingsSchema,\r\n    UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema\r\n} from \"../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../layout/cards/TitleCard\";\r\nimport {getTitleCoverImage, isEmpty} from \"../functions\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faImage} from \"@fortawesome/free-solid-svg-icons\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TitleRow from \"../layout/rows/TitleRow\";\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../../globals\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.gridlist_cols\r\n * @param props.filtered_titles\r\n * @param props.branch\r\n * @param props.current_page\r\n * @param props.items_per_page\r\n * @param props.user_entry_statuses\r\n * @returns {JSX.Element}\r\n */\r\nexport function BrowseCardsView(props) {\r\n    return <GridList className=\"browse-cards-view\" cellHeight={400} cols={props.gridlist_cols} style={{margin: '0 0 10px 0'}}>\r\n        {props.filtered_titles[ApiResult.results].map((title, i) => (\r\n            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                <GridListTile cols={1}>\r\n                    <TitleCard\r\n                        branch={props.branch}\r\n                        title={title}\r\n                        user_buttons={true}\r\n                        index={i + ((props.current_page * props.items_per_page) - (props.items_per_page - 1))}\r\n                        user_status={!isEmpty(props.user_entry_statuses) ?\r\n                            props.user_entry_statuses[`${title['id']}`] : null}\r\n                    />\r\n                </GridListTile>\r\n            </Grow>\r\n        ))}\r\n    </GridList>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.filtered_titles\r\n * @param props.branch\r\n * @param props.current_page\r\n * @param props.items_per_page\r\n * @param props.user_entry_statuses\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BrowseTableView(props) {\r\n    return <TableContainer className=\"browse-table-view\">\r\n        <Table aria-label=\"user list table\">\r\n            <BrowseTableHead branch={props.branch} user_display_settings={props.user_display_settings}/>\r\n            <TableBody>\r\n                {props.filtered_titles[ApiResult.results].map((title, i) => (\r\n                    <TitleRow\r\n                        key={i}\r\n                        branch={props.branch}\r\n                        title={title}\r\n                        user_buttons={true}\r\n                        index={i + ((props.current_page * props.items_per_page) - (props.items_per_page - 1))}\r\n                        user_status={!isEmpty(props.user_entry_statuses) ?\r\n                            props.user_entry_statuses[`${title['id']}`] : null}\r\n                    />\r\n                ))}\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch\r\n * @param props.user_display_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BrowseTableHead(props) {\r\n    switch (props.branch) {\r\n        case BRANCH_ANIME:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faEdit}/></TableCell>\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.type] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Type</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.episodes] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Episodes</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.mins_per_ep] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Min per ep</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.rating] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Rating</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.genres] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Genres</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.mal_score] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.user_display_settings[UserAnimeDisplaySettingsSchema.aired] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Aired</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        case BRANCH_MANGA:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faEdit}/></TableCell>\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.type] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Type</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.volumes] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Volumes</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.chapters] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Chapters</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.genres] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Genres</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.mal_score] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.user_display_settings[UserMangaDisplaySettingsSchema.aired] ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Published</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        case BRANCH_EROGE:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    <TableCell className=\"color-gray\" align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.type] ?\r\n                        <TableCell align=\"center\">Type</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.censorship] ?\r\n                        <TableCell align=\"center\">Censorship</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.language] ?\r\n                        <TableCell align=\"center\">Language</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.platforms] ?\r\n                        <TableCell align=\"center\">Platform</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.tags] ?\r\n                        <TableCell align=\"center\">Tags</TableCell> : null}\r\n                    {props.user_display_settings[UserErogeDisplaySettingsSchema.hg_score] ?\r\n                        <TableCell align=\"center\">Score</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        default:\r\n            return null\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {\r\n    ApiResult,\r\n    UserAnimeDisplaySettingsSchema,\r\n    UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema\r\n} from \"../../models\";\r\nimport {filterTitles, getFiltersFromBranch, getItemsPerPageFromBranch, getTabName} from \"./functions\";\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {playClickSound, playExpand3Sound} from \"../layout/sounds\";\r\nimport {getBrowseGridListCols, isEmpty} from \"../functions\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport GoToPageDialog from \"../layout/pagination/goToPageDialog\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../../globals\";\r\nimport {BrowseCardsView, BrowseTableView} from \"./utils\";\r\n\r\nimport '../../assets/css/browse.css'\r\nimport UserDisplaySettingsDialog from \"../layout/filters/UserBrowseDisplaySettings\";\r\n\r\n\r\nfunction checkForCardsDisplay(branch, settings) {\r\n    if (branch === BRANCH_ANIME)\r\n        return settings[UserAnimeDisplaySettingsSchema.cards];\r\n    else if (branch === BRANCH_MANGA)\r\n        return settings[UserMangaDisplaySettingsSchema.cards];\r\n    else if (branch === BRANCH_EROGE)\r\n        return settings[UserErogeDisplaySettingsSchema.cards];\r\n    return true\r\n}\r\n\r\n\r\nclass Browse extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Redux prop of user_entry_statuses */\r\n        user_entry_statuses: PropTypes.object,\r\n        /** Redux prop of title_filters */\r\n        title_filters: PropTypes.object,\r\n        /** Selected season */\r\n        season: PropTypes.object,\r\n        /** User settings for the displaying of the cards/table */\r\n        user_display_settings: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            items_per_page: getItemsPerPageFromBranch(this.props.branch),\r\n            page_dialog_open: false,\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = getTabName(this.props.branch);\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        filterTitles(this.props.branch, 1, this.props.title_filters, this.props.season);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.titles_loading && !this.props.titles_loading) {\r\n            window.scrollTo(0, 0);\r\n            playExpand3Sound();\r\n        }\r\n\r\n        this.updateCurrentPage(prevState);\r\n\r\n        if (this.props.season && prevProps.season.season !== this.props.season.season)\r\n            filterTitles(this.props.branch, 1, this.props.title_filters, this.props.season)\r\n    }\r\n\r\n    updateCurrentPage(prevState) {\r\n        let page = this.state.current_page;\r\n        try {\r\n            page = this.props.filtered_titles[ApiResult.next].split('page=');\r\n            page = parseInt(page[page.length - 1]) - 1;\r\n        } catch (e) {\r\n            page = Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page);\r\n        }\r\n\r\n        if (page && prevState.current_page !== page) {\r\n            this.setState({current_page: page})\r\n        }\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            filterTitles(this.props.branch, page, this.props.title_filters, this.props.season);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <CyberNavbar/>\r\n            <div id=\"Browse-Titles\">\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        {getFiltersFromBranch(this.props.branch, this.props.season)}\r\n                        {!isEmpty(this.props.user_display_settings) ?\r\n                            <UserDisplaySettingsDialog\r\n                                branch={this.props.branch}\r\n                                user_display_settings={this.props.user_display_settings}\r\n                                list={!isEmpty(this.props.list)}\r\n                            /> : null}\r\n                        {this.props.filtered_titles_loaded ? <>\r\n                            {checkForCardsDisplay(this.props.branch, this.props.user_display_settings) ?\r\n                                <BrowseCardsView\r\n                                    branch={this.props.branch}\r\n                                    items_per_page={this.state.items_per_page}\r\n                                    current_page={this.state.current_page}\r\n                                    user_entry_statuses={this.props.user_entry_statuses}\r\n                                    filtered_titles={this.props.filtered_titles}\r\n                                    gridlist_cols={this.state.gridlist_cols}\r\n                                /> :\r\n                                <BrowseTableView\r\n                                    branch={this.props.branch}\r\n                                    items_per_page={this.state.items_per_page}\r\n                                    current_page={this.state.current_page}\r\n                                    user_entry_statuses={this.props.user_entry_statuses}\r\n                                    filtered_titles={this.props.filtered_titles}\r\n                                    user_display_settings={this.props.user_display_settings}\r\n                                />\r\n                            }\r\n                            <div className=\"pagination\">\r\n                                <Pagination\r\n                                    count={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                    color=\"primary\"\r\n                                    siblingCount={3}\r\n                                    page={this.state.current_page}\r\n                                    onChange={(type, page) => {\r\n                                        playClickSound();\r\n                                        if (page !== this.state.current_page)\r\n                                            this.goToPage(page);\r\n                                        else\r\n                                            this.setState({page_dialog_open: true})\r\n                                    }}\r\n                                />\r\n                                <GoToPageDialog\r\n                                    open={this.state.page_dialog_open}\r\n                                    current_page={this.state.current_page}\r\n                                    total_pages={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                    goToPage={this.goToPage}\r\n                                    onClose={this.closePageDialog}/>\r\n                            </div>\r\n                        </> : this.props.titles_loading ?\r\n                            <Loading text={`${this.props.branch} Loading`} offset={200}/> : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <CyberFooter/>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_display_settings: state.users.user_anime_display_settings,  // This is here to rerender the cards\r\n    user_manga_display_settings: state.users.user_manga_display_settings,  // This is here to rerender the cards\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,  // This is here to rerender the cards\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Browse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport PropTypes from \"prop-types\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass AnimeBrowse extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        let anime_filters = this.props.anime_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            anime_filters = this.props.anime_season_filters;\r\n        return <Browse\r\n            branch={BRANCH_ANIME}\r\n            titles_loading={this.props.anime_loading}\r\n            filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n            filtered_titles={this.props.filtered_anime}\r\n            title_filters={anime_filters}\r\n            user_entry_statuses={this.props.user_anime_entry_statuses}\r\n            season={this.props.season}\r\n            user_display_settings={this.props.user_anime_display_settings}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_browse_filters: state.cookies.anime_browse_filters,\r\n    anime_season_filters: state.cookies.anime_season_filters,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_anime_display_settings: state.users.user_anime_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeBrowse)\r\n","import LazyHero from \"react-lazy-hero\";\r\nimport React, {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {LOGIN} from \"../../urls\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport Loading from \"../layout/common/Loading\";\r\n\r\n\r\nexport function NonAuthIndexHero() {\r\n    return <LazyHero\r\n        imageSrc={'images/neo-tokyo-1.jpg'}\r\n        minHeight={'100vh'}\r\n        opacity={0}\r\n        transitionDuration={200}\r\n        color={'transparent'}>\r\n        <div className=\"welcome-img-container\">\r\n            <div className=\"title-container\">\r\n                <h5>welcome to</h5>\r\n                <h1>Cyber-Genesis</h1>\r\n            </div>\r\n        </div>\r\n    </LazyHero>\r\n}\r\n\r\n\r\nexport function AuthIndexHero() {\r\n    return <div className=\"logged-out-welcome-container\">\r\n        <video autoPlay={true} muted={true} loop={true} id=\"Index-Video\">\r\n            <source src=\"images/neo-city.mp4\" type=\"video/mp4\"/>\r\n        </video>\r\n\r\n        <div className=\"welcome-img-container\">\r\n            <div className=\"title-container\">\r\n                <h5>welcome to</h5>\r\n                <h1>Cyber-Genesis</h1>\r\n            </div>\r\n        </div>\r\n        <div className=\"home-login-link-container\">\r\n            <Link to={LOGIN} className=\"color-blue\">Login</Link>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {Parallax} from 'react-parallax';\r\n\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {AuthIndexHero, NonAuthIndexHero} from \"./snippets\"\r\n\r\nimport '../../assets/css/home.css';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {ADMIN, HOME, REQUIEM} from \"../../urls\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\nimport {LoadGifs} from \"../layout/common/common\";\r\n\r\n\r\nclass Index extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            img_1_loaded: false,\r\n            img_2_loaded: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber-Space';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    // noinspection FunctionWithMoreThanThreeNegationsJS\r\n    render() {\r\n        // noinspection HtmlUnknownTarget\r\n        return (\r\n            <div id=\"Index\">\r\n                {this.props.user_authenticated ?\r\n                    <>\r\n                        <CyberNavbar/>\r\n                        <NonAuthIndexHero/>\r\n                        <Grid container>\r\n                            <Grid item xs={12} className=\"project-about\">\r\n                                <div className=\"project-about-wrapper\">\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-2-lq.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={this.state.img_1_loaded ? 'fade-in' : ''}\r\n                                    >\r\n                                        <img src={'images/neo-tokyo-2-lq.jpg'} className=\"lazy-loaded-img\"\r\n                                             alt=\"loader-img\"\r\n                                             onLoad={() => {\r\n                                                 this.setState({img_1_loaded: true})\r\n                                             }}/>\r\n                                        <div className=\"img-content-container\">\r\n                                            <img src=\"images/cyber-genesis-logo.png\" alt={'cg-logo'}/>\r\n                                            <div className=\"about-container\">\r\n                                                <span className=\"color-blue\">project:</span>&nbsp;\r\n                                                <h1>Cyber-Genesis</h1>\r\n                                                <p><Link to={HOME}><i>Cyber-Genesis</i></Link> is a platform for Asian\r\n                                                    culture mainly <i>Japanese</i> animated content.</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-3-lq.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={this.state.img_2_loaded ? 'fade-in' : ''}\r\n                                    >\r\n                                        <img src={'images/neo-tokyo-3-lq.jpg'} className=\"lazy-loaded-img\"\r\n                                             alt=\"loader-img\"\r\n                                             onLoad={() => {\r\n                                                 this.setState({img_2_loaded: true})\r\n                                             }}/>\r\n                                        <div className=\"img-content-container text-right\">\r\n                                            <img className=\"cyber-req-logo-top\"\r\n                                                 src=\"images/cyber-requiem-logo-magenta.png\"\r\n                                                 alt={'cg-logo'}/>\r\n                                            <div className=\"about-container\">\r\n                                                <span>project:</span>&nbsp;\r\n                                                <h1>Cyber-Requiem</h1>\r\n                                                <p><Link to={REQUIEM}><i>\r\n                                                    Cyber-Requiem</i></Link> is a system designed to keep <i>\r\n                                                    Cyber-Genesis</i> up to date by crawling the web for relative\r\n                                                    information and downloading multimedia.</p>\r\n                                            </div>\r\n                                            <img className=\"cyber-req-logo-bottom\"\r\n                                                 src=\"images/cyber-requiem-logo-magenta.png\"\r\n                                                 alt={'cg-logo'}/>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-1.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={'fade-in'}\r\n                                    >\r\n                                        <div className=\"img-content-container\">\r\n                                            <img\r\n                                                src=\"images/cyber-administration-logo-cyan.png\"\r\n                                                alt={'ca-logo'}/>\r\n                                            <div className=\"about-container margin-left-20\">\r\n                                                <span>project:</span>&nbsp;\r\n                                                <h1>Cyber-Administration</h1>\r\n                                                <p><a\r\n                                                    href={ADMIN}><i>Cyber-Administration</i></a> is a software\r\n                                                    for user interaction\r\n                                                    with <i>Cyber-Genesis</i> and <i>Cyber-Requiem</i>.\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <CyberFooter margin={false}/>\r\n                    </> :\r\n                    <AuthIndexHero/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Index)\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faCircle, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {Profile, User, UserList} from \"../../../models\";\r\nimport {faCalendarAlt} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\nimport {USER_ANIME_STATISTICS} from \"../../../urls\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Doughnut} from \"react-chartjs-2\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport store from \"../../../store\";\r\n\r\nfunction getData(pie_data) {\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < pie_data.length; x++) {\r\n        stat_data.push(pie_data[x].stat);\r\n        labels.push(pie_data[x].label);\r\n    }\r\n\r\n    return  {\r\n        labels: labels,\r\n        legend: {\r\n            display: false,\r\n        },\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.4)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.4)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.5)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.2)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.4)',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.8)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.8)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.8)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.8)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.8)',\r\n            ],\r\n            borderColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.3)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.3)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.3)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.1)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.3)',\r\n            ],\r\n            hoverBorderColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 1)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 1)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 1)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 1)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 1)',\r\n            ],\r\n            // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n            // hoverBorderColor: '#156bb7',\r\n            borderWidth: 0\r\n        }]\r\n    };\r\n}\r\n\r\n\r\nexport function AnimeSimpleChartStats(props) {\r\n    const {style} = props;\r\n    const user_list = useSelector(state => state.users.user_list);\r\n    if (isEmpty(user_list))\r\n        return null;\r\n    let pie_data = [\r\n        {label: 'Watching', stat: user_list[UserList.anime_watching], color: '', hoverColor: ''},\r\n        {label: 'Completed', stat: user_list[UserList.anime_completed], color: '', hoverColor: ''},\r\n        {label: 'On Hold', stat: user_list[UserList.anime_on_hold], color: '', hoverColor: ''},\r\n        {label: 'Dropped', stat: user_list[UserList.anime_dropped], color: '', hoverColor: ''},\r\n        {label: 'Planned', stat: user_list[UserList.anime_plan_to_watch], color: '', hoverColor: ''},\r\n    ];\r\n    const data = getData(pie_data);\r\n    const visited_user = store.getState().auth.visited_user;\r\n\r\n    return <div style={style} className=\"User-List-Stats-Container\">\r\n        <h2>Anime</h2>\r\n        <div className=\"pie-wrapper\">\r\n            <Doughnut height={100} width={100} data={data} options={{ legend: false}}/>\r\n        </div>\r\n        <div className=\"chip-wrapper\">\r\n            <div className=\"stat-chip\">\r\n                <Chip className=\"border-info color-info\"\r\n                      variant=\"outlined\"\r\n                      label={<>\r\n                          <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>\r\n                          <span>Watching<CountUp end={user_list[UserList.anime_watching]}/></span>\r\n                      </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-primary color-primary\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>\r\n                        <span>Completed<CountUp end={user_list[UserList.anime_completed]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-warning color-warning\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>\r\n                        <span>On Hold<CountUp end={user_list[UserList.anime_on_hold]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-danger color-danger\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>\r\n                        <span>Dropped<CountUp end={user_list[UserList.anime_dropped]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-gray color-gray\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>\r\n                        <span>Planned<CountUp end={user_list[UserList.anime_plan_to_watch]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-white color-white\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>\r\n                        <span>Total<CountUp end={user_list[UserList.anime_total_entries]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <CyberLink to={USER_ANIME_STATISTICS(visited_user[User.id])}>\r\n                    <Button variant=\"outlined\" className=\"btn-info\">Statistics</Button>\r\n                </CyberLink>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport function MangaSimpleChartStats(props) {\r\n    const {style} = props;\r\n    const user_list = useSelector(state => state.users.user_list);\r\n    if (isEmpty(user_list))\r\n        return null;\r\n    let pie_data = [\r\n        {label: 'Reading', stat: user_list[UserList.manga_reading], color: '', hoverColor: ''},\r\n        {label: 'Completed', stat: user_list[UserList.manga_completed], color: '', hoverColor: ''},\r\n        {label: 'On Hold', stat: user_list[UserList.manga_on_hold], color: '', hoverColor: ''},\r\n        {label: 'Dropped', stat: user_list[UserList.manga_dropped], color: '', hoverColor: ''},\r\n        {label: 'Planned', stat: user_list[UserList.manga_plan_to_read], color: '', hoverColor: ''},\r\n    ];\r\n    const data = getData(pie_data);\r\n\r\n    return <div style={style} className=\"User-List-Stats-Container\">\r\n        <h2>Manga</h2>\r\n        <div className=\"pie-wrapper\">\r\n            <Doughnut height={100} width={100} data={data} options={{ legend: false}}/>\r\n        </div>\r\n        <div className=\"chip-wrapper\">\r\n            <div className=\"stat-chip\">\r\n                <Chip className=\"border-info color-info\"\r\n                      variant=\"outlined\"\r\n                      label={<>\r\n                          <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>\r\n                          <span>Reading<CountUp end={user_list[UserList.manga_reading]}/></span>\r\n                      </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-primary color-primary\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>\r\n                        <span>Completed<CountUp end={user_list[UserList.manga_completed]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-warning color-warning\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>\r\n                        <span>On Hold<CountUp end={user_list[UserList.manga_on_hold]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-danger color-danger\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>\r\n                        <span>Dropped<CountUp end={user_list[UserList.manga_dropped]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-gray color-gray\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>\r\n                        <span>Planned<CountUp end={user_list[UserList.manga_plan_to_read]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-white color-white\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>\r\n                        <span>Total<CountUp end={user_list[UserList.manga_total_entries]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            {/*<div className=\"stat-chip\">*/}\r\n            {/*    <CyberLink to={USER_ANIME_STATISTICS(this.props.visited_user[User.id])}>*/}\r\n            {/*        <Button variant=\"outlined\" className=\"btn-info\">Statistics</Button>*/}\r\n            {/*    </CyberLink>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    </div>\r\n}","import {Anime, Character, Manga, Profile, User} from \"../../../models\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_MANGA, BRANCH_PEOPLE} from \"../../../globals\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nfunction getTitlesFromBranch(branch, visited_user) {\r\n    let titles = [];\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            titles = visited_user[User.profile][Profile.favorite_anime];\r\n            break;\r\n        case BRANCH_MANGA:\r\n            titles = visited_user[User.profile][Profile.favorite_manga];\r\n            break;\r\n        case BRANCH_CHARACTERS:\r\n            titles = visited_user[User.profile][Profile.favorite_characters];\r\n            break;\r\n        case BRANCH_PEOPLE:\r\n            titles = visited_user[User.profile][Profile.favorite_people];\r\n            break;\r\n        default:\r\n            return null\r\n    }\r\n    return titles\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {String} props.branch\r\n * @param {Object} props.style\r\n * @param {Number} props.limit\r\n * @param {Boolean} props.mini\r\n * @returns {JSX.Element|null}\r\n * @constructor\r\n */\r\nexport function FavoriteTitles(props) {\r\n    const {branch, style, limit, mini} = props;\r\n    const visited_user = useSelector(state => state.auth.visited_user);\r\n    let parsed = parseInt(limit);\r\n    parsed = isNaN(parsed) ? 100 : parsed;\r\n    if (isEmpty(visited_user))\r\n        return null;\r\n    const titles = getTitlesFromBranch(branch, visited_user);\r\n    return <div style={style} className=\"Quoted-Favorites-Container\">\r\n        {titles.length === 0 ? <p>You haven't added any favorite {branch} yet.</p> : titles.map((title, i) => (\r\n            i < parsed ? <div key={title['id']} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n                <TitleCard branch={branch} title={title} mini={mini}/>\r\n            </div> : null\r\n        ))}\r\n    </div>\r\n}\r\n\r\n// export function FavoriteAnime(props) {\r\n//     const {branch, style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_anime].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Anime yet.</p> : visited_user[User.profile][Profile.favorite_anime].map((title, i) => (\r\n//             i < parsed ? <div key={title[Anime.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_ANIME} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoriteManga(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_manga].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Manga yet.</p> : visited_user[User.profile][Profile.favorite_manga].map((title, i) => (\r\n//             i < parsed ? <div key={title[Manga.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_MANGA} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoriteCharacters(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_characters].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Characters yet.</p> : visited_user[User.profile][Profile.favorite_characters].map((title, i) => (\r\n//             i < parsed ? <div key={title[Character.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_CHARACTERS} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoritePeople(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_people].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite People yet.</p> : visited_user[User.profile][Profile.favorite_people].map((title, i) => (\r\n//             i < parsed ? <div key={title[Character.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_PEOPLE} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n","/*\nCopyright (C) 2011 Patrick Gillespie, http://patorjk.com/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/*\n    Extendible BBCode Parser v1.0.0\n    By Patrick Gillespie (patorjk@gmail.com)\n    Website: http://patorjk.com/\n\n    This module allows you to parse BBCode and to extend to the mark-up language\n    to add in your own tags.\n*/\n\nimport ReactHtmlParser from \"react-html-parser\";\nimport React from \"react\";\nimport {AnimeSimpleChartStats, MangaSimpleChartStats} from \"../../statistics/statistics_snippets\";\nimport {isEmpty} from \"../../../functions\";\nimport {FavoriteTitles} from \"../../statistics/favorites_snippets\";\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_MANGA, BRANCH_PEOPLE} from \"../../../../globals\";\n\nvar XBBCODE = (function() {\n    \"use strict\";\n\n    // -----------------------------------------------------------------------------\n    // Set up private variables\n    // -----------------------------------------------------------------------------\n\n    var me = {},\n        urlPattern = /^(?:https?|file|c):(?:\\/{1,3}|\\\\{1})[-a-zA-Z0-9:;,@#%&()~_?\\+=\\/\\\\\\.]*$/,\n        colorNamePattern = /^(?:aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$/,\n        colorCodePattern = /^#?[a-fA-F0-9]{6}$/,\n        emailPattern = /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/,\n        fontFacePattern = /^([a-z][a-z0-9_]+|\"[a-z][a-z0-9_\\s]+\")$/i,\n        tags,\n        tagList,\n        tagsNoParseList = [],\n        bbRegExp,\n        pbbRegExp,\n        pbbRegExp2,\n        openTags,\n        closeTags;\n\n    /* -----------------------------------------------------------------------------\n     * tags\n     * This object contains a list of tags that your code will be able to understand.\n     * Each tag object has the following properties:\n     *\n     *   openTag - A function that takes in the tag's parameters (if any) and its\n     *             contents, and returns what its HTML open tag should be.\n     *             Example: [color=red]test[/color] would take in \"=red\" as a\n     *             parameter input, and \"test\" as a content input.\n     *             It should be noted that any BBCode inside of \"content\" will have\n     *             been processed by the time it enter the openTag function.\n     *\n     *   closeTag - A function that takes in the tag's parameters (if any) and its\n     *              contents, and returns what its HTML close tag should be.\n     *\n     *   displayContent - Defaults to true. If false, the content for the tag will\n     *                    not be displayed. This is useful for tags like IMG where\n     *                    its contents are actually a parameter input.\n     *\n     *   restrictChildrenTo - A list of BBCode tags which are allowed to be nested\n     *                        within this BBCode tag. If this property is omitted,\n     *                        any BBCode tag may be nested within the tag.\n     *\n     *   restrictParentsTo - A list of BBCode tags which are allowed to be parents of\n     *                       this BBCode tag. If this property is omitted, any BBCode\n     *                       tag may be a parent of the tag.\n     *\n     *   noParse - true or false. If true, none of the content WITHIN this tag will be\n     *             parsed by the XBBCode parser.\n     *\n     *\n     *\n     * LIMITIONS on adding NEW TAGS:\n     *  - Tag names should be alphanumeric (including underscores) and all tags should have an opening tag\n     *    and a closing tag.\n     *    The [*] tag is an exception because it was already a standard\n     *    bbcode tag. Technecially tags don't *have* to be alphanumeric, but since\n     *    regular expressions are used to parse the text, if you use a non-alphanumeric\n     *    tag names, just make sure the tag name gets escaped properly (if needed).\n     * --------------------------------------------------------------------------- */\n\n    tags = {\n        \"b\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-b\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        /*\n            This tag does nothing and is here mostly to be used as a classification for\n            the bbcode input when evaluating parent-child tag relationships\n        */\n        \"bbcode\": {\n            openTag: function(params,content) {\n                return '';\n            },\n            closeTag: function(params,content) {\n                return '';\n            }\n        },\n        \"center\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-center\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"code\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-code\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            },\n            noParse: true\n        },\n        \"color\": {\n            openTag: function(params,content) {\n                params = params || '';\n                \n                var colorCode = (params.substr(1)).toLowerCase() || \"black\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"black\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n                return '<span style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"email\": {\n            openTag: function(params,content) {\n\n                var myEmail;\n\n                if (!params) {\n                    myEmail = content.replace(/<.*?>/g,\"\");\n                } else {\n                    myEmail = params.substr(1);\n                }\n\n                emailPattern.lastIndex = 0;\n                if ( !emailPattern.test( myEmail ) ) {\n                    return '<a>';\n                }\n\n                return '<a href=\"mailto:' + myEmail + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</a>';\n            }\n        },\n        \"face\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var faceCode = params.substr(1) || \"inherit\";\n                fontFacePattern.lastIndex = 0;\n                if ( !fontFacePattern.test( faceCode ) ) {\n                        faceCode = \"inherit\";\n                }\n                return '<span style=\"font-family:' + faceCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n\n        \"font\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var faceCode = params.substr(1) || \"inherit\";\n                fontFacePattern.lastIndex = 0;\n                if ( !fontFacePattern.test( faceCode ) ) {\n                        faceCode = \"inherit\";\n                }\n                return '<span style=\"font-family:' + faceCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"i\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-i\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"img\": {\n            openTag: function(params,content) {\n\n                var myUrl = content;\n\n                urlPattern.lastIndex = 0;\n                if ( !urlPattern.test( myUrl ) ) {\n                    myUrl = \"\";\n                }\n\n                return '<img src=\"' + myUrl + '\" />';\n            },\n            closeTag: function(params,content) {\n                return '';\n            },\n            displayContent: false\n        },\n        \"justify\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-justify\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"large\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var colorCode = params.substr(1) || \"inherit\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"inherit\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n\n                return '<span class=\"xbbcode-size-36\" style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"left\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-left\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"li\": {\n            openTag: function(params,content) {\n                return \"<li>\";\n            },\n            closeTag: function(params,content) {\n                return \"</li>\";\n            },\n            restrictParentsTo: [\"list\",\"ul\",\"ol\"]\n        },\n        \"list\": {\n            openTag: function(params,content) {\n                return '<ul>';\n            },\n            closeTag: function(params,content) {\n                return '</ul>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"noparse\": {\n            openTag: function(params,content) {\n                return '';\n            },\n            closeTag: function(params,content) {\n                return '';\n            },\n            noParse: true\n        },\n        \"ol\": {\n            openTag: function(params,content) {\n                return '<ol>';\n            },\n            closeTag: function(params,content) {\n                return '</ol>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"php\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-code\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            },\n            noParse: true\n        },\n        \"quote\": {\n            openTag: function(params,content) {\n                return '<blockquote class=\"xbbcode-blockquote\">';\n            },\n            closeTag: function(params,content) {\n                return '</blockquote>';\n            }\n        },\n        \"right\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-right\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"s\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-s\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"size\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var mySize = parseInt(params.substr(1),10) || 0;\n                if (mySize < 4 || mySize > 40) {\n                    mySize = 14;\n                }\n\n                return '<span class=\"xbbcode-size-' + mySize + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"small\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var colorCode = params.substr(1) || \"inherit\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"inherit\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n                return '<span class=\"xbbcode-size-10\" style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"sub\": {\n            openTag: function(params,content) {\n                return '<sub>';\n            },\n            closeTag: function(params,content) {\n                return '</sub>';\n            }\n        },\n        \"sup\": {\n            openTag: function(params,content) {\n                return '<sup>';\n            },\n            closeTag: function(params,content) {\n                return '</sup>';\n            }\n        },\n\n        \"table\": {\n            openTag: function(params,content) {\n                return '<table class=\"xbbcode-table\">';\n            },\n            closeTag: function(params,content) {\n                return '</table>';\n            },\n            restrictChildrenTo: [\"tbody\",\"thead\", \"tfoot\", \"tr\"]\n        },\n        \"tbody\": {\n            openTag: function(params,content) {\n                return '<tbody>';\n            },\n            closeTag: function(params,content) {\n                return '</tbody>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"tfoot\": {\n            openTag: function(params,content) {\n                return '<tfoot>';\n            },\n            closeTag: function(params,content) {\n                return '</tfoot>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"thead\": {\n            openTag: function(params,content) {\n                return '<thead class=\"xbbcode-thead\">';\n            },\n            closeTag: function(params,content) {\n                return '</thead>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"td\": {\n            openTag: function(params,content) {\n                return '<td class=\"xbbcode-td\">';\n            },\n            closeTag: function(params,content) {\n                return '</td>';\n            },\n            restrictParentsTo: [\"tr\"]\n        },\n        \"th\": {\n            openTag: function(params,content) {\n                return '<th class=\"xbbcode-th\">';\n            },\n            closeTag: function(params,content) {\n                return '</th>';\n            },\n            restrictParentsTo: [\"tr\"]\n        },\n        \"tr\": {\n            openTag: function(params,content) {\n                return '<tr class=\"xbbcode-tr\">';\n            },\n            closeTag: function(params,content) {\n                return '</tr>';\n            },\n            restrictChildrenTo: [\"td\",\"th\"],\n            restrictParentsTo: [\"table\",\"tbody\",\"tfoot\",\"thead\"]\n        },\n        \"u\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-u\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"ul\": {\n            openTag: function(params,content) {\n                return '<ul>';\n            },\n            closeTag: function(params,content) {\n                return '</ul>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"url\": {\n            openTag: function(params,content) {\n\n                var myUrl;\n\n                if (!params) {\n                    myUrl = content.replace(/<.*?>/g,\"\");\n                } else {\n                    myUrl = params.substr(1);\n                }\n\n                urlPattern.lastIndex = 0;\n                if ( !urlPattern.test( myUrl ) ) {\n                    myUrl = \"#\";\n                }\n\n                return '<a href=\"' + myUrl + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</a>';\n            }\n        },\n        /*\n            The [*] tag is special since the user does not define a closing [/*] tag when writing their bbcode.\n            Instead this module parses the code and adds the closing [/*] tag in for them. None of the tags you\n            add will act like this and this tag is an exception to the others.\n        */\n        \"*\": {\n            openTag: function(params,content) {\n                return \"<li>\";\n            },\n            closeTag: function(params,content) {\n                return \"</li>\";\n            },\n            restrictParentsTo: [\"list\",\"ul\",\"ol\"]\n        }\n    };\n\n    // create tag list and lookup fields\n    function initTags() {\n        tagList = [];\n        var prop,\n            ii,\n            len;\n        for (prop in tags) {\n            if (tags.hasOwnProperty(prop)) {\n                if (prop === \"*\") {\n                    tagList.push(\"\\\\\" + prop);\n                } else {\n                    tagList.push(prop);\n                    if ( tags[prop].noParse ) {\n                        tagsNoParseList.push(prop);\n                    }\n                }\n\n                tags[prop].validChildLookup = {};\n                tags[prop].validParentLookup = {};\n                tags[prop].restrictParentsTo = tags[prop].restrictParentsTo || [];\n                tags[prop].restrictChildrenTo = tags[prop].restrictChildrenTo || [];\n\n                len = tags[prop].restrictChildrenTo.length;\n                for (ii = 0; ii < len; ii++) {\n                    tags[prop].validChildLookup[ tags[prop].restrictChildrenTo[ii] ] = true;\n                }\n                len = tags[prop].restrictParentsTo.length;\n                for (ii = 0; ii < len; ii++) {\n                    tags[prop].validParentLookup[ tags[prop].restrictParentsTo[ii] ] = true;\n                }\n            }\n        }\n\n        bbRegExp = new RegExp(\"<bbcl=([0-9]+) (\" + tagList.join(\"|\") + \")([ =][^>]*?)?>((?:.|[\\\\r\\\\n])*?)<bbcl=\\\\1 /\\\\2>\", \"gi\");\n        pbbRegExp = new RegExp(\"\\\\[(\" + tagList.join(\"|\") + \")([ =][^\\\\]]*?)?\\\\]([^\\\\[]*?)\\\\[/\\\\1\\\\]\", \"gi\");\n        pbbRegExp2 = new RegExp(\"\\\\[(\" + tagsNoParseList.join(\"|\") + \")([ =][^\\\\]]*?)?\\\\]([\\\\s\\\\S]*?)\\\\[/\\\\1\\\\]\", \"gi\");\n\n        // create the regex for escaping ['s that aren't apart of tags\n        (function() {\n            var closeTagList = [];\n            for (var ii = 0; ii < tagList.length; ii++) {\n                if ( tagList[ii] !== \"\\\\*\" ) { // the * tag doesn't have an offical closing tag\n                    closeTagList.push ( \"/\" + tagList[ii] );\n                }\n            }\n\n            openTags = new RegExp(\"(\\\\[)((?:\" + tagList.join(\"|\") + \")(?:[ =][^\\\\]]*?)?)(\\\\])\", \"gi\");\n            closeTags = new RegExp(\"(\\\\[)(\" + closeTagList.join(\"|\") + \")(\\\\])\", \"gi\");\n        })();\n\n    }\n    initTags();\n\n    // -----------------------------------------------------------------------------\n    // private functions\n    // -----------------------------------------------------------------------------\n\n    function checkParentChildRestrictions(parentTag, bbcode, bbcodeLevel, tagName, tagParams, tagContents, errQueue) {\n\n        errQueue = errQueue || [];\n        bbcodeLevel++;\n\n        // get a list of all of the child tags to this tag\n        var reTagNames = new RegExp(\"(<bbcl=\" + bbcodeLevel + \" )(\" + tagList.join(\"|\") + \")([ =>])\",\"gi\"),\n            reTagNamesParts = new RegExp(\"(<bbcl=\" + bbcodeLevel + \" )(\" + tagList.join(\"|\") + \")([ =>])\",\"i\"),\n            matchingTags = tagContents.match(reTagNames) || [],\n            cInfo,\n            errStr,\n            ii,\n            childTag,\n            pInfo = tags[parentTag] || {};\n\n        reTagNames.lastIndex = 0;\n\n        if (!matchingTags) {\n            tagContents = \"\";\n        }\n\n        for (ii = 0; ii < matchingTags.length; ii++) {\n            reTagNamesParts.lastIndex = 0;\n            childTag = (matchingTags[ii].match(reTagNamesParts))[2].toLowerCase();\n\n            if ( pInfo && pInfo.restrictChildrenTo && pInfo.restrictChildrenTo.length > 0 ) {\n                if ( !pInfo.validChildLookup[childTag] ) {\n                    errStr = \"The tag \\\"\" + childTag + \"\\\" is not allowed as a child of the tag \\\"\" + parentTag + \"\\\".\";\n                    errQueue.push(errStr);\n                }\n            }\n            cInfo = tags[childTag] || {};\n            if ( cInfo.restrictParentsTo.length > 0 ) {\n                if ( !cInfo.validParentLookup[parentTag] ) {\n                    errStr = \"The tag \\\"\" + parentTag + \"\\\" is not allowed as a parent of the tag \\\"\" + childTag + \"\\\".\";\n                    errQueue.push(errStr);\n                }\n            }\n\n        }\n\n        tagContents = tagContents.replace(bbRegExp, function(matchStr, bbcodeLevel, tagName, tagParams, tagContents ) {\n            errQueue = checkParentChildRestrictions(tagName.toLowerCase(), matchStr, bbcodeLevel, tagName, tagParams, tagContents, errQueue);\n            return matchStr;\n        });\n        return errQueue;\n    }\n\n    /*\n        This function updates or adds a piece of metadata to each tag called \"bbcl\" which\n        indicates how deeply nested a particular tag was in the bbcode. This property is removed\n        from the HTML code tags at the end of the processing.\n    */\n    function updateTagDepths(tagContents) {\n        tagContents = tagContents.replace(/\\<([^\\>][^\\>]*?)\\>/gi, function(matchStr, subMatchStr) {\n            var bbCodeLevel = subMatchStr.match(/^bbcl=([0-9]+) /);\n            if (bbCodeLevel === null) {\n                return \"<bbcl=0 \" + subMatchStr + \">\";\n            } else {\n                return \"<\" + subMatchStr.replace(/^(bbcl=)([0-9]+)/, function(matchStr, m1, m2) {\n                    return m1 + (parseInt(m2, 10) + 1);\n                }) + \">\";\n            }\n        });\n        return tagContents;\n    }\n\n    /*\n        This function removes the metadata added by the updateTagDepths function\n    */\n    function unprocess(tagContent) {\n        return tagContent.replace(/<bbcl=[0-9]+ \\/\\*>/gi,\"\").replace(/<bbcl=[0-9]+ /gi,\"&#91;\").replace(/>/gi,\"&#93;\");\n    }\n\n    var replaceFunct = function(matchStr, bbcodeLevel, tagName, tagParams, tagContents) {\n\n        tagName = tagName.toLowerCase();\n\n        var processedContent = tags[tagName].noParse ? unprocess(tagContents) : tagContents.replace(bbRegExp, replaceFunct),\n            openTag = tags[tagName].openTag(tagParams,processedContent),\n            closeTag = tags[tagName].closeTag(tagParams,processedContent);\n\n        if ( tags[tagName].displayContent === false) {\n            processedContent = \"\";\n        }\n\n        return openTag + processedContent + closeTag;\n    };\n\n    function parse(config) {\n        var output = config.text;\n        output = output.replace(bbRegExp, replaceFunct);\n        return output;\n    }\n\n    /*\n        The star tag [*] is special in that it does not use a closing tag. Since this parser requires that tags to have a closing\n        tag, we must pre-process the input and add in closing tags [/*] for the star tag.\n        We have a little levaridge in that we know the text we're processing wont contain the <> characters (they have been\n        changed into their HTML entity form to prevent XSS and code injection), so we can use those characters as markers to\n        help us define boundaries and figure out where to place the [/*] tags.\n    */\n    function fixStarTag(text) {\n        text = text.replace(/\\[(?!\\*[ =\\]]|list([ =][^\\]]*)?\\]|\\/list[\\]])/ig, \"<\");\n        text = text.replace(/\\[(?=list([ =][^\\]]*)?\\]|\\/list[\\]])/ig, \">\");\n\n        while (text !== (text = text.replace(/>list([ =][^\\]]*)?\\]([^>]*?)(>\\/list])/gi, function(matchStr,contents,endTag) {\n\n            var innerListTxt = matchStr;\n            while (innerListTxt !== (innerListTxt = innerListTxt.replace(/\\[\\*\\]([^\\[]*?)(\\[\\*\\]|>\\/list])/i, function(matchStr,contents,endTag) {\n                if (endTag.toLowerCase() === \">/list]\") {\n                    endTag = \"</*]</list]\";\n                } else {\n                    endTag = \"</*][*]\";\n                }\n                return \"<*]\" + contents + endTag;\n            })));\n\n            innerListTxt = innerListTxt.replace(/>/g, \"<\");\n            return innerListTxt;\n        })));\n\n        // add ['s for our tags back in\n        text = text.replace(/</g, \"[\");\n        return text;\n    }\n\n    function addBbcodeLevels(text) {\n        while ( text !== (text = text.replace(pbbRegExp, function(matchStr, tagName, tagParams, tagContents) {\n            matchStr = matchStr.replace(/\\[/g, \"<\");\n            matchStr = matchStr.replace(/\\]/g, \">\");\n            return updateTagDepths(matchStr);\n        })) );\n        return text;\n    }\n\n    // -----------------------------------------------------------------------------\n    // public functions\n    // -----------------------------------------------------------------------------\n\n    // API, Expose all available tags\n    me.tags = function() {\n        return tags;\n    };\n\n    // API\n    me.addTags = function(newtags) {\n        var tag;\n        for (tag in newtags) {\n            tags[tag] = newtags[tag];\n        }\n        initTags();\n    };\n\n    me.process = function(config) {\n\n        var ret = {html: \"\", error: false},\n            errQueue = [];\n\n        config.text = config.text.replace(/</g, \"&lt;\"); // escape HTML tag brackets\n        config.text = config.text.replace(/>/g, \"&gt;\"); // escape HTML tag brackets\n\n        config.text = config.text.replace(openTags, function(matchStr, openB, contents, closeB) {\n            return \"<\" + contents + \">\";\n        });\n        config.text = config.text.replace(closeTags, function(matchStr, openB, contents, closeB) {\n            return \"<\" + contents + \">\";\n        });\n\n        config.text = config.text.replace(/\\[/g, \"&#91;\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/\\]/g, \"&#93;\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/</g, \"[\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/>/g, \"]\"); // escape ['s that aren't apart of tags\n\n        // process tags that don't have their content parsed\n        while ( config.text !== (config.text = config.text.replace(pbbRegExp2, function(matchStr, tagName, tagParams, tagContents) {\n            tagContents = tagContents.replace(/\\[/g, \"&#91;\");\n            tagContents = tagContents.replace(/\\]/g, \"&#93;\");\n            tagParams = tagParams || \"\";\n            tagContents = tagContents || \"\";\n            return \"[\" + tagName + tagParams + \"]\" + tagContents + \"[/\" + tagName + \"]\";\n        })) );\n\n        config.text = fixStarTag(config.text); // add in closing tags for the [*] tag\n        config.text = addBbcodeLevels(config.text); // add in level metadata\n\n        errQueue = checkParentChildRestrictions(\"bbcode\", config.text, -1, \"\", \"\", config.text);\n\n        ret.html = parse(config);\n\n        if ( ret.html.indexOf(\"[\") !== -1 || ret.html.indexOf(\"]\") !== -1) {\n            errQueue.push(\"Some tags appear to be misaligned.\");\n        }\n\n        if (config.removeMisalignedTags) {\n            ret.html = ret.html.replace(/\\[.*?\\]/g,\"\");\n        }\n        if (config.addInLineBreaks) {\n            ret.html = '<div style=\"white-space:pre-wrap;\">' + ret.html + '</div>';\n        }\n\n\t\tif (!config.escapeHtml) {\n\t\t\tret.html = ret.html.replace(\"&#91;\", \"[\"); // put ['s back in\n        \tret.html = ret.html.replace(\"&#93;\", \"]\"); // put ['s back in\n\t\t}\n\n\t\tret.html = ReactHtmlParser(ret.html);\n        // console.log('parsed.html', ret.html);\n\n        for (let x = 0; x < ret.html.length; x++) {\n            // console.log('props:', ret.html[x]['props']);\n            if (ret.html[x]['props'] && ret.html[x]['props']['children'] && ret.html[x]['props']['children'].length > 0) {\n                for (let y = 0; y < ret.html[x]['props']['children'].length; y++) {\n                    // console.log('children:', ret.html[x]['props']['children'][y]);\n                    if (ret.html[x]['props']['children'][y]['props']) {\n                        let style = ret.html[x]['props']['children'][y]['props']['style'];\n                        let limit = ret.html[x]['props']['children'][y]['props']['limit'];\n                        if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'AnimeSimpleChartStats') {\n                            ret.html[x]['props']['children'][y] = <AnimeSimpleChartStats style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'MangaSimpleChartStats') {\n                            ret.html[x]['props']['children'][y] = <MangaSimpleChartStats style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteAnime') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_ANIME} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteAnimeSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_ANIME} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteManga') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_MANGA} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteMangaSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_MANGA} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteCharacters') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_CHARACTERS} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteCharactersSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_CHARACTERS} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoritePeople') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_PEOPLE} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoritePeopleSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_PEOPLE} limit={limit} mini={true} style={style}/>;\n                        }\n                    }\n                }\n            }\n        }\n\n        ret.error = errQueue.length !== 0;\n        ret.errorQueue = errQueue;\n\n        return ret;\n    };\n\n    return me;\n})();\n\nexport default XBBCODE\n\n// for node\n// if (typeof module !== \"undefined\") {\n//     module.exports = XBBCODE;\n// }\n","import '../../../../../node_modules/xbbcode-parser/xbbcode.css'\r\n// import XBBCODE from 'xbbcode-parser'\r\nimport XBBCODE from './xbbcode'\r\nimport React from \"react\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst URL_PATTERN = /^(?:https?|file|c):(?:\\/{1,3}|\\\\{1})[-a-zA-Z0-9:;,@#%&()~_?\\+=\\/\\\\\\.]*$/;\r\n// [dimg]https://i.imgur.com/qg0PysC.jpg[/dimg]\r\n\r\nfunction parseWidthHeightFromParams(params) {\r\n    let width = null;\r\n    let height = null;\r\n    let w_unit = 'px';\r\n    let h_unit = 'px';\r\n    let style = '';\r\n\r\n    if (params && params.indexOf('width=') >= 0) {\r\n        let parse_width = params.split('width=')[1];\r\n        parse_width = parse_width.split('height=')[0];\r\n        if (parse_width.indexOf('%') >= 0)\r\n            if (parse_width)\r\n                w_unit = '%';\r\n        width = parseInt(parse_width);\r\n        if (isNaN(width))\r\n            width = null\r\n    }\r\n    if (params && params.indexOf('height=') >= 0) {\r\n        let parse_height = params.split('height=')[1];\r\n        parse_height = parse_height.split('width=')[0];\r\n        if (parse_height.indexOf('%') >= 0)\r\n            h_unit = '%';\r\n        height = parseInt(parse_height);\r\n        if (isNaN(height))\r\n            height = null\r\n    }\r\n\r\n    if (width)\r\n        style = `width: ${width}${w_unit};`;\r\n    if (height)\r\n        style = `${style} height: ${height}${h_unit};`;\r\n\r\n    return style\r\n}\r\n\r\n\r\nfunction parseLimitFromParams(params) {\r\n    let limit = null;\r\n    if (params && params.indexOf('limit=') >= 0) {\r\n        let parse_limit = params.split('limit=')[1];\r\n        limit = parseInt(parse_limit);\r\n        if (isNaN(limit))\r\n            limit = null\r\n    }\r\n    return limit\r\n}\r\n\r\n\r\nconst img = {\r\n    openTag: function (params, content) {\r\n        let url = content;\r\n        URL_PATTERN.lastIndex = 0;\r\n        if (!URL_PATTERN.test(url))\r\n            url = '';\r\n        const style = parseWidthHeightFromParams(params);\r\n\r\n        if (style.length > 0)\r\n            return `<img style=\"${style}\" src=\"${url}\"/>`;\r\n        return `<img src=\"${url}\"/>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\n\r\nconst paragraph = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n\r\n        if (style.length > 0)\r\n            return `<p style=\"${style}\">`;\r\n        return `<p>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return `</p>`;\r\n    },\r\n};\r\n\r\nconst br = {\r\n    openTag: function (params, content) {\r\n        return `<br/>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst AnimeStats = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n        if (style.length > 0)\r\n            return `<span id=\"AnimeSimpleChartStats\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"AnimeSimpleChartStats\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst MangaStats = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n        if (style.length > 0)\r\n            return `<span id=\"MangaSimpleChartStats\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"MangaSimpleChartStats\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteAnime = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteAnime';\r\n        if (mini)\r\n            component = 'UserFavoriteAnimeSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteManga = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteManga';\r\n        if (mini)\r\n            component = 'UserFavoriteMangaSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\"style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteCharacters = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteCharacters';\r\n        if (mini)\r\n            component = 'UserFavoriteCharactersSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoritePeople = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoritePeople';\r\n        if (mini)\r\n            component = 'UserFavoritePeopleSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst new_tags = {\r\n    'br': br,\r\n    'p': paragraph,\r\n    'img': img,\r\n    'animestats': AnimeStats,\r\n    'mangastats': MangaStats,\r\n    'favoriteanime': FavoriteAnime,\r\n    'favoritemanga': FavoriteManga,\r\n    'favoritecharacters': FavoriteCharacters,\r\n    'favoritepeople': FavoritePeople,\r\n};\r\n\r\nXBBCODE.addTags(new_tags);\r\n\r\n\r\nexport function cyberBBCodeParser(bbcode_string) {\r\n    try {\r\n        let result = XBBCODE.process({\r\n            text: bbcode_string,\r\n            removeMisalignedTags: false,\r\n            addInLineBreaks: true\r\n        });\r\n\r\n        console.log('resul1t', result);\r\n        return result.html;\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {cyberBBCodeParser} from \"../../settings/bbcode_editor/parser\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\nimport {BBCODE_EDITOR} from \"../../../../urls\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTools} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass AboutTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleEditorButton = this.toggleEditorButton.bind(this);\r\n        this.state = {show_editor_button: false};\r\n    }\r\n\r\n    toggleEditorButton(value) {\r\n        this.setState({show_editor_button: value})\r\n    }\r\n\r\n    render() {\r\n        let background;\r\n        if (this.props.visited_user[User.profile][Profile.about_section_background_style])\r\n            background = JSON.parse(this.props.visited_user[User.profile][Profile.about_section_background_style]);\r\n\r\n        let style = null;\r\n        if (background) {\r\n            style = {\r\n                 backgroundColor: `#${background.background_color['hex']}`,\r\n                 backgroundImage: `url(\"${background.url}\")`,\r\n                 backgroundRepeat: background.repeat,\r\n                 backgroundSize: background.size,\r\n                 backgroundPosition: `${background.position_1} ${background.position_2}`,\r\n            };\r\n            if (background.position_x)\r\n                style.backgroundPositionX = `${background.position_x}px`;\r\n            if (background.position_y)\r\n                style.backgroundPositionY = `${background.position_y}px`;\r\n        }\r\n\r\n        let owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            owner = true;\r\n\r\n        return <div onMouseOver={() => {this.toggleEditorButton(true)}}\r\n                    onMouseEnter={() => {this.toggleEditorButton(true)}}\r\n                    onMouseLeave={() => {this.toggleEditorButton(false)}}\r\n        >\r\n            {owner ? <div className=\"bbcode-editor-button\">\r\n                {this.state.show_editor_button ? <CyberLink to={BBCODE_EDITOR}>\r\n                    <CyberButton title=\"BBCode Editor\" variant=\"contained\" classNames=\"btn-contained-primary\">\r\n                        <FontAwesomeIcon icon={faTools}/>\r\n                    </CyberButton>\r\n                </CyberLink> : null}\r\n            </div> : null}\r\n            <div id=\"BBCode-Editor\" className=\"bbcode-container\" style={style}>\r\n                {cyberBBCodeParser(this.props.visited_user[User.profile][Profile.about_section_bbcode])}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AboutTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Chart from 'chart.js';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nimport {User, UserList} from \"../../../../models\";\r\nimport {CyberLink} from \"../../../layout/common/common\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faStar} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {USER_ANIME_HISTORY} from \"../../../../urls\";\r\nimport {FavoriteTitles} from \"../../statistics/favorites_snippets\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\n\r\n\r\nfunction getMinsPerDay(date, total_mins) {\r\n    const date1 = new Date(date);\r\n    const date2 = new Date();\r\n    const time_diff = Math.abs(date2 - date1);\r\n    const total_days = Math.ceil(time_diff / (1000 * 60 * 60 * 24));\r\n    return Math.round(total_mins / total_days)\r\n}\r\n\r\n\r\nclass AnimeTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    render() {\r\n        Chart.defaults.global.legend.display = false;\r\n\r\n        let raw = [\r\n            {label: 'Watching', stat: this.props.user_list[UserList.anime_watching], color: '', hoverColor: ''},\r\n            {label: 'Completed', stat: this.props.user_list[UserList.anime_completed], color: '', hoverColor: ''},\r\n            {label: 'On Hold', stat: this.props.user_list[UserList.anime_on_hold], color: '', hoverColor: ''},\r\n            {label: 'Dropped', stat: this.props.user_list[UserList.anime_dropped], color: '', hoverColor: ''},\r\n            {label: 'Planned', stat: this.props.user_list[UserList.anime_plan_to_watch], color: '', hoverColor: ''},\r\n        ];\r\n\r\n        let stat_data = [];\r\n        let labels = [];\r\n        for (let x = 0; x < raw.length; x++) {\r\n            stat_data.push(raw[x].stat);\r\n            labels.push(raw[x].label);\r\n        }\r\n\r\n        let data = {\r\n            labels: labels,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            datasets: [{\r\n                data: stat_data,\r\n                backgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.4)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.4)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.5)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.2)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.4)',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.8)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.8)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.8)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.8)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.3)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.3)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.3)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.3)',\r\n                ],\r\n                hoverBorderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 1)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 1)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 1)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 1)',\r\n                ],\r\n                // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n                // hoverBorderColor: '#156bb7',\r\n                borderWidth: 0\r\n            }]\r\n        };\r\n\r\n\r\n        const line_data = {\r\n            labels: ['1', '2', '3', '4', '5', '6', '7'],\r\n            datasets: [\r\n                {\r\n                    label: 'Episodes',\r\n                    data: [12, 17, 9, 6, 8, 13, 14],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ],\r\n        };\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Grid className=\"User-List-Stats-Container\" container>\r\n                <Grid item xs={5}>\r\n                    <AnimeSimpleChartStats/>\r\n                </Grid>\r\n\r\n                <Grid item xs={4} className=\"pie-container\">\r\n                    <h2>Recent</h2>\r\n                    <div className=\"\">\r\n                        <Line data={line_data} height={220} options={options}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"recent-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStar}/>\r\n                                    <span>{this.props.user_list[UserList.anime_mean_score].toFixed(2)}</span>\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={getMinsPerDay(\r\n                                        this.props.user_list[UserList.anime_started_watching_on],\r\n                                        this.props.user_list[UserList.anime_mins_spent_watching])}/>minutes per day\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={this.props.user_list[UserList.anime_mins_spent_watching]}/>\r\n                                    total minutes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.anime_episodes_watched]}/>\r\n                                episodes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <span>\r\n                                        Started Watching on <span><Moment format={'Do MMM YYYY'}\r\n                                                                          date={this.props.user_list[UserList.anime_started_watching_on]}/></span>\r\n                                    </span>\r\n                                </>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_ANIME_HISTORY(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">History</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"favorites-container\">\r\n                    <h2>Favorites</h2>\r\n                    <FavoriteTitles branch={BRANCH_ANIME}/>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    user_list: state.users.user_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Chart from 'chart.js';\r\nimport {Line, Doughnut} from 'react-chartjs-2';\r\n\r\nimport {Character, Profile, User, UserList} from \"../../../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faCircle, faPause, faPlay, faStar, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {faCalendarAlt} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_MANGA,\r\n    COLOR_DANGER,\r\n    COLOR_GRAY,\r\n    COLOR_INFO,\r\n    COLOR_PRIMARY,\r\n    COLOR_WARNING\r\n} from \"../../../../globals\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {USER_ANIME_HISTORY, USER_ANIME_STATISTICS, USER_MANGA_HISTORY} from \"../../../../urls\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport {MangaSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\n\r\n\r\nclass MangaTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    render() {\r\n        Chart.defaults.global.legend.display = false;\r\n\r\n        let raw = [\r\n            {label: 'Reading', stat: this.props.user_list[UserList.manga_reading], color: '', hoverColor: ''},\r\n            {label: 'Completed', stat: this.props.user_list[UserList.manga_completed], color: '', hoverColor: ''},\r\n            {label: 'On Hold', stat: this.props.user_list[UserList.manga_on_hold], color: '', hoverColor: ''},\r\n            {label: 'Dropped', stat: this.props.user_list[UserList.manga_dropped], color: '', hoverColor: ''},\r\n            {label: 'Planned', stat: this.props.user_list[UserList.manga_plan_to_read], color: '', hoverColor: ''},\r\n        ];\r\n\r\n        let stat_data = [];\r\n        let labels = [];\r\n        for (let x = 0; x < raw.length; x++) {\r\n            stat_data.push(raw[x].stat);\r\n            labels.push(raw[x].label);\r\n        }\r\n\r\n        let data = {\r\n            labels: labels,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            datasets: [{\r\n                data: stat_data,\r\n                backgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.4)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.4)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.5)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.2)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.4)',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.8)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.8)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.8)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.8)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.3)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.3)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.3)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.3)',\r\n                ],\r\n                hoverBorderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 1)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 1)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 1)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 1)',\r\n                ],\r\n                // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n                // hoverBorderColor: '#156bb7',\r\n                borderWidth: 0\r\n            }]\r\n        };\r\n\r\n\r\n        const line_data = {\r\n            labels: ['1', '2', '3', '4', '5', '6', '7'],\r\n            datasets: [\r\n                {\r\n                    label: 'Chapters',\r\n                    data: [12, 17, 9, 6, 8, 13, 14],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ],\r\n        };\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={5}>\r\n                    <MangaSimpleChartStats/>\r\n                </Grid>\r\n                {/*<Grid item xs={5}>*/}\r\n                {/*    <h2>Stats</h2>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={7}>*/}\r\n                {/*    <h2>Recent</h2>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={3} className=\"pie-container\">*/}\r\n                {/*    <div className=\"pie-wrapper\">*/}\r\n                {/*        <Doughnut height={100} width={100} data={data}/>*/}\r\n                {/*    </div>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={2} className=\"User-List-Stats-Container\">*/}\r\n                {/*    <Grid container*/}\r\n                {/*          direction=\"column\"*/}\r\n                {/*          justify=\"center\"*/}\r\n                {/*          alignItems=\"flex-start\"*/}\r\n                {/*          className=\"chip-container\"*/}\r\n                {/*    >*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip className=\"border-info color-info\"*/}\r\n                {/*                  variant=\"outlined\"*/}\r\n                {/*                  label={<>*/}\r\n                {/*                      <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>*/}\r\n                {/*                      <span>Reading*/}\r\n                {/*                          <CountUp end={this.props.user_list[UserList.manga_reading]}/>*/}\r\n                {/*                      </span>*/}\r\n                {/*                  </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-primary color-primary\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>*/}\r\n                {/*                    <span>Completed*/}\r\n                {/*                        <CountUp end={this.props.user_list[UserList.manga_completed]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-warning color-warning\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>*/}\r\n                {/*                    <span>On Hold<CountUp end={this.props.user_list[UserList.manga_on_hold]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-danger color-danger\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>*/}\r\n                {/*                    <span>Dropped<CountUp end={this.props.user_list[UserList.manga_dropped]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-gray color-gray\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>*/}\r\n                {/*                    <span>Planned<CountUp end={this.props.user_list[UserList.manga_plan_to_read]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-white color-white\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>*/}\r\n                {/*                    <span>Total<CountUp end={this.props.user_list[UserList.manga_total_entries]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*    </Grid>*/}\r\n                {/*</Grid>*/}\r\n\r\n                <Grid item xs={4} className=\"pie-container\">\r\n                    <h2>Recent</h2>\r\n                    <div className=\"\">\r\n                        <Line data={line_data} height={220} options={options}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"recent-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStar}/>\r\n                                    <span>{this.props.user_list[UserList.manga_mean_score].toFixed(2)}</span>\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={this.props.user_list[UserList.manga_mins_spent_reading]}/>\r\n                                    total minutes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.manga_volumes_read]}/>\r\n                                volumes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.manga_chapters_read]}/>\r\n                                chapters\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <span>\r\n                                        Started Reading on <span><Moment format={'Do MMM YYYY'}\r\n                                                                          date={this.props.user_list[UserList.manga_started_reading_on]}/></span>\r\n                                    </span>\r\n                                </>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_MANGA_HISTORY(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">History</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"favorites-container\">\r\n                    <h2>Favorites</h2>\r\n\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.visited_user[User.profile][Profile.favorite_manga].map((manga, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_MANGA} title={manga}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    user_list: state.users.user_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaTab)\r\n","import React from \"react\";\r\n\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheckCircle} from \"@fortawesome/free-regular-svg-icons\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport BBCode from '@bbob/react/es/Component'\r\nimport reactPreset from '@bbob/preset-react/es'\r\n\r\nimport {isEmpty} from \"../../functions\";\r\nimport {AchievementInfo, AchievementTier, AnimeDataStatistics, UserStatistics} from \"../../../models\";\r\n\r\nconst unknown = 'https://ik.imagekit.io/r0d4cpkoj/Achievements/unknown_g6qPdfP00nE.jpg';\r\n\r\n\r\n/**\r\n *\r\n * @param tiers\r\n * @param achievements_info\r\n * @param user_achievements\r\n * @param user_progress\r\n * @param user_tier_1\r\n * @param user_tier_2\r\n * @param user_tier_3\r\n * @param user_tier_4\r\n * @returns {{user_progress: *, requirement: *, title: *, tier_2: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_1: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_4: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_3: {image: *, description: *, threshold: *, title: *, user_completed: *}}}\r\n */\r\nfunction parseGenreAchievementFromResult(tiers, achievements_info, user_achievements, user_progress, user_tier_1, user_tier_2, user_tier_3, user_tier_4) {\r\n    return {\r\n        title: achievements_info[AchievementInfo.title],\r\n        requirement: achievements_info?.[AchievementInfo.requirement],\r\n        user_progress: user_progress,\r\n        tier_1: {\r\n            title: achievements_info[AchievementInfo.tier_1][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_1][AchievementTier.description],\r\n            user_completed: user_tier_1,\r\n            image: achievements_info[AchievementInfo.tier_1][AchievementTier.image],\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: achievements_info[AchievementInfo.tier_2][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_2][AchievementTier.description],\r\n            user_completed: user_tier_2,\r\n            image: achievements_info[AchievementInfo.tier_2][AchievementTier.image],\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: achievements_info[AchievementInfo.tier_3][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_3][AchievementTier.description],\r\n            user_completed: user_tier_3,\r\n            image: achievements_info[AchievementInfo.tier_3][AchievementTier.image],\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: achievements_info[AchievementInfo.tier_4][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_4][AchievementTier.description],\r\n            user_completed: user_tier_4,\r\n            image: achievements_info[AchievementInfo.tier_4][AchievementTier.image],\r\n            threshold: tiers[3],\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getUserGenreAchievements(user_achievements, achievement_thresholds) {\r\n    let achievements = [];\r\n    let tiers = [20, 40, 80, 160];\r\n    let achievements_info = {\r\n        title: <CircularProgress/>,\r\n        requirement: '',\r\n        user_progress: 0,\r\n        tier_1: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[3],\r\n        }\r\n    };\r\n\r\n    if (isEmpty(achievement_thresholds)) return;\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_romance_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_romance_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.romance_progress],\r\n        user_achievements[UserStatistics.romance_1], user_achievements[UserStatistics.romance_2],\r\n        user_achievements[UserStatistics.romance_3], user_achievements[UserStatistics.romance_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_pervert_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_pervert_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.pervert_progress],\r\n        user_achievements[UserStatistics.pervert_1], user_achievements[UserStatistics.pervert_2],\r\n        user_achievements[UserStatistics.pervert_3], user_achievements[UserStatistics.pervert_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_classics_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_classics_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.classics_progress],\r\n        user_achievements[UserStatistics.classics_1], user_achievements[UserStatistics.classics_2],\r\n        user_achievements[UserStatistics.classics_3], user_achievements[UserStatistics.classics_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_dementia_psychological_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_dementia_psychological_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.dementia_psychological_progress],\r\n        user_achievements[UserStatistics.dementia_psychological_1], user_achievements[UserStatistics.dementia_psychological_2],\r\n        user_achievements[UserStatistics.dementia_psychological_3], user_achievements[UserStatistics.dementia_psychological_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_horror_thriller_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_horror_thriller_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.horror_thriller_progress],\r\n        user_achievements[UserStatistics.horror_thriller_1], user_achievements[UserStatistics.horror_thriller_2],\r\n        user_achievements[UserStatistics.horror_thriller_3], user_achievements[UserStatistics.horror_thriller_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_mystery_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_mystery_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.mystery_progress],\r\n        user_achievements[UserStatistics.mystery_1], user_achievements[UserStatistics.mystery_2],\r\n        user_achievements[UserStatistics.mystery_3], user_achievements[UserStatistics.mystery_4]\r\n    ));\r\n\r\n    return achievements;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} achievement\r\n * @param {string} achievement.title\r\n * @param {int} achievement.user_progress\r\n * @param {string} achievement.tier_1.title\r\n * @param {string} achievement.tier_1.description\r\n * @param {string} achievement.tier_1.image\r\n * @param {int} achievement.tier_1.user_completed\r\n * @param {int} achievement.tier_1.threshold\r\n * @param {string} achievement.tier_2.title\r\n * @param {string} achievement.tier_2.description\r\n * @param {string} achievement.tier_2.image\r\n * @param {int} achievement.tier_2.user_completed\r\n * @param {int} achievement.tier_2.threshold\r\n * @param {string} achievement.tier_3.title\r\n * @param {string} achievement.tier_3.description\r\n * @param {string} achievement.tier_3.image\r\n * @param {int} achievement.tier_3.user_completed\r\n * @param {int} achievement.tier_3.threshold\r\n * @param {string} achievement.tier_4.title\r\n * @param {string} achievement.tier_4.description\r\n * @param {string} achievement.tier_4.image\r\n * @param {int} achievement.tier_4.user_completed\r\n * @param {int} achievement.tier_4.threshold\r\n */\r\nexport function getActiveGenreDescription(achievement) {\r\n    if (achievement.tier_4.user_completed)\r\n        return achievement.tier_4.description;\r\n    else if (achievement.tier_3.user_completed)\r\n        return achievement.tier_3.description;\r\n    else if (achievement.tier_2.user_completed)\r\n        return achievement.tier_2.description;\r\n    else if (achievement.tier_1.user_completed)\r\n        return achievement.tier_1.description;\r\n    return '???'\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {string} props.title\r\n * @param {boolean} props.previous_completed\r\n * @param {int} props.tier_number\r\n * @param {boolean} props.user_completed\r\n * @param {int} props.user_progress\r\n * @param {int} props.threshold\r\n * @param {string} props.image\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function GenreAchievementSegment(props) {\r\n    const {title, previous_completed, tier_number, user_completed, user_progress, threshold, image} = props;\r\n    let tier_1_value;\r\n    let tier_1_buffer;\r\n    if (user_completed) {\r\n        tier_1_value = 100;\r\n        tier_1_buffer = 0\r\n    } else if (previous_completed) {\r\n        let progress = user_progress;\r\n        let new_threshold = threshold;\r\n        if (tier_number !== 1) {\r\n            progress = user_progress - (threshold / 2);\r\n            new_threshold = threshold - (threshold / 2);\r\n        }\r\n        tier_1_value = Math.round((progress / new_threshold) * 100);\r\n        tier_1_buffer = 100\r\n    } else {\r\n        tier_1_value = 0;\r\n        tier_1_buffer = 100\r\n    }\r\n    return <Grid item xs={3}>\r\n        <LinearProgress className=\"achievement-progress\" variant=\"buffer\" value={tier_1_value} valueBuffer={tier_1_buffer} />\r\n        <div style={{opacity: !previous_completed && !user_completed || user_completed ? 0 : 0.7}}\r\n             className=\"progress-number\"\r\n        >\r\n            <span>\r\n                {user_completed ? `${threshold}/${threshold}` : `${user_progress}/${threshold}`}\r\n             </span>\r\n        </div>\r\n        <div className={user_completed ? 'achievement-image completed' : 'achievement-image'}>\r\n            <span>{title}</span>\r\n            <img src={user_completed ? image : unknown}/>\r\n            <div className=\"check-icon\"><FontAwesomeIcon icon={faCheckCircle} /></div>\r\n        </div>\r\n    </Grid>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.achievement\r\n * @param {string} props.achievement.title\r\n * @param {string} props.achievement.requirement\r\n * @param {int} props.achievement.user_progress\r\n * @param {string} props.achievement.tier_1.title\r\n * @param {string} props.achievement.tier_1.description\r\n * @param {string} props.achievement.tier_1.image\r\n * @param {int} props.achievement.tier_1.user_completed\r\n * @param {int} props.achievement.tier_1.threshold\r\n * @param {string} props.achievement.tier_2.title\r\n * @param {string} props.achievement.tier_2.description\r\n * @param {string} props.achievement.tier_2.image\r\n * @param {int} props.achievement.tier_2.user_completed\r\n * @param {int} props.achievement.tier_2.threshold\r\n * @param {string} props.achievement.tier_3.title\r\n * @param {string} props.achievement.tier_3.description\r\n * @param {string} props.achievement.tier_3.image\r\n * @param {int} props.achievement.tier_3.user_completed\r\n * @param {int} props.achievement.tier_3.user_completed\r\n * @param {int} props.achievement.tier_3.threshold\r\n * @param {string} props.achievement.tier_4.title\r\n * @param {string} props.achievement.tier_4.description\r\n * @param {string} props.achievement.tier_4.image\r\n * @param {int} props.achievement.tier_4.user_completed\r\n * @param {int} props.achievement.tier_4.threshold\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function GenreAchievement(props) {\r\n    const {achievement} = props;\r\n    const requirement = <BBCode plugins={[reactPreset()]}>\r\n        {achievement.requirement}\r\n    </BBCode>;\r\n    return <Grid item xs={12} className=\"achievement-container\">\r\n        <Tooltip title={requirement}>\r\n            <h5>{achievement.title}</h5>\r\n        </Tooltip>\r\n        <p>{getActiveGenreDescription(achievement)}</p>\r\n        <Grid container className=\"progress-bar\">\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_1.title}\r\n                tier_number={1}\r\n                previous_completed={true}\r\n                user_completed={achievement.tier_1.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_1.threshold}\r\n                image={achievement.tier_1.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_2.title}\r\n                tier_number={2}\r\n                previous_completed={achievement.tier_1.user_completed}\r\n                user_completed={achievement.tier_2.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_2.threshold}\r\n                image={achievement.tier_2.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_3.title}\r\n                tier_number={3}\r\n                previous_completed={achievement.tier_2.user_completed}\r\n                user_completed={achievement.tier_3.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_3.threshold}\r\n                image={achievement.tier_3.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_4.title}\r\n                tier_number={4}\r\n                previous_completed={achievement.tier_3.user_completed}\r\n                user_completed={achievement.tier_4.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_4.threshold}\r\n                image={achievement.tier_4.image}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","/* eslint-disable */\r\nimport React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {User, UserStatistics} from \"../../../../models\";\r\nimport {getAnimeAchievementsThresholds} from \"../../../../actions/anime\";\r\nimport {clearUserAchievements, getUserAchievements} from \"../../../../actions/users\";\r\nimport {GenreAchievement, getUserGenreAchievements} from \"../../achievements/achievements\";\r\n\r\nimport '../../../../assets/css/achievements.css'\r\n\r\n\r\nclass AchievementsTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            user_achievements: {\r\n                the_crusade: false,\r\n                the_crusade_progress: 0.0,\r\n                romance_progress: 0,\r\n                romance_1: false,\r\n                romance_2: false,\r\n                romance_3: false,\r\n                romance_4: false,\r\n                pervert_progress: 0,\r\n                pervert_1: false,\r\n                pervert_2: false,\r\n                pervert_3: false,\r\n                pervert_4: false,\r\n                classics_progress: 0,\r\n                classics_1: false,\r\n                classics_2: false,\r\n                classics_3: false,\r\n                classics_4: false,\r\n            },\r\n            anime_achievement_thresholds: {},\r\n            achievements_loaded: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeAchievementsThresholds();\r\n        this.props.getUserAchievements(this.props.visited_user[User.id]);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearUserAchievements();\r\n    }\r\n\r\n    render() {\r\n        let genre_achievements = getUserGenreAchievements(this.state.user_achievements, this.state.anime_achievement_thresholds);\r\n        if (!this.state.achievements_loaded && !isEmpty(this.props.user_achievements) && !isEmpty(this.props.anime_achievement_thresholds))\r\n            this.setState({\r\n                user_achievements: this.props.user_achievements,\r\n                anime_achievement_thresholds: this.props.anime_achievement_thresholds,\r\n                achievements_loaded: true\r\n            });\r\n\r\n        // genre_achievements = getUserGenreAchievements(this.state.user_achievements, this.state.anime_achievement_thresholds);\r\n\r\n        return (\r\n            <Grid id=\"Achievements\" container>\r\n                <Grid item xs={12}>\r\n                    <h3>Achievements</h3>\r\n                </Grid>\r\n                {this.props.visited_user[User.id] === 15 &&\r\n                    this.props.visited_user[User.id] === this.props.user[User.id] ?\r\n                    <Grid item xs={12} className=\"achievement-container\">\r\n                        <Tooltip title=\"All Anime where the Goddess is present, count towards this achievement.\">\r\n                            <h5>The Crusade</h5>\r\n                        </Tooltip>\r\n                        <p>I am going on pilgrimage, I am going to walk the holy path.</p>\r\n                        <Tooltip title={`${this.state.user_achievements[UserStatistics.the_crusade_progress]}%`}>\r\n                            <LinearProgress className=\"achievement-progress\" variant=\"buffer\" value={this.state.user_achievements[UserStatistics.the_crusade_progress]} valueBuffer={0} />\r\n                        </Tooltip>\r\n                    </Grid> : null}\r\n                {genre_achievements ? genre_achievements.map(achievement => (\r\n                    <GenreAchievement achievement={achievement}/>\r\n                )) : null}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n    anime_loading: state.anime.anime_loading,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    anime_achievement_thresholds: state.anime.anime_achievement_thresholds,\r\n    user_achievements_loading: state.users.user_achievements_loading,\r\n    user_achievements: state.users.user_achievements,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeAchievementsThresholds, getUserAchievements, clearUserAchievements})(AchievementsTab)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBookOpen, faGamepad, faTrophy, faTv, faUser} from \"@fortawesome/free-solid-svg-icons\";\r\nimport AboutTab from \"./AboutTab\";\r\nimport AnimeTab from \"./AnimeTab\";\r\nimport MangaTab from \"./MangaTab\";\r\nimport AchievementsTab from \"./AchievementsTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ProfileTabs(props) {\r\n    const {visited_user} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root profile-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faUser}/> About</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faTv}/> Anime</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faBookOpen}/> Manga</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab disabled={true} label={<p><FontAwesomeIcon className=\"list-icon\" icon={faGamepad}/> Eroge</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    {/*<Tab disabled={true} label={<p><FontAwesomeIcon className=\"list-icon\" icon={faChartLine}/> Statistics</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>*/}\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faTrophy}/> Achievements</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"about-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <AboutTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"anime-tab box-light\" value={value} index={1} dir={theme.direction}>\r\n                    <AnimeTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"manga-tab box-light\" value={value} index={2} dir={theme.direction}>\r\n                    <MangaTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"eroge-tab box-light\" value={value} index={3} dir={theme.direction}>\r\n                    EROGE\r\n                </TabPanel>\r\n                {/*<TabPanel value={value} index={4} dir={theme.direction}>*/}\r\n                {/*    STATISTICS*/}\r\n                {/*</TabPanel>*/}\r\n                <TabPanel value={value} index={4} dir={theme.direction}>\r\n                    <AchievementsTab/>\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCamera} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {User} from \"../../../models\";\r\nimport {updateUserProfileImage} from \"../../../actions/users\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass UploadProfileImageButton extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Classnames for the loader */\r\n        loader_classnames: PropTypes.object.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onUpdateProfile = this.onUpdateProfile.bind(this);\r\n        this.state = {};\r\n    }\r\n\r\n    onUpdateProfile(e) {\r\n        this.props.updateUserProfileImage(e.target.files[0], this.props.user[User.id]);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"upload-img-btn-container\">\r\n                {this.props.uploading_file ? <CircularProgress className={this.props.loader_classnames}/> : <>\r\n                    <input\r\n                        accept=\"image/*\"\r\n                        style={{display: 'none'}}\r\n                        id=\"upload-profile-img\"\r\n                        multiple={false}\r\n                        type=\"file\"\r\n                        onChange={this.onUpdateProfile}\r\n                    />\r\n                    <label htmlFor=\"upload-profile-img\" className=\"upload-img-btn\">\r\n                        <Button variant=\"outlined\" color=\"primary\" component=\"span\"\r\n                                onMouseEnter={playHoverSound} onClick={playClickSound}>\r\n                            <FontAwesomeIcon icon={faCamera}/>\r\n                        </Button>\r\n                    </label>\r\n                </>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    uploading_file: state.users.uploading_file,\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateUserProfileImage})(UploadProfileImageButton)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Moment from \"react-moment\";\r\n\r\nimport {PROFILE_TAB_NAME} from \"../../../globals\";\r\nimport {User, Profile as ProfileModel} from \"../../../models\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport {CyberLink, PreLoadImage} from \"../../layout/common/common\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {\r\n    convertUTCDateToLocalDate, isMoreThanAYear, isTimeLessThanAnHourAgo, isTimeLessThanSixHoursAgo,\r\n    isToday,\r\n    isWithinAMonth,\r\n    isWithinAWeek, isWithinAYear, isWithinSixMonths,\r\n    isYesterday\r\n} from \"../../functions\";\r\nimport {ProfileTabs} from \"./tabs/ProfileTabs\";\r\nimport UploadProfileImageButton from \"../forms/UploadProfileImageButton\";\r\nimport {getUserList, updateUserList} from \"../../../actions/users\";\r\nimport {NOT_FOUND, USER_ANIME_HISTORY, USER_ANIME_LIST, USER_MANGA_HISTORY, USER_MANGA_LIST} from \"../../../urls\";\r\n\r\nimport '../../../assets/css/users.css'\r\n\r\n\r\nfunction getLastLoginLabel(last_login) {\r\n    const last_login_date = convertUTCDateToLocalDate(new Date(Date.parse(last_login)));\r\n    if (isTimeLessThanAnHourAgo(last_login_date))\r\n        return <span className=\"color-green\">Now</span>;\r\n    else if (isTimeLessThanSixHoursAgo(last_login_date))\r\n        return <span className=\"color-success\">Few hours ago</span>;\r\n    else if (isToday(last_login_date))\r\n        return <span className=\"color-success\">Today</span>;\r\n    else if (isYesterday(last_login_date))\r\n        return <span className=\"color-warning\">Yesterday</span>;\r\n    else if (isWithinAWeek(last_login_date))\r\n        return <span className=\"color-warning\">Few days ago</span>;\r\n    else if (isWithinAMonth(last_login_date))\r\n        return <span className=\"color-warning\">Few weeks ago</span>;\r\n    else if (isWithinSixMonths(last_login_date))\r\n        return <span className=\"color-warning\">Few months ago</span>;\r\n    else if (isWithinAYear(last_login_date))\r\n        return <span className=\"color-warning\">More than six months ago</span>;\r\n    else if (isMoreThanAYear(last_login_date))\r\n        return <span className=\"color-danger\">More than a year ago</span>;\r\n    else return <span className=\"color-danger\">A long time ago</span>\r\n}\r\n\r\n\r\nclass Profile extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            img_cover_loaded: false,\r\n            current_id: this.props.match.params.id,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        this.props.getUser(this.props.match.params.id);\r\n        this.props.getUserList(this.props.match.params.id);\r\n        this.props.updateUserList(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {match} = this.props;\r\n\r\n        if (prevState.current_id !== match.params.id) {\r\n            this.setState({current_id: this.props.match.params.id});\r\n            this.props.getUser(this.props.match.params.id);\r\n            this.props.getUserList(this.props.match.params.id);\r\n            this.props.updateUserList(this.props.match.params.id);\r\n\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        document.title = this.props.visited_user_loaded ? this.props.visited_user[User.username] : PROFILE_TAB_NAME;\r\n\r\n        let loaded = this.props.visited_user_loaded;\r\n        if (loaded && parseInt(this.props.match.params.id) !== this.props.visited_user[User.id])\r\n            loaded = false;\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                {loaded ? <Grid id=\"Profile\" container xs={12}>\r\n                    <Grid item xs={12}>\r\n                        <h1>{this.props.visited_user[User.username]}</h1>\r\n                    </Grid>\r\n                    <Grid item xs={2} className=\"side-panel\">\r\n                        <div className=\"side-panel-sticky-helper\"/>\r\n                        <div className=\"side-panel-container\">\r\n                            <div className=\"avatar-image-container\">\r\n                                <PreLoadImage src={this.props.visited_user[User.profile][ProfileModel.profile_image]}\r\n                                              alt={'Avatar'}/>\r\n                                {this.props.user && this.props.user[User.id] === parseInt(this.props.match.params.id) ?\r\n                                    <UploadProfileImageButton loader_classnames=\"upload-img-loader\"/> : null}\r\n                            </div>\r\n                            <List className=\"info-list box-light\">\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Title\"\r\n                                        secondary={this.props.visited_user[User.profile][ProfileModel.title]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Bio\"\r\n                                        secondary={this.props.visited_user[User.profile][ProfileModel.bio]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Email\"\r\n                                        secondary={this.props.visited_user[User.email]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Last Active\"\r\n                                        secondary={getLastLoginLabel(this.props.visited_user[User.last_login])}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Joined\"\r\n                                        secondary={<Moment format={'Do MMM YYYY'} date={this.props.visited_user[User.date_joined]}/>}/>\r\n                                </ListItem>\r\n                            </List>\r\n                            <Divider/>\r\n                            <List className=\"box-light\" component=\"nav\" aria-label=\"main mailbox folders\">\r\n                                <CyberLink to={USER_ANIME_LIST(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Anime List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_ANIME_HISTORY(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Anime History\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_MANGA_LIST(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Manga List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_MANGA_HISTORY(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Manga History\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={NOT_FOUND}>\r\n                                    <ListItem button>\r\n                                        Eroge List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                            </List>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={10} className=\"main-panel\">\r\n                        <ProfileTabs visited_user={this.props.visited_user}/>\r\n                    </Grid>\r\n                </Grid> : this.props.user_loading ? <Loading text={'User Loading'}/> : null}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser, getUserList, updateUserList})(Profile)\r\n","import React, {Component} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile as ProfileModel, User} from \"../../../../models\";\r\nimport {PreLoadImage} from \"../../../layout/common/common\";\r\nimport UploadProfileImageButton from \"../../forms/UploadProfileImageButton\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {EditBioForm} from \"../../forms/shortForms\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\n\r\n\r\nclass UserSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.editBio = this.editBio.bind(this);\r\n        this.finishEditingBio = this.finishEditingBio.bind(this);\r\n        this.state = {\r\n            edit_bio: false\r\n        };\r\n    }\r\n\r\n    editBio() {\r\n        this.setState({edit_bio: true})\r\n    }\r\n\r\n    finishEditingBio() {\r\n        this.setState({edit_bio: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <h1>User Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Personal settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Avatar\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {!this.props.uploading_file ? <PreLoadImage src={this.props.user[User.profile][ProfileModel.profile_image]}\r\n                                                      alt={'Avatar'} className=\"settings-avatar\"/> : null}\r\n                                        <UploadProfileImageButton/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Title\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.profile][ProfileModel.title]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Username\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.username]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Email\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.email]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Bio\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">\r\n                                        <ClickAwayListener onClickAway={this.finishEditingBio}>\r\n                                            <div>\r\n                                                {!this.state.edit_bio ? <div onClick={this.editBio}>\r\n                                                    {this.props.user[User.profile][ProfileModel.bio] ? this.props.user[User.profile][ProfileModel.bio] : 'No bio'}\r\n                                                </div> : null}\r\n                                                {this.state.edit_bio ? (\r\n                                                    <EditBioForm bio={this.props.user[User.profile][ProfileModel.bio]}\r\n                                                                 closeBio={this.finishEditingBio}/>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </ClickAwayListener>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Show adult content\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Switch\r\n                                            checked={true}\r\n                                            color=\"primary\"\r\n                                            name=\"checkedB\"\r\n                                            inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    cookies: state.cookies.sound_effects,\r\n    uploading_file: state.users.uploading_file,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(UserSettings)\r\n","import React, {Component} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faFileUpload, faTools, faVolumeMute, faVolumeUp} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {connect} from \"react-redux\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {setCookieSoundEffects} from \"../../../../actions/cookies\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Profile as ProfileModel, Profile, User} from \"../../../../models\";\r\nimport {muteUnmuteThemeSounds} from \"../../../../actions/users\";\r\nimport {EditAboutMeBBCodeDialog, EditBioForm} from \"../../forms/shortForms\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\nimport {getBrowseGridListCols} from \"../../../functions\";\r\nimport {BBCODE_EDITOR, USER_ANIME_STATISTICS} from \"../../../../urls\";\r\n\r\n\r\nclass ProfileSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.openBBCodeDialog = this.openBBCodeDialog.bind(this);\r\n        this.closeBBCodeDialog = this.closeBBCodeDialog.bind(this);\r\n        this.state = {\r\n            bbcode_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    openBBCodeDialog() {\r\n        this.setState({bbcode_dialog_open: true})\r\n    }\r\n\r\n    closeBBCodeDialog() {\r\n        this.setState({bbcode_dialog_open: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <h1>Profile Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Theme settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Theme\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <FormControl variant=\"filled\">\r\n                                            <InputLabel id=\"select-theme\">Theme</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"select-theme\"\r\n                                                id=\"demo-simple-select-outlined\"\r\n                                                value={'Cyber-Genesis'}\r\n                                                label=\"Theme\"\r\n                                            >\r\n                                                <MenuItem value={'Cyber-Genesis'}>Cyber-Genesis</MenuItem>\r\n                                                <MenuItem value={'Legacy'}>Legacy</MenuItem>\r\n                                                <MenuItem value={'Oceanic Blue'}>Oceanic Blue</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Sounds\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberButton onClick={this.props.muteUnmuteThemeSounds}>\r\n                                            <FontAwesomeIcon icon={this.props.user[User.profile][Profile.theme_sounds] ?\r\n                                                    faVolumeUp : faVolumeMute}/>\r\n                                        </CyberButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Show adult content\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Yes\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>About section</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Edit About Me bbCode\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberLink to={BBCODE_EDITOR}>\r\n                                            <CyberButton title=\"BBCode Editor\" variant=\"outlined\" >\r\n                                                <FontAwesomeIcon icon={faTools}/>\r\n                                            </CyberButton>\r\n                                        </CyberLink>\r\n                                        {/*<CyberButton variant=\"outlined\" onClick={this.openBBCodeDialog}>*/}\r\n                                        {/*    <FontAwesomeIcon icon={faEdit}/>*/}\r\n                                        {/*</CyberButton>*/}\r\n                                        {/*<EditAboutMeBBCodeDialog*/}\r\n                                        {/*    bbcode={this.props.user[User.profile][ProfileModel.about_section_bbcode]}*/}\r\n                                        {/*    open={this.state.bbcode_dialog_open}*/}\r\n                                        {/*    onClose={this.closeBBCodeDialog}/>*/}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Anime stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Manga stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Eroge stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n            </Grid>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    sound_effects: state.cookies.sound_effects,\r\n});\r\n\r\nexport default connect(mapStateToProps, {muteUnmuteThemeSounds})(ProfileSettings)\r\n","import React, { useState } from 'react';\r\n\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport store from \"../../../../store\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {\r\n    updateUserAnimeHistoryPrivacy,\r\n    updateUserAnimeListPrivacy, updateUserMangaHistoryPrivacy,\r\n    updateUserMangaListPrivacy\r\n} from \"../../../../actions/users\";\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserAnimeListPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_anime_list_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserAnimeListPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserAnimeHistoryPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_anime_history_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserAnimeHistoryPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserMangaListPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_manga_list_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserMangaListPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserMangaHistoryPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_manga_history_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserMangaHistoryPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faCheck,\r\n    faCloudDownloadAlt,\r\n    faEdit,\r\n    faFileImport,\r\n    faFileUpload, faQuestion, faTimes,\r\n    faTools,\r\n    faVolumeMute\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n    EditAboutMeBBCodeDialog,\r\n    ImportAnimeListFromMal, ImportMangaListFromMal,\r\n    ScrapeEpisodeHistoryFromMalDialog, ScrapeEpisodeHistoryFromMalForm\r\n} from \"../../forms/shortForms\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {Profile, Profile as ProfileModel, User, UserList} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n    fixUserStartAndFinishDateForAnimeEntries,\r\n    getUserEpisodeHistoryScraperProgress,\r\n    getUserList\r\n} from \"../../../../actions/users\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {\r\n    ToggleUserAnimeHistoryPrivacyForm,\r\n    ToggleUserAnimeListPrivacyForm, ToggleUserMangaHistoryPrivacyForm, ToggleUserMangaListPrivacyForm\r\n} from \"../../forms/list_privacy/listPrivacyForms\";\r\n\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    return (\r\n        <Box position=\"relative\" display=\"inline-flex\">\r\n            <CircularProgress variant=\"determinate\" {...props} />\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Typography variant=\"caption\" component=\"div\" color=\"textPrimary\">{`${props.value}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nclass ListSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.openScrapeHistoryDialog = this.openScrapeHistoryDialog.bind(this);\r\n        this.closeScrapeHistoryDialog = this.closeScrapeHistoryDialog.bind(this);\r\n        this.state = {\r\n            scrape_episode_history_dialog_open: false,\r\n            scraping_info_reading: false,\r\n            update_interval: null,\r\n            scraping_history_info_modal_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getUserList(this.props.user[User.id]);\r\n        this.props.getUserEpisodeHistoryScraperProgress();\r\n        const {getUserEpisodeHistoryScraperProgress} = this.props;\r\n        if (!isEmpty(this.props.user_list) && this.props.user_list[UserList.is_scraping_episode_history_from_mal]) {\r\n            getUserEpisodeHistoryScraperProgress();\r\n            let update_interval = setInterval(function () {\r\n                getUserEpisodeHistoryScraperProgress();\r\n            }, 10000);\r\n            this.setState({scraping_info_reading: true, update_interval: update_interval});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // setTimeout(() => { getUserEpisodeHistoryScraperProgress() }, 1000);\r\n        const {getUserEpisodeHistoryScraperProgress} = this.props;\r\n\r\n        if (!this.state.scraping_info_reading) {\r\n            if (!isEmpty(this.props.user_list) && this.props.user_list[UserList.is_scraping_episode_history_from_mal]) {\r\n                getUserEpisodeHistoryScraperProgress();\r\n                let update_interval = setInterval(function () {\r\n                    getUserEpisodeHistoryScraperProgress();\r\n                }, 10000);\r\n                this.setState({scraping_info_reading: true, update_interval: update_interval});\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.update_interval);\r\n    }\r\n\r\n    openScrapeHistoryDialog() {\r\n        this.setState({scrape_episode_history_dialog_open: true})\r\n    }\r\n\r\n    closeScrapeHistoryDialog() {\r\n        this.setState({scrape_episode_history_dialog_open: false})\r\n    }\r\n\r\n    render() {\r\n        return this.props.user_list_loading || isEmpty(this.props.user_list) ? <CircularProgress/> :\r\n            <Grid container className=\"settings-tab\">\r\n                <Grid item xs={12}>\r\n                    <h1>List Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Anime settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Anime List is {this.props.user[User.profile][Profile.is_anime_list_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserAnimeListPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Anime History is {this.props.user[User.profile][Profile.is_anime_history_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserAnimeHistoryPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Import from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ImportAnimeListFromMal/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Scrape episode history from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {isEmpty(this.props.user_list) || !this.props.user_list[UserList.is_scraping_episode_history_from_mal] ?\r\n                                            this.props.user_list_loading ? <CircularProgress/> :\r\n                                                <CyberButton variant=\"outlined\" onClick={this.openScrapeHistoryDialog}>\r\n                                                    <FontAwesomeIcon icon={faCloudDownloadAlt}/>\r\n                                                </CyberButton>\r\n                                        : <>\r\n                                            <p>{this.props.progress}%</p>\r\n                                            <LinearProgress variant=\"determinate\" value={this.props.progress}/>\r\n                                        </>}\r\n                                        <ScrapeEpisodeHistoryFromMalDialog\r\n                                            open={this.state.scrape_episode_history_dialog_open}\r\n                                            onClose={this.closeScrapeHistoryDialog}/>\r\n                                    </TableCell>\r\n                                    <div className=\"help-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n                                        playClickSound();\r\n                                        this.setState({scraping_history_info_modal_open: true})\r\n                                    }}>\r\n                                        <FontAwesomeIcon icon={faQuestion}/>\r\n                                    </div>\r\n                                    <Dialog\r\n                                        aria-labelledby=\"scrape-episode-history-info-title\"\r\n                                        open={this.state.scraping_history_info_modal_open}\r\n                                        onClose={() => {\r\n                                            this.setState({scraping_history_info_modal_open: false})\r\n                                        }}>\r\n                                        <div id=\"scrape-episode-history-info\">\r\n                                            <DialogTitle id=\"scrape-episode-history-info-title\">Quick\r\n                                                Guide</DialogTitle>\r\n                                            <Typography variant=\"body1\" paragraph={true}>\r\n                                                To scrape your episode history from MAL you first must provide your\r\n                                                authentication cookies of your account on MAL.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\">\r\n                                                To find these cookies go to MAL, log in to your account and open Inspect\r\n                                                Element on your browser:\r\n                                            </Typography>\r\n                                            <ul>\r\n                                                <li>Click on the Application tab</li>\r\n                                                <li>Click on Cookies under the Storage segment on the left</li>\r\n                                                <li>Click on the MAL url under Cookies</li>\r\n                                                <li>In the value column copy the value of MALSESSIONID and MALHLOGSESSID\r\n                                                    and paste them in the form accordingly\r\n                                                </li>\r\n                                            </ul>\r\n                                            <img src=\"images/user_scrape_guide_1.jpg\"/>\r\n                                            <Typography variant=\"body1\">\r\n                                                The scraper will use these cookies only to view your episode history and\r\n                                                scrape it.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\">\r\n                                                When the scraper starts:\r\n                                            </Typography>\r\n                                            <ul>\r\n                                                <li>Don't log out of MAL during the scraping process.</li>\r\n                                                <li>The scraper might last up to few hours depending on your list\r\n                                                    size.\r\n                                                </li>\r\n                                                <li>You will get progress of the scraper when it starts.</li>\r\n                                                <li>When the scraper finishes you can log out of MAL and log in again to\r\n                                                    refresh your cookies. (For your security)\r\n                                                </li>\r\n                                            </ul>\r\n                                            <Typography>\r\n                                                NOTE: Only one user can scrape from MAL at the time, this is to\r\n                                                prevent over-clogging MAL with requests. If someone is already\r\n                                                scraping please wait and try again later.\r\n                                            </Typography>\r\n\r\n                                            <div className=\"close-btn\">\r\n                                                <CyberButton classNames=\"btn-contained-primary\" onClick={() => {\r\n                                                    this.setState({scraping_history_info_modal_open: false})\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faTimes}/>\r\n                                                </CyberButton>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Dialog>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Fix Start Date and Finish Date for your anime list entries\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberButton variant=\"outlined\"\r\n                                                     onClick={() => {\r\n                                                         if (window.confirm('Are you sure?'))\r\n                                                             this.props.fixUserStartAndFinishDateForAnimeEntries()\r\n                                                     }}>\r\n                                            <FontAwesomeIcon icon={faTools}/>\r\n                                        </CyberButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Manga settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Manga List is {this.props.user[User.profile][Profile.is_manga_list_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserMangaListPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Manga History is {this.props.user[User.profile][Profile.is_manga_history_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserMangaHistoryPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Import from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ImportMangaListFromMal/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_list: state.users.user_list,\r\n    user_list_loading: state.users.user_list_loading,\r\n    progress: state.users.user_list[UserList.scraping_episode_history_from_mal_progress],\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getUserList, getUserEpisodeHistoryScraperProgress, fixUserStartAndFinishDateForAnimeEntries\r\n})(ListSettings)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport UserSettings from \"./UserSettings\";\r\nimport ProfileSettings from \"./ProfileSettings\";\r\nimport ListSettings from \"./ListSettings\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function SettingsTabs(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label=\"User\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"Profile\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"List\" {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <UserSettings/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    <ProfileSettings/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={2} dir={theme.direction}>\r\n                    <ListSettings/>\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {SETTINGS_TAB_NAME} from \"../../../globals\";\r\nimport {LOGIN} from \"../../../urls\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport {SettingsTabs} from \"./tabs/SettingsTabs\";\r\n\r\nimport '../../../assets/css/users.css'\r\n\r\n\r\nclass Settings extends Component {\r\n    componentDidMount() {\r\n        document.title = SETTINGS_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.user_authenticated)\r\n            return <Redirect to={LOGIN}/>;\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Settings\">\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <SettingsTabs/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Settings)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport PropTypes from \"prop-types\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass MangaBrowse extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        let manga_filters = this.props.manga_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            manga_filters = this.props.manga_season_filters;\r\n        return <Browse\r\n            branch={BRANCH_MANGA}\r\n            titles_loading={this.props.manga_loading}\r\n            filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n            filtered_titles={this.props.filtered_manga}\r\n            title_filters={manga_filters}\r\n            user_entry_statuses={this.props.user_manga_entry_statuses}\r\n            season={this.props.season}\r\n            user_display_settings={this.props.user_manga_display_settings}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_browse_filters: state.cookies.manga_browse_filters,\r\n    manga_season_filters: state.cookies.manga_season_filters,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n    user_manga_display_settings: state.users.user_manga_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass AnimeDisplay extends Component {\r\n    componentDidMount() {\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_ANIME}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.anime_loading}\r\n            title_loaded={this.props.anime_loaded}\r\n            title={this.props.anime}\r\n            user_title_status={this.props.user_anime_entry}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_loaded: state.anime.anime_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    user_anime_entry: state.users.user_anime_entry,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLoggedInUserAnimeEntryStatuses,\r\n    getLoggedInUserMangaEntryStatuses\r\n})(AnimeDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass MangaDisplay extends Component {\r\n    componentDidMount() {\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_MANGA}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.manga_loading}\r\n            title_loaded={this.props.manga_loaded}\r\n            title={this.props.manga}\r\n            user_title_status={this.props.user_manga_entry}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    manga_loaded: state.manga.manga_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n    user_manga_entry: state.users.user_manga_entry,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLoggedInUserAnimeEntryStatuses,\r\n    getLoggedInUserMangaEntryStatuses\r\n})(MangaDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\n\r\n\r\nclass CharactersBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_CHARACTERS}\r\n            titles_loading={this.props.characters_loading}\r\n            filtered_titles_loaded={this.props.filtered_characters_loaded}\r\n            filtered_titles={this.props.filtered_characters}\r\n            title_filters={this.props.characters_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    characters_loading: state.characters.characters_loading,\r\n    filtered_characters_loaded: state.characters.filtered_characters_loaded,\r\n    filtered_characters: state.characters.filtered_characters,\r\n    characters_filters: state.cookies.characters_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharactersBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass CharacterDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_CHARACTERS}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.characters_loading}\r\n            title_loaded={this.props.characters_loaded}\r\n            title={this.props.character}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    character: state.characters.character,\r\n    characters_loaded: state.characters.characters_loaded,\r\n    characters_loading: state.characters.characters_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharacterDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass ErogeBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_EROGE}\r\n            titles_loading={this.props.eroge_loading}\r\n            filtered_titles_loaded={this.props.filtered_eroge_loaded}\r\n            filtered_titles={this.props.filtered_eroge}\r\n            title_filters={this.props.eroge_filters}\r\n            user_display_settings={this.props.user_eroge_display_settings}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    filtered_eroge_loaded: state.eroge.filtered_eroge_loaded,\r\n    filtered_eroge: state.eroge.filtered_eroge,\r\n    eroge_filters: state.cookies.eroge_browse_filters,\r\n    user_eroge_display_settings: state.users.user_eroge_display_settings,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ErogeBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass CharacterDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_EROGE}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.eroge_loading}\r\n            title_loaded={this.props.eroge_loaded}\r\n            title={this.props.eroge}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge: state.eroge.eroge,\r\n    eroge_loaded: state.eroge.eroge_loaded,\r\n    eroge_loading: state.eroge.eroge_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharacterDisplay)\r\n","import {BRANCH_ANIME, BRANCH_MANGA} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {getAnimeData} from \"../../actions/anime\";\r\nimport {getMangaData} from \"../../actions/manga\";\r\nimport {AnimeData, MangaData} from \"../../models\";\r\nimport {ANIME_SEASON_DISPLAY, HOME, MANGA_SEASON_DISPLAY} from \"../../urls\";\r\nimport AnimeBrowse from \"../anime/browse/AnimeBrowse\";\r\nimport React from \"react\";\r\nimport MangaBrowse from \"../manga/browse/MangaBrowse\";\r\nimport {faLeaf, faSeedling, faSnowflake, faSun, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nexport function getSeasonIcon(season) {\r\n    switch (season) {\r\n        case 1:\r\n            return <FontAwesomeIcon icon={faSeedling} className=\"spring\"/>;\r\n        case 2:\r\n            return <FontAwesomeIcon icon={faSun} className=\"summer\"/>;\r\n        case 3:\r\n            return <FontAwesomeIcon icon={faLeaf} className=\"fall\"/>;\r\n        case 4:\r\n            return <FontAwesomeIcon icon={faSnowflake} className=\"winter\"/>;\r\n        default:\r\n            return <FontAwesomeIcon icon={faTimes} className=\"winter\"/>;\r\n    }\r\n}\r\n\r\n\r\nexport function getTitleData(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            // noinspection JSCheckFunctionSignatures\r\n            store.dispatch(getAnimeData());\r\n            return;\r\n        case BRANCH_MANGA:\r\n            // noinspection JSCheckFunctionSignatures\r\n            store.dispatch(getMangaData());\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function browseSeasonTitlesFromBranch(branch, year, season) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AnimeBrowse season={{year: year, season: season}}/>;\r\n        case BRANCH_MANGA:\r\n            return <MangaBrowse season={{year: year, season: season}}/>;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getPrevSeasonUrl(branch, year, season) {\r\n    let prev_year = year;\r\n    let prev_season = season - 1;\r\n    if (prev_season === 0) {\r\n        prev_season = 4;\r\n        prev_year = year - 1\r\n    }\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(prev_year, prev_season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(prev_year, prev_season);\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getNextSeasonUrl(branch, year, season) {\r\n    let next_year = year;\r\n    let next_season = season + 1;\r\n    if (next_season === 5) {\r\n        next_season = 1;\r\n        next_year = year + 1\r\n    }\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(next_year, next_season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(next_year, next_season);\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport function formatData(branch, data) {\r\n    let display_data = {\r\n        total_titles_per_season_json: null,\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            display_data.total_titles_per_season_json = data[AnimeData.total_anime_per_season_json];\r\n            return display_data;\r\n        case BRANCH_MANGA:\r\n            display_data.total_titles_per_season_json = data[MangaData.total_manga_per_season_json];\r\n            return display_data;\r\n        default:\r\n            return display_data;\r\n    }\r\n}\r\n\r\nexport function getSeasonUrl(branch, year, season) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(year, season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(year, season);\r\n        default:\r\n            return HOME;\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\n\r\nimport {SeasonYear} from \"../../models\";\r\nimport {getBrowseGridListCols} from \"../functions\";\r\nimport {CyberLink} from \"../layout/common/common\";\r\nimport Loading from \"../layout/common/Loading\";\r\n\r\nimport '../../assets/css/seasons.css'\r\nimport {formatData, getSeasonUrl, getTitleData} from \"./functions\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\n\r\nclass BrowseSeasons extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        data_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        data_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        data: PropTypes.object.isRequired,\r\n    };\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {gridlist_cols: getBrowseGridListCols()};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.branch} Seasons`;\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n\r\n        getTitleData(this.props.branch);\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    render() {\r\n        const data = this.props.data_loaded ? formatData(this.props.branch, this.props.data) : formatData();\r\n\r\n        console.log('data', this.props.data);\r\n        console.log(data);\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                {this.props.data_loaded ? <Grid id=\"Seasons\" container>\r\n                    <Grid item xs={12}>\r\n                        <GridList cellHeight={280} cols={this.state.gridlist_cols} style={{margin: 0}}>\r\n                            {data.total_titles_per_season_json ?\r\n                                JSON.parse(data.total_titles_per_season_json).reverse().map((year, x) => (\r\n                                    <Grow in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1} className=\"season-card\">\r\n                                            <div className=\"box-light\">\r\n                                                {console.log(year)}\r\n                                                <h1>{year[SeasonYear.year]}</h1>\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSeedling} className=\"spring\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 1)}>Spring</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][0]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSun} className=\"summer\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 2)}>Summer</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][1]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faLeaf} className=\"fall\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 3)}>Fall</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][2]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSnowflake} className=\"winter\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 4)}>Winter</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][3]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <p className=\"total\">Total {year[SeasonYear.seasons][0] + year[SeasonYear.seasons][1] + year[SeasonYear.seasons][2] + year[SeasonYear.seasons][3]}</p>\r\n                                            </div>\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                )) : null}\r\n                        </GridList>\r\n                    </Grid>\r\n                </Grid> : this.props.anime_loading ? <Loading text={'Seasons Loading'}/> : null}\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport BrowseSeasons from \"../../seasons/BrowseSeasons\";\r\n\r\n\r\nclass BrowseAnimeSeasons extends Component {\r\n    render() {\r\n        return <BrowseSeasons\r\n            branch={BRANCH_ANIME}\r\n            data_loading={this.props.anime_loading}\r\n            data_loaded={this.props.anime_data_loaded}\r\n            data={this.props.anime_data}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data: state.anime.anime_data,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseAnimeSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport BrowseSeasons from \"../../seasons/BrowseSeasons\";\r\n\r\n\r\nclass BrowseMangaSeasons extends Component {\r\n    render() {\r\n        return <BrowseSeasons\r\n            branch={BRANCH_MANGA}\r\n            data_loading={this.props.manga_loading}\r\n            data_loaded={this.props.manga_data_loaded}\r\n            data={this.props.manga_data}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_data: state.manga.manga_data,\r\n    manga_data_loaded: state.manga.manga_data_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseMangaSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {NOT_FOUND_404_TAB_NAME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\n\r\n\r\nclass NotFound extends Component {\r\n    componentDidMount() {\r\n        document.title = NOT_FOUND_404_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Not-Found\">\r\n                    <Grid container className=\"container\">\r\n                        <Grid xs={12}>\r\n                            <h1>404</h1>\r\n                            <p>Not found</p>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(NotFound)\r\n","import React, {Component, Fragment} from \"react\";\nimport {withAlert} from \"react-alert\";\nimport {connect} from \"react-redux\";\nimport {Alert} from \"../../../models\";\nimport store from \"../../../store\";\nimport {cleanErrors, clearMessage} from \"../../../actions/messages\";\nimport {isEmpty} from \"../../functions\";\n\n\nexport class Alerts extends Component {\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {error, alert, message} = this.props;\n        if (error.status !== prevProps.error.status) {\n            console.log(error.message);\n            let msg = '';\n            if (!isEmpty(error.message))\n                Object.keys(error.message).forEach(key=>{\n                   msg += `\\n${error.message[key]}`\n                });\n\n            if (error.status !== null || error.message !== null) {\n                alert.error(`${error.status ? `Status: ${error.status}` : ''} ${msg}`, {\n                    onOpen: () => {\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            }\n        }\n\n        if (message !== prevProps.message) {\n            if (this.props.type === Alert.type_success)\n                alert.success(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            else if (this.props.type === Alert.type_info)\n                alert.info(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            else if (this.props.type === Alert.type_error)\n                alert.error(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n        }\n\n    }\n\n    render() {\n        return <Fragment/>;\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: state.errors,\n    message: state.success.message,\n    type: state.success.type\n});\n\nexport default connect(mapStateToProps)(withAlert()(Alerts));\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {getSeasonLabelFromSeasonNumber} from \"../functions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {browseSeasonTitlesFromBranch, getNextSeasonUrl, getPrevSeasonUrl, getSeasonIcon} from \"./functions\";\r\n\r\nimport '../../assets/css/seasons.css'\r\nimport {CyberButton, CyberLink} from \"../layout/common/common\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../urls\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowLeft, faArrowRight, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass DisplaySeason extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            year: parseInt(this.props.match.params.year),\r\n            season_num: parseInt(this.props.match.params.season),\r\n            season_name: getSeasonLabelFromSeasonNumber(parseInt(this.props.match.params.season))\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log('prev prop', prevProps);\r\n        console.log('prev prop', prevProps.match.params);\r\n        console.log('prev', prevState);\r\n        console.log('new', this.props.match.params.season);\r\n        if (prevProps.match.params.season !== this.props.match.params.season) {\r\n            this.setState({\r\n                year: parseInt(this.props.match.params.year),\r\n                season_num: parseInt(this.props.match.params.season),\r\n                season_name: getSeasonLabelFromSeasonNumber(parseInt(this.props.match.params.season))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Seasons\">\r\n                <div className=\"title-segment\">\r\n                    <CyberLink to={getPrevSeasonUrl(this.props.branch, this.state.year, this.state.season_num)}>\r\n                        <CyberButton variant=\"outlined\">\r\n                            <FontAwesomeIcon icon={faArrowLeft}/>\r\n                        </CyberButton>\r\n                    </CyberLink>\r\n                    <h1>\r\n                        {getSeasonIcon(this.state.season_num)} {this.state.season_name} {this.state.year}\r\n                    </h1>\r\n                    <CyberLink to={getNextSeasonUrl(this.props.branch, this.state.year, this.state.season_num)}>\r\n                        <CyberButton variant=\"outlined\">\r\n                            <FontAwesomeIcon icon={faArrowRight}/>\r\n                        </CyberButton>\r\n                    </CyberLink>\r\n                </div>\r\n                {browseSeasonTitlesFromBranch(this.props.branch, this.state.year, this.state.season_num)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(DisplaySeason)\r\n","import React from \"react\";\r\n\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {faServer} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport {Anime, ANIME_SHORT_STATUS, Manga, MANGA_SHORT_STATUS, UserAnimeEntry, UserMangaEntry} from \"../../../models\";\r\nimport {formatContentDateByKnown, userTitlePriorityNumberToText} from \"../../functions\";\r\nimport {ANIME_DISPLAY, MANGA_DISPLAY} from \"../../../urls\";\r\nimport {FilterSchema} from \"../../layout/filters/field_names\";\r\nimport {getUserStatusChip} from \"../../layout/cards/functions\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Moment from \"react-moment\";\r\nimport moment from \"moment\";\r\nimport UpdateAnimeEpisodeButton from \"../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport {UpdateMangaChapterButton, UpdateMangaVolumeButton} from \"../forms/manga/UpdateMangaVolumeChapterButtons\";\r\n\r\n\r\nfunction getDaysFromDate(start_date, finish_date) {\r\n    let start = new Date(start_date)\r\n    let end = new Date()\r\n    if (finish_date)\r\n        end = new Date(finish_date)\r\n\r\n    const diff = new moment.duration(end - start);\r\n    return Math.floor(diff.asDays())\r\n}\r\n\r\n\r\nexport function formatTitleForUserListRows(branch, user_status, entry, design_settings, list_owner, list) {\r\n    let start_date = '';\r\n    let end_date = '';\r\n    let card_title = {\r\n        id: 0,\r\n        link: '',\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: '',\r\n        chipset_header: [],\r\n        column_set: [],\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME: {\r\n            const title = entry[UserAnimeEntry.anime]\r\n            start_date = formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Anime.air_end], title[Anime.air_end_known], true);\r\n\r\n            const progress = <>\r\n                {entry[UserAnimeEntry.watched_episodes]}/{title[Anime.episodes] ? title[Anime.episodes] : '-'}{' '}\r\n                {list_owner ? <UpdateAnimeEpisodeButton\r\n                    id={title[Anime.id]} entry={entry}\r\n                    list={list}/> : null}\r\n            </>\r\n\r\n            card_title.id = title[Anime.id];\r\n            card_title.link = ANIME_DISPLAY(title[Anime.id]);\r\n            card_title.cover_images = title[Anime.anime_cover_images];\r\n            card_title.cdn_cover_images = title[Anime.anime_cdn_cover_images];\r\n            card_title.title = title[Anime.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.label],\r\n                    color: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Anime.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Anime.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Anime.anime_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (design_settings.title_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (design_settings.title_user_score)\r\n                if (entry[UserAnimeEntry.score] !== 0)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={entry[UserAnimeEntry.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_progress)\r\n                card_title.column_set.push(\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\" label={progress}/>);\r\n\r\n            if (design_settings.title_priority)\r\n                card_title.column_set.push(\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                          label={`${userTitlePriorityNumberToText(entry[UserAnimeEntry.priority])}`}/>);\r\n\r\n            if (design_settings.title_comments)\r\n                if (entry[UserAnimeEntry.comments])\r\n                    card_title.column_set.push(<p>{entry[UserAnimeEntry.comments]}</p>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_tags)\r\n                if (entry[UserAnimeEntry.tags])\r\n                    card_title.column_set.push(<p>{entry[UserAnimeEntry.tags]}</p>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_started)\r\n                if (entry[UserAnimeEntry.start_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserAnimeEntry.start_date]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_finished)\r\n                if (entry[UserAnimeEntry.finish_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserAnimeEntry.finish_date]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_added)\r\n                if (entry[UserAnimeEntry.date_added])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserAnimeEntry.date_added]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_days)\r\n                if (entry[UserAnimeEntry.start_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${getDaysFromDate(\r\n                                  entry[UserAnimeEntry.start_date], entry[UserAnimeEntry.finish_date])} days`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_type)\r\n                if (title[Anime.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_episodes)\r\n                if (title[Anime.episodes])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Anime.episodes]}ep`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_mins_per_ep)\r\n                if (title[Anime.minutes_per_episode])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${title[Anime.minutes_per_episode]}m`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_rating)\r\n                if (title[Anime.rating_short])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.rating_short]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_genres)\r\n                if (title[Anime.genres_csv]) {\r\n                    let genres = [];\r\n                    title[Anime.genres_csv].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (design_settings.title_mal_score)\r\n                if (title[Anime.score])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Anime.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_aired)\r\n                if (start_date)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${start_date}${end_date ? ' to ' + end_date : ''}`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        }\r\n        case BRANCH_MANGA: {\r\n            const title = entry[UserMangaEntry.manga]\r\n            start_date = formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Manga.air_end], title[Manga.air_end_known], true);\r\n\r\n            const progress_volumes = <>\r\n                {entry[UserMangaEntry.read_volumes]}/{title[Manga.volumes] ? title[Manga.volumes] : '-'}{' '}\r\n                {list_owner ? <UpdateMangaVolumeButton\r\n                    id={title[Manga.id]} entry={entry}\r\n                    list={list}/> : null}\r\n            </>\r\n            const progress_chapters = <>\r\n                {entry[UserMangaEntry.read_chapters]}/{title[Manga.chapters] ? title[Manga.chapters] : '-'}{' '}\r\n                {list_owner ? <UpdateMangaChapterButton\r\n                    id={title[Manga.id]} entry={entry}\r\n                    list={list}/> : null}\r\n            </>\r\n\r\n            card_title.id = title[Manga.id];\r\n            card_title.link = MANGA_DISPLAY(title[Manga.id]);\r\n            card_title.cover_images = title[Manga.manga_cover_images];\r\n            card_title.cdn_cover_images = title[Manga.manga_cdn_cover_images];\r\n            card_title.title = title[Manga.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.label],\r\n                    color: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Manga.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Manga.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Manga.manga_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n\r\n            if (design_settings.title_user_score)\r\n                if (entry[UserMangaEntry.score] !== 0)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={entry[UserMangaEntry.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_progress)\r\n                card_title.column_set.push(\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\" label={progress_volumes}/>);\r\n\r\n            if (design_settings.title_progress_2)\r\n                card_title.column_set.push(\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\" label={progress_chapters}/>);\r\n\r\n            if (design_settings.title_priority)\r\n                card_title.column_set.push(\r\n                    <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                          label={`${userTitlePriorityNumberToText(entry[UserMangaEntry.priority])}`}/>);\r\n\r\n            if (design_settings.title_comments)\r\n                if (entry[UserMangaEntry.comments])\r\n                    card_title.column_set.push(<p>{entry[UserMangaEntry.comments]}</p>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_tags)\r\n                if (entry[UserMangaEntry.tags])\r\n                    card_title.column_set.push(<p>{entry[UserMangaEntry.tags]}</p>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_started)\r\n                if (entry[UserMangaEntry.start_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserMangaEntry.start_date]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_finished)\r\n                if (entry[UserMangaEntry.finish_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserMangaEntry.finish_date]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_added)\r\n                if (entry[UserMangaEntry.date_added])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={<Moment date={entry[UserMangaEntry.date_added]} format={'Do MMM YYYY'}/>}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_days)\r\n                if (entry[UserMangaEntry.start_date])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${getDaysFromDate(\r\n                                  entry[UserMangaEntry.start_date], entry[UserMangaEntry.finish_date])} days`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_type)\r\n                if (title[Manga.type].toLowerCase() !== 'unknown')\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Manga.type]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_volumes)\r\n                if (title[Manga.volumes])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Manga.volumes]}v`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_chapters)\r\n                if (title[Manga.chapters])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={`${title[Manga.chapters]}c`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_genres)\r\n                if (title[Manga.genres_csv]) {\r\n                    let genres = [];\r\n                    title[Manga.genres_csv].split(', ').map(genre => (\r\n                        genres.push(<Chip variant=\"default\" color=\"primary\" size=\"small\" label={genre}/>)\r\n                    ));\r\n                    card_title.column_set.push(genres);\r\n                }\r\n\r\n            if (design_settings.title_mal_score)\r\n                if (title[Manga.score])\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\" label={title[Manga.score]}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            if (design_settings.title_aired)\r\n                if (start_date)\r\n                    card_title.column_set.push(\r\n                        <Chip variant=\"default\" color=\"primary\" size=\"small\"\r\n                              label={`${start_date}${end_date ? ' to ' + end_date : ''}`}/>);\r\n                else card_title.column_set.push(null);\r\n\r\n            return card_title;\r\n        }\r\n        default:\r\n            return card_title\r\n    }\r\n}\r\n","import {Anime, CDNCoverImages, CoverImages, UserAnimeEntry, UserMangaEntry} from \"../../../../models\";\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_EROGE, BRANCH_MANGA,\r\n    CYBER_GENESIS_URL,\r\n    getPriorityLabel,\r\n    USER_ANIME_STATUSES\r\n} from \"../../../../globals\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCalendarAlt, faCheck, faEdit, faImage, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport {ANIME_DISPLAY} from \"../../../../urls\";\r\nimport AnimeEntryModalForm from \"../../forms/anime/AnimeEntryModalForm\";\r\nimport UpdateAnimeEpisodeButton from \"../../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport {getTitleCoverImage, isEmpty} from \"../../../functions\";\r\nimport CardUserEditTitleEntry from \"../../../layout/cards/CardUserEditTitleEntry\";\r\nimport {formatTitleForRows} from \"../../../layout/rows/functions\";\r\nimport {formatTitleForUserListRows} from \"../functions\";\r\n\r\n\r\nfunction getTitleAndStatusKeysFromBranch(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return [UserAnimeEntry.anime, UserAnimeEntry.status]\r\n        case BRANCH_MANGA:\r\n            return [UserMangaEntry.manga, UserMangaEntry.status]\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.selected {String}\r\n * @param props.setSelected {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeListStatusButtons(props) {\r\n    const {selected, setSelected} = props;\r\n\r\n    return <>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton disabled={true}>All</CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.watching ? 'btn-contained-success' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.watching)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPlay}/><span className=\"btn-label\">Watching</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.completed ? 'btn-contained-primary' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.completed)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCheck}/><span className=\"btn-label\">Completed</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.on_hold ? 'btn-contained-warning' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.on_hold)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPause}/><span className=\"btn-label\">On Hold</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.dropped ? 'btn-contained-danger' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.dropped)\r\n                }}>\r\n                <FontAwesomeIcon icon={faStop}/><span className=\"btn-label\">Dropped</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.plan_to_watch ? 'btn-contained-default' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.plan_to_watch)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCalendarAlt}/><span className=\"btn-label\">Planned</span>\r\n            </CyberButton>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {String} props.branch\r\n * @param {Object} props.design_settings\r\n * @param {Object} props.list_owner\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListTableHead(props) {\r\n    switch (props.branch) {\r\n        case BRANCH_ANIME:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    {props.design_settings.list_table_show_images ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">\r\n                            <FontAwesomeIcon icon={faImage}/></TableCell> : null}\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    {props.design_settings.title_edit_button && props.list_owner ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">\r\n                            <FontAwesomeIcon icon={faEdit}/></TableCell> : null}\r\n                    {props.design_settings.title_user_score ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.design_settings.title_progress ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Progress</TableCell> : null}\r\n                    {props.design_settings.title_priority ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Priority</TableCell> : null}\r\n                    {props.design_settings.title_comments ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Comment</TableCell> : null}\r\n                    {props.design_settings.title_tags ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Tags</TableCell> : null}\r\n                    {props.design_settings.title_started ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Started</TableCell> : null}\r\n                    {props.design_settings.title_finished ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Finished</TableCell> : null}\r\n                    {props.design_settings.title_added ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Added</TableCell> : null}\r\n                    {props.design_settings.title_days ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Days</TableCell> : null}\r\n                    {props.design_settings.title_type ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Type</TableCell> : null}\r\n                    {props.design_settings.title_episodes ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Episodes</TableCell> : null}\r\n                    {props.design_settings.title_mins_per_ep ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Min per ep</TableCell> : null}\r\n                    {props.design_settings.title_rating ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Rating</TableCell> : null}\r\n                    {props.design_settings.title_genres ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Genres</TableCell> : null}\r\n                    {props.design_settings.title_mal_score ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.design_settings.title_aired ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Aired</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        case BRANCH_MANGA:\r\n            return <TableHead>\r\n                <TableRow>\r\n                    <TableCell className=\"color-gray\" align=\"center\">#</TableCell>\r\n                    {props.design_settings.list_table_show_images ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">\r\n                            <FontAwesomeIcon icon={faImage}/></TableCell> : null}\r\n                    <TableCell className=\"color-gray\">Title</TableCell>\r\n                    {props.design_settings.title_edit_button && props.list_owner ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">\r\n                            <FontAwesomeIcon icon={faEdit}/></TableCell> : null}\r\n                    {props.design_settings.title_user_score ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.design_settings.title_progress ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Volumes</TableCell> : null}\r\n                    {props.design_settings.title_progress_2 ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Chapters</TableCell> : null}\r\n                    {props.design_settings.title_priority ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Priority</TableCell> : null}\r\n                    {props.design_settings.title_comments ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Comment</TableCell> : null}\r\n                    {props.design_settings.title_tags ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Tags</TableCell> : null}\r\n                    {props.design_settings.title_started ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Started</TableCell> : null}\r\n                    {props.design_settings.title_finished ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Finished</TableCell> : null}\r\n                    {props.design_settings.title_added ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Added</TableCell> : null}\r\n                    {props.design_settings.title_days ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Days</TableCell> : null}\r\n                    {props.design_settings.title_type ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Type</TableCell> : null}\r\n                    {props.design_settings.title_volumes ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Volumes</TableCell> : null}\r\n                    {props.design_settings.title_chapters ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Chapters</TableCell> : null}\r\n                    {props.design_settings.title_genres ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Genres</TableCell> : null}\r\n                    {props.design_settings.title_mal_score ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Score</TableCell> : null}\r\n                    {props.design_settings.title_aired ?\r\n                        <TableCell className=\"color-gray\" align=\"center\">Aired</TableCell> : null}\r\n                </TableRow>\r\n            </TableHead>;\r\n        case BRANCH_EROGE:\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.index\r\n * @param {String} props.branch\r\n * @param {Object} props.entry\r\n * @param {Object} props.list_owner\r\n * @param {Object} props.list\r\n * @param {Object} props.design_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListTableRow(props) {\r\n    const row_title = formatTitleForUserListRows(props.branch, props.user_status, props.entry, props.design_settings, props.list_owner, props.list);\r\n    let image_url = getTitleCoverImage(row_title.cdn_cover_images, row_title.cover_images);\r\n    const [title_key, status_key] = getTitleAndStatusKeysFromBranch(props.branch)\r\n\r\n    return <TableRow>\r\n        <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n            {props.index}\r\n        </TableCell>\r\n        {props.design_settings.list_table_show_images ? <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n            <CyberLink to={row_title.link} classNames=\"row-image\">\r\n                <img src={image_url}/>\r\n            </CyberLink>\r\n        </TableCell> : null}\r\n        <TableCell component=\"th\" scope=\"row\" className=\"row-title-wrapper\">\r\n            <CyberLink to={row_title.link} classNames=\"row-title\">\r\n                {row_title.chipset_header ? row_title.chipset_header.map(chip => (\r\n                    chip ? <Chip variant=\"default\" size=\"small\" className={`chip-${chip['color']} header-chip`}\r\n                                 label={chip['label']}/> : null\r\n                )) : null}{' '}<span>{row_title.title}</span>\r\n            </CyberLink>\r\n        </TableCell>\r\n        {props.design_settings.title_edit_button && props.list_owner ?\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\" className=\"row-user-buttons\">\r\n                <CardUserEditTitleEntry\r\n                    branch={props.branch}\r\n                    id={row_title.id}\r\n                    title={props.entry[title_key]}\r\n                    user_status={props.entry[status_key]}\r\n                />\r\n            </TableCell> : null}\r\n        {row_title.column_set.map((value, i) => (\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\" key={i}>\r\n                {value ? value : <span className=\"color-gray\">---</span>}\r\n            </TableCell>\r\n        ))}\r\n    </TableRow>\r\n}","import {CoverImages, Manga, UserMangaEntry} from \"../../../../models\";\r\nimport {CYBER_GENESIS_URL, getPriorityLabel, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBookOpen, faCalendarAlt, faCheck, faImage, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport {ANIME_DISPLAY, MANGA_DISPLAY} from \"../../../../urls\";\r\nimport AnimeEntryModalForm from \"../../forms/anime/AnimeEntryModalForm\";\r\nimport UpdateAnimeEpisodeButton from \"../../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport MangaEntryModalForm from \"../../forms/manga/MangaEntryModalForm\";\r\nimport {UpdateMangaVolumeButton, UpdateMangaChapterButton} from \"../../forms/manga/UpdateMangaVolumeChapterButtons\";\r\n\r\n\r\nfunction getCoverImgUrl(entry) {\r\n    try {\r\n        return `${CYBER_GENESIS_URL}${entry[UserMangaEntry.manga][Manga.manga_cover_images][entry[UserMangaEntry.manga][Manga.manga_cover_images].length - 1][CoverImages.image]}`\r\n    } catch (e) {\r\n        return ''\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param props.selected {String}\r\n * @param props.setSelected {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListStatusButtons(props) {\r\n    const {selected, setSelected} = props;\r\n\r\n    return <>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton disabled={true}>All</CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.reading ? 'btn-contained-success' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.reading)\r\n                }}>\r\n                <FontAwesomeIcon icon={faBookOpen}/><span className=\"btn-label\">Reading</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.completed ? 'btn-contained-primary' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.completed)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCheck}/><span className=\"btn-label\">Completed</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.on_hold ? 'btn-contained-warning' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.on_hold)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPause}/><span className=\"btn-label\">On Hold</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.dropped ? 'btn-contained-danger' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.dropped)\r\n                }}>\r\n                <FontAwesomeIcon icon={faStop}/><span className=\"btn-label\">Dropped</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.plan_to_read ? 'btn-contained-default' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.plan_to_read)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCalendarAlt}/><span className=\"btn-label\">Planned</span>\r\n            </CyberButton>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListTableHead(props) {\r\n    const {list_owner} = props;\r\n    return <TableHead>\r\n        <TableRow>\r\n            <TableCell>#</TableCell>\r\n            <TableCell align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n            <TableCell align=\"center\" colSpan={list_owner ? 2 : 1}>Title</TableCell>\r\n            <TableCell align=\"center\">Score</TableCell>\r\n            <TableCell align=\"center\">Volumes</TableCell>\r\n            <TableCell align=\"center\">Chapters</TableCell>\r\n            <TableCell align=\"center\">Priority</TableCell>\r\n            <TableCell align=\"center\">Genres</TableCell>\r\n            <TableCell align=\"center\">Type</TableCell>\r\n            <TableCell align=\"center\">Started</TableCell>\r\n            <TableCell align=\"center\">Finished</TableCell>\r\n            <TableCell align=\"center\">Added</TableCell>\r\n            {/*<TableCell align=\"center\">Watch</TableCell>*/}\r\n        </TableRow>\r\n    </TableHead>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.index {Number}\r\n * @param props.entry {Object}\r\n * @param props.list_owner {Boolean}\r\n * @param props.list {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListTableRow(props) {\r\n    const {index, entry, list_owner, list} = props;\r\n\r\n    return entry[UserMangaEntry.manga] ? <TableRow>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n            {index}\r\n        </TableCell>\r\n        <TableCell className={{width: '70px'}} align=\"center\">\r\n            <CyberLink to={MANGA_DISPLAY(entry[UserMangaEntry.manga][Manga.id])} classNames=\"cover-img-link\">\r\n                <PreLoadImage src={getCoverImgUrl(entry)} alt={`Cover image`}/>\r\n            </CyberLink>\r\n        </TableCell>\r\n        <TableCell>\r\n            <CyberLink classNames=\"title-link\"\r\n                       to={MANGA_DISPLAY(entry[UserMangaEntry.manga][Manga.id])}>\r\n                {entry[UserMangaEntry.manga][Manga.title]}\r\n            </CyberLink>\r\n        </TableCell>\r\n        {list_owner ?\r\n            <TableCell>\r\n                <MangaEntryModalForm\r\n                    id={entry[UserMangaEntry.manga][Manga.id]}\r\n                    classNames=\"edit-btn\"\r\n                    user_manga_entry={entry}\r\n                    edit={true}\r\n                    list={list}/>\r\n            </TableCell> : null}\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary table-number\" size=\"small\"\r\n                  label={entry[UserMangaEntry.score]}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserMangaEntry.read_volumes]}{' '}\r\n                    / {entry[UserMangaEntry.manga][Manga.volumes]}\r\n                    {list_owner ?\r\n                        <UpdateMangaVolumeButton\r\n                            id={entry[UserMangaEntry.manga][Manga.id]}\r\n                            entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserMangaEntry.read_chapters]}{' '}\r\n                    / {entry[UserMangaEntry.manga][Manga.chapters]}\r\n                    {list_owner ?\r\n                        <UpdateMangaChapterButton\r\n                            id={entry[UserMangaEntry.manga][Manga.id]}\r\n                            entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\" size=\"small\"\r\n                  label={getPriorityLabel(entry[UserMangaEntry.priority])}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.manga][Manga.genres_csv] ?\r\n                entry[UserMangaEntry.manga][Manga.genres_csv].split(', ')\r\n                    .map(genre => (\r\n                        <Chip className=\"chip-primary genre\" size=\"small\"\r\n                              label={genre}/>\r\n                    )) : null}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\"\r\n                  label={entry[UserMangaEntry.manga][Manga.type]} size=\"small\"/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.start_date] ? <Moment date={entry[UserMangaEntry.start_date]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.finish_date] ? <Moment date={entry[UserMangaEntry.finish_date]}\r\n                                                         format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.date_added] ? <Moment date={entry[UserMangaEntry.date_added]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        {/*<TableCell align=\"center\">*/}\r\n        {/*    <CyberButton classNames=\"btn-contained-secondary\"><FontAwesomeIcon*/}\r\n        {/*        icon={faPlay}/></CyberButton>*/}\r\n        {/*</TableCell>*/}\r\n    </TableRow> : null\r\n}","import React, {useState} from \"react\";\r\n\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {ColorPicker} from \"material-ui-color\";\r\nimport store from \"../../../../store\";\r\nimport {setUserListDesignSettings} from \"../../../../actions/users\";\r\nimport {TEMPLATE_NAMES, TEMPLATES} from \"./user_list_settings_templates\";\r\n\r\nexport const CSS_FONTS = ['Quicksand', 'Abadi MT Condensed Light', 'Aharoni', 'Aharoni Bold', 'Aldhabi',\r\n    'AlternateGothic2 BT', 'Andale Mono', 'Andalus', 'Angsana New', 'AngsanaUPC', 'Aparajita', 'Apple Chancery',\r\n    'Arabic Typesetting', 'Arial', 'Arial Black', 'Arial narrow', 'Arial Nova', 'Arial Rounded MT Bold',\r\n    'Arnoldboecklin', 'Avanta Garde', 'Bahnschrift', 'Bahnschrift Light', 'Bahnschrift SemiBold',\r\n    'Bahnschrift SemiLight', 'Baskerville', 'Batang', 'BatangChe', 'Big Caslon', 'BIZ UDGothic', 'BIZ UDMincho Medium',\r\n    'Blippo', 'Bodoni MT', 'Book Antiqua', 'Book Antiqua', 'Bookman', 'Bradley Hand', 'Browallia New', 'BrowalliaUPC',\r\n    'Brush Script MT', 'Brush Script Std', 'Brushstroke', 'Calibri', 'Calibri Light', 'Calisto MT', 'Cambodian',\r\n    'Cambria', 'Cambria Math', 'Candara', 'Century Gothic', 'Chalkduster', 'Cherokee', 'Comic Sans', 'Comic Sans MS',\r\n    'Consolas', 'Constantia', 'Copperplate', 'Copperplate Gothic Light', 'Copperplate Gothic Bold', 'Corbel',\r\n    'Cordia New', 'CordiaUPC', 'Coronetscript', 'Courier', 'Courier New', 'DaunPenh', 'David', 'DengXian', 'DFKai-SB',\r\n    'Didot', 'DilleniaUPC', 'DokChampa', 'Dotum', 'DotumChe', 'Ebrima', 'Estrangelo Edessa', 'EucrosiaUPC', 'Euphemia',\r\n    'FangSong', 'Florence', 'Franklin Gothic Medium', 'FrankRuehl', 'FreesiaUPC', 'Futara', 'Gabriola', 'Gadugi',\r\n    'Garamond', 'Gautami', 'Geneva', 'Georgia', 'Georgia Pro', 'Gill Sans', 'Gill Sans Nova', 'Gisha',\r\n    'Goudy Old Style', 'Gulim', 'GulimChe', 'Gungsuh', 'GungsuhChe', 'Hebrew', 'Hoefler Text', 'HoloLens MDL2 Assets',\r\n    'Impact', 'Ink Free', 'IrisUPC', 'Iskoola Pota', 'Japanese', 'JasmineUPC', 'Javanese Text', 'Jazz LET', 'KaiTi',\r\n    'Kalinga', 'Kartika', 'Khmer UI', 'KodchiangUPC', 'Kokila', 'Korean', 'Lao', 'Lao UI', 'Latha', 'Leelawadee',\r\n    'Leelawadee UI', 'Leelawadee UI Semilight', 'Levenim MT', 'LilyUPC', 'Lucida Bright', 'Lucida Console',\r\n    'Lucida Handwriting', 'Lucida Sans', 'Lucida Sans Typewriter', 'Lucida Sans Unicode', 'Lucidatypewriter',\r\n    'Luminari', 'Malgun Gothic', 'Malgun Gothic Semilight', 'Mangal', 'Marker Felt', 'Marlett', 'Meiryo', 'Meiryo UI',\r\n    'Microsoft Himalaya', 'Microsoft JhengHei', 'Microsoft JhengHei UI', 'Microsoft New Tai Lue', 'Microsoft PhagsPa',\r\n    'Microsoft Sans Serif', 'Microsoft Tai Le', 'Microsoft Uighur', 'Microsoft YaHei', 'Microsoft YaHei UI',\r\n    'Microsoft Yi Baiti', 'MingLiU', 'MingLiU_HKSCS', 'MingLiU_HKSCS-ExtB', 'MingLiU-ExtB', 'Miriam', 'Monaco',\r\n    'Mongolian Baiti', 'MoolBoran', 'MS Gothic', 'MS Mincho', 'MS PGothic', 'MS PMincho', 'MS UI Gothic', 'MV Boli',\r\n    'Myanmar Text', 'Narkisim', 'Neue Haas Grotesk Text Pro', 'New Century Schoolbook', 'News Gothic MT', 'Nirmala UI',\r\n    'No automatic language associations', 'Noto', 'NSimSun', 'Nyala', 'Oldtown', 'Optima', 'Palatino',\r\n    'Palatino Linotype', 'papyrus', 'Parkavenue', 'Perpetua', 'Plantagenet Cherokee', 'PMingLiU', 'Raavi', 'Rockwell',\r\n    'Rockwell Extra Bold', 'Rockwell Nova', 'Rockwell Nova Cond', 'Rockwell Nova Extra Bold', 'Rod', 'Sakkal Majalla',\r\n    'Sanskrit Text', 'Segoe MDL2 Assets', 'Segoe Print', 'Segoe Script', 'Segoe UI', 'Segoe UI Emoji',\r\n    'Segoe UI Historic', 'Segoe UI Symbol', 'Shonar Bangla', 'Shruti', 'SimHei', 'SimKai', 'Simplified Arabic',\r\n    'Simplified Chinese', 'SimSun', 'SimSun-ExtB', 'Sitka', 'Snell Roundhan', 'Stencil Std', 'Sylfaen', 'Symbol',\r\n    'Tahoma', 'Thai', 'Times New Roman', 'Traditional Arabic', 'Traditional Chinese', 'Trattatello', 'Trebuchet MS',\r\n    'Tunga', 'UD Digi Kyokasho', 'UD Digi KyoKasho NK-R', 'UD Digi KyoKasho NP-R', 'UD Digi KyoKasho N-R',\r\n    'Urdu Typesetting', 'URW Chancery', 'Utsaah', 'Vani', 'Verdana', 'Verdana Pro', 'Vijaya', 'Vrinda', 'Webdings',\r\n    'Westminster', 'Wingdings', 'Yu Gothic', 'Yu Gothic UI', 'Yu Mincho', 'Zapf Chancery'\r\n];\r\n\r\n\r\n/**\r\n *\r\n * @param value {String}\r\n */\r\nfunction getInitialUnit(value) {\r\n    if (value.indexOf('rem') >= 0) return 'rem';\r\n    if (value.indexOf('%') >= 0) return '%';\r\n    if (value.indexOf('vh') >= 0) return 'vh';\r\n    if (value.indexOf('px') >= 0) return 'px';\r\n    return 'px';\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @param props.label {String}\r\n * @param props.html_id_prefix {String}\r\n * @param props.with_units {Boolean}\r\n * @param props.units {Array}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function NumberWithUnitField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1][props.key_2] : props.settings[props.key_1];\r\n    const [unit, setUnit] = useState(getInitialUnit(value));\r\n    let classnames = 'form-control form-control-outlined';\r\n    if (props.with_units)\r\n        classnames = 'form-control form-control-outlined form-control-left';\r\n\r\n    return <><FormControl className={classnames} variant=\"outlined\" size=\"small\">\r\n        <InputLabel htmlFor={`${props.html_id_prefix}-label`}>{props.label}</InputLabel>\r\n        <OutlinedInput\r\n            id={`${props.html_id_prefix}-label`}\r\n            type=\"number\"\r\n            labelWidth={0}\r\n            endAdornment={props.with_units ? null : <InputAdornment position=\"end\">{unit}</InputAdornment>}\r\n            value={parseFloat(value)}\r\n            onChange={(e) => {\r\n                props.key_2 ?\r\n                    props.handleChange(`${e.target.value}${unit}`, props.key_1, props.key_2) :\r\n                    props.handleChange(`${e.target.value}${unit}`, props.key_1)\r\n            }}\r\n        />\r\n    </FormControl>\r\n        {props.with_units ?\r\n            <FormControl className=\"form-control form-control-outlined form-control-right\" variant=\"outlined\"\r\n                         size=\"small\">\r\n                <InputLabel id={`${props.html_id_prefix}-unit-select`}>Unit</InputLabel>\r\n                <Select\r\n                    id={`${props.html_id_prefix}-unit-select`}\r\n                    labelId={`${props.html_id_prefix}-unit-select`}\r\n                    className=\"select-form-input\"\r\n                    value={unit}\r\n                    onClick={(e) => {\r\n                        // noinspection JSUnresolvedVariable\r\n                        setUnit(e.target.value)\r\n                    }}\r\n                >\r\n                    {props.units.map((unit_choice, x) => (\r\n                        <MenuItem key={x} value={unit_choice}>{unit_choice}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl> : null}</>\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @param props.label {String}\r\n * @param props.html_id_prefix {String}\r\n * @param props.multiline {Boolean}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function SimpleTextField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1][props.key_2] : props.settings[props.key_1];\r\n    return <TextField\r\n        label={props.label}\r\n        className=\"form-control\"\r\n        value={value}\r\n        multiline={props.multiline}\r\n        onChange={(e) => {\r\n            props.key_2 ?\r\n                props.handleChange(e.target.value, props.key_1, props.key_2) :\r\n                props.handleChange(e.target.value, props.key_1)\r\n        }}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @param props.label {String}\r\n * @param props.html_id_prefix {String}\r\n * @param props.options {Array}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function SelectWithOptionsField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1][props.key_2] : props.settings[props.key_1];\r\n    return <FormControl className=\"form-control form-control-outlined\" variant=\"outlined\" size=\"small\">\r\n        <InputLabel htmlFor={`${props.html_id_prefix}-label`}>{props.label}</InputLabel>\r\n        <Select\r\n            id={`${props.html_id_prefix}-label`}\r\n            className=\"select-form-input\"\r\n            label={props.label}\r\n            value={value}\r\n            onChange={(e) => {\r\n                props.key_2 ?\r\n                    props.handleChange(e.target.value, props.key_1, props.key_2) :\r\n                    props.handleChange(e.target.value, props.key_1)\r\n            }}\r\n        >\r\n            {props.options.map((option, x) => (\r\n                <MenuItem key={x} value={option}>{option}</MenuItem>\r\n            ))}\r\n        </Select>\r\n    </FormControl>\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ColorPickerField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1][props.key_2] : props.settings[props.key_1];\r\n    return <ColorPicker\r\n        value={value}\r\n        onChange={(e) => {\r\n            props.key_2 ?\r\n                props.handleChange(`#${e.hex}`, props.key_1, props.key_2) :\r\n                props.handleChange(`#${e.hex}`, props.key_1)\r\n        }}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @param props.key_1 {String}\r\n * @param props.key_2 {String}\r\n * @param props.label {String}\r\n * @param props.disabled {Boolean}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CheckBoxField(props) {\r\n    const value = props.key_2 ? props.settings[props.key_1][props.key_2] : props.settings[props.key_1];\r\n    return <FormControlLabel\r\n        disabled={props.disabled}\r\n        value={props.label}\r\n        control={<Checkbox color=\"primary\"/>}\r\n        label={props.label}\r\n        labelPlacement=\"start\"\r\n        checked={value}\r\n        onChange={(e) => {\r\n            // noinspection JSUnresolvedVariable\r\n            props.key_2 ?\r\n                props.handleChange(e.target.checked, props.key_1, props.key_2) :\r\n                props.handleChange(e.target.checked, props.key_1)\r\n        }}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ChooseTemplateField(props) {\r\n    const [value, setValue] = useState('')\r\n    return <FormControl className=\"form-control form-control-outlined\" variant=\"outlined\" size=\"small\">\r\n        <InputLabel htmlFor={'choose-template-label'}>Template</InputLabel>\r\n        <Select\r\n            id={'choose-template-label'}\r\n            className=\"select-form-input\"\r\n            label={'Template'}\r\n            value={value}\r\n            onChange={(e) => {\r\n                console.log('TEMPLATES[value]', e.target.value)\r\n                console.log('TEMPLATES[value]', TEMPLATES[e.target.value])\r\n                setValue(e.target.value)\r\n                const new_settings = {}\r\n                Object.assign(new_settings, TEMPLATES[e.target.value]);\r\n                store.dispatch(setUserListDesignSettings(props.branch, new_settings));\r\n            }}\r\n        >\r\n            {TEMPLATE_NAMES.map((option, x) => (\r\n                <MenuItem key={x} value={option}>{option}</MenuItem>\r\n            ))}\r\n        </Select>\r\n    </FormControl>\r\n}\r\n","export class UserListDesignSettings {\r\n    static type_cards = 'type_cards';\r\n    static list_margin_top = 'list_margin_top';\r\n    static about_text = 'about_text';\r\n    static cover_image = 'cover_image';\r\n    static background_image = 'background_image';\r\n    static apply_custom_css = 'apply_custom_css';\r\n    static cards = 'cards';\r\n    static table = 'table';\r\n    static list = 'list';\r\n    static title_info = 'title_info';\r\n}\r\n\r\nexport class AboutText {\r\n    static header = 'header';\r\n    static text = 'text';\r\n    static font_family = 'font_family';\r\n    static margin_top = 'margin_top';\r\n    static header_left = 'header_left';\r\n    static header_right = 'header_right';\r\n    static header_font_color = 'header_font_color';\r\n    static header_font_size = 'header_font_size';\r\n    static header_align = 'header_align';\r\n    static header_font_style = 'header_font_style';\r\n    static header_font_variant = 'header_font_variant';\r\n    static header_font_weight = 'header_font_weight';\r\n    static text_left = 'text_left';\r\n    static text_right = 'text_right';\r\n    static text_font_color = 'text_font_color';\r\n    static text_font_size = 'text_font_size';\r\n    static text_align = 'text_align';\r\n    static text_font_style = 'text_font_style';\r\n    static text_font_variant = 'text_font_variant';\r\n    static text_font_weight = 'text_font_weight';\r\n}\r\n\r\nexport class CoverImage {\r\n    static show = 'show';\r\n    static margin_top = 'margin_top';\r\n    static url = 'url';\r\n    static object_fit = 'object_fit';\r\n    static align = 'align';\r\n    static height = 'height';\r\n    static width = 'width';\r\n    static parallax = 'parallax';\r\n    static border_top_left = 'border_top_left';\r\n    static border_top_right = 'border_top_right';\r\n    static border_bottom_left = 'border_bottom_left';\r\n    static border_bottom_right = 'border_bottom_right';\r\n}\r\n\r\nexport class BackgroundImage {\r\n    static show = 'show';\r\n    static url = 'url';\r\n    static parallax = 'parallax';\r\n    static size = 'size';\r\n    static attachment = 'attachment';\r\n    static position_x = 'position_x';\r\n    static position_y = 'position_y';\r\n    static repeat_x = 'repeat_x';\r\n    static repeat_y = 'repeat_y';\r\n}\r\n\r\nexport class Cards {\r\n    static round_borders = 'round_borders';\r\n    static spacing = 'spacing';\r\n}\r\n\r\nexport class Table {\r\n    static background_color = 'background_color';\r\n    static backdrop_filter_blur = 'backdrop_filter_blur';\r\n    static round_borders = 'round_borders';\r\n    static show_images = 'show_images';\r\n    static row_lines = 'row_lines';\r\n}\r\n\r\nexport class List {\r\n    static margin_top = 'margin_top';\r\n    static padding_left = 'padding_left';\r\n    static padding_right = 'padding_right';\r\n}\r\n\r\nexport class TitleInfoAnime {\r\n    static user_score = 'user_score';\r\n    static edit_button = 'edit_button';\r\n    static progress = 'progress';\r\n    static status = 'status';\r\n    static priority = 'priority';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static started = 'started';\r\n    static finished = 'finished';\r\n    static added = 'added';\r\n    static days = 'days';\r\n    static type = 'type';\r\n    static episodes = 'episodes';\r\n    static mins_per_ep = 'mins_per_ep';\r\n    static rating = 'rating';\r\n    static genres = 'genres';\r\n    static mal_score = 'mal_score';\r\n    static aired = 'aired';\r\n}\r\n\r\nexport class TitleInfoManga {\r\n    static user_score = 'user_score';\r\n    static edit_button = 'edit_button';\r\n    static volumes_progress = 'volumes_progress';\r\n    static chapters_progress = 'chapters_progress';\r\n    static status = 'status';\r\n    static priority = 'priority';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static started = 'started';\r\n    static finished = 'finished';\r\n    static added = 'added';\r\n    static days = 'days';\r\n    static type = 'type';\r\n    static volumes = 'volumes';\r\n    static chapters = 'chapters';\r\n    static genres = 'genres';\r\n    static mal_score = 'mal_score';\r\n    static aired = 'aired';\r\n}","import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    ChooseTemplateField,\r\n    ColorPickerField, CSS_FONTS, NumberWithUnitField, SelectWithOptionsField, SimpleTextField\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport {AboutText, UserListDesignSettings} from \"../user_list_settings_schema\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport store from \"../../../../../store\";\r\nimport {setUserListDesignSettings} from \"../../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String}\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function GeneralTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Margin'}\r\n                html_id_prefix={'list-top-margin'}\r\n                key_1={UserListDesignSettings.list_margin_top}\r\n            />\r\n        </Grid>\r\n        {/*<Grid className=\"grid-item\" item xs={12}>*/}\r\n        {/*    <ChooseTemplateField/>*/}\r\n        {/*</Grid>*/}\r\n    </Grid>\r\n}\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CheckBoxField, NumberWithUnitField, SelectWithOptionsField, SimpleTextField,\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport React from \"react\";\r\nimport {CoverImage, UserListDesignSettings} from \"../user_list_settings_schema\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CoverImgTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.show}\r\n                label={'Cover Image'}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.parallax}\r\n                label={'Parallax'}\r\n                disabled={true}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}/>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.url}\r\n                label={'Url'}\r\n                html_id_prefix={'cover-image-url'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Options</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Margin'}\r\n                html_id_prefix={'cover-img-top-margin'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.margin_top}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Image Fit'}\r\n                html_id_prefix={'cover-image-fit'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.object_fit}\r\n                options={['contain', 'cover', 'fill', 'initial', 'revert', 'scale-down']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Align'}\r\n                html_id_prefix={'cover-image-align'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.align}\r\n                options={['center', 'left', 'right']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Size</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Height'}\r\n                html_id_prefix={'cover-image-height'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.height}\r\n                with_units={true}\r\n                units={['px', '%', 'vh', 'rem']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Width'}\r\n                html_id_prefix={'cover-image-width'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.width}\r\n                with_units={true}\r\n                units={['px', '%', 'vh', 'rem']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Borders</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Left'}\r\n                html_id_prefix={'cover-image-border-top-left'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.border_top_left}\r\n                with_units={true}\r\n                units={['px', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top Right'}\r\n                html_id_prefix={'cover-image-border-top-right'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.border_top_right}\r\n                with_units={true}\r\n                units={['px', '%']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Bottom Left'}\r\n                html_id_prefix={'cover-image-border-bottom-left'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.border_bottom_left}\r\n                with_units={true}\r\n                units={['px', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Bottom Right'}\r\n                html_id_prefix={'cover-image-border-bottom-right'}\r\n                key_1={UserListDesignSettings.cover_image}\r\n                key_2={CoverImage.border_bottom_right}\r\n                with_units={true}\r\n                units={['px', '%']}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CheckBoxField, SelectWithOptionsField, SimpleTextField,\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport React from \"react\";\r\nimport {BackgroundImage, UserListDesignSettings} from \"../user_list_settings_schema\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BackgroundImgTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.show}\r\n                label={'Background Image'}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.parallax}\r\n                label={'Parallax'}\r\n                disabled={true}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.url}\r\n                label={'Url'}\r\n                html_id_prefix={'background-image-url'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Options</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Size'}\r\n                html_id_prefix={'background-image-size'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.size}\r\n                options={['contain', 'cover', 'initial']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Attachment'}\r\n                html_id_prefix={'background-image-attachment'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.attachment}\r\n                options={['fixed', 'scroll']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p className=\"with-margin\">Position</p>\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={3}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Position X'}\r\n                html_id_prefix={'background-image-position-x'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.position_x}\r\n                options={['center', 'left', 'right']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={3}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Position Y'}\r\n                html_id_prefix={'background-image-position-y'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.position_y}\r\n                options={['center', 'top', 'bottom']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={3}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Repeat X'}\r\n                html_id_prefix={'background-image-repeat-x'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.repeat_x}\r\n                options={['no-repeat', 'repeat']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={3}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Repeat Y'}\r\n                html_id_prefix={'background-image-repeat-y'}\r\n                key_1={UserListDesignSettings.background_image}\r\n                key_2={BackgroundImage.repeat_y}\r\n                options={['no-repeat', 'repeat']}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}","import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    ColorPickerField, CSS_FONTS, NumberWithUnitField, SelectWithOptionsField, SimpleTextField\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport {AboutText, UserListDesignSettings} from \"../user_list_settings_schema\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MessageTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Message Top Margin'}\r\n                html_id_prefix={'about-text-top-margin'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.margin_top}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={6}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Font Family'}\r\n                html_id_prefix={'about-font-family'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.font_family}\r\n                options={CSS_FONTS}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header}\r\n                label={'Heading'}\r\n                html_id_prefix={'heading'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Left'}\r\n                html_id_prefix={'header-left'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_left}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Right'} html_id_prefix={'header-right'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_right}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Align'}\r\n                html_id_prefix={'header-align'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_align}\r\n                options={['center', 'left', 'right', 'justify']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item color-picker-field\" item xs={4}>\r\n            <ColorPickerField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_color}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Font Size'}\r\n                html_id_prefix={'header-font-size'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_size}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Style'}\r\n                html_id_prefix={'header-font-style'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_style}\r\n                options={['initial', 'italic']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Weight'}\r\n                html_id_prefix={'header-font-weight'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_weight}\r\n                options={['100', '200', '300', '400', '500', '600', '700', '800', '900']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Variant'}\r\n                html_id_prefix={'header-font-variant'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.header_font_variant}\r\n                options={['initial', 'all-petite-caps', 'all-small-caps', 'petite-caps', 'small-caps', 'unicase']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <SimpleTextField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text}\r\n                label={'Text'}\r\n                html_id_prefix={'text'}\r\n                multiline={true}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Left'}\r\n                html_id_prefix={'text-left'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_left}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Right'}\r\n                html_id_prefix={'text-right'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_right}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Align'}\r\n                html_id_prefix={'header-align'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_align}\r\n                options={['center', 'left', 'right', 'justify']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item color-picker-field\" item xs={4}>\r\n            <ColorPickerField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_color}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Font Size'}\r\n                html_id_prefix={'header-font-size'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_size}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Style'}\r\n                html_id_prefix={'text-font-style'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_style}\r\n                options={['initial', 'italic']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Weight'}\r\n                html_id_prefix={'text-font-weight'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_weight}\r\n                options={['100', '200', '300', '400', '500', '600', '700', '800', '900']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <SelectWithOptionsField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Variant'}\r\n                html_id_prefix={'text-font-variant'}\r\n                key_1={UserListDesignSettings.about_text}\r\n                key_2={AboutText.text_font_variant}\r\n                options={['initial', 'all-petite-caps', 'all-small-caps', 'petite-caps', 'small-caps', 'unicase']}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from \"react\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n    CheckBoxField,\r\n    ColorPickerField, CSS_FONTS, NumberWithUnitField, SelectWithOptionsField, SimpleTextField\r\n} from \"../userListDesignSettingsDialogFields\";\r\nimport {\r\n    AboutText,\r\n    Cards,\r\n    CoverImage,\r\n    List,\r\n    Table,\r\n    TitleInfoAnime, TitleInfoManga,\r\n    UserListDesignSettings\r\n} from \"../user_list_settings_schema\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faThLarge, faThList} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton} from \"../../../../layout/common/common\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../../globals\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String}\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ListTab(props) {\r\n    const {settings, handleChange} = props;\r\n\r\n    const [progress_key, progress_label] = props.branch === BRANCH_ANIME ? [TitleInfoAnime.progress, 'Progress'] : [TitleInfoManga.volumes_progress, 'Progress Volumes']\r\n\r\n    return <Grid container className=\"tab-content-container\">\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Top'}\r\n                html_id_prefix={'list-titles-margin-top'}\r\n                key_1={UserListDesignSettings.list}\r\n                key_2={List.margin_top}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Left'}\r\n                html_id_prefix={'list-titles-padding-left'}\r\n                key_1={UserListDesignSettings.list}\r\n                key_2={List.padding_left}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n        <Grid className=\"grid-item\" item xs={4}>\r\n            <NumberWithUnitField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                label={'Right'}\r\n                html_id_prefix={'list-titles-padding-right'}\r\n                key_1={UserListDesignSettings.list}\r\n                key_2={List.padding_right}\r\n                with_units={true}\r\n                units={['rem', '%']}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid className=\"grid-item\" item xs={12}>\r\n            <CyberButton\r\n                classNames=\"list-type-btn btn-contained-primary\" variant=\"contained\"\r\n                onClick={() => {\r\n                    props.handleChange(!settings[UserListDesignSettings.type_cards], UserListDesignSettings.type_cards)\r\n                }}\r\n            >\r\n                <FontAwesomeIcon\r\n                    icon={settings[UserListDesignSettings.type_cards] ? faThList : faThLarge}\r\n                    title={settings[UserListDesignSettings.type_cards] ? 'Table' : 'Cards'}\r\n                />\r\n            </CyberButton>{' '}\r\n            List type {settings[UserListDesignSettings.type_cards] ? 'Cards' : 'Table'}\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n            <p>{settings[UserListDesignSettings.type_cards] ? 'Cards options' : 'Table options'}</p>\r\n        </Grid>\r\n\r\n        {settings[UserListDesignSettings.type_cards] ? <>\r\n            <Grid className=\"grid-item\" item xs={4}>\r\n                <NumberWithUnitField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    label={'Spacing'}\r\n                    html_id_prefix={'user-list-cards-spacing'}\r\n                    key_1={UserListDesignSettings.cards}\r\n                    key_2={Cards.spacing}\r\n                />\r\n            </Grid>\r\n            <Grid className=\"grid-item\" item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.cards}\r\n                    key_2={Cards.round_borders}\r\n                    label={'Round Borders'}\r\n                />\r\n            </Grid></> : <>\r\n            <Grid className=\"grid-item color-picker-field\" item xs={4} >\r\n                <ColorPickerField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.background_color}\r\n                />\r\n            </Grid>\r\n            <Grid className=\"grid-item\" item xs={8}>\r\n                <NumberWithUnitField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    label={'Filter'}\r\n                    html_id_prefix={'user-list-table-backdrop-filter'}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.backdrop_filter_blur}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.round_borders}\r\n                    label={'Round Borders'}\r\n                />\r\n            </Grid>\r\n            <Grid className=\"grid-item\" item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.show_images}\r\n                    label={'Show Images'}\r\n                />\r\n            </Grid>\r\n            <Grid className=\"grid-item\" item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.table}\r\n                    key_2={Table.row_lines}\r\n                    label={'Row Lines'}\r\n                />\r\n            </Grid>\r\n        </>}\r\n\r\n        {!settings[UserListDesignSettings.type_cards] ? <>\r\n            <Grid className=\"grid-heading\" item xs={12}>\r\n                <p>My info</p>\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.user_score}\r\n                    label={'Score'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.edit_button}\r\n                    label={'Edit Btn.'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={progress_key}\r\n                    label={progress_label}\r\n                />\r\n            </Grid>\r\n            {props.branch === BRANCH_MANGA ? <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoManga.chapters_progress}\r\n                    label={'Progress Chapters'}\r\n                />\r\n            </Grid> : null}\r\n\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.status}\r\n                    label={'Status'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.priority}\r\n                    label={'Priority'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.comments}\r\n                    label={'Comments'}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.tags}\r\n                    label={'Tags'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.started}\r\n                    label={'Started Watching'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.finished}\r\n                    label={'Finished Watching'}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.added}\r\n                    label={'Added to List'}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <CheckBoxField\r\n                    settings={settings}\r\n                    handleChange={handleChange}\r\n                    key_1={UserListDesignSettings.title_info}\r\n                    key_2={TitleInfoAnime.days}\r\n                    label={'Days'}\r\n                />\r\n            </Grid>\r\n        </> : null}\r\n\r\n        <Grid className=\"grid-heading\" item xs={12}>\r\n            <p>Title info</p>\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.type}\r\n                label={'Type'}\r\n            />\r\n        </Grid>\r\n        {props.branch === BRANCH_ANIME ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.episodes}\r\n                label={'Episodes'}\r\n            />\r\n        </Grid> : null}\r\n        {props.branch === BRANCH_MANGA ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoManga.volumes}\r\n                label={'Volumes'}\r\n            />\r\n        </Grid> : null}\r\n        {props.branch === BRANCH_MANGA ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoManga.chapters}\r\n                label={'Chapters'}\r\n            />\r\n        </Grid> : null}\r\n        {props.branch === BRANCH_ANIME ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.mins_per_ep}\r\n                label={'Mins per Ep.'}\r\n            />\r\n        </Grid> : null}\r\n\r\n        {props.branch === BRANCH_ANIME ? <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.rating}\r\n                label={'Rating'}\r\n            />\r\n        </Grid> : null}\r\n        <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.genres}\r\n                label={'Genres'}\r\n            />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.mal_score}\r\n                label={'MAL Score'}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n            <CheckBoxField\r\n                settings={settings}\r\n                handleChange={handleChange}\r\n                key_1={UserListDesignSettings.title_info}\r\n                key_2={TitleInfoAnime.aired}\r\n                label={'Aired'}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../../../../layout/sounds\";\r\nimport {GeneralTab} from \"./GeneralTab\";\r\nimport {CoverImgTab} from \"./CoverImgTab\";\r\nimport {BackgroundImgTab} from \"./BackgroundImgTab\";\r\nimport {MessageTab} from \"./MessageTab\";\r\nimport {ListTab} from \"./ListTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.branch {String}\r\n * @param props.settings {Object}\r\n * @param props.handleChange {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListDesignSettingsDialogTabs(props) {\r\n    const {settings, handleChange} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return <div className={classes.root + ' tabs-root'}>\r\n        <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleTabChange}\r\n                indicatorColor=\"secondary\"\r\n                textColor=\"default\"\r\n                variant=\"scrollable\"\r\n                scrollButtons=\"auto\"\r\n            >\r\n                <Tab label=\"General\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"Message\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"Cover Img\" {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"Bg Img\" {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                <Tab label=\"List\" {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n            </Tabs>\r\n        </AppBar>\r\n        <SwipeableViews\r\n            axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n            index={value}\r\n            onChangeIndex={handleChangeIndex}\r\n        >\r\n            <TabPanel value={value} index={0} dir={theme.direction}>\r\n                <GeneralTab branch={props.branch} settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1} dir={theme.direction}>\r\n                <MessageTab settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2} dir={theme.direction}>\r\n                <CoverImgTab settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={3} dir={theme.direction}>\r\n                <BackgroundImgTab settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n            <TabPanel value={value} index={4} dir={theme.direction}>\r\n                <ListTab branch={props.branch} settings={settings} handleChange={handleChange}/>\r\n            </TabPanel>\r\n        </SwipeableViews>\r\n    </div>\r\n}","import React, {useState} from 'react'\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {setUserListDesignSettings} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {UserListDesignSettingsDialogTabs} from \"./tabs/userListDesignSettingsDialogTabs\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch\r\n * @param props.user_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListDesignSettingsDialog(props) {\r\n    let user_settings = {};\r\n    Object.assign(user_settings, props.user_settings);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [settings, setSettings] = useState(user_settings);\r\n\r\n    const handleOpen = () => {\r\n        setSettings(user_settings);\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (reset = true) => {\r\n        if (reset) {\r\n            let previous_settings = {};\r\n            if (props.branch === BRANCH_ANIME)\r\n                Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_anime_list_design_settings]);\r\n            else if (props.branch === BRANCH_MANGA)\r\n                Object.assign(previous_settings, store.getState().auth.user[User.profile][Profile.user_manga_list_design_settings]);\r\n            store.dispatch(setUserListDesignSettings(props.branch, previous_settings));\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleChange = (value, key_1, key_2) => {\r\n        if (key_2)\r\n            setSettings((prevSettings) => {\r\n                store.dispatch(setUserListDesignSettings(props.branch, {\r\n                    ...prevSettings,\r\n                    [key_1]: {...prevSettings[key_1], [key_2]: value}\r\n                }));\r\n                return {...prevSettings, [key_1]: {...prevSettings[key_1], [key_2]: value}}\r\n            });\r\n        else\r\n            setSettings((prevSettings) => {\r\n                store.dispatch(setUserListDesignSettings(props.branch, {...prevSettings, [key_1]: value}));\r\n                return {...prevSettings, [key_1]: value}\r\n            });\r\n    };\r\n\r\n    return <div className=\"user-list-design-settings-dialog-container\">\r\n        <CyberButton classNames=\"user-edit-list-btn btn-contained-primary\" onClick={handleOpen}\r\n                     variant=\"contained\" title={`Edit ${props.branch} list design`}>\r\n            <FontAwesomeIcon icon={faEdit}/>\r\n        </CyberButton>\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            id=\"User-List-Design-Settings-Dialog\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle>User {props.branch} list settings</DialogTitle>\r\n            <DialogContent className=\"settings-wrapper\">\r\n                <UserListDesignSettingsDialogTabs branch={props.branch} settings={settings} handleChange={handleChange}/>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <CyberButton variant=\"outlined\" title={'Save settings'} onClick={() => {\r\n                    store.dispatch(setUserListDesignSettings(props.branch, settings, true));\r\n                    handleClose(false);\r\n                }}>\r\n                    Save\r\n                </CyberButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n}\r\n","import {\r\n    Anime,\r\n    ApiResult, Manga,\r\n    UserAnimeDisplaySettingsSchema, UserAnimeEntry,\r\n    UserErogeDisplaySettingsSchema,\r\n    UserMangaDisplaySettingsSchema, UserMangaEntry\r\n} from \"../../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {getTitleCoverImage, isEmpty} from \"../../functions\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faImage} from \"@fortawesome/free-solid-svg-icons\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TitleRow from \"../../layout/rows/TitleRow\";\r\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../../../globals\";\r\nimport {UserListTableHead, UserListTableRow} from \"./anime/tableView\";\r\n\r\n\r\nfunction getTitleAndUserStatusFromBranch(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return [UserAnimeEntry.anime, Anime.id]\r\n        case BRANCH_MANGA:\r\n            return [UserMangaEntry.manga, Manga.id]\r\n    }\r\n}\r\n\r\n\r\nfunction noResult(branch, filtered_titles) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (isEmpty(filtered_titles[ApiResult.results]?.[0][UserAnimeEntry.anime]))\r\n                return true\r\n            break\r\n        case BRANCH_MANGA:\r\n            if (isEmpty(filtered_titles[ApiResult.results]?.[0][UserMangaEntry.manga]))\r\n                return true\r\n            break\r\n        default:\r\n            return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.gridlist_cols\r\n * @param props.filtered_titles\r\n * @param props.branch\r\n * @param props.current_page\r\n * @param props.items_per_page\r\n * @param props.user_entry_statuses\r\n * @param props.list_owner {Boolean}\r\n * @param props.design_settings {Object}\r\n * @returns {JSX.Element}\r\n */\r\nexport function UserListCardsView(props) {\r\n    if (noResult(props.branch, props.filtered_titles))\r\n        return null\r\n\r\n    const [title_key, id_key] = getTitleAndUserStatusFromBranch(props.branch)\r\n\r\n    return <GridList className=\"list-cards-view\" cellHeight={400} cols={props.gridlist_cols} style={{margin: '0 0 10px 0'}}>\r\n        {props.filtered_titles[ApiResult.results].map((entry, i) => (\r\n            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                <GridListTile\r\n                    cols={1}\r\n                    className={props.design_settings.list_cards_round_borders ? 'round-borders' : undefined}\r\n                    style={{padding: props.design_settings.list_cards_spacing}}\r\n                >\r\n                    <TitleCard\r\n                        branch={props.branch}\r\n                        title={entry[title_key]}\r\n                        user_buttons={!!props.list_owner}\r\n                        index={i + ((props.current_page * props.items_per_page) - (props.items_per_page - 1))}\r\n                        user_status={props.list_owner ? !isEmpty(props.user_entry_statuses) ?\r\n                            props.user_entry_statuses[`${entry[title_key][id_key]}`] : null : null}\r\n                        design_settings={props.design_settings}\r\n                    />\r\n                </GridListTile>\r\n            </Grow>\r\n        ))}\r\n    </GridList>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.filtered_titles\r\n * @param props.branch\r\n * @param props.current_page\r\n * @param props.items_per_page\r\n * @param props.user_entry_statuses\r\n * @param {Boolean} props.list_owner\r\n * @param {Object} props.list\r\n * @param {Object} props.design_settings\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserListTableView(props) {\r\n    if (noResult(props.branch, props.filtered_titles))\r\n        return null\r\n\r\n    let titles_container_styles = {\r\n        backgroundColor: props.design_settings.list_table_background_color,\r\n        backdropFilter: `blur(${props.design_settings.list_table_backdrop_filter_blur})`\r\n    }\r\n\r\n    if (props.design_settings.list_table_round_borders)\r\n        titles_container_styles['borderRadius'] = '15px';\r\n\r\n    let classnames = 'list-table-view'\r\n    if (!props.design_settings.list_table_row_lines)\r\n        classnames = classnames + ' list-table-view-no-row-lines'\r\n\r\n    const [title_key, id_key] = getTitleAndUserStatusFromBranch(props.branch)\r\n\r\n    return <TableContainer className={classnames} style={titles_container_styles}>\r\n        <Table aria-label=\"user list table\">\r\n            <UserListTableHead\r\n                branch={props.branch}\r\n                design_settings={props.design_settings}\r\n                list_owner={props.list_owner}\r\n            />\r\n            <TableBody>\r\n                {props.filtered_titles[ApiResult.results].map((entry, i) => (\r\n                    <UserListTableRow\r\n                        key={i}\r\n                        branch={props.branch}\r\n                        list_owner={props.list_owner}\r\n                        list={props.list}\r\n                        entry={entry}\r\n                        index={i + ((props.current_page * props.items_per_page) - (props.items_per_page - 1))}\r\n                        user_status={props.list_owner ? !isEmpty(props.user_entry_statuses) ?\r\n                            props.user_entry_statuses[`${entry[title_key][id_key]}`] : null : null}\r\n                        design_settings={props.design_settings}\r\n                    />\r\n                ))}\r\n            </TableBody>\r\n        </Table>\r\n    </TableContainer>\r\n}","import {BRANCH_ANIME, BRANCH_MANGA, USER_ANIME_STATUSES, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {\r\n    AboutText,\r\n    BackgroundImage,\r\n    Cards,\r\n    CoverImage,\r\n    List, Table, TitleInfoAnime, TitleInfoManga,\r\n    UserListDesignSettings\r\n} from \"./user_list_settings_schema\";\r\nimport {Profile, User} from \"../../../../models\";\r\n\r\n\r\nexport function getInitialSelected(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return USER_ANIME_STATUSES.watching;\r\n        case BRANCH_MANGA:\r\n            return USER_MANGA_STATUSES.reading;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getUserListDesignSettingsFromBranch(branch, anime_settings, manga_settings) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return anime_settings;\r\n        case BRANCH_MANGA:\r\n            return manga_settings;\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\n\r\nexport function formatUserListDesignSettingsFromBranch(branch, owner, visited_user, user_settings) {\r\n    let settings = {\r\n        list_type_cards: true,\r\n        list_margin_top: '0rem',\r\n\r\n        about_header: '',\r\n        about_text: '',\r\n        about_font_family: '',\r\n        about_margin_top: '',\r\n        about_header_left: '0rem',\r\n        about_header_right: '0rem',\r\n        about_header_font_color: '#ffffff',\r\n        about_header_font_size: '3rem',\r\n        about_header_align: 'center',\r\n        about_header_font_style: 'initial',\r\n        about_header_font_variant: 'initial',\r\n        about_header_font_weight: '100',\r\n        about_text_left: '0rem',\r\n        about_text_right: '0rem',\r\n        about_text_font_color: '#ffffff',\r\n        about_text_font_size: '1rem',\r\n        about_text_align: 'center',\r\n        about_text_font_style: 'initial',\r\n        about_text_font_variant: 'initial',\r\n        about_text_font_weight: '100',\r\n\r\n        cover_image_show: false,\r\n        cover_image_margin_top: '15rem',\r\n        cover_image_url: '',\r\n        cover_image_object_fit: 'cover',\r\n        cover_image_align: 'center',\r\n        cover_image_height: '100vh',\r\n        cover_image_width: '100%',\r\n        cover_image_parallax: '100%',\r\n        cover_image_border_top_left: '0',\r\n        cover_image_border_top_right: '0',\r\n        cover_image_border_bottom_left: '0',\r\n        cover_image_border_bottom_right: '0',\r\n\r\n        background_image_show: false,\r\n        background_image_url: '',\r\n        background_image_size: '',\r\n        background_image_attachment: '',\r\n        background_image_position_x: '',\r\n        background_image_position_y: '',\r\n        background_image_repeat_x: '',\r\n        background_image_repeat_y: '',\r\n\r\n        list_titles_margin_top: '3rem',\r\n        list_titles_padding_left: '0rem',\r\n        list_titles_padding_right: '0rem',\r\n\r\n        list_cards_round_borders: true,\r\n        list_cards_spacing: '2px',\r\n\r\n        list_table_background_color: '#1f225199',\r\n        list_table_backdrop_filter_blur: '3px',\r\n        list_table_round_borders: true,\r\n        list_table_show_images: true,\r\n        list_table_row_lines: true,\r\n\r\n        title_user_score: true,\r\n        title_edit_button: true,\r\n        title_progress: true,\r\n        title_progress_2: true,\r\n        title_status: true,\r\n        title_priority: true,\r\n        title_comments: true,\r\n        title_tags: true,\r\n        title_started: true,\r\n        title_finished: true,\r\n        title_added: true,\r\n        title_days: true,\r\n        title_type: true,\r\n        title_episodes: true,\r\n        title_volumes: true,\r\n        title_chapters: true,\r\n        title_mins_per_ep: true,\r\n        title_rating: true,\r\n        title_genres: true,\r\n        title_mal_score: true,\r\n        title_aired: true,\r\n    };\r\n\r\n    if (isEmpty(user_settings)) return settings;\r\n\r\n    if (owner) {\r\n        settings.list_type_cards = user_settings[UserListDesignSettings.type_cards];\r\n        settings.list_margin_top = user_settings[UserListDesignSettings.list_margin_top];\r\n\r\n        settings.about_header = user_settings[UserListDesignSettings.about_text][AboutText.header];\r\n        settings.about_text = user_settings[UserListDesignSettings.about_text][AboutText.text];\r\n        settings.about_font_family = user_settings[UserListDesignSettings.about_text][AboutText.font_family];\r\n        settings.about_margin_top = user_settings[UserListDesignSettings.about_text][AboutText.margin_top];\r\n        settings.about_header_left = user_settings[UserListDesignSettings.about_text][AboutText.header_left];\r\n        settings.about_header_right = user_settings[UserListDesignSettings.about_text][AboutText.header_right];\r\n        settings.about_header_font_color = user_settings[UserListDesignSettings.about_text][AboutText.header_font_color];\r\n        settings.about_header_font_size = user_settings[UserListDesignSettings.about_text][AboutText.header_font_size];\r\n        settings.about_header_align = user_settings[UserListDesignSettings.about_text][AboutText.header_align];\r\n        settings.about_header_font_style = user_settings[UserListDesignSettings.about_text][AboutText.header_font_style];\r\n        settings.about_header_font_variant = user_settings[UserListDesignSettings.about_text][AboutText.header_font_variant];\r\n        settings.about_header_font_weight = user_settings[UserListDesignSettings.about_text][AboutText.header_font_weight];\r\n        settings.about_text_left = user_settings[UserListDesignSettings.about_text][AboutText.text_left];\r\n        settings.about_text_right = user_settings[UserListDesignSettings.about_text][AboutText.text_right];\r\n        settings.about_text_font_color = user_settings[UserListDesignSettings.about_text][AboutText.text_font_color];\r\n        settings.about_text_font_size = user_settings[UserListDesignSettings.about_text][AboutText.text_font_size];\r\n        settings.about_text_align = user_settings[UserListDesignSettings.about_text][AboutText.text_align];\r\n        settings.about_text_font_style = user_settings[UserListDesignSettings.about_text][AboutText.text_font_style];\r\n        settings.about_text_font_variant = user_settings[UserListDesignSettings.about_text][AboutText.text_font_variant];\r\n        settings.about_text_font_weight = user_settings[UserListDesignSettings.about_text][AboutText.text_font_weight];\r\n\r\n        settings.cover_image_show = user_settings[UserListDesignSettings.cover_image][CoverImage.show];\r\n        settings.cover_image_margin_top = user_settings[UserListDesignSettings.cover_image][CoverImage.margin_top];\r\n        settings.cover_image_url = user_settings[UserListDesignSettings.cover_image][CoverImage.url];\r\n        settings.cover_image_object_fit = user_settings[UserListDesignSettings.cover_image][CoverImage.object_fit];\r\n        settings.cover_image_align = user_settings[UserListDesignSettings.cover_image][CoverImage.align];\r\n        settings.cover_image_height = user_settings[UserListDesignSettings.cover_image][CoverImage.height];\r\n        settings.cover_image_width = user_settings[UserListDesignSettings.cover_image][CoverImage.width];\r\n        settings.cover_image_parallax = user_settings[UserListDesignSettings.cover_image][CoverImage.parallax];\r\n        settings.cover_border_top_left = user_settings[UserListDesignSettings.cover_image][CoverImage.border_top_left];\r\n        settings.cover_border_top_right = user_settings[UserListDesignSettings.cover_image][CoverImage.border_top_right];\r\n        settings.cover_border_bottom_left = user_settings[UserListDesignSettings.cover_image][CoverImage.border_bottom_left];\r\n        settings.cover_border_bottom_right = user_settings[UserListDesignSettings.cover_image][CoverImage.border_bottom_right];\r\n\r\n        settings.background_image_show = user_settings[UserListDesignSettings.background_image][BackgroundImage.show];\r\n        settings.background_image_url = user_settings[UserListDesignSettings.background_image][BackgroundImage.url];\r\n        settings.background_image_size = user_settings[UserListDesignSettings.background_image][BackgroundImage.size];\r\n        settings.background_image_attachment = user_settings[UserListDesignSettings.background_image][BackgroundImage.attachment];\r\n        settings.background_image_position_x = user_settings[UserListDesignSettings.background_image][BackgroundImage.position_x];\r\n        settings.background_image_position_y = user_settings[UserListDesignSettings.background_image][BackgroundImage.position_y];\r\n        settings.background_image_repeat_x = user_settings[UserListDesignSettings.background_image][BackgroundImage.repeat_x];\r\n        settings.background_image_repeat_y = user_settings[UserListDesignSettings.background_image][BackgroundImage.repeat_y];\r\n\r\n        settings.list_titles_margin_top = user_settings[UserListDesignSettings.list][List.margin_top];\r\n        settings.list_titles_padding_left = user_settings[UserListDesignSettings.list][List.padding_left];\r\n        settings.list_titles_padding_right = user_settings[UserListDesignSettings.list][List.padding_right];\r\n\r\n        settings.list_cards_round_borders = user_settings[UserListDesignSettings.cards][Cards.round_borders];\r\n        settings.list_cards_spacing = user_settings[UserListDesignSettings.cards][Cards.spacing];\r\n\r\n        settings.list_table_background_color = user_settings[UserListDesignSettings.table][Table.background_color];\r\n        settings.list_table_backdrop_filter_blur = user_settings[UserListDesignSettings.table][Table.backdrop_filter_blur];\r\n        settings.list_table_round_borders = user_settings[UserListDesignSettings.table][Table.round_borders];\r\n        settings.list_table_show_images = user_settings[UserListDesignSettings.table][Table.show_images];\r\n        settings.list_table_row_lines = user_settings[UserListDesignSettings.table][Table.row_lines];\r\n    }\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (owner) {\r\n                settings.title_user_score = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.user_score];\r\n                settings.title_edit_button = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.edit_button];\r\n                settings.title_progress = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.progress];\r\n                settings.title_status = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.status];\r\n                settings.title_priority = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.priority];\r\n                settings.title_comments = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.comments];\r\n                settings.title_tags = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.tags];\r\n                settings.title_started = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.started];\r\n                settings.title_finished = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.finished];\r\n                settings.title_added = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.added];\r\n                settings.title_days = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.days];\r\n                settings.title_type = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.type];\r\n                settings.title_episodes = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.episodes];\r\n                settings.title_mins_per_ep = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.mins_per_ep];\r\n                settings.title_rating = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.rating];\r\n                settings.title_genres = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.genres];\r\n                settings.title_mal_score = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.mal_score];\r\n                settings.title_aired = user_settings[UserListDesignSettings.title_info][TitleInfoAnime.aired];\r\n            } else {\r\n                settings.list_type_cards = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.type_cards];\r\n                settings.list_margin_top = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.list_margin_top];\r\n\r\n                settings.about_header = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header];\r\n                settings.about_text = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text];\r\n                settings.about_font_family = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.font_family];\r\n                settings.about_margin_top = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.margin_top];\r\n                settings.about_header_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_left];\r\n                settings.about_header_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_right];\r\n                settings.about_header_font_color = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_color];\r\n                settings.about_header_font_size = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_size];\r\n                settings.about_header_align = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_align];\r\n                settings.about_header_font_style = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_style];\r\n                settings.about_header_font_variant = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_variant];\r\n                settings.about_header_font_weight = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_weight];\r\n                settings.about_text_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_left];\r\n                settings.about_text_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_right];\r\n                settings.about_text_font_color = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_color];\r\n                settings.about_text_font_size = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_size];\r\n                settings.about_text_align = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_align];\r\n                settings.about_text_font_style = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_style];\r\n                settings.about_text_font_variant = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_variant];\r\n                settings.about_text_font_weight = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_weight];\r\n\r\n                settings.cover_image_show = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.show];\r\n                settings.cover_image_margin_top = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.margin_top];\r\n                settings.cover_image_url = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.url];\r\n                settings.cover_image_object_fit = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.object_fit];\r\n                settings.cover_image_align = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.align];\r\n                settings.cover_image_height = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.height];\r\n                settings.cover_image_width = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.width];\r\n                settings.cover_image_parallax = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.parallax];\r\n                settings.cover_border_top_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_top_left];\r\n                settings.cover_border_top_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_top_right];\r\n                settings.cover_border_bottom_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_bottom_left];\r\n                settings.cover_border_bottom_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_bottom_right];\r\n\r\n                settings.background_image_show = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.show];\r\n                settings.background_image_url = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.url];\r\n                settings.background_image_size = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.size];\r\n                settings.background_image_attachment = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.attachment];\r\n                settings.background_image_position_x = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.position_x];\r\n                settings.background_image_position_y = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.position_y];\r\n                settings.background_image_repeat_x = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.repeat_x];\r\n                settings.background_image_repeat_y = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.repeat_y];\r\n\r\n                settings.list_titles_margin_top = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.list][List.margin_top];\r\n                settings.list_titles_padding_left = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.list][List.padding_left];\r\n                settings.list_titles_padding_right = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.list][List.padding_right];\r\n\r\n                settings.list_cards_round_borders = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cards][Cards.round_borders];\r\n                settings.list_cards_spacing = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.cards][Cards.spacing];\r\n\r\n                settings.list_table_background_color = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.background_color];\r\n                settings.list_table_backdrop_filter_blur = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.backdrop_filter_blur];\r\n                settings.list_table_round_borders = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.round_borders];\r\n                settings.list_table_show_images = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.show_images];\r\n                settings.list_table_row_lines = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.table][Table.row_lines];\r\n\r\n                settings.title_user_score = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.user_score];\r\n                settings.title_edit_button = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.edit_button];\r\n                settings.title_progress = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.progress];\r\n                settings.title_status = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.status];\r\n                settings.title_priority = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.priority];\r\n                settings.title_comments = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.comments];\r\n                settings.title_tags = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.tags];\r\n                settings.title_started = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.started];\r\n                settings.title_finished = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.finished];\r\n                settings.title_added = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.added];\r\n                settings.title_days = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.days];\r\n                settings.title_type = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.type];\r\n                settings.title_episodes = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.episodes];\r\n                settings.title_mins_per_ep = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.mins_per_ep];\r\n                settings.title_rating = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.rating];\r\n                settings.title_genres = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.genres];\r\n                settings.title_mal_score = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.mal_score];\r\n                settings.title_aired = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.aired];\r\n\r\n                settings.title_user_score = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.user_score];\r\n                settings.title_edit_button = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.edit_button];\r\n                settings.title_progress = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.progress];\r\n                settings.title_status = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.status];\r\n                settings.title_priority = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.priority];\r\n                settings.title_comments = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.comments];\r\n                settings.title_tags = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.tags];\r\n                settings.title_started = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.started];\r\n                settings.title_finished = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.finished];\r\n                settings.title_added = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.added];\r\n                settings.title_days = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.days];\r\n                settings.title_type = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.type];\r\n                settings.title_episodes = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.episodes];\r\n                settings.title_mins_per_ep = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.mins_per_ep];\r\n                settings.title_rating = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.rating];\r\n                settings.title_genres = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.genres];\r\n                settings.title_mal_score = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.mal_score];\r\n                settings.title_aired = visited_user[User.profile][Profile.user_anime_list_design_settings][UserListDesignSettings.title_info][TitleInfoAnime.aired];\r\n            }\r\n            return settings;\r\n        case BRANCH_MANGA:\r\n            if (owner) {\r\n                settings.title_user_score = user_settings[UserListDesignSettings.title_info][TitleInfoManga.user_score];\r\n                settings.title_edit_button = user_settings[UserListDesignSettings.title_info][TitleInfoManga.edit_button];\r\n                settings.title_progress = user_settings[UserListDesignSettings.title_info][TitleInfoManga.volumes_progress];\r\n                settings.title_progress_2 = user_settings[UserListDesignSettings.title_info][TitleInfoManga.chapters_progress];\r\n                settings.title_status = user_settings[UserListDesignSettings.title_info][TitleInfoManga.status];\r\n                settings.title_priority = user_settings[UserListDesignSettings.title_info][TitleInfoManga.priority];\r\n                settings.title_comments = user_settings[UserListDesignSettings.title_info][TitleInfoManga.comments];\r\n                settings.title_tags = user_settings[UserListDesignSettings.title_info][TitleInfoManga.tags];\r\n                settings.title_started = user_settings[UserListDesignSettings.title_info][TitleInfoManga.started];\r\n                settings.title_finished = user_settings[UserListDesignSettings.title_info][TitleInfoManga.finished];\r\n                settings.title_added = user_settings[UserListDesignSettings.title_info][TitleInfoManga.added];\r\n                settings.title_days = user_settings[UserListDesignSettings.title_info][TitleInfoManga.days];\r\n                settings.title_type = user_settings[UserListDesignSettings.title_info][TitleInfoManga.type];\r\n                settings.title_volumes = user_settings[UserListDesignSettings.title_info][TitleInfoManga.volumes];\r\n                settings.title_chapters = user_settings[UserListDesignSettings.title_info][TitleInfoManga.chapters];\r\n                settings.title_genres = user_settings[UserListDesignSettings.title_info][TitleInfoManga.genres];\r\n                settings.title_mal_score = user_settings[UserListDesignSettings.title_info][TitleInfoManga.mal_score];\r\n                settings.title_aired = user_settings[UserListDesignSettings.title_info][TitleInfoManga.aired];\r\n            } else {\r\n                settings.list_type_cards = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.type_cards];\r\n                settings.list_margin_top = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.list_margin_top];\r\n\r\n                settings.about_header = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header];\r\n                settings.about_text = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text];\r\n                settings.about_font_family = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.font_family];\r\n                settings.about_margin_top = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.margin_top];\r\n                settings.about_header_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_left];\r\n                settings.about_header_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_right];\r\n                settings.about_header_font_color = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_color];\r\n                settings.about_header_font_size = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_size];\r\n                settings.about_header_align = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_align];\r\n                settings.about_header_font_style = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_style];\r\n                settings.about_header_font_variant = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_variant];\r\n                settings.about_header_font_weight = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.header_font_weight];\r\n                settings.about_text_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_left];\r\n                settings.about_text_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_right];\r\n                settings.about_text_font_color = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_color];\r\n                settings.about_text_font_size = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_size];\r\n                settings.about_text_align = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_align];\r\n                settings.about_text_font_style = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_style];\r\n                settings.about_text_font_variant = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_variant];\r\n                settings.about_text_font_weight = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.about_text][AboutText.text_font_weight];\r\n\r\n                settings.cover_image_show = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.show];\r\n                settings.cover_image_margin_top = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.margin_top];\r\n                settings.cover_image_url = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.url];\r\n                settings.cover_image_object_fit = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.object_fit];\r\n                settings.cover_image_align = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.align];\r\n                settings.cover_image_height = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.height];\r\n                settings.cover_image_width = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.width];\r\n                settings.cover_image_parallax = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.parallax];\r\n                settings.cover_border_top_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_top_left];\r\n                settings.cover_border_top_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_top_right];\r\n                settings.cover_border_bottom_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_bottom_left];\r\n                settings.cover_border_bottom_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cover_image][CoverImage.border_bottom_right];\r\n\r\n                settings.background_image_show = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.show];\r\n                settings.background_image_url = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.url];\r\n                settings.background_image_size = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.size];\r\n                settings.background_image_attachment = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.attachment];\r\n                settings.background_image_position_x = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.position_x];\r\n                settings.background_image_position_y = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.position_y];\r\n                settings.background_image_repeat_x = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.repeat_x];\r\n                settings.background_image_repeat_y = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.background_image][BackgroundImage.repeat_y];\r\n\r\n                settings.list_titles_margin_top = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.list][List.margin_top];\r\n                settings.list_titles_padding_left = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.list][List.padding_left];\r\n                settings.list_titles_padding_right = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.list][List.padding_right];\r\n\r\n                settings.list_cards_round_borders = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cards][Cards.round_borders];\r\n                settings.list_cards_spacing = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.cards][Cards.spacing];\r\n\r\n                settings.list_table_background_color = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.background_color];\r\n                settings.list_table_backdrop_filter_blur = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.backdrop_filter_blur];\r\n                settings.list_table_round_borders = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.round_borders];\r\n                settings.list_table_show_images = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.show_images];\r\n                settings.list_table_row_lines = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.table][Table.row_lines];\r\n\r\n                settings.title_user_score = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.user_score];\r\n                settings.title_edit_button = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.edit_button];\r\n                settings.title_progress = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.volumes_progress];\r\n                settings.title_progress_2 = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.chapters_progress];\r\n                settings.title_status = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.status];\r\n                settings.title_priority = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.priority];\r\n                settings.title_comments = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.comments];\r\n                settings.title_tags = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.tags];\r\n                settings.title_started = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.started];\r\n                settings.title_finished = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.finished];\r\n                settings.title_added = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.added];\r\n                settings.title_days = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.days];\r\n                settings.title_type = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.type];\r\n                settings.title_volumes = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.volumes];\r\n                settings.title_chapters = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.chapters];\r\n                settings.title_genres = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.genres];\r\n                settings.title_mal_score = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.mal_score];\r\n                settings.title_aired = visited_user[User.profile][Profile.user_manga_list_design_settings][UserListDesignSettings.title_info][TitleInfoManga.aired];\r\n            }\r\n            return settings;\r\n        default:\r\n            return settings\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport {filterTitles, getFiltersFromBranch, getItemsPerPageFromBranch} from \"../../browse/functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {ApiResult, User} from \"../../../models\";\r\nimport {getBrowseGridListCols, isEmpty} from \"../../functions\";\r\nimport {AnimeListStatusButtons} from \"./anime/tableView\";\r\nimport {MangaListStatusButtons} from \"./manga/tableView\";\r\n\r\nimport '../../../assets/css/list.css'\r\nimport {UserListDesignSettingsDialog} from \"./user_settings/userListDesignSettings\";\r\nimport {UserListCardsView, UserListTableView} from \"./utils\";\r\nimport {\r\n    formatUserListDesignSettingsFromBranch,\r\n    getInitialSelected,\r\n    getUserListDesignSettingsFromBranch\r\n} from \"./user_settings/settings_functions\";\r\nimport {Pagination} from \"@material-ui/lab\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass UserList extends Component {\r\n    static propTypes = {\r\n        /** params of the page, to get the user list id */\r\n        params: PropTypes.object.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of list_owner */\r\n        list_owner: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Redux prop of user_entry_statuses */\r\n        user_entry_statuses: PropTypes.object,\r\n        /** Redux prop of title_filters */\r\n        title_filters: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.setSelected = this.setSelected.bind(this);\r\n        this.state = {\r\n            list_pk: parseInt(this.props.params.id),\r\n            selected: getInitialSelected(this.props.branch),\r\n            current_page: 1,\r\n            items_per_page: getItemsPerPageFromBranch(this.props.branch),\r\n            page_dialog_open: false,\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.visited_user[User.username]}'s ${this.props.branch} List`;\r\n        window.scrollTo(0, 0);\r\n        filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n            {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.setState({current_page: 1});\r\n            filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n                {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n        }\r\n        if (prevProps.params.id !== this.props.params.id) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({list_pk: parseInt(this.props.params.id)}, () => {\r\n                this.props.getUser(this.state.list_pk);\r\n                filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n                    {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n            });\r\n        }\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)) {\r\n            this.setState({current_page: page});\r\n            filterTitles(this.props.branch, page, this.props.title_filters, null,\r\n                {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.setState({selected: selected})\r\n    }\r\n\r\n    render() {\r\n        const list = {\r\n            user_list_pk: this.state.list_pk,\r\n            user_list_filter: this.state.selected\r\n        };\r\n        const user_settings = getUserListDesignSettingsFromBranch(this.props.branch,\r\n            this.props.user_anime_list_design_settings, this.props.user_manga_list_design_settings);\r\n        const design_settings = formatUserListDesignSettingsFromBranch(this.props.branch, this.props.list_owner,\r\n            this.props.visited_user, user_settings);\r\n\r\n        const titles_container_styles = {\r\n            marginTop: design_settings.list_titles_margin_top,\r\n            paddingLeft: design_settings.list_titles_padding_left,\r\n            paddingRight: design_settings.list_titles_padding_right,\r\n        }\r\n\r\n        return <>\r\n            <CyberNavbar/>\r\n            <Grid id=\"User-List\" container style={{\r\n                paddingTop: design_settings.list_margin_top,\r\n                backgroundImage: design_settings.background_image_show ?\r\n                    `url(\"${design_settings.background_image_url}\")` : 'none',\r\n                backgroundSize: design_settings.background_image_size,\r\n                backgroundAttachment: design_settings.background_image_attachment,\r\n                backgroundPositionX: design_settings.background_image_position_x,\r\n                backgroundPositionY: design_settings.background_image_position_y,\r\n                backgroundRepeatX: design_settings.background_image_repeat_x,\r\n                backgroundRepeatY: design_settings.background_image_repeat_y,\r\n            }}>\r\n                {this.props.branch === BRANCH_ANIME ?\r\n                    <AnimeListStatusButtons selected={this.state.selected} setSelected={this.setSelected}/>\r\n                    : this.props.branch === BRANCH_MANGA ?\r\n                        <MangaListStatusButtons selected={this.state.selected} setSelected={this.setSelected}/>\r\n                        : null}\r\n\r\n                {getFiltersFromBranch(this.props.branch, null, list)}\r\n\r\n                {this.props.filtered_titles_loaded && this.props.visited_user_loaded ? <>\r\n                    <Grid item xs={12} className=\"list-container\">\r\n                        <div className=\"about-text-container\" style={{\r\n                            marginTop: design_settings.about_margin_top,\r\n                        }}>\r\n                            <h2 style={{\r\n                                color: design_settings.about_header_font_color,\r\n                                paddingLeft: design_settings.about_header_left,\r\n                                paddingRight: design_settings.about_header_right,\r\n                                fontFamily: design_settings.about_font_family,\r\n                                fontSize: design_settings.about_header_font_size,\r\n                                textAlign: design_settings.about_header_align,\r\n                                fontStyle: design_settings.about_header_font_style,\r\n                                fontVariant: design_settings.about_header_font_variant,\r\n                                fontWeight: design_settings.about_header_font_weight,\r\n                            }}>\r\n                                {design_settings.about_header}\r\n                            </h2>\r\n                            <pre style={{\r\n                                color: design_settings.about_text_font_color,\r\n                                paddingLeft: design_settings.about_text_left,\r\n                                paddingRight: design_settings.about_text_right,\r\n                                fontFamily: design_settings.about_font_family,\r\n                                fontSize: design_settings.about_text_font_size,\r\n                                textAlign: design_settings.about_text_align,\r\n                                fontStyle: design_settings.about_text_font_style,\r\n                                fontVariant: design_settings.about_text_font_variant,\r\n                                fontWeight: design_settings.about_text_font_weight,\r\n                            }}>\r\n                                {design_settings.about_text}\r\n                            </pre>\r\n                        </div>\r\n\r\n                        {design_settings.cover_image_show ?\r\n                            <div className=\"user-list-cover-img-container\" style={{\r\n                                textAlign: design_settings.cover_image_align\r\n                            }}>\r\n                                <img className=\"cover-img\"\r\n                                     src={design_settings.cover_image_url}\r\n                                     style={{\r\n                                         marginTop: design_settings.cover_image_margin_top,\r\n                                         objectFit: design_settings.cover_image_object_fit,\r\n                                         height: design_settings.cover_image_height,\r\n                                         width: design_settings.cover_image_width,\r\n                                         borderTopLeftRadius: design_settings.cover_border_top_left,\r\n                                         borderTopRightRadius: design_settings.cover_border_top_right,\r\n                                         borderBottomLeftRadius: design_settings.cover_border_bottom_left,\r\n                                         borderBottomRightRadius: design_settings.cover_border_bottom_right,\r\n                                     }}\r\n                                />\r\n                            </div> : null}\r\n\r\n                        <div className=\"titles-container\" style={titles_container_styles}>\r\n                            {design_settings.list_type_cards ?\r\n                                <UserListCardsView\r\n                                    branch={this.props.branch}\r\n                                    items_per_page={this.state.items_per_page}\r\n                                    current_page={this.state.current_page}\r\n                                    user_entry_statuses={this.props.user_entry_statuses}\r\n                                    filtered_titles={this.props.filtered_titles}\r\n                                    gridlist_cols={this.state.gridlist_cols}\r\n                                    list_owner={this.props.list_owner}\r\n                                    design_settings={design_settings}\r\n                                />\r\n                                : <UserListTableView\r\n                                    branch={this.props.branch}\r\n                                    items_per_page={this.state.items_per_page}\r\n                                    current_page={this.state.current_page}\r\n                                    user_entry_statuses={this.props.user_entry_statuses}\r\n                                    filtered_titles={this.props.filtered_titles}\r\n                                    list_owner={this.props.list_owner}\r\n                                    list={list}\r\n                                    design_settings={design_settings}\r\n                                />}\r\n                        </div>\r\n                        <div className=\"pagination\">\r\n                            <Pagination\r\n                                count={Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)}\r\n                                color=\"primary\"\r\n                                siblingCount={3}\r\n                                page={this.state.current_page}\r\n                                onChange={(type, page) => {\r\n                                    playClickSound();\r\n                                    if (page !== this.state.current_page)\r\n                                        this.goToPage(page);\r\n                                    else\r\n                                        this.setState({page_dialog_open: true})\r\n                                }}\r\n                            />\r\n                            <GoToPageDialog\r\n                                open={this.state.page_dialog_open}\r\n                                current_page={this.state.current_page}\r\n                                total_pages={Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)}\r\n                                goToPage={this.goToPage}\r\n                                onClose={this.closePageDialog}/>\r\n                        </div>\r\n                    </Grid>\r\n\r\n                    {this.props.list_owner && !isEmpty(user_settings) ?\r\n                        <UserListDesignSettingsDialog branch={this.props.branch} user_settings={user_settings}/> : null}\r\n                </> : this.props.titles_loading ?\r\n                    <Loading text={`${this.props.branch} List Loading`} offset={250}/> : null}\r\n            </Grid>\r\n            {/*<CyberFooter/>*/}\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_loading: state.auth.user_loading,\r\n    entry_loading: state.users.entry_loading, // This is here to rerender the small loading on the update episode btn\r\n    user_anime_list_design_settings: state.users.user_anime_list_design_settings, // This is here to rerender the small loading on the update episode btn\r\n    user_manga_list_design_settings: state.users.user_manga_list_design_settings, // This is here to rerender the small loading on the update episode btn\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(UserList)\r\n","import React from \"react\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\n\r\nimport '../../../assets/css/private_page.css'\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n/**\r\n *\r\n * @param {String} props.username\r\n * @param {String} props.branch\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function PrivatePage(props) {\r\n    const {text} = props;\r\n\r\n    return <>\r\n        <CyberNavbar/>\r\n        <div id=\"Private-Page\">\r\n            <Grid container className=\"container\">\r\n                <Grid xs={12}>\r\n                    <h1>404</h1>\r\n                    <p>{text}</p>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </>\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport UserList from \"../UserList\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {PrivatePage} from \"../PrivateList\";\r\nimport Browse from \"../../../browse/Browse\";\r\n\r\n\r\nclass AnimeList extends Component {\r\n    componentDidMount() {\r\n        this.props.getUser(parseInt(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n            list_owner || !this.props.visited_user[User.profile][Profile.is_anime_list_private] ?\r\n                <UserList\r\n                    branch={BRANCH_ANIME}\r\n                    params={this.props.match.params}\r\n                    list_owner={list_owner}\r\n                    titles_loading={this.props.anime_loading}\r\n                    filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n                    filtered_titles={this.props.filtered_anime}\r\n                    title_filters={this.props.anime_filters}\r\n                    user_entry_statuses={this.props.user_anime_entry_statuses}\r\n                /> : <PrivatePage text={`${this.props.visited_user[User.username]}'s ${BRANCH_ANIME} List is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    anime_filters: state.cookies.anime_list_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(AnimeList)\r\n","import React from 'react'\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\n\r\nexport function getDataScoreDistribution(statistics) {\r\n    let parsed_data = statistics['anime_score_distribution'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]);\r\n        labels.push(parsed_data_keys[x]);\r\n    }\r\n\r\n    stat_data.reverse();\r\n    labels.reverse();\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '# of Anime',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRatedVsTimeSpent(statistics) {\r\n    let parsed_data = statistics['anime_rated_vs_time_spent'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        stat_data.push((parsed_data[parsed_data_keys[x]] / 60).toFixed(2));\r\n        labels.push(parsed_data_keys[x]);\r\n    }\r\n\r\n    stat_data.reverse();\r\n    labels.reverse();\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '# of Hours',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRatedVsEpisodeCount(statistics) {\r\n    let parsed_data = statistics['anime_rated_vs_episode_count'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        if (parsed_data_keys[x] === '101+') continue;\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]['total_anime']);\r\n        labels.push(parsed_data_keys[x]);\r\n        stat_mean_score.push(\r\n            (parsed_data[parsed_data_keys[x]]['total_score'] / parsed_data[parsed_data_keys[x]]['total_anime'])\r\n                .toFixed(2))\r\n    }\r\n\r\n    stat_data.push(parsed_data['101+']['total_anime']);\r\n    labels.push('101+');\r\n    stat_mean_score.push((parsed_data['101+']['total_score'] / parsed_data['101+']['total_anime'])\r\n        .toFixed(2));\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nexport function getTableHistory(statistics) {\r\n    let parsed_data = statistics['anime_completed_history'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n    let months_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    let max = 0;\r\n    let sum = 0;\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        let month_keys = Object.keys(parsed_data[parsed_data_keys[x]]);\r\n        for (let y = 0; y < month_keys.length; y++) {\r\n            sum = parsed_data[parsed_data_keys[x]][month_keys[y]][0] +\r\n                parsed_data[parsed_data_keys[x]][month_keys[y]][1];\r\n            if (max < sum)\r\n                max = sum\r\n        }\r\n    }\r\n\r\n    parsed_data_keys.reverse();\r\n\r\n    return <Table id=\"completed-history-table\" bordered>\r\n        <thead>\r\n        <tr>\r\n            <td>{null}</td>\r\n            {months_labels.map(month => (<td key={month}>{month}</td>))}\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {parsed_data_keys.map(year => (\r\n            <tr key={year}>\r\n                <td>{year}</td>\r\n                {months.map(month => (\r\n                    parsed_data[year][month] ?\r\n                        <td key={month} style={{\r\n                            backgroundColor: \"rgba(54, 162, 235, \" +\r\n                                ((parsed_data[year][month][0] + parsed_data[year][month][1]) / max).toFixed(2)\r\n                                    .toString() + \")\"\r\n                        }}>\r\n                            <span>{parsed_data[year][month][0] + parsed_data[year][month][1]} <Chip className=\"chip-primary\" size=\"small\" label={parsed_data[year][month][0]}/> <Chip className=\"chip-danger\" size=\"small\" label={parsed_data[year][month][1]}/></span>\r\n                        </td> : <td key={month}>{null}</td>\r\n                ))}\r\n            </tr>\r\n        ))}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\n\r\nexport function getDataFavoriteYears(statistics) {\r\n    let parsed_data = statistics['anime_favorite_years'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        labels.push(parsed_data_keys[x]);\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]['total_anime']);\r\n        stat_mean_score.push((parsed_data[parsed_data_keys[x]]['total_score'] /\r\n            parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2));\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nfunction compareByTotal(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['total_anime'];\r\n    const second = a['total_anime'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\n\r\nfunction compareByMean(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['mean_score'];\r\n    const second = a['mean_score'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\n\r\nexport function getDataFavoriteGenres(statistics, order) {\r\n    let parsed_data = statistics['anime_favorite_genres'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        data.push({\r\n            'label': parsed_data_keys[x],\r\n            'total_anime': parsed_data[parsed_data_keys[x]]['total_anime'],\r\n            'mean_score': (parsed_data[parsed_data_keys[x]]['total_score'] /\r\n                parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2),\r\n        })\r\n    }\r\n\r\n    if (order === 'Mean')\r\n        data.sort(compareByMean);\r\n    else\r\n        data.sort(compareByTotal);\r\n\r\n    for (let x = 0; x < data.length; x++) {\r\n        labels.push(data[x]['label']);\r\n        stat_data.push(data[x]['total_anime']);\r\n        stat_mean_score.push(data[x]['mean_score']);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nexport function getDataFavoriteTypes(statistics) {\r\n    let parsed_data = statistics['anime_favorite_types'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        data.push({\r\n            'label': parsed_data_keys[x],\r\n            'total_anime': parsed_data[parsed_data_keys[x]]['total_anime'],\r\n            'mean_score': (parsed_data[parsed_data_keys[x]]['total_score'] /\r\n                parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2),\r\n        })\r\n    }\r\n\r\n    for (let x = 0; x < data.length; x++) {\r\n        labels.push(data[x]['label']);\r\n        stat_data.push(data[x]['total_anime']);\r\n        stat_mean_score.push(data[x]['mean_score']);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nimport {updateAndGetUserAnimeStatistics} from \"../../../actions/users\";\r\nimport {\r\n    getDataFavoriteGenres,\r\n    getDataFavoriteTypes,\r\n    getDataFavoriteYears,\r\n    getDataRatedVsEpisodeCount,\r\n    getDataRatedVsTimeSpent,\r\n    getDataScoreDistribution,\r\n    getTableHistory\r\n} from \"./data_calculations\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {filterTitles} from \"../../browse/functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\n\r\nconst years_calc = 1000 * 60 * 60 * 24 * 30 * 12;\r\n\r\n\r\nclass Statistics extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.getFavoriteGenres = this.getFavoriteGenres.bind(this);\r\n        this.sortFavoriteGenres = this.sortFavoriteGenres.bind(this);\r\n        this.state = {\r\n            favorite_genres_sorted_by: 'Total',\r\n            data_favorite_genres: {},\r\n            data_favorite_genres_options: {maintainAspectRatio: false},\r\n            updated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Statistics';\r\n        window.scrollTo(0, 0);\r\n\r\n        this.props.updateAndGetUserAnimeStatistics(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (!this.state.updated)\r\n            this.getFavoriteGenres(this.state.favorite_genres_sorted_by);\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            window.scrollTo(0, 0);\r\n            this.props.updateAndGetUserAnimeStatistics(this.props.match.params.id);\r\n        }\r\n    }\r\n\r\n    sortFavoriteGenres() {\r\n        if (this.state.favorite_genres_sorted_by === 'Total')\r\n            this.getFavoriteGenres('Mean');\r\n        else\r\n            this.getFavoriteGenres('Total');\r\n    }\r\n\r\n    getFavoriteGenres(order) {\r\n        try {\r\n            let data_and_options = getDataFavoriteGenres(this.props.user_anime_statistics['user_statistics'], order);\r\n            this.setState({\r\n                favorite_genres_sorted_by: order,\r\n                data_favorite_genres: data_and_options[0],\r\n                data_favorite_genres_options: data_and_options[1],\r\n                updated: true\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let data_sources = {};\r\n        let data_rated_vs_time_spent = {};\r\n        let data_rated_vs_episode_count = {};\r\n        let data_rated_vs_episode_count_options = {maintainAspectRatio: false};\r\n        let data_completed_history;\r\n        let data_favorite_years = {};\r\n        let data_favorite_years_options = {maintainAspectRatio: false};\r\n        let data_favorite_types = {};\r\n        let data_favorite_types_options = {maintainAspectRatio: false};\r\n        let completed_percent_from_all_anime = 0;\r\n        let finished_percent_from_all_anime = 0;\r\n        let episodes_percent_from_all_episodes = 0;\r\n        let minutes_percent_from_all_minutes = 0;\r\n        let all_anime_total_hours = 0;\r\n        let mean_score;\r\n        let hours_watching;\r\n        let years_watching;\r\n        let years_until_completion = 0;\r\n\r\n        try {\r\n            data_sources = getDataScoreDistribution(this.props.user_anime_statistics['user_statistics']);\r\n            data_rated_vs_time_spent = getDataRatedVsTimeSpent(this.props.user_anime_statistics['user_statistics']);\r\n            data_completed_history = getTableHistory(this.props.user_anime_statistics['user_statistics']);\r\n            let data_and_options = getDataRatedVsEpisodeCount(this.props.user_anime_statistics['user_statistics']);\r\n            data_rated_vs_episode_count = data_and_options[0];\r\n            data_rated_vs_episode_count_options = data_and_options[1];\r\n            data_and_options = getDataFavoriteYears(this.props.user_anime_statistics['user_statistics']);\r\n            data_favorite_years = data_and_options[0];\r\n            data_favorite_years_options = data_and_options[1];\r\n            data_and_options = getDataFavoriteTypes(this.props.user_anime_statistics['user_statistics']);\r\n            data_favorite_types = data_and_options[0];\r\n            data_favorite_types_options = data_and_options[1];\r\n            // completed_percent_from_all_anime = ((this.props.user_anime_statistics['anime_completed'] /\r\n            //     anime_data_statistics['total_anime']) * 100).toFixed(1);\r\n            // finished_percent_from_all_anime = ((this.props.user_anime_statistics['anime_total_finished'] /\r\n            //     anime_data_statistics['total_anime']) * 100).toFixed(1);\r\n            hours_watching = (this.props.user_anime_statistics['anime_mins_spent_watching'] / 60).toFixed(1);\r\n            mean_score = this.props.user_anime_statistics['anime_mean_score'].toFixed(1);\r\n            // episodes_percent_from_all_episodes = ((this.props.user_anime_statistics['anime_episodes_watched'] /\r\n            //     anime_data_statistics['total_episodes']) * 100).toFixed(1);\r\n            // all_anime_total_hours = (anime_data_statistics['total_minutes'] / 60).toFixed(1);\r\n            minutes_percent_from_all_minutes = ((hours_watching / all_anime_total_hours) * 100).toFixed(1);\r\n\r\n            const date1 = new Date(this.props.user_anime_statistics['anime_started_watching_on']);\r\n            const date2 = new Date();\r\n            const diffTime = Math.abs(date2 - date1);\r\n            years_watching = (diffTime / years_calc).toFixed(1);\r\n            years_until_completion = ((100 / finished_percent_from_all_anime) * years_watching).toFixed(1);\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"Statistics\" container>\r\n                    <Grid item xs={12}>\r\n                        <h1>Statistics</h1>\r\n                    </Grid>\r\n\r\n                    {!this.props.user_statistics_loading ? <>\r\n                        {/*<Grid item xs={12} md={6}>*/}\r\n                        {/*    <table className=\"generic-stats-table\">*/}\r\n                        {/*        <tbody>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_watching']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_completed']} of{' '}*!/*/}\r\n                        {/*            /!*    {anime_data_statistics['total_anime']} ({completed_percent_from_all_anime}%)</p>*!/*/}\r\n                        {/*            /!*</td>*!/*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_on_hold']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_dropped']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td>*/}\r\n                        {/*                <p className=\"color-white\">{this.props.user_anime_statistics['anime_plan_to_watch']}</p>*/}\r\n                        {/*            </td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr className=\"text-right\">*/}\r\n                        {/*            <td><Chip label={'Total Entries'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_total_entries']}</p>*/}\r\n                        {/*            </td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        </tbody>*/}\r\n                        {/*    </table>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={12} md={6}>*/}\r\n                        {/*        <table className=\"generic-stats-table\">*/}\r\n                        {/*            <tbody>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Watching since'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">*/}\r\n                        {/*                    <Moment format=\"DD MMM YYYY\"*/}\r\n                        {/*                            date={this.props.user_anime_statistics['anime_started_watching_on']}/>{' '}*/}\r\n                        {/*                            ({years_watching} years)</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Total Finished'}/></td>*/}\r\n                        {/*                /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_total_finished']} of*!/*/}\r\n                        {/*                /!*    {' '}{anime_data_statistics['total_anime']} (*!/*/}\r\n                        {/*                /!*    {finished_percent_from_all_anime}%)</p></td>*!/*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Finish rate'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{years_until_completion} years until full*/}\r\n                        {/*                    completion</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Mean score'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{mean_score}</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Total episodes'}/></td>*/}\r\n                        {/*                /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_episodes_watched']}*!/*/}\r\n                        {/*                /!*    {' '}of {anime_data_statistics['total_episodes']}{' '}*!/*/}\r\n                        {/*                /!*    ({episodes_percent_from_all_episodes}%)</p></td>*!/*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Total hours'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{hours_watching} of {all_anime_total_hours}{' '}*/}\r\n                        {/*                    ({minutes_percent_from_all_minutes}%)</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            </tbody>*/}\r\n                        {/*        </table>*/}\r\n                        {/*    </Grid>*/}\r\n\r\n                        <Grid item xs={12}>\r\n                            <div className=\"table-container\">\r\n                                <h5 id=\"History\" className=\"text-center\">History</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"History\">*/}\r\n                                {/*    Total number of Anime you have finished in every month. Entries that have unknown*/}\r\n                                {/*    finish date are not taken into account*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <p>\r\n                                    <Chip className=\"chip-default\" size=\"small\" label={'#'}/> Total&nbsp;&nbsp;\r\n                                    <Chip className=\"chip-primary\" size=\"small\" label={'#'}/> Completed&nbsp;&nbsp;\r\n                                    <Chip className=\"chip-danger\" size=\"small\" label={'#'}/> Dropped</p>\r\n                                {data_completed_history}\r\n                            </div>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Score-Distribution\" className=\"text-center\">Score Distribution</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Score-Distribution\">*/}\r\n                                {/*    How many Anime you have scored in each score grade. Every scored entry is taken*/}\r\n                                {/*    into account.*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_sources}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={{maintainAspectRatio: false}}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Rated-Time-Spent\" className=\"text-center\">Rated vs Time spent</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Rated-Time-Spent\">*/}\r\n                                {/*    How much time you have spent watching in all score grades. Every scored entry is*/}\r\n                                {/*    taken into account. Anime with no episodes are not taken into account.*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_rated_vs_time_spent}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={{maintainAspectRatio: false}}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Rated-Episode-Count\" className=\"text-center\">Rated vs Episode count</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Rated-Episode-Count\">*/}\r\n                                {/*    Number of Anime you have completed in various episode formats. Only \"Completed\"*/}\r\n                                {/*    entries are taken, anime with unknown episodes are not taken into account*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_rated_vs_episode_count}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_rated_vs_episode_count_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Types\" className=\"text-center\">Favorite Types</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Types\">*/}\r\n                                {/*    Number of Anime you have in your list from various types. All anime except the ones*/}\r\n                                {/*    in \"Plan to Watch\" are taken into the calculation, entries that are not scored are*/}\r\n                                {/*    not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_favorite_types}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_favorite_types_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Years\" className=\"text-center\">Favorite Years</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Years\">*/}\r\n                                {/*    Number of Anime you have in your list from various years. All anime except the ones*/}\r\n                                {/*    in \"Plan to Watch\" are taken into the calculation, entries that are not scored are*/}\r\n                                {/*    not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_favorite_years}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_favorite_years_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Genres\" className=\"text-center\">Favorite Genres</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Genres\">*/}\r\n                                {/*    Number of Anime you have in your list from various genres. All anime except the*/}\r\n                                {/*    ones in \"Plan to Watch\" are taken into the calculation, entries that are not scored*/}\r\n                                {/*    are not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Button variant=\"outlined\"\r\n                                        onClick={this.sortFavoriteGenres}>{this.state.favorite_genres_sorted_by}</Button>\r\n                                <Bar\r\n                                    data={this.state.data_favorite_genres}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={this.state.data_favorite_genres_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </> : <Loading text={'Statistics Loading'} offset={150}/>}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_statistics: state.users.user_anime_statistics,\r\n    user_statistics_loading: state.users.user_statistics_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateAndGetUserAnimeStatistics})(Statistics)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Moment from 'react-moment'\r\nimport moment from 'moment'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport {getVisitedUserAnimeHistory, getVisitedUserMangaHistory} from '../../../actions/users'\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult, User} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles, getTabName} from \"../../browse/functions\";\r\nimport {getBrowseGridListCols} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\n\r\n\r\nfunction displayHistory(user_history, branch) {\r\n    let lastId = 0;\r\n    let newId = 0;\r\n    let lastMonth = 0;\r\n    let lastDate = 0;\r\n    let lastYear = 0;\r\n    let formatted = [];\r\n    let title;\r\n    let item;\r\n\r\n    try {\r\n        for (let x = 0; x < user_history['results'].length; x++) {\r\n\r\n            let obj = {};\r\n            let nextYear = moment(user_history['results'][x]['timestamp']).date();\r\n            let nextMonth = moment(user_history['results'][x]['timestamp']).month() + 1;\r\n            let nextDate = moment(user_history['results'][x]['timestamp']).date();\r\n\r\n            if (nextYear != lastYear || nextMonth != lastMonth || nextDate != lastDate) {\r\n                lastYear = moment(user_history['results'][x]['timestamp']).date();\r\n                lastMonth = moment(user_history['results'][x]['timestamp']).month() + 1;\r\n                lastDate = moment(user_history['results'][x]['timestamp']).date();\r\n                if (branch === BRANCH_ANIME) {\r\n                    lastId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    title = user_history['results'][x]['anime_list_entry']['anime'];\r\n                    item = user_history['results'][x]['episode'];\r\n                }\r\n                else if (branch === BRANCH_MANGA) {\r\n                    lastId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n                    title = user_history['results'][x]['manga_list_entry']['manga'];\r\n                    item = user_history['results'][x]['chapter'];\r\n                }\r\n                obj = {\r\n                    date: user_history['results'][x]['timestamp'],\r\n                    entries: [\r\n                        {\r\n                            title: title,\r\n                            history: [{\r\n                                item: item,\r\n                                timestamp: user_history['results'][x]['timestamp']\r\n                            }]\r\n                        }\r\n                    ]\r\n                };\r\n                formatted.push(obj)\r\n            } else {\r\n                if (branch === BRANCH_ANIME) {\r\n                    newId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    title = user_history['results'][x]['anime_list_entry']['anime'];\r\n                    item = user_history['results'][x]['episode'];\r\n                }\r\n                else if (branch === BRANCH_MANGA) {\r\n                    newId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n                    title = user_history['results'][x]['manga_list_entry']['manga'];\r\n                    item = user_history['results'][x]['chapter'];\r\n                }\r\n\r\n                if (newId != lastId) {\r\n                    if (branch === BRANCH_ANIME)\r\n                        lastId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    else if (branch === BRANCH_MANGA)\r\n                        lastId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n\r\n                    formatted[formatted.length - 1]['entries'].push({\r\n                        title: title,\r\n                        history: [{\r\n                            item: item,\r\n                            timestamp: user_history['results'][x]['timestamp']\r\n                        }]\r\n                    })\r\n                } else {\r\n                    let last = formatted.length - 1;\r\n                    let lastHistory = formatted[last]['entries'].length - 1;\r\n                    formatted[last]['entries'][lastHistory]['history'].push({\r\n                        item: item,\r\n                        timestamp: user_history['results'][x]['timestamp']\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    } catch (e) {\r\n        return null\r\n    }\r\n\r\n    // noinspection CheckTagEmptyBody\r\n    return formatted.map((date, i) => (\r\n        <li key={i} className=\"timeline-event\">\r\n            <label className=\"timeline-event-icon\"></label>\r\n            <div className=\"timeline-event-copy\">\r\n                <p className=\"timeline-event-thumbnail\">\r\n                    <Moment format=\"Do MMMM YYYY - dddd\" date={date['date']}/></p>\r\n                {date['entries'].map((entry, x) => (\r\n                    <div key={x} className=\"box-light timeline-history-entry\">\r\n                        <div className=\"timeline-history-segment timeline-history-segment-card\">\r\n                            <TitleCard\r\n                                branch={branch}\r\n                                title={entry['title']}\r\n                            />\r\n                        </div>\r\n                        <div className=\"timeline-history-segment timeline-history-segment-episodes\">\r\n                            {entry['history'].map((history, y) => (\r\n                                <p key={y}>{branch === BRANCH_ANIME ? 'Episode ' :\r\n                                    branch === BRANCH_MANGA ? 'Chapter ' : null}\r\n                                    <Chip className=\"chip-info\" size=\"small\" label={history['item']}/> completed\r\n                                    at <Chip className=\"chip-info\" size=\"small\" label={<Moment format=\"HH:mm:ss\"\r\n                                        date={history['timestamp']}/>}/>\r\n                                </p>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </li>\r\n    ))\r\n}\r\n\r\n\r\nclass DisplayUserHistory extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        visited_user_id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.visited_user[User.username]} History`;\r\n        window.scrollTo(0, 0);\r\n\r\n        if (this.props.branch === BRANCH_ANIME) this.props.getVisitedUserAnimeHistory(this.props.visited_user_id);\r\n        else if (this.props.branch === BRANCH_MANGA) this.props.getVisitedUserMangaHistory(this.props.visited_user_id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.current_page !== this.state.current_page)\r\n            window.scrollTo(0, 0);\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        let total;\r\n        if (this.props.branch === BRANCH_ANIME)\r\n            total = Math.ceil(this.props.user_anime_history[ApiResult.count] / 100);\r\n        else if (this.props.branch === BRANCH_MANGA)\r\n            total = Math.ceil(this.props.user_manga_history[ApiResult.count] / 100);\r\n\r\n        if (page > 0 && page <= total) {\r\n            this.setState({current_page: page});\r\n            if (this.props.branch === BRANCH_ANIME)\r\n                this.props.getVisitedUserAnimeHistory(this.props.match.params.id, page);\r\n            else if (this.props.branch === BRANCH_MANGA)\r\n                this.props.getVisitedUserMangaHistory(this.props.match.params.id, page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let history;\r\n\r\n        try {\r\n            if (this.props.branch === BRANCH_ANIME) {\r\n                history = displayHistory(this.props.user_anime_history, this.props.branch);\r\n            }\r\n            else if (this.props.branch === BRANCH_MANGA) {\r\n                history = displayHistory(this.props.user_manga_history, this.props.branch);\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"History-Container\" container>\r\n                    <Grid item xs={12}>\r\n                        <h1>{this.props.branch} History</h1>\r\n                    </Grid>\r\n                    {!this.props.user_info_loading ? <>\r\n                        <Grid item xs={false} lg={1}/>\r\n                        <Grid item xs={12} lg={10}>\r\n                            <ul className=\"timeline\">\r\n                                {history}\r\n                            </ul>\r\n                        </Grid>\r\n                        </>\r\n                        : <Loading text={'History Loading'}/>}\r\n                    {!this.props.user_info_loading ?\r\n                        <div className=\"pagination\">\r\n                            <Pagination\r\n                                count={Math.ceil(this.props.user_anime_history[ApiResult.count] / 100)}\r\n                                color=\"primary\"\r\n                                siblingCount={3}\r\n                                page={this.state.current_page}\r\n                                onChange={(type, page) => {\r\n                                    playClickSound();\r\n                                    if (page !== this.state.current_page)\r\n                                        this.goToPage(page);\r\n                                    else\r\n                                        this.setState({page_dialog_open: true})\r\n                                }}\r\n                            />\r\n                            <GoToPageDialog\r\n                                open={this.state.page_dialog_open}\r\n                                current_page={this.state.current_page}\r\n                                total_pages={Math.ceil(this.props.user_anime_history[ApiResult.count] / 100)}\r\n                                goToPage={this.goToPage}\r\n                                onClose={this.closePageDialog}/>\r\n                        </div> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_anime_history: state.users.user_anime_history,\r\n    user_manga_history: state.users.user_manga_history,\r\n    user_info_loading: state.users.user_info_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser, getVisitedUserAnimeHistory, getVisitedUserMangaHistory})(DisplayUserHistory)","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Moment from 'react-moment'\r\nimport moment from 'moment'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport {getVisitedUserAnimeHistory, getVisitedUserMangaHistory} from '../../../actions/users'\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult, Profile, User} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles, getTabName} from \"../../browse/functions\";\r\nimport {getBrowseGridListCols} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport DisplayUserHistory from \"./DisplayUserHistory\";\r\nimport UserList from \"../user_list/UserList\";\r\nimport {PrivatePage} from \"../user_list/PrivateList\";\r\n\r\n\r\nfunction isHistoryPrivate(branch, visited_user) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return visited_user[User.profile][Profile.is_anime_history_private];\r\n        case BRANCH_MANGA:\r\n            return visited_user[User.profile][Profile.is_manga_history_private];\r\n        default:\r\n            return true\r\n    }\r\n}\r\n\r\n\r\nclass History extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `History`;\r\n        window.scrollTo(0, 0);\r\n\r\n        this.props.getUser(this.props.match.params.id);\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        console.log('this.props.visited_user', this.props.visited_user)\r\n        console.log('this.props.user', this.props.user)\r\n        // console.log('this.props.visited_user[User.id]', this.props.visited_user[User.id])\r\n        // console.log('this.props.user[User.id]', this.props.user[User.id])\r\n        console.log('list_owner', list_owner)\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n            list_owner || !isHistoryPrivate(this.props.branch, this.props.visited_user) ?\r\n                <DisplayUserHistory branch={this.props.branch} visited_user_id={this.props.match.params.id}/> :\r\n                <PrivatePage text={`${this.props.visited_user[User.username]}'s ${this.props.branch} History is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_anime_history: state.users.user_anime_history,\r\n    user_manga_history: state.users.user_manga_history,\r\n    user_info_loading: state.users.user_info_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(History)","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport UserList from \"../UserList\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport {PrivatePage} from \"../PrivateList\";\r\nimport Browse from \"../../../browse/Browse\";\r\n\r\n\r\nclass MangaList extends Component {\r\n    componentDidMount() {\r\n        this.props.getUser(parseInt(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n        list_owner || !this.props.visited_user[User.profile][Profile.is_manga_list_private] ?\r\n            <UserList\r\n                branch={BRANCH_MANGA}\r\n                params={this.props.match.params}\r\n                list_owner={list_owner}\r\n                titles_loading={this.props.manga_loading}\r\n                filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n                filtered_titles={this.props.filtered_manga}\r\n                title_filters={this.props.manga_filters}\r\n                user_entry_statuses={this.props.user_manga_entry_statuses}\r\n            /> : <PrivatePage text={`${this.props.visited_user[User.username]}'s ${BRANCH_MANGA} List is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n    manga_filters: state.cookies.manga_list_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(MangaList)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {getAnimeFranchise} from '../../../actions/anime'\r\n\r\nimport FranchiseTree from \"./FranchiseTree\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport CyberHeader from \"../../layout/navbar/CyberHeader\";\r\nimport {FRANCHISES_TAB_NAME} from \"../../../globals\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {AnimeFranchise} from \"../../../models\";\r\nimport Loading from \"../../layout/common/Loading\";\r\n\r\nimport '../../../assets/css/franchises.css'\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass FranchisesHome extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = FRANCHISES_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getAnimeFranchise(this.props.match.params.id);\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        // document.title = `${current_anime_franchise['title']}`;\r\n        let titles = [];\r\n        let avg_score;\r\n\r\n        // try {\r\n        //     if (current_anime_franchise['anime_franchise'].length > 0)\r\n        //         titles = current_anime_franchise['anime_franchise'];\r\n        //     avg_score = current_anime_franchise['average_score'].toFixed(2)\r\n        // } catch (e) {\r\n        // }\r\n\r\n        return (\r\n            <div id=\"Display-Franchise\">\r\n                <CyberHeader/>\r\n                {!isEmpty(this.props.anime_franchise) ?\r\n                    <FranchiseTree titles={this.props.anime_franchise[AnimeFranchise.anime_franchise]}/>\r\n                : this.props.anime_franchise_loading ? <Loading text={'Franchise Loading'}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise, getLoggedInUserAnimeEntryStatuses})(FranchisesHome)","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Manga, MangaData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport manga from \"../../../../reducers/manga\";\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.recently_added_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', manga_data[MangaData.recently_added_manga])}\r\n\r\n                    {manga_data[MangaData.recently_added_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction RecentlyDownloaded(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.recently_downloaded_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', manga_data[MangaData.recently_added_manga])}\r\n                    {manga_data[MangaData.recently_downloaded_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopUpcoming(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    console.log('mangadata:', manga_data);\r\n    console.log('MangaData.top_upcoming_manga:', manga_data[MangaData.top_upcoming_manga]);\r\n    console.log('manga_data_loaded:', manga_data_loaded);\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Upcoming Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_upcoming_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_upcoming_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScoredMal(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_scored_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_scored_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction MostPopularMal(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.most_popular_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.most_popular_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2010s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_2010s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_2010s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2000s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2000s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_2000s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_2000s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top90s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1990s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_90s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_90s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top80s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1980s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_80s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_80s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top70s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1970s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_70s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_70s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopMangaTabs(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    {/*<Tab label={<p>Recently Downloaded</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>*/}\r\n                    <Tab label={<p>Top Upcoming</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Score</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Most popular</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2010s</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2000s</p>} {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 90s</p>} {...a11yProps(6)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 80s</p>} {...a11yProps(7)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 70s</p>} {...a11yProps(8)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <RecentlyAdded\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                {/*<TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>*/}\r\n                {/*    <RecentlyDownloaded*/}\r\n                {/*        manga_data={manga_data}*/}\r\n                {/*        manga_loading={manga_loading}*/}\r\n                {/*        manga_data_loaded={manga_data_loaded}*/}\r\n                {/*        user_manga_entry_statuses={user_manga_entry_statuses}*/}\r\n                {/*    />*/}\r\n                {/*</TabPanel>*/}\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <TopUpcoming\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopScoredMal\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <MostPopularMal\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <Top2010s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={5} dir={theme.direction}>\r\n                    <Top2000s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={6} dir={theme.direction}>\r\n                    <Top90s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={7} dir={theme.direction}>\r\n                    <Top80s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={8} dir={theme.direction}>\r\n                    <Top70s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty} from \"../../functions\";\r\nimport {MANGA_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Manga, MangaData} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {TopMangaTabs} from \"./tabs/TopMangaTabs\";\r\n\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\nfunction CurrentSeason(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    const current_year = new Date().getFullYear();\r\n    let current_month = new Date().getMonth() + 1;\r\n    let current_season_number = 1;\r\n    if (current_month >= 1 && current_month <= 3) current_season_number = 1;\r\n    else if (current_month >= 4 && current_month <= 6) current_season_number = 2;\r\n    else if (current_month >= 7 && current_month <= 9) current_season_number = 3;\r\n    else if (current_month >= 10 && current_month <= 12) current_season_number = 4;\r\n    const current_season = getSeasonLabelFromSeasonNumber(current_season_number);\r\n\r\n    const season_icon_and_class = getIconAndClassFromSeasonNumber(current_season_number);\r\n    return <Grid xs={12} id=\"Current-Season\">\r\n        <div className=\"current-season-header\">\r\n            <h3>\r\n                Current Season{' '}\r\n                <CyberLink to={MANGA_SEASON_DISPLAY(current_year, current_season_number)}>\r\n                    {current_year} {current_season}\r\n                </CyberLink>{' '}\r\n                <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                 className={season_icon_and_class.className}/>\r\n            </h3>\r\n        </div>\r\n        <div id=\"season-titles-container\" className=\"current-season-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.current_manga_season] ?\r\n                <div className=\"current-season-titles-wrapper\">\r\n                    {manga_data[MangaData.current_manga_season].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"current-season-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\n\r\nclass TopManga extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <CurrentSeason\r\n                manga_data={this.props.manga_data}\r\n                manga_loading={this.props.manga_loading}\r\n                manga_data_loaded={this.props.manga_data_loaded}\r\n                user_manga_entry_statuses={this.props.user_manga_entry_statuses}\r\n            />\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopMangaTabs\r\n                manga_data={this.props.manga_data}\r\n                manga_loading={this.props.manga_loading}\r\n                manga_data_loaded={this.props.manga_data_loaded}\r\n                user_manga_entry_statuses={this.props.user_manga_entry_statuses}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_data: state.manga.manga_data,\r\n    manga_loading: state.manga.manga_loading,\r\n    manga_data_loaded: state.manga.manga_data_loaded,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopManga)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {MANGA_TAB_NAME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport {getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\nimport {getMangaDataForHomePage} from \"../../../actions/manga\";\r\nimport TopManga from \"./TopManga\";\r\n\r\n\r\nclass MangaHome extends Component {\r\n    componentDidMount() {\r\n        document.title = MANGA_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getMangaDataForHomePage();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Manga-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopManga/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {getMangaDataForHomePage, getLoggedInUserMangaEntryStatuses})(MangaHome)\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty, isTimeLessThanAnHourAgo} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, AnimeData, ApiResult, IndustryData} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\n\r\n\r\nclass TopCharacters extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid xs={12} className=\"horizontal-titles\">\r\n                <div className=\"horizontal-titles-header\">\r\n                    <h3>Most Popular Characters</h3>\r\n                </div>\r\n                <div className=\"horizontal-titles-container horizontal-scroll\">\r\n                    {this.props.industry_data_loaded && this.props.industry_data &&\r\n                        this.props.industry_data[IndustryData.most_popular_characters] ?\r\n                        <div className=\"horizontal-titles-wrapper\">\r\n                            {this.props.industry_data[IndustryData.most_popular_characters].map(character => (\r\n                                <TitleCard\r\n                                    containerClassNames=\"horizontal-titles-card-container\"\r\n                                    branch={BRANCH_CHARACTERS}\r\n                                    title={character}\r\n                                    skip_img_preload={true}\r\n                                />\r\n                            ))}\r\n                        </div> : this.props.industry_data_loading ?\r\n                            <Loading text={'Characters Loading'} block={true}/> : null}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <Grid xs={12} className=\"horizontal-titles\">\r\n                <div className=\"horizontal-titles-header\">\r\n                    <h3>Recently Added Characters</h3>\r\n                </div>\r\n                <div className=\"horizontal-titles-container horizontal-scroll\">\r\n                    {this.props.industry_data_loaded && this.props.industry_data &&\r\n                        this.props.industry_data[IndustryData.recently_added_characters] ?\r\n                        <div className=\"horizontal-titles-wrapper\">\r\n                            {this.props.industry_data[IndustryData.recently_added_characters].map(character => (\r\n                                <TitleCard\r\n                                    containerClassNames=\"horizontal-titles-card-container\"\r\n                                    branch={BRANCH_CHARACTERS}\r\n                                    title={character}\r\n                                    skip_img_preload={true}\r\n                                />\r\n                            ))}\r\n                        </div> : this.props.industry_data_loading ?\r\n                            <Loading text={'Characters Loading'} block={true}/> : null}\r\n                </div>\r\n            </Grid>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    industry_data: state.industry.industry_data,\r\n    industry_data_loading: state.industry.industry_data_loading,\r\n    industry_data_loaded: state.industry.industry_data_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopCharacters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {CHARACTERS_TAB_NAME, INDUSTRY_TAB_NAME} from \"../../../globals\";\r\nimport {getCharactersDataForHomePage} from \"../../../actions/characters\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport TopCharacters from \"./TopCharacters\";\r\n\r\nimport '../../../assets/css/characters.css'\r\nimport {getIndustryDataForHomePage} from \"../../../actions/industry\";\r\n\r\n\r\nclass CharactersHome extends Component {\r\n    componentDidMount() {\r\n        document.title = INDUSTRY_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getIndustryDataForHomePage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Characters-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopCharacters/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getIndustryDataForHomePage})(CharactersHome)\r\n","import axios from \"axios\";\r\nimport {GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING} from \"./types\";\r\nimport {API_GET_INDUSTRY_DATA_FOR_HOME_PAGE} from \"./api_urls\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {returnErrors} from \"./messages\";\r\n\r\n\r\n// GET INDUSTRY DATA FOR INDUSTRY HOME PAGE\r\nexport const getIndustryDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: INDUSTRY_DATA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_INDUSTRY_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_INDUSTRY_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {ErogeData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_EROGE} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport TopEroge from \"../TopEroge\";\r\n\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.recently_added_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.recently_added_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScored(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_scored_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_scored_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nexport function MostPopular(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        <div className=\"horizontal-titles-header\">\r\n            <h3>Most Popular Eroge</h3>\r\n        </div>\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.most_popular_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.most_popular_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopWindows(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_windows_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_windows_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopAndroid(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_android_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_android_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction LargestSize(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.largest_size_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.largest_size_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopErogeTabs(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Scored</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Windows</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Android</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Largest</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <RecentlyAdded\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <TopScored\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopWindows\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <TopAndroid\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <LargestSize\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {MostPopular, TopErogeTabs} from \"./tabs/TopErogeTabs\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\n\r\n\r\nclass TopEroge extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <MostPopular\r\n                eroge_data={this.props.eroge_data}\r\n                eroge_loading={this.props.eroge_loading}\r\n                eroge_data_loaded={this.props.eroge_data_loaded}/>\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopErogeTabs\r\n                eroge_data={this.props.eroge_data}\r\n                eroge_loading={this.props.eroge_loading}\r\n                eroge_data_loaded={this.props.eroge_data_loaded}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_data: state.eroge.eroge_data,\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    eroge_data_loaded: state.eroge.eroge_data_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopEroge)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {ANIME_TAB_NAME, EROGE_BROWSE_TAB_NAME, EROGE_TAB_NAME} from \"../../../globals\";\r\nimport {getErogeDataForHomePage} from \"../../../actions/eroge\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport TopEroge from \"./TopEroge\";\r\n\r\n\r\nclass ErogeHome extends Component {\r\n    componentDidMount() {\r\n        document.title = EROGE_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getErogeDataForHomePage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Eroge-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopEroge/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getErogeDataForHomePage})(ErogeHome)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\n\r\n\r\nclass PeopleBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_PEOPLE}\r\n            titles_loading={this.props.people_loading}\r\n            filtered_titles_loaded={this.props.filtered_people_loaded}\r\n            filtered_titles={this.props.filtered_people}\r\n            title_filters={this.props.people_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people_loading: state.people.people_loading,\r\n    filtered_people_loaded: state.people.filtered_people_loaded,\r\n    filtered_people: state.people.filtered_people,\r\n    people_filters: state.cookies.people_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PeopleBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass PersonDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_PEOPLE}\r\n            param_id={this.props.match.params.id}\r\n            title={this.props.person}\r\n            title_loaded={this.props.people_loaded}\r\n            title_loading={this.props.people_loading}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    people_loaded: state.people.people_loaded,\r\n    people_loading: state.people.people_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PersonDisplay)\r\n","export const TEMPLATE_NAME_NONE = 'Select Default';\r\nexport const TEMPLATE_NAME_DEFAULT = 'Default';\r\nexport const TEMPLATE_NAME_MAL = 'MAL';\r\nexport const TEMPLATE_NAME_HIGH_CONTRAST = 'High Contrast';\r\n\r\nexport const TEMPLATE_NONE_BACKGROUND = {\r\n    background_color: {hex: '00000000'},\r\n    url: '',\r\n    repeat: 'no-repeat',\r\n    size: 'contain',\r\n    position_1: 'center',\r\n    position_2: 'center',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\n\r\nexport const TEMPLATE_DEFAULT_BACKGROUND = {\r\n    background_color: {hex: '00000000'},\r\n    url: 'https://ik.imagekit.io/r0d4cpkoj/BBCode_Templates/girl_phone_window_hXW-PC-Nj.jpg',\r\n    repeat: 'no-repeat',\r\n    size: 'cover',\r\n    position_1: 'center',\r\n    position_2: 'bottom',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\n\r\nexport const TEMPLATE_DEFAULT_BBCODE = `\r\n\r\n[animestats width=50%][/animestats][mangastats width=50%][/mangastats]\r\n\r\n\r\n\r\n\r\n[p width=50%][size=25]    Favorite Anime[/size][/p][p width=50%][size=25]    Favorite Manga[/size][/p]\r\n[favoriteanime small=true width=50%][/favoriteanime][favoritemanga small=true  width=50%][/favoritemanga]\r\n\r\n\r\n\r\n[p width=50%][size=25]    Favorite Characters[/size][/p][p width=50%][size=25]\r\n   Favorite People[/size][/p]\r\n[favoritecharacters small=true width=50%][/favoritecharacters][favoritepeople small=true width=50%][/favoritepeople]\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\nexport const TEMPLATE_MAL_BACKGROUND = TEMPLATE_NONE_BACKGROUND;\r\nexport const TEMPLATE_MAL_BBCODE = `\r\n\r\n[animestats width=50%][/animestats][mangastats width=50%][/mangastats]\r\n\r\n\r\n[p width=100%][size=30][center]Favorites[/center][/size][/p]\r\n\r\n[p width=25%][size=25][center]Anime[/center][/size][/p][p width=25%][size=25][center]Manga[/center][/size][/p][p width=25%][size=25][center]Characters[/center][/size][/p][p width=25%][size=25][center]People[/center][/size][/p]\r\n\r\n[favoriteanime small=true width=25% center=true][/favoriteanime][favoritemanga small=true  width=25% center=true][/favoritemanga][favoritecharacters small=true width=25% center=true][/favoritecharacters][favoritepeople small=true width=25% center=true][/favoritepeople]\r\n\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\nexport const TEMPLATE_HIGH_CONTRAST_BACKGROUND = {\r\n    background_color: {hex: '000000'},\r\n    url: '',\r\n    repeat: 'no-repeat',\r\n    size: 'contain',\r\n    position_1: 'center',\r\n    position_2: 'center',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\nexport const TEMPLATE_HIGH_CONTRAST_BBCODE = `\r\n\r\n\r\n\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''There is nothing. Only warm, primordial blackness. Your conscience ferments in it — no larger than a single grain of malt. You don't have to do anything anymore. Ever. Never ever.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''An inordinate amount of time passes. It is utterly void of struggle. No lives are contained within it.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''The song of death is sweet and endless... But what is this? Somewhere in the sore, bloated *man-meat* around you — a sensation!''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''The limbed and headed machine of pain and undignified suffering is firing up again. It wants to walk the desert. Hurting. Longing.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[center][p width=70%][color=#ff0000][i]''This is a person with a lot of past, but little present. And almost no future.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n\r\n`;\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport {CyberButton} from \"../../../../layout/common/common\";\r\n\r\nimport '../../../../../assets/css/bbcode_editor.css'\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {\r\n    TEMPLATE_DEFAULT_BACKGROUND,\r\n    TEMPLATE_DEFAULT_BBCODE,\r\n    TEMPLATE_HIGH_CONTRAST_BACKGROUND,\r\n    TEMPLATE_HIGH_CONTRAST_BBCODE,\r\n    TEMPLATE_MAL_BACKGROUND,\r\n    TEMPLATE_MAL_BBCODE,\r\n    TEMPLATE_NAME_DEFAULT,\r\n    TEMPLATE_NAME_HIGH_CONTRAST,\r\n    TEMPLATE_NAME_MAL,\r\n    TEMPLATE_NAME_NONE\r\n} from \"../templates\";\r\nimport {Profile, User} from \"../../../../../models\";\r\n\r\n\r\n/**\r\n * returns True if the objects are the same\r\n * @param target\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nfunction compareImageObject(target, value) {\r\n    if (target.background_color !== value.background_color)\r\n        return false;\r\n    if (target.position_1 !== value.position_1)\r\n        return false;\r\n    if (target.position_2 !== value.position_2)\r\n        return false;\r\n    if (target.position_x !== value.position_x)\r\n        return false;\r\n    if (target.position_y !== value.position_y)\r\n        return false;\r\n    if (target.repeat !== value.repeat)\r\n        return false;\r\n    if (target.size !== value.size)\r\n        return false;\r\n    return target.url === value.url;\r\n}\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BBCodeEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateSelectedPreset = this.updateSelectedPreset.bind(this);\r\n        this.state = {\r\n            selected_template: TEMPLATE_NAME_NONE\r\n        };\r\n    }\r\n\r\n    updateSelectedPreset(e) {\r\n        this.setState({selected_template: e.target.value});\r\n        const background = JSON.parse(this.props.user[User.profile][Profile.about_section_background_style]);\r\n        const bbcode = this.props.user[User.profile][Profile.about_section_bbcode].replaceAll('\\n', '[br][/br]');\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!(bbcode !== this.props.bbcode || !compareImageObject(background, this.props.background_image)) || ((bbcode !== this.props.bbcode || !compareImageObject(background, this.props.background_image)) && confirm('You have unsaved changes, changing the template will delete any unsaved changes!'))) {\r\n            switch (e.target.value) {\r\n                case TEMPLATE_NAME_DEFAULT:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_DEFAULT_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_DEFAULT_BACKGROUND, 'all');\r\n                    return;\r\n                case TEMPLATE_NAME_MAL:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_MAL_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_MAL_BACKGROUND, 'all');\r\n                    return;\r\n                case TEMPLATE_NAME_HIGH_CONTRAST:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_HIGH_CONTRAST_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_HIGH_CONTRAST_BACKGROUND, 'all');\r\n                    return;\r\n                default:\r\n                    return\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <div className=\"editor-container box-light\">\r\n                <FormControl variant=\"outlined\" className=\"form-control\">\r\n                    <InputLabel id=\"select-position-2-label\">Template</InputLabel>\r\n                    <Select\r\n                        labelId=\"select-position-2-label\"\r\n                        id=\"select-position-1\"\r\n                        value={this.state.selected_template}\r\n                        onChange={this.updateSelectedPreset}\r\n                        label=\"position\"\r\n                    >\r\n                        <MenuItem value={TEMPLATE_NAME_NONE}>\r\n                            <span className=\"color-gray\">Select Template</span>\r\n                        </MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_DEFAULT}>Default</MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_MAL}>MAL</MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_HIGH_CONTRAST}>High Contrast</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    id=\"BBCode-Editor-Field\"\r\n                    label=\"BBCode Text Editor\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={this.props.bbcode ? this.props.bbcode.replaceAll('[br][/br]', '\\n') : ''}\r\n                    name=\"bbcode-editor\"\r\n                    onChange={this.props.updateEditor}\r\n                />\r\n                <p className=\"color-gray\">Type your bbCode here and see it update in real time.</p>\r\n                <p className=\"color-gray\">Hit the Upload button to update your About Me bbCode.</p>\r\n                <div className=\"submit-btn-container\">\r\n                    <CyberButton classNames={'btn-contained-success'} variant={'contained'}\r\n                                 onClick={this.props.submitAboutMe}>\r\n                        Upload\r\n                    </CyberButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"available-tags box-light\">\r\n                <h2>Special tags</h2>\r\n                <p><span className=\"tag-color\">[animestats][/animestats]</span> - <span className=\"color-gray\">Displays Anime Stats</span></p>\r\n                <p><span className=\"tag-color\">[mangastats][/mangastats]</span> - <span className=\"color-gray\">Displays Manga Stats</span></p>\r\n                <p><span className=\"color-gray\">Available attributes</span> - <span className=\"tag-color\">width=0-100/0-100%</span></p>\r\n                <br/>\r\n                <p><span className=\"tag-color\">[favoriteanime][/favoriteanime]</span> - <span className=\"color-gray\">Displays Favorite Anime</span></p>\r\n                <p><span className=\"tag-color\">[favoritemanga][/favoritemanga]</span> - <span className=\"color-gray\">Displays Favorite Manga</span></p>\r\n                <p><span className=\"tag-color\">[favoritecharacters][/favoritecharacters]</span> - <span className=\"color-gray\">Displays Favorite Characters</span></p>\r\n                <p><span className=\"tag-color\">[favoritepeople][/favoritepeople]</span> - <span className=\"color-gray\">Displays Favorite People</span></p>\r\n                <p><span className=\"color-gray\">Available attributes</span> - <span className=\"tag-color\">width=0-100/0-100%, center=true/false, small=true <span className=\"color-gray\">(Makes cards small)</span>, limit=0-100 <span className=\"color-gray\">(limits how many cards will show up)</span></span></p>\r\n            </div>\r\n\r\n            <div className=\"available-tags box-light\">\r\n                <h2>Available tags</h2>\r\n                <p><span className=\"tag-color\">[br][/br]</span> - <span className=\"color-gray\">Start in a new line</span></p>\r\n                <p><span className=\"tag-color\">[b]</span>Bold<span className=\"tag-color\">[/b]</span> - <span className=\"color-gray\"><b>Bold</b></span></p>\r\n                <p><span className=\"tag-color\">[i]</span>Italic<span className=\"tag-color\">[/i]</span> - <span className=\"color-gray\"><i>Italic</i></span></p>\r\n                <p><span className=\"tag-color\">[u]</span>Underline<span className=\"tag-color\">[/u]</span> - <span className=\"color-gray\"><u>Underline</u></span></p>\r\n                <p><span className=\"tag-color\">[s]</span>Strikethrough<span className=\"tag-color\">[/s]</span> - <span className=\"color-gray\"><s>Strikethrough</s></span></p>\r\n                <p><span className=\"tag-color\">[color=red]</span>Colored Text<span className=\"tag-color\">[/color]</span> - <span style={{color: 'red'}}>Colored Text</span></p>\r\n                <p><span className=\"tag-color\">[color=#ff0000]</span>Colored Text<span className=\"tag-color\">[/color]</span> - <span style={{color: '#ff0000'}}>Colored Text with HEX</span></p>\r\n                <p><span className=\"tag-color\">[size=30]</span>Bigger text<span className=\"tag-color\">[/size]</span> - <span className=\"color-gray\" style={{fontSize: 30}}>Bigger text</span></p>\r\n                <p><span className=\"tag-color\">[center]</span>Center<span className=\"tag-color\">[/center]</span> - <span className=\"color-gray\">Centers elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[left]</span>Left<span className=\"tag-color\">[/left]</span> - <span className=\"color-gray\">Left aligns elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[right]</span>Right<span className=\"tag-color\">[/right]</span> - <span className=\"color-gray\">Right aligns elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[quote]</span>quoted text<span className=\"tag-color\">[/quote]</span> - <span className=\"color-gray\">Quoted text</span></p>\r\n                <p><span className=\"tag-color\">[url]</span>https://cyber-genesis.rf.gd<span className=\"tag-color\">[/url]</span> - <a href=\"https://cyber-genesis.rf.gd\">https://cyber-genesis.rf.gd</a></p>\r\n                <p><span className=\"tag-color\">[url=https://cyber-genesis.rf.gd]</span>Name<span className=\"tag-color\">[/url]</span> - <a href=\"https://cyber-genesis.rf.gd\">Name</a></p>\r\n                <p><span className=\"tag-color\">[img]</span>https://i.imgur.com/WGEbacJ.jpg<span className=\"tag-color\">[/img]</span> - <span className=\"color-gray\">Image/Gif</span></p>\r\n                <p><span className=\"tag-color\">[img width=100% height=50]</span>https://i.imgur.com/WGEbacJ.jpg<span className=\"tag-color\">[/img]</span> - <span className=\"color-gray\">Image/Gif resized (in %/px)</span></p>\r\n                <p><span className=\"tag-color\">[list][*]</span>1<span className=\"tag-color\">[*]</span>2<span className=\"tag-color\">[/list]</span> - <span className=\"color-gray\">List of items</span></p>\r\n                <p><span className=\"tag-color\">[table][tr][td]</span>cell<span className=\"tag-color\">[/td][/tr][/table]</span> - <span className=\"color-gray\">Table of items</span></p>\r\n            </div>\r\n        </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BBCodeEditor)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {ColorPicker} from 'material-ui-color';\r\n\r\nimport '../../../../../assets/css/bbcode_editor.css'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport {CyberButton} from \"../../../../layout/common/common\";\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BackgroundEditorTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid contaienr className=\"editor-container box-light\">\r\n                <Grid item xs={12}>\r\n                    <p className=\"color-gray\">Background color</p>\r\n                    <ColorPicker\r\n                        onChange={(e) => {\r\n                            this.props.updateBackgroundImage(e, 'background_color')\r\n                        }}\r\n                        value={this.props.background_image.background_color}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid className=\"background-image-segment\" item xs={12}>\r\n                    <p className=\"color-gray\">Background image</p>\r\n                    <TextField\r\n                        id=\"Background-Image-Field\"\r\n                        label=\"Image URL\"\r\n                        className=\"form-control\"\r\n                        value={this.props.background_image.url}\r\n                        name=\"bbcode-editor\"\r\n                        onChange={(e) => {\r\n                            this.props.updateBackgroundImage(e, 'url')\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n\r\n                <Grid item xs={12}>\r\n                    <p className=\"color-gray\">Image options</p>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-repeat-label\">repeat</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-repeat-label\"\r\n                            id=\"select-repeat\"\r\n                            value={this.props.background_image.repeat}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'repeat')\r\n                            }}\r\n                            label=\"repeat\"\r\n                        >\r\n                            <MenuItem value={'no-repeat'}>no-repeat</MenuItem>\r\n                            <MenuItem value={'repeat'}>repeat</MenuItem>\r\n                            <MenuItem value={'repeat-x'}>repeat-x</MenuItem>\r\n                            <MenuItem value={'repeat-y'}>repeat-y</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-size-label\">size</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-size-label\"\r\n                            id=\"select-size\"\r\n                            value={this.props.background_image.size}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'size')\r\n                            }}\r\n                            label=\"size\"\r\n                        >\r\n                            <MenuItem value={'contain'}>contain</MenuItem>\r\n                            <MenuItem value={'cover'}>cover</MenuItem>\r\n                            <MenuItem value={'auto'}>auto</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-position-1-label\">position</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-position-1-label\"\r\n                            id=\"select-position-1\"\r\n                            value={this.props.background_image.position_1}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_1')\r\n                            }}\r\n                            label=\"position\"\r\n                        >\r\n                            <MenuItem value={'center'}>center</MenuItem>\r\n                            <MenuItem value={'left'}>left</MenuItem>\r\n                            <MenuItem value={'right'}>right</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-position-2-label\">position</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-position-2-label\"\r\n                            id=\"select-position-1\"\r\n                            value={this.props.background_image.position_2}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_2')\r\n                            }}\r\n                            label=\"position\"\r\n                        >\r\n                            <MenuItem value={'bottom'}>bottom</MenuItem>\r\n                            <MenuItem value={'center'}>center</MenuItem>\r\n                            <MenuItem value={'top'}>top</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl className=\"form-control\" variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"select-position-x-label\">position-x</InputLabel>\r\n                        <OutlinedInput\r\n                            id=\"select-position-x-label\"\r\n                            value={this.props.background_image.position_x}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_x')\r\n                            }}\r\n                            type=\"number\"\r\n                            endAdornment={<InputAdornment position=\"end\">px</InputAdornment>}\r\n                            aria-describedby=\"outlined-weight-helper-text\"\r\n                            inputProps={{\r\n                                'aria-label': 'position-x',\r\n                            }}\r\n                            labelWidth={0}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl className=\"form-control\" variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"select-position-y-label\">position-y</InputLabel>\r\n                        <OutlinedInput\r\n                            id=\"select-position-y-label\"\r\n                            value={this.props.background_image.position_y}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_y')\r\n                            }}\r\n                            type=\"number\"\r\n                            endAdornment={<InputAdornment position=\"end\">px</InputAdornment>}\r\n                            aria-describedby=\"outlined-weight-helper-text\"\r\n                            inputProps={{\r\n                                'aria-label': 'position-y',\r\n                            }}\r\n                            labelWidth={0}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-submit\" item xs={12}>\r\n                    <CyberButton variant={'contained'} classNames={'btn-contained-success'}\r\n                                 onClick={this.props.submitAboutMe}\r\n                    >\r\n                        Upload\r\n                    </CyberButton>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BackgroundEditorTab)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../../../../layout/sounds\";\r\nimport BBCodeEditorTab from \"./BBCodeEditorTab\";\r\nimport BackgroundEditorTab from \"./BackgroundEditorTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BBCodeEditorTabs(props) {\r\n    const {bbcode, background_image, updateEditor, updateBackgroundImage, submitAboutMe} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs\"\r\n                >\r\n                    <Tab label=\"bbCode\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"Background\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <BBCodeEditorTab\r\n                        bbcode={bbcode}\r\n                        background_image={background_image}\r\n                        updateEditor={updateEditor}\r\n                        updateBackgroundImage={updateBackgroundImage}\r\n                        submitAboutMe={submitAboutMe}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    <BackgroundEditorTab\r\n                        background_image={background_image}\r\n                        updateBackgroundImage={updateBackgroundImage}\r\n                        submitAboutMe={submitAboutMe}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport CyberNavbar from \"../../../layout/navbar/CyberNavbar\";\r\nimport {cyberBBCodeParser} from \"./parser\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {editUserAboutMeBackground, editUserAboutMeBBCode, getUserList} from \"../../../../actions/users\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport {BBCodeEditorTabs} from \"./tabs/bbCodeTabs\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {TEMPLATE_NONE_BACKGROUND} from \"./templates\";\r\n\r\nimport '../../../../assets/css/bbcode_editor.css'\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BBCodeEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateEditor = this.updateEditor.bind(this);\r\n        this.submitAboutMe = this.submitAboutMe.bind(this);\r\n        this.updateBackgroundImage = this.updateBackgroundImage.bind(this);\r\n\r\n        let background = TEMPLATE_NONE_BACKGROUND;\r\n        if (this.props.user[User.profile][Profile.about_section_background_style])\r\n            background = JSON.parse(this.props.user[User.profile][Profile.about_section_background_style]);\r\n\r\n        this.state = {\r\n            bbcode: this.props.user[User.profile][Profile.about_section_bbcode],\r\n            background_image: background,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'BBCode Editor';\r\n        window.scrollTo(0, 0);\r\n        this.props.getUserList(this.props.user[User.id]);\r\n        this.props.getUser(this.props.user[User.id]);\r\n    }\r\n\r\n    // componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //     if (prevProps.visited_user_loaded === false && this.props.visited_user_loaded)\r\n    //         if (this.props.visited_user[User.profile][Profile.about_section_background_style]) {\r\n    //             const background = JSON.parse(this.props.visited_user[User.profile][Profile.about_section_background_style]);\r\n    //             this.setState({background_image: background})\r\n    //         }\r\n    // }\r\n\r\n    updateEditor(e) {\r\n        this.setState({bbcode: e.target.value});\r\n    }\r\n\r\n    updateBackgroundImage(e, attribute) {\r\n        let bg_img = {};\r\n        Object.assign(bg_img, this.state.background_image);\r\n        if (attribute === 'background_color') bg_img[attribute] = e;\r\n        else if (attribute === 'all') Object.assign(bg_img, e);\r\n        else bg_img[attribute] = e.target.value;\r\n        this.setState({background_image: bg_img})\r\n    }\r\n\r\n    submitAboutMe() {\r\n        const bbcode = this.state.bbcode ? this.state.bbcode.replaceAll('\\n', '[br][/br]') : this.state.bbcode;\r\n        this.props.editUserAboutMeBBCode(bbcode);\r\n        this.props.editUserAboutMeBackground(this.state.background_image)\r\n    }\r\n\r\n    render() {\r\n        const bbcode = this.state.bbcode ? this.state.bbcode.replaceAll('\\n', '[br][/br]') : this.state.bbcode;\r\n        const style = {\r\n             backgroundColor: `#${this.state.background_image.background_color['hex']}`,\r\n             backgroundRepeat: this.state.background_image.repeat,\r\n             backgroundSize: this.state.background_image.size,\r\n             backgroundPosition: `${this.state.background_image.position_1} ${this.state.background_image.position_2}`,\r\n        };\r\n        if (this.state.background_image.url !== '')\r\n            style.backgroundImage = `url(\"${this.state.background_image.url}\")`;\r\n        if (this.state.background_image.position_x)\r\n            style.backgroundPositionX = `${this.state.background_image.position_x}px`;\r\n        if (this.state.background_image.position_y)\r\n            style.backgroundPositionY = `${this.state.background_image.position_y}px`;\r\n\r\n        console.log('style', style);\r\n        console.log('style', style);\r\n\r\n        return (<>\r\n            <CyberNavbar/>\r\n            {this.props.user_loading ? <Loading text={'Loading'}/> :\r\n                <Grid id=\"BBCode-Editor\" container>\r\n                    <Grid item xs={4} className=\"bbcode-editor-segment\">\r\n                        <BBCodeEditorTabs\r\n                            bbcode={bbcode}\r\n                            background_image={this.state.background_image}\r\n                            updateEditor={this.updateEditor}\r\n                            updateBackgroundImage={this.updateBackgroundImage}\r\n                            submitAboutMe={this.submitAboutMe}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className=\"bbcode-editor-segment\">\r\n                        <div id=\"BBCode_Container\" className=\"bbcode-container\" style={style}>\r\n                            {cyberBBCodeParser(bbcode)}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>}\r\n        </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    user_loaded: state.auth.user_loaded,\r\n    // visited_user: state.auth.visited_user,\r\n    // visited_user_loaded: state.auth.visited_user_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    editUserAboutMeBBCode, editUserAboutMeBackground, getUser, getUserList\r\n})(BBCodeEditor)\r\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\n// noinspection ES6CheckImport\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\n\nimport Home from \"./home/Home\";\n\nimport 'fontsource-roboto';\nimport {\n    ANIME_BROWSE,\n    ANIME_FRANCHISES,\n    ANIME_HOME,\n    ANIME_SEASONS,\n    HOME,\n    LOGIN,\n    MANGA_BROWSE,\n    MANGA_FRANCHISES,\n    MANGA_HOME,\n    MANGA_SEASONS,\n    PROFILE,\n    REGISTER,\n    INDEX,\n    NOT_FOUND,\n    ANIME_DISPLAY,\n    MANGA_DISPLAY,\n    CHARACTERS_HOME,\n    CHARACTERS_BROWSE,\n    CHARACTERS_DISPLAY,\n    EROGE_HOME,\n    EROGE_BROWSE,\n    EROGE_DISPLAY,\n    ANIME_SEASON_DISPLAY,\n    SETTINGS,\n    MANGA_SEASON_DISPLAY,\n    USER_ANIME_LIST,\n    USER_MANGA_LIST,\n    USER_EROGE_LIST,\n    USER_ANIME_STATISTICS,\n    USER_ANIME_HISTORY,\n    USER_MANGA_HISTORY,\n    ANIME_FRANCHISE_DISPLAY, PEOPLE_HOME, PEOPLE_BROWSE, PERSON_DISPLAY, USER_ACHIEVEMENTS, BBCODE_EDITOR\n} from \"../urls\";\n\nimport store from '../store'\nimport {authUser, setRedirectUrl} from \"../actions/auth\";\nimport {loadSounds} from \"./layout/sounds\";\nimport AnimeHome from \"./anime/home/AnimeHome\";\nimport Login from \"./auth/Login\";\nimport Register from \"./auth/Register\";\nimport AnimeBrowse from \"./anime/browse/AnimeBrowse\";\nimport Index from \"./index/Index\";\nimport Profile from \"./user/profile/Profile\";\nimport Settings from \"./user/settings/Settings\";\nimport MangaBrowse from \"./manga/browse/MangaBrowse\";\nimport AnimeDisplay from \"./anime/display/AnimeDisplay\";\nimport MangaDisplay from \"./manga/display/MangaDisplay\";\nimport CharactersBrowse from \"./characters/browse/CharactersBrowse\";\nimport CharacterDisplay from \"./characters/display/CharacterDisplay\";\nimport ErogeBrowse from \"./eroge/browse/ErogeBrowse\";\nimport ErogeDisplay from \"./eroge/display/ErogeDisplay\";\nimport BrowseAnimeSeasons from \"./anime/seasons/BrowseAnimeSeasons\";\nimport BrowseMangaSeasons from \"./manga/seasons/BrowseMangaSeasons\";\nimport NotFound from \"./layout/404/404\";\nimport Alerts from \"./layout/alerts/Alerts\";\nimport DisplaySeason from \"./seasons/DisplaySeason\";\nimport {BRANCH_ANIME, BRANCH_EROGE, BRANCH_MANGA} from \"../globals\";\nimport AnimeList from \"./user/user_list/anime/AnimeList\";\nimport Statistics from \"./user/statistics/Statistics\";\nimport History from \"./user/history/History\";\nimport {LoadGifs} from \"./layout/common/common\";\nimport MangaList from \"./user/user_list/manga/MangaList\";\nimport DisplayFranchise from \"./franchises/display/DisplayFranchise\";\nimport Loading from \"./layout/common/Loading\";\nimport MangaHome from \"./manga/home/MangaHome\";\nimport CharactersHome from \"./characters/home/CharactersHome\";\nimport ErogeHome from \"./eroge/home/ErogeHome\";\nimport PeopleBrowse from \"./people/browse/PeopleBrowse\";\nimport PersonDisplay from \"./people/display/PersonDisplay\";\nimport BBCodeEditor from \"./user/settings/bbcode_editor/BBCodeEditor\";\nimport {setUserListDesignSettings, setUserTitleDisplaySettings} from \"../actions/users\";\nimport {User, Profile as ProfileModel} from \"../models\";\n\n\nfunction checkForRedirectUrl(host, pathname, url) {\n    if (pathname !== LOGIN && pathname !== REGISTER && pathname !== INDEX && pathname !== NOT_FOUND)\n        store.dispatch(setRedirectUrl(pathname))\n}\n\n\n// noinspection JSClassNamingConvention,JSCheckFunctionSignatures\nclass App extends Component {\n    componentDidMount() {\n        store.dispatch(authUser());\n        loadSounds();\n    }\n\n    render() {\n        const redirect_url = window.location.href;\n        const host = window.location.host;\n        const pathname = window.location.pathname;\n\n        if (this.props.user_authenticated) {\n            store.dispatch(setUserTitleDisplaySettings(\n                BRANCH_ANIME, this.props.user[User.profile][ProfileModel.user_anime_display_settings]));\n            store.dispatch(setUserTitleDisplaySettings(\n                BRANCH_MANGA, this.props.user[User.profile][ProfileModel.user_manga_display_settings]));\n            store.dispatch(setUserTitleDisplaySettings(\n                BRANCH_EROGE, this.props.user[User.profile][ProfileModel.user_eroge_display_settings]));\n\n            store.dispatch(setUserListDesignSettings(\n                BRANCH_ANIME, this.props.user[User.profile][ProfileModel.user_anime_list_design_settings]));\n            store.dispatch(setUserListDesignSettings(\n                BRANCH_MANGA, this.props.user[User.profile][ProfileModel.user_manga_list_design_settings]));\n        }\n\n        if (this.props.initial_auth)\n            return <Loading text={'Initializing...'}/>;\n        else return (\n            <BrowserRouter>\n                <Alerts/>\n                <LoadGifs/>\n                <Switch>\n                    <Route exact path={INDEX} component={Index}/>\n                    <Route exact path={LOGIN} component={Login}/>\n                    <Route exact path={REGISTER} component={Register}/>\n                    {!this.props.user_authenticated ? <>\n                        {checkForRedirectUrl(host, pathname, redirect_url)}\n                        <Redirect to={LOGIN}/>\n                    </> : null}\n                    <Route exact path={HOME} component={Home}/>\n\n                    <Route exact path={SETTINGS} component={Settings}/>\n                    <Route exact path={PROFILE()} component={Profile}/>\n                    <Route exact path={USER_ANIME_LIST()} component={AnimeList}/>\n                    <Route exact path={USER_MANGA_LIST()} component={MangaList}/>\n                    <Route exact path={USER_EROGE_LIST()} component={NotFound}/>\n                    <Route exact path={USER_ANIME_STATISTICS()} component={Statistics}/>\n                    <Route path={USER_ANIME_HISTORY()}\n                           render={(props) => <History {...props} branch={BRANCH_ANIME}/>}/>\n                    <Route path={USER_MANGA_HISTORY()}\n                           render={(props) => <History {...props} branch={BRANCH_MANGA}/>}/>\n\n                    <Route exact path={BBCODE_EDITOR} component={BBCodeEditor}/>\n\n                    <Route exact path={ANIME_HOME} component={AnimeHome}/>\n                    <Route exact path={ANIME_BROWSE} component={AnimeBrowse}/>\n                    <Route exact path={ANIME_SEASONS} component={BrowseAnimeSeasons}/>\n                    <Route exact path={ANIME_SEASON_DISPLAY()}\n                           render={(props) => <DisplaySeason {...props} branch={BRANCH_ANIME}/>}/>\n                    <Route exact path={ANIME_FRANCHISES} component={NotFound}/>\n                    <Route exact path={ANIME_FRANCHISE_DISPLAY()} component={DisplayFranchise}/>\n                    <Route exact path={ANIME_DISPLAY()} component={AnimeDisplay}/>\n\n                    <Route exact path={MANGA_HOME} component={MangaHome}/>\n                    <Route exact path={MANGA_BROWSE} component={MangaBrowse}/>\n                    <Route exact path={MANGA_SEASONS} component={BrowseMangaSeasons}/>\n                    <Route exact path={MANGA_SEASON_DISPLAY()}\n                           render={(props) => <DisplaySeason {...props} branch={BRANCH_MANGA}/>}/>\n                    <Route exact path={MANGA_FRANCHISES} component={NotFound}/>\n                    <Route exact path={MANGA_DISPLAY()} component={MangaDisplay}/>\n\n                    <Route exact path={CHARACTERS_HOME} component={CharactersHome}/>\n                    <Route exact path={CHARACTERS_BROWSE} component={CharactersBrowse}/>\n                    <Route exact path={CHARACTERS_DISPLAY()} component={CharacterDisplay}/>\n\n                    {/*<Route exact path={PEOPLE_HOME} component={CharactersHome}/>*/}\n                    <Route exact path={PEOPLE_BROWSE} component={PeopleBrowse}/>\n                    <Route exact path={PERSON_DISPLAY()} component={PersonDisplay}/>\n\n                    <Route exact path={EROGE_HOME} component={ErogeHome}/>\n                    <Route exact path={EROGE_BROWSE} component={ErogeBrowse}/>\n                    <Route exact path={EROGE_DISPLAY()} component={ErogeDisplay}/>\n\n                    <Route exact path={NOT_FOUND} component={NotFound}/>\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    message: state.errors.message,\n    status: state.errors.status,\n    initial_auth: state.auth.initial_auth,\n    user: state.auth.user,\n    user_authenticated: state.auth.user_authenticated,\n});\n\nexport default connect(mapStateToProps, {})(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport reportWebVitals from './reportWebVitals';\n\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport {Provider as AlertProvider} from 'react-alert'\nimport yourRawTheme from './theme.json';\n\nimport {AlertOptions, MyAlertTemplate} from \"./components/layout/alerts/AlertTemplate\";\nimport App from './components/App';\n\nimport './index.css';\nimport './assets/css/cyber-ui.css';\n\nconst theme = createMuiTheme(yourRawTheme);\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <AlertProvider template={MyAlertTemplate} {...AlertOptions}>\n                    <App/>\n                </AlertProvider>\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import Alert from \"@material-ui/lab/Alert\";\r\nimport store from \"../../../store\";\r\nimport {cleanErrors, clearMessage} from \"../../../actions/messages\";\r\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const AlertOptions = {\r\n    timeout: 3000,\r\n    position: 'bottom left'\r\n};\r\n\r\nexport const MyAlertTemplate = ({style, options, message, close}) => (\r\n    <Alert severity={\r\n        options.type === 'error' ? 'error' :\r\n            options.type === 'success' ? 'success' : 'info'}\r\n           className=\"alert\"\r\n           onClose={close}>\r\n        <AlertTitle>{options.type}</AlertTitle>\r\n        <p>{message}</p>\r\n    </Alert>\r\n);"],"sourceRoot":""}