{"version":3,"sources":["models.js","components/cookies/load_cookies.js","reducers/cookies.js","components/layout/sounds.jsx","reducers/auth.js","reducers/users.js","reducers/errors.js","reducers/success.js","reducers/manga.js","reducers/characters.js","reducers/eroge.js","globals.js","actions/api_urls.js","actions/types.js","reducers/anime.js","reducers/requiem.js","actions/messages.js","components/layout/filters/field_names.js","actions/cookies.js","components/functions.js","actions/auth.js","actions/anime.js","actions/characters.js","reducers/people.js","reducers/industry.js","reducers/index.js","store.js","reportWebVitals.js","urls.js","components/layout/navbar/menus.jsx","components/layout/navbar/CyberHeader.jsx","components/layout/navbar/CyberNavbar.jsx","components/layout/footer/CyberFooter.js","actions/manga.js","actions/eroge.js","actions/users.js","components/layout/common/Loading.js","components/layout/common/common.js","actions/people.js","actions/requiem.js","components/requiem/snippets/snippets.js","components/layout/pagination/goToPageDialog.js","components/requiem/snippets/News.js","components/home/functions.js","components/home/Home.js","components/anime/home/statistics.js","components/anime/home/AnimeStatistics.js","components/display/snippets.js","components/display/TabsRoot.js","components/user/forms/anime/AnimeEntryModalForm.js","components/display/Display.js","components/anime/display/tabs/GeneralTab.js","components/manga/display/tabs/GeneralTab.js","components/characters/display/tabs/GeneralTab.js","components/people/display/tabs/GeneralTab.js","components/eroge/display/tabs/GeneralTab.js","components/anime/display/tabs/CharactersTab.js","components/manga/display/tabs/CharactersTab.js","components/manga/display/tabs/RelationsTab.js","components/requiem/forms/DownloadTorrentForm.js","components/requiem/forms/EditAnimeOnServerModalForm.js","components/anime/display/tabs/ServerTab.js","components/user/forms/anime/UpdateAnimeEpisodeButton.js","components/user/forms/anime/AnimeEpisodeHistoryModal.js","components/user/forms/shortForms.js","components/user/forms/manga/forms.js","components/user/forms/manga/MangaEntryModalForm.js","components/user/forms/manga/UpdateMangaVolumeChapterButtons.js","components/user/forms/manga/MangaVolumeChapterHistoryModal.js","components/anime/display/tabs/RelationsTab.js","components/franchises/display/FranchiseTree.js","components/franchises/display/helpers.js","components/anime/display/tabs/FranchiseTab.js","components/requiem/forms/DownloadTorrentModalForm.js","components/requiem/snippets/DisplayTorrentProgress.js","components/people/display/tabs/VoiceActorRolesTab.js","components/people/display/tabs/AnimeStaffPositionsTab.js","components/people/display/tabs/PublishedMangaTab.js","components/display/functions.js","components/user/forms/anime/forms.js","components/layout/cards/CardUserEditTitleEntry.js","components/layout/cards/functions.js","components/layout/cards/TitleCard.js","components/anime/seasons/AnimeCurrentSeason.js","components/anime/home/tabs/TopAnimeTabs.js","components/anime/home/TopAnime.js","components/anime/home/AnimeHome.js","components/auth/functions.js","components/auth/LoginForm.js","components/auth/Login.js","components/auth/RegisterForm.js","components/auth/Register.js","components/layout/filters/functions.js","components/layout/filters/PresetFilters.js","components/layout/filters/SearchAutocomplete.js","components/layout/filters/TitlesFilter.js","components/layout/filters/anime/AnimeFilters.js","components/layout/filters/manga/MangaFilters.js","components/layout/filters/eroge/ErogeFilters.js","components/layout/filters/characters/CharactersFilters.js","components/layout/filters/people/PeopleFilters.js","components/browse/functions.js","components/browse/Browse.js","components/anime/browse/AnimeBrowse.js","components/index/snippets.js","components/index/Index.js","components/user/statistics/statistics_snippets.js","components/user/statistics/favorites_snippets.js","components/user/settings/bbcode_editor/xbbcode.js","components/user/settings/bbcode_editor/parser.js","components/user/profile/tabs/AboutTab.js","components/user/profile/tabs/AnimeTab.js","components/user/profile/tabs/MangaTab.js","components/user/achievements/achievements.js","components/user/profile/tabs/AchievementsTab.js","components/user/profile/tabs/ProfileTabs.js","components/user/forms/UploadProfileImageButton.js","components/user/profile/Profile.js","components/user/settings/tabs/UserSettings.js","components/user/settings/tabs/ProfileSettings.js","components/user/forms/list_privacy/listPrivacyForms.js","components/user/settings/tabs/ListSettings.js","components/user/settings/tabs/SettingsTabs.js","components/user/settings/Settings.js","components/manga/browse/MangaBrowse.js","components/anime/display/AnimeDisplay.js","components/manga/display/MangaDisplay.js","components/characters/browse/CharactersBrowse.js","components/characters/display/CharacterDisplay.js","components/eroge/browse/ErogeBrowse.js","components/eroge/display/ErogeDisplay.js","components/seasons/functions.js","components/seasons/BrowseSeasons.js","components/anime/seasons/BrowseAnimeSeasons.js","components/manga/seasons/BrowseMangaSeasons.js","components/layout/404/404.js","components/layout/alerts/Alerts.js","components/seasons/DisplaySeason.js","components/user/user_list/anime/tableView.js","components/user/user_list/manga/tableView.js","components/user/user_list/UserList.js","components/user/user_list/PrivateList.js","components/user/user_list/anime/AnimeList.js","components/user/statistics/data_calculations.js","components/user/statistics/Statistics.js","components/user/history/DisplayUserHistory.js","components/user/history/History.js","components/user/user_list/manga/MangaList.js","components/franchises/display/DisplayFranchise.js","components/manga/home/tabs/TopMangaTabs.js","components/manga/home/TopManga.js","components/manga/home/MangaHome.js","components/characters/home/TopCharacters.js","components/characters/home/CharactersHome.js","actions/industry.js","components/eroge/home/tabs/TopErogeTabs.js","components/eroge/home/TopEroge.js","components/eroge/home/ErogeHome.js","components/people/browse/PeopleBrowse.js","components/people/display/PersonDisplay.js","components/user/settings/bbcode_editor/templates.js","components/user/settings/bbcode_editor/tabs/BBCodeEditorTab.js","components/user/settings/bbcode_editor/tabs/BackgroundEditorTab.js","components/user/settings/bbcode_editor/tabs/bbCodeTabs.js","components/user/settings/bbcode_editor/BBCodeEditor.js","components/App.js","index.js","components/layout/alerts/AlertTemplate.js"],"names":["Cookie","show_filters","sound_effects","anime_browse_filters","anime_season_filters","anime_list_filters","manga_browse_filters","manga_season_filters","manga_list_filters","characters_filters","people_filters","eroge_browse_filters","Alert","type_success","type_info","type_error","ApiResult","count","next","previous","results","User","id","username","profile","email","is_superuser","date_joined","last_login","first_name","last_name","is_staff","is_active","UserStatistics","the_crusade","the_crusade_progress","romance_progress","romance_1","romance_2","romance_3","romance_4","pervert_progress","pervert_1","pervert_2","pervert_3","pervert_4","classics_progress","classics_1","classics_2","classics_3","classics_4","dementia_psychological_progress","dementia_psychological_1","dementia_psychological_2","dementia_psychological_3","dementia_psychological_4","horror_thriller_progress","horror_thriller_1","horror_thriller_2","horror_thriller_3","horror_thriller_4","mystery_progress","mystery_1","mystery_2","mystery_3","mystery_4","Profile","avatar","profile_cover","profile_image","title","bio","user","favorite_anime","favorite_manga","favorite_characters","favorite_people","active_theme","theme_sounds","show_adult","about_section_bbcode","about_section_background_style","is_profile_private","is_anime_list_private","is_anime_history_private","is_manga_list_private","is_manga_history_private","UserList","owner","is_updating","is_scraping_episode_history_from_mal","scraping_episode_history_from_mal_progress","xml_mal_anime_list","anime_watching","anime_completed","anime_on_hold","anime_dropped","anime_plan_to_watch","anime_total_finished","anime_total_entries","anime_mean_score","anime_episodes_watched","anime_mins_spent_watching","anime_started_watching_on","manga_reading","manga_completed","manga_on_hold","manga_dropped","manga_plan_to_read","manga_total_finished","manga_mean_score","manga_total_entries","manga_volumes_read","manga_chapters_read","manga_mins_spent_reading","manga_started_reading_on","UserAnimeEntry","anime","episode_history","watched_episodes","start_date","finish_date","score","status","times_watched","comments","tags","priority","rewatching","rewatching_episode","date_added","date_last_modified","anime_list","UserMangaEntry","manga","volume_history","chapter_history","read_volumes","read_chapters","times_read","rereading","rereading_chapter","rereading_volume","AnimeData","total_anime_per_season_json","current_anime_season","top_scored_anime","top_upcoming_anime","most_popular_anime","top_70s_anime","top_80s_anime","top_90s_anime","top_2000s_anime","top_2010s_anime","recently_added_anime","recently_downloaded_anime","MangaData","total_manga_per_season_json","current_manga_season","top_scored_manga","top_upcoming_manga","most_popular_manga","top_70s_manga","top_80s_manga","top_90s_manga","top_2000s_manga","top_2010s_manga","recently_added_manga","recently_downloaded_manga","IndustryData","most_popular_characters","recently_added_characters","ErogeData","top_scored_eroge","most_popular_eroge","top_windows_eroge","top_android_eroge","largest_size_eroge","recently_added_eroge","SeasonYear","seasons","year","Anime","title_english","title_synonyms","title_japanese","anime_cover_images","anime_cdn_cover_images","anime_on_server","air_end","air_end_known","air_start","air_start_known","aired_string","airing","approved","background","broadcast","cannot_download","deleted_by_MAL","duration","ending_theme","episodes","favorites","franchise","genres_csv","is_downloading","licensor","mal_id","mal_link","members","minutes_per_episode","opening_theme","pending_by_MAL","popularity","premiered","producer","rank","rating","rating_short","scored_by","source","studio","synopsis","total_time_mins","type","uuid_name","anime_roles","main_characters","all_characters","anime_relations","VALID_ANIME_RELATIONS","VALID_ANIME_RELATION_NAMES","ANIME_SHORT_STATUS","label","color","MANGA_SHORT_STATUS","AnimeOnServer","additional_dubs","additional_info","additional_subtitles","arabic_dub","arabic_sub","audio_channel","bulgarian_dub","bulgarian_sub","catalan_dub","catalan_sub","chinese_dub","chinese_sub","czech_dub","czech_sub","danish_dub","danish_sub","downloading","dutch_dub","dutch_sub","english_dub","english_sub","english_subs","extract_subs","finnish_dub","finnish_sub","franchise_folder_name","french_dub","french_sub","german_dub","german_sub","greek_dub","greek_sub","hebrew_dub","hebrew_sub","hungarian_dub","hungarian_sub","incomplete","incomplete_progress","indonesian_dub","indonesian_sub","italian_dub","italian_sub","japanese_dub","japanese_sub","korean_dub","korean_sub","location","main_torrent_info","malay_dub","malay_sub","norwegian_dub","norwegian_sub","persian_dub","persian_sub","polish_dub","polish_sub","portuguese_dub","portuguese_sub","requiem","romanian_dub","romanian_sub","russian_dub","russian_sub","shared_torrent_with","size_on_HDD_GB","slovak_dub","slovak_sub","spanish_dub","spanish_sub","swedish_dub","swedish_sub","thai_dub","thai_sub","torrent_file","torrent_hash","torrent_magnet","turkish_dub","turkish_sub","video_quality","video_resolution","vietnamese_dub","vietnamese_sub","AnimeFranchise","cover_image","total_titles","top_members","total_members","top_score","average_score","total_minutes","total_episodes","anime_franchise","Manga","active_image_name","anidb_image_url","ann_image_url","authors","chapters","genres","image_url","manga_cover_images","manga_cdn_cover_images","manga_on_server","published_string","publishing","related","serialization","volumes","manga_roles","manga_relations","VALID_MANGA_RELATIONS","VALID_MANGA_RELATION_NAMES","Character","character_cover_images","character_cdn_cover_images","character_name","nickname","short_name","description","voice_actors","role","anime_roles_defined","manga_roles_defined","Person","person_cover_images","person_cdn_cover_images","person_name","given_name","family_name","alternative_names","birthday","website","more_info","has_roles","voice_actor_roles","anime_staff_positions","anime_staff_positions_roles","published_manga","published_manga_roles","Eroge","censorship","date_updated","download_url","downloaded","eroge_cover_images","eroge_screenshots","game_location","game_url","language","eroge_name","platforms","rated_by","scraped_from","size","CoverImages","image","CDNCoverImages","thumbnail_url","width","height","FiltersPreset","preset_name","filters","AnimeDataStatistics","anime_data","total_anime","total_anime_deleted_mal","total_anime_pending_mal","total_anime_downloaded","total_anime_downloading","total_downloaded_size","mean_score","total_quality_2160p","total_quality_1080p","total_quality_960p","total_quality_720p","total_quality_576p","total_quality_560p","total_quality_540p","total_quality_528p","total_quality_480p","total_quality_396p","total_quality_360p","total_quality_288p","total_quality_240p","total_original_anime","total_original_anime_mean","total_anime_from_light_novel","total_anime_from_light_novel_mean","total_anime_from_music","total_anime_from_music_mean","total_anime_from_manga","total_anime_from_manga_mean","total_anime_from_other","total_anime_from_other_mean","total_anime_from_visual_novel","total_anime_from_visual_novel_mean","total_anime_from_book","total_anime_from_book_mean","total_anime_from_game","total_anime_from_game_mean","total_anime_from_web_manga","total_anime_from_web_manga_mean","total_anime_from_novel","total_anime_from_novel_mean","total_anime_from_picture_book","total_anime_from_picture_book_mean","total_anime_from_card_game","total_anime_from_card_game_mean","total_anime_from_4_kom_manga","total_anime_from_4_kom_manga_mean","total_anime_from_digital_manga","total_anime_from_digital_manga_mean","total_anime_from_radio","total_anime_from_radio_mean","total_movie","total_music","total_ona","total_ova","total_special","total_tv","total_finished_airing","total_currently_airing","total_not_yet_aired","total_rated_g","total_rated_pgc","total_rated_pg13","total_rated_r","total_rated_r_plus","total_rated_rx","total_rated_none","total_genre_action","total_genre_adventure","total_genre_cars","total_genre_comedy","total_genre_dementia","total_genre_demons","total_genre_drama","total_genre_ecchi","total_genre_fantasy","total_genre_game","total_genre_harem","total_genre_hentai","total_genre_historical","total_genre_horror","total_genre_josei","total_genre_kids","total_genre_magic","total_genre_martial_arts","total_genre_mecha","total_genre_military","total_genre_music","total_genre_mystery","total_genre_parody","total_genre_police","total_genre_psychological","total_genre_romance","total_genre_samurai","total_genre_school","total_genre_sci_fi","total_genre_seinen","total_genre_shoujo","total_genre_shoujo_ai","total_genre_shounen","total_genre_shounen_ai","total_genre_slice_of_life","total_genre_space","total_genre_sports","total_genre_super_power","total_genre_supernatural","total_genre_thriller","total_genre_vampire","total_genre_yaoi","total_genre_yuri","anime_achievement_romance_thresholds","anime_achievement_romance_info","anime_achievement_classics_thresholds","anime_achievement_classics_info","anime_achievement_pervert_thresholds","anime_achievement_pervert_info","anime_achievement_dementia_psychological_thresholds","anime_achievement_dementia_psychological_info","anime_achievement_horror_thriller_thresholds","anime_achievement_horror_thriller_info","anime_achievement_mystery_thresholds","anime_achievement_mystery_info","AchievementInfo","requirement","tier_1","tier_2","tier_3","tier_4","AchievementTier","FILTER_ANIME_INITIAL_VALUES","VALUES","search","anime_on_server__english_sub","anime_on_server__english_dub","anime_on_server__japanese_dub","anime_on_server__japanese_sub","episodes_range","length_range","user_exclude","ordering","FILTER_MANGA_INITIAL_VALUES","volumes_range","chapters_range","FILTER_CHARACTERS_INITIAL_VALUES","FILTER_PEOPLE_INITIAL_VALUES","FILTER_EROGE_INITIAL_VALUES","loaded_cookies","undefined","Cookies","get","set","new_anime_values","JSON","parse","e","new_manga_values","new_characters_values","new_people_values","new_eroge_values","eroge_filters","loadCookies","initialState","update_anime_filter_state","state","action","page_type","TYPE_BROWSE","value","TYPE_SEASON","TYPE_LIST","update_manga_filter_state","loadSounds","playClickSound","playHoverSound","playExpand3Sound","playExpand2Sound","playExpandSound","v","store","getState","auth","vol","Number","isFinite","Howl","src","volume","play","playErrorSound","playWarningSound","playDeploySound","token","localStorage","getItem","initial_auth","user_loading","user_authenticated","visited_user_loaded","visited_user","all_users","users_loading","all_users_loaded","entry_loading","user_anime_entry","user_anime_entry_loaded","user_manga_entry","user_manga_entry_loaded","uploading_file","user_list","user_list_loading","user_statistics_loading","user_anime_statistics","user_manga_statistics","user_info_loading","user_anime_history","user_manga_history","anime_filter_presets","manga_filter_presets","eroge_filter_presets","selected_anime_preset","selected_manga_preset","selected_eroge_preset","user_anime_entry_statuses","user_manga_entry_statuses","user_achievements_loading","user_achievements","message","manga_loading","manga_loaded","manga_data","manga_data_loaded","filtered_manga","filtered_manga_loaded","characters_loading","character","characters_loaded","filtered_characters","filtered_characters_loaded","eroge_loading","eroge","eroge_loaded","filtered_eroge","filtered_eroge_loaded","eroge_data","eroge_data_statistics","eroge_data_loaded","CYBER_GENESIS_URL","store_reducers","store_reducer_users","store_reducer_cookies","BRANCH_ANIME","BRANCH_MANGA","BRANCH_EROGE","BRANCH_PEOPLE","BRANCH_CHARACTERS","LANGUAGES","ANIME_ORDERINGS","USER_ANIME_ORDERINGS","ANIME_TYPES","ANIME_STATUSES","ANIME_RATING_SHORT","ANIME_VIDEO_QUALITIES","USER_ANIME_STATUSES_ARRAY","USER_MANGA_STATUSES_ARRAY","ANIME_AUDIO_CHANNELS","ANIME_GENRES","sort","USER_ANIME_STATUSES","USER_MANGA_STATUSES","MANGA_ORDERINGS","USER_MANGA_ORDERINGS","MANGA_TYPES","MANGA_STATUSES","MANGA_GENRES","EROGE_ORDERINGS","EROGE_TYPES","EROGE_PLATFORMS","EROGE_CENSORSHIPS","EROGE_LANGUAGES","EROGE_TAGS","CHARACTERS_ORDERINGS","PEOPLE_ORDERINGS","getPriorityLabel","BASE_URL","API_AUTH_USER","API_LOGIN","API_REGISTER","API_LOGOUT","API_GET_ALL_USERS","API_USER_ANIME_FILTERS_PRESET","API_USER_MANGA_FILTERS_PRESET","API_USER_EROGE_FILTERS_PRESET","API_CHANGE_USER_PROFILE_IMAGE","API_IMPORT_MAL_XML_FOR_ANIME_LIST","API_IMPORT_MAL_XML_FOR_MANGA_LIST","API_EDIT_USER_BIO","API_EDIT_USER_ABOUT_ME_BBCODE","API_EDIT_USER_ABOUT_ME_BACKGROUND","API_SCRAPE_EPISODE_HISTORY_FROM_MAL","API_CHANGE_CYBER_SOUND_STATUS","API_USER_ANIME_ENTRY_NOID","API_USER_MANGA_ENTRY_NOID","API_USER_ANIME_ENTRY_STATUSES","API_USER_MANGA_ENTRY_STATUSES","API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS","API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES","API_SET_ANIME_LIST_TO_PRIVATE","API_SET_ANIME_LIST_TO_PUBLIC","API_SET_ANIME_HISTORY_TO_PRIVATE","API_SET_ANIME_HISTORY_TO_PUBLIC","API_SET_MANGA_LIST_TO_PRIVATE","API_SET_MANGA_LIST_TO_PUBLIC","API_SET_MANGA_HISTORY_TO_PRIVATE","API_SET_MANGA_HISTORY_TO_PUBLIC","API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_ANIME_ENTRY","API_USER_MANGA_ENTRY","API_GET_ANIME_DATA","API_GET_ANIME_DATA_FOR_HOME_PAGE","API_GET_ANIME_DATA_WITH_STATISTICS","API_GET_ANIME_ACHIEVEMENT_THRESHOLDS","API_FILTER_ANIME","API_GET_MANGA_DATA","API_GET_MANGA_DATA_FOR_HOME_PAGE","API_FILTER_MANGA","API_FILTER_CHARACTERS","API_FILTER_PEOPLE","API_FILTER_EROGE","API_GET_EROGE_DATA_FOR_HOME_PAGE","API_REQUIEM_GET_STORAGE_INFO","API_ADD_ANIME_TO_SERVER","API_GET_NEWS","API_GET_INDUSTRY_DATA_FOR_HOME_PAGE","SET_ANIME_FILTERS","SET_MANGA_FILTERS","SET_CHARACTERS_FILTERS","SET_PEOPLE_FILTERS","SET_EROGE_FILTERS","SET_COOKIE_SHOW_FILTERS","USER_LOADING","AUTH_USER","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","GET_REQUIEM","REQUIEM_LOADING","GET_REPORTS","REPORTS_LOADING","GET_NEWS","NEWS_LOADING","GET_TORRENT_PROGRESS","GET_ACTIVE_TORRENTS_PROGRESS","CLEAR_ANIME_TORRENT_PROGRESS","GET_STORAGE_INFO","GET_TARGETS","USERS_LOADING","USER_LIST_LOADING","CANCEL_USER_LIST_LOADING","GET_USER","GET_ALL_USERS","USER_ENTRY_LOADING","FINISH_LOADING_USER_ENTRY","GET_USER_ANIME_ENTRY","AUTH_ERROR_CLEAR_USER_INFO","CLEAR_USER_ANIME_ENTRY","GET_USER_MANGA_ENTRY","CLEAR_USER_MANGA_ENTRY","GET_USER_LIST","UPDATE_USER_LIST","USER_STATISTICS_LOADING","UPDATE_USER_ANIME_STATISTICS","UPLOADING_FILE","FINISH_UPLOADING_FILE","UPLOAD_ANIME_LIST_MAL_XML","UPLOAD_MANGA_LIST_MAL_XML","USER_INFO_LOADING","USER_ACHIEVEMENTS_LOADING","CANCEL_USER_ACHIEVEMENTS_LOADING","GET_USER_ACHIEVEMENTS","CLEAR_USER_ACHIEVEMENTS","GET_VISITED_USER_ANIME_HISTORY","GET_VISITED_USER_MANGA_HISTORY","GET_ANIME_FILTER_PRESETS","GET_MANGA_FILTER_PRESETS","GET_EROGE_FILTER_PRESETS","SET_ANIME_PRESET","SET_MANGA_PRESET","SET_EROGE_PRESET","GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES","GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES","UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES","UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES","GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS","GET_PROFILE_PRIVACY_SETTINGS","GET_ANIME_DATA","GET_ANIME_DATA_STATISTICS","GET_ANIME_ACHIEVEMENT_THRESHOLDS","GET_ANIME","GET_ALL_CHARACTERS_FOR_ANIME","GET_RELATIONS_FOR_ANIME","FILTER_ANIME","ANIME_LOADING","CANCEL_ANIME_LOADING","ANIME_FRANCHISE_LOADING","GET_CURRENT_ANIME_FRANCHISE","GET_ANIME_SEARCHABLE_TITLES","GET_MANGA_DATA","GET_MANGA","GET_ALL_CHARACTERS_FOR_MANGA","GET_RELATIONS_FOR_MANGA","FILTER_MANGA","MANGA_LOADING","CANCEL_MANGA_LOADING","GET_CHARACTER","FILTER_CHARACTERS","CHARACTERS_LOADING","CANCEL_CHARACTERS_LOADING","GET_PERSON","GET_VOICE_ACTOR_ROLES_FOR_PERSON","GET_ANIME_STAFF_POSITIONS_FOR_PERSON","GET_PUBLISHED_MANGA_FOR_PERSON","FILTER_PEOPLE","PEOPLE_LOADING","CANCEL_PEOPLE_LOADING","GET_EROGE","GET_EROGE_DATA","FILTER_EROGE","EROGE_LOADING","CANCEL_EROGE_LOADING","CREATE_MESSAGE","CLEAR_MESSAGE","GET_ERRORS","CLEAN_ERRORS","GET_INDUSTRY_DATA","INDUSTRY_DATA_LOADING","searchable_titles","anime_loading","anime_loaded","anime_data_statistics","anime_data_loaded","filtered_anime","filtered_anime_loaded","anime_franchise_loading","requiem_is_loading","targets","reports","news","storage","torrent_progress","active_torrents","createMessage","msg","payload","clearMessage","returnErrors","cleanErrors","AnimeFilterNames","season","user_list_pk","user_list_filter","MangaFilterNames","ErogeFilterNames","CharactersFilterNames","PeopleFilterNames","FilterLabels","FilterSchema","filter_name","content","marks","max","min","FilterSchemaType","standard","component","wide","slider","setCookieAnimeFilters","dispatch","setCookieMangaFilters","hasOwnProperty","Object","prototype","isEmpty","obj","length","key","call","formatContentDateByKnown","date","known_date","str","indexOf","moment","format","getBrowseGridListCols","window","innerWidth","formatBytes","terabyte","gigabyte","toFixed","Math","ceil","getSeasonLabelFromSeasonNumber","getTitleCoverImage","cdn_cover_images","cover_images","thumbnail","img_url","len_cdn_images","len_images","largest","x","REFERENCE","TODAY","clone","startOf","YESTERDAY","subtract","A_WEEK_OLD","A_MONTH_OLD","SIX_MONTHS_OLD","A_YEAR_OLD","TWO_YEARS_OLD","getUser","axios","API_GET_USER","tokenConfig","then","res","data","catch","err","response","authUser","config","headers","getAnime","API_GET_ONE_ANIME","cancelAnimeLoading","getAnimeFranchise","API_GET_ANIME_FRANCHISE","filterAnime","page","list","loading","save_cookie","params","setAnimeFilterParams","setAnimeSeasonParams","replace","setAnimeListParams","join","getCharacter","API_GET_ONE_CHARACTER","filterCharacters","no_loading","setCharactersFilterParams","people_loading","person","people_loaded","people_data","people_data_statistics","people_data_loaded","filtered_people","filtered_people_loaded","industry_data","industry_data_loading","industry_data_statistics","industry_data_loaded","combineReducers","cookies","updated_user","assign","setItem","removeItem","users","current_statuses","isNaN","current_manga_statuses","this_user_list","current_anime_entry","current_manga_entry","errors","success","reports_is_loading","news_is_loading","anime_achievement_thresholds","characters","people","industry","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INDEX","NOT_FOUND","HOME","ADMIN","ADMIN_EDIT_ANIME","ADMIN_EDIT_MANGA","ADMIN_EDIT_CHARACTER","ADMIN_EDIT_EROGE","ADMIN_EDIT_PERSON","LOGIN","REGISTER","SETTINGS","BBCODE_EDITOR","PROFILE","USER_ANIME_LIST","USER_MANGA_LIST","USER_EROGE_LIST","USER_ANIME_STATISTICS","USER_ANIME_HISTORY","USER_MANGA_HISTORY","ANIME_HOME","ANIME_BROWSE","ANIME_SEASONS","ANIME_SEASON_DISPLAY","ANIME_FRANCHISES","ANIME_DISPLAY","ANIME_FRANCHISE_DISPLAY","MANGA_HOME","MANGA_BROWSE","MANGA_SEASONS","MANGA_SEASON_DISPLAY","MANGA_FRANCHISES","MANGA_DISPLAY","CHARACTERS_HOME","CHARACTERS_BROWSE","CHARACTERS_DISPLAY","PEOPLE_BROWSE","PERSON_DISPLAY","EROGE_HOME","EROGE_BROWSE","EROGE_DISPLAY","AnimeMenu","props","show","onLeave","className","style","pointerEvents","onMouseLeave","to","onMouseEnter","onClick","icon","faHome","faSearch","faCalendarAlt","faSitemap","MangaMenu","CharactersMenu","ErogeMenu","AuthMenu","user_id","faThList","faChartLine","faCog","post","faSignOutAlt","STYLE","top","left","useStyles","makeStyles","theme","root","flexGrow","zIndex","grow","appBar","toolbar","minHeight","marginRight","spacing","fontFamily","fontVariant","userSelect","menuButton","fontSize","menuButtonLink","textDecoration","menuLinks","sectionDesktop","display","breakpoints","up","sectionMobile","MenuAppBar","superuser","classes","React","useState","profileAnchorEl","animeAnchorEl","setAnimeAnchorEl","mobileAnchorEl","setMobileAnchorEl","isAnimeOpen","Boolean","isMobileMenuOpen","desktopAnimeMenu","setDesktopAnimeMenu","desktopMangaMenu","setDesktopMangaMenu","desktopCharactersMenu","setDesktopCharactersMenu","desktopErogeMenu","setDesktopErogeMenu","desktopAuthMenu","setDesktopAuthMenu","handleAnimeClose","handleMobileClose","onDesktopMenuLeave","onDesktopMenuEnter","menuName","animeMobileMenu","renderAnimeMenu","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","onClose","MenuItem","renderMobileMenu","event","currentTarget","Button","aria-label","aria-controls","aria-haspopup","document","addEventListener","navbar","getElementById","scrollY","classList","add","remove","AppBar","position","Toolbar","IconButton","edge","Typography","variant","onMouseOver","href","faUser","CyberNavbar","this","Component","connect","CyberFooter","margin","marginTop","blur","bgImage","bgImageAlt","strength","alt","getManga","API_GET_ONE_MANGA","filterManga","setMangaFilterParams","setMangaSeasonParams","setMangaListParams","getEroge","API_GET_ONE_EROGE","filterEroge","setErogeFilterParams","editUserAboutMeBBCode","bbcode","formData","FormData","append","getUserList","API_GET_USER_LIST","getUserAnimeEntry","addAnimeEntry","entryInfo","body","stringify","updateAnimeEntry","entry_info","put","updateAnimeEpisode","API_USER_ANIME_UPDATE_EPISODE","deleteAnimeEntry","delete","deleteAnimeHistoryEntry","history_id","anime_id","getUserMangaEntry","addMangaEntry","updateMangaEntry","updateMangaVolume","API_USER_MANGA_UPDATE_VOLUME","updateMangaChapter","API_USER_MANGA_UPDATE_CHAPTER","deleteMangaEntry","deleteMangaVolumeChapterHistoryEntry","manga_id","url","API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY","getLoggedInUserAnimeEntryStatuses","getLoggedInUserMangaEntryStatuses","addToFavorites","branch","toLowerCase","API_ADD_TO_FAVORITES","removeFromFavorites","API_REMOVE_FROM_FAVORITES","Loading","text","offset","block","no_text","viewBox","fill","stroke","strokeWidth","points","toUpperCase","CyberButton","classNames","disabled","children","CyberLink","PreLoadImage","loaded","setLoaded","onLoad","LoadGifs","console","log","opacity","map","genre","getPerson","API_GET_ONE_PERSON","filterPeople","setPeopleFilterParams","scrapeUpdateTitleApiUrl","API_REQUIEM_UPDATE_ANIME_MAL","API_REQUIEM_UPDATE_MANGA_MAL","API_REQUIEM_UPDATE_CHARACTER_MAL","API_REQUIEM_UPDATE_PERSON_MAL","API_REQUIEM_UPDATE_EROGE_HENTAIGAMER","scrapeUpdateTitle","getBytesToSize","getTime","sec","hrs","floor","seconds","result","round","getProgress","progress","getSpeed","speed","TorrentProgressInfo","status_icon","torrent","days","parseInt","utc","hours","minutes","eta_str","faArrowDown","faArrowUp","faPause","faSpinner","faBan","faClock","faHdd","faDownload","faUpload","faPuzzlePiece","faUsers","faInfinity","colSpan","LinearProgress","GoToPageDialog","current_page","total_pages","goToPage","GoToPageSchema","Yup","shape","page_number","required","Dialog","aria-labelledby","DialogTitle","initialValues","validationSchema","onSubmit","values","setSubmitting","isSubmitting","touched","handleChange","handleBlur","TextField","name","onChange","onBlur","error","helperText","News","arguments","closePageDialog","bind","page_dialog_open","getNews","setState","news_results","Grid","container","i","item","xs","Pagination","siblingCount","particles_params","Home","updateGridListCols","gridlist_cols","scrollTo","getAllUsers","GridList","cellHeight","cols","GridListTile","ProfileModel","compareByStat","a","b","first","second","comparison","getDataSources","statistics","stat","meanScore","stat_data","mean_score_data","labels","push","datasets","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","borderWidth","maintainAspectRatio","responsive","tooltips","mode","elements","line","scales","yAxes","gridLines","ticks","stepSize","AnimeStatistics","getAnimeDataWithStatistics","data_types","hoverColor","getDataTypes","data_sources","data_sources_options","data_statuses","data_rated","getDataRated","data_genres","getDataGenres","data_qualities","getDataQualities","data_years","parsed_data","parsed_data_keys","keys","element","getDataYears","Divider","xl","md","lg","options","CopyTextToClipboard","setOpen","handleTooltipClose","ClickAwayListener","onClickAway","Tooltip","PopperProps","disablePortal","disableFocusListener","disableHoverListener","disableTouchListener","TabPanel","index","other","hidden","Box","p","DisplayTabs","tabs","useTheme","setValue","Tabs","newValue","indicatorColor","textColor","tab","Tab","axis","direction","onChangeIndex","dir","AnimeEntryModalForm","handleClickOpen","handleClose","edit","initial_values","getUserAnimeEntryFormInitialValues","faEdit","faPlus","DialogContent","UserAnimeEntryForm","NONE","Display","getTitle","param_id","getUserTitleStatus","prevProps","prevState","snapshot","display_title","title_loaded","formatTitle","tabs_margin","primary_set","primary_set_wide","secondary_set","marginBottom","AdminModalForms","UserModalForms","entry","user_title_status","title_1","title_2","title_3","info_set","info","db_info_set","users_info_set","getUserTitleStatusSummary","title_loading","getSynopsys","synopsys","GeneralTab","Grow","in","timeout","DisplayVoiceActors","formatted","split","expand","setExpand","faExpandArrowsAlt","getDescription","plugins","reactPreset","images","original","items","CharactersTab","getAllCharactersForAnime","API_GET_ALL_CHARACTERS_FOR_ANIME","getAllCharactersForManga","API_GET_ALL_CHARACTERS_FOR_MANGA","RelationsTab","getRelationsForManga","user_status","relation_name","y","API_GET_RELATIONS_FOR_MANGA","DownloadTorrentForm","handleAddIdToExtraIds","clearExtraIds","toggleAddExtra","extra","extra_ids","getStorageInfo","splice","field_names","disk","files","magnet","downloadTorrent","setFieldValue","setValues","InputLabel","Select","labelId","Checkbox","inputProps","autoComplete","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","file","faCheck","faTrash","faPlusCircle","mini","multiline","API_REQUIEM_DOWNLOAD_ANIME_TORRENT","DownloadTorrentModalForm","toggleExpandLanguages","expand_languages","languages","forEach","lang","updateAnimeToServer","addAnimeToServer","checked","animeInfo","ServerTab","openAnimeFolder","faFolder","EditAnimeOnServerModalForm","faUserEdit","confirm","deleteAnimeServerInfoAndTorrents","TableContainer","Table","TableBody","TableRow","TableCell","endsWith","Chip","faMagnet","API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS","API_OPEN_ANIME_FOLDER","UpdateAnimeEpisodeButton","setLoading","CircularProgress","thickness","AnimeEpisodeHistoryModal","faHistory","DialogContentText","history","DeleteAnimeEpisodeHistoryButton","DialogActions","AddRemoveFromFavorites","initial","isTitleInFavorites","inFavorites","setInFavorites","faStarSolid","faStar","EditBioForm","closeBio","editUserBio","handleSubmit","onKeyPress","shiftKey","preventDefault","ScrapeEpisodeHistoryFromMalForm","closeForm","MALHLOGSESSID","MALSESSIONID","malhlogsessid","malsessionid","ScrapeEpisodeHistoryFromMalDialog","ImportAnimeListFromMal","uploading","accept","multiple","target","htmlFor","faFileUpload","ImportMangaListFromMal","AddAnimeEntryInstantDropButton","Date","faLevelDownAlt","AddMangaEntryInstantDropButton","FIELD_NAMES","getUserMangaEntryFormInitialValues","UserMangaEntryForm","utils","DateFnsUtils","KeyboardButtonProps","deleteEntry","MangaEntryModalForm","UpdateMangaVolumeButton","UpdateMangaChapterButton","MangaVolumeChapterHistoryModal","DeleteMangaVolumeHistoryButton","DeleteMangaChapterHistoryButton","getRelationsForAnime","API_GET_RELATIONS_FOR_ANIME","TITLES","LOCAL_VALID_ANIME_RELATIONS","FINAL_TREE","compareByAired","now","a_value","b_value","date_a","abs","date_b","compare","getFullAnime","markAnimeAsAdded","isAdded","getChildren","parent_node","z","relation","node","attributes","parent_relation","checkChildrenForFixingSequel","sequel_to_find","node_to_return","fixSequelPriority","parent_anime","in_children","sequel_anime","node_to_fix","TreeBuilder","user_statuses","defaultTranslate","translate","setTranslate","containerRef","useCallback","containerElem","getBoundingClientRect","useCenteredTree","nodeSize","foreignObjectProps","ref","pathFunc","renderCustomNodeElement","rd3tProps","nodeDatum","toggleNode","toString","__rd3t","collapsed","faAngleDoubleDown","faAngleDoubleUp","renderForeignObjectNode","orientation","FranchiseTree","titles","setTitles","reverse","root_node","_continue","check","getRootNode","TreeData","missing","FranchiseTab","DisplayTorrentProgress","torrent_progress_reading","update_interval","getTorrentProgress","setTimeout","torrent_filters","API_REQUIEM_GET_TORRENT_PROGRESS","VoiceActorRolesTab","getVoiceActorRolesForPerson","containerClassNames","API_GET_VOICE_ACTOR_ROLES_FOR_PERSON","AnimeStaffPositionsTab","getAnimeStaffPositionsForPerson","positions_roles","API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON","PublishedMangaTab","getPublishedMangaForPerson","API_GET_PUBLISHED_MANGA_FOR_PERSON","UserAnimeEntryStatus","status_classname","UserMangaEntryStatus","checkFavorites","favoriteTitles","currentTitleId","in_favorites","faPlusSquare","faSyncAlt","faInfo","faUserFriends","faCodeBranch","faPlay","faServer","tag","faUserCog","faBookOpen","getTitleNameFromTitle","QuickUserAnimeEntryForm","QuickUserMangaEntryForm","InstantDropTitleButton","title_id","CardUserEditTitleEntry","getUserTitleEntry","getQuickUserTitleEntryForm","hideUserButtons","add_button_title","getUserStatusChip","UserCardButtons","TitleCard","showUserButtons","cssHideUserButtons","img_loaded","show_user_buttons","css_hide_buttons","card_title","end_date","link","chipset_header","chipset_one","chipset_two","chipset_three","chipset_four","trim","class_names","container_class_names","backgroundImage","skip_img_preload","user_buttons","chip","horizontalScroll","deltaY","scrollLeft","AnimeCurrentSeason","current_year","getFullYear","current_month","getMonth","current_season","current_season_number","season_filter","addHorizontalScrollEventListener","removeEventListener","removeHorizontalScrollEventListener","season_icon_and_class","faSeedling","faSun","faLeaf","faSnowflake","getIconAndClassFromSeasonNumber","RecentlyAdded","RecentlyDownloaded","TopUpcoming","TopScoredMal","MostPopularMal","Top2010s","Top2000s","Top90s","Top80s","Top70s","a11yProps","TopAnimeTabs","CurrentSeason","TopAnime","AnimeHome","getAnimeDataForHomePage","LoginSchema","password","RegisterSchema","password2","test","parent","LoginForm","login","Login","RegisterForm","new_user","register","Register","setPreset","preset","new_values","setSelectedAnimePreset","setSelectedMangaPreset","setSelectedErogePreset","updateFilterPreset","preset_id","updateAnimeFilterPreset","updateMangaFilterPreset","updateErogeFilterPreset","saveFilterPreset","saveAnimeFilterPreset","saveMangaFilterPreset","saveErogeFilterPreset","deleteFilterPreset","deleteMangaFilterPreset","deleteErogeFilterPreset","getSelectedPreset","PresetFilters","onPresetChange","onPresetNew","onPresetUpdate","onPresetDelete","presets","getResetValuesFromBranch","prompt","faSave","listbox","boxSizing","padding","getSliderLabel","label_name","value_2","getGenreImgSrc","img_name","replaceAll","ext","getOrderIcon","order","active","faSortAmountDown","faSortAmountDownAlt","getOrderValue","TitlesFilter","onGenreEnter","onGenreLeave","onGenreChange","checkFormValuesFromCookies","onReset","title_filters","cookie_filters","genreFilter","img","contains","slice","nextSibling","firstChild","filterTitles","reset_values","uses_presets","active_filters","childNodes","parentNode","changeHeightOfActiveFiltersWrapperOnChange","sm","titles_loading","filtered_titles","faTimes","faUndoAlt","faFilter","main_filters","regular_filters","field","filter","wide_filters","Slider","valueLabelDisplay","order_filters","offsetWidth","setAttribute","AnimeFilters","orderings","concat","anime_filters","filtered_titles_loaded","MangaFilters","manga_filters","ErogeFilters","CharactersFilters","PeopleFilters","getFiltersFromBranch","getItemsPerPageFromBranch","Browse","items_per_page","getTabName","updateCurrentPage","user_entry_statuses","AnimeBrowse","NonAuthIndexHero","imageSrc","transitionDuration","AuthIndexHero","autoPlay","muted","loop","Index","img_1_loaded","img_2_loaded","getData","pie_data","legend","AnimeSimpleChartStats","useSelector","end","faStop","faCircle","MangaSimpleChartStats","FavoriteTitles","limit","parsed","getTitlesFromBranch","XBBCODE","tagList","bbRegExp","pbbRegExp","pbbRegExp2","openTags","closeTags","me","urlPattern","colorNamePattern","colorCodePattern","emailPattern","fontFacePattern","tagsNoParseList","initTags","prop","ii","len","noParse","validChildLookup","validParentLookup","restrictParentsTo","restrictChildrenTo","RegExp","closeTagList","checkParentChildRestrictions","parentTag","bbcodeLevel","tagName","tagParams","tagContents","errQueue","cInfo","errStr","childTag","reTagNames","reTagNamesParts","matchingTags","match","pInfo","lastIndex","matchStr","updateTagDepths","subMatchStr","m1","m2","openTag","closeTag","colorCode","substr","myEmail","faceCode","myUrl","displayContent","mySize","replaceFunct","processedContent","addTags","newtags","process","ret","html","openB","contents","closeB","endTag","innerListTxt","fixStarTag","addBbcodeLevels","output","removeMisalignedTags","addInLineBreaks","escapeHtml","ReactHtmlParser","errorQueue","URL_PATTERN","parseWidthHeightFromParams","w_unit","h_unit","parse_width","parse_height","parseLimitFromParams","parse_limit","new_tags","center","cyberBBCodeParser","bbcode_string","AboutTab","toggleEditorButton","show_editor_button","background_color","backgroundRepeat","repeat","backgroundSize","backgroundPosition","position_1","position_2","position_x","backgroundPositionX","position_y","backgroundPositionY","faTools","getMinsPerDay","total_mins","date1","date2","time_diff","total_days","AnimeTab","Chart","defaults","global","raw","beginAtZero","justify","alignItems","MangaTab","unknown","parseGenreAchievementFromResult","tiers","achievements_info","user_progress","user_tier_1","user_tier_2","user_tier_3","user_tier_4","user_completed","threshold","getActiveGenreDescription","achievement","GenreAchievementSegment","tier_1_value","tier_1_buffer","previous_completed","tier_number","new_threshold","valueBuffer","faCheckCircle","GenreAchievement","AchievementsTab","achievements_loaded","getAnimeAchievementsThresholds","getUserAchievements","clearUserAchievements","genre_achievements","achievement_thresholds","achievements","getUserGenreAchievements","API_GET_USER_ACHIEVEMENTS","ProfileTabs","faTv","faGamepad","faTrophy","UploadProfileImageButton","onUpdateProfile","updateUserProfileImage","loader_classnames","faCamera","getLastLoginLabel","last_login_date","newDate","getTimezoneOffset","getHours","setHours","convertUTCDateToLocalDate","isTimeLessThanAnHourAgo","ONE_HOUR","isTimeLessThanSixHoursAgo","isSame","isYesterday","isAfter","isWithinAWeek","isWithinAMonth","isWithinSixMonths","isWithinAYear","isMoreThanAYear","img_cover_loaded","current_id","updateUserList","List","ListItem","ListItemText","primary","secondary","button","API_UPDATE_USER_LIST","UserSettings","editBio","finishEditingBio","edit_bio","align","Switch","ProfileSettings","openBBCodeDialog","closeBBCodeDialog","bbcode_dialog_open","FormControl","muteUnmuteThemeSounds","faVolumeUp","faVolumeMute","ToggleUserAnimeListPrivacyForm","IsPrivate","setIsPrivate","to_private","api_url","ToggleUserAnimeHistoryPrivacyForm","ToggleUserMangaListPrivacyForm","ToggleUserMangaHistoryPrivacyForm","ListSettings","openScrapeHistoryDialog","closeScrapeHistoryDialog","scrape_episode_history_dialog_open","scraping_info_reading","scraping_history_info_modal_open","getUserEpisodeHistoryScraperProgress","setInterval","clearInterval","faCloudDownloadAlt","faQuestion","paragraph","fixUserStartAndFinishDateForAnimeEntries","SettingsTabs","Settings","MangaBrowse","AnimeDisplay","MangaDisplay","CharactersBrowse","CharacterDisplay","ErogeBrowse","getSeasonIcon","getTitleData","browseSeasonTitlesFromBranch","getPrevSeasonUrl","prev_year","prev_season","getNextSeasonUrl","next_year","next_season","formatData","display_data","total_titles_per_season_json","getSeasonUrl","BrowseSeasons","data_loaded","BrowseAnimeSeasons","data_loading","BrowseMangaSeasons","NotFound","Alerts","alert","onOpen","withAlert","DisplaySeason","season_num","season_name","faArrowLeft","faArrowRight","AnimeListStatusButtons","selected","setSelected","AnimeListTableHead","list_owner","TableHead","faImage","AnimeListTableRow","scope","getCoverImgUrl","MangaListStatusButtons","MangaListTableHead","MangaListTableRow","getInitialSelected","list_pk","PrivatePage","AnimeList","compareByTotal","compareByMean","Statistics","getFavoriteGenres","sortFavoriteGenres","favorite_genres_sorted_by","data_favorite_genres","data_favorite_genres_options","updated","updateAndGetUserAnimeStatistics","data_and_options","stat_mean_score","getDataFavoriteGenres","data_completed_history","hours_watching","data_rated_vs_time_spent","data_rated_vs_episode_count","data_rated_vs_episode_count_options","data_favorite_years","data_favorite_years_options","data_favorite_types","data_favorite_types_options","getDataScoreDistribution","getDataRatedVsTimeSpent","months","sum","month_keys","bordered","month","getTableHistory","getDataRatedVsEpisodeCount","getDataFavoriteYears","getDataFavoriteTypes","API_UPDATE_AND_GET_USER_ANIME_STATISTICS","displayHistory","user_history","lastId","newId","lastMonth","lastDate","lastYear","nextYear","nextMonth","nextDate","entries","timestamp","last","lastHistory","DisplayUserHistory","getVisitedUserAnimeHistory","visited_user_id","getVisitedUserMangaHistory","total","API_GET_VISITED_USER_ANIME_HISTORY","API_GET_VISITED_USER_MANGA_HISTORY","History","isHistoryPrivate","MangaList","FranchisesHome","TopMangaTabs","TopManga","MangaHome","getMangaDataForHomePage","TopCharacters","CharactersHome","getIndustryDataForHomePage","TopScored","MostPopular","TopWindows","TopAndroid","LargestSize","TopErogeTabs","TopEroge","ErogeHome","getErogeDataForHomePage","PeopleBrowse","PersonDisplay","TEMPLATE_NAME_NONE","TEMPLATE_NAME_DEFAULT","TEMPLATE_NAME_HIGH_CONTRAST","TEMPLATE_NONE_BACKGROUND","hex","TEMPLATE_DEFAULT_BACKGROUND","TEMPLATE_MAL_BACKGROUND","TEMPLATE_HIGH_CONTRAST_BACKGROUND","compareImageObject","BBCodeEditor","updateSelectedPreset","selected_template","background_image","updateEditor","updateBackgroundImage","submitAboutMe","BackgroundEditorTab","contaienr","OutlinedInput","endAdornment","InputAdornment","aria-describedby","labelWidth","BBCodeEditorTabs","BBCodeEditorTab","attribute","bg_img","editUserAboutMeBackground","user_loaded","background_style","App","exact","path","render","DisplayFranchise","ErogeDisplay","createMuiTheme","yourRawTheme","ReactDOM","StrictMode","ThemeProvider","template","close","severity","AlertTitle"],"mappings":"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","file":"static/js/main.ae70f775.chunk.js","sourcesContent":["export class Cookie {\r\n    static show_filters = 'show_filters';\r\n    static sound_effects = 'sound_effects';\r\n    static anime_browse_filters = 'anime_browse_filters';\r\n    static anime_season_filters = 'anime_season_filters';\r\n    static anime_list_filters = 'anime_list_filters';\r\n    static manga_browse_filters = 'manga_browse_filters';\r\n    static manga_season_filters = 'manga_season_filters';\r\n    static manga_list_filters = 'manga_list_filters';\r\n    static characters_filters = 'characters_filters';\r\n    static people_filters = 'people_filters';\r\n    static eroge_browse_filters = 'eroge_browse_filters';\r\n}\r\n\r\nexport class Alert {\r\n    static type_success = 'success';\r\n    static type_info = 'info';\r\n    static type_error = 'error';\r\n}\r\n\r\nexport class ApiResult {\r\n    static count = 'count';\r\n    static next = 'next';\r\n    static previous = 'previous';\r\n    static results = 'results';\r\n}\r\n\r\nexport class User {\r\n    static id = 'id';\r\n    static username = 'username';\r\n    static profile = 'profile';\r\n    static email = 'email';\r\n    static is_superuser = 'is_superuser';\r\n    static date_joined = 'date_joined';\r\n    static last_login = 'last_login';\r\n    static first_name = 'first_name';\r\n    static last_name = 'last_name';\r\n    static is_staff = 'is_staff';\r\n    static is_active = 'is_active';\r\n}\r\n\r\nexport class UserStatistics {\r\n    static the_crusade = 'the_crusade';\r\n    static the_crusade_progress = 'the_crusade_progress';\r\n    static romance_progress = 'romance_progress';\r\n    static romance_1 = 'romance_1';\r\n    static romance_2 = 'romance_2';\r\n    static romance_3 = 'romance_3';\r\n    static romance_4 = 'romance_4';\r\n    static pervert_progress = 'pervert_progress';\r\n    static pervert_1 = 'pervert_1';\r\n    static pervert_2 = 'pervert_2';\r\n    static pervert_3 = 'pervert_3';\r\n    static pervert_4 = 'pervert_4';\r\n    static classics_progress = 'classics_progress';\r\n    static classics_1 = 'classics_1';\r\n    static classics_2 = 'classics_2';\r\n    static classics_3 = 'classics_3';\r\n    static classics_4 = 'classics_4';\r\n    static dementia_psychological_progress = 'dementia_psychological_progress';\r\n    static dementia_psychological_1 = 'dementia_psychological_1';\r\n    static dementia_psychological_2 = 'dementia_psychological_2';\r\n    static dementia_psychological_3 = 'dementia_psychological_3';\r\n    static dementia_psychological_4 = 'dementia_psychological_4';\r\n    static horror_thriller_progress = 'horror_thriller_progress';\r\n    static horror_thriller_1 = 'horror_thriller_1';\r\n    static horror_thriller_2 = 'horror_thriller_2';\r\n    static horror_thriller_3 = 'horror_thriller_3';\r\n    static horror_thriller_4 = 'horror_thriller_4';\r\n    static mystery_progress = 'mystery_progress';\r\n    static mystery_1 = 'mystery_1';\r\n    static mystery_2 = 'mystery_2';\r\n    static mystery_3 = 'mystery_3';\r\n    static mystery_4 = 'mystery_4';\r\n}\r\n\r\n\r\nexport class Profile {\r\n    static id = 'id';\r\n    static avatar = 'avatar';\r\n    static profile_cover = 'profile_cover';\r\n    static profile_image = 'profile_image';\r\n    static title = 'title';\r\n    static bio = 'bio';\r\n    static user = 'user';\r\n    static favorite_anime = 'favorite_anime';\r\n    static favorite_manga = 'favorite_manga';\r\n    static favorite_characters = 'favorite_characters';\r\n    static favorite_people = 'favorite_people';\r\n    static active_theme = 'active_theme';\r\n    static theme_sounds = 'theme_sounds';\r\n    static show_adult = 'show_adult';\r\n    static about_section_bbcode = 'about_section_bbcode';\r\n    static about_section_background_style = 'about_section_background_style';\r\n    static is_profile_private = 'is_profile_private';\r\n    static is_anime_list_private = 'is_anime_list_private';\r\n    static is_anime_history_private = 'is_anime_history_private';\r\n    static is_manga_list_private = 'is_manga_list_private';\r\n    static is_manga_history_private = 'is_manga_history_private';\r\n}\r\n\r\n\r\nexport class UserList {\r\n    static owner = 'owner';\r\n    static is_updating = 'is_updating';\r\n    static is_scraping_episode_history_from_mal = 'is_scraping_episode_history_from_mal';\r\n    static scraping_episode_history_from_mal_progress = 'scraping_episode_history_from_mal_progress';\r\n    static xml_mal_anime_list = 'xml_mal_anime_list';\r\n    static anime_watching = 'anime_watching';\r\n    static anime_completed = 'anime_completed';\r\n    static anime_on_hold = 'anime_on_hold';\r\n    static anime_dropped = 'anime_dropped';\r\n    static anime_plan_to_watch = 'anime_plan_to_watch';\r\n    static anime_total_finished = 'anime_total_finished';\r\n    static anime_total_entries = 'anime_total_entries';\r\n    static anime_mean_score = 'anime_mean_score';\r\n    static anime_episodes_watched = 'anime_episodes_watched';\r\n    static anime_mins_spent_watching = 'anime_mins_spent_watching';\r\n    static anime_started_watching_on = 'anime_started_watching_on';\r\n    static manga_reading = 'manga_reading';\r\n    static manga_completed = 'manga_completed';\r\n    static manga_on_hold = 'manga_on_hold';\r\n    static manga_dropped = 'manga_dropped';\r\n    static manga_plan_to_read = 'manga_plan_to_read';\r\n    static manga_total_finished = 'manga_total_finished';\r\n    static manga_mean_score = 'manga_mean_score';\r\n    static manga_total_entries = 'manga_total_entries';\r\n    static manga_volumes_read = 'manga_volumes_read';\r\n    static manga_chapters_read = 'manga_chapters_read';\r\n    static manga_mins_spent_reading = 'manga_mins_spent_reading';\r\n    static manga_started_reading_on = 'manga_started_reading_on';\r\n}\r\n\r\nexport class UserAnimeEntry {\r\n    static id = 'id';\r\n    static anime = 'anime';\r\n    static episode_history = 'episode_history';\r\n    static watched_episodes = 'watched_episodes';\r\n    static start_date = 'start_date';\r\n    static finish_date = 'finish_date';\r\n    static score = 'score';\r\n    static status = 'status';\r\n    static times_watched = 'times_watched';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static priority = 'priority';\r\n    static rewatching = 'rewatching';\r\n    static rewatching_episode = 'rewatching_episode';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static anime_list = 'anime_list';\r\n}\r\n\r\nexport class UserMangaEntry {\r\n    static id = 'id';\r\n    static manga = 'manga';\r\n    static start_date = 'start_date';\r\n    static finish_date = 'finish_date';\r\n    static volume_history = 'volume_history';\r\n    static chapter_history = 'chapter_history';\r\n    static read_volumes = 'read_volumes';\r\n    static read_chapters = 'read_chapters';\r\n    static score = 'score';\r\n    static status = 'status';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static times_read = 'times_read';\r\n    static priority = 'priority';\r\n    static rereading = 'rereading';\r\n    static rereading_chapter = 'rereading_chapter';\r\n    static rereading_volume = 'rereading_volume';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class AnimeData {\r\n    static total_anime_per_season_json = 'total_anime_per_season_json';\r\n    static current_anime_season = 'current_anime_season';\r\n    static top_scored_anime = 'top_scored_anime';\r\n    static top_upcoming_anime = 'top_upcoming_anime';\r\n    static most_popular_anime = 'most_popular_anime';\r\n    static top_70s_anime = 'top_70s_anime';\r\n    static top_80s_anime = 'top_80s_anime';\r\n    static top_90s_anime = 'top_90s_anime';\r\n    static top_2000s_anime = 'top_2000s_anime';\r\n    static top_2010s_anime = 'top_2010s_anime';\r\n    static recently_added_anime = 'recently_added_anime';\r\n    static recently_downloaded_anime = 'recently_downloaded_anime';\r\n}\r\n\r\nexport class MangaData {\r\n    static total_manga_per_season_json = 'total_manga_per_season_json';\r\n    static current_manga_season = 'current_manga_season';\r\n    static top_scored_manga = 'top_scored_manga';\r\n    static top_upcoming_manga = 'top_upcoming_manga';\r\n    static most_popular_manga = 'most_popular_manga';\r\n    static top_70s_manga = 'top_70s_manga';\r\n    static top_80s_manga = 'top_80s_manga';\r\n    static top_90s_manga = 'top_90s_manga';\r\n    static top_2000s_manga = 'top_2000s_manga';\r\n    static top_2010s_manga = 'top_2010s_manga';\r\n    static recently_added_manga = 'recently_added_manga';\r\n    static recently_downloaded_manga = 'recently_downloaded_manga';\r\n}\r\n\r\nexport class IndustryData {\r\n    static most_popular_characters = 'most_popular_characters';\r\n    static recently_added_characters = 'recently_added_characters';\r\n}\r\n\r\nexport class ErogeData {\r\n    static top_scored_eroge = 'top_scored_eroge';\r\n    static most_popular_eroge = 'most_popular_eroge';\r\n    static top_windows_eroge = 'top_windows_eroge';\r\n    static top_android_eroge = 'top_android_eroge';\r\n    static largest_size_eroge = 'largest_size_eroge';\r\n    static recently_added_eroge = 'recently_added_eroge';\r\n}\r\n\r\nexport class SeasonYear {\r\n    static seasons = 'seasons';\r\n    static year = 'year';\r\n}\r\n\r\nexport class Anime {\r\n    static id = 'id';\r\n    static title = 'title';\r\n    static title_english = 'title_english';\r\n    static title_synonyms = 'title_synonyms';\r\n    static title_japanese = 'title_japanese';\r\n    static anime_cover_images = 'anime_cover_images';\r\n    static anime_cdn_cover_images = 'anime_cdn_cover_images';\r\n    static anime_on_server = 'anime_on_server';\r\n    static air_end = 'air_end';\r\n    static air_end_known = 'air_end_known';\r\n    static air_start = 'air_start';\r\n    static air_start_known = 'air_start_known';\r\n    static aired_string = 'aired_string';\r\n    static airing = 'airing';\r\n    static approved = 'approved';\r\n    static background = 'background';\r\n    static broadcast = 'broadcast';\r\n    static cannot_download = 'cannot_download';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static duration = 'duration';\r\n    static ending_theme = 'ending_theme';\r\n    static episodes = 'episodes';\r\n    static favorites = 'favorites';\r\n    static franchise = 'franchise';\r\n    static genres_csv = 'genres_csv';\r\n    static is_downloading = 'is_downloading';\r\n    static licensor = 'licensor';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static members = 'members';\r\n    static minutes_per_episode = 'minutes_per_episode';\r\n    static opening_theme = 'opening_theme';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static popularity = 'popularity';\r\n    static premiered = 'premiered';\r\n    static producer = 'producer';\r\n    static rank = 'rank';\r\n    static rating = 'rating';\r\n    static rating_short = 'rating_short';\r\n    static score = 'score';\r\n    static scored_by = 'scored_by';\r\n    static source = 'source';\r\n    static status = 'status';\r\n    static studio = 'studio';\r\n    static synopsis = 'synopsis';\r\n    static total_time_mins = 'total_time_mins';\r\n    static type = 'type';\r\n    static uuid_name = 'uuid_name';\r\n    static anime_roles = 'anime_roles';\r\n    static main_characters = 'main_characters';\r\n    static all_characters = 'all_characters';\r\n    static anime_relations = 'anime_relations';\r\n}\r\n\r\nexport const VALID_ANIME_RELATIONS = ['anime_relation_adaptation', 'anime_relation_alternative_setting',\r\n    'anime_relation_alternative_version', 'anime_relation_sequel', 'anime_relation_prequel',\r\n    'anime_relation_side_story', 'anime_relation_spin_off', 'anime_relation_other', 'anime_relation_summary',\r\n    'anime_relation_character', 'anime_relation_parent_story', 'anime_relation_full_story'];\r\nexport const VALID_ANIME_RELATION_NAMES = {\r\n    'anime_relation_adaptation': \"Adaptation\",\r\n    'anime_relation_alternative_setting': \"Alternative Setting\",\r\n    'anime_relation_alternative_version': \"Alternative Version\",\r\n    'anime_relation_sequel': \"Sequel\",\r\n    'anime_relation_prequel': \"Prequel\",\r\n    'anime_relation_side_story': \"Side Story\",\r\n    'anime_relation_spin_off': \"Spin Off\",\r\n    'anime_relation_other': \"Other\",\r\n    'anime_relation_summary': \"Summary\",\r\n    'anime_relation_character': \"Character\",\r\n    'anime_relation_parent_story': \"Parent Story\",\r\n    'anime_relation_full_story': \"Full Story\"\r\n};\r\n\r\nexport const ANIME_SHORT_STATUS = {\r\n    'Finished Airing': {label: 'FA', color: 'primary'},\r\n    'Not yet aired': {label: 'NA', color: 'default'},\r\n    'Currently Airing': {label: 'CA', color: 'success'},\r\n};\r\n\r\nexport const MANGA_SHORT_STATUS = {\r\n    'Finished': {label: 'F', color: 'primary'},\r\n    'Not yet published': {label: 'NP', color: 'default'},\r\n    'Publishing': {label: 'P', color: 'success'},\r\n    'Discontinued': {label: 'D', color: 'danger'},\r\n    'On Hiatus': {label: 'OH', color: 'warning'},\r\n};\r\n\r\nexport class AnimeOnServer {\r\n    static additional_dubs = 'additional_dubs';\r\n    static additional_info = 'additional_info';\r\n    static additional_subtitles = 'additional_subtitles';\r\n    static anime = 'anime';\r\n    static approved = 'approved';\r\n    static arabic_dub = 'arabic_dub';\r\n    static arabic_sub = 'arabic_sub';\r\n    static audio_channel = 'audio_channel';\r\n    static bulgarian_dub = 'bulgarian_dub';\r\n    static bulgarian_sub = 'bulgarian_sub';\r\n    static catalan_dub = 'catalan_dub';\r\n    static catalan_sub = 'catalan_sub';\r\n    static chinese_dub = 'chinese_dub';\r\n    static chinese_sub = 'chinese_sub';\r\n    static czech_dub = 'czech_dub';\r\n    static czech_sub = 'czech_sub';\r\n    static danish_dub = 'danish_dub';\r\n    static danish_sub = 'danish_sub';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static downloading = 'downloading';\r\n    static dutch_dub = 'dutch_dub';\r\n    static dutch_sub = 'dutch_sub';\r\n    static english_dub = 'english_dub';\r\n    static english_sub = 'english_sub';\r\n    static english_subs = 'english_subs';\r\n    static extract_subs = 'extract_subs';\r\n    static finnish_dub = 'finnish_dub';\r\n    static finnish_sub = 'finnish_sub';\r\n    static franchise_folder_name = 'franchise_folder_name';\r\n    static french_dub = 'french_dub';\r\n    static french_sub = 'french_sub';\r\n    static german_dub = 'german_dub';\r\n    static german_sub = 'german_sub';\r\n    static greek_dub = 'greek_dub';\r\n    static greek_sub = 'greek_sub';\r\n    static hebrew_dub = 'hebrew_dub';\r\n    static hebrew_sub = 'hebrew_sub';\r\n    static hungarian_dub = 'hungarian_dub';\r\n    static hungarian_sub = 'hungarian_sub';\r\n    static incomplete = 'incomplete';\r\n    static incomplete_progress = 'incomplete_progress';\r\n    static indonesian_dub = 'indonesian_dub';\r\n    static indonesian_sub = 'indonesian_sub';\r\n    static italian_dub = 'italian_dub';\r\n    static italian_sub = 'italian_sub';\r\n    static japanese_dub = 'japanese_dub';\r\n    static japanese_sub = 'japanese_sub';\r\n    static korean_dub = 'korean_dub';\r\n    static korean_sub = 'korean_sub';\r\n    static location = 'location';\r\n    static main_torrent_info = 'main_torrent_info';\r\n    static malay_dub = 'malay_dub';\r\n    static malay_sub = 'malay_sub';\r\n    static norwegian_dub = 'norwegian_dub';\r\n    static norwegian_sub = 'norwegian_sub';\r\n    static persian_dub = 'persian_dub';\r\n    static persian_sub = 'persian_sub';\r\n    static polish_dub = 'polish_dub';\r\n    static polish_sub = 'polish_sub';\r\n    static portuguese_dub = 'portuguese_dub';\r\n    static portuguese_sub = 'portuguese_sub';\r\n    static requiem = 'requiem';\r\n    static romanian_dub = 'romanian_dub';\r\n    static romanian_sub = 'romanian_sub';\r\n    static russian_dub = 'russian_dub';\r\n    static russian_sub = 'russian_sub';\r\n    static shared_torrent_with = 'shared_torrent_with';\r\n    static size_on_HDD_GB = 'size_on_HDD_GB';\r\n    static slovak_dub = 'slovak_dub';\r\n    static slovak_sub = 'slovak_sub';\r\n    static spanish_dub = 'spanish_dub';\r\n    static spanish_sub = 'spanish_sub';\r\n    static swedish_dub = 'swedish_dub';\r\n    static swedish_sub = 'swedish_sub';\r\n    static thai_dub = 'thai_dub';\r\n    static thai_sub = 'thai_sub';\r\n    static torrent_file = 'torrent_file';\r\n    static torrent_hash = 'torrent_hash';\r\n    static torrent_magnet = 'torrent_magnet';\r\n    static turkish_dub = 'turkish_dub';\r\n    static turkish_sub = 'turkish_sub';\r\n    static video_quality = 'video_quality';\r\n    static video_resolution = 'video_resolution';\r\n    static vietnamese_dub = 'vietnamese_dub';\r\n    static vietnamese_sub = 'vietnamese_sub';\r\n}\r\n\r\nexport class AnimeFranchise {\r\n    static id = 'id';\r\n    static title = 'title';\r\n    static cover_image = 'cover_image';\r\n    static total_titles = 'total_titles';\r\n    static top_members = 'top_members';\r\n    static total_members = 'total_members';\r\n    static top_score = 'top_score';\r\n    static average_score = 'average_score';\r\n    static total_minutes = 'total_minutes';\r\n    static total_episodes = 'total_episodes';\r\n    static anime_franchise = 'anime_franchise';\r\n}\r\n\r\nexport class Manga {\r\n    static active_image_name = 'active_image_name';\r\n    static air_end = 'air_end';\r\n    static air_end_known = 'air_end_known';\r\n    static air_start = 'air_start';\r\n    static air_start_known = 'air_start_known';\r\n    static anidb_image_url = 'anidb_image_url';\r\n    static ann_image_url = 'ann_image_url';\r\n    static approved = 'approved';\r\n    static authors = 'authors';\r\n    static background = 'background';\r\n    static cannot_download = 'cannot_download';\r\n    static chapters = 'chapters';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static favorites = 'favorites';\r\n    static genres = 'genres';\r\n    static genres_csv = 'genres_csv';\r\n    static id = 'id';\r\n    static image_url = 'image_url';\r\n    static is_downloading = 'is_downloading';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static manga_cover_images = 'manga_cover_images';\r\n    static manga_cdn_cover_images = 'manga_cdn_cover_images';\r\n    static manga_on_server = 'manga_on_server';\r\n    static members = 'members';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static popularity = 'popularity';\r\n    static published_string = 'published_string';\r\n    static publishing = 'publishing';\r\n    static rank = 'rank';\r\n    static related = 'related';\r\n    static score = 'score';\r\n    static scored_by = 'scored_by';\r\n    static serialization = 'serialization';\r\n    static status = 'status';\r\n    static synopsis = 'synopsis';\r\n    static title = 'title';\r\n    static title_english = 'title_english';\r\n    static title_japanese = 'title_japanese';\r\n    static title_synonyms = 'title_synonyms';\r\n    static type = 'type';\r\n    static uuid_name = 'uuid_name';\r\n    static volumes = 'volumes';\r\n    static manga_roles = 'manga_roles';\r\n    static main_characters = 'main_characters';\r\n    static all_characters = 'all_characters';\r\n    static manga_relations = 'manga_relations';\r\n}\r\n\r\nexport const VALID_MANGA_RELATIONS = [\r\n    'manga_relation_adaptation',\r\n    'manga_relation_alternative_setting',\r\n    'manga_relation_alternative_version',\r\n    'manga_relation_sequel',\r\n    'manga_relation_prequel',\r\n    'manga_relation_side_story',\r\n    'manga_relation_spin_off',\r\n    'manga_relation_other',\r\n    'manga_relation_summary',\r\n    'manga_relation_character',\r\n    'manga_relation_parent_story',\r\n    'manga_relation_full_story'\r\n];\r\n\r\nexport const VALID_MANGA_RELATION_NAMES = {\r\n    'manga_relation_adaptation': \"Adaptation\",\r\n    'manga_relation_alternative_setting': \"Alternative Setting\",\r\n    'manga_relation_alternative_version': \"Alternative Version\",\r\n    'manga_relation_sequel': \"Sequel\",\r\n    'manga_relation_prequel': \"Prequel\",\r\n    'manga_relation_side_story': \"Side Story\",\r\n    'manga_relation_spin_off': \"Spin Off\",\r\n    'manga_relation_other': \"Other\",\r\n    'manga_relation_summary': \"Summary\",\r\n    'manga_relation_character': \"Character\",\r\n    'manga_relation_parent_story': \"Parent Story\",\r\n    'manga_relation_full_story': \"Full Story\"\r\n};\r\n\r\nexport class Character {\r\n    static id = 'id';\r\n    static character_cover_images = 'character_cover_images';\r\n    static character_cdn_cover_images = 'character_cdn_cover_images';\r\n    static anime_roles = 'anime_roles';\r\n    static manga_roles = 'manga_roles';\r\n    static uuid_name = 'uuid_name';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static approved = 'approved';\r\n    static character_name = 'name';\r\n    static nickname = 'nickname';\r\n    static short_name = 'short_name';\r\n    static image_url = 'image_url';\r\n    static anidb_image_url = 'anidb_image_url';\r\n    static ann_image_url = 'ann_image_url';\r\n    static active_image_name = 'active_image_name';\r\n    static favorites = 'favorites';\r\n    static description = 'description';\r\n    static voice_actors = 'voice_actors';\r\n    static role = 'role';\r\n    static anime_roles_defined = 'anime_roles_defined';\r\n    static manga_roles_defined = 'manga_roles_defined';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class Person {\r\n    static id = 'id';\r\n    static uuid_name = 'uuid_name';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static approved = 'approved';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static person_cover_images = 'person_cover_images';\r\n    static person_cdn_cover_images = 'person_cdn_cover_images';\r\n    static person_name = 'name';\r\n    static given_name = 'given_name';\r\n    static family_name = 'family_name';\r\n    static alternative_names = 'alternative_names';\r\n    static image_url = 'image_url';\r\n    static birthday = 'birthday';\r\n    static website = 'website';\r\n    static favorites = 'favorites';\r\n    static more_info = 'more_info';\r\n    static has_roles = 'has_roles';\r\n    static voice_actor_roles = 'voice_actor_roles';\r\n    static anime_staff_positions = 'anime_staff_positions';\r\n    static anime_staff_positions_roles = 'anime_staff_positions_roles';\r\n    static published_manga = 'published_manga';\r\n    static published_manga_roles = 'published_manga_roles';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class Eroge {\r\n    static censorship = 'censorship';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static date_updated = 'date_updated';\r\n    static description = 'description';\r\n    static download_url = 'download_url';\r\n    static downloaded = 'downloaded';\r\n    static eroge_cover_images = 'eroge_cover_images';\r\n    static eroge_screenshots = 'eroge_screenshots';\r\n    static game_location = 'game_location';\r\n    static game_url = 'game_url';\r\n    static id = 'id';\r\n    static language = 'language';\r\n    static eroge_name = 'name';\r\n    static platforms = 'platforms';\r\n    static rated_by = 'rated_by';\r\n    static rating = 'rating';\r\n    static scraped_from = 'scraped_from';\r\n    static size = 'size';\r\n    static source = 'source';\r\n    static tags = 'tags';\r\n    static type = 'type';\r\n}\r\n\r\nexport class CoverImages {\r\n    static image = 'image';\r\n}\r\n\r\nexport class CDNCoverImages {\r\n    static image_url = 'image_url';\r\n    static thumbnail_url = 'thumbnail_url';\r\n    static size = 'size';\r\n    static width = 'width';\r\n    static height = 'height';\r\n}\r\n\r\nexport class FiltersPreset {\r\n    static id = 'id';\r\n    static preset_name = 'name';\r\n    static filters = 'filters';\r\n}\r\n\r\nexport class AnimeDataStatistics {\r\n    static anime_data = 'anime_data';\r\n    static total_anime = 'total_anime';\r\n    static total_anime_deleted_mal = 'total_anime_deleted_mal';\r\n    static total_anime_pending_mal = 'total_anime_pending_mal';\r\n    static total_anime_downloaded = 'total_anime_downloaded';\r\n    static total_anime_downloading = 'total_anime_downloading';\r\n    static total_downloaded_size = 'total_downloaded_size';\r\n    static mean_score = 'mean_score';\r\n    static total_episodes = 'total_episodes';\r\n    static total_minutes = 'total_minutes';\r\n    static total_quality_2160p = 'total_quality_2160p';\r\n    static total_quality_1080p = 'total_quality_1080p';\r\n    static total_quality_960p = 'total_quality_960p';\r\n    static total_quality_720p = 'total_quality_720p';\r\n    static total_quality_576p = 'total_quality_576p';\r\n    static total_quality_560p = 'total_quality_560p';\r\n    static total_quality_540p = 'total_quality_540p';\r\n    static total_quality_528p = 'total_quality_528p';\r\n    static total_quality_480p = 'total_quality_480p';\r\n    static total_quality_396p = 'total_quality_396p';\r\n    static total_quality_360p = 'total_quality_360p';\r\n    static total_quality_288p = 'total_quality_288p';\r\n    static total_quality_240p = 'total_quality_240p';\r\n    static total_original_anime = 'total_original_anime';\r\n    static total_original_anime_mean = 'total_original_anime_mean';\r\n    static total_anime_from_light_novel = 'total_anime_from_light_novel';\r\n    static total_anime_from_light_novel_mean = 'total_anime_from_light_novel_mean';\r\n    static total_anime_from_music = 'total_anime_from_music';\r\n    static total_anime_from_music_mean = 'total_anime_from_music_mean';\r\n    static total_anime_from_manga = 'total_anime_from_manga';\r\n    static total_anime_from_manga_mean = 'total_anime_from_manga_mean';\r\n    static total_anime_from_other = 'total_anime_from_other';\r\n    static total_anime_from_other_mean = 'total_anime_from_other_mean';\r\n    static total_anime_from_visual_novel = 'total_anime_from_visual_novel';\r\n    static total_anime_from_visual_novel_mean = 'total_anime_from_visual_novel_mean';\r\n    static total_anime_from_book = 'total_anime_from_book';\r\n    static total_anime_from_book_mean = 'total_anime_from_book_mean';\r\n    static total_anime_from_game = 'total_anime_from_game';\r\n    static total_anime_from_game_mean = 'total_anime_from_game_mean';\r\n    static total_anime_from_web_manga = 'total_anime_from_web_manga';\r\n    static total_anime_from_web_manga_mean = 'total_anime_from_web_manga_mean';\r\n    static total_anime_from_novel = 'total_anime_from_novel';\r\n    static total_anime_from_novel_mean = 'total_anime_from_novel_mean';\r\n    static total_anime_from_picture_book = 'total_anime_from_picture_book';\r\n    static total_anime_from_picture_book_mean = 'total_anime_from_picture_book_mean';\r\n    static total_anime_from_card_game = 'total_anime_from_card_game';\r\n    static total_anime_from_card_game_mean = 'total_anime_from_card_game_mean';\r\n    static total_anime_from_4_kom_manga = 'total_anime_from_4_kom_manga';\r\n    static total_anime_from_4_kom_manga_mean = 'total_anime_from_4_kom_manga_mean';\r\n    static total_anime_from_digital_manga = 'total_anime_from_digital_manga';\r\n    static total_anime_from_digital_manga_mean = 'total_anime_from_digital_manga_mean';\r\n    static total_anime_from_radio = 'total_anime_from_radio';\r\n    static total_anime_from_radio_mean = 'total_anime_from_radio_mean';\r\n    static total_movie = 'total_movie';\r\n    static total_music = 'total_music';\r\n    static total_ona = 'total_ona';\r\n    static total_ova = 'total_ova';\r\n    static total_special = 'total_special';\r\n    static total_tv = 'total_tv';\r\n    static total_finished_airing = 'total_finished_airing';\r\n    static total_currently_airing = 'total_currently_airing';\r\n    static total_not_yet_aired = 'total_not_yet_aired';\r\n    static total_rated_g = 'total_rated_g';\r\n    static total_rated_pgc = 'total_rated_pgc';\r\n    static total_rated_pg13 = 'total_rated_pg13';\r\n    static total_rated_r = 'total_rated_r';\r\n    static total_rated_r_plus = 'total_rated_r_plus';\r\n    static total_rated_rx = 'total_rated_rx';\r\n    static total_rated_none = 'total_rated_none';\r\n    static total_genre_action = 'total_genre_action';\r\n    static total_genre_adventure = 'total_genre_adventure';\r\n    static total_genre_cars = 'total_genre_cars';\r\n    static total_genre_comedy = 'total_genre_comedy';\r\n    static total_genre_dementia = 'total_genre_dementia';\r\n    static total_genre_demons = 'total_genre_demons';\r\n    static total_genre_drama = 'total_genre_drama';\r\n    static total_genre_ecchi = 'total_genre_ecchi';\r\n    static total_genre_fantasy = 'total_genre_fantasy';\r\n    static total_genre_game = 'total_genre_game';\r\n    static total_genre_harem = 'total_genre_harem';\r\n    static total_genre_hentai = 'total_genre_hentai';\r\n    static total_genre_historical = 'total_genre_historical';\r\n    static total_genre_horror = 'total_genre_horror';\r\n    static total_genre_josei = 'total_genre_josei';\r\n    static total_genre_kids = 'total_genre_kids';\r\n    static total_genre_magic = 'total_genre_magic';\r\n    static total_genre_martial_arts = 'total_genre_martial_arts';\r\n    static total_genre_mecha = 'total_genre_mecha';\r\n    static total_genre_military = 'total_genre_military';\r\n    static total_genre_music = 'total_genre_music';\r\n    static total_genre_mystery = 'total_genre_mystery';\r\n    static total_genre_parody = 'total_genre_parody';\r\n    static total_genre_police = 'total_genre_police';\r\n    static total_genre_psychological = 'total_genre_psychological';\r\n    static total_genre_romance = 'total_genre_romance';\r\n    static total_genre_samurai = 'total_genre_samurai';\r\n    static total_genre_school = 'total_genre_school';\r\n    static total_genre_sci_fi = 'total_genre_sci_fi';\r\n    static total_genre_seinen = 'total_genre_seinen';\r\n    static total_genre_shoujo = 'total_genre_shoujo';\r\n    static total_genre_shoujo_ai = 'total_genre_shoujo_ai';\r\n    static total_genre_shounen = 'total_genre_shounen';\r\n    static total_genre_shounen_ai = 'total_genre_shounen_ai';\r\n    static total_genre_slice_of_life = 'total_genre_slice_of_life';\r\n    static total_genre_space = 'total_genre_space';\r\n    static total_genre_sports = 'total_genre_sports';\r\n    static total_genre_super_power = 'total_genre_super_power';\r\n    static total_genre_supernatural = 'total_genre_supernatural';\r\n    static total_genre_thriller = 'total_genre_thriller';\r\n    static total_genre_vampire = 'total_genre_vampire';\r\n    static total_genre_yaoi = 'total_genre_yaoi';\r\n    static total_genre_yuri = 'total_genre_yuri';\r\n    static anime_achievement_romance_thresholds = 'anime_achievement_romance_thresholds';\r\n    static anime_achievement_romance_info = 'anime_achievement_romance_info';\r\n    static anime_achievement_classics_thresholds = 'anime_achievement_classics_thresholds';\r\n    static anime_achievement_classics_info = 'anime_achievement_classics_info';\r\n    static anime_achievement_pervert_thresholds = 'anime_achievement_pervert_thresholds';\r\n    static anime_achievement_pervert_info = 'anime_achievement_pervert_info';\r\n    static anime_achievement_dementia_psychological_thresholds = 'anime_achievement_dementia_psychological_thresholds';\r\n    static anime_achievement_dementia_psychological_info = 'anime_achievement_dementia_psychological_info';\r\n    static anime_achievement_horror_thriller_thresholds = 'anime_achievement_horror_thriller_thresholds';\r\n    static anime_achievement_horror_thriller_info = 'anime_achievement_horror_thriller_info';\r\n    static anime_achievement_mystery_thresholds = 'anime_achievement_mystery_thresholds';\r\n    static anime_achievement_mystery_info = 'anime_achievement_mystery_info';\r\n}\r\n\r\nexport class AchievementInfo {\r\n    static title = 'title';\r\n    static requirement = 'requirement';\r\n    static tier_1 = 'tier_1';\r\n    static tier_2 = 'tier_2';\r\n    static tier_3 = 'tier_3';\r\n    static tier_4 = 'tier_4';\r\n}\r\n\r\nexport class AchievementTier {\r\n    static title = 'title';\r\n    static description = 'description';\r\n    static image = 'image';\r\n}\r\n","import Cookies from \"js-cookie\";\r\nimport {Cookie} from \"../../models\";\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_ANIME_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        anime_on_server__english_sub: false,\r\n        anime_on_server__english_dub: false,\r\n        anime_on_server__japanese_dub: false,\r\n        anime_on_server__japanese_sub: false,\r\n        episodes_range: [0, 53],\r\n        length_range: [0, 61],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        rating_short: [],\r\n        video_quality: [],\r\n        audio_channel: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_MANGA_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        volumes_range: [0, 53],\r\n        chapters_range: [0, 53],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_CHARACTERS_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_PEOPLE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_EROGE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        type: [],\r\n        downloaded: '',\r\n        platforms: [],\r\n        language: [],\r\n        censorship: [],\r\n        tags: [],\r\n        ordering: '-date_added',\r\n    };\r\n}\r\n\r\n\r\nexport function loadCookies() {\r\n    let loaded_cookies = {\r\n        anime_browse_filters: {},\r\n        anime_season_filters: {},\r\n        anime_list_filters: {},\r\n        manga_browse_filters: {},\r\n        manga_season_filters: {},\r\n        manga_list_filters: {},\r\n        characters_filters: {},\r\n        people_filters: {},\r\n        eroge_browse_filters: {},\r\n    };\r\n\r\n    if (Cookies.get(Cookie.show_filters) === undefined || Cookies.get(Cookie.show_filters) === 'undefined')\r\n        Cookies.set(Cookie.show_filters, true);\r\n\r\n    const new_anime_values = new FILTER_ANIME_INITIAL_VALUES();\r\n    let anime_browse_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_browse_filters) === undefined || Cookies.get(Cookie.anime_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_browse_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_browse_filters = JSON.parse(Cookies.get(Cookie.anime_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    let anime_season_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_season_filters) === undefined || Cookies.get(Cookie.anime_season_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_season_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_season_filters = JSON.parse(Cookies.get(Cookie.anime_season_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    let anime_list_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_list_filters) === undefined || Cookies.get(Cookie.anime_list_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_list_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_list_filters = JSON.parse(Cookies.get(Cookie.anime_list_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.anime_browse_filters = anime_browse_filters;\r\n    loaded_cookies.anime_season_filters = anime_season_filters;\r\n    loaded_cookies.anime_list_filters = anime_list_filters;\r\n\r\n    const new_manga_values = new FILTER_MANGA_INITIAL_VALUES();\r\n    let manga_browse_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_browse_filters) === undefined || Cookies.get(Cookie.manga_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_browse_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_browse_filters = JSON.parse(Cookies.get(Cookie.manga_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    let manga_season_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_season_filters) === undefined || Cookies.get(Cookie.manga_season_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_season_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_season_filters = JSON.parse(Cookies.get(Cookie.manga_season_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    let manga_list_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_list_filters) === undefined || Cookies.get(Cookie.manga_list_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_list_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_list_filters = JSON.parse(Cookies.get(Cookie.manga_list_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.manga_browse_filters = manga_browse_filters;\r\n    loaded_cookies.manga_season_filters = manga_season_filters;\r\n    loaded_cookies.manga_list_filters = manga_list_filters;\r\n\r\n    const new_characters_values = new FILTER_CHARACTERS_INITIAL_VALUES();\r\n    let characters_filters = new_characters_values.VALUES;\r\n    if (Cookies.get(Cookie.characters_filters) === undefined || Cookies.get(Cookie.characters_filters) === 'undefined')\r\n        Cookies.set(Cookie.characters_filters, new_characters_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            characters_filters = JSON.parse(Cookies.get(Cookie.characters_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.characters_filters = characters_filters;\r\n\r\n    const new_people_values = new FILTER_PEOPLE_INITIAL_VALUES();\r\n    let people_filters = new_people_values.VALUES;\r\n    if (Cookies.get(Cookie.people_filters) === undefined || Cookies.get(Cookie.people_filters) === 'undefined')\r\n        Cookies.set(Cookie.people_filters, new_people_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            people_filters = JSON.parse(Cookies.get(Cookie.people_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.people_filters = people_filters;\r\n\r\n    const new_eroge_values = new FILTER_EROGE_INITIAL_VALUES();\r\n    let eroge_filters = new_eroge_values.VALUES;\r\n    if (Cookies.get(Cookie.eroge_browse_filters) === undefined || Cookies.get(Cookie.eroge_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.eroge_browse_filters, new_eroge_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            eroge_filters = JSON.parse(Cookies.get(Cookie.eroge_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.eroge_browse_filters = eroge_filters;\r\n\r\n    return loaded_cookies\r\n}\r\n","import Cookies from 'js-cookie'\r\n\r\nimport {\r\n    TYPE_BROWSE, TYPE_LIST, TYPE_SEASON\r\n} from \"../globals\";\r\nimport {\r\n    SET_ANIME_FILTERS, SET_CHARACTERS_FILTERS,\r\n    SET_COOKIE_SHOW_FILTERS, SET_EROGE_FILTERS,\r\n    SET_MANGA_FILTERS, SET_PEOPLE_FILTERS\r\n} from \"../actions/types\";\r\nimport {Cookie} from \"../models\";\r\nimport {loadCookies} from \"../components/cookies/load_cookies\";\r\n\r\n\r\nconst loaded_cookies = loadCookies();\r\nconst initialState = {\r\n    show_filters: Cookies.get(Cookie.show_filters) === undefined ? true : Cookies.get(Cookie.show_filters) === 'true',\r\n    anime_browse_filters: loaded_cookies.anime_browse_filters,\r\n    anime_season_filters: loaded_cookies.anime_season_filters,\r\n    anime_list_filters: loaded_cookies.anime_list_filters,\r\n    manga_browse_filters: loaded_cookies.manga_browse_filters,\r\n    manga_season_filters: loaded_cookies.manga_season_filters,\r\n    manga_list_filters: loaded_cookies.manga_list_filters,\r\n    characters_filters: loaded_cookies.characters_filters,\r\n    people_filters: loaded_cookies.people_filters,\r\n    eroge_browse_filters: loaded_cookies.eroge_browse_filters,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_COOKIE_SHOW_FILTERS:\r\n            Cookies.set(Cookie.show_filters, action.value);\r\n            return {\r\n                ...state,\r\n                show_filters: action.value,\r\n            };\r\n        case SET_ANIME_FILTERS:\r\n            return update_anime_filter_state(state, action);\r\n        case SET_MANGA_FILTERS:\r\n            return update_manga_filter_state(state, action);\r\n        case SET_CHARACTERS_FILTERS:\r\n            Cookies.set(Cookie.characters_filters, action.value);\r\n            return {\r\n                ...state,\r\n                characters_filters: action.value,\r\n            };\r\n        case SET_PEOPLE_FILTERS:\r\n            Cookies.set(Cookie.people_filters, action.value);\r\n            return {\r\n                ...state,\r\n                people_filters: action.value,\r\n            };\r\n        case SET_EROGE_FILTERS:\r\n            Cookies.set(Cookie.eroge_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                eroge_browse_filters: action.value,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction update_anime_filter_state(state, action) {\r\n    switch (action.page_type) {\r\n        case TYPE_BROWSE:\r\n            Cookies.set(Cookie.anime_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_browse_filters: action.value,\r\n            };\r\n        case TYPE_SEASON:\r\n            Cookies.set(Cookie.anime_season_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_season_filters: action.value,\r\n            };\r\n        case TYPE_LIST:\r\n            Cookies.set(Cookie.anime_list_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_list_filters: action.value,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n                anime_browse_filters: action.value,\r\n            };\r\n    }\r\n}\r\n\r\nfunction update_manga_filter_state(state, action) {\r\n    switch (action.page_type) {\r\n        case TYPE_BROWSE:\r\n            Cookies.set(Cookie.manga_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_browse_filters: action.value,\r\n            };\r\n        case TYPE_SEASON:\r\n            Cookies.set(Cookie.manga_season_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_season_filters: action.value,\r\n            };\r\n        case TYPE_LIST:\r\n            Cookies.set(Cookie.manga_list_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_list_filters: action.value,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n                manga_browse_filters: action.value,\r\n            };\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Howl} from 'howler';\r\nimport {Profile, User} from \"../../models\";\r\nimport store from \"../../store\";\r\n\r\n\r\nexport function loadSounds() {\r\n    playClickSound(0);\r\n    playHoverSound(0);\r\n    playExpand3Sound(0);\r\n    playExpand2Sound(0);\r\n    playExpandSound(0);\r\n    playErrorSound(0);\r\n    playWarningSound(0);\r\n    playDeploySound(0);\r\n}\r\n\r\nexport function playWelcomeSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/welcome.ogg'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playClickSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/click.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playDeploySound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/deploy.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playHoverSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/hover.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpandSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpand2Sound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand-2.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpand3Sound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 0.05;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand-3.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playFadeSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/fade.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playErrorSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/error.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playWarningSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/warning.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n","import {\r\n    AUTH_USER,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    GET_USER, GET_PROFILE_PRIVACY_SETTINGS\r\n} from \"../actions/types\";\r\nimport {playExpand2Sound} from \"../components/layout/sounds\";\r\nimport {Profile, User} from \"../models\";\r\n\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    initial_auth: true,\r\n    user_loading: false,\r\n    user: null,\r\n    user_authenticated: null,\r\n    visited_user_loaded: false,\r\n    visited_user: null,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                user_loading: true\r\n            };\r\n        case GET_USER:\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                visited_user_loaded: true,\r\n                visited_user: action.payload,\r\n            };\r\n        case AUTH_USER:\r\n            return {\r\n                ...state,\r\n                user_authenticated: true,\r\n                user_loading: false,\r\n                user: action.payload,\r\n                initial_auth: false,\r\n            };\r\n        case GET_PROFILE_PRIVACY_SETTINGS:\r\n            let updated_user = {};\r\n            Object.assign(updated_user, state.user);\r\n            updated_user[User.profile][Profile.is_anime_list_private] = action.payload[Profile.is_anime_list_private];\r\n            updated_user[User.profile][Profile.is_anime_history_private] = action.payload[Profile.is_anime_history_private];\r\n            updated_user[User.profile][Profile.is_manga_list_private] = action.payload[Profile.is_manga_list_private];\r\n            updated_user[User.profile][Profile.is_manga_history_private] = action.payload[Profile.is_manga_history_private];\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                user: updated_user,\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            playExpand2Sound();\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                user_authenticated: true,\r\n                user_loading: false,\r\n            };\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: null,\r\n                user_authenticated: false,\r\n                user_loading: false,\r\n                initial_auth: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    AUTH_ERROR_CLEAR_USER_INFO,\r\n    CANCEL_USER_ACHIEVEMENTS_LOADING,\r\n    CANCEL_USER_LIST_LOADING,\r\n    CLEAR_USER_ACHIEVEMENTS,\r\n    CLEAR_USER_ANIME_ENTRY,\r\n    CLEAR_USER_MANGA_ENTRY,\r\n    FINISH_LOADING_USER_ENTRY,\r\n    FINISH_UPLOADING_FILE,\r\n    GET_ALL_USERS,\r\n    GET_ANIME_FILTER_PRESETS,\r\n    GET_EROGE_FILTER_PRESETS,\r\n    GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    GET_MANGA_FILTER_PRESETS, GET_PROFILE_PRIVACY_SETTINGS,\r\n    GET_USER_ACHIEVEMENTS,\r\n    GET_USER_ANIME_ENTRY,\r\n    GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    GET_USER_LIST, GET_USER_LIST_PRIVACY_SETTINGS,\r\n    GET_USER_MANGA_ENTRY,\r\n    GET_VISITED_USER_ANIME_HISTORY,\r\n    GET_VISITED_USER_MANGA_HISTORY,\r\n    SET_ANIME_PRESET,\r\n    SET_EROGE_PRESET,\r\n    SET_MANGA_PRESET,\r\n    UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    UPDATE_USER_ANIME_STATISTICS,\r\n    UPDATE_USER_LIST,\r\n    UPLOAD_ANIME_LIST_MAL_XML, UPLOAD_MANGA_LIST_MAL_XML,\r\n    UPLOADING_FILE,\r\n    USER_ACHIEVEMENTS_LOADING,\r\n    USER_ENTRY_LOADING,\r\n    USER_INFO_LOADING,\r\n    USER_LIST_LOADING,\r\n    USER_STATISTICS_LOADING,\r\n    USERS_LOADING\r\n} from \"../actions/types\";\r\nimport {Anime, Manga, UserAnimeEntry, UserList, UserMangaEntry} from \"../models\";\r\n\r\n\r\nconst initialState = {\r\n    all_users: [],\r\n    users_loading: false,\r\n    all_users_loaded: false,\r\n\r\n    entry_loading: false,\r\n    user_anime_entry: {},\r\n    user_anime_entry_loaded: false,\r\n    user_manga_entry: {},\r\n    user_manga_entry_loaded: false,\r\n\r\n    uploading_file: false,\r\n\r\n    user_list: {},\r\n    user_list_loading: false,\r\n    user_statistics_loading: false,\r\n    user_anime_statistics: {},\r\n    user_manga_statistics: {},\r\n\r\n    user_info_loading: false,\r\n\r\n    user_anime_history: {},\r\n    user_manga_history: {},\r\n\r\n    anime_filter_presets: [],\r\n    manga_filter_presets: [],\r\n    eroge_filter_presets: [],\r\n    selected_anime_preset: {},\r\n    selected_manga_preset: {},\r\n    selected_eroge_preset: {},\r\n\r\n    user_anime_entry_statuses: {},\r\n    user_manga_entry_statuses: {},\r\n\r\n    user_achievements_loading: false,\r\n    user_achievements: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USERS_LOADING:\r\n            return {\r\n                ...state,\r\n                users_loading: true,\r\n                all_users_loaded: false\r\n            };\r\n        case USER_LIST_LOADING:\r\n            return {\r\n                ...state,\r\n                user_list_loading: true,\r\n            };\r\n        case CANCEL_USER_LIST_LOADING:\r\n            return {\r\n                ...state,\r\n                user_list_loading: false,\r\n            };\r\n        case GET_ALL_USERS:\r\n            return {\r\n                ...state,\r\n                all_users: action.payload,\r\n                users_loading: false,\r\n                all_users_loaded: true\r\n            };\r\n        case USER_ENTRY_LOADING:\r\n            return {\r\n                ...state,\r\n                entry_loading: true,\r\n                user_anime_entry_loaded: false,\r\n                user_manga_entry_loaded: false\r\n            };\r\n        case USER_STATISTICS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_statistics_loading: true,\r\n            };\r\n        case FINISH_LOADING_USER_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n            };\r\n        case GET_USER_ANIME_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_anime_entry_loaded: true,\r\n                user_anime_entry: action.payload\r\n            };\r\n        case CLEAR_USER_ANIME_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_anime_entry_loaded: false,\r\n                user_anime_entry: {}\r\n            };\r\n        case GET_USER_MANGA_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_manga_entry_loaded: true,\r\n                user_manga_entry: action.payload\r\n            };\r\n        case CLEAR_USER_MANGA_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_manga_entry_loaded: false,\r\n                user_manga_entry: {}\r\n            };\r\n        case UPDATE_USER_LIST:\r\n        case GET_USER_LIST:\r\n            return {\r\n                ...state,\r\n                user_list: action.payload,\r\n                user_list_loading: false,\r\n            };\r\n        case UPDATE_USER_ANIME_STATISTICS:\r\n            return {\r\n                ...state,\r\n                user_statistics_loading: false,\r\n                user_anime_statistics: action.payload,\r\n            };\r\n        case UPLOADING_FILE:\r\n            return {\r\n                ...state,\r\n                uploading_file: true\r\n            };\r\n        case FINISH_UPLOADING_FILE:\r\n            return {\r\n                ...state,\r\n                uploading_file: false\r\n            };\r\n        case UPLOAD_ANIME_LIST_MAL_XML:\r\n        case UPLOAD_MANGA_LIST_MAL_XML:\r\n            return {\r\n                ...state,\r\n                uploading_file: false\r\n            };\r\n        case USER_INFO_LOADING:\r\n            return {\r\n                ...state,\r\n                user_info_loading: true\r\n            };\r\n        case GET_VISITED_USER_ANIME_HISTORY:\r\n            return {\r\n                ...state,\r\n                user_anime_history: action.payload,\r\n                user_info_loading: false\r\n            };\r\n        case GET_VISITED_USER_MANGA_HISTORY:\r\n            return {\r\n                ...state,\r\n                user_manga_history: action.payload,\r\n                user_info_loading: false\r\n            };\r\n        case GET_ANIME_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                anime_filter_presets: action.payload,\r\n            };\r\n        case GET_MANGA_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                manga_filter_presets: action.payload,\r\n            };\r\n        case GET_EROGE_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                eroge_filter_presets: action.payload,\r\n            };\r\n        case SET_ANIME_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_anime_preset: action.payload,\r\n            };\r\n        case SET_MANGA_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_manga_preset: action.payload,\r\n            };\r\n        case SET_EROGE_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_eroge_preset: action.payload,\r\n            };\r\n        case GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES:\r\n            return {\r\n                ...state,\r\n                user_anime_entry_statuses: action.payload,\r\n            };\r\n        case UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES:\r\n            let current_statuses = {};\r\n            if (typeof action.payload === 'object' && action.payload !== null) {\r\n                Object.assign(current_statuses, state.user_anime_entry_statuses);\r\n                current_statuses[action.payload[UserAnimeEntry.anime][Anime.id]] = action.payload[UserAnimeEntry.status];\r\n            } else if (!isNaN(action.payload)) {\r\n                delete state.user_anime_entry_statuses[action.payload];\r\n                Object.assign(current_statuses, state.user_anime_entry_statuses);\r\n            }\r\n            return {\r\n                ...state,\r\n                user_anime_entry_statuses: current_statuses,\r\n            };\r\n        case GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES:\r\n            return {\r\n                ...state,\r\n                user_manga_entry_statuses: action.payload,\r\n            };\r\n        case UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES:\r\n            let current_manga_statuses = {};\r\n            if (typeof action.payload === 'object' && action.payload !== null) {\r\n                Object.assign(current_manga_statuses, state.user_manga_entry_statuses);\r\n                current_manga_statuses[action.payload[UserMangaEntry.manga][Manga.id]] = action.payload[UserMangaEntry.status];\r\n            } else if (!isNaN(action.payload)) {\r\n                delete state.user_manga_entry_statuses[action.payload];\r\n                Object.assign(current_manga_statuses, state.user_manga_entry_statuses);\r\n            }\r\n            return {\r\n                ...state,\r\n                user_manga_entry_statuses: current_manga_statuses,\r\n            };\r\n        case GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS:\r\n            let this_user_list = state.user_list;\r\n            this_user_list[UserList.scraping_episode_history_from_mal_progress] = action.payload;\r\n            return {\r\n                ...state,\r\n                user_list: this_user_list,\r\n            };\r\n        case USER_ACHIEVEMENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: true\r\n            };\r\n        case CANCEL_USER_ACHIEVEMENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: {}\r\n            };\r\n        case GET_USER_ACHIEVEMENTS:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: action.payload\r\n            };\r\n        case CLEAR_USER_ACHIEVEMENTS:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: {}\r\n            };\r\n        case AUTH_ERROR_CLEAR_USER_INFO:\r\n            return {\r\n                ...state,\r\n                current_anime_entry: {},\r\n                current_manga_entry: {},\r\n                user_anime_entry_statuses: {},\r\n                user_manga_entry_statuses: {},\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {GET_ERRORS, CLEAN_ERRORS} from \"../actions/types\";\n\n\nconst initialState = {\n    message: null,\n    status: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                message: action.payload.msg,\n                status: action.payload.status\n            };\n        case CLEAN_ERRORS:\n            return {\n                message: null,\n                status: null\n            };\n        default:\n            return state;\n    }\n}\n","import {CLEAR_MESSAGE, CREATE_MESSAGE} from \"../actions/types\";\n\n\nconst initialState = {\n    message: null,\n    type: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_MESSAGE:\n            return {\n                message: action.payload.msg,\n                type: action.payload.type\n            };\n        case CLEAR_MESSAGE:\n            return {\n                message: null,\n                type: null\n            };\n        default:\n            return state;\n    }\n}\n","import {\r\n    MANGA_LOADING,\r\n    GET_MANGA,\r\n    CANCEL_MANGA_LOADING,\r\n    FILTER_MANGA,\r\n    GET_MANGA_DATA,\r\n    GET_ALL_CHARACTERS_FOR_MANGA,\r\n    GET_RELATIONS_FOR_MANGA\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Manga} from \"../models\";\r\n\r\nconst initialState = {\r\n    manga_loading: false,\r\n    manga: {},\r\n    manga_loaded: false,\r\n    manga_data: {},\r\n    manga_data_loaded: {},\r\n    filtered_manga: {},\r\n    filtered_manga_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case MANGA_LOADING:\r\n            return {\r\n                ...state,\r\n                manga_loading: true,\r\n                manga_loaded: false,\r\n                manga_data_loaded: false,\r\n                filtered_manga_loaded: false,\r\n            };\r\n        case CANCEL_MANGA_LOADING:\r\n            return {\r\n                ...state,\r\n                manga_loading: false,\r\n                manga_loaded: false,\r\n                manga_data_loaded: false,\r\n                filtered_manga_loaded: false,\r\n            };\r\n        case GET_MANGA_DATA:\r\n            return {\r\n                ...state,\r\n                manga_loading: false,\r\n                manga_data: action.payload,\r\n                manga_data_loaded: true,\r\n            };\r\n        case GET_MANGA:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                manga: action.payload,\r\n                manga_loading: false,\r\n                manga_loaded: true\r\n            };\r\n        case FILTER_MANGA:\r\n            return {\r\n                ...state,\r\n                filtered_manga: action.payload,\r\n                manga_loading: false,\r\n                filtered_manga_loaded: true\r\n            };\r\n        case GET_ALL_CHARACTERS_FOR_MANGA:\r\n            state.manga[Manga.all_characters] = action.payload;\r\n            return {\r\n                ...state,\r\n                manga: state.manga\r\n            };\r\n        case GET_RELATIONS_FOR_MANGA:\r\n            state.manga[Manga.manga_relations] = action.payload;\r\n            return {\r\n                ...state,\r\n                manga: state.manga\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CHARACTERS_LOADING,\r\n    FILTER_CHARACTERS,\r\n    GET_CHARACTER,\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\n\r\nconst initialState = {\r\n    characters_loading: false,\r\n    character: {},\r\n    characters_loaded: false,\r\n\r\n    filtered_characters: {},\r\n    filtered_characters_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case CHARACTERS_LOADING:\r\n            return {\r\n                ...state,\r\n                characters_loading: true,\r\n                characters_loaded: false,\r\n                filtered_characters_loaded: false,\r\n            };\r\n        case CANCEL_CHARACTERS_LOADING:\r\n            return {\r\n                ...state,\r\n                characters_loading: false,\r\n                characters_loaded: false,\r\n                filtered_characters_loaded: false,\r\n            };\r\n        case GET_CHARACTER:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                character: action.payload,\r\n                characters_loading: false,\r\n                characters_loaded: true\r\n            };\r\n        case FILTER_CHARACTERS:\r\n            return {\r\n                ...state,\r\n                filtered_characters: action.payload,\r\n                characters_loading: false,\r\n                filtered_characters_loaded: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CANCEL_EROGE_LOADING,\r\n    EROGE_LOADING,\r\n    FILTER_EROGE,\r\n    GET_ANIME_DATA,\r\n    GET_EROGE,\r\n    GET_EROGE_DATA\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\n\r\nconst initialState = {\r\n    eroge_loading: false,\r\n    eroge: {},\r\n    eroge_loaded: false,\r\n\r\n    filtered_eroge: {},\r\n    filtered_eroge_loaded: false,\r\n\r\n    eroge_data: {},\r\n    eroge_data_statistics: {},\r\n    eroge_data_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case EROGE_LOADING:\r\n            return {\r\n                ...state,\r\n                eroge_loading: true,\r\n                eroge_loaded: false,\r\n                filtered_eroge_loaded: false,\r\n            };\r\n        case CANCEL_EROGE_LOADING:\r\n            return {\r\n                ...state,\r\n                eroge_loading: false,\r\n                eroge_loaded: false,\r\n                filtered_eroge_loaded: false,\r\n            };\r\n        case GET_EROGE:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                eroge: action.payload,\r\n                eroge_loading: false,\r\n                eroge_loaded: true\r\n            };\r\n        case FILTER_EROGE:\r\n            return {\r\n                ...state,\r\n                filtered_eroge: action.payload,\r\n                eroge_loading: false,\r\n                filtered_eroge_loaded: true\r\n            };\r\n        case GET_EROGE_DATA:\r\n            return {\r\n                ...state,\r\n                eroge_loading: false,\r\n                eroge_data: action.payload,\r\n                eroge_data_loaded: true,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import cookies from \"./reducers/cookies\";\r\nimport auth from \"./reducers/auth\";\r\nimport users from \"./reducers/users\";\r\nimport errors from \"./reducers/errors\";\r\nimport success from \"./reducers/success\";\r\nimport anime from \"./reducers/anime\";\r\nimport manga from \"./reducers/manga\";\r\nimport characters from \"./reducers/characters\";\r\nimport eroge from \"./reducers/eroge\";\r\n\r\n// export const CYBER_GENESIS_URL = 'http://127.0.0.1:8000';\r\nexport const CYBER_GENESIS_URL = 'https://4e4b30997f77.eu.ngrok.io';\r\n\r\nexport const BROWSE_ANIME_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_MANGA_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_CHARACTERS_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_EROGE_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_PEOPLE_ITEMS_PER_PAGE = 100;\r\n\r\n\r\nexport const store_reducers = {\r\n    cookies: 'cookies',\r\n    auth: 'auth',\r\n    users: 'users',\r\n    errors: 'errors',\r\n    success: 'success',\r\n    anime: 'anime',\r\n    manga: 'manga',\r\n    characters: 'characters',\r\n    eroge: 'eroge',\r\n};\r\n\r\nexport const store_reducer_users = {\r\n    all_users: 'all_users',\r\n    users_loading: 'users_loading',\r\n    all_users_loaded: 'all_users_loaded',\r\n    entry_loading: 'entry_loading',\r\n    user_anime_entry: 'user_anime_entry',\r\n    user_anime_entry_loaded: 'user_anime_entry_loaded',\r\n    user_manga_entry: 'user_manga_entry',\r\n    user_manga_entry_loaded: 'user_manga_entry_loaded',\r\n    uploading_file: 'uploading_file',\r\n};\r\n\r\nexport const store_reducer_cookies = {\r\n    show_filters: 'show_filters',\r\n    anime_browse_filters: 'anime_browse_filters',\r\n    anime_season_filters: 'anime_season_filters',\r\n    anime_list_filters: 'anime_list_filters',\r\n    manga_browse_filters: 'manga_browse_filters',\r\n    manga_season_filters: 'manga_season_filters',\r\n    manga_list_filters: 'manga_list_filters',\r\n    characters_filters: 'characters_filters',\r\n    eroge_browse_filters: 'eroge_browse_filters',\r\n};\r\n\r\n// Content Branches\r\nexport const BRANCH_ANIME = 'Anime';\r\nexport const BRANCH_MANGA = 'Manga';\r\nexport const BRANCH_EROGE = 'Eroge';\r\nexport const BRANCH_PEOPLE = 'People';\r\nexport const BRANCH_CHARACTERS = 'Characters';\r\n\r\n// Filter Types\r\nexport const TYPE_BROWSE = 'Browse';\r\nexport const TYPE_LIST = 'List';\r\nexport const TYPE_SEASON = 'Season';\r\n\r\n// Tab titles\r\nexport const CYBER_GENESIS_TAB_NAME = 'Cyber Genesis';\r\nexport const PROFILE_TAB_NAME = 'Profile';\r\nexport const ANIME_TAB_NAME = 'Anime';\r\nexport const ANIME_BROWSE_TAB_NAME = 'Browse Anime';\r\nexport const MANGA_BROWSE_TAB_NAME = 'Browse Manga';\r\nexport const EROGE_TAB_NAME = 'Eroge';\r\nexport const EROGE_BROWSE_TAB_NAME = 'Browse Eroge';\r\nexport const PEOPLE_BROWSE_TAB_NAME = 'Browse People';\r\nexport const CHARACTERS_TAB_NAME = 'Characters';\r\nexport const INDUSTRY_TAB_NAME = 'Industry';\r\nexport const CHARACTERS_BROWSE_TAB_NAME = 'Browse Characters';\r\nexport const MANGA_TAB_NAME = 'Manga';\r\nexport const BROWSE_TAB_NAME = 'Browse';\r\nexport const FRANCHISES_TAB_NAME = 'Franchises';\r\nexport const SEASONS_TAB_NAME = 'Seasons';\r\nexport const SETTINGS_TAB_NAME = 'Settings';\r\nexport const NOT_FOUND_404_TAB_NAME = 'Code: 404';\r\nexport const REGISTER_TAB_NAME = 'Register';\r\n\r\n// Colors\r\nexport const COLOR_PRIMARY = '#156BB7';\r\nexport const COLOR_SECONDARY = '#E14ECA';\r\nexport const COLOR_INFO = '#00FFFF';\r\nexport const COLOR_SUCCESS = '#00A057';\r\nexport const COLOR_WARNING = '#D09C00';\r\nexport const COLOR_DANGER = '#FF0000';\r\nexport const COLOR_GRAY = '#7B7B7B';\r\nexport const COLOR_WHITE = '#FFFFFF';\r\n\r\nexport const LANGUAGES = ['Japanese', 'English', 'Russian', 'Portuguese', 'German', 'French', 'Italian', 'Spanish',\r\n    'Chinese', 'Arabic', 'Korean', 'Malay', 'Polish', 'Turkish', 'Swedish', 'Danish', 'Finnish', 'Dutch', 'Norwegian',\r\n    'Bulgarian', 'Greek', 'Hebrew', 'Romanian', 'Thai', 'Vietnamese', 'Czech', 'Slovak', 'Persian', 'Indonesian',\r\n    'Catalan', 'Hungarian'];\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_ANIME_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        anime_on_server__english_sub: false,\r\n        anime_on_server__english_dub: false,\r\n        anime_on_server__japanese_dub: false,\r\n        anime_on_server__japanese_sub: false,\r\n        episodes_range: [0, 53],\r\n        length_range: [0, 61],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        rating_short: [],\r\n        video_quality: [],\r\n        audio_channel: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\nexport const ANIME_ORDERINGS = [\r\n    'members', 'score', 'id', 'type', 'episodes', 'scored_by', 'favorites', 'rating', 'air_start', 'air_end'\r\n];\r\nexport const USER_ANIME_ORDERINGS = [\r\n    'watched_episodes', 'my_score', 'times_watched', 'priority', 'start_date', 'finish_date'\r\n];\r\nexport const ANIME_TYPES = ['TV', 'Movie', 'OVA', 'Special', 'Music', 'ONA'];\r\nexport const ANIME_STATUSES = ['Finished Airing', 'Currently Airing', 'Not yet aired'];\r\nexport const ANIME_RATING_SHORT = ['G', 'PG-C', 'PG-13', 'R', 'R+', 'Rx'];\r\nexport const ANIME_VIDEO_QUALITIES = ['2160p', '1080p', '720p', '580p', '480p', '360p', '240p'];\r\nexport const USER_ANIME_STATUSES_ARRAY = ['Watching', 'Completed', 'On Hold', 'Dropped', 'Plan to Watch'];\r\nexport const USER_MANGA_STATUSES_ARRAY = ['Reading', 'Completed', 'On Hold', 'Dropped', 'Plan to Read'];\r\nexport const ANIME_AUDIO_CHANNELS = ['2.0', '5.1'];\r\nexport const ANIME_GENRES = [\r\n    'Comedy', 'Drama', 'Romance', 'School', 'Slice of Life', 'Adventure', 'Ecchi', 'Fantasy', 'Magic', 'Mystery',\r\n    'Shoujo Ai', 'Action', 'Mecha', 'Military', 'Police', 'Sci-Fi', 'Parody', 'Shounen', 'Super Power', 'Supernatural',\r\n    'Vampire', 'Seinen', 'Shoujo', 'Historical', 'Samurai', 'Harem', 'Psychological', 'Shounen Ai', 'Space', 'Josei',\r\n    'Dementia', 'Thriller', 'Sports', 'Game', 'Music', 'Horror', 'Kids', 'Martial Arts', 'Hentai', 'Demons', 'Cars',\r\n    'Yaoi', 'Yuri'\r\n].sort();\r\nexport const USER_ANIME_STATUSES = {\r\n    watching: 'Watching',\r\n    completed: 'Completed',\r\n    on_hold: 'On Hold',\r\n    dropped: 'Dropped',\r\n    plan_to_watch: 'Plan to Watch',\r\n};\r\nexport const USER_MANGA_STATUSES = {\r\n    reading: 'Reading',\r\n    completed: 'Completed',\r\n    on_hold: 'On Hold',\r\n    dropped: 'Dropped',\r\n    plan_to_read: 'Plan to Read',\r\n};\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_MANGA_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        volumes_range: [0, 53],\r\n        chapters_range: [0, 53],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\nexport const MANGA_ORDERINGS = [\r\n    'members', 'score', 'id', 'type', 'volumes', 'chapters', 'scored_by', 'favorites', 'air_start', 'air_end'\r\n];\r\nexport const USER_MANGA_ORDERINGS = [\r\n    'read_volumes', 'read_chapters', 'my_score', 'times_read', 'start_date', 'finish_date'\r\n];\r\nexport const MANGA_TYPES = ['Manga', 'Manhwa', 'Novel', 'Doujinshi', 'One-shot', 'Manhua', 'OEL', 'LightNovel'];\r\nexport const MANGA_STATUSES = ['Publishing', 'Finished', 'Not yet published', 'Discontinued', 'On Hiatus'];\r\nexport const MANGA_GENRES = [\r\n    'Fantasy', 'Sci-Fi', 'Comedy', 'Drama', 'Romance', 'School', 'Slice of Life', 'Josei', 'Hentai', 'Doujinshi',\r\n    'Yaoi', 'Historical', 'Shoujo Ai', 'Shoujo', 'Supernatural', 'Seinen', 'Shounen', 'Shounen Ai', 'Action',\r\n    'Adventure', 'Ecchi', 'Harem', 'Mystery', 'Vampire', 'Gender Bender', 'Magic', 'Military', 'Psychological',\r\n    'Demons', 'Horror', 'Martial Arts', 'Game', 'Thriller', 'Sports', 'Yuri', 'Parody', 'Space', 'Super Power',\r\n    'Mecha', 'Kids', 'Police', 'Samurai', 'Music', 'Dementia', 'Cars'\r\n].sort();\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_EROGE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        type: [],\r\n        downloaded: '',\r\n        platforms: [],\r\n        language: [],\r\n        censorship: [],\r\n        tags: [],\r\n        ordering: '-date_added',\r\n    };\r\n}\r\nexport const EROGE_ORDERINGS = ['rating', 'rated_by', 'size', 'date_added'];\r\nexport const EROGE_TYPES = ['Adventure', 'Visual Novel', 'RPG', 'Puzzle', 'Simulation'];\r\nexport const EROGE_PLATFORMS = ['Android', 'Windows'];\r\nexport const EROGE_CENSORSHIPS = ['Censored', 'Uncensored', 'Mosaic'];\r\nexport const EROGE_LANGUAGES = ['English', 'Japanese'];\r\nexport const EROGE_TAGS = [\r\n    '3D', 'Female Protagonist', 'Animated', 'Futanari', 'Incest', 'Corruption', 'Harem', 'BDSM', 'Big Breasts', 'Milf',\r\n    'Bestiality', 'Romance', 'Pregnancy', 'Male Protagonist', 'Group Sex', 'School', 'NTR', 'Mind Control', 'Femdom',\r\n    'Exhibitionism', 'Yuri', 'Fantasy', 'Blackmail', 'Tentacles', 'Rape', 'Urination', 'Voyeurism', 'Witches',\r\n    'Seduction', 'Peeping', 'Hypnosis', 'Prostitution', 'Gangbang', 'Bukkake', 'Dark Skin', 'Voyeur', 'Netori', 'Touch',\r\n    'Paizuri', 'Footjob', 'Parody', 'Combat', 'Defloration', 'Cunnilingus', 'Masturbation', 'Tiny Breasts', 'Blow Job',\r\n    'Big Boobs', 'Nukige', 'Stripping'\r\n];\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_CHARACTERS_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\nexport const CHARACTERS_ORDERINGS = ['favorites', 'id'];\r\n\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_PEOPLE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\nexport const PEOPLE_ORDERINGS = ['favorites', 'id', 'birthday'];\r\n\r\n\r\nexport function getPriorityLabel(priority) {\r\n    switch (priority) {\r\n        case 0:\r\n            return 'Very Low';\r\n        case 1:\r\n            return 'Low';\r\n        case 2:\r\n            return 'Medium';\r\n        case 3:\r\n            return 'High';\r\n        case 4:\r\n            return 'Very High';\r\n        default:\r\n            return 'Very Low'\r\n    }\r\n}\r\n","import {CYBER_GENESIS_URL} from \"../globals\";\r\n\r\nexport const BASE_URL = CYBER_GENESIS_URL;\r\n\r\n\r\n// AUTH\r\nexport const API_AUTH_USER = `${BASE_URL}/api/auth/user`;\r\nexport const API_LOGIN = `${BASE_URL}/api/auth/login`;\r\nexport const API_REGISTER = `${BASE_URL}/api/auth/register`;\r\nexport const API_LOGOUT = `${BASE_URL}/api/auth/logout/`;\r\nexport function API_GET_USER(id) {\r\n    return `${BASE_URL}/api/users-api/${id}/`;\r\n}\r\n\r\n// USERS\r\nexport const API_GET_ALL_USERS = `${BASE_URL}/api/users-api/`;\r\nexport const API_USER_ANIME_FILTERS_PRESET = `${BASE_URL}/api/anime-filter-preset/`;\r\nexport const API_USER_MANGA_FILTERS_PRESET = `${BASE_URL}/api/manga-filter-preset/`;\r\nexport const API_USER_EROGE_FILTERS_PRESET = `${BASE_URL}/api/eroge-filter-preset/`;\r\nexport const API_CHANGE_USER_PROFILE_IMAGE = `${BASE_URL}/api/profile/change_profile_image/`;\r\nexport const API_IMPORT_MAL_XML_FOR_ANIME_LIST = `${BASE_URL}/api/user-list/upload_anime_list_mal_xml_file/`;\r\nexport const API_IMPORT_MAL_XML_FOR_MANGA_LIST = `${BASE_URL}/api/user-list/upload_manga_list_mal_xml_file/`;\r\nexport const API_EDIT_USER_BIO = `${BASE_URL}/api/profile/edit_bio/`;\r\nexport const API_EDIT_USER_ABOUT_ME_BBCODE = `${BASE_URL}/api/profile/edit_about_me_bbcode/`;\r\nexport const API_EDIT_USER_ABOUT_ME_BACKGROUND = `${BASE_URL}/api/profile/edit_about_me_background/`;\r\nexport const API_SCRAPE_EPISODE_HISTORY_FROM_MAL = `${BASE_URL}/api/user-list/scrape_and_update_user_episode_history_from_mal/`;\r\nexport const API_CHANGE_CYBER_SOUND_STATUS = `${BASE_URL}/api/profile/change_cyber_sound_status/`;\r\nexport const API_USER_ANIME_ENTRY_NOID = `${BASE_URL}/api/anime-entry/`;\r\nexport const API_USER_MANGA_ENTRY_NOID = `${BASE_URL}/api/manga-entry/`;\r\nexport const API_USER_ANIME_ENTRY_STATUSES = `${BASE_URL}/api/user-list/user_anime_statuses/`;\r\nexport const API_USER_MANGA_ENTRY_STATUSES = `${BASE_URL}/api/user-list/user_manga_statuses/`;\r\nexport const API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS = `${BASE_URL}/api/user-list/get_user_episode_history_scrape_progress`;\r\nexport const API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES = `${BASE_URL}/api/anime-entry/fix_user_start_and_finished_date`;\r\nexport const API_SET_PROFILE_TO_PRIVATE = `${BASE_URL}/api/profile/set_profile_to_private`;\r\nexport const API_SET_PROFILE_TO_PUBLIC = `${BASE_URL}/api/profile/set_profile_to_public`;\r\nexport const API_SET_ANIME_LIST_TO_PRIVATE = `${BASE_URL}/api/profile/set_anime_list_to_private`;\r\nexport const API_SET_ANIME_LIST_TO_PUBLIC = `${BASE_URL}/api/profile/set_anime_list_to_public`;\r\nexport const API_SET_ANIME_HISTORY_TO_PRIVATE = `${BASE_URL}/api/profile/set_anime_history_to_private`;\r\nexport const API_SET_ANIME_HISTORY_TO_PUBLIC = `${BASE_URL}/api/profile/set_anime_history_to_public`;\r\nexport const API_SET_MANGA_LIST_TO_PRIVATE = `${BASE_URL}/api/profile/set_manga_list_to_private`;\r\nexport const API_SET_MANGA_LIST_TO_PUBLIC = `${BASE_URL}/api/profile/set_manga_list_to_public`;\r\nexport const API_SET_MANGA_HISTORY_TO_PRIVATE = `${BASE_URL}/api/profile/set_manga_history_to_private`;\r\nexport const API_SET_MANGA_HISTORY_TO_PUBLIC = `${BASE_URL}/api/profile/set_manga_history_to_public`;\r\nexport function API_ADD_TO_FAVORITES(branch) {\r\n    return `${BASE_URL}/api/profile/${branch.toLowerCase()}/add_to_favorites/`;\r\n}\r\nexport function API_REMOVE_FROM_FAVORITES(branch) {\r\n    return `${BASE_URL}/api/profile/${branch.toLowerCase()}/remove_from_favorites/`;\r\n}\r\nexport function API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/anime-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/manga-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/eroge-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_ANIME_ENTRY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/`;\r\n}\r\nexport function API_USER_ANIME_UPDATE_EPISODE(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/update_anime_episode/`;\r\n}\r\nexport function API_USER_MANGA_UPDATE_VOLUME(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/update_manga_volume/`;\r\n}\r\nexport function API_USER_MANGA_UPDATE_CHAPTER(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/update_manga_chapter/`;\r\n}\r\nexport function API_DELETE_ANIME_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/delete_anime_history_entry/`;\r\n}\r\nexport function API_DELETE_MANGA_VOLUME_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/delete_manga_history_volume_entry/`;\r\n}\r\nexport function API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/delete_manga_history_chapter_entry/`;\r\n}\r\nexport function API_USER_MANGA_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/`;\r\n}\r\nexport function API_UPDATE_AND_GET_USER_ANIME_STATISTICS(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/update_anime_statistics/`;\r\n}\r\nexport function API_GET_USER_LIST(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/`;\r\n}\r\nexport function API_UPDATE_USER_LIST(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/update_user_list/`;\r\n}\r\nexport function API_GET_VISITED_USER_ANIME_HISTORY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/get_visited_user_anime_history/`;\r\n}\r\nexport function API_GET_VISITED_USER_MANGA_HISTORY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/get_visited_user_manga_history/`;\r\n}\r\nexport function API_GET_USER_ACHIEVEMENTS(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/get_user_achievements/`;\r\n}\r\n\r\n// ANIME\r\nexport const API_GET_ANIME_DATA = `${BASE_URL}/api/anime-data-api/`;\r\nexport const API_GET_ANIME_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/anime-data-api/anime_home`;\r\nexport const API_GET_ANIME_DATA_WITH_STATISTICS = `${BASE_URL}/api/anime-data-api/statistics/`;\r\nexport const API_GET_ANIME_ACHIEVEMENT_THRESHOLDS = `${BASE_URL}/api/anime-data-api/achievement_thresholds/`;\r\nexport const API_FILTER_ANIME = `${BASE_URL}/api/anime-api/`;\r\nexport const API_GET_ANIME_SEARCHABLE_TITLES = `${BASE_URL}/api/anime-api/searchable_titles/`;\r\nexport function API_GET_ONE_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}`;\r\n}\r\nexport function API_GET_ALL_CHARACTERS_FOR_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/get_all_characters_for_anime`;\r\n}\r\nexport function API_GET_RELATIONS_FOR_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/get_relations_for_anime`;\r\n}\r\nexport function API_GET_ANIME_FRANCHISE(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/franchise`;\r\n}\r\n\r\n// MANGA\r\nexport const API_GET_MANGA_DATA = `${BASE_URL}/api/manga-data-api/`;\r\nexport const API_GET_MANGA_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/manga-data-api/manga_home`;\r\nexport const API_FILTER_MANGA = `${BASE_URL}/api/manga-api/`;\r\nexport function API_GET_ONE_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}`;\r\n}\r\nexport function API_GET_ALL_CHARACTERS_FOR_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}/get_all_characters_for_manga`;\r\n}\r\nexport function API_GET_RELATIONS_FOR_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}/get_relations_for_manga`;\r\n}\r\n\r\n// CHARACTERS\r\nexport const API_FILTER_CHARACTERS = `${BASE_URL}/api/characters-api/`;\r\nexport function API_GET_ONE_CHARACTER(id) {\r\n    return `${BASE_URL}/api/characters-api/${id}`;\r\n}\r\n\r\n// PEOPLE\r\nexport const API_FILTER_PEOPLE = `${BASE_URL}/api/people/`;\r\nexport function API_GET_ONE_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}`;\r\n}\r\nexport function API_GET_VOICE_ACTOR_ROLES_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/voice_actor_roles`;\r\n}\r\nexport function API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/anime_staff_positions`;\r\n}\r\nexport function API_GET_PUBLISHED_MANGA_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/published_manga`;\r\n}\r\n\r\n// EROGE\r\nexport const API_FILTER_EROGE = `${BASE_URL}/api/eroge-api/`;\r\nexport const API_GET_EROGE_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/eroge-data-api/eroge_home`;\r\nexport function API_GET_ONE_EROGE(id) {\r\n    return `${BASE_URL}/api/eroge-api/${id}`;\r\n}\r\n\r\n// REQUIEM\r\nexport const API_REQUIEM_GET_STORAGE_INFO = `${BASE_URL}/api/requiem-api/get_storage_info/`;\r\nexport const API_ADD_ANIME_TO_SERVER = `${BASE_URL}/api/anime-server-api/`;\r\nexport const API_GET_NEWS = `${BASE_URL}/api/news-api/`;\r\nexport function API_UPDATE_ANIME_TO_SERVER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/`;\r\n}\r\nexport function API_OPEN_ANIME_FOLDER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/open_anime_folder/`;\r\n}\r\nexport function API_OPEN_EROGE_FOLDER(id) {\r\n    return `${BASE_URL}/api/eroge-api/${id}/open_eroge_folder/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_ANIME_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_anime_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_MANGA_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_manga_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_CHARACTER_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_character_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_PERSON_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_person_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_EROGE_HENTAIGAMER(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_eroge_hentaigamer/`;\r\n}\r\nexport function API_REQUIEM_DOWNLOAD_ANIME_TORRENT(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/download_torrent/`;\r\n}\r\nexport function API_REQUIEM_GET_ANIME_TORRENT_PROGRESS(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/get_torrent_progress/`;\r\n}\r\nexport function API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/delete_anime_server_info_and_torrent/`;\r\n}\r\nexport function API_REQUIEM_GET_TORRENT_PROGRESS(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/get_torrent_progress/`;\r\n}\r\n\r\n// INDUSTRY\r\nexport const API_GET_INDUSTRY_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/industry-data/industry_home`;\r\n","// COOKIES\r\nimport {API_GET_ANIME_SEARCHABLE_TITLES, API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON} from \"./api_urls\";\r\n\r\nexport const SET_ANIME_FILTERS = 'SET_ANIME_FILTERS';\r\nexport const SET_MANGA_FILTERS = 'SET_MANGA_FILTERS';\r\nexport const SET_CHARACTERS_FILTERS = 'SET_CHARACTERS_FILTERS';\r\nexport const SET_PEOPLE_FILTERS = 'SET_PEOPLE_FILTERS';\r\nexport const SET_EROGE_FILTERS = 'SET_EROGE_FILTERS';\r\nexport const SET_COOKIE_SHOW_FILTERS = 'SET_COOKIE_SHOW_FILTERS';\r\n\r\n\r\nexport const SET_SELECTED_SEASON = 'SET_SELECTED_SEASON';\r\nexport const CLEAR_SELECTED_SEASON = 'CLEAR_SELECTED_SEASON';\r\n\r\n// AUTH\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const AUTH_USER = 'AUTH_USER';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\n\r\n// REQUIEM\r\nexport const GET_REQUIEM = \"GET_REQUIEM\";\r\nexport const REQUIEM_LOADING = \"REQUIEM_LOADING\";\r\nexport const GET_REPORTS = \"GET_REPORTS\";\r\nexport const REPORTS_LOADING = \"REPORTS_LOADING\";\r\nexport const GET_NEWS = \"GET_NEWS\";\r\nexport const NEWS_LOADING = \"NEWS_LOADING\";\r\nexport const DOWNLOAD_TORRENT = \"DOWNLOAD_TORRENT\";\r\nexport const GET_TORRENT_PROGRESS = \"GET_TORRENT_PROGRESS\";\r\nexport const GET_ACTIVE_TORRENTS_PROGRESS = \"GET_ACTIVE_TORRENTS_PROGRESS\";\r\nexport const CLEAR_ANIME_TORRENT_PROGRESS = \"CLEAR_ANIME_TORRENT_PROGRESS\";\r\nexport const GET_STORAGE_INFO = \"GET_STORAGE_INFO\";\r\nexport const GET_TARGETS = \"GET_TARGETS\";\r\n\r\n// USERS\r\nexport const USERS_LOADING = 'USERS_LOADING';\r\nexport const USER_LIST_LOADING = 'USER_LIST_LOADING';\r\nexport const CANCEL_USER_LIST_LOADING = 'CANCEL_USER_LIST_LOADING';\r\nexport const GET_USER = 'GET_USER';\r\nexport const GET_ALL_USERS = 'GET_ALL_USERS';\r\nexport const UPDATE_USER_PROFILE_IMAGE = 'UPDATE_USER_PROFILE_IMAGE';\r\nexport const USER_ENTRY_LOADING = 'USER_ENTRY_LOADING';\r\nexport const FINISH_LOADING_USER_ENTRY = 'FINISH_LOADING_USER_ENTRY';\r\nexport const GET_USER_ANIME_ENTRY = 'GET_USER_ANIME_ENTRY';\r\nexport const AUTH_ERROR_CLEAR_USER_INFO = 'AUTH_ERROR_CLEAR_USER_INFO';\r\nexport const CLEAR_USER_ANIME_ENTRY = 'CLEAR_USER_ANIME_ENTRY';\r\nexport const GET_USER_MANGA_ENTRY = 'GET_USER_MANGA_ENTRY';\r\nexport const CLEAR_USER_MANGA_ENTRY = 'CLEAR_USER_MANGA_ENTRY';\r\nexport const GET_USER_LIST = 'GET_USER_LIST';\r\nexport const UPDATE_USER_LIST = 'UPDATE_USER_LIST';\r\nexport const USER_STATISTICS_LOADING = 'USER_STATISTICS_LOADING';\r\nexport const UPDATE_USER_ANIME_STATISTICS = 'UPDATE_USER_ANIME_STATISTICS';\r\nexport const UPLOADING_FILE = 'UPLOADING_FILE';\r\nexport const FINISH_UPLOADING_FILE = 'FINISH_UPLOADING_FILE';\r\nexport const UPLOAD_ANIME_LIST_MAL_XML = 'UPLOAD_ANIME_LIST_MAL_XML';\r\nexport const UPLOAD_MANGA_LIST_MAL_XML = 'UPLOAD_MANGA_LIST_MAL_XML';\r\nexport const USER_INFO_LOADING = 'USER_INFO_LOADING';\r\nexport const USER_ACHIEVEMENTS_LOADING = 'USER_ACHIEVEMENTS_LOADING';\r\nexport const CANCEL_USER_ACHIEVEMENTS_LOADING = 'CANCEL_USER_ACHIEVEMENTS_LOADING';\r\nexport const GET_USER_ACHIEVEMENTS = 'GET_USER_ACHIEVEMENTS';\r\nexport const CLEAR_USER_ACHIEVEMENTS = 'CLEAR_USER_ACHIEVEMENTS';\r\nexport const GET_VISITED_USER_ANIME_HISTORY = 'GET_VISITED_USER_ANIME_HISTORY';\r\nexport const GET_VISITED_USER_MANGA_HISTORY = 'GET_VISITED_USER_MANGA_HISTORY';\r\nexport const GET_ANIME_FILTER_PRESETS = 'GET_ANIME_FILTER_PRESETS';\r\nexport const GET_MANGA_FILTER_PRESETS = 'GET_MANGA_FILTER_PRESETS';\r\nexport const GET_EROGE_FILTER_PRESETS = 'GET_EROGE_FILTER_PRESETS';\r\nexport const SET_ANIME_PRESET = 'SET_ANIME_PRESET';\r\nexport const SET_MANGA_PRESET = 'SET_MANGA_PRESET';\r\nexport const SET_EROGE_PRESET = 'SET_EROGE_PRESET';\r\nexport const GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES = 'GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES';\r\nexport const GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES = 'GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES';\r\nexport const UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES = 'UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES';\r\nexport const UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES = 'UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES';\r\nexport const GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS = 'GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS';\r\nexport const GET_PROFILE_PRIVACY_SETTINGS = 'GET_PROFILE_PRIVACY_SETTINGS';\r\n\r\n// ANIME\r\nexport const GET_ANIME_DATA = 'GET_ANIME_DATA';\r\nexport const GET_ANIME_DATA_STATISTICS = 'GET_ANIME_DATA_STATISTICS';\r\nexport const GET_ANIME_ACHIEVEMENT_THRESHOLDS = 'GET_ANIME_ACHIEVEMENT_THRESHOLDS';\r\nexport const GET_ANIME = 'GET_ANIME';\r\nexport const GET_ALL_CHARACTERS_FOR_ANIME = 'GET_ALL_CHARACTERS_FOR_ANIME';\r\nexport const GET_RELATIONS_FOR_ANIME = 'GET_RELATIONS_FOR_ANIME';\r\nexport const FILTER_ANIME = 'FILTER_ANIME';\r\nexport const ANIME_LOADING = 'ANIME_LOADING';\r\nexport const CANCEL_ANIME_LOADING = 'CANCEL_ANIME_LOADING';\r\nexport const ANIME_FRANCHISE_LOADING = 'ANIME_FRANCHISE_LOADING';\r\nexport const GET_CURRENT_ANIME_FRANCHISE = 'GET_CURRENT_ANIME_FRANCHISE';\r\nexport const GET_ANIME_SEARCHABLE_TITLES = 'GET_ANIME_SEARCHABLE_TITLES';\r\n\r\n// MANGA\r\nexport const GET_MANGA_DATA = 'GET_MANGA_DATA';\r\nexport const GET_MANGA = 'GET_MANGA';\r\nexport const GET_ALL_CHARACTERS_FOR_MANGA = 'GET_ALL_CHARACTERS_FOR_MANGA';\r\nexport const GET_RELATIONS_FOR_MANGA = 'GET_RELATIONS_FOR_MANGA';\r\nexport const FILTER_MANGA = 'FILTER_MANGA';\r\nexport const MANGA_LOADING = 'MANGA_LOADING';\r\nexport const CANCEL_MANGA_LOADING = 'CANCEL_MANGA_LOADING';\r\n\r\n// CHARACTERS\r\nexport const GET_CHARACTER = 'GET_CHARACTER';\r\nexport const FILTER_CHARACTERS = 'FILTER_CHARACTERS';\r\nexport const CHARACTERS_LOADING = 'CHARACTERS_LOADING';\r\nexport const CANCEL_CHARACTERS_LOADING = 'CANCEL_CHARACTERS_LOADING';\r\n\r\n// PEOPLE\r\nexport const GET_PERSON = 'GET_PERSON';\r\nexport const GET_PEOPLE_DATA = 'GET_PEOPLE_DATA';\r\nexport const GET_VOICE_ACTOR_ROLES_FOR_PERSON = 'GET_VOICE_ACTOR_ROLES_FOR_PERSON';\r\nexport const GET_ANIME_STAFF_POSITIONS_FOR_PERSON = 'GET_ANIME_STAFF_POSITIONS_FOR_PERSON';\r\nexport const GET_PUBLISHED_MANGA_FOR_PERSON = 'GET_PUBLISHED_MANGA_FOR_PERSON';\r\nexport const FILTER_PEOPLE = 'FILTER_PEOPLE';\r\nexport const PEOPLE_LOADING = 'PEOPLE_LOADING';\r\nexport const CANCEL_PEOPLE_LOADING = 'CANCEL_PEOPLE_LOADING';\r\n\r\n// EROGE\r\nexport const GET_EROGE = 'GET_EROGE';\r\nexport const GET_EROGE_DATA = 'GET_EROGE_DATA';\r\nexport const FILTER_EROGE = 'FILTER_EROGE';\r\nexport const EROGE_LOADING = 'EROGE_LOADING';\r\nexport const CANCEL_EROGE_LOADING = 'CANCEL_EROGE_LOADING';\r\n\r\n// ERRORS\r\nexport const CREATE_MESSAGE = 'CREATE_MESSAGE';\r\nexport const CLEAR_MESSAGE = 'CLEAR_MESSAGE';\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAN_ERRORS = 'CLEAN_ERRORS';\r\n\r\n// BRANCHES\r\nexport const SET_BROWSE_BRANCH = 'SET_BROWSE_BRANCH';\r\nexport const SET_DISPLAY_BRANCH = 'SET_DISPLAY_BRANCH';\r\nexport const SET_TITLE_BRANCH = 'SET_TITLE_BRANCH';\r\n\r\n// INDUSTRY\r\nexport const GET_INDUSTRY_DATA = 'GET_INDUSTRY_DATA';\r\nexport const INDUSTRY_DATA_LOADING = 'INDUSTRY_DATA_LOADING';\r\n","import {\r\n    ANIME_LOADING,\r\n    GET_ANIME,\r\n    CANCEL_ANIME_LOADING,\r\n    FILTER_ANIME,\r\n    GET_ANIME_DATA,\r\n    GET_ALL_CHARACTERS_FOR_ANIME,\r\n    GET_RELATIONS_FOR_ANIME,\r\n    GET_CURRENT_ANIME_FRANCHISE,\r\n    ANIME_FRANCHISE_LOADING,\r\n    GET_ANIME_DATA_STATISTICS, GET_ANIME_SEARCHABLE_TITLES, GET_ANIME_ACHIEVEMENT_THRESHOLDS\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Anime} from \"../models\";\r\n\r\nconst initialState = {\r\n    searchable_titles: [],\r\n\r\n    anime_loading: false,\r\n    anime: {},\r\n    anime_loaded: false,\r\n\r\n    anime_data: {},\r\n    anime_data_statistics: {},\r\n    anime_data_loaded: false,\r\n\r\n    filtered_anime: {},\r\n    filtered_anime_loaded: false,\r\n\r\n    anime_franchise_loading: false,\r\n    anime_franchise: {}\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case ANIME_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_loading: true,\r\n                anime_loaded: false,\r\n                anime_data_loaded: false,\r\n                filtered_anime_loaded: false,\r\n            };\r\n        case CANCEL_ANIME_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_loaded: false,\r\n                anime_data_loaded: false,\r\n                filtered_anime_loaded: false,\r\n            };\r\n        case GET_ANIME_SEARCHABLE_TITLES:\r\n            return {\r\n                ...state,\r\n                searchable_titles: action.payload,\r\n            };\r\n        case GET_ANIME_DATA:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_data: action.payload,\r\n                anime_data_loaded: true,\r\n            };\r\n        case GET_ANIME_DATA_STATISTICS:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_data_statistics: action.payload['anime_statistics'],\r\n                anime_data_loaded: true,\r\n            };\r\n        case GET_ANIME_ACHIEVEMENT_THRESHOLDS:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_achievement_thresholds: action.payload,\r\n            };\r\n        case GET_ANIME:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                anime: action.payload,\r\n                anime_loading: false,\r\n                anime_loaded: true\r\n            };\r\n        case FILTER_ANIME:\r\n            return {\r\n                ...state,\r\n                filtered_anime: action.payload,\r\n                anime_loading: false,\r\n                filtered_anime_loaded: true\r\n            };\r\n        case GET_ALL_CHARACTERS_FOR_ANIME:\r\n            state.anime[Anime.all_characters] = action.payload;\r\n            return {\r\n                ...state,\r\n                anime: state.anime\r\n            };\r\n        case GET_RELATIONS_FOR_ANIME:\r\n            state.anime[Anime.anime_relations] = action.payload;\r\n            return {\r\n                ...state,\r\n                anime: state.anime\r\n            };\r\n        case ANIME_FRANCHISE_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_franchise_loading: true\r\n            };\r\n        case GET_CURRENT_ANIME_FRANCHISE:\r\n            return {\r\n                ...state,\r\n                anime_franchise: action.payload,\r\n                anime_franchise_loading: false\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    GET_REQUIEM,\r\n    REQUIEM_LOADING,\r\n    GET_REPORTS,\r\n    REPORTS_LOADING,\r\n    GET_NEWS,\r\n    NEWS_LOADING,\r\n    GET_TORRENT_PROGRESS,\r\n    GET_ACTIVE_TORRENTS_PROGRESS,\r\n    GET_STORAGE_INFO,\r\n    GET_TARGETS,\r\n    CLEAR_ANIME_TORRENT_PROGRESS\r\n} from '../actions/types'\r\n\r\n\r\nconst initialState = {\r\n    requiem_is_loading: false,\r\n    requiem: {},\r\n\r\n    targets: [],\r\n    reports: {},\r\n    news: {},\r\n    storage: [],\r\n    torrent_progress: [],\r\n    active_torrents: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_REQUIEM:\r\n            return {\r\n                ...state,\r\n                requiem: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_REPORTS:\r\n            return {\r\n                ...state,\r\n                reports: action.payload,\r\n                reports_is_loading: false\r\n            };\r\n        case GET_TARGETS:\r\n            return {\r\n                ...state,\r\n                targets: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_NEWS:\r\n            return {\r\n                ...state,\r\n                news: action.payload,\r\n                news_is_loading: false\r\n            };\r\n        case GET_STORAGE_INFO:\r\n            return {\r\n                ...state,\r\n                storage: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_TORRENT_PROGRESS:\r\n            return {\r\n                ...state,\r\n                torrent_progress: action.payload,\r\n            };\r\n        case GET_ACTIVE_TORRENTS_PROGRESS:\r\n            return {\r\n                ...state,\r\n                active_torrents: action.payload,\r\n            };\r\n        case CLEAR_ANIME_TORRENT_PROGRESS:\r\n            return {\r\n                ...state,\r\n                torrent_progress: [],\r\n            };\r\n        case REQUIEM_LOADING:\r\n            return {\r\n                ...state,\r\n                requiem_is_loading: true\r\n            };\r\n        case REPORTS_LOADING:\r\n            return {\r\n                ...state,\r\n                reports_is_loading: true\r\n            };\r\n        case NEWS_LOADING:\r\n            return {\r\n                ...state,\r\n                news_is_loading: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CREATE_MESSAGE, GET_ERRORS, CLEAN_ERRORS, CLEAR_MESSAGE} from \"./types\";\n\n// CREATE MESSAGE\nexport const createMessage = (msg, type) => {\n    return {\n        type: CREATE_MESSAGE,\n        payload: {msg, type}\n    };\n};\n\n// CLEAR MESSAGE\nexport const clearMessage = () => {\n    return {\n        type: CLEAR_MESSAGE,\n    };\n};\n\n// RETURN ERRORS\nexport const returnErrors = (msg, status) => {\n    return {\n        type: GET_ERRORS,\n        payload: {msg, status}\n    };\n};\n\n// CLEAN ERRORS\nexport const cleanErrors = () => {\n    return {\n        type: CLEAN_ERRORS,\n    };\n};\n","/**\r\n * These filter names must be the same as the field names in the django api function\r\n */\r\nexport class AnimeFilterNames {\r\n    static year = 'year';\r\n    static season = 'season';\r\n    static search = 'search';\r\n    static downloaded = 'downloaded';\r\n    static is_downloading = 'is_downloading';\r\n    static cannot_download = 'cannot_download';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static anime_on_server__english_sub = 'anime_on_server__english_sub';\r\n    static anime_on_server__english_dub = 'anime_on_server__english_dub';\r\n    static anime_on_server__japanese_dub = 'anime_on_server__japanese_dub';\r\n    static anime_on_server__japanese_sub = 'anime_on_server__japanese_sub';\r\n    static type = 'type';\r\n    static status = 'status';\r\n    static rating_short = 'rating_short';\r\n    static genres = 'genres';\r\n    static episodes_range = 'episodes_range';\r\n    static length_range = 'length_range';\r\n    static video_quality = 'video_quality';\r\n    static audio_channel = 'audio_channel';\r\n    static user_exclude = 'user_exclude';\r\n    static ordering = 'ordering';\r\n\r\n    static user_list_pk = 'user_list_pk';\r\n    static user_list_filter = 'user_list_filter';\r\n}\r\n\r\nexport class MangaFilterNames {\r\n    static year = 'year';\r\n    static season = 'season';\r\n    static search = 'search';\r\n    static downloaded = 'downloaded';\r\n    static is_downloading = 'is_downloading';\r\n    static cannot_download = 'cannot_download';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static volumes_range = 'volumes_range';\r\n    static chapters_range = 'chapters_range';\r\n    static genres = 'genres';\r\n    static type = 'type';\r\n    static status = 'status';\r\n    static user_exclude = 'user_exclude';\r\n    static ordering = 'ordering';\r\n\r\n    static user_list_pk = 'user_list_pk';\r\n    static user_list_filter = 'user_list_filter';\r\n}\r\n\r\nexport class ErogeFilterNames {\r\n    static search = 'search';\r\n    static type = 'type';\r\n    static downloaded = 'downloaded';\r\n    static platforms = 'platforms';\r\n    static language = 'language';\r\n    static censorship = 'censorship';\r\n    static tags = 'tags';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class CharactersFilterNames {\r\n    static search = 'search';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class PeopleFilterNames {\r\n    static search = 'search';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class FilterLabels {\r\n    static downloaded = 'Downloaded';\r\n    static is_downloading = 'Downloading';\r\n    static cannot_download = 'Dead';\r\n    static deleted_by_MAL = 'M-DEL';\r\n    static pending_by_MAL = 'M-PEN';\r\n}\r\n\r\nexport class FilterSchema {\r\n    static filter_name = 'name';\r\n    static label = 'label';\r\n    static color = 'color';\r\n    static content = 'content';\r\n    static marks = 'marks';\r\n    static max = 'max';\r\n    static min = 'min';\r\n    static type = 'type';\r\n}\r\n\r\nexport class FilterSchemaType {\r\n    static standard = 'standard';\r\n    static component = 'component';\r\n    static wide = 'wide';\r\n    static slider = 'slider';\r\n}","import {\r\n    SET_ANIME_FILTERS, SET_CHARACTERS_FILTERS,\r\n    SET_COOKIE_SHOW_FILTERS, SET_EROGE_FILTERS,\r\n    SET_MANGA_FILTERS, SET_PEOPLE_FILTERS\r\n} from \"./types\";\r\n\r\n\r\n// SET COOKIE SHOW FILTERS\r\nexport const setCookieShowFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_COOKIE_SHOW_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE ANIME FILTERS\r\nexport const setCookieAnimeFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_ANIME_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE MANGA FILTERS\r\nexport const setCookieMangaFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_MANGA_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE CHARACTERS FILTERS\r\nexport const setCookieCharactersFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_CHARACTERS_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE CHARACTERS FILTERS\r\nexport const setCookiePeopleFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_PEOPLE_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE EROGE FILTERS\r\nexport const setCookieErogeFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_EROGE_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};","import Moment from \"react-moment\";\r\nimport React from \"react\";\r\n\r\nimport moment from 'moment'\r\nimport {CYBER_GENESIS_URL} from \"../globals\";\r\nimport {CDNCoverImages, CoverImages} from \"../models\";\r\n\r\n\r\n/**\r\n * Check if an object is empty.\r\n * @param obj {Object} Object to check\r\n * @returns {boolean} True if the object is empty.\r\n */\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport function isEmpty(obj) {\r\n    if (obj == null) return true;\r\n    if (obj.length > 0) return false;\r\n    if (obj.length === 0) return true;\r\n    if (typeof obj !== \"object\") return true;\r\n    for (let key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n /**\r\n  * Formats the date based on the known info about the date, this is used for titles from MAL\r\n  * some titles only have the year of the date, so only the year will be displayed.\r\n  * @param  {String} date          The actual date.\r\n  * @param  {String} known_date    The known date.\r\n  * @param  {Boolean} str          If the return should be string instead.\r\n  * @return {JSX.Element || String}          Moment.js component or string.\r\n  */\r\nexport function formatContentDateByKnown(date, known_date, str = false) {\r\n    if (!known_date)\r\n        return null;\r\n    if (known_date.indexOf('day') >= 0 && known_date.indexOf('month') && known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('Do MMM YYYY');\r\n        return <Moment format=\"Do MMM YYYY\" date={date}/>;\r\n    } else if (known_date.indexOf('month') >= 0 && known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('MMM YYYY');\r\n        return <Moment format=\"MMM YYYY\" date={date}/>\r\n    }\r\n    else if (known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('YYYY');\r\n        return <Moment format=\"YYYY\" date={date}/>\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * Get cols number for browse titles cards based on window width.\r\n * @returns {number}\r\n */\r\nexport function getBrowseGridListCols() {\r\n    if (window.innerWidth >= 2800)\r\n        return 9;\r\n    if (window.innerWidth >= 2400)\r\n        return 8;\r\n    else if (window.innerWidth >= 1800)\r\n        return 7;\r\n    else if (window.innerWidth >= 1450)\r\n        return 6;\r\n    else if (window.innerWidth >= 1200)\r\n        return 5;\r\n    else if (window.innerWidth >= 980)\r\n        return 4;\r\n    else if (window.innerWidth >= 720)\r\n        return 3;\r\n    return 2\r\n}\r\n\r\n/**\r\n * Parse number of bytes to human readable format.\r\n * @param size {Number}\r\n * @returns {string}\r\n */\r\nexport function formatBytes(size) {\r\n    const terabyte = 1099511627776;\r\n    const gigabyte = 1073741824;\r\n    const megabyte = 1048576;\r\n\r\n    if (size >= 10995116277760)  // More than 10TB\r\n        return `${(size / terabyte).toFixed(1)}TB`;\r\n    else if (size >= 1099511627776)  // More than 1TB\r\n        return `${(size / terabyte).toFixed(2)}TB`;\r\n    else if (size >= 107374182400) // More than 100GB\r\n        return `${Math.ceil(size / gigabyte)}GB`;\r\n    else if (size >= 10737418240) // More than 10GB\r\n        return `${(size / gigabyte).toFixed(1)}GB`;\r\n    else if (size >= 1073741824) // More than 1GB\r\n        return `${(size / gigabyte).toFixed(2)}GB`;\r\n    else  // Less then 1GB\r\n        return `${Math.ceil(size / megabyte)}MB`;\r\n}\r\n\r\n\r\n/**\r\n * Returns a label representation of the season number sent.\r\n * @param season {Number} Season number.\r\n * @returns {string} Season label.\r\n */\r\nexport function getSeasonLabelFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1:\r\n            return 'Spring';\r\n        case 2:\r\n            return 'Summer';\r\n        case 3:\r\n            return 'Fall';\r\n        case 4:\r\n            return 'Winter';\r\n        default:\r\n            return 'Spring';\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * The program sleeps for the X ms provided.\r\n * @param ms {Number} Milliseconds for the program to sleep\r\n */\r\nexport function sleep(ms) {\r\n    let start = new Date().getTime();\r\n    let end = start;\r\n    while (end < start + ms) end = new Date().getTime();\r\n}\r\n\r\n\r\n/**\r\n * Converts a given date from CEST/UTC to local user time\r\n * @param date {Date} Date to convert\r\n * @returns {Date} returns a calculated Date in local user time\r\n */\r\nexport function convertUTCDateToLocalDate(date) {\r\n    let newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);\r\n\r\n    let offset = date.getTimezoneOffset() / 60;\r\n    let hours = date.getHours();\r\n\r\n    newDate.setHours(hours - offset);\r\n\r\n    return newDate;\r\n}\r\n\r\n\r\n/**\r\n * Get a cover picture for a title, prioritise the CDN image, and prioritise them by size.\r\n * @param {array} cdn_cover_images\r\n * @param {array} cover_images\r\n * @param {boolean} thumbnail: If true, try to return the thumbnail image\r\n * @returns {string}\r\n */\r\nexport function getTitleCoverImage(cdn_cover_images=[], cover_images=[], thumbnail=false) {\r\n    let img_url = `${CYBER_GENESIS_URL}/frontend/static/frontend/images/image-not-found.png`;\r\n    const len_cdn_images = cdn_cover_images.length;\r\n    const len_images = cover_images.length;\r\n\r\n    if (len_cdn_images > 0) {\r\n        if (len_cdn_images > 0) {\r\n            let largest = 0;\r\n            for (let x = 0; x < len_cdn_images; x ++) {\r\n                if (cdn_cover_images[x][CDNCoverImages.size] > largest) {\r\n                    largest = cdn_cover_images[x][CDNCoverImages.size];\r\n                    if (thumbnail)\r\n                        img_url = cdn_cover_images[x][CDNCoverImages.thumbnail_url];\r\n                    else\r\n                        img_url = cdn_cover_images[x][CDNCoverImages.image_url];\r\n                }\r\n            }\r\n        }\r\n    } else if (len_images > 0) {\r\n        if (len_images > 0) {\r\n            if (cover_images[len_images - 1][CoverImages.image][0] === '/')\r\n                img_url = `${CYBER_GENESIS_URL}${cover_images[len_images - 1][CoverImages.image]}`;\r\n            else\r\n                img_url = cover_images[len_images - 1][CoverImages.image];\r\n        }\r\n    }\r\n\r\n    return img_url\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} statuses\r\n * @param {Number} title_id\r\n */\r\nexport function isIdInStatuses(statuses, title_id) {\r\n    return statuses.hasOwnProperty(title_id)\r\n}\r\n\r\n\r\n// /**\r\n//  * Checks if a given date is today\r\n//  * @param date\r\n//  * @returns {boolean}\r\n//  */\r\n// export function isToday(date) {\r\n//   const today = new Date();\r\n//   return date.getDate() === today.getDate() &&\r\n//       date.getMonth() === today.getMonth() &&\r\n//       date.getFullYear() === today.getFullYear()\r\n// }\r\n\r\n\r\nconst REFERENCE = moment();\r\nconst TODAY = REFERENCE.clone().startOf('day');\r\nconst YESTERDAY = REFERENCE.clone().subtract(1, 'days').startOf('day');\r\nconst A_WEEK_OLD = REFERENCE.clone().subtract(7, 'days').startOf('day');\r\nconst A_MONTH_OLD = REFERENCE.clone().subtract(30, 'days').startOf('day');\r\nconst SIX_MONTHS_OLD = REFERENCE.clone().subtract(180, 'days').startOf('day');\r\nconst A_YEAR_OLD = REFERENCE.clone().subtract(1, 'years').startOf('years');\r\nconst TWO_YEARS_OLD = REFERENCE.clone().subtract(2, 'years').startOf('years');\r\n\r\nexport function isTimeLessThanAnHourAgo(last_login) {\r\n    const ONE_HOUR = 60 * 60 * 1000; /* ms */\r\n    return ((new Date) - last_login) < ONE_HOUR;\r\n}\r\n\r\nexport function isTimeLessThanSixHoursAgo(last_login) {\r\n    const ONE_HOUR = 60 * 60 * 1000; /* ms */\r\n    return ((new Date) - last_login) < ONE_HOUR * 6;\r\n}\r\n\r\nexport function isToday(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isSame(TODAY, 'd');\r\n}\r\nexport function isYesterday(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isSame(YESTERDAY, 'd');\r\n}\r\nexport function isWithinAWeek(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_WEEK_OLD);\r\n}\r\nexport function isWithinAMonth(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_MONTH_OLD);\r\n}\r\nexport function isWithinSixMonths(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(SIX_MONTHS_OLD);\r\n}\r\nexport function isWithinAYear(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_YEAR_OLD);\r\n}\r\nexport function isMoreThanAYear(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(TWO_YEARS_OLD);\r\n}","import axios from \"axios\";\r\nimport { useAlert  } from 'react-alert'\r\n\r\nimport {\r\n    AUTH_USER,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    GET_USER,\r\n} from \"./types\";\r\nimport {BASE_URL, API_AUTH_USER, API_LOGIN, API_REGISTER, API_LOGOUT, API_GET_USER} from \"./api_urls\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\n\r\n\r\n// GET A SPECIFIC USER\r\nexport const getUser = id => (dispatch, getState) => {\r\n    dispatch({type: USER_LOADING});\r\n    axios\r\n        .get(API_GET_USER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// CHECK TOKEN & LOAD USER (GET LOGGED-IN USER)\r\nexport const authUser = () => (dispatch, getState) => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    axios\r\n        .get(API_AUTH_USER, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: AUTH_USER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n        });\r\n};\r\n\r\n// LOGIN USER\r\nexport const login = (username, password) => dispatch => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // Request Body\r\n    const body = JSON.stringify({username, password});\r\n\r\n    axios\r\n        .post(API_LOGIN, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n// REGISTER USER\r\nexport const register = ({username, password, email}) => dispatch => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // Request Body\r\n    const body = JSON.stringify({username, email, password});\r\n\r\n    axios\r\n        .post(API_REGISTER, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n// LOGOUT USER\r\nexport const logout = () => (dispatch, getState) => {\r\n    axios\r\n        .post(API_LOGOUT, null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// Setup config with token - helper function\r\nexport const tokenConfig = getState => {\r\n    const token = getState().auth.token;\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token)\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    return config;\r\n};\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    GET_ANIME,\r\n    ANIME_LOADING,\r\n    FILTER_ANIME,\r\n    CANCEL_ANIME_LOADING,\r\n    GET_ANIME_DATA,\r\n    GET_ALL_CHARACTERS_FOR_ANIME,\r\n    CHARACTERS_LOADING,\r\n    GET_RELATIONS_FOR_ANIME,\r\n    ANIME_FRANCHISE_LOADING,\r\n    GET_CURRENT_ANIME_FRANCHISE,\r\n    UPDATE_USER_ENTRY_IN_FILTERED_USER_ANIME_ENTRIES,\r\n    GET_ANIME_DATA_STATISTICS,\r\n    GET_ANIME_SEARCHABLE_TITLES, GET_ANIME_ACHIEVEMENT_THRESHOLDS\r\n} from './types'\r\nimport {\r\n    API_FILTER_ANIME,\r\n    API_GET_ALL_CHARACTERS_FOR_ANIME, API_GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n    API_GET_ANIME_DATA,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_ANIME_DATA_WITH_STATISTICS,\r\n    API_GET_ANIME_FRANCHISE,\r\n    API_GET_ANIME_SEARCHABLE_TITLES,\r\n    API_GET_ONE_ANIME,\r\n    API_GET_RELATIONS_FOR_ANIME\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {AnimeFilterNames, MangaFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {setCookieAnimeFilters} from \"./cookies\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {TYPE_BROWSE, TYPE_LIST, TYPE_SEASON, USER_ANIME_ORDERINGS} from \"../globals\";\r\nimport {tokenConfig} from \"./auth\";\r\n\r\n\r\n// GET ANIME DATA\r\nexport const getAnimeData = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ANIME_DATA, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME DATA FOR ANIME HOME PAGE\r\nexport const getAnimeDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME DATA WITH STATISTICS\r\nexport const getAnimeDataWithStatistics = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ANIME_DATA_WITH_STATISTICS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA_STATISTICS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME ACHIEVEMENTS THRESHOLDS\r\nexport const getAnimeAchievementsThresholds = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_ACHIEVEMENT_THRESHOLDS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A ONE ANIME\r\nexport const getAnime = id => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ONE_ANIME(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ALL CHARACTERS FOR ANIME\r\nexport const getAllCharactersForAnime = (id, page) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ALL_CHARACTERS_FOR_ANIME(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_CHARACTERS_FOR_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET RELATIONS FOR ANIME\r\nexport const getRelationsForAnime = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_RELATIONS_FOR_ANIME(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_RELATIONS_FOR_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME SPECIFIC FRANCHISE\r\nexport const getAnimeFranchise = (id) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_FRANCHISE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_FRANCHISE(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CURRENT_ANIME_FRANCHISE,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {})\r\n};\r\n\r\n\r\n// GET ANIME SEARCHABLE TITLES\r\nexport const getAnimeSearchableTitles = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_ANIME_SEARCHABLE_TITLES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_SEARCHABLE_TITLES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {})\r\n};\r\n\r\n\r\n// FILTER ALL ANIME\r\nexport const filterAnime = (page, filters, season, list, loading = true, save_cookie = true) => (dispatch, getState) => {\r\n    if (loading)\r\n        dispatch({type: ANIME_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n    if (season !== undefined && season !== 'undefined' && !isEmpty(season)) {\r\n        config.params = setAnimeSeasonParams(config.params, season);\r\n        page_type = TYPE_SEASON;\r\n    }\r\n    if (list !== undefined && list !== 'undefined' && !isEmpty(list)) {\r\n        config.params = setAnimeListParams(config.params, list);\r\n        page_type = TYPE_LIST;\r\n    } else if (USER_ANIME_ORDERINGS.indexOf(config.params[AnimeFilterNames.ordering].replace('-', '')) > -1)\r\n        config.params[AnimeFilterNames.ordering] = '-members';\r\n\r\n    axios\r\n        .get(API_FILTER_ANIME, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_ANIME,\r\n                payload: res.data\r\n            });\r\n            if (save_cookie && filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieAnimeFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// CANCEL ANIME LOADING\r\nexport const cancelAnimeLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_ANIME_LOADING,\r\n    })\r\n};\r\n\r\n\r\nexport function setAnimeFilterParams(params, filters) {\r\n    if (filters[AnimeFilterNames.search] && typeof filters[AnimeFilterNames.search] == 'string') params[AnimeFilterNames.search] = filters[AnimeFilterNames.search];\r\n    if (filters[AnimeFilterNames.downloaded]) params[AnimeFilterNames.downloaded] = filters[AnimeFilterNames.downloaded];\r\n    if (filters[AnimeFilterNames.is_downloading]) params[AnimeFilterNames.is_downloading] = filters[AnimeFilterNames.is_downloading];\r\n    if (filters[AnimeFilterNames.cannot_download]) params[AnimeFilterNames.cannot_download] = filters[AnimeFilterNames.cannot_download];\r\n    if (filters[AnimeFilterNames.deleted_by_MAL]) params[AnimeFilterNames.deleted_by_MAL] = filters[AnimeFilterNames.deleted_by_MAL];\r\n    if (filters[AnimeFilterNames.pending_by_MAL]) params[AnimeFilterNames.pending_by_MAL] = filters[AnimeFilterNames.pending_by_MAL];\r\n    if (filters[AnimeFilterNames.anime_on_server__english_sub])\r\n        params[AnimeFilterNames.anime_on_server__english_sub] = filters[AnimeFilterNames.anime_on_server__english_sub];\r\n    if (filters[AnimeFilterNames.anime_on_server__english_dub])\r\n        params[AnimeFilterNames.anime_on_server__english_dub] = filters[AnimeFilterNames.anime_on_server__english_dub];\r\n    if (filters[AnimeFilterNames.anime_on_server__japanese_sub])\r\n        params[AnimeFilterNames.anime_on_server__japanese_sub] = filters[AnimeFilterNames.anime_on_server__japanese_sub];\r\n    if (filters[AnimeFilterNames.anime_on_server__japanese_dub])\r\n        params[AnimeFilterNames.anime_on_server__japanese_dub] = filters[AnimeFilterNames.anime_on_server__japanese_dub];\r\n    if (filters[AnimeFilterNames.episodes_range].length > 0) params[AnimeFilterNames.episodes_range] = filters[AnimeFilterNames.episodes_range].join();\r\n    if (filters[AnimeFilterNames.length_range].length > 0) params[AnimeFilterNames.length_range] = filters[AnimeFilterNames.length_range].join();\r\n    if (filters[AnimeFilterNames.genres].length > 0) params[AnimeFilterNames.genres] = filters[AnimeFilterNames.genres].join();\r\n    if (filters[AnimeFilterNames.type].length > 0) params[AnimeFilterNames.type] = filters[AnimeFilterNames.type].join();\r\n    if (filters[AnimeFilterNames.status].length > 0) params[AnimeFilterNames.status] = filters[AnimeFilterNames.status].join();\r\n    if (filters[AnimeFilterNames.rating_short].length > 0) params[AnimeFilterNames.rating_short] = filters[AnimeFilterNames.rating_short].join();\r\n    if (filters[AnimeFilterNames.video_quality].length > 0) params[AnimeFilterNames.video_quality] = filters[AnimeFilterNames.video_quality].join();\r\n    if (filters[AnimeFilterNames.audio_channel].length > 0) params[AnimeFilterNames.audio_channel] = filters[AnimeFilterNames.audio_channel].join();\r\n    if (filters[AnimeFilterNames.user_exclude].length > 0) params[AnimeFilterNames.user_exclude] = filters[AnimeFilterNames.user_exclude].join();\r\n    if (filters[AnimeFilterNames.ordering]) params[AnimeFilterNames.ordering] = filters[AnimeFilterNames.ordering];\r\n    return params\r\n}\r\n\r\nfunction setAnimeSeasonParams(params, season) {\r\n    params[AnimeFilterNames.year] = season[AnimeFilterNames.year];\r\n    params[AnimeFilterNames.season] = season[AnimeFilterNames.season];\r\n    return params\r\n}\r\n\r\nfunction setAnimeListParams(params, list) {\r\n    params[AnimeFilterNames.user_list_filter] = list[AnimeFilterNames.user_list_filter];\r\n    params[AnimeFilterNames.user_list_pk] = list[AnimeFilterNames.user_list_pk];\r\n    if (params[AnimeFilterNames.user_exclude] && params[AnimeFilterNames.user_exclude].length > 0)\r\n        params[AnimeFilterNames.user_exclude] = null;\r\n    return params\r\n}\r\n","import {\r\n    ANIME_LOADING, CANCEL_ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CHARACTERS_LOADING, FILTER_CHARACTERS, GET_ANIME_DATA,\r\n    GET_CHARACTER, GET_CHARACTERS_DATA, GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_CHARACTERS,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_CHARACTERS_DATA_FOR_HOME_PAGE, API_GET_INDUSTRY_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_CHARACTER\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieCharactersFilters} from \"./cookies\";\r\nimport {CharactersFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\n\r\n\r\n// GET A ONE CHARACTER\r\nexport const getCharacter = id => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_CHARACTER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CHARACTER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL CHARACTERS\r\nexport const filterCharacters = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setCharactersFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_CHARACTERS, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_CHARACTERS,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieCharactersFilters(filters))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setCharactersFilterParams(params, filters) {\r\n    if (filters[CharactersFilterNames.search] && typeof filters[CharactersFilterNames.search] == 'string')\r\n        params[CharactersFilterNames.search] = filters[CharactersFilterNames.search];\r\n    if (filters[CharactersFilterNames.ordering])\r\n        params[CharactersFilterNames.ordering] = filters[CharactersFilterNames.ordering];\r\n    return params\r\n}\r\n\r\n\r\n// CANCEL CHARACTERS LOADING\r\nexport const cancelCharactersLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_CHARACTERS_LOADING,\r\n    })\r\n};\r\n","import {\r\n    CANCEL_PEOPLE_LOADING,\r\n    FILTER_CHARACTERS,\r\n    FILTER_PEOPLE,\r\n    GET_ALL_CHARACTERS_FOR_ANIME, GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    GET_PERSON, GET_PUBLISHED_MANGA_FOR_PERSON, GET_VOICE_ACTOR_ROLES_FOR_PERSON,\r\n    PEOPLE_LOADING\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Anime, Person} from \"../models\";\r\nimport store from \"../store\";\r\nimport {cancelAnimeLoading} from \"../actions/anime\";\r\nimport {cancelCharactersLoading} from \"../actions/characters\";\r\n\r\nconst initialState = {\r\n    people_loading: false,\r\n    person: {},\r\n    people_loaded: false,\r\n\r\n    people_data: {},\r\n    people_data_statistics: {},\r\n    people_data_loaded: false,\r\n\r\n    filtered_people: {},\r\n    filtered_people_loaded: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case PEOPLE_LOADING:\r\n            return {\r\n                ...state,\r\n                people_loading: true,\r\n                people_loaded: false,\r\n                filtered_people_loaded: false,\r\n            };\r\n        case CANCEL_PEOPLE_LOADING:\r\n            return {\r\n                ...state,\r\n                people_loading: false,\r\n                people_loaded: false,\r\n                filtered_people_loaded: false,\r\n            };\r\n        case GET_PERSON:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                person: action.payload,\r\n                people_loading: false,\r\n                people_loaded: true\r\n            };\r\n        case GET_VOICE_ACTOR_ROLES_FOR_PERSON:\r\n            state.person[Person.voice_actor_roles] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case GET_ANIME_STAFF_POSITIONS_FOR_PERSON:\r\n            state.person[Person.anime_staff_positions] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case GET_PUBLISHED_MANGA_FOR_PERSON:\r\n            state.person[Person.published_manga] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case FILTER_PEOPLE:\r\n            return {\r\n                ...state,\r\n                filtered_people: action.payload,\r\n                people_loading: false,\r\n                filtered_people_loaded: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    industry_data: {},\r\n    industry_data_loading: {},\r\n    industry_data_statistics: {},\r\n    industry_data_loaded: false,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case INDUSTRY_DATA_LOADING:\r\n            return {\r\n                ...state,\r\n                industry_data_loading: true,\r\n                industry_data_loaded: false,\r\n            };\r\n        case GET_INDUSTRY_DATA:\r\n            return {\r\n                ...state,\r\n                industry_data_loading: false,\r\n                industry_data: action.payload,\r\n                industry_data_loaded: true,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport anime from './anime'\r\nimport manga from './manga'\r\nimport auth from './auth'\r\nimport errors from './errors'\r\nimport characters from './characters'\r\nimport eroge from './eroge'\r\nimport cookies from './cookies'\r\nimport success from './success'\r\nimport users from './users'\r\nimport requiem from './requiem'\r\nimport people from './people'\r\nimport industry from './industry'\r\n\r\nexport default combineReducers({\r\n    cookies, auth, users, errors, success, requiem, anime, manga, characters, people, eroge, industry\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './reducers'\r\n\r\n\r\nconst initialState = {};\r\n\r\n// const middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CYBER_GENESIS_URL} from \"./globals\";\r\n\r\nexport const INDEX = '/';\r\nexport const NOT_FOUND = '/404';\r\nexport const HOME = '/home';\r\n\r\nexport const REQUIEM = '/requiem';\r\n\r\nexport const ADMIN = `${CYBER_GENESIS_URL}/admin`;\r\nexport function ADMIN_EDIT_ANIME(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/anime/anime/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_ANIME_ON_SERVER(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/anime/animeonserver/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_MANGA(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/manga/manga/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_CHARACTER(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/characters/character/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_EROGE(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/eroge/eroge/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_PERSON(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/industry/person/${id}/change/`;\r\n}\r\n\r\nexport const LOGIN = '/login';\r\nexport const REGISTER = '/register';\r\nexport const SETTINGS = '/settings';\r\nexport const BBCODE_EDITOR = '/bbcode-editor';\r\nexport function PROFILE(id) {\r\n    if (id) return `/profile/${id}`;\r\n    return '/profile/:id'\r\n}\r\nexport function USER_ANIME_LIST(id) {\r\n    if (id) return `/anime-list/${id}`;\r\n    return '/anime-list/:id'\r\n}\r\nexport function USER_MANGA_LIST(id) {\r\n    if (id) return `/manga-list/${id}`;\r\n    return '/manga-list/:id'\r\n}\r\nexport function USER_EROGE_LIST(id) {\r\n    if (id) return `/eroge-list/${id}`;\r\n    return '/eroge-list/:id'\r\n}\r\nexport function USER_ANIME_STATISTICS(id) {\r\n    if (id) return `/profile/statistics/${id}`;\r\n    return '/profile/statistics/:id'\r\n}\r\nexport function USER_ANIME_HISTORY(id) {\r\n    if (id) return `/profile/history/anime/${id}`;\r\n    return '/profile/history/anime/:id'\r\n}\r\nexport function USER_MANGA_HISTORY(id) {\r\n    if (id) return `/profile/history/manga/${id}`;\r\n    return '/profile/history/manga/:id'\r\n}\r\n\r\nexport const ANIME_HOME = '/anime';\r\nexport const ANIME_BROWSE = '/anime/browse';\r\nexport const ANIME_SEASONS = '/anime/seasons';\r\nexport function ANIME_SEASON_DISPLAY(year, season) {\r\n    if (year && season >= 0) return `/anime/seasons/${year}/${season}`;\r\n    return '/anime/seasons/:year/:season'\r\n}\r\nexport const ANIME_FRANCHISES = '/anime/franchises';\r\nexport function ANIME_DISPLAY(id) {\r\n    if (id)\r\n        return `/anime/${id}`;\r\n    return '/anime/:id'\r\n}\r\nexport function ANIME_FRANCHISE_DISPLAY(id) {\r\n    if (id)\r\n        return `/anime/franchises/${id}`;\r\n    return '/anime/franchises/:id'\r\n}\r\n\r\nexport const MANGA_HOME = '/manga';\r\nexport const MANGA_BROWSE = '/manga/browse';\r\nexport const MANGA_SEASONS = '/manga/seasons';\r\nexport function MANGA_SEASON_DISPLAY(year, season) {\r\n    if (year && season >= 0) return `/manga/seasons/${year}/${season}`;\r\n    return '/manga/seasons/:year/:season'\r\n}\r\nexport const MANGA_FRANCHISES = '/manga/franchises';\r\nexport function MANGA_DISPLAY(id) {\r\n    if (id) return `/manga/${id}`;\r\n    return '/manga/:id'\r\n}\r\n\r\nexport const CHARACTERS_HOME = '/characters';\r\nexport const CHARACTERS_BROWSE = '/characters/browse';\r\nexport function CHARACTERS_DISPLAY(id) {\r\n    if (id) return `/characters/${id}`;\r\n    return '/characters/:id'\r\n}\r\n\r\nexport const PEOPLE_HOME = '/people';\r\nexport const PEOPLE_BROWSE = '/people/browse';\r\nexport function PERSON_DISPLAY(id) {\r\n    if (id) return `/person/${id}`;\r\n    return '/person/:id'\r\n}\r\n\r\nexport const EROGE_HOME = '/eroge';\r\nexport const EROGE_BROWSE = '/eroge/browse';\r\nexport function EROGE_DISPLAY(id) {\r\n    if (id) return `/eroge/${id}`;\r\n    return '/eroge/:id'\r\n}\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n    ANIME_BROWSE,\r\n    ANIME_FRANCHISES,\r\n    ANIME_HOME,\r\n    ANIME_SEASONS,\r\n    CHARACTERS_BROWSE,\r\n    CHARACTERS_HOME,\r\n    EROGE_BROWSE,\r\n    EROGE_HOME,\r\n    LOGIN,\r\n    MANGA_BROWSE,\r\n    MANGA_FRANCHISES,\r\n    MANGA_HOME,\r\n    MANGA_SEASONS,\r\n    PEOPLE_BROWSE,\r\n    SETTINGS,\r\n    USER_ANIME_LIST,\r\n    USER_ANIME_STATISTICS,\r\n    USER_EROGE_LIST,\r\n    USER_MANGA_LIST\r\n} from \"../../../urls\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport store from \"../../../store\";\r\nimport {logout} from \"../../../actions/auth\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faCalendarAlt,\r\n    faChartLine,\r\n    faCog,\r\n    faHome,\r\n    faSearch, faSignOutAlt,\r\n    faSitemap,\r\n    faThList\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nexport default function AnimeMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={ANIME_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={ANIME_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n            <Link to={ANIME_SEASONS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCalendarAlt}/> Seasons</Link>\r\n            <Link to={ANIME_FRANCHISES} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSitemap}/> Franchises</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MangaMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={MANGA_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={MANGA_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n            <Link to={MANGA_SEASONS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCalendarAlt}/> Seasons</Link>\r\n            <Link to={MANGA_FRANCHISES} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSitemap}/> Franchises</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function CharactersMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={CHARACTERS_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={CHARACTERS_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Characters</Link>\r\n            <Link to={PEOPLE_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> People</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ErogeMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={EROGE_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faHome}/> Home</Link>\r\n            <Link to={EROGE_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faSearch}/> Browse</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function AuthMenu(props) {\r\n    const {show, onLeave, user_id} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu desktop-menu-reversed show-dropdown' : 'desktop-menu desktop-menu-reversed'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={USER_ANIME_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Anime List</Link>\r\n            <Link to={USER_MANGA_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Manga List</Link>\r\n            <Link to={USER_EROGE_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faThList}/> Eroge List</Link>\r\n            <Link to={USER_ANIME_STATISTICS(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faChartLine}/> Statistics</Link>\r\n            <Link to={SETTINGS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}><FontAwesomeIcon className=\"navbar-icon\" icon={faCog}/> Settings</Link>\r\n            <Link to={LOGIN} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={() => {\r\n                playClickSound();\r\n                store.dispatch(logout());\r\n            }}><FontAwesomeIcon className=\"navbar-icon\" icon={faSignOutAlt}/> Logout</Link>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nimport '../../../assets/css/layout.css'\r\nimport {ADMIN, HOME, INDEX, LOGIN, PROFILE} from \"../../../urls\";\r\nimport AnimeMenu, {AuthMenu, CharactersMenu, ErogeMenu, MangaMenu} from \"./menus\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faUser} from \"@fortawesome/free-solid-svg-icons/faUser\";\r\n\r\nconst STYLE = {top: 25, left: 25};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        zIndex: 900\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        background: 'none',\r\n    },\r\n    toolbar: {\r\n        minHeight: 42,\r\n    },\r\n    title: {\r\n        marginRight: theme.spacing(3),\r\n        fontFamily: 'Quicksand',\r\n        fontVariant: 'small-caps',\r\n        userSelect: \"none\"\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        fontSize: \"medium\",\r\n    },\r\n    menuButtonLink: {\r\n        color: \"inherit\",\r\n        textDecoration: \"none\"\r\n    },\r\n    menuLinks: {\r\n        top: 35,\r\n        left: 25\r\n    },\r\n    sectionDesktop: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'flex',\r\n        },\r\n    },\r\n    sectionMobile: {\r\n        display: 'flex',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function MenuAppBar(props) {\r\n    const {user_authenticated, user_id, username, superuser} = props;\r\n    const classes = useStyles();\r\n    const [profileAnchorEl, setProfileAnchorEl] = React.useState(null);\r\n    const [animeAnchorEl, setAnimeAnchorEl] = React.useState(null);\r\n    const [mobileAnchorEl, setMobileAnchorEl] = React.useState(null);\r\n    const isProfileOpen = Boolean(profileAnchorEl);\r\n    const isAnimeOpen = Boolean(animeAnchorEl);\r\n    const isMobileMenuOpen = Boolean(mobileAnchorEl);\r\n\r\n    const [desktopAnimeMenu, setDesktopAnimeMenu] = React.useState(false);\r\n    const [desktopMangaMenu, setDesktopMangaMenu] = React.useState(false);\r\n    const [desktopCharactersMenu, setDesktopCharactersMenu] = React.useState(false);\r\n    const [desktopErogeMenu, setDesktopErogeMenu] = React.useState(false);\r\n    const [desktopAuthMenu, setDesktopAuthMenu] = React.useState(false);\r\n    const anime = 'anime';\r\n    const manga = 'manga';\r\n    const characters = 'characters';\r\n    const eroge = 'eroge';\r\n    const auth = 'auth';\r\n\r\n    // Handle methods\r\n    const handleProfileMenu = (event) => {\r\n        setProfileAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleAnimeMenu = (event) => {\r\n        setAnimeAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMobileMenu = (event) => {\r\n        setMobileAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    // Close methods\r\n    const handleProfileClose = () => {\r\n        setProfileAnchorEl(null);\r\n    };\r\n\r\n    const handleAnimeClose = () => {\r\n        setAnimeAnchorEl(null);\r\n        handleMobileClose()\r\n    };\r\n\r\n    const handleMobileClose = () => {\r\n        setMobileAnchorEl(null);\r\n    };\r\n\r\n    // Desktop methods\r\n    const onDesktopMenuLeave = () => {\r\n        setDesktopAnimeMenu(false);\r\n        setDesktopMangaMenu(false);\r\n        setDesktopCharactersMenu(false);\r\n        setDesktopErogeMenu(false);\r\n        setDesktopAuthMenu(false);\r\n    };\r\n\r\n    const onDesktopMenuEnter = (menuName) => {\r\n        onDesktopMenuLeave();\r\n        playHoverSound();\r\n        if (menuName === anime) {\r\n            setDesktopAnimeMenu(true);\r\n        } else if (menuName === manga) {\r\n            setDesktopMangaMenu(true)\r\n        } else if (menuName === characters) {\r\n            setDesktopCharactersMenu(true)\r\n        } else if (menuName === eroge) {\r\n            setDesktopErogeMenu(true)\r\n        } else if (menuName === auth) {\r\n            setDesktopAuthMenu(true)\r\n        }\r\n    };\r\n\r\n    const handleScroll = () => {\r\n        let navbar = document.getElementById('Cyber-Navbar');\r\n\r\n        if (window.scrollY > 40) {\r\n            navbar.classList.add('Cyber-Navbar-scrolled');\r\n        } else {\r\n            try {\r\n                navbar.classList.remove('Cyber-Navbar-scrolled');\r\n            } catch (e) {\r\n            }\r\n        }\r\n    };\r\n\r\n    const animeMobileMenu = 'anime-mobile-menu';\r\n    const renderAnimeMenu = (\r\n        <Menu\r\n            id={animeMobileMenu}\r\n            anchorEl={animeAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            transformOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            keepMounted\r\n            open={isAnimeOpen}\r\n            onClose={handleAnimeClose}\r\n            style={STYLE}\r\n        >\r\n            <MenuItem onClick={handleAnimeClose}>Home</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Browse</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Seasons</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Franchises</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileClose}\r\n        >\r\n            <MenuItem onClick={handleAnimeMenu}>\r\n                <Button\r\n                    aria-label=\"anime links\"\r\n                    aria-controls={animeMobileMenu}\r\n                    aria-haspopup=\"true\">\r\n                    Anime\r\n                </Button>\r\n            </MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    document.addEventListener('scroll', handleScroll);\r\n\r\n    return (\r\n        <div id=\"Cyber-Navbar\" className={classes.root} onMouseLeave={onDesktopMenuLeave}>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton edge=\"start\" className={classes.sectionMobile} color=\"inherit\" aria-label=\"menu\"\r\n                                onClick={handleMobileMenu}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        <Link to={INDEX} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                              onClick={playClickSound}>Cyber-Genesis</Link>\r\n                    </Typography>\r\n\r\n                    <div className={classes.sectionDesktop + ' desktop'}>\r\n                        <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={HOME} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Home</Link>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(anime)\r\n                        }}>\r\n                            Anime\r\n                            <AnimeMenu show={desktopAnimeMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(manga)\r\n                        }}>\r\n                            Manga\r\n                            <MangaMenu show={desktopMangaMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(characters)\r\n                        }}>\r\n                            Industry\r\n                            <CharactersMenu show={desktopCharactersMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(eroge)\r\n                        }}>\r\n                            Eroge\r\n                            <ErogeMenu show={desktopErogeMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        {superuser ? <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <a href={ADMIN} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Admin</a>\r\n                        </span> : null}\r\n                    </div>\r\n\r\n                    <div className={classes.grow}/>\r\n\r\n                    {user_authenticated ? <div className={classes.sectionDesktop + ' desktop'}>\r\n                        <span onMouseEnter={() => {\r\n                            onDesktopMenuEnter(auth)\r\n                        }}>\r\n                            <Link to={PROFILE(user_id)} onMouseOver={playHoverSound} onClick={playClickSound}>\r\n                                {username} <FontAwesomeIcon icon={faUser}/></Link>\r\n                            <AuthMenu user_id={user_id} show={desktopAuthMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n                    </div> : user_authenticated != null ?\r\n                        <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={LOGIN} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Login</Link>\r\n                        </span> : null}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n            {renderAnimeMenu}\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {User} from \"../../../models\";\r\nimport MenuAppBar from \"./CyberHeader\";\r\n\r\n\r\nclass CyberNavbar extends Component {\r\n    render() {\r\n        return <MenuAppBar user_authenticated={this.props.user_authenticated} user_id={this.props.user_id}\r\n                           username={this.props.username} superuser={this.props.superuser}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    user_id: state.auth.user ? state.auth.user[User.id] : null,\r\n    superuser: state.auth.user ? state.auth.user[User.is_superuser] : false,\r\n    username: state.auth.user ? state.auth.user[User.username] : null\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CyberNavbar)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Parallax} from \"react-parallax\";\r\n\r\nimport '../../../assets/css/layout.css'\r\n\r\n\r\nclass CyberFooter extends Component {\r\n    render() {\r\n        return (\r\n            <div style={this.props.margin === false ? null : {marginTop: '150px'}} id=\"Footer\">\r\n                <Parallax\r\n                    blur={0}\r\n                    bgImage={'/images/object.png'}\r\n                    bgImageAlt=\"footer\"\r\n                    strength={200}>\r\n                    <div className=\"logos-container\">\r\n                        <p className=\"\">Powered by</p>\r\n                        <div className=\"logo-container logo-container-side\">\r\n                            <img src=\"/images/cyber-administration-logo.png\" alt={''}/>\r\n                            <h5 className=\"color-\">Cyber-Admin</h5>\r\n                        </div>\r\n                        <div className=\"logo-container logo-container-main\">\r\n                            <img src=\"/images/cyber-genesis-logo.png\" alt={''}/>\r\n                            <h3 className=\"color-\">Cyber-Genesis</h3>\r\n                        </div>\r\n                        <div className=\"logo-container logo-container-side\">\r\n                            <img src=\"/images/cyber-requiem-logo.png\" alt={''}/>\r\n                            <h5 className=\"color-\">Cyber-Requiem</h5>\r\n                        </div>\r\n                    </div>\r\n                </Parallax>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(CyberFooter)\r\n","import {\r\n    MANGA_LOADING,\r\n    CANCEL_MANGA_LOADING,\r\n    GET_MANGA,\r\n    FILTER_MANGA,\r\n    GET_MANGA_DATA,\r\n    GET_ALL_CHARACTERS_FOR_MANGA,\r\n    GET_RELATIONS_FOR_MANGA, CANCEL_CHARACTERS_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_MANGA,\r\n    API_GET_ALL_CHARACTERS_FOR_MANGA,\r\n    API_GET_MANGA_DATA, API_GET_MANGA_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_MANGA,\r\n    API_GET_RELATIONS_FOR_MANGA\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {MangaFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {setCookieMangaFilters} from \"./cookies\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {TYPE_BROWSE, TYPE_LIST, TYPE_SEASON, USER_MANGA_ORDERINGS} from \"../globals\";\r\n\r\n\r\n// GET MANGA DATA\r\nexport const getMangaData = () => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n    axios\r\n        .get(API_GET_MANGA_DATA, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET MANGA DATA FOR MANGA HOME PAGE\r\nexport const getMangaDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_MANGA_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A ONE MANGA\r\nexport const getManga = id => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_MANGA(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ALL CHARACTERS FOR MANGA\r\nexport const getAllCharactersForManga = (id, page) => (dispatch, getState) => {\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ALL_CHARACTERS_FOR_MANGA(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_CHARACTERS_FOR_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET RELATIONS FOR MANGA\r\nexport const getRelationsForManga = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_RELATIONS_FOR_MANGA(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_RELATIONS_FOR_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL MANGA\r\nexport const filterManga = (page, filters, season, list, loading = true, save_cookie = true) => (dispatch, getState) => {\r\n    if (loading)\r\n        dispatch({type: MANGA_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n    if (season !== undefined && season !== 'undefined' && !isEmpty(season)) {\r\n        config.params = setMangaSeasonParams(config.params, season);\r\n        page_type = TYPE_SEASON;\r\n    }\r\n    if (list !== undefined && list !== 'undefined' && !isEmpty(list)) {\r\n        config.params = setMangaListParams(config.params, list);\r\n        page_type = TYPE_LIST;\r\n    } else if (USER_MANGA_ORDERINGS.indexOf(config.params[MangaFilterNames.ordering].replace('-', '')) > -1)\r\n        config.params[MangaFilterNames.ordering] = '-members';\r\n\r\n    axios\r\n        .get(API_FILTER_MANGA, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_MANGA,\r\n                payload: res.data\r\n            });\r\n            if (save_cookie && filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieMangaFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setMangaFilterParams(params, filters) {\r\n    if (filters[MangaFilterNames.search] && typeof filters[MangaFilterNames.search] == 'string') params[MangaFilterNames.search] = filters[MangaFilterNames.search];\r\n    if (filters[MangaFilterNames.downloaded]) params[MangaFilterNames.downloaded] = filters[MangaFilterNames.downloaded];\r\n    if (filters[MangaFilterNames.is_downloading]) params[MangaFilterNames.is_downloading] = filters[MangaFilterNames.is_downloading];\r\n    if (filters[MangaFilterNames.cannot_download]) params[MangaFilterNames.cannot_download] = filters[MangaFilterNames.cannot_download];\r\n    if (filters[MangaFilterNames.deleted_by_MAL]) params[MangaFilterNames.deleted_by_MAL] = filters[MangaFilterNames.deleted_by_MAL];\r\n    if (filters[MangaFilterNames.pending_by_MAL]) params[MangaFilterNames.pending_by_MAL] = filters[MangaFilterNames.pending_by_MAL];\r\n    if (filters[MangaFilterNames.volumes_range].length > 0) params[MangaFilterNames.volumes_range] = filters[MangaFilterNames.volumes_range].join();\r\n    if (filters[MangaFilterNames.chapters_range].length > 0) params[MangaFilterNames.chapters_range] = filters[MangaFilterNames.chapters_range].join();\r\n    if (filters[MangaFilterNames.genres].length > 0) params[MangaFilterNames.genres] = filters[MangaFilterNames.genres].join();\r\n    if (filters[MangaFilterNames.type].length > 0) params[MangaFilterNames.type] = filters[MangaFilterNames.type].join();\r\n    if (filters[MangaFilterNames.status].length > 0) params[MangaFilterNames.status] = filters[MangaFilterNames.status].join();\r\n    if (filters[MangaFilterNames.user_exclude].length > 0) params[MangaFilterNames.user_exclude] = filters[MangaFilterNames.user_exclude].join();\r\n    if (filters[MangaFilterNames.ordering]) params[MangaFilterNames.ordering] = filters[MangaFilterNames.ordering];\r\n    return params\r\n}\r\n\r\nexport function setMangaSeasonParams(params, season) {\r\n    params[MangaFilterNames.year] = season[MangaFilterNames.year];\r\n    params[MangaFilterNames.season] = season[MangaFilterNames.season];\r\n    return params\r\n}\r\n\r\nexport function setMangaListParams(params, season) {\r\n    params[MangaFilterNames.user_list_filter] = season[MangaFilterNames.user_list_filter];\r\n    params[MangaFilterNames.user_list_pk] = season[MangaFilterNames.user_list_pk];\r\n    if (params[MangaFilterNames.user_exclude] && params[MangaFilterNames.user_exclude].length > 0)\r\n        params[MangaFilterNames.user_exclude] = null;\r\n    return params\r\n}\r\n\r\n\r\n// CANCEL MANGA LOADING\r\nexport const cancelMangaLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_MANGA_LOADING,\r\n    })\r\n};\r\n","import axios from \"axios\";\r\n\r\nimport {\r\n    ANIME_LOADING,\r\n    CANCEL_EROGE_LOADING,\r\n    EROGE_LOADING,\r\n    FILTER_EROGE, GET_ANIME_DATA,\r\n    GET_EROGE, GET_EROGE_DATA\r\n} from \"./types\";\r\nimport {\r\n    API_FILTER_EROGE,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_EROGE_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_EROGE\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieErogeFilters} from \"./cookies\";\r\nimport {ErogeFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {TYPE_BROWSE} from \"../globals\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\n\r\n\r\n// GET A ONE EROGE\r\nexport const getEroge = id => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_EROGE(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET EROGE DATA FOR EROGE HOME PAGE\r\nexport const getErogeDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_EROGE_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL EROGE\r\nexport const filterEroge = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_EROGE, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_EROGE,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieErogeFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setErogeFilterParams(params, filters) {\r\n    if (filters[ErogeFilterNames.search] && typeof filters[ErogeFilterNames.search] == 'string') params[ErogeFilterNames.search] = filters[ErogeFilterNames.search];\r\n    if (filters[ErogeFilterNames.downloaded]) params[ErogeFilterNames.downloaded] = filters[ErogeFilterNames.downloaded];\r\n    if (filters[ErogeFilterNames.type].length > 0) params[ErogeFilterNames.type] = filters[ErogeFilterNames.type].join();\r\n    if (filters[ErogeFilterNames.platforms].length > 0) params[ErogeFilterNames.platforms] = filters[ErogeFilterNames.platforms].join();\r\n    if (filters[ErogeFilterNames.censorship].length > 0) params[ErogeFilterNames.censorship] = filters[ErogeFilterNames.censorship].join();\r\n    if (filters[ErogeFilterNames.language].length > 0) params[ErogeFilterNames.language] = filters[ErogeFilterNames.language].join();\r\n    if (filters[ErogeFilterNames.tags].length > 0) params[ErogeFilterNames.tags] = filters[ErogeFilterNames.tags].join();\r\n    if (filters[ErogeFilterNames.ordering]) params[ErogeFilterNames.ordering] = filters[ErogeFilterNames.ordering];\r\n    return params\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {store_reducer_cookies, store_reducers, USER_ANIME_STATUSES, USER_MANGA_STATUSES} from \"../globals\";\r\nimport {\r\n    API_CHANGE_USER_PROFILE_IMAGE,\r\n    API_DELETE_ANIME_HISTORY_ENTRY,\r\n    API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY,\r\n    API_DELETE_MANGA_VOLUME_HISTORY_ENTRY,\r\n    API_EDIT_USER_BIO,\r\n    API_GET_ALL_USERS,\r\n    API_GET_USER_LIST,\r\n    API_GET_VISITED_USER_ANIME_HISTORY,\r\n    API_GET_VISITED_USER_MANGA_HISTORY,\r\n    API_IMPORT_MAL_XML_FOR_ANIME_LIST,\r\n    API_UPDATE_AND_GET_USER_ANIME_STATISTICS,\r\n    API_UPDATE_USER_LIST,\r\n    API_USER_ANIME_ENTRY,\r\n    API_USER_ANIME_ENTRY_NOID,\r\n    API_USER_ANIME_ENTRY_STATUSES,\r\n    API_USER_ANIME_UPDATE_EPISODE,\r\n    API_USER_ANIME_FILTERS_PRESET,\r\n    API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_USER_MANGA_ENTRY,\r\n    API_USER_MANGA_ENTRY_NOID,\r\n    API_USER_MANGA_ENTRY_STATUSES,\r\n    API_USER_MANGA_UPDATE_CHAPTER,\r\n    API_USER_MANGA_UPDATE_VOLUME,\r\n    API_USER_MANGA_FILTERS_PRESET,\r\n    API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_CHANGE_CYBER_SOUND_STATUS,\r\n    API_ADD_TO_FAVORITES,\r\n    API_REMOVE_FROM_FAVORITES,\r\n    API_EDIT_USER_ABOUT_ME_BBCODE,\r\n    API_USER_EROGE_FILTERS_PRESET,\r\n    API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_SCRAPE_EPISODE_HISTORY_FROM_MAL,\r\n    API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES,\r\n    API_GET_USER_ACHIEVEMENTS,\r\n    API_IMPORT_MAL_XML_FOR_MANGA_LIST,\r\n    API_SET_ANIME_LIST_TO_PRIVATE,\r\n    API_SET_ANIME_LIST_TO_PUBLIC,\r\n    API_SET_ANIME_HISTORY_TO_PRIVATE,\r\n    API_SET_ANIME_HISTORY_TO_PUBLIC,\r\n    API_SET_MANGA_LIST_TO_PRIVATE,\r\n    API_SET_MANGA_LIST_TO_PUBLIC,\r\n    API_SET_MANGA_HISTORY_TO_PRIVATE, API_SET_MANGA_HISTORY_TO_PUBLIC, API_EDIT_USER_ABOUT_ME_BACKGROUND\r\n} from \"./api_urls\";\r\nimport {\r\n    AUTH_USER,\r\n    CANCEL_USER_ACHIEVEMENTS_LOADING,\r\n    CANCEL_USER_LIST_LOADING,\r\n    CLEAR_USER_ACHIEVEMENTS,\r\n    CLEAR_USER_ANIME_ENTRY,\r\n    CLEAR_USER_MANGA_ENTRY,\r\n    FINISH_LOADING_USER_ENTRY,\r\n    FINISH_UPLOADING_FILE,\r\n    GET_ALL_USERS,\r\n    GET_ANIME_FILTER_PRESETS,\r\n    GET_EROGE_FILTER_PRESETS,\r\n    GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    GET_MANGA_FILTER_PRESETS, GET_PROFILE_PRIVACY_SETTINGS,\r\n    GET_USER_ACHIEVEMENTS,\r\n    GET_USER_ANIME_ENTRY,\r\n    GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    GET_USER_LIST,\r\n    GET_USER_MANGA_ENTRY,\r\n    GET_VISITED_USER_ANIME_HISTORY,\r\n    GET_VISITED_USER_MANGA_HISTORY,\r\n    SET_ANIME_PRESET,\r\n    SET_EROGE_PRESET,\r\n    SET_MANGA_PRESET,\r\n    UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    UPDATE_USER_ANIME_STATISTICS,\r\n    UPDATE_USER_LIST,\r\n    UPLOAD_ANIME_LIST_MAL_XML, UPLOAD_MANGA_LIST_MAL_XML,\r\n    UPLOADING_FILE,\r\n    USER_ACHIEVEMENTS_LOADING,\r\n    USER_ENTRY_LOADING,\r\n    USER_INFO_LOADING,\r\n    USER_LIST_LOADING,\r\n    USER_STATISTICS_LOADING\r\n} from \"./types\";\r\nimport store from \"../store\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\nimport {authUser, getUser, tokenConfig} from \"./auth\";\r\nimport {Alert} from \"../models\";\r\nimport {filterAnime, setAnimeFilterParams} from \"./anime\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {filterManga, setMangaFilterParams} from \"./manga\";\r\nimport {setErogeFilterParams} from \"./eroge\";\r\n\r\n\r\n// GET ALL USERS\r\nexport const getAllUsers = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_ALL_USERS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_USERS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET FILTER PRESETS\r\nexport const getAnimeFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_ANIME_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE FILTER PRESET\r\nexport const saveAnimeFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_ANIME_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateAnimeFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteAnimeFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET MANGA FILTER PRESETS\r\nexport const getMangaFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_MANGA_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE MANGA FILTER PRESET\r\nexport const saveMangaFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_MANGA_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateMangaFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteMangaFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET FILTER PRESETS\r\nexport const getErogeFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_EROGE_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE FILTER PRESET\r\nexport const saveErogeFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_EROGE_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateErogeFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteErogeFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPLOAD COVER IMAGE AND UPDATE THE USER\r\nexport const updateUserProfileImage = (file, id) => (dispatch, getState) => {\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_CHANGE_USER_PROFILE_IMAGE, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Profile Image changed successfully!', Alert.type_success));\r\n            dispatch({type: FINISH_UPLOADING_FILE});\r\n            dispatch(getUser(id));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: FINISH_UPLOADING_FILE});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPLOAD XML FILE IN MAL FORMAT TO UPDATE THE ANIME LIST\r\nexport const importMalXmlForAnimeList = file => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    dispatch(createMessage('Importing Anime List..', Alert.type_info));\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_IMPORT_MAL_XML_FOR_ANIME_LIST, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Anime List imported successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: UPLOAD_ANIME_LIST_MAL_XML,\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        });\r\n};\r\n\r\n\r\n// UPLOAD XML FILE IN MAL FORMAT TO UPDATE THE MANGA LIST\r\nexport const importMalXmlForMangaList = file => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    dispatch(createMessage('Importing Manga List..', Alert.type_info));\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_IMPORT_MAL_XML_FOR_MANGA_LIST, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Manga List imported successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: UPLOAD_MANGA_LIST_MAL_XML,\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        });\r\n};\r\n\r\n\r\n// SCRAPE USER ANIME EPISODE HISTORY FROM MAL\r\nexport const scrapeEpisodeHistoryFromMal = (malhlogsessid, malsessionid) => (dispatch, getState) => {\r\n    const formData = new FormData();\r\n    console.log('MAL COOKIES:', malhlogsessid, malsessionid);\r\n    formData.append('MALHLOGSESSID', malhlogsessid);\r\n    formData.append('MALSESSIONID', malsessionid);\r\n\r\n    const config = tokenConfig(getState);\r\n\r\n    dispatch({type: USER_LIST_LOADING});\r\n\r\n    axios\r\n        .post(API_SCRAPE_EPISODE_HISTORY_FROM_MAL, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('The scraper has started successfully. This may last up to few hours ' +\r\n                'depending on your list size.', Alert.type_info));\r\n            dispatch({\r\n                type: GET_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_USER_LIST_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// EDIT USER'S BIO\r\nexport const editUserBio = (bio) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('bio', bio);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_BIO, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User bio changed successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// EDIT USER'S ABOUT ME BBCODE\r\nexport const editUserAboutMeBBCode = (bbcode) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('bbcode', bbcode);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_ABOUT_ME_BBCODE, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User About me BBCode changed successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n\r\n// EDIT USER'S ABOUT ME BACKGROUND\r\nexport const editUserAboutMeBackground = (background_style) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('background_style', JSON.stringify(background_style));\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_ABOUT_ME_BACKGROUND, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User About me Background updated successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// GET USER LISTS\r\nexport const getUserList = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_GET_USER_LIST(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// ANIME USER ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// UPDATE & GET USER ANIME STATISTICS\r\nexport const updateAndGetUserAnimeStatistics = id => (dispatch, getState) => {\r\n    dispatch({type: USER_STATISTICS_LOADING});\r\n    axios\r\n        .get(API_UPDATE_AND_GET_USER_ANIME_STATISTICS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Stats updated!', Alert.type_success));\r\n            dispatch({\r\n                type: UPDATE_USER_ANIME_STATISTICS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            // if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            // else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET USER VISITED USER ANIME HISTORY\r\nexport const getVisitedUserAnimeHistory = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: USER_INFO_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    if (page && page !== 1) config.params = {'page': page};\r\n\r\n    axios\r\n        .get(API_GET_VISITED_USER_ANIME_HISTORY(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_VISITED_USER_ANIME_HISTORY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {});\r\n};\r\n\r\n\r\n// UPDATE USER ANIME STATISTICS\r\nexport const updateUserList = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_UPDATE_USER_LIST(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: UPDATE_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET_USER_ACHIEVEMENTS\r\nexport const getUserAchievements = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ACHIEVEMENTS_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_USER_ACHIEVEMENTS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ACHIEVEMENTS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_USER_ACHIEVEMENTS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// CLEAR_USER_ACHIEVEMENTS\r\nexport const clearUserAchievements = () => dispatch => {\r\n    dispatch({\r\n        type: CLEAR_USER_ACHIEVEMENTS,\r\n    })\r\n};\r\n\r\n\r\n// GET USER ANIME ENTRY\r\n/**\r\n * Pass the Anime ID corresponding to the user entry\r\n * @param id {Number} Anime ID\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const getUserAnimeEntry = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .get(API_USER_ANIME_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: CLEAR_USER_ANIME_ENTRY,\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// ADD/CREATE USER ANIME ENTRY\r\nexport const addAnimeEntry = entryInfo => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entryInfo);\r\n\r\n    axios\r\n        .post(API_USER_ANIME_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime added!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// INSTANT DROP AN ANIME\r\nexport const addAnimeEntryInstantDrop = (id) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    const body = JSON.stringify({\r\n        anime: id,\r\n        watched_episodes: 0,\r\n        start_date: new Date(),\r\n        finish_date: new Date(),\r\n        score: 0,\r\n        status: USER_ANIME_STATUSES.dropped,\r\n        times_watched: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rewatching: false,\r\n        rewatching_episode: 0,\r\n    });\r\n\r\n    axios\r\n        .post(API_USER_ANIME_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime dropped!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE USER ANIME ENTRY\r\nexport const updateAnimeEntry = (id, entry_info, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entry_info);\r\n\r\n    axios\r\n        .put(API_USER_ANIME_ENTRY(id), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Entry updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_ANIME_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE ANIME EPISODE\r\nexport const updateAnimeEpisode = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .post(API_USER_ANIME_UPDATE_EPISODE(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Episode updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_ANIME_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// DELETE USER ANIME ENTRY\r\n/**\r\n *\r\n * @param {Number} id - ID of the anime\r\n * @param {Object} list\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const deleteAnimeEntry = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .delete(API_USER_ANIME_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime deleted', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: CLEAR_USER_ANIME_ENTRY,\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// DELETE USER ANIME ENTRY HISTORY\r\nexport const deleteAnimeHistoryEntry = (history_id, anime_id) => (dispatch, getState) => {\r\n\r\n    axios\r\n        .delete(API_DELETE_ANIME_HISTORY_ENTRY(history_id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('History entry deleted!', Alert.type_success));\r\n            dispatch(getUserAnimeEntry(anime_id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// MANGA USER ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// GET USER VISITED USER MANGA HISTORY\r\nexport const getVisitedUserMangaHistory = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: USER_INFO_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    if (page && page !== 1) config.params = {'page': page};\r\n\r\n    axios\r\n        .get(API_GET_VISITED_USER_MANGA_HISTORY(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_VISITED_USER_MANGA_HISTORY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {});\r\n};\r\n\r\n\r\n// GET USER MANGA ENTRY\r\n/**\r\n * Pass the Manga ID corresponding to the user entry\r\n * @param id {Number} Manga ID\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const getUserMangaEntry = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .get(API_USER_MANGA_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: CLEAR_USER_MANGA_ENTRY,\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// ADD/CREATE USER MANGA ENTRY\r\nexport const addMangaEntry = entryInfo => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entryInfo);\r\n\r\n    axios\r\n        .post(API_USER_MANGA_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga added!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// INSTANT DROP A MANGA\r\nexport const addMangaEntryInstantDrop = (id) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    const initial_values = {\r\n        manga: id,\r\n        read_volumes: 0,\r\n        read_chapters: 0,\r\n        start_date: new Date(),\r\n        finish_date: new Date(),\r\n        score: 0,\r\n        status: USER_MANGA_STATUSES.dropped,\r\n        times_read: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rereading: false,\r\n        rereading_volume: 0,\r\n        rereading_chapter: 0,\r\n        errors: false\r\n    };\r\n    const body = JSON.stringify(initial_values);\r\n\r\n    axios\r\n        .post(API_USER_MANGA_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga dropped!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE USER MANGA ENTRY\r\nexport const updateMangaEntry = (id, entry_info, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entry_info);\r\n\r\n    axios\r\n        .put(API_USER_MANGA_ENTRY(id), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Entry updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE MANGA VOLUME\r\nexport const updateMangaVolume = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .post(API_USER_MANGA_UPDATE_VOLUME(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Volume updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE MANGA CHAPTER\r\nexport const updateMangaChapter = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .post(API_USER_MANGA_UPDATE_CHAPTER(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Chapter updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// DELETE USER MANGA ENTRY\r\n/**\r\n *\r\n * @param {Number} id - ID of the Manga\r\n * @param {Object} list\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const deleteMangaEntry = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .delete(API_USER_MANGA_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga deleted', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: CLEAR_USER_MANGA_ENTRY,\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// DELETE USER MANGA ENTRY HISTORY VOLUME/CHAPTER\r\nexport const deleteMangaVolumeChapterHistoryEntry = (history_id, manga_id, type) => (dispatch, getState) => {\r\n    let url = API_DELETE_MANGA_VOLUME_HISTORY_ENTRY(history_id);\r\n\r\n    if (type === 'chapter')\r\n        url = API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY(history_id);\r\n\r\n    axios\r\n        .delete(url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('History entry deleted!', Alert.type_success));\r\n            dispatch(getUserMangaEntry(manga_id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\nexport const setSelectedAnimePreset = (preset) => {\r\n    return {\r\n        type: SET_ANIME_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\nexport const setSelectedMangaPreset = (preset) => {\r\n    return {\r\n        type: SET_MANGA_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\nexport const setSelectedErogePreset = (preset) => {\r\n    return {\r\n        type: SET_EROGE_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\n// GET LOGGED IN USER ANIME ENTRY STATUSES\r\nexport const getLoggedInUserAnimeEntryStatuses = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_ANIME_ENTRY_STATUSES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET LOGGED IN USER ANIME ENTRY STATUSES\r\nexport const getLoggedInUserMangaEntryStatuses = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_MANGA_ENTRY_STATUSES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// MUTE/UNMUTE USER THEME SOUNDS\r\nexport const muteUnmuteThemeSounds = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_CHANGE_CYBER_SOUND_STATUS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: AUTH_USER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// ADD TO FAVORITES\r\nexport const addToFavorites = (branch, id) => (dispatch, getState) => {\r\n    let body = {'title_id': id};\r\n\r\n    axios\r\n        .post(API_ADD_TO_FAVORITES(branch), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} added to favorites`, Alert.type_success));\r\n            dispatch(authUser())\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// ADD TO FAVORITES\r\nexport const removeFromFavorites = (branch, id) => (dispatch, getState) => {\r\n    let body = {'title_id': id};\r\n\r\n    axios\r\n        .post(API_REMOVE_FROM_FAVORITES(branch), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} removed from favorites`, Alert.type_success));\r\n            dispatch(authUser())\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// GET USER EPISODE HISTORY SCRAPER PROGRESS\r\nexport const getUserEpisodeHistoryScraperProgress = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FIX USER START AND FINISH DATE FOR ANIME ENTRIES\r\nexport const fixUserStartAndFinishDateForAnimeEntries = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Fixing completed.', Alert.type_success))\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER ANIME LIST PRIVACY\r\nexport const updateUserAnimeListPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_ANIME_LIST_TO_PRIVATE : API_SET_ANIME_LIST_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Anime List has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER ANIME HISTORY PRIVACY\r\nexport const updateUserAnimeHistoryPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_ANIME_HISTORY_TO_PRIVATE : API_SET_ANIME_HISTORY_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Anime History has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER MANGA LIST PRIVACY\r\nexport const updateUserMangaListPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_MANGA_LIST_TO_PRIVATE : API_SET_MANGA_LIST_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Manga List has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER MANGA HISTORY PRIVACY\r\nexport const updateUserMangaHistoryPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_MANGA_HISTORY_TO_PRIVATE : API_SET_MANGA_HISTORY_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Manga History has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n","import React, { Component } from 'react';\r\n\r\n// https://bbbootstrap.com/snippets/circle-loader-63353068 BETTER LOADING!!!\r\n\r\nimport '../../../assets/css/layout.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass Loading extends Component {\r\n    static propTypes = {\r\n        /** String that will be displayed below the img */\r\n        text: PropTypes.string,\r\n        /** Removes all text */\r\n        no_text: PropTypes.bool,\r\n        /** Used for width and height for the img in pixels */\r\n        size: PropTypes.number,\r\n        /** Used for calculating the top and bottom offset of the container */\r\n        offset: PropTypes.number,\r\n        /** Applies a css class to the container to remove the relative position */\r\n        block: PropTypes.bool,\r\n    };\r\n\r\n    render() {\r\n        const {text, size, offset, block, no_text} = this.props;\r\n\r\n        return (\r\n            <div className={block ? 'triangle-loader triangle-loader-initial' : 'triangle-loader'}\r\n                 style={offset ? {height: `calc(100vh - ${offset}px)`} : null}>\r\n                <div className=\"triangle-loader-svg\">\r\n                    <svg id=\"triangle\" width={size ? size : '160'} height={size ? size : '160'} viewBox=\"-3 -4 39 39\">\r\n                        <polygon fill=\"transparent\" stroke=\"cyan\" strokeWidth=\"1\" points=\"16,0 32,32 0,32\"/>\r\n                    </svg>\r\n                    {!no_text ? text ? text.toUpperCase() : 'LOADING' : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ANIME_GENRES} from \"../../../globals\";\r\n\r\n/**\r\n * Cyber-Genesis version of the Button component from Material-ui\r\n * @param props.classNames {String}\r\n * @param props.variant {String}\r\n * @param props.component {String}\r\n * @param props.color {String}\r\n * @param props.type {String}\r\n * @param props.disabled {Boolean}\r\n * @param props.title {String}\r\n * @param props.onClick {Function}\r\n * @param props.children {JSX.Element}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CyberButton(props) {\r\n    const {classNames, variant, component, color, type, disabled, title, onClick, children} = props;\r\n    return <Button type={type} component={component} variant={variant} color={color} className={classNames} onMouseEnter={playHoverSound}\r\n                   disabled={disabled} title={title}\r\n                   onClick={() => {\r\n                       playClickSound();\r\n                       if (onClick) onClick()\r\n                   }}>\r\n        {children}\r\n    </Button>\r\n}\r\n\r\n/**\r\n * Cyber-Genesis version of the Link component from Material-ui\r\n * @param props.classNames {Object}\r\n * @param props.to {Object}\r\n * @param props.children {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CyberLink(props) {\r\n    const {classNames, to, children} = props;\r\n    return <Link to={to} className={classNames} onMouseEnter={playHoverSound} onClick={playClickSound}>\r\n        {children}\r\n    </Link>\r\n}\r\n\r\n/**\r\n *\r\n * @param props.src {string} Src of the image.\r\n * @param props.alt {string} Alt of the image.\r\n * @param props.className {string} Additional classes for the image.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function PreLoadImage(props) {\r\n    const {className, src, alt} = props;\r\n\r\n    const [loaded, setLoaded] = React.useState(false);\r\n\r\n    return <>\r\n        <img src={src}\r\n             className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n             onLoad={() => {setLoaded(true)}}\r\n        />\r\n        <img className={loaded ? className ? `fade-in ${className}` : 'fade-in' : className ? `before-fade-in ${className}` : 'before-fade-in'}\r\n             src={src} alt={alt ? alt : 'Image'}\r\n        />\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function LoadGifs(props) {\r\n    console.log('loading gifs');\r\n    return <div style={{position: 'absolute', opacity: 0, height: 0}}>\r\n        {ANIME_GENRES.map(genre => (\r\n            <img style={{position: 'absolute', opacity: 0, height: 0}} src={`/images/genre_icons/${genre}.gif`}/>\r\n        ))}\r\n    </div>\r\n}","import {\r\n    ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CANCEL_PEOPLE_LOADING,\r\n    CHARACTERS_LOADING,\r\n    FILTER_CHARACTERS,\r\n    FILTER_PEOPLE,\r\n    GET_ALL_CHARACTERS_FOR_ANIME, GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    GET_PERSON, GET_PUBLISHED_MANGA_FOR_PERSON, GET_VOICE_ACTOR_ROLES_FOR_PERSON, MANGA_LOADING,\r\n    PEOPLE_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_PEOPLE,\r\n    API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    API_GET_ONE_PERSON, API_GET_PUBLISHED_MANGA_FOR_PERSON,\r\n    API_GET_VOICE_ACTOR_ROLES_FOR_PERSON\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieCharactersFilters, setCookiePeopleFilters} from \"./cookies\";\r\nimport {CharactersFilterNames, PeopleFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\nimport {cancelCharactersLoading} from \"./characters\";\r\nimport {cancelMangaLoading} from \"./manga\";\r\nimport {MANGA_ORDERINGS} from \"../globals\";\r\n\r\n\r\n// GET A ONE PERSON\r\nexport const getPerson = id => (dispatch, getState) => {\r\n    dispatch({type: PEOPLE_LOADING});\r\n    axios\r\n        .get(API_GET_ONE_PERSON(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET VOICE ACTOR ROLES (CHARACTERS) FOR PERSON\r\nexport const getVoiceActorRolesForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_VOICE_ACTOR_ROLES_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelCharactersLoading());\r\n            dispatch({\r\n                type: GET_VOICE_ACTOR_ROLES_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME STAFF POSITIONS (ANIME) FOR PERSON\r\nexport const getAnimeStaffPositionsForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelAnimeLoading());\r\n            dispatch({\r\n                type: GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET PUBLISHED MANGA (MANGA) FOR PERSON\r\nexport const getPublishedMangaForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_PUBLISHED_MANGA_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelMangaLoading());\r\n            dispatch({\r\n                type: GET_PUBLISHED_MANGA_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL PEOPLE\r\nexport const filterPeople = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: PEOPLE_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setPeopleFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_PEOPLE, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_PEOPLE,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookiePeopleFilters(filters))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setPeopleFilterParams(params, filters) {\r\n    if (filters[PeopleFilterNames.search] && typeof filters[PeopleFilterNames.search] == 'string')\r\n        params[PeopleFilterNames.search] = filters[PeopleFilterNames.search];\r\n    if (filters[PeopleFilterNames.ordering])\r\n        params[PeopleFilterNames.ordering] = filters[PeopleFilterNames.ordering];\r\n    return params\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA, BRANCH_PEOPLE} from \"../globals\";\r\nimport {getAnime} from \"./anime\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\nimport store from \"../store\";\r\nimport {getUserAnimeEntry, getUserMangaEntry} from \"./users\";\r\nimport {\r\n    API_ADD_ANIME_TO_SERVER, API_GET_NEWS, API_OPEN_ANIME_FOLDER, API_OPEN_EROGE_FOLDER,\r\n    API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS,\r\n    API_REQUIEM_DOWNLOAD_ANIME_TORRENT, API_REQUIEM_GET_STORAGE_INFO, API_REQUIEM_GET_TORRENT_PROGRESS,\r\n    API_REQUIEM_UPDATE_ANIME_MAL,\r\n    API_REQUIEM_UPDATE_CHARACTER_MAL,\r\n    API_REQUIEM_UPDATE_EROGE_HENTAIGAMER,\r\n    API_REQUIEM_UPDATE_MANGA_MAL, API_REQUIEM_UPDATE_PERSON_MAL, API_UPDATE_ANIME_TO_SERVER\r\n} from \"./api_urls\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {Alert, Anime} from \"../models\";\r\nimport {getManga} from \"./manga\";\r\nimport {getCharacter} from \"./characters\";\r\nimport {getEroge} from \"./eroge\";\r\nimport {\r\n    ANIME_LOADING,\r\n    CANCEL_ANIME_LOADING, CANCEL_CHARACTERS_LOADING, CANCEL_EROGE_LOADING,\r\n    CANCEL_MANGA_LOADING, CANCEL_PEOPLE_LOADING,\r\n    CHARACTERS_LOADING, DOWNLOAD_TORRENT,\r\n    EROGE_LOADING, GET_NEWS, GET_STORAGE_INFO, GET_TORRENT_PROGRESS,\r\n    MANGA_LOADING, NEWS_LOADING, PEOPLE_LOADING, REQUIEM_LOADING\r\n} from \"./types\";\r\nimport {getPerson} from \"./people\";\r\n\r\n\r\nfunction scrapeUpdateTitleApiUrl(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return API_REQUIEM_UPDATE_ANIME_MAL(id);\r\n        case BRANCH_MANGA:\r\n            return API_REQUIEM_UPDATE_MANGA_MAL(id);\r\n        case BRANCH_CHARACTERS:\r\n            return API_REQUIEM_UPDATE_CHARACTER_MAL(id);\r\n        case BRANCH_PEOPLE:\r\n            return API_REQUIEM_UPDATE_PERSON_MAL(id);\r\n        case BRANCH_EROGE:\r\n            return API_REQUIEM_UPDATE_EROGE_HENTAIGAMER(id);\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\n\r\n// SCRAPE UPDATE SINGLE TITLE\r\nexport const scrapeUpdateTitle = (id, branch) => (dispatch, getState) => {\r\n    if (branch === BRANCH_ANIME)\r\n        dispatch({type: ANIME_LOADING});\r\n    else if (branch === BRANCH_MANGA)\r\n        dispatch({type: MANGA_LOADING});\r\n    else if (branch === BRANCH_CHARACTERS)\r\n        dispatch({type: CHARACTERS_LOADING});\r\n    else if (branch === BRANCH_EROGE)\r\n        dispatch({type: EROGE_LOADING});\r\n    else if (branch === BRANCH_PEOPLE)\r\n        dispatch({type: PEOPLE_LOADING});\r\n    else return;\r\n\r\n    axios\r\n        .get(scrapeUpdateTitleApiUrl(branch, id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} Scraped & Updated`, Alert.type_success));\r\n            if (branch === BRANCH_ANIME) dispatch(getAnime(id));\r\n            else if (branch === BRANCH_MANGA) dispatch(getManga(id));\r\n            else if (branch === BRANCH_CHARACTERS) dispatch(getCharacter(id));\r\n            else if (branch === BRANCH_EROGE) dispatch(getEroge(id));\r\n            else if (branch === BRANCH_PEOPLE) dispatch(getPerson(id));\r\n        })\r\n        .catch(err => {\r\n            if (branch === BRANCH_ANIME)\r\n                dispatch({type: CANCEL_ANIME_LOADING});\r\n            else if (branch === BRANCH_MANGA)\r\n                dispatch({type: CANCEL_MANGA_LOADING});\r\n            else if (branch === BRANCH_CHARACTERS)\r\n                dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            else if (branch === BRANCH_EROGE)\r\n                dispatch({type: CANCEL_EROGE_LOADING});\r\n            else if (branch === BRANCH_PEOPLE)\r\n                dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET STORAGE INFO\r\nexport const getStorageInfo = () => (dispatch, getState) => {\r\n    dispatch({type: REQUIEM_LOADING});\r\n    axios\r\n        .get(API_REQUIEM_GET_STORAGE_INFO, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_STORAGE_INFO,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DOWNLOAD TORRENT\r\nexport const downloadTorrent = (id, data) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    for (let x = 0; x < data['files'].length; x++) formData.append('file-' + x, data['files'][x]);\r\n    formData.append('disk', data['disk']);\r\n    formData.append('magnet', data['magnet']);\r\n    formData.append('extra_ids', data['extra_ids']);\r\n    formData.append('extract_subs', data['extract_subs']);\r\n    formData.append('additional_info', data['additional_info']);\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .post(API_REQUIEM_DOWNLOAD_ANIME_TORRENT(id), formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Torrent is downloading', Alert.type_success));\r\n            dispatch(getAnime(id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// DELETE ANIME_SERVE_INFO AND ITS TORRENTS\r\nexport const deleteAnimeServerInfoAndTorrents = (id) => (dispatch, getState) => {\r\n    let config = tokenConfig(getState);\r\n    config['headers']['withCredentials'] = true;\r\n\r\n    axios\r\n        .get(API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS(id), config)\r\n        .then(res => {\r\n            dispatch(getAnime(id))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET TORRENT PROGRESS INFO\r\nexport const getTorrentProgress = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_REQUIEM_GET_TORRENT_PROGRESS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TORRENT_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// ADD ANIME TO SERVER\r\nexport const addAnimeToServer = animeInfo => (dispatch, getState) => {\r\n    const body = JSON.stringify(animeInfo);\r\n\r\n    axios\r\n        .post(API_ADD_ANIME_TO_SERVER, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('The Anime has been added to the server', Alert.type_success));\r\n            dispatch(getAnime(animeInfo['anime']))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// UPDATE ANIME TO SERVER\r\nexport const updateAnimeToServer = animeInfo => (dispatch, getState) => {\r\n    const body = JSON.stringify(animeInfo);\r\n\r\n    axios\r\n        .put(API_UPDATE_ANIME_TO_SERVER(animeInfo['anime']), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('The Anime Server Info has been updated successfully!', Alert.type_success));\r\n            dispatch(getAnime(animeInfo['anime']))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET NEWS\r\nexport const getNews = (page) => (dispatch, getState) => {\r\n    dispatch({type: NEWS_LOADING});\r\n    let config = tokenConfig(getState);\r\n    if (page) if (page !== 1) config.params = {'page': page};\r\n\r\n\r\n    axios\r\n        .get(API_GET_NEWS, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_NEWS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// OPEN ANIME FOLDER\r\nexport const openAnimeFolder = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_OPEN_ANIME_FOLDER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Folder opened', Alert.type_info));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// OPEN EROGE FOLDER\r\nexport const openErogeFolder = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_OPEN_EROGE_FOLDER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Folder opened', Alert.type_info));\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};","import moment from \"moment\";\r\nimport {\r\n    faArrowDown,\r\n    faArrowUp,\r\n    faBan,\r\n    faClock, faDownload, faHdd, faInfinity,\r\n    faPause, faPuzzlePiece,\r\n    faSpinner, faUpload, faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\n\r\nexport function getBytesToSize(size) {\r\n    const terabyte = 1099511627776;\r\n    const gigabyte = 1073741824;\r\n    const megabyte = 1048576;\r\n\r\n    if (size >= 10995116277760)  // More than 10TB\r\n        return `${(size / terabyte).toFixed(1)}TB`;\r\n    else if (size >= 1099511627776)  // More than 1TB\r\n        return `${(size / terabyte).toFixed(2)}TB`;\r\n    else if (size >= 107374182400) // More than 100GB\r\n        return `${Math.ceil(size / gigabyte)}GB`;\r\n    else if (size >= 10737418240) // More than 10GB\r\n        return `${(size / gigabyte).toFixed(1)}GB`;\r\n    else if (size >= 1073741824) // More than 1GB\r\n        return `${(size / gigabyte).toFixed(2)}GB`;\r\n    else  // Less then 1GB\r\n        return `${Math.ceil(size / megabyte)}MB`;\r\n}\r\n\r\n\r\nexport function getTime(sec) {\r\n    let hrs = Math.floor(sec / 3600);\r\n    let min = Math.floor((sec - (hrs * 3600)) / 60);\r\n    let seconds = sec - (hrs * 3600) - (min * 60);\r\n    seconds = Math.round(seconds * 100) / 100;\r\n\r\n    let result = (hrs < 10 ? \"0\" + hrs : hrs);\r\n    result += \":\" + (min < 10 ? \"0\" + min : min);\r\n    result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\r\n    return result;\r\n}\r\n\r\n\r\nexport function getProgress(progress) {\r\n    return (progress * 100).toFixed(1);\r\n}\r\n\r\n\r\nexport function getSpeed(speed) {\r\n    if (speed < 1000000) return `${(speed / 1024.0).toFixed(1)}Kb/s`;\r\n    else return `${(speed / (1024 * 1024.0)).toFixed(1)}Mb/s`;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.torrent {Object}\r\n * @param props.filters {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TorrentProgressInfo(props) {\r\n    const {torrent, filters} = props;\r\n    let days = parseInt(moment.utc(torrent['eta'] * 1000).format('DDD')) - 1;\r\n    let hours = parseInt(moment.utc(torrent['eta'] * 1000).format('HH'));\r\n    let minutes = parseInt(moment.utc(torrent['eta'] * 1000).format('mm'));\r\n    let eta_str = '';\r\n    let status_icon;\r\n\r\n    if (days > 0) eta_str += `${days}d `;\r\n    if (hours > 0) eta_str += `${hours}h `;\r\n    if (minutes > 0) eta_str += `${minutes}m`;\r\n\r\n    if (torrent['torrent_status'].indexOf('downloading') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowDown}/>;\r\n    else if (torrent['torrent_status'].indexOf('forcedDL') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowDown}/>;\r\n    else if (torrent['torrent_status'].indexOf('upload') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowUp}/>;\r\n    else if (torrent['torrent_status'].indexOf('pause') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faPause}/>;\r\n    else if (torrent['torrent_status'].indexOf('check') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faSpinner} title=\"Checking\"/>;\r\n    else if (torrent['torrent_status'].indexOf('stall') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faBan} title=\"Stalled\"/>;\r\n    else if (torrent['torrent_status'].indexOf('queued') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faClock} title=\"Queued\"/>;\r\n    else\r\n        status_icon = <span className=\"margin-left-10\">{torrent['torrent_status']}</span>;\r\n\r\n    return filters['name'] ?\r\n        <tbody className=\"torrent-info-container\">\r\n        <tr>\r\n            <td>\r\n                {torrent['name'].replace('[NotAdded]', '')}\r\n            </td>\r\n            {filters['size'] ? <td>\r\n                <FontAwesomeIcon icon={faHdd}/>\r\n                <span className=\"color-secondary\">{getBytesToSize(torrent['size'])}</span>\r\n            </td> : null}\r\n            <td>\r\n                {status_icon} <span className=\"color-secondary\">{getProgress(torrent['progress'])}%</span>\r\n            </td>\r\n            {filters['dl_speed'] ? <td>\r\n                            <span><FontAwesomeIcon icon={faDownload}/>{' '}\r\n                                <span className={torrent['dl_speed'] > 0 ? 'color-secondary' : null}>\r\n                                {getSpeed(torrent['dl_speed'])}</span></span>\r\n            </td> : null}\r\n            {filters['up_speed'] ? <td>\r\n                            <span><FontAwesomeIcon icon={faUpload}/>{' '}\r\n                                <span className={torrent['up_speed'] > 0 ? 'color-secondary' : null}>\r\n                                {getSpeed(torrent['up_speed'])}</span></span>\r\n            </td> : null}\r\n            {filters['remaining'] ? <td>\r\n                <FontAwesomeIcon icon={faPuzzlePiece} title=\"Remaining\"/>{' '}\r\n                <span className=\"color-secondary\">{getBytesToSize(torrent['amount_left'])}</span>\r\n            </td> : null}\r\n            {filters['seeds'] ? <td>\r\n                <FontAwesomeIcon icon={faUsers} className=\"color-green\"/>{' '}\r\n                <span className=\"color-secondary\">{torrent['num_seeds']}</span>\r\n            </td> : null}\r\n            {filters['leechs'] ? <td>\r\n                <FontAwesomeIcon icon={faUsers} className=\"color-danger\"/>{' '}\r\n                <span className=\"color-secondary\">{torrent['num_leechs']}</span>\r\n            </td> : null}\r\n            {filters['eta'] ? <td>\r\n                <FontAwesomeIcon icon={faClock}/>{' '}\r\n                <span className=\"color-secondary\">{torrent['eta'] < 8640000 ? eta_str :\r\n                    <FontAwesomeIcon icon={faInfinity}/>}</span>\r\n            </td> : null}\r\n        </tr>\r\n        <tr>\r\n            <td className=\"padding-bottom-10\" colSpan=\"20\">\r\n                <LinearProgress variant=\"determinate\" color=\"secondary\" value={getProgress(torrent['progress'])}/>\r\n            </td>\r\n        </tr>\r\n        </tbody> :\r\n        <div className=\"torrent-info-container\">\r\n            <div>\r\n                <p className=\"color-secondary-dark\">\r\n                    {filters['name'] ? <span className=\"torrent-info\">\r\n                    {torrent['name'].replace('[NotAdded]', '')}\r\n                </span> : null}\r\n\r\n                    {filters['size'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faHdd}/>{' '}\r\n                        <span>{getBytesToSize(torrent['size'])}</span>\r\n                </span> : null}\r\n\r\n                    <span className=\"torrent-info\">{status_icon} {getProgress(torrent['progress'])}%</span>\r\n\r\n                    {filters['dl_speed'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faDownload}/>{' '}\r\n                        <span className={torrent['dl_speed'] > 0 ? 'color-secondary' : null}>\r\n                        {getSpeed(torrent['dl_speed'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['up_speed'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUpload}/>{' '}\r\n                        <span className={torrent['up_speed'] > 0 ? 'color-secondary' : null}>\r\n                        {getSpeed(torrent['up_speed'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['remaining'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faPuzzlePiece} title=\"Remaining\"/>{' '}\r\n                        <span>{getBytesToSize(torrent['amount_left'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['seeds'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUsers} className=\"color-green\"/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['num_seeds']}</span>\r\n                </span> : null}\r\n                    {filters['leechs'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUsers} className=\"color-danger\"/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['num_leechs']}</span>\r\n                </span> : null}\r\n\r\n                    {filters['eta'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faClock}/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['eta'] < 8640000 ? eta_str :\r\n                            <FontAwesomeIcon icon={faInfinity}/>}</span>&nbsp;\r\n                </span> : null}\r\n                </p>\r\n            </div>\r\n            <LinearProgress variant=\"determinate\" color=\"secondary\" value={getProgress(torrent['progress'])}/>\r\n        </div>;\r\n}","import * as Yup from \"yup\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {Form, Formik} from \"formik\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function GoToPageDialog(props) {\r\n    const {open, current_page, total_pages, onClose, goToPage} = props;\r\n\r\n    const GoToPageSchema = Yup.object().shape({\r\n        page_number: Yup.number()\r\n            .min(1, \"Page number must be above 1.\")\r\n            .max(total_pages, `Page number can't exceed the last page ${total_pages}.`)\r\n            .required('Required'),\r\n    });\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"go-to-page-dialog-title\" open={open}>\r\n            <div className=\"go-to-page-dialog\">\r\n                <DialogTitle id=\"go-to-page-dialog-title\">Go to page</DialogTitle>\r\n\r\n                <Formik\r\n                    initialValues={{page_number: current_page}}\r\n                    validationSchema={GoToPageSchema}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        goToPage(values.page_number);\r\n                        onClose();\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({isSubmitting, errors, touched, values, handleChange, handleBlur}) => (\r\n                        <Form className=\"content-container\">\r\n                            <TextField\r\n                                label=\"Page\"\r\n                                type=\"number\"\r\n                                name=\"page_number\"\r\n                                value={values.page_number}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                error={errors.page_number && touched.page_number}\r\n                                helperText={(errors.page_number && touched.page_number) && errors.page_number}/>\r\n                            <CyberButton color=\"primary\" type=\"submit\" variant=\"contained\"\r\n                                         disabled={isSubmitting}>Go</CyberButton>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Moment from 'react-moment'\r\n\r\nimport {getNews} from '../../../actions/requiem'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {getTime} from \"./snippets\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass News extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getNews();\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.news[ApiResult.count] / 5)) {\r\n            this.setState({current_page: page});\r\n            this.props.getNews(page);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {news, news_is_loading} = this.props;\r\n        let news_results = [];\r\n\r\n        try {\r\n            if (news['results'].length > 0) news_results = news['results'];\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <Grid id=\"News-Container\" container>\r\n                {!news_is_loading ?\r\n                    news_results.map((post, i) => (\r\n                        <Grid item xs={12} className=\"report box-light\" key={i}>\r\n                            <h3 className=\"color-blue\">{post['title']}</h3>\r\n                            <p className=\"color-dark-blue indent-1em\">{post['description']}</p>\r\n                            {post['anime_entries'].length > 0 ?\r\n                                <p className=\"color-dark-blue\">Total <span className={post['title']\r\n                                    .indexOf('removed') >= 0 ? 'color-red' : 'color-blue'}>\r\n                                            {post['anime_entries'].length}</span></p>\r\n                                : post['anime_server_entries'].length > 0 ?\r\n                                    <p className=\"color-dark-blue\">Total <span className=\"color-magenta\">\r\n                                                {post['anime_server_entries'].length}</span></p>\r\n                                    : post['manga_entries'].length > 0 ?\r\n                                        <p className=\"color-dark-blue\">Total <span className={post['title']\r\n                                            .indexOf('removed') >= 0 ? 'color-red' : 'color-blue'}>\r\n                                                    {post['manga_entries'].length}</span></p>\r\n                                        : post['manga_server_entries'].length > 0 ?\r\n                                            <p className=\"color-dark-blue\">Total&nbsp;\r\n                                                <span className=\"color-magenta\">\r\n                                                            {post['manga_server_entries'].length}</span></p>\r\n                                            : post['characters_entries'].length > 0 ?\r\n                                                <p className=\"color-dark-blue\">\r\n                                                    Total <span className={post['title']\r\n                                                    .indexOf('removed') >= 0 ? 'color-red'\r\n                                                    : 'color-blue'}>\r\n                                                            {post['characters_entries'].length}</span></p>\r\n                                                : null}\r\n                            {/*{post['anime_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['anime_entries']} branch={BRANCH_TYPE_ANIME}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    server={false}/> : null}*/}\r\n                            {/*{post['anime_server_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['anime_server_entries']}*/}\r\n                            {/*                    branch={BRANCH_TYPE_ANIME} server={true}/> : null}*/}\r\n                            {/*{post['manga_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['manga_entries']} branch={BRANCH_TYPE_MANGA}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    server={false}/> : null}*/}\r\n                            {/*{post['manga_server_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['manga_server_entries']}*/}\r\n                            {/*                    branch={BRANCH_TYPE_MANGA} server={true}/> : null}*/}\r\n                            {/*{post['characters_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['characters_entries']}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    branch={BRANCH_TYPE_CHARACTERS} server={false}/> : null}*/}\r\n                            <div className=\"duration\">\r\n                                <p className=\"color-dark-blue\">\r\n                                    Date: <span className=\"color-white\"><Moment\r\n                                    format=\"DD MMM YYYY HH:mm:ss\"\r\n                                    date={post['datetime_created']}/>\r\n                                        </span>\r\n                                </p>\r\n                                {post['operation_duration_sec'] ?\r\n                                    <p className=\"color-dark-blue margin-left-20\">\r\n                                        Duration: <span className=\"color-white\">\r\n                                                {getTime(post['operation_duration_sec'])}\r\n                                            </span>\r\n                                    </p>\r\n                                    : null}\r\n                            </div>\r\n                        </Grid>))\r\n                    : <Loading text={'News Loading'}/>}\r\n\r\n                {!news_is_loading ? <div className=\"pagination\">\r\n                    <Pagination\r\n                        count={Math.ceil(this.props.news[ApiResult.count] / 5)}\r\n                        color=\"primary\"\r\n                        siblingCount={3}\r\n                        page={this.state.current_page}\r\n                        onChange={(type, page) => {\r\n                            playClickSound();\r\n                            if (page !== this.state.current_page)\r\n                                this.goToPage(page);\r\n                            else\r\n                                this.setState({page_dialog_open: true})\r\n                        }}\r\n                    />\r\n                    <GoToPageDialog\r\n                        open={this.state.page_dialog_open}\r\n                        current_page={this.state.current_page}\r\n                        total_pages={Math.ceil(this.props.news[ApiResult.count] / 5)}\r\n                        goToPage={this.goToPage}\r\n                        onClose={this.closePageDialog}/>\r\n                </div> : null}\r\n\r\n\r\n                     {/*<Pagination page={news} items_per_page={5} getItems={getNews}*/}\r\n                     {/*                            scroll_to={[0, 550]}/> : null}*/}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    news_is_loading: state.requiem.news_is_loading,\r\n    news: state.requiem.news,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getNews})(News)\r\n","export const particles_params = {\r\n    \"particles\": {\r\n        \"number\": {\r\n            \"value\": 100,\r\n            \"density\": {\r\n                \"enable\": true,\r\n                \"value_area\": 263\r\n            }\r\n        },\r\n        \"color\": {\r\n            \"value\": \"#ffffff\"\r\n        },\r\n        \"shape\": {\r\n            \"type\": \"circle\",\r\n            \"stroke\": {\r\n                \"width\": 0,\r\n                \"color\": \"#000000\"\r\n            },\r\n            \"polygon\": {\r\n                \"nb_sides\": 5\r\n            },\r\n            \"image\": {\r\n                \"src\": \"img/github.svg\",\r\n                \"width\": 100,\r\n                \"height\": 100\r\n            }\r\n        },\r\n        \"opacity\": {\r\n            \"value\": 0.3,\r\n            \"random\": false,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 1,\r\n                \"opacity_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"size\": {\r\n            \"value\": 2,\r\n            \"random\": true,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 40,\r\n                \"size_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"line_linked\": {\r\n            \"enable\": true,\r\n            \"distance\": 40,\r\n            \"color\": \"#ffffff\",\r\n            \"opacity\": 0.15,\r\n            \"width\": 1\r\n        },\r\n        \"move\": {\r\n            \"enable\": true,\r\n            \"speed\": 0.2,\r\n            \"direction\": \"none\",\r\n            \"random\": true,\r\n            \"straight\": false,\r\n            \"out_mode\": \"out\",\r\n            \"bounce\": false,\r\n            \"attract\": {\r\n                \"enable\": false,\r\n                \"rotateX\": 600,\r\n                \"rotateY\": 1200\r\n            }\r\n        }\r\n    },\r\n    \"interactivity\": {\r\n        \"detect_on\": \"window\",\r\n        \"events\": {\r\n            \"onhover\": {\r\n                \"enable\": true,\r\n                \"mode\": \"grab\"\r\n            },\r\n            \"onclick\": {\r\n                \"enable\": true,\r\n                \"mode\": \"push\"\r\n            },\r\n            \"resize\": true\r\n        },\r\n        \"modes\": {\r\n            \"grab\": {\r\n                \"distance\": 50,\r\n                \"line_linked\": {\r\n                    \"opacity\": 1\r\n                }\r\n            },\r\n            \"bubble\": {\r\n                \"distance\": 400,\r\n                \"size\": 40,\r\n                \"duration\": 2,\r\n                \"opacity\": 8,\r\n                \"speed\": 3\r\n            },\r\n            \"repulse\": {\r\n                \"distance\": 200,\r\n                \"duration\": 0.4\r\n            },\r\n            \"push\": {\r\n                \"particles_nb\": 4\r\n            },\r\n            \"remove\": {\r\n                \"particles_nb\": 2\r\n            }\r\n        }\r\n    },\r\n    \"retina_detect\": true\r\n};\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Particles from 'react-particles-js';\r\n\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/home.css'\r\nimport {getAllUsers} from \"../../actions/users\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport {Profile as ProfileModel, User} from \"../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../layout/common/common\";\r\nimport {CYBER_GENESIS_URL} from \"../../globals\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport {getBrowseGridListCols} from \"../functions\";\r\nimport {PROFILE} from \"../../urls\";\r\nimport News from \"../requiem/snippets/News\";\r\nimport {particles_params} from \"./functions\";\r\n\r\n\r\nclass Home extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber-Space';\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        this.props.getAllUsers();\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    render() {\r\n        // const video_url = 'https://finkiukim-my.sharepoint.com/personal/adrian_kostoski_students_finki_ukim_mk/_layouts/15/download.aspx?SourceUrl=%2Fpersonal%2Fadrian_kostoski_students_finki_ukim_mk%2FDocuments%2FAnime-Hosting%2F%5BCoalgirls%5D_Infinite_Stratos_01_(1920x1080_Blu-Ray_FLAC)_%5BA9B39255%5D.mkv&correlationId=a16fc107-db97-49a0-8f22-34972ccd6a98&psi=a98eab6f-0e64-4e87-ae49-72aef5c08037&ccat=2&cs=fHxPbmVVcFdlYlBsYXllcg%3D%3D&App=OneDriveWebVideo';\r\n        // const video_url2 = 'https://finkiukim-my.sharepoint.com/personal/adrian_kostoski_students_finki_ukim_mk/_layouts/15/download.aspx?SourceUrl=%2Fpersonal%2Fadrian_kostoski_students_finki_ukim_mk%2FDocuments%2FAnime-Hosting%2F%5BCoalgirls%5D_Infinite_Stratos_01_(1920x1080_Blu-Ray_FLAC)_%5BA9B39255%5D.mkv&correlationId=a16fc107-db97-49a0-8f22-34972ccd6a98&psi=a98eab6f-0e64-4e87-ae49-72aef5c08037&ccat=2&cs=fHxPbmVVcFdlYlBsYXllcg%3D%3D&App=download';\r\n\r\n        const video_url_dropbox = 'https://www.dropbox.com/s/zoy9wf489bvyhmq/%5BHorribleSubs%5D%20Kateikyoushi%20Hitman%20Reborn%21%20-%2001%20%5B480p%5D.mkv?raw=1';\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"Home\" container>\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <News/>*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid item xs={12}>\r\n                        <Particles className=\"bg-particles\" params={particles_params}/>\r\n                    </Grid>\r\n\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <iframe*/}\r\n                    {/*        src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fmijomir.bulgarin%2Fposts%2F467447447764547&width=500&show_text=false&height=281&appId\"*/}\r\n                    {/*        width=\"500\" height=\"281\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameBorder=\"0\"*/}\r\n                    {/*        allowFullScreen=true*/}\r\n                    {/*        allow=\"autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share\"*/}\r\n                    {/*        allowFullScreen=\"true\"></iframe>*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <p>Video:</p>*/}\r\n                    {/*    <video width=\"30%\" controls>*/}\r\n                    {/*        <source*/}\r\n                    {/*            src={video_url_dropbox}*/}\r\n                    {/*        />*/}\r\n                    {/*        Your browser does not support the video tag.*/}\r\n                    {/*    </video>*/}\r\n                    {/*    /!*<video width=\"30%\" controls>*!/*/}\r\n                    {/*    /!*    <source*!/*/}\r\n                    {/*    /!*        src={video_url}*!/*/}\r\n                    {/*    /!*    />*!/*/}\r\n                    {/*    /!*    Your browser does not support the video tag.*!/*/}\r\n                    {/*    /!*</video>*!/*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid item xs={12}>\r\n                        <h1>Users</h1>\r\n                    </Grid>\r\n\r\n                    {this.props.all_users_loaded ? <Grid item xs={12}>\r\n                        <GridList cellHeight={400} className=\"user-card-container\" cols={this.state.gridlist_cols}>\r\n                            {this.props.all_users.map((user, x) => (\r\n                                <GridListTile key={x} cols={1}>\r\n                                    <CyberLink classNames=\"user-card\" to={PROFILE(user[User.id])}>\r\n                                        <div className=\"card-text\">\r\n                                            <h2>{user[User.username]}</h2>\r\n                                        </div>\r\n                                        <PreLoadImage\r\n                                            src={`${CYBER_GENESIS_URL}${user[User.profile][ProfileModel.profile_image]}`}\r\n                                            alt={'Avatar'}/>\r\n                                    </CyberLink>\r\n                                </GridListTile>\r\n\r\n                                // <Card className=\"user-card\" variant=\"outlined\">\r\n                                //     <CardContent>\r\n                                //         <Typography gutterBottom>{user[User.username]}</Typography>\r\n                                //         <PreLoadImage\r\n                                //             src={`${CYBER_GENESIS_URL}${user[User.profile][ProfileModel.profile_image]}`}\r\n                                //             alt={'Avatar'}/>\r\n                                //     </CardContent>\r\n                                //     <CardActions>\r\n                                //     </CardActions>\r\n                                // </Card>\r\n                            ))}\r\n                        </GridList>\r\n                    </Grid> : this.props.users_loading ? <Loading/> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    users_loading: state.users.users_loading,\r\n    all_users_loaded: state.users.all_users_loaded,\r\n    all_users: state.users.all_users,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllUsers})(Home)\r\n","function compareByLabel(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = a['label'];\r\n    const second = b['label'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nfunction compareByStat(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['stat'];\r\n    const second = a['stat'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nexport function getDataTypes(statistics) {\r\n\r\n    let data = [\r\n        {label: 'Movie', stat: statistics['total_movie'], color: '', hoverColor: ''},\r\n        {label: 'Music', stat: statistics['total_music'], color: '', hoverColor: ''},\r\n        {label: 'ONA', stat: statistics['total_ona'], color: '', hoverColor: ''},\r\n        {label: 'OVA', stat: statistics['total_ova'], color: '', hoverColor: ''},\r\n        {label: 'Special', stat: statistics['total_special'], color: '', hoverColor: ''},\r\n        {label: 'TV', stat: statistics['total_tv'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            // borderColor: 'white',\r\n            // hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataSources(statistics) {\r\n    let data = [\r\n        {label: 'Original', stat: statistics['total_original_anime'], meanScore: 0},\r\n        {label: 'Light Novel', stat: statistics['total_anime_from_light_novel'], meanScore: 0},\r\n        {label: 'Music', stat: statistics['total_anime_from_music'], meanScore: 0},\r\n        {label: 'Manga', stat: statistics['total_anime_from_manga'], meanScore: 0},\r\n        {label: 'Other', stat: statistics['total_anime_from_other'], meanScore: 0},\r\n        {label: 'Visual Novel', stat: statistics['total_anime_from_visual_novel'], meanScore: 0},\r\n        {label: 'Book', stat: statistics['total_anime_from_book'], meanScore: 0},\r\n        {label: 'Game', stat: statistics['total_anime_from_game'], meanScore: 0},\r\n        {label: 'Web Manga', stat: statistics['total_anime_from_web_manga'], meanScore: 0},\r\n        {label: 'Novel', stat: statistics['total_anime_from_novel'], meanScore: 0},\r\n        {label: 'Picture Book', stat: statistics['total_anime_from_picture_book'], meanScore: 0},\r\n        {label: 'Card Game', stat: statistics['total_anime_from_card_game'], meanScore: 0},\r\n        {label: '4-Kom Manga', stat: statistics['total_anime_from_4_kom_manga'], meanScore: 0},\r\n        {label: 'Digital Manga', stat: statistics['total_anime_from_digital_manga'], meanScore: 0},\r\n        {label: 'Radio', stat: statistics['total_anime_from_radio'], meanScore: 0},\r\n    ];\r\n    try {\r\n        data = [\r\n            {\r\n                label: 'Original',\r\n                stat: statistics['total_original_anime'],\r\n                meanScore: statistics['total_original_anime_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Light Novel',\r\n                stat: statistics['total_anime_from_light_novel'],\r\n                meanScore: statistics['total_anime_from_light_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Music',\r\n                stat: statistics['total_anime_from_music'],\r\n                meanScore: statistics['total_anime_from_music_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Manga',\r\n                stat: statistics['total_anime_from_manga'],\r\n                meanScore: statistics['total_anime_from_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Other',\r\n                stat: statistics['total_anime_from_other'],\r\n                meanScore: statistics['total_anime_from_other_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Visual Novel',\r\n                stat: statistics['total_anime_from_visual_novel'],\r\n                meanScore: statistics['total_anime_from_visual_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Book',\r\n                stat: statistics['total_anime_from_book'],\r\n                meanScore: statistics['total_anime_from_book_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Game',\r\n                stat: statistics['total_anime_from_game'],\r\n                meanScore: statistics['total_anime_from_game_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Web Manga',\r\n                stat: statistics['total_anime_from_web_manga'],\r\n                meanScore: statistics['total_anime_from_web_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Novel',\r\n                stat: statistics['total_anime_from_novel'],\r\n                meanScore: statistics['total_anime_from_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Picture Book',\r\n                stat: statistics['total_anime_from_picture_book'],\r\n                meanScore: statistics['total_anime_from_picture_book_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Card Game',\r\n                stat: statistics['total_anime_from_card_game'],\r\n                meanScore: statistics['total_anime_from_card_game_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: '4-Kom Manga',\r\n                stat: statistics['total_anime_from_4_kom_manga'],\r\n                meanScore: statistics['total_anime_from_4_kom_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Digital Manga',\r\n                stat: statistics['total_anime_from_digital_manga'],\r\n                meanScore: statistics['total_anime_from_digital_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Radio',\r\n                stat: statistics['total_anime_from_radio'],\r\n                meanScore: statistics['total_anime_from_radio_mean'].toFixed(2)\r\n            },\r\n        ];\r\n    } catch (e) {\r\n    }\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let mean_score_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n        mean_score_data.push(data[x].meanScore);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: mean_score_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '#',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {\r\n                mode: 'label'\r\n            },\r\n            elements: {\r\n                line: {\r\n                    fill: false\r\n                }\r\n            },\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {\r\n                            display: false\r\n                        },\r\n                        labels: {\r\n                            show: true\r\n                        }\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {\r\n                            display: false\r\n                        },\r\n                        labels: {\r\n                            show: true\r\n                        },\r\n                        ticks: {\r\n                            min: 0,\r\n                            max: 10,\r\n                            stepSize: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n\r\nexport function getDataStatuses(statistics) {\r\n\r\n    return {\r\n        labels: [\r\n            'Finished Airing',\r\n            'Not yet Aired',\r\n            'Currently Airing'\r\n        ],\r\n        datasets: [{\r\n            data: [16952, 428, 387],\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRated(statistics) {\r\n\r\n    let data = [\r\n        {label: 'G', stat: statistics['total_rated_g'], color: '', hoverColor: ''},\r\n        {label: 'PG-C', stat: statistics['total_rated_pgc'], color: '', hoverColor: ''},\r\n        {label: 'PG-13', stat: statistics['total_rated_pg13'], color: '', hoverColor: ''},\r\n        {label: 'R', stat: statistics['total_rated_r'], color: '', hoverColor: ''},\r\n        {label: 'R+', stat: statistics['total_rated_r_plus'], color: '', hoverColor: ''},\r\n        {label: 'Rx', stat: statistics['total_rated_rx'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataQualities(statistics) {\r\n\r\n    let data = [\r\n        {label: '2160p', stat: statistics['total_quality_2160p']},\r\n        {\r\n            label: '1080p',\r\n            stat: (statistics['total_quality_1080p'] + statistics['total_quality_960p']),\r\n        },\r\n        {label: '720p', stat: statistics['total_quality_720p']},\r\n        {\r\n            label: '480p',\r\n            stat: (statistics['total_quality_480p'] + statistics['total_quality_528p'] +\r\n                statistics['total_quality_540p'] + statistics['total_quality_560p'] + statistics['total_quality_576p']),\r\n        },\r\n        {\r\n            label: '360p',\r\n            stat: (statistics['total_quality_360p'] + statistics['total_quality_396p']),\r\n        },\r\n        {\r\n            label: '240p',\r\n            stat: (statistics['total_quality_240p'] + statistics['total_quality_288p']),\r\n        },\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataGenres(statistics) {\r\n\r\n    let data = [\r\n        {label: 'Action', stat: statistics['total_genre_action'], color: '', hoverColor: ''},\r\n        {label: 'Adventure', stat: statistics['total_genre_adventure'], color: '', hoverColor: ''},\r\n        {label: 'Cars', stat: statistics['total_genre_cars'], color: '', hoverColor: ''},\r\n        {label: 'Comedy', stat: statistics['total_genre_comedy'], color: '', hoverColor: ''},\r\n        {label: 'Dementia', stat: statistics['total_genre_dementia'], color: '', hoverColor: ''},\r\n        {label: 'Demons', stat: statistics['total_genre_demons'], color: '', hoverColor: ''},\r\n        {label: 'Drama', stat: statistics['total_genre_drama'], color: '', hoverColor: ''},\r\n        {label: 'Ecchi', stat: statistics['total_genre_ecchi'], color: '', hoverColor: ''},\r\n        {label: 'Fantasy', stat: statistics['total_genre_fantasy'], color: '', hoverColor: ''},\r\n        {label: 'Game', stat: statistics['total_genre_game'], color: '', hoverColor: ''},\r\n        {label: 'Harem', stat: statistics['total_genre_harem'], color: '', hoverColor: ''},\r\n        {label: 'Hentai', stat: statistics['total_genre_hentai'], color: '', hoverColor: ''},\r\n        {label: 'Historical', stat: statistics['total_genre_historical'], color: '', hoverColor: ''},\r\n        {label: 'Horror', stat: statistics['total_genre_horror'], color: '', hoverColor: ''},\r\n        {label: 'Josei', stat: statistics['total_genre_josei'], color: '', hoverColor: ''},\r\n        {label: 'Kids', stat: statistics['total_genre_kids'], color: '', hoverColor: ''},\r\n        {label: 'Magic', stat: statistics['total_genre_magic'], color: '', hoverColor: ''},\r\n        {label: 'Martial Arts', stat: statistics['total_genre_martial_arts'], color: '', hoverColor: ''},\r\n        {label: 'Mecha', stat: statistics['total_genre_mecha'], color: '', hoverColor: ''},\r\n        {label: 'Military', stat: statistics['total_genre_military'], color: '', hoverColor: ''},\r\n        {label: 'Music', stat: statistics['total_genre_music'], color: '', hoverColor: ''},\r\n        {label: 'Mystery', stat: statistics['total_genre_mystery'], color: '', hoverColor: ''},\r\n        {label: 'Parody', stat: statistics['total_genre_parody'], color: '', hoverColor: ''},\r\n        {label: 'Police', stat: statistics['total_genre_police'], color: '', hoverColor: ''},\r\n        {label: 'Psychological', stat: statistics['total_genre_psychological'], color: '', hoverColor: ''},\r\n        {label: 'Romance', stat: statistics['total_genre_romance'], color: '', hoverColor: ''},\r\n        {label: 'Samurai', stat: statistics['total_genre_samurai'], color: '', hoverColor: ''},\r\n        {label: 'School', stat: statistics['total_genre_school'], color: '', hoverColor: ''},\r\n        {label: 'Sci-Fi', stat: statistics['total_genre_sci_fi'], color: '', hoverColor: ''},\r\n        {label: 'Seinen', stat: statistics['total_genre_seinen'], color: '', hoverColor: ''},\r\n        {label: 'Shoujo', stat: statistics['total_genre_shoujo'], color: '', hoverColor: ''},\r\n        {label: 'Shoujo Ai', stat: statistics['total_genre_shoujo_ai'], color: '', hoverColor: ''},\r\n        {label: 'Shounen', stat: statistics['total_genre_shounen'], color: '', hoverColor: ''},\r\n        {label: 'Shounen Ai', stat: statistics['total_genre_shounen_ai'], color: '', hoverColor: ''},\r\n        {label: 'Slice of Life', stat: statistics['total_genre_slice_of_life'], color: '', hoverColor: ''},\r\n        {label: 'Space', stat: statistics['total_genre_space'], color: '', hoverColor: ''},\r\n        {label: 'Sports', stat: statistics['total_genre_sports'], color: '', hoverColor: ''},\r\n        {label: 'Super Power', stat: statistics['total_genre_super_power'], color: '', hoverColor: ''},\r\n        {label: 'Supernatural', stat: statistics['total_genre_supernatural'], color: '', hoverColor: ''},\r\n        {label: 'Thriller', stat: statistics['total_genre_thriller'], color: '', hoverColor: ''},\r\n        {label: 'Vampire', stat: statistics['total_genre_vampire'], color: '', hoverColor: ''},\r\n        {label: 'Yaoi', stat: statistics['total_genre_yaoi'], color: '', hoverColor: ''},\r\n        {label: 'Yuri', stat: statistics['total_genre_yuri'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '#',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataYears(statistics) {\r\n\r\n    let parsed_data;\r\n    let parsed_data_keys;\r\n    let data = [];\r\n    try {\r\n        parsed_data = JSON.parse(statistics['total_anime_per_year']);\r\n        parsed_data_keys = Object.keys(parsed_data);\r\n        for (let x = 0; x < parsed_data_keys.length; x++) {\r\n            let element = {label: parsed_data_keys[x], stat: parsed_data[parsed_data_keys[x]]};\r\n            data.push(element)\r\n        }\r\n    } catch (e) {\r\n    }\r\n\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '#',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {Bar, Doughnut} from 'react-chartjs-2';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport {getAnimeDataWithStatistics} from '../../../actions/anime'\r\nimport {\r\n    getDataGenres,\r\n    getDataQualities,\r\n    getDataRated,\r\n    getDataSources,\r\n    getDataStatuses,\r\n    getDataTypes,\r\n    getDataYears\r\n} from \"./statistics\";\r\nimport {AnimeDataStatistics, UserList} from \"../../../models\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport CountUp from \"react-countup\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nclass AnimeStatistics extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeDataWithStatistics();\r\n    }\r\n\r\n    render() {\r\n        let data_types = getDataTypes(this.props.anime_data_statistics);\r\n        let data_sources = getDataSources(this.props.anime_data_statistics)[0];\r\n        let data_sources_options = getDataSources(this.props.anime_data_statistics)[1];\r\n        let data_statuses = getDataStatuses(this.props.anime_data_statistics);\r\n        let data_rated = getDataRated(this.props.anime_data_statistics);\r\n        let data_genres = getDataGenres(this.props.anime_data_statistics);\r\n        let data_qualities = getDataQualities(this.props.anime_data_statistics);\r\n        let data_years = getDataYears(this.props.anime_data_statistics);\r\n\r\n        return (\r\n            <Grid container id=\"Anime-Statistics\">\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <h3>ANIME STATISTICS</h3>\r\n                </Grid>\r\n                <Grid item xl={2}/>\r\n                <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total anime:</td>\r\n                            <td><p>{this.props.anime_data_statistics[AnimeDataStatistics.total_anime]} (\r\n                                {this.props.anime_data_statistics[AnimeDataStatistics.total_anime] +\r\n                                this.props.anime_data_statistics[AnimeDataStatistics.total_anime_pending_mal] +\r\n                                this.props.anime_data_statistics[AnimeDataStatistics.total_anime_deleted_mal]}\r\n                                )</p></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Pending by MAL:</td>\r\n                            <td>\r\n                                <p className=\"color-warning\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_pending_mal]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Deleted by MAL:</td>\r\n                            <td>\r\n                                <p className=\"color-danger\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_deleted_mal]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Mean Score:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.mean_score] ?\r\n                                        this.props.anime_data_statistics[AnimeDataStatistics.mean_score].toFixed(2) : null}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total episodes:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_episodes]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total duration:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_minutes]}min (\r\n                                    {(this.props.anime_data_statistics[AnimeDataStatistics.total_minutes] / 1440)\r\n                                        .toFixed(2)} days)\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Downloaded:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_downloaded]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Downloading:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_downloading]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Total size:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {(this.props.anime_data_statistics[AnimeDataStatistics.total_downloaded_size] / 1024)\r\n                                        .toFixed(1)}TB\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Type</h5>\r\n                        <Doughnut height={100} width={100} data={data_types}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Rated</h5>\r\n                        <Doughnut height={100} width={100} data={data_rated}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Quality</h5>\r\n                        <Doughnut height={100} width={100} data={data_qualities}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Status</h5>\r\n                        <Doughnut height={100} width={100} data={data_statuses}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Sources</h5>\r\n                        <Bar\r\n                            data={data_sources}\r\n                            width={100}\r\n                            height={50}\r\n                            options={data_sources_options}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Genres</h5>\r\n                        <Bar\r\n                            data={data_genres}\r\n                            width={100}\r\n                            height={50}\r\n                            options={{\r\n                                maintainAspectRatio: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Anime per Year</h5>\r\n                        <Bar\r\n                            data={data_years}\r\n                            width={100}\r\n                            height={50}\r\n                            options={{\r\n                                maintainAspectRatio: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data_statistics: state.anime.anime_data_statistics,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeDataWithStatistics})(AnimeStatistics)","import React from 'react';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\r\n\r\n\r\nexport function CopyTextToClipboard(props) {\r\n    const {text} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleTooltipClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleTooltipOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"copy-to-clipboard-text\">\r\n            <ClickAwayListener onClickAway={handleTooltipClose}>\r\n                <Tooltip\r\n                    PopperProps={{disablePortal: true,}}\r\n                    onClose={handleTooltipClose}\r\n                    open={open}\r\n                    disableFocusListener\r\n                    disableHoverListener\r\n                    disableTouchListener\r\n                    title=\"Copied!\"\r\n                >\r\n                    <CopyToClipboard text={text}>\r\n                        <span onClick={handleTooltipOpen}>{text}</span>\r\n                    </CopyToClipboard>\r\n                </Tooltip>\r\n            </ClickAwayListener>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../layout/sounds\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DisplayTabs(props) {\r\n    const {tabs} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    {tabs.map((tab, x) => (\r\n                        <Tab disabled={tab.disabled} label={tab.label} {...a11yProps(x)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    ))}\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                {tabs.map((tab, x) => (\r\n                    <TabPanel value={value} index={x} dir={theme.direction} className=\"box-light\">\r\n                        {tab.tab}\r\n                    </TabPanel>\r\n                ))}\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {addAnimeEntry, deleteAnimeEntry, updateAnimeEntry} from \"../../../../actions/users\";\r\nimport {getUserAnimeEntryFormInitialValues, UserAnimeEntryForm} from \"./forms\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\nimport '../../../../assets/css/forms.css';\r\n\r\n\r\nclass AnimeEntryModalForm extends Component {\r\n    static propTypes = {\r\n        /** Classnames for the open dialog btn */\r\n        classNames: PropTypes.object,\r\n        /** Title of the Anime */\r\n        title: PropTypes.string,\r\n        /** ID of the Anime */\r\n        id: PropTypes.number.isRequired,\r\n        /** User entry of the anime */\r\n        user_anime_entry: PropTypes.object,\r\n        /** If the entry is being edited */\r\n        edit: PropTypes.bool,\r\n        /** User list info for filtering on update entry\r\n         * {user_list_pk: list_pk, user_list_filter: selected_filter} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let edit = true;\r\n        if (this.props.edit === undefined) {\r\n            if (isEmpty(this.props.user_anime_entry))\r\n                edit = false;\r\n        } else edit = this.props.edit;\r\n\r\n        const initial_values = getUserAnimeEntryFormInitialValues(this.props.id, this.props.user_anime_entry, edit);\r\n\r\n        return (\r\n                <div id=\"User-Title-Entry\">\r\n                    <CyberButton classNames={this.props.classNames} variant=\"outlined\" color=\"primary\"\r\n                                 onClick={this.handleClickOpen}>\r\n                        <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                    </CyberButton>\r\n                    <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                            className=\"user-title-entry-dialog\">\r\n                        {edit ? <DialogTitle id=\"form-dialog-title\">Edit {this.props.title}</DialogTitle>\r\n                            : <DialogTitle id=\"form-dialog-title\">Add {this.props.title}</DialogTitle>}\r\n                        <DialogContent>\r\n                            <UserAnimeEntryForm initial_values={initial_values} edit={edit} id={this.props.id}\r\n                                                list={this.props.list} handleClose={this.handleClose}/>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateAnimeEntry, addAnimeEntry, deleteAnimeEntry})(AnimeEntryModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {faEdit, faMinusSquare, faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons/faPlay\";\r\n\r\nimport {ANIME_TAB_NAME, CYBER_GENESIS_TAB_NAME, CYBER_GENESIS_URL} from \"../../globals\";\r\nimport {NOT_FOUND} from \"../../urls\";\r\nimport {Anime, AnimeOnServer, CDNCoverImages, CoverImages, User, UserAnimeEntry} from \"../../models\";\r\nimport {playClickSound, playHoverSound} from \"../layout/sounds\";\r\nimport {formatContentDateByKnown, getTitleCoverImage, isEmpty} from \"../functions\";\r\nimport {getAnime} from '../../actions/anime'\r\nimport {CopyTextToClipboard} from \"./snippets\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {DisplayTabs} from \"./TabsRoot\";\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {PreLoadImage} from \"../layout/common/common\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport {\r\n    AdminModalForms,\r\n    formatTitle,\r\n    getTitle,\r\n    getUserModalForms,\r\n    getUserTitleStatus,\r\n    getUserTitleStatusSummary, UserModalForms\r\n} from \"./functions\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/display.css'\r\nimport {faDownload, faPlus, faPlusSquare, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\nimport AnimeEntryModalForm from \"../user/forms/anime/AnimeEntryModalForm\";\r\nimport {getUserAnimeEntry} from \"../../actions/users\";\r\n\r\n\r\nexport const NONE = <span className=\"color-gray\">---</span>;\r\n\r\n\r\nclass Display extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** ID of the title */\r\n        param_id: PropTypes.number.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        title_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        title_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        title: PropTypes.object.isRequired,\r\n        /** Redux prop of user_title_status */\r\n        user_title_status: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        getTitle(this.props.branch, this.props.param_id);\r\n        if (this.props.user_authenticated)\r\n            getUserTitleStatus(this.props.branch, this.props.param_id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.user_authenticated !== this.props.user_authenticated)\r\n            getUserTitleStatus(this.props.branch, this.props.param_id);\r\n        if (prevProps.param_id !== this.props.param_id) {\r\n            window.scrollTo(0, 0);\r\n            getTitle(this.props.branch, this.props.param_id);\r\n            getUserTitleStatus(this.props.branch, this.props.param_id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const superuser = this.props.user && this.props.user[User.is_superuser];\r\n        const display_title = this.props.title_loaded ?\r\n            formatTitle(this.props.branch, this.props.title, superuser) : formatTitle();\r\n        const img_url = getTitleCoverImage(display_title.cdn_cover_images, display_title.cover_images);\r\n        const tabs_margin = !!(display_title.primary_set || display_title.primary_set_wide ||\r\n            display_title.secondary_set);\r\n        document.title = display_title.title ? display_title.title : CYBER_GENESIS_TAB_NAME;\r\n\r\n        if (this.props.status && this.props.status === 404)\r\n            return <Redirect to={NOT_FOUND}/>;\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Display\">\r\n                    {this.props.title_loaded ? <Grid container style={{marginBottom: 100}}>\r\n                        <Grid item xs={12} className=\"title-container\">\r\n                            <h1><CopyTextToClipboard text={display_title.title}/></h1>\r\n                            {superuser ? <AdminModalForms\r\n                                id={this.props.param_id}\r\n                                branch={this.props.branch}\r\n                                title={this.props.title}/> : null}\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <div className=\"details-container\">\r\n                                <div className=\"img-container\">\r\n                                    <PreLoadImage src={img_url} alt={`${this.props.branch} cover image`}/>\r\n                                </div>\r\n                                {this.props.user_authenticated ? <div className=\"user-buttons-container\">\r\n                                    <UserModalForms branch={this.props.branch} id={this.props.param_id} title={display_title.title} entry={this.props.user_title_status}/>\r\n                                    </div> : null}\r\n                                <div className=\"info-container box-light\">\r\n                                    <h2>Alternative Titles</h2>\r\n                                    <table>\r\n                                        <tbody>\r\n                                        {display_title.title_1 ? <tr>\r\n                                            <td>{display_title.title_1.label}</td>\r\n                                            <td>{display_title.title_1.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_1.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        {display_title.title_2 ? <tr>\r\n                                            <td>{display_title.title_2.label}</td>\r\n                                            <td>{display_title.title_2.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_2.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        {display_title.title_3 ? <tr>\r\n                                            <td>{display_title.title_3.label}</td>\r\n                                            <td>{display_title.title_3.title ?\r\n                                                <CopyTextToClipboard text={display_title.title_3.title}/> : NONE}</td>\r\n                                        </tr> : null}\r\n                                        </tbody>\r\n                                    </table>\r\n                                    <h2>Information</h2>\r\n                                    <h4>{this.props.branch} Information</h4>\r\n                                    {display_title.info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                    <h4>Database Information</h4>\r\n                                    {display_title.db_info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.db_info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                    <h4>Users Information</h4>\r\n                                    {display_title.users_info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.users_info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info ? item.info : NONE}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={9} className=\"main-container\">\r\n                            {this.props.user_authenticated && !isEmpty(this.props.user_title_status) ?\r\n                                getUserTitleStatusSummary(this.props.branch, this.props.user_title_status) : null}\r\n                            {display_title.primary_set ? <Grid container className=\"summery-container box-light\">\r\n                                {display_title.primary_set.map(item => (\r\n                                    <Grid item xs={2}>\r\n                                        <p>{item.label}</p>\r\n                                        <p>{item.info ? item.info : NONE}</p>\r\n                                    </Grid>\r\n                                ))}\r\n                                {display_title.primary_set_wide ? display_title.primary_set_wide.map(item => (\r\n                                    <Grid item xs={12} className=\"genres-container\">\r\n                                        <p>{item.label}</p>\r\n                                        <p>{item.info ? item.info : NONE}</p>\r\n                                    </Grid>\r\n                                )) : null}\r\n                            </Grid> : null}\r\n                            {display_title.secondary_set ?\r\n                                <Grid container className=\"summery-container box-light color-secondary\">\r\n                                    {display_title.secondary_set.map(item => (\r\n                                        <Grid item xs={Math.floor(12 / display_title.secondary_set.length)}>\r\n                                            <p>{item.label}</p>\r\n                                            <p>{item.info ? item.info : NONE}</p>\r\n                                        </Grid>\r\n                                    ))}\r\n                                </Grid> : null}\r\n\r\n                            {display_title.tabs ? <Grid container className=\"tabs-container\"\r\n                                                        style={{marginTop: tabs_margin ? 15 : 0}}>\r\n                                <DisplayTabs tabs={display_title.tabs}/>\r\n                            </Grid> : null}\r\n                        </Grid>\r\n                    </Grid> : this.props.title_loading ?\r\n                        <Loading text={`${this.props.branch} Loading`} offset={100}/> : null}\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    status: state.errors.status,\r\n    user_authenticated: state.auth.user_authenticated,\r\n\r\n    /**\r\n     * @user: state.auth.user is here for checking if the logged in user is admin and to update the component\r\n     * when adding/removing title from favorites etc.\r\n     * @torrent_progress: is here for re-rendering the component on change\r\n     */\r\n    user: state.auth.user,\r\n    // torrent_progress: state.requiem.torrent_progress\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnime})(Display)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\n\r\nexport function getSynopsys(synopsys) {\r\n    if (!synopsys || synopsys.indexOf('No synopsis information has been added to this title') >= 0)\r\n        return null;\r\n    return synopsys\r\n}\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const synopsys = getSynopsys(this.props.anime[Anime.synopsis]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsis</h2>\r\n                    <p>{synopsys ? synopsys : NONE}</p>\r\n                    {this.props.anime[Anime.background] ?\r\n                        <>\r\n                            <h2>Background</h2>\r\n                            <p>{this.props.anime[Anime.background]}</p>\r\n                        </> : null}\r\n                    {this.props.anime[Anime.opening_theme] || this.props.anime[Anime.ending_theme] ? <>\r\n                        <h2>OST</h2>\r\n                        <p><span>Openings:</span> {this.props.anime[Anime.opening_theme] ?\r\n                            this.props.anime[Anime.opening_theme] : NONE}</p>\r\n                        <p><span>Endings:</span> {this.props.anime[Anime.ending_theme] ?\r\n                            this.props.anime[Anime.ending_theme] : NONE}</p>\r\n                    </> : null}\r\n\r\n                    <h2>Main Characters</h2>\r\n                </div>\r\n\r\n                {this.props.anime[Anime.main_characters].length > 0 ?\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.anime[Anime.main_characters].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList> : <p className=\"none-characters\">{NONE}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Manga} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {getSynopsys} from \"../../../anime/display/tabs/GeneralTab\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const synopsys = getSynopsys(this.props.manga[Manga.synopsis]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsis</h2>\r\n                    <p>{synopsys ? synopsys : NONE}</p>\r\n                    {this.props.manga[Manga.background] ?\r\n                        <>\r\n                            <h2>Background</h2>\r\n                            <p>{this.props.manga[Manga.background]}</p>\r\n                        </> : null}\r\n\r\n                    <h2>Main Characters</h2>\r\n                </div>\r\n\r\n                {this.props.manga[Manga.main_characters].length > 0 ?\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.manga[Manga.main_characters].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList> : <p className=\"none-characters\">{NONE}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport {faExpandArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {Character} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nfunction DisplayVoiceActors(props) {\r\n    const {voice_actors} = props;\r\n    const formatted = voice_actors.split('window._taboola')[0];\r\n    const [expand, setExpand] = useState(false);\r\n    return <>\r\n        <h2>Voice Actors{' '}\r\n            <CyberButton component=\"span\" onClick={() => {setExpand(!expand)}}>\r\n                <FontAwesomeIcon icon={faExpandArrowsAlt}/>\r\n            </CyberButton>\r\n        </h2>\r\n        {expand ? <pre>{formatted}</pre> : <p>{formatted}</p>}\r\n    </>\r\n}\r\n\r\n\r\nfunction getDescription(description) {\r\n    if (!description || description.indexOf('No biography written') >= 0)\r\n        return null;\r\n    return description\r\n}\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        const description = getDescription(this.props.character[Character.description]);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Description</h2>\r\n                    <p>{description ? description : NONE}</p>\r\n\r\n                    {this.props.character[Character.voice_actors] ?\r\n                        <DisplayVoiceActors voice_actors={this.props.character[Character.voice_actors]}/> : null}\r\n\r\n                    {this.props.character[Character.anime_roles] &&\r\n                    this.props.character[Character.anime_roles].length > 0 ? <h2>Animeography</h2> : null}\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.character[Character.anime_roles].map((anime, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_ANIME} title={anime}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n                <div className=\"general-description\">\r\n                    {this.props.character[Character.manga_roles] &&\r\n                    this.props.character[Character.manga_roles].length > 0 ? <h2>Mangaography</h2> : null}\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.character[Character.manga_roles].map((manga, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_MANGA} title={manga}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    character: state.characters.character,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport reactPreset from \"@bbob/preset-react\";\r\nimport BBCode from \"@bbob/react/lib/Component\";\r\n\r\nimport {Person} from \"../../../../models\";\r\nimport {NONE} from \"../../../display/Display\";\r\n\r\nimport '../../../../assets/css/people.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>More Info</h2>\r\n                    {this.props.person[Person.more_info] ? <BBCode plugins={[reactPreset()]}>\r\n                        {this.props.person[Person.more_info]}\r\n                    </BBCode> : NONE}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ImageGallery from 'react-image-gallery';\r\n\r\nimport {CYBER_GENESIS_URL} from \"../../../../globals\";\r\nimport {CoverImages, Eroge} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport '../../../../../node_modules/react-image-gallery/styles/css/image-gallery.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        let images = [];\r\n        if (this.props.eroge[Eroge.eroge_screenshots])\r\n            for (let i = 0; i < this.props.eroge[Eroge.eroge_screenshots].length; i++)\r\n                images.push({\r\n                    original: `${CYBER_GENESIS_URL}${this.props.eroge[Eroge.eroge_screenshots][i][CoverImages.image]}`,\r\n                    thumbnail: `${CYBER_GENESIS_URL}${this.props.eroge[Eroge.eroge_screenshots][i][CoverImages.image]}`\r\n                });\r\n\r\n        return (\r\n            <div className=\"general-tab\">\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsys</h2>\r\n                    <p>{this.props.eroge[Eroge.description]}</p>\r\n\r\n                    <h2>Screenshots</h2>\r\n                    <Grid container>\r\n                        <Grid item xs={2}/>\r\n                        <Grid item xs={8} className=\"image-gallery\">\r\n                            <ImageGallery items={images}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge: state.eroge.eroge,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult} from \"../../../../models\";\r\nimport {getAllCharactersForAnime} from \"../../../../actions/anime\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass CharactersTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.anime[Anime.all_characters] || this.props.all_characters[ApiResult.previous])\r\n            this.props.getAllCharactersForAnime(this.props.anime[Anime.id])\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.all_characters[ApiResult.count] / 50)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAllCharactersForAnime(this.props.anime[Anime.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"characters-tab\">\r\n                {this.props.all_characters ? <>\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.all_characters[ApiResult.results].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    all_characters: state.anime.anime[Anime.all_characters],\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllCharactersForAnime})(CharactersTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Manga} from \"../../../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {getAllCharactersForManga} from \"../../../../actions/manga\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass CharactersTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.manga[Manga.all_characters] || this.props.all_characters[ApiResult.previous])\r\n            this.props.getAllCharactersForManga(this.props.manga[Manga.id])\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.all_characters[ApiResult.count] / 50)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAllCharactersForManga(this.props.manga[Manga.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"characters-tab\">\r\n                {this.props.all_characters ? <>\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.all_characters[ApiResult.results].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    all_characters: state.manga.manga[Manga.all_characters],\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllCharactersForManga})(CharactersTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {Anime, Manga, VALID_MANGA_RELATION_NAMES, VALID_MANGA_RELATIONS} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getRelationsForManga} from \"../../../../actions/manga\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass RelationsTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.manga_relations))\r\n            this.props.getRelationsForManga(this.props.manga[Manga.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"relations-tab\">\r\n                {!isEmpty(this.props.manga_relations) ? <>\r\n                    {this.props.manga_relations['manga_relation_adaptation'].length > 0 ?\r\n                        <div>\r\n                            <h2 className=\"relation-name\">Adaptation</h2>\r\n                            <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                {this.props.manga_relations['manga_relation_adaptation'].map((anime, x) => (\r\n                                    <Grow key={x} in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1}>\r\n                                            <TitleCard\r\n                                                branch={BRANCH_ANIME}\r\n                                                title={anime}\r\n                                                user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                    this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                            />\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                ))}\r\n                            </GridList>\r\n                        </div> : null}\r\n\r\n                    {VALID_MANGA_RELATIONS.map((relation_name, i) => (\r\n                        relation_name !== 'manga_relation_adaptation' ?\r\n                            <div key={i}>\r\n                                {this.props.manga_relations[relation_name].length > 0 ?\r\n                                    <h2 className=\"relation-name\">{VALID_MANGA_RELATION_NAMES[relation_name]}</h2> : null}\r\n\r\n                                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                    {this.props.manga_relations[relation_name].map((manga, y) => (\r\n                                        <Grow key={y} in {...({timeout: 200 + (y * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={BRANCH_MANGA}\r\n                                                    title={manga}\r\n                                                    user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                                            this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                            </div> : null))}\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    manga_relations: state.manga.manga[Manga.manga_relations],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRelationsForManga})(RelationsTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Field, Form, Formik} from 'formik';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport {downloadTorrent, getStorageInfo} from \"../../../actions/requiem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Anime, AnimeFranchise} from \"../../../models\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {faCheck, faPlus, faPlusCircle, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\nimport '../../../assets/css/requiem.css'\r\nimport {getAnimeFranchise} from \"../../../actions/anime\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\n\r\nclass DownloadTorrentForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleAddIdToExtraIds = this.handleAddIdToExtraIds.bind(this);\r\n        this.clearExtraIds = this.clearExtraIds.bind(this);\r\n        this.toggleAddExtra = this.toggleAddExtra.bind(this);\r\n        this.state = {extra: false, extra_ids: []}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getStorageInfo();\r\n        if (isEmpty(this.props.anime_franchise))\r\n            this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    toggleAddExtra() {\r\n        playClickSound();\r\n        this.setState({extra: !this.state.extra, extra_ids: []})\r\n    }\r\n\r\n    clearExtraIds() {\r\n        playClickSound();\r\n        this.setState({extra_ids: []})\r\n    }\r\n\r\n    handleAddIdToExtraIds(id) {\r\n        let extra_ids = this.state.extra_ids;\r\n        const index = extra_ids.indexOf(id);\r\n\r\n        if (index > -1) extra_ids.splice(index, 1);\r\n        else extra_ids.push(id);\r\n\r\n        this.setState({extra_ids: extra_ids});\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            disk: 'disk',\r\n            files: 'files',\r\n            extract_subs: 'extract_subs',\r\n            magnet: 'magnet',\r\n            extra_ids: 'extra_ids',\r\n            additional_info: 'additional_info',\r\n        };\r\n\r\n        let initial_values = {\r\n            anime: this.props.anime[Anime.id],\r\n            disk: 'L',\r\n            files: '',\r\n            extract_subs: false,\r\n            magnet: '',\r\n            extra_ids: '',\r\n            additional_info: '',\r\n        };\r\n\r\n        return (\r\n            <div id=\"Download-Anime-Torrent-Form\" className=\"modal-container modal-container-requiem\">\r\n                <Formik\r\n                    initialValues={initial_values}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        values.extra_ids = this.state.extra_ids.join(', ');\r\n                        console.log(values);\r\n                        this.props.downloadTorrent(this.props.anime[Anime.id], values);\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({\r\n                          isSubmitting, values, handleChange,\r\n                          handleBlur, setValues, setFieldValue\r\n                      }) => (\r\n                        <Form className=\"content-container\">\r\n                            {/*<Grid container>*/}\r\n                            {/*    {storage.map((disk, i) => (*/}\r\n                            {/*        <Grid item xs={12} md={4}>*/}\r\n                            {/*            <StorageDiskInfo key={i} disk={disk}/>*/}\r\n                            {/*        </Grid>*/}\r\n                            {/*    ))}*/}\r\n                            {/*</Grid>*/}\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={4}>\r\n                                    <InputLabel id=\"disk\">Disk</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"disk\"\r\n                                        className=\"form-control\"\r\n                                        color=\"secondary\"\r\n                                        value={values[field_names.disk]}\r\n                                        name={field_names.disk}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    >\r\n                                        <MenuItem value=\"F\">F</MenuItem>\r\n                                        <MenuItem value=\"G\">G</MenuItem>\r\n                                        <MenuItem value=\"H\">H</MenuItem>\r\n                                        <MenuItem value=\"I\">I</MenuItem>\r\n                                        <MenuItem value=\"J\">J</MenuItem>\r\n                                        <MenuItem value=\"K\">K</MenuItem>\r\n                                        <MenuItem value=\"L\">L</MenuItem>\r\n                                        <MenuItem value=\"M\">M</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={8} className=\"extract-subs-container\">\r\n                                    <label>Extract Subs</label>\r\n                                    <Checkbox\r\n                                        value={values[field_names.extract_subs]}\r\n                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        name={field_names.extract_subs}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Magnet\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.magnet}\r\n                                        value={values[field_names.magnet]}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group torrent-form-group\">\r\n                                <Grid item xs={2} className=\"torrent-label-container\">\r\n                                    <label>Torrent</label>\r\n                                </Grid>\r\n                                <Grid item xs={9}>\r\n                                    <Dropzone onDrop={acceptedFiles => setFieldValue(field_names.files, acceptedFiles)}>\r\n                                        {({getRootProps, getInputProps, isDragActive}) => (\r\n                                            <section className={isDragActive ? 'dropzone dropzone-active' : 'dropzone'}>\r\n                                                <div className=\"\" {...getRootProps()}>\r\n                                                    <input {...getInputProps()} />\r\n                                                    {isDragActive ?\r\n                                                        <p className=\"hovered\">\r\n                                                            Drop the torrent here ...</p> :\r\n                                                        <p>\r\n                                                            Drag and drop the torrent files here, or click to select\r\n                                                            from explorer</p>\r\n                                                    }\r\n                                                </div>\r\n                                            </section>\r\n                                        )}\r\n                                    </Dropzone>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    {values[field_names.files] ? values[field_names.files].map((file, x) => (\r\n                                        <p key={x} className=\"text-center color-magenta\">> {file['name']}</p>\r\n                                    )) : null}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={1} className=\"extra-buttons-containers\">\r\n                                    <span id=\"extra-btn\" className={this.state.extra ? 'selected' : ''}\r\n                                          onClick={this.toggleAddExtra} onMouseEnter={playHoverSound}>\r\n                                        <FontAwesomeIcon icon={this.state.extra ? faCheck : faPlus}/>\r\n                                    </span>\r\n                                </Grid>\r\n                                <Grid item xs={10}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Extras\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.extra_ids}\r\n                                        value={this.state.extra_ids.join(', ')}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                                <Grid item xs={1} className=\"extra-buttons-containers\">\r\n                                    <span id=\"trash-btn\" onClick={this.clearExtraIds} onMouseEnter={playHoverSound}>\r\n                                        <FontAwesomeIcon icon={faTrash}/>\r\n                                    </span>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                {this.state.extra ? <Grid item xs={12}>\r\n                                    {!this.props.anime_franchise_loading ?\r\n                                        <GridList cellHeight={200} cols={4}>\r\n                                            {this.props.anime_franchise[AnimeFranchise.anime_franchise].map((anime, x) => (\r\n                                                !anime[Anime.anime_on_server] && anime[Anime.id] !== this.props.anime[Anime.id] ?\r\n                                                    <GridListTile\r\n                                                        cols={1}\r\n                                                        className={this.state.extra_ids.indexOf(anime[Anime.id]) >= 0 ?\r\n                                                            'add-franchises-container added-franchise' :\r\n                                                            'add-franchises-container'}>\r\n                                                    <span className=\"add-to-extra-ids-btn\" title={anime[Anime.id]}\r\n                                                          onClick={() => {\r\n                                                              playClickSound();\r\n                                                              this.handleAddIdToExtraIds(anime[Anime.id])\r\n                                                          }}><FontAwesomeIcon icon={faPlusCircle}/></span>\r\n                                                        <TitleCard\r\n                                                            branch={BRANCH_ANIME}\r\n                                                            title={anime}\r\n                                                            mini={true}/>\r\n                                                    </GridListTile> : null))}\r\n                                        </GridList>\r\n                                        : <Loading text={'Franchise loading'}/>}\r\n                                </Grid> : null}\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Additional Info\"\r\n                                        color=\"secondary\"\r\n                                        multiline\r\n                                        value={values[field_names.additional_info]}\r\n                                        name={field_names.additional_info}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <div className=\"submit-container\">\r\n                                <CyberButton variant=\"outlined\" type=\"submit\" onClick={this.props.handleClose}\r\n                                             disabled={isSubmitting}>\r\n                                    Submit\r\n                                </CyberButton>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    storage: state.requiem.storage,\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {downloadTorrent, getStorageInfo, getAnimeFranchise})(DownloadTorrentForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faDownload, faEdit, faExpandArrowsAlt, faPlus, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport DownloadTorrentForm from \"./DownloadTorrentForm\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {Anime, AnimeOnServer, UserAnimeEntry} from \"../../../models\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {LANGUAGES} from \"../../../globals\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {addAnimeToServer, updateAnimeToServer} from \"../../../actions/requiem\";\r\n\r\n\r\nclass DownloadTorrentModalForm extends Component {\r\n    static propTypes = {\r\n        /** classNames */\r\n        classNames: PropTypes.string,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.toggleExpandLanguages = this.toggleExpandLanguages.bind(this);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n            expand_languages: false,\r\n        };\r\n    }\r\n\r\n    toggleExpandLanguages() {\r\n        this.setState({expand_languages: !this.state.expand_languages})\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        const edit = !!this.props.anime[Anime.anime_on_server];\r\n        const languages = this.state.expand_languages ? LANGUAGES : [LANGUAGES[0], LANGUAGES[1]];\r\n        const field_names = {\r\n            anime: 'anime',\r\n            location: 'location',\r\n            size_on_HDD_GB: 'size_on_HDD_GB',\r\n            additional_info: 'additional_info',\r\n            audio_channel: 'audio_channel',\r\n            video_quality: 'video_quality',\r\n            incomplete: 'incomplete',\r\n            incomplete_progress: 'incomplete_progress',\r\n        };\r\n\r\n        let initial_values = {\r\n            anime: this.props.anime[Anime.id],\r\n            location: '',\r\n            size_on_HDD_GB: 0.00,\r\n            additional_info: '',\r\n            audio_channel: '2.0',\r\n            video_quality: '1080p',\r\n            incomplete: false,\r\n            incomplete_progress: 0,\r\n        };\r\n\r\n        LANGUAGES.forEach((language) => {\r\n            const lang = language.toLowerCase();\r\n            initial_values[lang + '_dub'] = false;\r\n            initial_values[lang + '_sub'] = false;\r\n        });\r\n\r\n        if (edit) {\r\n            initial_values = {\r\n                anime: this.props.anime[Anime.id],\r\n                location: this.props.anime[Anime.anime_on_server][AnimeOnServer.location],\r\n                size_on_HDD_GB: this.props.anime[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB],\r\n                additional_info: this.props.anime[Anime.anime_on_server][AnimeOnServer.additional_info],\r\n                audio_channel: this.props.anime[Anime.anime_on_server][AnimeOnServer.audio_channel],\r\n                video_quality: this.props.anime[Anime.anime_on_server][AnimeOnServer.video_quality],\r\n                incomplete: this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete],\r\n                incomplete_progress: this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete_progress],\r\n            };\r\n            LANGUAGES.forEach((language) => {\r\n                const lang = language.toLowerCase();\r\n                initial_values[lang + '_dub'] = this.props.anime[Anime.anime_on_server][`${lang}_dub`];\r\n                initial_values[lang + '_sub'] = this.props.anime[Anime.anime_on_server][`${lang}_sub`];\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div id=\"Edit-Anime-On-Server-Modal\" className={this.props.classNames}>\r\n                <CyberButton classNames=\"btn-contained-secondary\" onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"edit-anime-on-server-dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{edit ? 'Edit' : 'Add'} anime to server</DialogTitle>\r\n                    <DialogContent>\r\n                        <Formik\r\n                            initialValues={initial_values}\r\n                            onSubmit={(values, {setSubmitting}) => {\r\n                                console.log('values', values);\r\n\r\n                                if (edit) this.props.updateAnimeToServer(values);\r\n                                else this.props.addAnimeToServer(values);\r\n\r\n                                setSubmitting(false);\r\n                            }}>\r\n                            {({\r\n                                  isSubmitting, values, handleChange,\r\n                                  handleBlur\r\n                              }) => (\r\n                                <Form id=\"Edit-Anime-On-Server-Form\">\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Location\"\r\n                                                color=\"secondary\"\r\n                                                autoComplete={false}\r\n                                                name={field_names.location}\r\n                                                value={values[field_names.location]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={2}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Size\"\r\n                                                color=\"secondary\"\r\n                                                type=\"number\"\r\n                                                name={field_names.size_on_HDD_GB}\r\n                                                value={values[field_names.size_on_HDD_GB]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                        <Grid item xs={5}>\r\n                                            <InputLabel id=\"video-quality\" className=\"input-label\">Video\r\n                                                Quality</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"video-quality\"\r\n                                                className=\"form-control\"\r\n                                                color=\"secondary\"\r\n                                                value={values[field_names.video_quality]}\r\n                                                name={field_names.video_quality}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            >\r\n                                                <MenuItem value=\"2160p\">2160p</MenuItem>\r\n                                                <MenuItem value=\"1080p\">1080p</MenuItem>\r\n                                                <MenuItem value=\"720p\">720p</MenuItem>\r\n                                                <MenuItem value=\"580p\">580p</MenuItem>\r\n                                                <MenuItem value=\"480p\">480p</MenuItem>\r\n                                                <MenuItem value=\"360p\">360p</MenuItem>\r\n                                                <MenuItem value=\"240p\">240p</MenuItem>\r\n                                            </Select>\r\n                                        </Grid>\r\n                                        <Grid item xs={5}>\r\n                                            <InputLabel id=\"audio-quality\" className=\"input-label\">Audio\r\n                                                Channel</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"audio-quality\"\r\n                                                className=\"form-control\"\r\n                                                color=\"secondary\"\r\n                                                value={values[field_names.audio_channel]}\r\n                                                name={field_names.audio_channel}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            >\r\n                                                <MenuItem value=\"2.0\">2.0</MenuItem>\r\n                                                <MenuItem value=\"5.1\">5.1</MenuItem>\r\n                                            </Select>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={6}>\r\n                                            <label>Incomplete</label>\r\n                                            <Checkbox\r\n                                                value={values[field_names.incomplete]}\r\n                                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                name={field_names.incomplete}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Incomplete Progress\"\r\n                                                color=\"secondary\"\r\n                                                type=\"number\"\r\n                                                disabled={!values[field_names.incomplete]}\r\n                                                name={field_names.incomplete_progress}\r\n                                                value={values[field_names.incomplete_progress]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <label>Dubs</label>\r\n                                            <CyberButton classNames=\"expand-btn\" onClick={this.toggleExpandLanguages}>\r\n                                                <FontAwesomeIcon icon={faExpandArrowsAlt}/>\r\n                                            </CyberButton>\r\n                                        </Grid>\r\n                                        {languages.map((language, x) => (\r\n                                            <Grid item xs={3}>\r\n                                                <div className=\"language-box\" key={x}>\r\n                                                    <Checkbox\r\n                                                        value={values[language.toLowerCase() + '_dub']}\r\n                                                        checked={values[language.toLowerCase() + '_dub']}\r\n                                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                        name={language.toLowerCase() + '_dub'}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                    />\r\n                                                    <label>{language}</label>\r\n                                                </div>\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <label>Subs</label>\r\n                                        </Grid>\r\n                                        {languages.map((language, x) => (\r\n                                            <Grid item xs={3}>\r\n                                                <div className=\"language-box\" key={x}>\r\n                                                    <Checkbox\r\n                                                        value={values[language.toLowerCase() + '_sub']}\r\n                                                        checked={values[language.toLowerCase() + '_sub']}\r\n                                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                        name={language.toLowerCase() + '_sub'}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                    />\r\n                                                    <label>{language}</label>\r\n                                                </div>\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\"\r\n                                                         onClick={this.handleClose} disabled={isSubmitting}>\r\n                                                <FontAwesomeIcon icon={faCheck}/>\r\n                                            </CyberButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime\r\n});\r\n\r\nexport default connect(mapStateToProps, {addAnimeToServer, updateAnimeToServer})(DownloadTorrentModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport {Anime, AnimeOnServer, User} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {faFolder, faMagnet, faTrash, faUserEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {deleteAnimeServerInfoAndTorrents, openAnimeFolder} from \"../../../../actions/requiem\";\r\nimport {ADMIN_EDIT_ANIME_ON_SERVER} from \"../../../../urls\";\r\nimport EditAnimeOnServerModalForm from \"../../../requiem/forms/EditAnimeOnServerModalForm\";\r\n\r\n\r\nclass ServerTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"server-tab\">\r\n                {this.props.user && this.props.user[User.is_superuser] ? <div className=\"btn-group\">\r\n                    <CyberButton classNames=\"btn-contained-secondary\" onClick={() => {\r\n                         this.props.openAnimeFolder(this.props.anime[Anime.id]);\r\n                     }}><FontAwesomeIcon icon={faFolder}/></CyberButton>\r\n                    <EditAnimeOnServerModalForm classNames=\"edit-btn\"/>\r\n                    <a href={ADMIN_EDIT_ANIME_ON_SERVER(this.props.anime[Anime.id])} className=\"margin-left-10\">\r\n                        <CyberButton classNames=\"btn-contained-secondary\" component=\"span\">\r\n                            <FontAwesomeIcon icon={faUserEdit}/>\r\n                        </CyberButton>\r\n                    </a>\r\n                    <CyberButton classNames=\"btn-contained-danger\" onClick={() => {\r\n                         if (window.confirm(\"Are you sure?\")) this.props.deleteAnimeServerInfoAndTorrents(this.props.anime[Anime.id]);\r\n                     }}>\r\n                        <FontAwesomeIcon icon={faTrash}/>\r\n                    </CyberButton>\r\n                </div> : null}\r\n\r\n                <TableContainer>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>Status</TableCell>\r\n                                <TableCell>\r\n                                    {this.props.anime[Anime.anime_on_server][AnimeOnServer.approved] ?\r\n                                        <span className=\"color-green\">Approved</span> :\r\n                                        <span className=\"color-danger\">Pending</span>}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Location</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.location]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Size</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB]}GB</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Video</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.video_quality]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Audio</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.audio_channel]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Dubs</TableCell>\r\n                                <TableCell className=\"lang-chipset\">\r\n                                    {Object.keys(AnimeOnServer).map(key => (\r\n                                        key.endsWith('_dub') ?\r\n                                            this.props.anime[Anime.anime_on_server][key] ?\r\n                                                <Chip variant=\"outlined\" label={key.replace('_dub', '')}/> : null : null\r\n                                    ))}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Subs</TableCell>\r\n                                <TableCell className=\"lang-chipset\">\r\n                                    {Object.keys(AnimeOnServer).map(key => (\r\n                                        key.endsWith('_sub') ?\r\n                                            this.props.anime[Anime.anime_on_server][key] ?\r\n                                                <Chip variant=\"outlined\" label={key.replace('_sub', '')}/> : null : null\r\n                                    ))}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Additional Info</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.additional_info]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Extract Subs</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.extract_subs] ? 'Yes' : 'No'}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Incomplete</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete] ? 'Yes' : 'No'}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Hash</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_hash]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Magnet</TableCell>\r\n                                <TableCell>\r\n                                    {this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_magnet] ?\r\n                                        <CyberButton classNames=\"btn-secondary\" variant=\"outlined\" onClick={() => {\r\n                                            window.open(this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_magnet]);\r\n                                        }}>\r\n                                            <FontAwesomeIcon icon={faMagnet}/>\r\n                                        </CyberButton> : null}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Downloaded on</TableCell>\r\n                                <TableCell><Moment\r\n                                    date={this.props.anime[Anime.anime_on_server][AnimeOnServer.date_added]}\r\n                                    format={'Do MMM YYYY'}/></TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Last Modified</TableCell>\r\n                                <TableCell><Moment\r\n                                    date={this.props.anime[Anime.anime_on_server][AnimeOnServer.date_last_modified]}\r\n                                    format={'Do MMM YYYY'}/></TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {deleteAnimeServerInfoAndTorrents, openAnimeFolder})(ServerTab)\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport store from \"../../../../store\";\r\nimport {updateAnimeEpisode} from \"../../../../actions/users\";\r\nimport {Anime, UserAnimeEntry} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/users.css'\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\n/**\r\n * Increase episode number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the anime to update\r\n * @param props.entry {Object} The user anime entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function UpdateAnimeEpisodeButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserAnimeEntry.watched_episodes] === entry[UserAnimeEntry.anime][Anime.episodes])\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserAnimeEntry.watched_episodes] !== entry[UserAnimeEntry.anime][Anime.episodes])\r\n                    store.dispatch(updateAnimeEpisode(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHistory, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Anime, User, UserAnimeEntry} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Moment from \"react-moment\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport store from \"../../../../store\";\r\nimport {deleteAnimeHistoryEntry} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.entry {Object} Anime entry of the user\r\n * @param props.title {String} Title of the Anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function AnimeEpisodeHistoryModal(props) {\r\n    const {entry, title} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"History-Modal\">\r\n            <CyberButton disabled={isEmpty(entry) || entry[UserAnimeEntry.episode_history].length === 0}\r\n                         variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <FontAwesomeIcon icon={faHistory}/>\r\n            </CyberButton>\r\n            {!isEmpty(entry) && entry[UserAnimeEntry.episode_history].length > 0 ?\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" id=\"History-Modal-Dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"header-title\">\r\n                            History\r\n                        </DialogContentText>\r\n                        {entry[UserAnimeEntry.episode_history].map(history => (\r\n                            <p>Episode <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['episode']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteAnimeEpisodeHistoryButton\r\n                                    history_id={history['id']}\r\n                                    anime_id={entry[UserAnimeEntry.anime][Anime.id]}/>\r\n                            </p>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <CyberButton onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                            Close\r\n                        </CyberButton>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.anime_id {Number} ID of the anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteAnimeEpisodeHistoryButton(props) {\r\n    const {history_id, anime_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteAnimeHistoryEntry(history_id, anime_id));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport {Form, Formik} from \"formik\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport BBCodeQuickGuideDialog from \"./snippets/snippets\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faFileUpload, faLevelDownAlt, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport store from \"../../../store\";\r\nimport {\r\n    addAnimeEntryInstantDrop,\r\n    addMangaEntryInstantDrop, addToFavorites,\r\n    editUserAboutMeBBCode,\r\n    editUserBio,\r\n    importMalXmlForAnimeList,\r\n    importMalXmlForMangaList, removeFromFavorites,\r\n    scrapeEpisodeHistoryFromMal\r\n} from \"../../../actions/users\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {BRANCH_ANIME, store_reducer_users, store_reducers} from \"../../../globals\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {isTitleInFavorites} from \"../../display/functions\";\r\n\r\n\r\n/**\r\n * @param props.branch\r\n * @param props.id\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AddRemoveFromFavorites(props) {\r\n    const {branch, id} = props;\r\n    const initial = isTitleInFavorites(branch, id);\r\n    const [inFavorites, setInFavorites] = useState(initial);\r\n\r\n    return <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n        if (inFavorites) store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n        else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n        setInFavorites(!inFavorites)\r\n    }} title={inFavorites ? 'Remove from favorites' : 'Add to favorites'}>\r\n        <FontAwesomeIcon icon={inFavorites ? faStarSolid : faStar}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n * Form for editing user's bio\r\n * @param props {Object} user's bio\r\n * @param props.bio {String} user's bio\r\n * @param props.closeBio {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function EditBioForm(props) {\r\n    const {bio, closeBio} = props;\r\n    const field_names = {\r\n        bio: 'bio',\r\n    };\r\n\r\n    const initial_values = {\r\n        bio: bio,\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            store.dispatch(editUserBio(values.bio));\r\n            setSubmitting(false);\r\n            closeBio();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"edit-user-bio-form\">\r\n                <TextField\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                            e.preventDefault();\r\n                            handleSubmit();\r\n                        }\r\n                    }}\r\n                    label=\"Bio\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={values.bio}\r\n                    name={field_names.bio}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={errors.bio && touched.bio}\r\n                    helperText={(errors.bio && touched.bio) && errors.bio}/>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props {Object}\r\n * @param props.bbcode {String}\r\n * @param props.closeForm {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function EditAboutMeBBCodeForm(props) {\r\n    const {bbcode, closeForm} = props;\r\n    const field_names = {\r\n        bbcode: 'bbcode',\r\n    };\r\n\r\n    const initial_values = {\r\n        bbcode: bbcode,\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            values.bbcode = values.bbcode.replaceAll('\\n', '[br]');\r\n            store.dispatch(editUserAboutMeBBCode(values.bbcode));\r\n            setSubmitting(false);\r\n            closeForm();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"edit-user-about-me-bbcode-form\">\r\n                <TextField\r\n                    label=\"BBCode\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={values.bbcode.replaceAll('[br]', '\\n')}\r\n                    name={field_names.bbcode}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={errors.bbcode && touched.bbcode}\r\n                    helperText={(errors.bbcode && touched.bbcode) && errors.bbcode}\r\n                />\r\n                <div className=\"button-group\">\r\n                    <BBCodeQuickGuideDialog/>\r\n                    <CyberButton classNames=\"btn-contained-primary\" type=\"submit\"><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\nexport function EditAboutMeBBCodeDialog(props) {\r\n    const {open, onClose, bbcode} = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"edit-user-about-me-bbcode-title\" open={open}>\r\n            <div id=\"edit-user-about-me-bbcode\">\r\n                <DialogTitle id=\"edit-user-about-me-bbcode-title\">Edit BBCode</DialogTitle>\r\n                <EditAboutMeBBCodeForm bbcode={bbcode} closeForm={onClose}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props {Object}\r\n * @param props.bbcode {String}\r\n * @param props.closeForm {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function ScrapeEpisodeHistoryFromMalForm(props) {\r\n    const {closeForm} = props;\r\n    const field_names = {\r\n        MALHLOGSESSID: 'MALHLOGSESSID',\r\n        MALSESSIONID: 'MALSESSIONID',\r\n    };\r\n\r\n    const initial_values = {\r\n        MALHLOGSESSID: '',\r\n        MALSESSIONID: '',\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            store.dispatch(scrapeEpisodeHistoryFromMal(values[field_names.MALHLOGSESSID], values[field_names.MALSESSIONID]));\r\n            setSubmitting(false);\r\n            closeForm();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"scrape-episode-history-from-mal-form\">\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label={field_names.MALHLOGSESSID}\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={values[field_names.MALHLOGSESSID]}\r\n                            name={field_names.MALHLOGSESSID}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.MALHLOGSESSID && touched.MALHLOGSESSID}\r\n                            helperText={(errors.MALHLOGSESSID && touched.MALHLOGSESSID) && errors.MALHLOGSESSID}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label={field_names.MALSESSIONID}\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={values[field_names.MALSESSIONID]}\r\n                            name={field_names.MALSESSIONID}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.MALSESSIONID && touched.MALSESSIONID}\r\n                            helperText={(errors.MALSESSIONID && touched.MALSESSIONID) && errors.MALSESSIONID}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <div className=\"button-group\">\r\n                    <CyberButton classNames=\"btn-contained-primary\" type=\"submit\">\r\n                        <FontAwesomeIcon icon={faCheck}/>\r\n                    </CyberButton>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\nexport function ScrapeEpisodeHistoryFromMalDialog(props) {\r\n    const {open, onClose} = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"scrape-episode-history-from-mal-title\" open={open}>\r\n            <div id=\"scrape-episode-history-from-mal\">\r\n                <DialogTitle id=\"scrape-episode-history-from-mal-title\">MAL Episode History scraper</DialogTitle>\r\n                <ScrapeEpisodeHistoryFromMalForm closeForm={onClose}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * Button for importing xml file from MAL and updating the user's list\r\n * @returns {JSX.Element}\r\n */\r\nexport function ImportAnimeListFromMal(props) {\r\n    const {} = props;\r\n    const uploading = store.getState()[store_reducers.users][store_reducer_users.uploading_file];\r\n\r\n    return <div>\r\n        <input\r\n            accept=\"text/xml\"\r\n            style={{display: 'none'}}\r\n            id=\"import-mal-anime-list-xml\"\r\n            multiple={false}\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n                store.dispatch(importMalXmlForAnimeList(e.target.files[0]))\r\n            }}\r\n        />\r\n        {uploading ? <CircularProgress/> : <label htmlFor=\"import-mal-anime-list-xml\" className=\"upload-img-btn\">\r\n            <Button variant=\"outlined\" color=\"primary\" component=\"span\" onMouseEnter={playHoverSound}\r\n                    onClick={playClickSound}>\r\n                <FontAwesomeIcon icon={faFileUpload}/>\r\n            </Button>\r\n        </label>}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * Button for importing xml file from MAL and updating the user's list\r\n * @returns {JSX.Element}\r\n */\r\nexport function ImportMangaListFromMal(props) {\r\n    const {} = props;\r\n    const uploading = store.getState()[store_reducers.users][store_reducer_users.uploading_file];\r\n\r\n    return <div>\r\n        <input\r\n            accept=\"text/xml\"\r\n            style={{display: 'none'}}\r\n            id=\"import-mal-manga-list-xml\"\r\n            multiple={false}\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n                store.dispatch(importMalXmlForMangaList(e.target.files[0]))\r\n            }}\r\n        />\r\n        {uploading ? <CircularProgress/> : <label htmlFor=\"import-mal-manga-list-xml\" className=\"upload-img-btn\">\r\n            <Button variant=\"outlined\" color=\"primary\" component=\"span\" onMouseEnter={playHoverSound}\r\n                    onClick={playClickSound}>\r\n                <FontAwesomeIcon icon={faFileUpload}/>\r\n            </Button>\r\n        </label>}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * Button for instant dropping an anime\r\n * @param props.anime_id {Number} ID of the anime to be dropped\r\n * @param props.classNames {String} extra classname to pass to the btn\r\n * @param props.variant {String} variant of the MaterialUi btn\r\n * @returns {JSX.Element}\r\n */\r\nexport function AddAnimeEntryInstantDropButton(props) {\r\n    const {anime_id, classNames, variant} = props;\r\n    return <CyberButton variant={variant ? variant : 'outlined'} classNames={classNames} color=\"primary\" title={'Instant Drop'}\r\n                        onClick={() => {\r\n        store.dispatch(addAnimeEntryInstantDrop(anime_id))\r\n    }}>\r\n        <FontAwesomeIcon icon={faLevelDownAlt}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n * Button for instant dropping a manga\r\n * @param props.manga_id {Number} ID of the manga to be dropped\r\n * @param props.classNames {String} extra classname to pass to the btn\r\n * @param props.variant {String} variant of the MaterialUi btn\r\n * @returns {JSX.Element}\r\n */\r\nexport function AddMangaEntryInstantDropButton(props) {\r\n    const {manga_id, classNames, variant} = props;\r\n    return <CyberButton variant={variant ? variant : 'outlined'} classNames={classNames} color=\"primary\" title={'Instant Drop'} onClick={() => {\r\n        store.dispatch(addMangaEntryInstantDrop(manga_id))\r\n    }}>\r\n        <FontAwesomeIcon icon={faLevelDownAlt}/>\r\n    </CyberButton>\r\n}\r\n","import React from \"react\";\r\n\r\nimport 'date-fns';\r\nimport {KeyboardDateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {Form, Formik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {faCheck, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {UserMangaEntry} from \"../../../../models\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport store from \"../../../../store\";\r\nimport {\r\n    addMangaEntry,\r\n    deleteMangaEntry,\r\n    updateMangaEntry\r\n} from \"../../../../actions/users\";\r\nimport {AddRemoveFromFavorites} from \"../shortForms\";\r\n\r\n\r\nconst FIELD_NAMES = {\r\n    read_volumes: UserMangaEntry.read_volumes,\r\n    read_chapters: UserMangaEntry.read_chapters,\r\n    start_date: UserMangaEntry.start_date,\r\n    finish_date: UserMangaEntry.finish_date,\r\n    score: UserMangaEntry.score,\r\n    status: UserMangaEntry.status,\r\n    times_read: UserMangaEntry.times_read,\r\n    comments: UserMangaEntry.comments,\r\n    tags: UserMangaEntry.tags,\r\n    priority: UserMangaEntry.priority,\r\n    rereading: UserMangaEntry.rereading,\r\n    rereading_volume: UserMangaEntry.rereading_volume,\r\n    rereading_chapter: UserMangaEntry.rereading_chapter,\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param manga_id\r\n * @param user_manga_entry\r\n * @param edit\r\n * @returns {{read_chapters: number, comments: string, priority: string, rereading: boolean, tags: string, score: number, times_read: number, finish_date: string, rereading_chapter: number, read_volumes: number, manga: *, rereading_volume: number, errors: boolean, start_date: string, status: string}}\r\n */\r\nexport function getUserMangaEntryFormInitialValues(manga_id, user_manga_entry, edit = false) {\r\n    let initial_values = {\r\n        manga: manga_id,\r\n        read_volumes: 0,\r\n        read_chapters: 0,\r\n        start_date: '',\r\n        finish_date: '',\r\n        score: 0,\r\n        status: USER_MANGA_STATUSES.plan_to_read,\r\n        times_read: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rereading: false,\r\n        rereading_volume: 0,\r\n        rereading_chapter: 0,\r\n        errors: false\r\n    };\r\n\r\n    if (edit && !isEmpty(user_manga_entry))\r\n        initial_values = {\r\n            manga: manga_id,\r\n            read_volumes: user_manga_entry[UserMangaEntry.read_volumes],\r\n            read_chapters: user_manga_entry[UserMangaEntry.read_chapters],\r\n            start_date: user_manga_entry[UserMangaEntry.start_date],\r\n            finish_date: user_manga_entry[UserMangaEntry.finish_date],\r\n            score: user_manga_entry[UserMangaEntry.score],\r\n            status: user_manga_entry[UserMangaEntry.status],\r\n            times_read: user_manga_entry[UserMangaEntry.times_read],\r\n            comments: user_manga_entry[UserMangaEntry.comments],\r\n            tags: user_manga_entry[UserMangaEntry.tags],\r\n            priority: user_manga_entry[UserMangaEntry.priority],\r\n            rereading: user_manga_entry[UserMangaEntry.rereading],\r\n            rereading_volume: user_manga_entry[UserMangaEntry.rereading_volume],\r\n            rereading_chapter: user_manga_entry[UserMangaEntry.rereading_chapter],\r\n        };\r\n\r\n    return initial_values\r\n}\r\n\r\n\r\nfunction deleteEntry(id, list) {\r\n    if (window.confirm('Are you sure? This will also delete any chapter history of this manga.'))\r\n        store.dispatch(deleteMangaEntry(id, list));\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.initial_values\r\n * @param {boolean} props.edit\r\n * @param {int} props.id\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserMangaEntryForm(props) {\r\n    const {initial_values, edit, id, list, handleClose} = props;\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}><Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            if (values.start_date === '') values.start_date = null;\r\n            if (values.finish_date === '') values.finish_date = null;\r\n            values.score = parseInt(values.score);\r\n\r\n            if (edit) store.dispatch(updateMangaEntry(id, values, list));\r\n            else store.dispatch(addMangaEntry(values));\r\n\r\n            setSubmitting(false);\r\n        }}>\r\n        {({\r\n              isSubmitting, values, handleChange,\r\n              handleBlur, setValues\r\n          }) => (\r\n            <Form id=\"User-Title-Entry-Form\">\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-status\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-status\"\r\n                            className=\"form-control\"\r\n                            label=\"Status\"\r\n                            value={values[FIELD_NAMES.status]}\r\n                            name={FIELD_NAMES.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"Reading\">Reading</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                            <MenuItem value=\"On Hold\">On Hold</MenuItem>\r\n                            <MenuItem value=\"Dropped\">Dropped</MenuItem>\r\n                            <MenuItem value=\"Plan to Read\">Plan to Read</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-value\">Priority</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-value\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.priority]}\r\n                            name={FIELD_NAMES.priority}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"4\">VERY HIGH</MenuItem>\r\n                            <MenuItem value=\"3\">HIGH</MenuItem>\r\n                            <MenuItem value=\"2\">MEDIUM</MenuItem>\r\n                            <MenuItem value=\"1\">LOW</MenuItem>\r\n                            <MenuItem value=\"0\">VERY LOW</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Volume\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.read_volumes}\r\n                            value={values[FIELD_NAMES.read_volumes]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4} md={2}>\r\n                        <div className=\"form-group text-right\">\r\n                            <Checkbox\r\n                                value={values[FIELD_NAMES.rereading]}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                name={FIELD_NAMES.rereading}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={4}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Reread Volume\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rereading_volume}\r\n                            value={values[FIELD_NAMES.rereading_volume]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rereading]}/>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Chapter\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.read_chapters}\r\n                            value={values[FIELD_NAMES.read_chapters]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Reread Chapter\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rereading_chapter}\r\n                            value={values[FIELD_NAMES.rereading_chapter]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rereading]}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-score\">Score</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-score\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.score]}\r\n                            name={FIELD_NAMES.score}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"0\">0</MenuItem>\r\n                            <MenuItem value=\"1\">1</MenuItem>\r\n                            <MenuItem value=\"2\">2</MenuItem>\r\n                            <MenuItem value=\"3\">3</MenuItem>\r\n                            <MenuItem value=\"4\">4</MenuItem>\r\n                            <MenuItem value=\"5\">5</MenuItem>\r\n                            <MenuItem value=\"6\">6</MenuItem>\r\n                            <MenuItem value=\"7\">7</MenuItem>\r\n                            <MenuItem value=\"8\">8</MenuItem>\r\n                            <MenuItem value=\"9\">9</MenuItem>\r\n                            <MenuItem value=\"10\">10</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start date\"\r\n                            value={values[FIELD_NAMES.start_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.start_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Times watched\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.times_read}\r\n                            value={values[FIELD_NAMES.times_read]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Finish date\"\r\n                            value={values[FIELD_NAMES.finish_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.finish_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Comments\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.comments]}\r\n                            name={FIELD_NAMES.comments}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Tags\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.tags]}\r\n                            name={FIELD_NAMES.tags}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <DialogActions>\r\n                    <AddRemoveFromFavorites branch={BRANCH_MANGA} id={parseInt(id)}/>\r\n                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\" onClick={handleClose}\r\n                                 disabled={isSubmitting}><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                    {edit ? <CyberButton classNames=\"btn-danger\" variant=\"outlined\" onClick={(e) => {\r\n                        deleteEntry(id, list);\r\n                        handleClose()\r\n                    }}><FontAwesomeIcon icon={faTrash}/></CyberButton> : null}\r\n                </DialogActions>\r\n            </Form>\r\n        )}\r\n    </Formik></MuiPickersUtilsProvider>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {updateMangaEntry, addMangaEntry, deleteMangaEntry} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getUserMangaEntryFormInitialValues, UserMangaEntryForm} from \"./forms\";\r\n\r\nimport '../../../../assets/css/forms.css';\r\n\r\n\r\nclass MangaEntryModalForm extends Component {\r\n    static propTypes = {\r\n        /** Classnames for the open dialog btn */\r\n        classNames: PropTypes.object,\r\n        /** Title of the Manga */\r\n        title: PropTypes.string,\r\n        /** ID of the Manga */\r\n        id: PropTypes.number.isRequired,\r\n        /** User entry of the manga */\r\n        user_manga_entry: PropTypes.object,\r\n        /** If the entry is being edited */\r\n        edit: PropTypes.bool,\r\n        /** User list info for filtering on update entry\r\n         * {user_list_pk: list_pk, user_list_filter: selected_filter} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let edit = true;\r\n        if (this.props.edit === undefined) {\r\n            if (isEmpty(this.props.user_manga_entry))\r\n                edit = false;\r\n        } else edit = this.props.edit;\r\n\r\n        const initial_values = getUserMangaEntryFormInitialValues(this.props.id, this.props.user_manga_entry, edit);\r\n\r\n        return (\r\n            <div id=\"User-Title-Entry\">\r\n                <CyberButton classNames={this.props.classNames} variant=\"outlined\" color=\"primary\"\r\n                             onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"user-title-entry-dialog\">\r\n                    {edit ? <DialogTitle id=\"form-dialog-title\">Edit {this.props.title}</DialogTitle>\r\n                        : <DialogTitle id=\"form-dialog-title\">Add {this.props.title}</DialogTitle>}\r\n                    <DialogContent>\r\n                        <UserMangaEntryForm initial_values={initial_values} edit={edit} id={this.props.id}\r\n                                            list={this.props.list} handleClose={this.handleClose}/>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateMangaEntry, addMangaEntry, deleteMangaEntry})(MangaEntryModalForm)\r\n","import React, {useState} from \"react\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport store from \"../../../../store\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport {updateMangaChapter, updateMangaVolume} from \"../../../../actions/users\";\r\nimport {Manga, UserMangaEntry} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/users.css'\r\n\r\n\r\n/**\r\n * Increase volume number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the manga to update\r\n * @param props.entry {Object} The user manga entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UpdateMangaVolumeButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserMangaEntry.read_volumes] === entry[UserMangaEntry.manga][Manga.volumes] &&\r\n        entry[UserMangaEntry.manga][Manga.volumes] !== 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserMangaEntry.read_volumes] !== entry[UserMangaEntry.manga][Manga.volumes] ||\r\n                    entry[UserMangaEntry.manga][Manga.volumes] === 0)\r\n                    store.dispatch(updateMangaVolume(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n\r\n\r\n/**\r\n * Increase volume number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the manga to update\r\n * @param props.entry {Object} The user manga entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UpdateMangaChapterButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserMangaEntry.read_chapters] === entry[UserMangaEntry.manga][Manga.chapters] &&\r\n        entry[UserMangaEntry.manga][Manga.chapters] !== 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserMangaEntry.read_chapters] !== entry[UserMangaEntry.manga][Manga.chapters] ||\r\n                    entry[UserMangaEntry.manga][Manga.chapters] === 0)\r\n                    store.dispatch(updateMangaChapter(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHistory, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Anime, Manga, User, UserAnimeEntry, UserMangaEntry} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Moment from \"react-moment\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport store from \"../../../../store\";\r\nimport {deleteAnimeHistoryEntry, deleteMangaVolumeChapterHistoryEntry} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.entry {Object} Manga entry of the user\r\n * @param props.title {String} Title of the Manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function MangaVolumeChapterHistoryModal(props) {\r\n    const {entry, title} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"History-Modal\">\r\n            <CyberButton disabled={isEmpty(entry) ||\r\n            (entry[UserMangaEntry.volume_history].length === 0 && entry[UserMangaEntry.chapter_history].length === 0)}\r\n                         variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <FontAwesomeIcon icon={faHistory}/>\r\n            </CyberButton>\r\n            {!isEmpty(entry) && entry[UserMangaEntry.volume_history].length > 0 ?\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" id=\"History-Modal-Dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"header-title\">\r\n                            Volume History\r\n                        </DialogContentText>\r\n                        {entry[UserMangaEntry.volume_history].map(history => (\r\n                            <p>Volume <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['volume']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteMangaVolumeHistoryButton\r\n                                    history_id={history['id']}\r\n                                    manga_id={entry[UserMangaEntry.manga][Manga.id]}/>\r\n                            </p>\r\n                        ))}\r\n                        <DialogContentText className=\"header-title\">\r\n                            Chapter History\r\n                        </DialogContentText>\r\n                        {entry[UserMangaEntry.chapter_history].map(history => (\r\n                            <p>Chapter <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['chapter']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteMangaChapterHistoryButton\r\n                                    history_id={history['id']}\r\n                                    manga_id={entry[UserMangaEntry.manga][Manga.id]}/>\r\n                            </p>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <CyberButton onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                            Close\r\n                        </CyberButton>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.manga_id {Number} ID of the manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteMangaVolumeHistoryButton(props) {\r\n    const {history_id, manga_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteMangaVolumeChapterHistoryEntry(history_id, manga_id, 'volume'));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.anime_id {Number} ID of the manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteMangaChapterHistoryButton(props) {\r\n    const {history_id, manga_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteMangaVolumeChapterHistoryEntry(history_id, manga_id, 'chapter'));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nimport {Anime, Manga, VALID_ANIME_RELATION_NAMES, VALID_ANIME_RELATIONS} from \"../../../../models\";\r\nimport {getRelationsForAnime} from \"../../../../actions/anime\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass RelationsTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.anime_relations))\r\n            this.props.getRelationsForAnime(this.props.anime[Anime.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"relations-tab\">\r\n                {!isEmpty(this.props.anime_relations) ? <>\r\n                    {this.props.anime_relations['anime_relation_adaptation'].length > 0 ?\r\n                        <div>\r\n                            <h2 className=\"relation-name\">Adaptation</h2>\r\n                            <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                {this.props.anime_relations['anime_relation_adaptation'].map((manga, x) => (\r\n                                    <Grow key={x} in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1}>\r\n                                            <TitleCard\r\n                                                branch={BRANCH_MANGA}\r\n                                                title={manga}\r\n                                                user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                                        this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                            />\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                ))}\r\n                            </GridList>\r\n                        </div> : null}\r\n\r\n                    {VALID_ANIME_RELATIONS.map((relation_name, i) => (\r\n                        relation_name !== 'anime_relation_adaptation' ?\r\n                            <div key={i}>\r\n                                {this.props.anime_relations[relation_name].length > 0 ?\r\n                                    <h2 className=\"relation-name\">{VALID_ANIME_RELATION_NAMES[relation_name]}</h2> : null}\r\n\r\n                                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                    {this.props.anime_relations[relation_name].map((anime, y) => (\r\n                                        <Grow key={y} in {...({timeout: 200 + (y * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={BRANCH_ANIME}\r\n                                                    title={anime}\r\n                                                    user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                        this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                            </div> : null))}\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_relations: state.anime.anime[Anime.anime_relations],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRelationsForAnime})(RelationsTab)\r\n","import React, {Component} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\nimport Tree from 'react-d3-tree';\r\n\r\nimport {\r\n    BRANCH_ANIME\r\n\r\n} from \"../../../globals\";\r\n\r\nimport {VALID_ANIME_RELATION_NAMES, VALID_ANIME_RELATIONS} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {useCenteredTree} from \"./helpers\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faAngleDoubleDown, faAngleDoubleUp} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nlet TITLES = [];\r\nlet LOCAL_VALID_ANIME_RELATIONS = VALID_ANIME_RELATIONS;\r\nlet b = LOCAL_VALID_ANIME_RELATIONS[1];\r\nLOCAL_VALID_ANIME_RELATIONS[1] = LOCAL_VALID_ANIME_RELATIONS[3];\r\nLOCAL_VALID_ANIME_RELATIONS[3] = b;\r\nlet FINAL_TREE = [];\r\n\r\n\r\nfunction setTitles(titles) {\r\n    TITLES = titles;\r\n}\r\n\r\nfunction compareByAired(a, b) {\r\n    let now = new Date();\r\n    let a_value = false;\r\n    let b_value = false;\r\n    if (a['air_start']) {\r\n        let date_a = new Date(a['air_start']);\r\n        a_value = Math.abs(now - date_a);\r\n    }\r\n    if (a['air_start']) {\r\n        let date_b = new Date(b['air_start']);\r\n        b_value = Math.abs(now - date_b);\r\n    }\r\n    return compare(a_value, b_value);\r\n}\r\n\r\nfunction compare(first, second) {\r\n    if (!first) return -1;\r\n    if (!second) return 1;\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison\r\n}\r\n\r\nfunction getFullAnime(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            return TITLES[x];\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction markAnimeAsAdded(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            TITLES[x]['ADDED'] = true;\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction isAdded(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            return TITLES[x]['ADDED'];\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getChildren(parent_node) {\r\n    markAnimeAsAdded(parent_node['attributes']['info']['id']);\r\n\r\n    // console.log(parent_node);\r\n    if (!parent_node['name']) return;\r\n\r\n    for (let z = 0; z < LOCAL_VALID_ANIME_RELATIONS.length; z++) {\r\n        if (LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_prequel' || LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_adaptation') continue;\r\n        let relation = parent_node['attributes']['info']['anime_relations'][LOCAL_VALID_ANIME_RELATIONS[z]];\r\n        for (let x = 0; x < relation.length; x++) {\r\n            let anime = getFullAnime(relation[x]['id']);\r\n            if (!anime || anime['ADDED'] === true) continue;\r\n            if (anime['anime_relations']['anime_relation_prequel'].length > 0) {\r\n                for (let y = 0; y < anime['anime_relations']['anime_relation_prequel'].length; y++) {\r\n                    if (!isAdded(anime['anime_relations']['anime_relation_prequel'][y]['id'])) {\r\n                        console.log(anime['anime_relations']['anime_relation_prequel'][y]);\r\n                    }\r\n                }\r\n            }\r\n            markAnimeAsAdded(relation[x]['id']);\r\n            let node = {\r\n                name: anime['title'],\r\n                attributes: {\r\n                    info: anime,\r\n                    parent_relation: VALID_ANIME_RELATION_NAMES[LOCAL_VALID_ANIME_RELATIONS[z]]\r\n                },\r\n                children: []\r\n            };\r\n\r\n            parent_node.children.push(node)\r\n        }\r\n    }\r\n\r\n    if (parent_node['children'].length > 0) {\r\n        for (let x = 0; x < parent_node['children'].length; x++) {\r\n            getChildren(parent_node['children'][x])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction checkChildrenForFixingSequel(parent_node, sequel_to_find) {\r\n    if (!parent_node) return;\r\n    for (let x = 0; x < parent_node['children'].length; x++) {\r\n        if (parent_node['children'][x]['attributes']['info']['id'] === sequel_to_find['id']) {\r\n            let node_to_return = parent_node['children'][x];\r\n            const index = parent_node['children'].indexOf(parent_node['children'][x]);\r\n            if (index > -1) {\r\n                parent_node['children'].splice(index, 1);\r\n            }\r\n            return node_to_return;\r\n        }\r\n        let node_to_return = checkChildrenForFixingSequel(parent_node['children'][x], sequel_to_find);\r\n        if (node_to_return) return node_to_return;\r\n    }\r\n}\r\n\r\n\r\nfunction fixSequelPriority(parent_node) {\r\n    let parent_anime = getFullAnime(parent_node['attributes']['info']['id']);\r\n\r\n    if (parent_anime['anime_relations']['anime_relation_sequel'].length > 0 &&\r\n        parent_anime['anime_relations']['anime_relation_full_story'].length <= 0) {\r\n        let in_children = false;\r\n        let sequel_to_find;\r\n        for (let x = 0; x < parent_anime['anime_relations']['anime_relation_sequel'].length; x++) {\r\n            let sequel_anime = getFullAnime(parent_anime['anime_relations']['anime_relation_sequel'][x]['id']);\r\n\r\n            for (let y = 0; y < parent_node['children'].length; y++) {\r\n                let anime = getFullAnime(parent_node['children'][y]['attributes']['info']['id']);\r\n                if (sequel_anime['id'] === anime['id']) {\r\n                    in_children = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (sequel_anime['anime_relations']) {\r\n                if (sequel_anime['anime_relations']['anime_relation_prequel'].length > 1 && parent_anime['type'] != 'TV') {\r\n                    in_children = true;\r\n                }\r\n            }\r\n            sequel_to_find = sequel_anime;\r\n        }\r\n\r\n        if (!in_children) {\r\n            // NOW FIND IT IN THE TREE AND CUT IT FROM THERE AND PASTE IT AS ITS SEQUEL IN HIS CHILDREN\r\n            let root_node = FINAL_TREE[0];\r\n            let node_to_fix = checkChildrenForFixingSequel(root_node, sequel_to_find);\r\n            if (node_to_fix) {\r\n                node_to_fix['attributes']['parent_relation'] = 'Sequel';\r\n                parent_node['children'].push(node_to_fix);\r\n            }\r\n        }\r\n    }\r\n    if (parent_node['children'].length > 0) {\r\n        for (let x = 0; x < parent_node['children'].length; x++) {\r\n            fixSequelPriority(parent_node['children'][x])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getRootNode(titles) {\r\n    // First find the root title\r\n    // Root is valid if it doesnt have (Parent Story,\r\n    // Full Story, or Other that is a TV or Movie and current title is not TV)\r\n    let root;\r\n    let root_node;\r\n\r\n    for (let x = 0; x < titles.length; x++) {\r\n        let _continue = false;\r\n        if (titles[x]['anime_relations']['anime_relation_full_story'].length > 0)\r\n            continue;\r\n        else if (titles[x]['anime_relations']['anime_relation_parent_story'].length > 0)\r\n            continue;\r\n        else if (titles[x]['anime_relations']['anime_relation_prequel'].length > 0)\r\n            continue;\r\n        else if (titles[x]['type'] !== 'TV' && titles[x]['anime_relations']['anime_relation_other'].length > 0 && titles[x]['anime_relations']['anime_relation_sequel'].length <= 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_other'].length; y++) {\r\n                if (titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'TV' ||\r\n                    titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'Movie' ||\r\n                    titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'OVA') {\r\n                    _continue = true;\r\n                    break\r\n                }\r\n            }\r\n            if (_continue) continue;\r\n        }\r\n        if (titles[x]['type'] !== 'TV' && titles[x]['anime_relations']['anime_relation_spin_off'].length > 0) {\r\n            let check = true;\r\n            for (let z = 0; z < LOCAL_VALID_ANIME_RELATIONS.length; z++) {\r\n                if (LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_spin_off' || LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_adaptation') continue;\r\n                if (titles[x]['anime_relations'][LOCAL_VALID_ANIME_RELATIONS[z]].length > 0) {\r\n                    check = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (check) {\r\n                for (let y = 0; y < titles[x]['anime_relations']['anime_relation_spin_off'].length; y++) {\r\n                    if (titles[x]['anime_relations']['anime_relation_spin_off'][y]['type'] === 'TV') {\r\n                        _continue = true;\r\n                        break\r\n                    }\r\n                }\r\n                if (_continue) continue;\r\n            }\r\n        }\r\n        if (titles[x]['type'] === 'TV' && titles[x]['anime_relations']['anime_relation_alternative_setting'].length > 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_alternative_setting'].length; y++) {\r\n                let anime = getFullAnime(titles[x]['anime_relations']['anime_relation_alternative_setting'][y]['id']);\r\n                if (anime) {\r\n                    if (anime['anime_relations']['anime_relation_prequel'].length > 0) {\r\n                        _continue = true;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n            if (_continue) continue;\r\n        }\r\n        if (titles[x]['type'] === 'Movie' && titles[x]['anime_relations']['anime_relation_alternative_version'].length > 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_alternative_version'].length; y++) {\r\n                if (titles[x]['anime_relations']['anime_relation_alternative_version'][y]['type'] === 'TV') {\r\n                    _continue = true;\r\n                    break\r\n                }\r\n            }\r\n            if (_continue) continue\r\n        }\r\n\r\n        root = titles[x];\r\n        root_node = {\r\n            name: root['title'],\r\n            attributes: {\r\n                info: root,\r\n                parent_relation: null\r\n            },\r\n            children: []\r\n        };\r\n        return root_node;\r\n    }\r\n    return false\r\n}\r\n\r\nconst renderForeignObjectNode = ({nodeDatum, toggleNode, foreignObjectProps, user_statuses}) => (\r\n    <g>\r\n        {/* `foreignObject` requires width & height to be explicitly set. */}\r\n        <foreignObject {...foreignObjectProps} className=\"foreign-object\">\r\n            {console.log('statuses', user_statuses)}\r\n            <div style={{width: \"50%\"}}>\r\n                <p className=\"card-relation-name\">{nodeDatum['attributes']['parent_relation']}</p>\r\n                <div className=\"card-wrapper\">\r\n                    <TitleCard\r\n                        classNames=\"franchise-card\"\r\n                        branch={BRANCH_ANIME}\r\n                        title={nodeDatum['attributes']['info']}\r\n                        user_status={user_statuses[nodeDatum['attributes']['info']['id'].toString()]}\r\n                    />\r\n                </div>\r\n                {nodeDatum.children.length > 0 && (\r\n                    <CyberButton classNames=\"btn-contained-primary\" style={{width: \"100%\"}} onClick={toggleNode}>\r\n                        <FontAwesomeIcon icon={nodeDatum.__rd3t.collapsed ? faAngleDoubleDown : faAngleDoubleUp}/>\r\n                    </CyberButton>\r\n                )}\r\n            </div>\r\n        </foreignObject>\r\n    </g>\r\n);\r\n\r\nfunction TreeBuilder(props) {\r\n    const {data, user_statuses} = props;\r\n    const [translate, containerRef] = useCenteredTree();\r\n    const nodeSize = {x: 600, y: 600};\r\n    const foreignObjectProps = {width: nodeSize.x, height: nodeSize.y, x: -150, y: -250};\r\n    console.log('in tree builder', user_statuses);\r\n    return (\r\n        <div style={{width: \"100%\", height: \"100vh\"}} ref={containerRef}>\r\n            <Tree\r\n                data={data}\r\n                translate={translate}\r\n                nodeSize={nodeSize}\r\n                pathFunc={'step'}\r\n                renderCustomNodeElement={(rd3tProps) =>\r\n                    renderForeignObjectNode({...rd3tProps, user_statuses, foreignObjectProps})\r\n                }\r\n                orientation=\"vertical\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nclass FranchiseTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {titles, user_anime_entry_statuses, mini} = this.props;\r\n\r\n        // let translate = {x: innerWidth / 2, y: innerHeight / 3};\r\n        let node_size = {x: 294, y: 500};\r\n        let foreign_object_wrapper = {x: -132, y: -230};\r\n        let svgSquare = {\r\n            shape: 'rect',\r\n            shapeProps: {\r\n                width: 265,\r\n                height: 450,\r\n                x: -125,\r\n                y: -230,\r\n            }\r\n        };\r\n\r\n        // console.log(mini);\r\n\r\n        if (mini) {\r\n            svgSquare.shapeProps = {\r\n                width: 120,\r\n                height: 200,\r\n                x: -80,\r\n                y: -100,\r\n            };\r\n            foreign_object_wrapper = {x: -75, y: -120};\r\n            node_size = {x: 184, y: 300};\r\n            // translate.y = innerHeight / 4;\r\n        }\r\n\r\n        for (let x = 0; x < titles.length; x++) {\r\n            titles[x]['ADDED'] = false\r\n        }\r\n\r\n        setTitles(titles);\r\n        titles.sort(compareByAired).reverse();\r\n\r\n        let root_node = getRootNode(titles);\r\n\r\n        FINAL_TREE = [\r\n            root_node\r\n        ];\r\n\r\n        if (root_node) {\r\n            getChildren(root_node);\r\n            FINAL_TREE = [\r\n                root_node\r\n            ];\r\n            try {\r\n                fixSequelPriority(root_node);\r\n            } catch (e) {\r\n            }\r\n            FINAL_TREE = [\r\n                root_node\r\n            ];\r\n            // fixSequelPriority(root_node);\r\n\r\n            // let missing = false;\r\n            // for (let x = 0; x < titles.length; x++) {\r\n            //     if (!titles[x]['ADDED']) {\r\n            //         missing = true;\r\n            //     }\r\n            // }\r\n\r\n            // if (missing) {\r\n            //     getMissingChildren(root_node);\r\n            // }\r\n\r\n            // let missing = true;\r\n            // while (missing) {\r\n            //     missing = false;\r\n            //     for (let x = 0; x < titles.length; x++) {\r\n            //         if (!titles[x]['ADDED']) {\r\n            //             missing = true;\r\n            //         }\r\n            //     }\r\n            //     fixMissingTitles(root_node, titles)\r\n            // }\r\n        }\r\n\r\n        let TreeData = FINAL_TREE;\r\n        let missing = 0;\r\n        for (let x = 0; x < titles.length; x++) {\r\n            if (!titles[x]['ADDED']) {\r\n                console.log(titles[x]['id']);\r\n                missing += 1;\r\n            }\r\n        }\r\n\r\n        if (root_node) {\r\n            return (\r\n                <div id=\"Franchise-Tree\">\r\n                    <div style={{position: 'absolute'}}>{missing}</div>\r\n                    {/*<div className=\"card-size-btn-container\"><Button color={'primary'} onClick={this.toggleCard}>X</Button></div>*/}\r\n                    <TreeBuilder data={TreeData} user_statuses={this.props.user_anime_entry_statuses}/>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <p className=\"color-blue\">Could not generate franchise</p>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    // mini: state.anime.display_franchise_mini,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(FranchiseTree)\r\n","import { useCallback, useState } from \"react\";\r\n\r\n\r\nexport const useCenteredTree = (defaultTranslate = { x: 0, y: 0 }) => {\r\n  const [translate, setTranslate] = useState(defaultTranslate);\r\n  const containerRef = useCallback((containerElem) => {\r\n    if (containerElem !== null) {\r\n      const { width, height } = containerElem.getBoundingClientRect();\r\n      setTranslate({ x: width / 2, y: height / 2 });\r\n    }\r\n  }, []);\r\n  return [translate, containerRef];\r\n};","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, AnimeFranchise} from \"../../../../models\";\r\nimport {getAnimeFranchise} from \"../../../../actions/anime\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport FranchiseTree from \"../../../franchises/display/FranchiseTree\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {ANIME_FRANCHISE_DISPLAY} from \"../../../../urls\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSitemap} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass FranchiseTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.anime_franchise))\r\n            this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Display-Franchise\" className=\"franchise-tab\">\r\n                <CyberLink to={ANIME_FRANCHISE_DISPLAY(this.props.anime[Anime.franchise])}><CyberButton variant=\"outlined\"><FontAwesomeIcon icon={faSitemap}/></CyberButton></CyberLink>\r\n                {!isEmpty(this.props.anime_franchise) ?\r\n                    <FranchiseTree titles={this.props.anime_franchise[AnimeFranchise.anime_franchise]}/>\r\n                    : this.props.anime_franchise_loading ? <Loading text={'Franchise Loading'}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise})(FranchiseTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faDownload} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport DownloadTorrentForm from \"./DownloadTorrentForm\";\r\n\r\n\r\nclass DownloadTorrentModalForm extends Component {\r\n    static propTypes = {\r\n        /** classNames */\r\n        classNames: PropTypes.string,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Download-Anime-Torrent-Modal\" className={this.props.classNames}>\r\n                <CyberButton classNames=\"btn-contained-secondary\" onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={faDownload}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"download-torrent-dialog\">\r\n                        <DialogTitle id=\"form-dialog-title\">Download torrent</DialogTitle>\r\n                        <DialogContent>\r\n                            <DownloadTorrentForm handleClose={this.handleClose}/>\r\n                        </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(DownloadTorrentModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {Anime, AnimeOnServer} from \"../../../models\";\r\nimport moment from \"moment\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown,\r\n    faArrowUp,\r\n    faBan,\r\n    faClock,\r\n    faDownload,\r\n    faHdd,\r\n    faPause, faPuzzlePiece,\r\n    faSpinner, faUpload, faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {getBytesToSize, getProgress, getSpeed, TorrentProgressInfo} from \"./snippets\";\r\nimport PropTypes from \"prop-types\";\r\nimport {getTorrentProgress} from \"../../../actions/requiem\";\r\nimport {sleep} from \"../../functions\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nclass DisplayTorrentProgress extends Component {\r\n    static propTypes = {\r\n        /** ID of the title to get torrent progress for */\r\n        id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            torrent_progress_reading: false,\r\n            update_interval: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTorrentProgress(this.props.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {id, getTorrentProgress} = this.props;\r\n        setTimeout(() => { getTorrentProgress(id) }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const torrent_filters = {\r\n            'name': false, 'size': true, 'dl_speed': true, 'up_speed': true, 'remaining': true,\r\n            'seeds': true, 'leechs': true, 'eta': true\r\n        };\r\n\r\n        return this.props.torrent_progress && this.props.torrent_progress.length > 0 ?\r\n            this.props.torrent_progress.map(torrent => (\r\n                <TorrentProgressInfo torrent={torrent} filters={torrent_filters}/>\r\n            )) : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    torrent_progress: state.requiem.torrent_progress\r\n});\r\n\r\nexport default connect(mapStateToProps, {getTorrentProgress})(DisplayTorrentProgress)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Character, Person} from \"../../../../models\";\r\nimport {getVoiceActorRolesForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../../actions/users\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 20;\r\n\r\n\r\nclass VoiceActorRolesTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.voice_actor_roles] || this.props.voice_actor_roles[ApiResult.previous])\r\n            this.props.getVoiceActorRolesForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_anime_entry_statuses))\r\n            this.props.getLoggedInUserAnimeEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getVoiceActorRolesForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"person-voice-actor-roles-tab person-tab\">\r\n                {this.props.voice_actor_roles ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.voice_actor_roles[ApiResult.results].map((character, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    {character[Character.anime_roles].map((anime, x) => (\r\n                                        <TitleCard\r\n                                            key={x} branch={BRANCH_ANIME} title={anime}\r\n                                            containerClassNames=\"character-role-wrapper-card-container\"\r\n                                            user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                        />\r\n                                    ))}\r\n                                </td>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    {/*</GridList>*/}\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.characters_loading ? <Loading text={'Characters loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    voice_actor_roles: state.people.person[Person.voice_actor_roles],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    characters_loading: state.characters.characters_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getVoiceActorRolesForPerson, getLoggedInUserAnimeEntryStatuses\r\n})(VoiceActorRolesTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Character, Person} from \"../../../../models\";\r\nimport {getAnimeStaffPositionsForPerson, getVoiceActorRolesForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 50;\r\n\r\n\r\nclass AnimeStaffPositionsTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.anime_staff_positions] || this.props.anime_staff_positions[ApiResult.previous])\r\n            this.props.getAnimeStaffPositionsForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_anime_entry_statuses))\r\n            this.props.getLoggedInUserAnimeEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAnimeStaffPositionsForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const positions_roles = JSON.parse(this.props.person[Person.anime_staff_positions_roles]);\r\n        return (\r\n            <div className=\"person-tab\">\r\n                {this.props.anime_staff_positions ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.anime_staff_positions[ApiResult.results].map((anime, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        key={i} branch={BRANCH_ANIME} title={anime}\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                            this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                    />\r\n                                </td>\r\n                                <td><p className=\"role\">{positions_roles[anime[Anime.id]]}</p></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.anime_loading ? <Loading text={'Anime loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    anime_staff_positions: state.people.person[Person.anime_staff_positions],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    anime_loading: state.anime.anime_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getAnimeStaffPositionsForPerson, getLoggedInUserAnimeEntryStatuses\r\n})(AnimeStaffPositionsTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Manga, Person} from \"../../../../models\";\r\nimport {getPublishedMangaForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {getLoggedInUserMangaEntryStatuses} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 50;\r\n\r\n\r\nclass PublishedMangaTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.published_manga] || this.props.published_manga[ApiResult.previous])\r\n            this.props.getPublishedMangaForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_manga_entry_statuses))\r\n            this.props.getLoggedInUserMangaEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getPublishedMangaForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const manga_roles = JSON.parse(this.props.person[Person.published_manga_roles]);\r\n        return (\r\n            <div className=\"person-tab\">\r\n                {this.props.published_manga ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.published_manga[ApiResult.results].map((manga, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        key={i} branch={BRANCH_MANGA} title={manga}\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                            this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                    />\r\n                                </td>\r\n                                <td><p className=\"role\">{manga_roles[manga[Manga.id]]}</p></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.manga_loading ? <Loading text={'Manga loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    published_manga: state.people.person[Person.published_manga],\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n    manga_loading: state.manga.manga_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPublishedMangaForPerson, getLoggedInUserMangaEntryStatuses\r\n})(PublishedMangaTab)\r\n","import {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA, BRANCH_PEOPLE,\r\n    store_reducer_users,\r\n    store_reducers, USER_ANIME_STATUSES, USER_MANGA_STATUSES\r\n} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {getAnime} from \"../../actions/anime\";\r\nimport {getManga} from \"../../actions/manga\";\r\nimport {formatBytes, formatContentDateByKnown, isEmpty} from \"../functions\";\r\nimport {\r\n    Anime,\r\n    AnimeOnServer,\r\n    Character,\r\n    Eroge,\r\n    Manga, Person,\r\n    Profile,\r\n    User,\r\n    UserAnimeEntry,\r\n    UserMangaEntry\r\n} from \"../../models\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons/faPlay\";\r\nimport React from \"react\";\r\nimport GeneralTab from \"../anime/display/tabs/GeneralTab\";\r\nimport MangaGeneralTab from \"../manga/display/tabs/GeneralTab\";\r\nimport CharactersGeneralTab from \"../characters/display/tabs/GeneralTab\";\r\nimport PeopleGeneralTab from \"../people/display/tabs/GeneralTab\";\r\nimport ErogeGeneralTab from \"../eroge/display/tabs/GeneralTab\";\r\nimport CharactersTab from \"../anime/display/tabs/CharactersTab\";\r\nimport MangaCharactersTab from \"../manga/display/tabs/CharactersTab\";\r\nimport MangaRelationsTab from \"../manga/display/tabs/RelationsTab\";\r\nimport ServerTab from \"../anime/display/tabs/ServerTab\";\r\nimport {\r\n    faBookOpen,\r\n    faCodeBranch,\r\n    faDownload, faEdit,\r\n    faHistory,\r\n    faInfo, faLevelDownAlt, faMinusSquare,\r\n    faServer,\r\n    faSitemap, faSyncAlt, faUserCog,\r\n    faUserFriends\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {getCharacter} from \"../../actions/characters\";\r\nimport {getEroge} from \"../../actions/eroge\";\r\nimport Moment from \"react-moment\";\r\nimport {\r\n    addToFavorites,\r\n    getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses,\r\n    getUserAnimeEntry,\r\n    getUserMangaEntry,\r\n    removeFromFavorites\r\n} from \"../../actions/users\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AnimeEntryModalForm from \"../user/forms/anime/AnimeEntryModalForm\";\r\nimport {faPlus, faPlusSquare, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\nimport UpdateAnimeEpisodeButton from \"../user/forms/anime/UpdateAnimeEpisodeButton\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport AnimeEpisodeHistoryModal from \"../user/forms/anime/AnimeEpisodeHistoryModal\";\r\nimport MangaEntryModalForm from \"../user/forms/manga/MangaEntryModalForm\";\r\nimport {\r\n    UpdateMangaVolumeButton,\r\n    UpdateMangaChapterButton\r\n} from \"../user/forms/manga/UpdateMangaVolumeChapterButtons\";\r\nimport MangaVolumeChapterHistoryModal from \"../user/forms/manga/MangaVolumeChapterHistoryModal\";\r\nimport RelationsTab from \"../anime/display/tabs/RelationsTab\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {element} from \"prop-types\";\r\nimport {\r\n    ADMIN_EDIT_ANIME,\r\n    ADMIN_EDIT_CHARACTER,\r\n    ADMIN_EDIT_EROGE,\r\n    ADMIN_EDIT_MANGA, ADMIN_EDIT_PERSON,\r\n    ANIME_FRANCHISE_DISPLAY\r\n} from \"../../urls\";\r\nimport FranchiseTab from \"../anime/display/tabs/FranchiseTab\";\r\nimport {getTorrentProgress, scrapeUpdateTitle} from \"../../actions/requiem\";\r\nimport DownloadTorrentModalForm from \"../requiem/forms/DownloadTorrentModalForm\";\r\nimport {TorrentProgressInfo} from \"../requiem/snippets/snippets\";\r\nimport DisplayTorrentProgress from \"../requiem/snippets/DisplayTorrentProgress\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport EditAnimeOnServerModalForm from \"../requiem/forms/EditAnimeOnServerModalForm\";\r\nimport {AddAnimeEntryInstantDropButton, AddMangaEntryInstantDropButton} from \"../user/forms/shortForms\";\r\nimport {getPerson} from \"../../actions/people\";\r\nimport VoiceActorRolesTab from \"../people/display/tabs/VoiceActorRolesTab\";\r\nimport AnimeStaffPositionsTab from \"../people/display/tabs/AnimeStaffPositionsTab\";\r\nimport PublishedMangaTab from \"../people/display/tabs/PublishedMangaTab\";\r\n\r\n\r\nexport function UserAnimeEntryStatus(props) {\r\n    const {classNames, entry} = props;\r\n    let status_classname = 'chip-primary';\r\n\r\n    switch (entry[UserAnimeEntry.status]) {\r\n        case USER_ANIME_STATUSES.watching:\r\n            status_classname = 'chip-success';\r\n            break;\r\n        case USER_ANIME_STATUSES.on_hold:\r\n            status_classname = 'chip-warning';\r\n            break;\r\n        case USER_ANIME_STATUSES.dropped:\r\n            status_classname = 'chip-danger';\r\n            break;\r\n        case USER_ANIME_STATUSES.plan_to_watch:\r\n            status_classname = 'chip-default';\r\n            break;\r\n    }\r\n\r\n    return <Grid container className=\"summery-container box-light\">\r\n        <Grid item xs={2}>\r\n            <p>My Status</p>\r\n            <p><Chip className={status_classname} label={entry[UserAnimeEntry.status]}/></p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Progress</p>\r\n            <p>{entry[UserAnimeEntry.watched_episodes]}\r\n                {entry[UserAnimeEntry.status] !== USER_ANIME_STATUSES.completed ?\r\n                    <UpdateAnimeEpisodeButton id={entry[UserAnimeEntry.anime][UserAnimeEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Score</p>\r\n            <p>{entry[UserAnimeEntry.score] === 0 ?\r\n                <span className=\"color-gray\">0</span> : entry[UserAnimeEntry.score]}</p>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n            <p>Started Watching</p>\r\n            <p>{entry[UserAnimeEntry.start_date] ?\r\n                <Moment date={entry[UserAnimeEntry.start_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n            <p>Finished Watching</p>\r\n            <p>{entry[UserAnimeEntry.finish_date] ?\r\n                <Moment date={entry[UserAnimeEntry.finish_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport function UserMangaEntryStatus(props) {\r\n    const {classNames, entry} = props;\r\n    let status_classname = 'chip-primary';\r\n\r\n    switch (entry[UserAnimeEntry.status]) {\r\n        case USER_MANGA_STATUSES.reading:\r\n            status_classname = 'chip-success';\r\n            break;\r\n        case USER_MANGA_STATUSES.on_hold:\r\n            status_classname = 'chip-warning';\r\n            break;\r\n        case USER_MANGA_STATUSES.dropped:\r\n            status_classname = 'chip-danger';\r\n            break;\r\n        case USER_MANGA_STATUSES.plan_to_read:\r\n            status_classname = 'chip-default';\r\n            break;\r\n    }\r\n\r\n    return <Grid container className=\"summery-container box-light\">\r\n        <Grid item xs={2}>\r\n            <p>My Status</p>\r\n            <p><Chip className={status_classname} label={entry[UserMangaEntry.status]}/></p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Volumes</p>\r\n            <p>{entry[UserMangaEntry.read_volumes]}\r\n                {entry[UserMangaEntry.status] !== USER_MANGA_STATUSES.completed ?\r\n                    <UpdateMangaVolumeButton id={entry[UserMangaEntry.manga][UserMangaEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Chapters</p>\r\n            <p>{entry[UserMangaEntry.read_chapters]}\r\n                {entry[UserMangaEntry.status] !== USER_MANGA_STATUSES.completed ?\r\n                    <UpdateMangaChapterButton id={entry[UserMangaEntry.manga][UserMangaEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Score</p>\r\n            <p>{entry[UserMangaEntry.score] === 0 ?\r\n                <span className=\"color-gray\">0</span> : entry[UserMangaEntry.score]}</p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>Started Reading</p>\r\n            <p>{entry[UserMangaEntry.start_date] ?\r\n                <Moment date={entry[UserMangaEntry.start_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>Finished Reading</p>\r\n            <p>{entry[UserMangaEntry.finish_date] ?\r\n                <Moment date={entry[UserMangaEntry.finish_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport function getTitle(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(getAnime(id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(getManga(id));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            store.dispatch(getCharacter(id));\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(getEroge(id));\r\n            return;\r\n        case BRANCH_PEOPLE:\r\n            store.dispatch(getPerson(id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getUserTitleStatus(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(getUserAnimeEntry(id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(getUserMangaEntry(id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport function getUserTitleStatusSummary(branch, entry) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <UserAnimeEntryStatus entry={entry}/>;\r\n        case BRANCH_MANGA:\r\n            return <UserMangaEntryStatus entry={entry}/>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\nfunction checkFavorites(favoriteTitles, currentTitleId) {\r\n    if (favoriteTitles.length <= 0) return false;\r\n    else\r\n        for (let x = 0; x < favoriteTitles.length; x++) {\r\n            if (favoriteTitles[x]['id'] === currentTitleId) return true;\r\n        }\r\n    return false\r\n}\r\n\r\n\r\nexport function isTitleInFavorites(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            let favorite_anime = store.getState().auth.user[User.profile][Profile.favorite_anime];\r\n            return checkFavorites(favorite_anime, parseInt(id));\r\n        case BRANCH_MANGA:\r\n            let favorite_manga = store.getState().auth.user[User.profile][Profile.favorite_manga];\r\n            return checkFavorites(favorite_manga, parseInt(id));\r\n        case BRANCH_CHARACTERS:\r\n            let favorite_characters = store.getState().auth.user[User.profile][Profile.favorite_characters];\r\n            return checkFavorites(favorite_characters, parseInt(id));\r\n        case BRANCH_PEOPLE:\r\n            let favorite_people = store.getState().auth.user[User.profile][Profile.favorite_people];\r\n            return checkFavorites(favorite_people, parseInt(id));\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.entry {Object} Entry of the user\r\n * @param props.title {String} Title\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserModalForms(props) {\r\n    const {branch, id, entry, title} = props;\r\n    const in_favorites = isTitleInFavorites(branch, id);\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <>\r\n                <AnimeEntryModalForm\r\n                    id={id} title={title}\r\n                    user_anime_entry={entry}/>\r\n                {isEmpty(entry) ? <AddAnimeEntryInstantDropButton anime_id={parseInt(id)}/> : null}\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n                <CyberButton disabled={true} variant=\"outlined\" color=\"primary\">\r\n                    <FontAwesomeIcon icon={faPlusSquare}/>\r\n                </CyberButton>\r\n                <AnimeEpisodeHistoryModal title={title} entry={entry}/>\r\n            </>;\r\n        case BRANCH_MANGA:\r\n            return <>\r\n                <MangaEntryModalForm\r\n                    id={id} title={title}\r\n                    user_manga_entry={entry}/>\r\n                {isEmpty(entry) ? <AddMangaEntryInstantDropButton manga_id={parseInt(id)}/> : null}\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n                <CyberButton disabled={true} variant=\"outlined\" color=\"primary\">\r\n                    <FontAwesomeIcon icon={faPlusSquare}/>\r\n                </CyberButton>\r\n                <MangaVolumeChapterHistoryModal title={title} entry={entry}/>\r\n            </>;\r\n        case BRANCH_CHARACTERS:\r\n            return <>\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_PEOPLE:\r\n            return <>\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n            </>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.entry {Object} Entry of the user\r\n * @param props.title {String} Title\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AdminModalForms(props) {\r\n    const {branch, id, entry, title} = props;\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <>\r\n                <a href={ADMIN_EDIT_ANIME(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n                {isEmpty(title[Anime.anime_on_server]) ? <>\r\n                    <DownloadTorrentModalForm classNames=\"download-torrent-btn\"/>\r\n                    <EditAnimeOnServerModalForm classNames=\"download-torrent-btn\"/>\r\n                    </>\r\n                    : null}\r\n            </>;\r\n        case BRANCH_MANGA:\r\n            return <>\r\n                <a href={ADMIN_EDIT_MANGA(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_CHARACTERS:\r\n            return <>\r\n                <a href={ADMIN_EDIT_CHARACTER(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_EROGE:\r\n            return <>\r\n                <a href={ADMIN_EDIT_EROGE(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_PEOPLE:\r\n            return <>\r\n                <a href={ADMIN_EDIT_PERSON(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function formatTitle(branch, title, superuser) {\r\n    let display_title = {\r\n        id: 0,\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: null,\r\n        title_1: null,\r\n        title_2: null,\r\n        title_3: null,\r\n        info_set: null,\r\n        db_info_set: null,\r\n        users_info_set: null,\r\n        primary_set: null,\r\n        primary_set_wide: null,\r\n        secondary_set: null,\r\n        tabs: null\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            display_title.id = title[Anime.id];\r\n            display_title.cover_images = title[Anime.anime_cover_images] ? title[Anime.anime_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Anime.anime_cdn_cover_images] ? title[Anime.anime_cdn_cover_images] : [];\r\n            display_title.title = title[Anime.title];\r\n            display_title.title_1 = {label: 'English', title: title[Anime.title_english]};\r\n            display_title.title_2 = {label: 'Synonyms', title: title[Anime.title_synonyms]};\r\n            display_title.title_3 = {label: 'Japanese', title: title[Anime.title_japanese]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Anime.mal_link]}>MAL</a>},\r\n                {label: 'Aired', info: title[Anime.aired_string]},\r\n                {label: 'Premiered', info: title[Anime.premiered]},\r\n                {label: 'Broadcast', info: title[Anime.broadcast]},\r\n                {label: 'Producer', info: title[Anime.producer]},\r\n                {label: 'Licensor', info: title[Anime.licensor]},\r\n                {label: 'Studio', info: title[Anime.studio]},\r\n                {label: 'Source', info: title[Anime.source]},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Anime.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Anime.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Anime.score]},\r\n                {label: 'Scored by', info: title[Anime.scored_by]},\r\n                {label: 'Rank', info: title[Anime.rank]},\r\n                {label: 'Popularity', info: title[Anime.popularity]},\r\n                {label: 'Members', info: title[Anime.members]},\r\n                {label: 'Favorites', info: title[Anime.favorites]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Status', info: title[Anime.status]},\r\n                {label: 'Type', info: title[Anime.type]},\r\n                {label: 'Episodes', info: title[Anime.episodes] ? title[Anime.episodes] : '?'},\r\n                {\r\n                    label: 'Duration',\r\n                    info: title[Anime.minutes_per_episode] ? `${title[Anime.minutes_per_episode]}m per ep` : '?'\r\n                },\r\n                {label: 'Rating', info: title[Anime.rating_short]},\r\n                {\r\n                    label: 'Aired',\r\n                    info: formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true)\r\n                },\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <GeneralTab/>\r\n                },\r\n                {\r\n                    disabled: title[Anime.main_characters].length === 0,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Characters</p>,\r\n                    tab: <CharactersTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.anime_relations],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faCodeBranch}/> Relations</p>,\r\n                    tab: <RelationsTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.franchise],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faSitemap}/> Franchise</p>,\r\n                    tab: <FranchiseTab/>\r\n                },\r\n            ];\r\n\r\n            if (display_title.primary_set && title[Anime.genres_csv]) {\r\n                const genres = title[Anime.genres_csv].split(', ');\r\n                let info = [];\r\n                genres.forEach(genre => {\r\n                    info.push(<span className=\"genre-spacing\">{genre}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Genres', info: info},\r\n                ];\r\n            }\r\n            if (title[Anime.anime_on_server]) {\r\n                if (title[Anime.anime_on_server][AnimeOnServer.downloading]) {\r\n                    if (superuser)\r\n                        display_title.secondary_set = [{\r\n                            label: null, info: <DisplayTorrentProgress id={title[Anime.id]}/>\r\n                        }];\r\n                    else\r\n                        display_title.secondary_set = [{\r\n                            label: 'Currently Downloading', info: <CircularProgress color=\"secondary\"/>\r\n                        }];\r\n                } else\r\n                    display_title.secondary_set = [\r\n                        {label: 'Size', info: `${title[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB]}GB`},\r\n                        {label: 'Quality', info: title[Anime.anime_on_server][AnimeOnServer.video_quality]},\r\n                        {label: 'Channel', info: title[Anime.anime_on_server][AnimeOnServer.audio_channel]},\r\n                        {\r\n                            label: 'Japanese Dub',\r\n                            info: title[Anime.anime_on_server][AnimeOnServer.japanese_dub] ? 'Yes' : 'No'\r\n                        },\r\n                        {\r\n                            label: 'English  Sub',\r\n                            info: title[Anime.anime_on_server][AnimeOnServer.english_sub] ? 'Yes' : 'No'\r\n                        },\r\n                        {\r\n                            label: null,\r\n                            info: <CyberButton variant=\"outlined\" color=\"secondary\"><FontAwesomeIcon\r\n                                icon={faPlay}/></CyberButton>\r\n                        },\r\n                    ];\r\n                    display_title.tabs.push({\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon color-secondary\"><FontAwesomeIcon icon={faServer}/> Server</p>,\r\n                    tab: <ServerTab/>\r\n                });\r\n            }\r\n            return display_title;\r\n        case BRANCH_MANGA:\r\n            display_title.id = title[Manga.id];\r\n            display_title.cover_images = title[Manga.manga_cover_images];\r\n            display_title.cdn_cover_images = title[Manga.manga_cdn_cover_images] ? title[Manga.manga_cdn_cover_images] : [];\r\n            display_title.title = title[Manga.title];\r\n            display_title.title_1 = {label: 'English', title: title[Manga.title_english]};\r\n            display_title.title_2 = {label: 'Synonyms', title: title[Manga.title_synonyms]};\r\n            display_title.title_3 = {label: 'Japanese', title: title[Manga.title_japanese]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Manga.mal_link]}>MAL</a>},\r\n                {label: 'Published', info: title[Manga.published_string]},\r\n                {label: 'Authors', info: title[Manga.authors]},\r\n                {label: 'Serialization', info: title[Manga.serialization]},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Manga.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Manga.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Manga.score]},\r\n                {label: 'Scored by', info: title[Manga.scored_by]},\r\n                {label: 'Rank', info: title[Manga.rank]},\r\n                {label: 'Popularity', info: title[Manga.popularity]},\r\n                {label: 'Members', info: title[Manga.members]},\r\n                {label: 'Favorites', info: title[Manga.favorites]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Status', info: title[Manga.status]},\r\n                {label: 'Type', info: title[Manga.type]},\r\n                {label: 'Volumes', info: title[Manga.volumes] ? title[Manga.volumes] : '?'},\r\n                {label: 'Chapters', info: title[Manga.chapters] ? title[Manga.chapters] : '?'},\r\n                {\r\n                    label: 'Published',\r\n                    info: formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true)\r\n                },\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <MangaGeneralTab/>\r\n                },\r\n                {\r\n                    disabled: title[Manga.main_characters].length === 0,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Characters</p>,\r\n                    tab: <MangaCharactersTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Manga.manga_relations],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faCodeBranch}/> Relations</p>,\r\n                    tab: <MangaRelationsTab/>\r\n                },\r\n            ];\r\n            if (display_title.primary_set && title[Manga.genres_csv]) {\r\n                const genres = title[Manga.genres_csv].split(', ');\r\n                let info = [];\r\n                genres.forEach(genre => {\r\n                    info.push(<span className=\"genre-spacing\">{genre}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Genres', info: info},\r\n                ];\r\n            }\r\n            return display_title;\r\n        case BRANCH_CHARACTERS:\r\n            display_title.id = title[Character.id];\r\n            display_title.cover_images = title[Character.character_cover_images] ? title[Character.character_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Character.character_cdn_cover_images] ? title[Character.character_cdn_cover_images] : [];\r\n            display_title.title = title[Character.short_name] ? title[Character.short_name] : title[Character.character_name];\r\n            display_title.title_1 = {label: 'Full Name', title: title[Character.character_name]};\r\n            display_title.title_2 = {label: 'Nickname', title: title[Character.nickname]};\r\n            display_title.title_3 = {label: 'Name', title: title[Character.short_name]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Character.mal_link]}>MAL</a>},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Character.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Character.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Favorites', info: title[Character.favorites]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <CharactersGeneralTab/>\r\n                },\r\n            ];\r\n            return display_title;\r\n        case BRANCH_EROGE:\r\n            display_title.id = title[Eroge.id];\r\n            if (title[Eroge.eroge_cover_images])\r\n                display_title.cover_images = title[Eroge.eroge_cover_images];\r\n            display_title.title = title[Eroge.eroge_name];\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Eroge.game_url]}>HG</a>},\r\n                {\r\n                    label: 'External download',\r\n                    info: <a href={title[Eroge.game_url]}><FontAwesomeIcon icon={faDownload}/></a>\r\n                },\r\n            ];\r\n            display_title.db_info_set = [\r\n                {label: 'Last Modified', info: <Moment date={title[Eroge.date_last_modified]} format={'Do MMM YYYY'}/>},\r\n                {label: 'Added on', info: <Moment date={title[Eroge.date_added]} format={'Do MMM YYYY'}/>},\r\n                {label: 'Last Updated', info: <Moment date={title[Eroge.date_updated]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Eroge.rating]},\r\n                {label: 'Scored by', info: title[Eroge.rated_by]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Size', info: formatBytes(title[Eroge.size])},\r\n                {label: 'Type', info: title[Eroge.type]},\r\n                {label: 'Censorship', info: title[Eroge.censorship]},\r\n                {label: 'Language', info: title[Eroge.language]},\r\n                {label: 'Platforms', info: title[Eroge.platforms]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <ErogeGeneralTab/>\r\n                },\r\n            ];\r\n            if (display_title.primary_set && title[Eroge.tags]) {\r\n                const tags = title[Eroge.tags].split(', ');\r\n                let info = [];\r\n                tags.forEach(tag => {\r\n                    info.push(<span className=\"genre-spacing\">{tag}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Tags', info: info},\r\n                ];\r\n            }\r\n            return display_title;\r\n        case BRANCH_PEOPLE:\r\n            display_title.id = title[Person.id];\r\n            display_title.cover_images = title[Person.person_cover_images] ? title[Person.person_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Person.person_cdn_cover_images] ? title[Person.person_cdn_cover_images] : [];\r\n            display_title.title = title[Person.person_name];\r\n            display_title.title_1 = {label: 'Family Name', title: title[Person.family_name]};\r\n            display_title.title_2 = {label: 'Given Name', title: title[Person.given_name]};\r\n            display_title.title_3 = {label: 'Other Names', title: title[Person.alternative_names]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Person.mal_link]}>MAL</a>},\r\n                {label: 'Birthday', info: title[Person.birthday] ?\r\n                        <Moment date={title[Person.birthday]} format={'Do MMM YYYY'}/> :\r\n                        <span className=\"color-gray\">---</span>},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Person.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Person.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Favorites', info: title[Person.favorites]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <PeopleGeneralTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.has_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Character Roles</p>,\r\n                    tab: <VoiceActorRolesTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.anime_staff_positions_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserCog}/> Anime Staff</p>,\r\n                    tab: <AnimeStaffPositionsTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.published_manga_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faBookOpen}/> Published Manga</p>,\r\n                    tab: <PublishedMangaTab/>\r\n                },\r\n            ];\r\n            return display_title;\r\n        default:\r\n            return display_title\r\n    }\r\n}\r\n","import {Form, Formik} from \"formik\";\r\nimport store from \"../../../../store\";\r\nimport {\r\n    addAnimeEntry,\r\n    addToFavorites,\r\n    deleteAnimeEntry,\r\n    removeFromFavorites,\r\n    updateAnimeEntry\r\n} from \"../../../../actions/users\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport 'date-fns';\r\nimport {KeyboardDateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faStar as faStarSolid, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport React from \"react\";\r\nimport {UserAnimeEntry} from \"../../../../models\";\r\nimport {BRANCH_ANIME, USER_ANIME_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {isTitleInFavorites} from \"../../../display/functions\";\r\nimport {AddRemoveFromFavorites} from \"../shortForms\";\r\n\r\n\r\n\r\nconst FIELD_NAMES = {\r\n    watched_episodes: UserAnimeEntry.watched_episodes,\r\n    start_date: UserAnimeEntry.start_date,\r\n    finish_date: UserAnimeEntry.finish_date,\r\n    score: UserAnimeEntry.score,\r\n    status: UserAnimeEntry.status,\r\n    times_watched: UserAnimeEntry.times_watched,\r\n    comments: UserAnimeEntry.comments,\r\n    tags: UserAnimeEntry.tags,\r\n    priority: UserAnimeEntry.priority,\r\n    rewatching: UserAnimeEntry.rewatching,\r\n    rewatching_episode: UserAnimeEntry.rewatching_episode,\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} anime_id\r\n * @param {Object} user_anime_entry\r\n * @param {boolean} edit - *Optional\r\n * @returns {{comments: string, times_watched: number, rewatching_episode: number, priority: string, tags: string, score: number, watched_episodes: number, rewatching: boolean, finish_date: string, anime: *, errors: boolean, start_date: string, status: string}}\r\n */\r\nexport function getUserAnimeEntryFormInitialValues(anime_id, user_anime_entry, edit = false) {\r\n    let initial_values = {\r\n        anime: anime_id,\r\n        watched_episodes: 0,\r\n        start_date: '',\r\n        finish_date: '',\r\n        score: 0,\r\n        status: USER_ANIME_STATUSES.plan_to_watch,\r\n        times_watched: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rewatching: false,\r\n        rewatching_episode: 0,\r\n        errors: false\r\n    };\r\n\r\n    if (edit && !isEmpty(user_anime_entry))\r\n        initial_values = {\r\n            anime: anime_id,\r\n            watched_episodes: user_anime_entry[UserAnimeEntry.watched_episodes],\r\n            start_date: user_anime_entry[UserAnimeEntry.start_date],\r\n            finish_date: user_anime_entry[UserAnimeEntry.finish_date],\r\n            score: user_anime_entry[UserAnimeEntry.score],\r\n            status: user_anime_entry[UserAnimeEntry.status],\r\n            times_watched: user_anime_entry[UserAnimeEntry.times_watched],\r\n            comments: user_anime_entry[UserAnimeEntry.comments],\r\n            tags: user_anime_entry[UserAnimeEntry.tags],\r\n            priority: user_anime_entry[UserAnimeEntry.priority],\r\n            rewatching: user_anime_entry[UserAnimeEntry.rewatching],\r\n            rewatching_episode: user_anime_entry[UserAnimeEntry.rewatching_episode]\r\n        };\r\n\r\n    return initial_values\r\n}\r\n\r\n\r\nfunction deleteEntry(id, list) {\r\n    if (window.confirm('Are you sure? This will also delete any episode history of this anime.'))\r\n        store.dispatch(deleteAnimeEntry(id, list));\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.initial_values\r\n * @param {boolean} props.edit\r\n * @param {int} props.id\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserAnimeEntryForm(props) {\r\n    const {initial_values, edit, id, list, handleClose} = props;\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}><Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            if (values.start_date === '') values.start_date = null;\r\n            if (values.finish_date === '') values.finish_date = null;\r\n            values[FIELD_NAMES.times_watched] = parseInt(values[FIELD_NAMES.times_watched]);\r\n            if (isNaN(values[FIELD_NAMES.times_watched])) values[FIELD_NAMES.times_watched] = 0;\r\n            values[FIELD_NAMES.watched_episodes] = parseInt(values[FIELD_NAMES.watched_episodes]);\r\n            if (isNaN(values[FIELD_NAMES.watched_episodes])) values[FIELD_NAMES.watched_episodes] = 0;\r\n            values.score = parseInt(values.score);\r\n\r\n            if (edit) store.dispatch(updateAnimeEntry(id, values, list));\r\n            else store.dispatch(addAnimeEntry(values));\r\n\r\n            setSubmitting(false);\r\n        }}>\r\n        {({\r\n              isSubmitting, values, handleChange,\r\n              handleBlur, setValues\r\n          }) => (\r\n            <Form id=\"User-Title-Entry-Form\">\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-status\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-status\"\r\n                            className=\"form-control\"\r\n                            label=\"Status\"\r\n                            value={values[FIELD_NAMES.status]}\r\n                            name={FIELD_NAMES.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"Watching\">Watching</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                            <MenuItem value=\"On Hold\">On Hold</MenuItem>\r\n                            <MenuItem value=\"Dropped\">Dropped</MenuItem>\r\n                            <MenuItem value=\"Plan to Watch\">Plan to Watch</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-value\">Priority</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-value\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.priority]}\r\n                            name={FIELD_NAMES.priority}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"4\">VERY HIGH</MenuItem>\r\n                            <MenuItem value=\"3\">HIGH</MenuItem>\r\n                            <MenuItem value=\"2\">MEDIUM</MenuItem>\r\n                            <MenuItem value=\"1\">LOW</MenuItem>\r\n                            <MenuItem value=\"0\">VERY LOW</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Episode\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.watched_episodes}\r\n                            value={values[FIELD_NAMES.watched_episodes]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4} md={2}>\r\n                        <div className=\"form-group text-right\">\r\n                            <Checkbox\r\n                                value={values[FIELD_NAMES.rewatching]}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                name={FIELD_NAMES.rewatching}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={4}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Rewatch Episode\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rewatching_episode}\r\n                            value={values[FIELD_NAMES.rewatching_episode]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rewatching]}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-score\">Score</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-score\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.score]}\r\n                            name={FIELD_NAMES.score}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"0\">0</MenuItem>\r\n                            <MenuItem value=\"1\">1</MenuItem>\r\n                            <MenuItem value=\"2\">2</MenuItem>\r\n                            <MenuItem value=\"3\">3</MenuItem>\r\n                            <MenuItem value=\"4\">4</MenuItem>\r\n                            <MenuItem value=\"5\">5</MenuItem>\r\n                            <MenuItem value=\"6\">6</MenuItem>\r\n                            <MenuItem value=\"7\">7</MenuItem>\r\n                            <MenuItem value=\"8\">8</MenuItem>\r\n                            <MenuItem value=\"9\">9</MenuItem>\r\n                            <MenuItem value=\"10\">10</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start date\"\r\n                            value={values[FIELD_NAMES.start_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.start_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Times watched\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.times_watched}\r\n                            value={values[FIELD_NAMES.times_watched]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Finish date\"\r\n                            value={values[FIELD_NAMES.finish_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.finish_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Comments\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.comments]}\r\n                            name={FIELD_NAMES.comments}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Tags\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.tags]}\r\n                            name={FIELD_NAMES.tags}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <DialogActions>\r\n                    <AddRemoveFromFavorites branch={BRANCH_ANIME} id={parseInt(id)}/>\r\n                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\" onClick={handleClose}\r\n                                 disabled={isSubmitting}><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                    {edit ? <CyberButton classNames=\"btn-danger\" variant=\"outlined\" onClick={(e) => {\r\n                        deleteEntry(id, list);\r\n                        handleClose()\r\n                    }}><FontAwesomeIcon icon={faTrash}/></CyberButton> : null}\r\n                </DialogActions>\r\n            </Form>\r\n        )}\r\n    </Formik></MuiPickersUtilsProvider>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport {Anime, Manga} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {getUserAnimeEntry, getUserMangaEntry} from \"../../../actions/users\";\r\nimport {getUserAnimeEntryFormInitialValues, UserAnimeEntryForm} from \"../../user/forms/anime/forms\";\r\nimport {AddAnimeEntryInstantDropButton, AddMangaEntryInstantDropButton} from \"../../user/forms/shortForms\";\r\nimport {getUserMangaEntryFormInitialValues, UserMangaEntryForm} from \"../../user/forms/manga/forms\";\r\n\r\n\r\nfunction getTitleNameFromTitle(branch, title) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return title[Anime.title];\r\n        case BRANCH_MANGA:\r\n            return title[Manga.title];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.anime_id\r\n * @param {Object} props.user_anime_entry\r\n * @param {boolean} props.edit\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction QuickUserAnimeEntryForm(props) {\r\n    const {anime_id, user_anime_entry, edit, handleClose} = props;\r\n    const initial_values = getUserAnimeEntryFormInitialValues(anime_id, user_anime_entry, edit);\r\n    return <UserAnimeEntryForm initial_values={initial_values} id={anime_id} edit={edit} handleClose={handleClose}/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.manga_id\r\n * @param {Object} props.user_manga_entry\r\n * @param {boolean} props.edit\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction QuickUserMangaEntryForm(props) {\r\n    const {manga_id, user_manga_entry, edit, handleClose} = props;\r\n    const initial_values = getUserMangaEntryFormInitialValues(manga_id, user_manga_entry, edit);\r\n    return <UserMangaEntryForm initial_values={initial_values} id={manga_id} edit={edit} handleClose={handleClose}/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.title_id\r\n * @param {String} props.branch\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction InstantDropTitleButton(props) {\r\n    const {title_id, branch} = props;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AddAnimeEntryInstantDropButton\r\n                classNames=\"drop-button btn-contained-danger-dh\" variant={'contained'} anime_id={title_id}/>;\r\n        case BRANCH_MANGA:\r\n            return <AddMangaEntryInstantDropButton\r\n                classNames=\"drop-button btn-contained-danger-dh\" variant={'contained'} manga_id={title_id}/>;\r\n        default:\r\n            return null;\r\n    }\r\n\r\n}\r\n\r\n\r\nclass CardUserEditTitleEntry extends Component {\r\n    static propTypes = {\r\n        /** Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Id */\r\n        id: PropTypes.number.isRequired,\r\n        /** Title Object */\r\n        title: PropTypes.object.isRequired,\r\n        /** Status of the user for this title (Completed, Dropped, etc) */\r\n        user_status: PropTypes.string,\r\n        /** Hide the user buttons from the Title Card */\r\n        hideUserButtons: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.getUserTitleEntry = this.getUserTitleEntry.bind(this);\r\n        this.getQuickUserTitleEntryForm = this.getQuickUserTitleEntryForm.bind(this);\r\n        this.state = {open: false};\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({open: false});\r\n        this.props.hideUserButtons();\r\n    };\r\n\r\n    getUserTitleEntry() {\r\n        this.setState({open: true});\r\n        switch (this.props.branch) {\r\n            case BRANCH_ANIME:\r\n                this.props.getUserAnimeEntry(this.props.id);\r\n                return;\r\n            case BRANCH_MANGA:\r\n                this.props.getUserMangaEntry(this.props.id);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    getQuickUserTitleEntryForm(edit) {\r\n        switch (this.props.branch) {\r\n            case BRANCH_ANIME:\r\n                return <QuickUserAnimeEntryForm\r\n                    anime_id={this.props.id}\r\n                    user_anime_entry={this.props.user_anime_entry}\r\n                    edit={edit}\r\n                    handleClose={this.handleClose}\r\n                />;\r\n            case BRANCH_MANGA:\r\n                return <QuickUserMangaEntryForm\r\n                    manga_id={this.props.id}\r\n                    user_manga_entry={this.props.user_manga_entry}\r\n                    edit={edit}\r\n                    handleClose={this.handleClose}\r\n                />;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let edit = !!this.props.user_status;\r\n        const add_button_title = edit ? 'Edit entry' : 'Add to list';\r\n        console.log('branch:', this.props.branch);\r\n\r\n        return (\r\n            <>\r\n                {this.props.entry_loading ?\r\n                    <div className=\"user-buttons-loading\"><CircularProgress thickness={6} size={30}/></div> : <>\r\n                        <CyberButton classNames=\"add-button btn-contained-primary-dh\" color={'primary'}\r\n                                     variant={'contained'} title={add_button_title} onClick={this.getUserTitleEntry}>\r\n                            <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                        </CyberButton>\r\n                        {!edit ? <InstantDropTitleButton branch={this.props.branch} title_id={this.props.id}/> : null}\r\n                    </>}\r\n\r\n                <Dialog open={this.state.open} onClose={this.handleClose}\r\n                        aria-labelledby=\"form-dialog-title\" className=\"user-title-entry-dialog\">\r\n                    {!this.props.entry_loading ?\r\n                        <DialogTitle>\r\n                            {edit ? 'Edit' : 'Add'} {getTitleNameFromTitle(this.props.branch, this.props.title)}\r\n                        </DialogTitle> : null}\r\n                    <DialogContent>\r\n                        {this.props.entry_loading ? <CircularProgress/> : this.getQuickUserTitleEntryForm(edit)}\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_entry: state.users.user_anime_entry,\r\n    user_manga_entry: state.users.user_manga_entry,\r\n    entry_loading: state.users.entry_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUserAnimeEntry, getUserMangaEntry})(CardUserEditTitleEntry)\r\n","import React from \"react\";\r\n\r\nimport {faServer} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA, BRANCH_PEOPLE,\r\n    USER_ANIME_STATUSES,\r\n    USER_MANGA_STATUSES\r\n} from \"../../../globals\";\r\nimport {\r\n    ANIME_DISPLAY,\r\n    CHARACTERS_DISPLAY,\r\n    EROGE_DISPLAY,\r\n    MANGA_DISPLAY,\r\n    PERSON_DISPLAY\r\n} from \"../../../urls\";\r\nimport {\r\n    Anime,\r\n    Character,\r\n    Eroge,\r\n    Manga,\r\n    ANIME_SHORT_STATUS,\r\n    MANGA_SHORT_STATUS,\r\n    Person\r\n} from \"../../../models\";\r\nimport {formatContentDateByKnown} from \"../../functions\";\r\nimport {FilterSchema} from \"../filters/field_names\";\r\nimport CardUserEditTitleEntry from \"./CardUserEditTitleEntry\";\r\n\r\n\r\nfunction getUserStatusChip(user_status) {\r\n    switch (user_status) {\r\n        case USER_ANIME_STATUSES.completed:\r\n            return {label: user_status, color: 'primary'};\r\n        case USER_ANIME_STATUSES.watching:\r\n            return {label: user_status, color: 'success'};\r\n        case USER_MANGA_STATUSES.reading:\r\n            return {label: user_status, color: 'success'};\r\n        case USER_ANIME_STATUSES.on_hold:\r\n            return {label: user_status, color: 'warning'};\r\n        case USER_ANIME_STATUSES.dropped:\r\n            return {label: user_status, color: 'danger'};\r\n        case USER_ANIME_STATUSES.plan_to_watch:\r\n            return {label: user_status, color: 'default'};\r\n        case USER_MANGA_STATUSES.plan_to_read:\r\n            return {label: user_status, color: 'default'};\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.title {String} Title\r\n * @param props.user_status {String} Status of the user for this anime (Completed, Dropped, etc)\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserCardButtons(props) {\r\n    const {branch, id, title, user_status, hideUserButtons} = props;\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <CardUserEditTitleEntry id={id} branch={BRANCH_ANIME} title={title} user_status={user_status}\r\n                                           hideUserButtons={hideUserButtons}/>;\r\n        case BRANCH_MANGA:\r\n            return <CardUserEditTitleEntry id={id} branch={BRANCH_MANGA} title={title} user_status={user_status}\r\n                                           hideUserButtons={hideUserButtons}/>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\nexport function formatTitle(branch, title, user_status) {\r\n    let start_date = '';\r\n    let end_date = '';\r\n    let card_title = {\r\n        id: 0,\r\n        link: '',\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: '',\r\n        chipset_header: [],\r\n        chipset_one: [],\r\n        chipset_two: [],\r\n        chipset_three: [],\r\n        chipset_four: []\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            start_date = formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Anime.air_end], title[Anime.air_end_known], true);\r\n\r\n            card_title.id = title[Anime.id];\r\n            card_title.link = ANIME_DISPLAY(title[Anime.id]);\r\n            card_title.cover_images = title[Anime.anime_cover_images];\r\n            card_title.cdn_cover_images = title[Anime.anime_cdn_cover_images];\r\n            card_title.title = title[Anime.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.label],\r\n                    color: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Anime.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Anime.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Anime.anime_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n            card_title.chipset_one = [\r\n                title[Anime.type],\r\n                title[Anime.episodes] ? `${title[Anime.episodes]}ep` : null,\r\n                title[Anime.minutes_per_episode] ? `${title[Anime.minutes_per_episode]}m` : null,\r\n                title[Anime.rating_short],\r\n            ];\r\n            card_title.chipset_two = title[Anime.genres_csv] ? title[Anime.genres_csv].split(', ') : [];\r\n            card_title.chipset_three = [\r\n                title[Anime.score] ? `MAL: ${title[Anime.score]}` : null\r\n            ];\r\n            card_title.chipset_four = [\r\n                start_date ? `${start_date}${end_date ? ' to ' + end_date : ''}` : null\r\n            ];\r\n            return card_title;\r\n        case BRANCH_MANGA:\r\n            start_date = formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Manga.air_end], title[Manga.air_end_known], true);\r\n            card_title.id = title[Manga.id];\r\n            card_title.link = MANGA_DISPLAY(title[Manga.id]);\r\n            card_title.cover_images = title[Manga.manga_cover_images];\r\n            card_title.cdn_cover_images = title[Manga.manga_cdn_cover_images];\r\n            card_title.title = title[Manga.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.label],\r\n                    color: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Manga.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Manga.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Manga.manga_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n            card_title.chipset_one = [\r\n                title[Manga.type],\r\n                title[Manga.volumes] ? `${title[Manga.volumes]}v` : null,\r\n                title[Manga.chapters] ? `${title[Manga.chapters]}c` : null,\r\n            ];\r\n            card_title.chipset_two = title[Manga.genres_csv] ? title[Manga.genres_csv].split(', ') : [];\r\n            card_title.chipset_three = [\r\n                title[Manga.score] ? `MAL: ${title[Manga.score]}` : null\r\n            ];\r\n            card_title.chipset_four = [\r\n                start_date ? `${start_date}${end_date ? ' to ' + end_date : ''}` : null\r\n            ];\r\n            return card_title;\r\n        case BRANCH_CHARACTERS:\r\n            card_title.id = title[Character.id];\r\n            card_title.link = CHARACTERS_DISPLAY(title[Character.id]);\r\n            card_title.cover_images = title[Character.character_cover_images];\r\n            card_title.cdn_cover_images = title[Character.character_cdn_cover_images];\r\n            card_title.title = title[Character.short_name] ? title[Character.short_name] : title[Character.character_name];\r\n            return card_title;\r\n        case BRANCH_PEOPLE:\r\n            card_title.id = title[Person.id];\r\n            card_title.link = PERSON_DISPLAY(title[Person.id]);\r\n            card_title.cover_images = title[Person.person_cover_images];\r\n            card_title.cdn_cover_images = title[Person.person_cdn_cover_images];\r\n            card_title.title = title[Person.person_name];\r\n            return card_title;\r\n        case BRANCH_EROGE:\r\n            card_title.id = title[Eroge.id];\r\n            card_title.link = EROGE_DISPLAY(title[Eroge.id]);\r\n            card_title.cover_images = title[Eroge.eroge_cover_images];\r\n            card_title.title = title[Eroge.eroge_name].replace('[Android]', '').trim();\r\n            if (title[Eroge.downloaded])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            card_title.chipset_one = [\r\n                title[Eroge.type],\r\n                title[Eroge.platforms],\r\n            ];\r\n            card_title.chipset_two = title[Eroge.tags] ? title[Eroge.tags].split(', ') : [];\r\n            card_title.chipset_three = [\r\n                title[Eroge.rating] ? `HG ${title[Eroge.rating]}` : null\r\n            ];\r\n            card_title.chipset_four = [\r\n                title[Eroge.language],\r\n                title[Eroge.censorship],\r\n            ];\r\n            return card_title;\r\n        default:\r\n            return card_title\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {formatTitle, UserCardButtons} from \"./functions\";\r\nimport {getTitleCoverImage} from \"../../functions\";\r\n\r\n\r\nclass TitleCard extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Object (Anime, Manga, etc.) */\r\n        title: PropTypes.object.isRequired,\r\n        /** Index number for the card */\r\n        index: PropTypes.number,\r\n        /** Status of the user entry for this title (Watching, Reading, Completed, etc.) */\r\n        user_status: PropTypes.string,\r\n        /** If the card should be in a small format (No chipsets, only title) */\r\n        mini: PropTypes.bool,\r\n        /** If the user edit/add buttons for the title should appear */\r\n        user_buttons: PropTypes.bool,\r\n        /** Custom classname for the title card container */\r\n        containerClassNames: PropTypes.string,\r\n        /** Custom classname for the title card */\r\n        classNames: PropTypes.string,\r\n        /** If true it the card will not use state to check if the cover image is\r\n         * loaded, it will directly add the img background to the card */\r\n        skip_img_preload: PropTypes.bool,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.showUserButtons = this.showUserButtons.bind(this);\r\n        this.hideUserButtons = this.hideUserButtons.bind(this);\r\n        this.cssHideUserButtons = this.cssHideUserButtons.bind(this);\r\n        this.state = {\r\n            img_loaded: false,\r\n            show_user_buttons: false,\r\n            css_hide_buttons: false,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(prevState.css_hide_buttons);\r\n        if (prevState.css_hide_buttons)\r\n            this.setState({css_hide_buttons: false, show_user_buttons: false})\r\n    }\r\n\r\n    showUserButtons() {\r\n        this.setState({show_user_buttons: true, css_hide_buttons: false});\r\n    }\r\n\r\n    hideUserButtons() {\r\n        this.setState({show_user_buttons: false});\r\n    }\r\n\r\n    cssHideUserButtons() {\r\n        this.setState({css_hide_buttons: true});\r\n    }\r\n\r\n    render() {\r\n        const card_title = formatTitle(this.props.branch, this.props.title, this.props.user_status);\r\n        let img_url = getTitleCoverImage(card_title.cdn_cover_images, card_title.cover_images);\r\n        let class_names = this.props.mini ? 'title-card-mini' : '';\r\n        if (this.props.classNames)\r\n            class_names = this.props.classNames;\r\n\r\n        let container_class_names = '';\r\n        if (this.props.containerClassNames)\r\n            container_class_names = this.props.containerClassNames;\r\n\r\n        let backgroundImage = this.state.img_loaded || this.props.skip_img_preload ? `url(\"${img_url}\")` : 'none';\r\n\r\n        return (\r\n            <div className={`title-card-container ${container_class_names}`}\r\n                 onMouseOver={this.showUserButtons}\r\n                 onMouseEnter={this.showUserButtons}\r\n                 onMouseLeave={this.hideUserButtons}\r\n            >\r\n                {this.props.user_buttons && this.state.show_user_buttons ?\r\n                    <div className={this.state.css_hide_buttons ? 'user-buttons user-buttons-hidden' : 'user-buttons'}>\r\n                        <UserCardButtons\r\n                            branch={this.props.branch}\r\n                            id={card_title.id}\r\n                            title={this.props.title}\r\n                            user_status={this.props.user_status}\r\n                            hideUserButtons={this.cssHideUserButtons}\r\n                        />\r\n                    </div> : null}\r\n                <Link to={card_title.link}\r\n                      className={this.state.img_loaded ? `title-card fade-in ${class_names}` : `title-card ${class_names}`}\r\n                      style={{backgroundImage: backgroundImage}}\r\n                      onMouseEnter={playHoverSound} onClick={playClickSound}\r\n                >\r\n                    <img src={img_url} className=\"lazy-loaded-img\" alt=\"loader-img\" loading=\"lazy\"\r\n                         onLoad={() => {\r\n                             this.setState({img_loaded: true})\r\n                         }}/>\r\n                    {!this.props.mini ? <div className=\"chip-array\">\r\n                        {this.props.index ? <Chip variant=\"default\" size=\"small\" label={this.props.index}/> : null}\r\n                        {card_title.chipset_header ? card_title.chipset_header.map(chip => (\r\n                            chip ? <Chip variant=\"default\" size=\"small\" className={`chip-${chip['color']}`}\r\n                                         label={chip['label']}/> : null\r\n                        )) : null}\r\n                    </div> : null}\r\n                    {!this.props.mini ? <h3>{card_title.title}</h3> : <h4>{card_title.title}</h4>}\r\n                    {!this.props.mini ? <div className=\"title-card-body\">\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_one.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_two.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_three.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_four.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                    </div> : null}\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TitleCard\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\n\r\n\r\nfunction checkForKnownDate(known_date) {\r\n    return known_date.indexOf('day') >= 0 && known_date.indexOf('month') >= 0 && known_date.indexOf('year');\r\n}\r\n\r\nfunction horizontalScroll(e, container) {\r\n    e.preventDefault();\r\n    if (e.deltaY > 0) container.scrollLeft += 100;\r\n    else container.scrollLeft -= 100;\r\n}\r\n\r\nfunction addHorizontalScrollEventListener() {\r\n    const container = document.getElementById('season-titles-container');\r\n    container.addEventListener('wheel', (e) => horizontalScroll(e, container));\r\n}\r\n\r\nfunction removeHorizontalScrollEventListener() {\r\n    const container = document.getElementById('season-titles-container');\r\n    container.removeEventListener('wheel', (e) => horizontalScroll(e, container));\r\n}\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\n\r\nclass AnimeCurrentSeason extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n\r\n        this.state = {\r\n            current_year: new Date().getFullYear(),\r\n            current_month: new Date().getMonth() + 1,\r\n            current_season: '',\r\n            current_season_number: 1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let season;\r\n        if (this.state.current_month >= 1 && this.state.current_month <= 3) season = 1;\r\n        else if (this.state.current_month >= 4 && this.state.current_month <= 6) season = 2;\r\n        else if (this.state.current_month >= 7 && this.state.current_month <= 9) season = 3;\r\n        else if (this.state.current_month >= 10 && this.state.current_month <= 12) season = 4;\r\n\r\n        this.setState({current_season: getSeasonLabelFromSeasonNumber(season), current_season_number: season});\r\n\r\n        const season_filter = {year: this.state.current_year, season: season};\r\n        let filters = new FILTER_ANIME_INITIAL_VALUES();\r\n        filters = filters.VALUES;\r\n        this.props.filterAnime(null, filters, season_filter, null, true, false);\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n\r\n        addHorizontalScrollEventListener()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        removeHorizontalScrollEventListener()\r\n    }\r\n\r\n    render() {\r\n        const season_icon_and_class = getIconAndClassFromSeasonNumber(this.state.current_season_number);\r\n        return (\r\n            <div id=\"Current-Season\">\r\n                <div className=\"current-season-header\">\r\n                    <h3>\r\n                        Current Season{' '}\r\n                        <CyberLink to={ANIME_SEASON_DISPLAY(this.state.current_year, this.state.current_season_number)}>\r\n                            {this.state.current_year} {this.state.current_season}\r\n                        </CyberLink>{' '}\r\n                        <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                         className={season_icon_and_class.className}/>\r\n                    </h3>\r\n                </div>\r\n                <div id=\"season-titles-container\" className=\"current-season-titles-container\">\r\n                    {this.props.filtered_anime_loaded ?\r\n                        <div className=\"current-season-titles-wrapper\">\r\n                            {this.props.filtered_anime[ApiResult.results].map(anime => (\r\n                                checkForKnownDate(anime[Anime.air_start_known]) ? <TitleCard\r\n                                    containerClassNames=\"current-season-card-container\"\r\n                                    branch={BRANCH_ANIME}\r\n                                    title={anime}\r\n                                    user_status={\r\n                                        !isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                            this.props.user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                                /> : null\r\n                            ))}\r\n                        </div> : this.props.anime_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filtered_anime: state.anime.filtered_anime,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {filterAnime, getLoggedInUserAnimeEntryStatuses})(AnimeCurrentSeason)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Anime, AnimeData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.recently_added_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', anime_data[AnimeData.recently_added_anime])}\r\n\r\n                    {anime_data[AnimeData.recently_added_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction RecentlyDownloaded(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.recently_downloaded_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', anime_data[AnimeData.recently_added_anime])}\r\n                    {anime_data[AnimeData.recently_downloaded_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopUpcoming(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Upcoming Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_upcoming_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_upcoming_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScoredMal(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_scored_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_scored_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction MostPopularMal(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.most_popular_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.most_popular_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2010s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_2010s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_2010s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2000s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2000s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_2000s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_2000s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top90s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1990s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_90s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_90s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top80s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1980s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_80s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_80s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top70s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1970s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_70s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_70s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopAnimeTabs(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Recently Downloaded</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Upcoming</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Score</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Most popular</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2010s</p>} {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2000s</p>} {...a11yProps(6)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 90s</p>} {...a11yProps(7)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 80s</p>} {...a11yProps(8)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 70s</p>} {...a11yProps(9)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    {console.log('in tab', anime_data)}\r\n                    <RecentlyAdded\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <RecentlyDownloaded\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopUpcoming\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <TopScoredMal\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <MostPopularMal\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={5} dir={theme.direction}>\r\n                    <Top2010s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={6} dir={theme.direction}>\r\n                    <Top2000s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={7} dir={theme.direction}>\r\n                    <Top90s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={8} dir={theme.direction}>\r\n                    <Top80s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={9} dir={theme.direction}>\r\n                    <Top70s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty, isTimeLessThanAnHourAgo} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, AnimeData, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {TopAnimeTabs} from \"./tabs/TopAnimeTabs\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nfunction horizontalScroll(e, container) {\r\n    e.preventDefault();\r\n    if (e.deltaY > 0) container.scrollLeft += 100;\r\n    else container.scrollLeft -= 100;\r\n}\r\n\r\nfunction addHorizontalScrollEventListener() {\r\n    const containers = document.getElementsByClassName('horizontal-scroll');\r\n    for (let x = 0; x < containers.length; x++)\r\n        containers[x].addEventListener('wheel', (e) => horizontalScroll(e, containers[x]));\r\n}\r\n\r\nfunction removeHorizontalScrollEventListener() {\r\n    const containers = document.getElementsByClassName('horizontal-scroll');\r\n    for (let x = 0; x < containers.length; x++)\r\n        containers[x].removeEventListener('wheel', (e) => horizontalScroll(e, containers[x]));\r\n}\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\nfunction CurrentSeason(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    const current_year = new Date().getFullYear();\r\n    let current_month = new Date().getMonth() + 1;\r\n    let current_season_number = 1;\r\n    if (current_month >= 1 && current_month <= 3) current_season_number = 1;\r\n    else if (current_month >= 4 && current_month <= 6) current_season_number = 2;\r\n    else if (current_month >= 7 && current_month <= 9) current_season_number = 3;\r\n    else if (current_month >= 10 && current_month <= 12) current_season_number = 4;\r\n    const current_season = getSeasonLabelFromSeasonNumber(current_season_number);\r\n\r\n    const season_icon_and_class = getIconAndClassFromSeasonNumber(current_season_number);\r\n    return <Grid xs={12} id=\"Current-Season\">\r\n        <div className=\"current-season-header\">\r\n            <h3>\r\n                Current Season{' '}\r\n                <CyberLink to={ANIME_SEASON_DISPLAY(current_year, current_season_number)}>\r\n                    {current_year} {current_season}\r\n                </CyberLink>{' '}\r\n                <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                 className={season_icon_and_class.className}/>\r\n            </h3>\r\n        </div>\r\n        <div id=\"season-titles-container\" className=\"current-season-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.current_anime_season] ?\r\n                <div className=\"current-season-titles-wrapper\">\r\n                    {anime_data[AnimeData.current_anime_season].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"current-season-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nclass TopAnime extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     addHorizontalScrollEventListener()\r\n    // }\r\n    //\r\n    // componentWillUnmount() {\r\n    //     removeHorizontalScrollEventListener()\r\n    // }\r\n\r\n    render() {\r\n        return <>\r\n            <CurrentSeason\r\n                anime_data={this.props.anime_data}\r\n                anime_loading={this.props.anime_loading}\r\n                anime_data_loaded={this.props.anime_data_loaded}\r\n                user_anime_entry_statuses={this.props.user_anime_entry_statuses}\r\n            />\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopAnimeTabs\r\n                anime_data={this.props.anime_data}\r\n                anime_loading={this.props.anime_loading}\r\n                anime_data_loaded={this.props.anime_data_loaded}\r\n                user_anime_entry_statuses={this.props.user_anime_entry_statuses}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data: state.anime.anime_data,\r\n    anime_loading: state.anime.anime_loading,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopAnime)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {ANIME_TAB_NAME, BRANCH_ANIME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport AnimeStatistics from \"./AnimeStatistics\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport AnimeCurrentSeason from \"../seasons/AnimeCurrentSeason\";\r\nimport {getAnimeData, getAnimeDataForHomePage} from \"../../../actions/anime\";\r\nimport {Anime, AnimeData, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport TopAnime from \"./TopAnime\";\r\n\r\n\r\nclass AnimeHome extends Component {\r\n    componentDidMount() {\r\n        document.title = ANIME_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getAnimeDataForHomePage();\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Anime-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopAnime/>\r\n                    <Grid xs={12}>\r\n                        <AnimeStatistics/>\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeDataForHomePage, getLoggedInUserAnimeEntryStatuses})(AnimeHome)\r\n","import * as Yup from 'yup';\r\n\r\n\r\nexport const LoginSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required'),\r\n});\r\n\r\nexport const RegisterSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required!'),\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Required!'),\r\n    password: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!'),\r\n    password2: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!')\r\n        .test('passwords-match', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        }),\r\n});\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Form, Formik} from 'formik';\r\n\r\nimport {LoginSchema} from \"./functions\";\r\nimport {login} from '../../actions/auth'\r\nimport {REGISTER} from \"../../urls\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {playClickSound, playHoverSound, playWarningSound} from \"../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nclass LoginForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            username: 'username',\r\n            password: 'password'\r\n        };\r\n\r\n        const initial_values = {\r\n            username: '',\r\n            password: ''\r\n        };\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={initial_values}\r\n                validationSchema={LoginSchema}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    this.props.login(values.username, values.password);\r\n                    setSubmitting(false);\r\n                }}>\r\n                {({errors, touched, values, handleChange, handleBlur, setSubmitting}) => (\r\n                    !this.props.user_loading ? <Form id=\"Login-Form\">\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            className=\"form-control\"\r\n                            value={values.username}\r\n                            name={field_names.username}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.username && touched.username}\r\n                            helperText={(errors.username && touched.username) && errors.username}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password && touched.password}\r\n                            helperText={(errors.password && touched.password) && errors.password}/>\r\n                        <CyberButton type=\"submit\" onClick={() => {\r\n                            if (errors.password || errors.username)\r\n                                playWarningSound()\r\n                        }}>\r\n                            Login\r\n                        </CyberButton>\r\n                        <p>Don't have an account? <RouterLink to={REGISTER} onClick={playClickSound}\r\n                                                              onMouseOver={playHoverSound}>Register</RouterLink></p>\r\n                    </Form> : <div className=\"loading\"><CircularProgress/></div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(LoginForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {INDEX} from \"../../urls\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nimport '../../assets/css/auth.css';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {img_loaded: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Login';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.user_authenticated)\r\n            return <Redirect to={INDEX}/>;\r\n\r\n        return (\r\n            <div id=\"Login\" className={this.state.img_loaded ? 'fade-in' : ''}>\r\n                <img src={'/static/media/girl-window.1732e4f9.jpg'} className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n                     onLoad={() => {this.setState({img_loaded: true})}} />\r\n                <Grid container>\r\n                    <Grid item xs={3} className=\"form-container box-light\">\r\n                        <h1>Login</h1>\r\n                        <LoginForm/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Login)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Form, Formik} from 'formik';\r\n\r\nimport {RegisterSchema} from \"./functions\";\r\nimport {register} from '../../actions/auth'\r\nimport {LOGIN} from \"../../urls\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {playClickSound, playHoverSound, playWarningSound} from \"../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nclass RegisterForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            username: 'username',\r\n            email: 'email',\r\n            password: 'password',\r\n            password2: 'password2'\r\n        };\r\n\r\n        const initial_values = {\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            password2: ''\r\n        };\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={initial_values}\r\n                validationSchema={RegisterSchema}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    const new_user = {\r\n                        username: values.username,\r\n                        password: values.password,\r\n                        email: values.email\r\n                    };\r\n                    this.props.register(new_user);\r\n                    setSubmitting(false);\r\n                }}>\r\n                {({errors, touched, values, handleChange, handleBlur}) => (\r\n                    !this.props.user_loading ? <Form id=\"Register-Form\">\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            className=\"form-control\"\r\n                            value={values.username}\r\n                            name={field_names.username}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.username && touched.username}\r\n                            helperText={(errors.username && touched.username) && errors.username}/>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            className=\"form-control\"\r\n                            value={values.email}\r\n                            name={field_names.email}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.email && touched.email}\r\n                            helperText={(errors.email && touched.email) && errors.email}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password && touched.password}\r\n                            helperText={(errors.password && touched.password) && errors.password}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password2}\r\n                            value={values.password2}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password2 && touched.password2}\r\n                            helperText={(errors.password2 && touched.password2) && errors.password2}/>\r\n                        <CyberButton type=\"submit\" onClick={() => {\r\n                            if (errors.email || errors.username || errors.password || errors.password2)\r\n                                playWarningSound()\r\n                        }}>\r\n                            Register\r\n                        </CyberButton>\r\n                        <p>Already have an account? <RouterLink to={LOGIN} onClick={playClickSound}\r\n                                                              onMouseOver={playHoverSound}>Login</RouterLink></p>\r\n                    </Form> : <div className=\"loading\"><CircularProgress/></div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {register})(RegisterForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {REGISTER_TAB_NAME} from \"../../globals\";\r\nimport {INDEX} from \"../../urls\";\r\nimport RegisterForm from \"./RegisterForm\";\r\n\r\nimport '../../assets/css/auth.css';\r\n\r\n\r\nclass Register extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {img_loaded: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = REGISTER_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.user_authenticated)\r\n            return <Redirect to={INDEX}/>;\r\n\r\n        return (\r\n            <div id=\"Register\" className={this.state.img_loaded ? 'fade-in' : ''}>\r\n                <img src={'/static/media/girl-window.1732e4f9.jpg'} className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n                     onLoad={() => {this.setState({img_loaded: true})}} />\r\n                <Grid container>\r\n                    <Grid item xs={3} className=\"form-container box-light\">\r\n                        <h1>Register</h1>\r\n                        <RegisterForm/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Register)\r\n","import {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA} from \"../../../globals\";\r\nimport {AnimeFilterNames, ErogeFilterNames, MangaFilterNames} from \"./field_names\";\r\nimport {\r\n    deleteAnimeFilterPreset, deleteErogeFilterPreset, deleteMangaFilterPreset,\r\n    saveAnimeFilterPreset, saveErogeFilterPreset, saveMangaFilterPreset,\r\n    setSelectedAnimePreset, setSelectedErogePreset,\r\n    setSelectedMangaPreset,\r\n    updateAnimeFilterPreset, updateErogeFilterPreset,\r\n    updateMangaFilterPreset\r\n} from \"../../../actions/users\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nexport function setPreset(branch, preset, new_values, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (filters) {\r\n                if (filters[AnimeFilterNames.downloaded] === 'true') new_values[AnimeFilterNames.downloaded] = true;\r\n                if (filters[AnimeFilterNames.is_downloading] === 'true') new_values[AnimeFilterNames.is_downloading] = true;\r\n                if (filters[AnimeFilterNames.cannot_download] === 'true') new_values[AnimeFilterNames.cannot_download] = true;\r\n                if (filters[AnimeFilterNames.deleted_by_MAL] === 'true') new_values[AnimeFilterNames.deleted_by_MAL] = true;\r\n                if (filters[AnimeFilterNames.pending_by_MAL] === 'true') new_values[AnimeFilterNames.pending_by_MAL] = true;\r\n                if (filters[AnimeFilterNames.episodes_range]) new_values[AnimeFilterNames.episodes_range] = filters[AnimeFilterNames.episodes_range].split(',');\r\n                if (filters[AnimeFilterNames.length_range]) new_values[AnimeFilterNames.length_range] = filters[AnimeFilterNames.length_range].split(',');\r\n                if (filters[AnimeFilterNames.genres]) new_values[AnimeFilterNames.genres] = filters[AnimeFilterNames.genres].split(',');\r\n                if (filters[AnimeFilterNames.type]) new_values[AnimeFilterNames.type] = filters[AnimeFilterNames.type].split(',');\r\n                if (filters[AnimeFilterNames.status]) new_values[AnimeFilterNames.status] = filters[AnimeFilterNames.status].split(',');\r\n                if (filters[AnimeFilterNames.rating_short]) new_values[AnimeFilterNames.rating_short] = filters[AnimeFilterNames.rating_short].split(',');\r\n                if (filters[AnimeFilterNames.video_quality]) new_values[AnimeFilterNames.video_quality] = filters[AnimeFilterNames.video_quality].split(',');\r\n                if (filters[AnimeFilterNames.audio_channel]) new_values[AnimeFilterNames.audio_channel] = filters[AnimeFilterNames.audio_channel].split(',');\r\n                if (filters[AnimeFilterNames.user_exclude]) new_values[AnimeFilterNames.user_exclude] = filters[AnimeFilterNames.user_exclude].split(',');\r\n                new_values[AnimeFilterNames.ordering] = filters[AnimeFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedAnimePreset(preset));\r\n            return new_values;\r\n        case BRANCH_MANGA:\r\n            if (filters) {\r\n                if (filters[MangaFilterNames.downloaded] === 'true') new_values[MangaFilterNames.downloaded] = true;\r\n                if (filters[MangaFilterNames.is_downloading] === 'true') new_values[MangaFilterNames.is_downloading] = true;\r\n                if (filters[MangaFilterNames.cannot_download] === 'true') new_values[MangaFilterNames.cannot_download] = true;\r\n                if (filters[MangaFilterNames.deleted_by_MAL] === 'true') new_values[MangaFilterNames.deleted_by_MAL] = true;\r\n                if (filters[MangaFilterNames.pending_by_MAL] === 'true') new_values[MangaFilterNames.pending_by_MAL] = true;\r\n                if (filters[MangaFilterNames.volumes_range]) new_values[MangaFilterNames.volumes_range] = filters[MangaFilterNames.volumes_range].split(',');\r\n                if (filters[MangaFilterNames.chapters_range]) new_values[MangaFilterNames.chapters_range] = filters[MangaFilterNames.chapters_range].split(',');\r\n                if (filters[MangaFilterNames.genres]) new_values[MangaFilterNames.genres] = filters[MangaFilterNames.genres].split(',');\r\n                if (filters[MangaFilterNames.type]) new_values[MangaFilterNames.type] = filters[MangaFilterNames.type].split(',');\r\n                if (filters[MangaFilterNames.status]) new_values[MangaFilterNames.status] = filters[MangaFilterNames.status].split(',');\r\n                if (filters[MangaFilterNames.user_exclude]) new_values[MangaFilterNames.user_exclude] = filters[MangaFilterNames.user_exclude].split(',');\r\n                new_values[MangaFilterNames.ordering] = filters[MangaFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedMangaPreset(preset));\r\n            return new_values;\r\n        case BRANCH_CHARACTERS:\r\n            return new_values;\r\n        case BRANCH_EROGE:\r\n            if (filters) {\r\n                if (filters[ErogeFilterNames.downloaded] === 'true') new_values[ErogeFilterNames.downloaded] = true;\r\n                if (filters[ErogeFilterNames.type]) new_values[ErogeFilterNames.type] = filters[ErogeFilterNames.type].split(',');\r\n                if (filters[ErogeFilterNames.platforms]) new_values[ErogeFilterNames.platforms] = filters[ErogeFilterNames.platforms].split(',');\r\n                if (filters[ErogeFilterNames.censorship]) new_values[ErogeFilterNames.censorship] = filters[ErogeFilterNames.censorship].split(',');\r\n                if (filters[ErogeFilterNames.language]) new_values[ErogeFilterNames.language] = filters[ErogeFilterNames.language].split(',');\r\n                if (filters[ErogeFilterNames.tags]) new_values[ErogeFilterNames.tags] = filters[ErogeFilterNames.tags].split(',');\r\n                new_values[ErogeFilterNames.ordering] = filters[ErogeFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedErogePreset(preset));\r\n            return new_values;\r\n        default:\r\n            return new_values\r\n    }\r\n}\r\n\r\n\r\nexport function updateFilterPreset(branch, preset_id, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(updateAnimeFilterPreset(preset_id, filters));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(updateMangaFilterPreset(preset_id, filters));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(updateErogeFilterPreset(preset_id, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function saveFilterPreset(branch, preset_name, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(saveAnimeFilterPreset(preset_name, filters));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(saveMangaFilterPreset(preset_name, filters));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(saveErogeFilterPreset(preset_name, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function deleteFilterPreset(branch, preset_id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(deleteAnimeFilterPreset(preset_id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(deleteMangaFilterPreset(preset_id));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(deleteErogeFilterPreset(preset_id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getSelectedPreset(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return store.getState().users.selected_anime_preset;\r\n        case BRANCH_MANGA:\r\n            return store.getState().users.selected_manga_preset;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            return store.getState().users.selected_eroge_preset;\r\n        default:\r\n            return\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCog, faPlus, faSave, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport {FiltersPreset} from \"../../../models\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {getResetValuesFromBranch} from \"../../browse/functions\";\r\nimport {deleteFilterPreset, getSelectedPreset, saveFilterPreset, setPreset, updateFilterPreset} from \"./functions\";\r\nimport {CyberButton} from \"../common/common\";\r\n\r\n\r\nclass PresetFilters extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Preset filters for the user */\r\n        presets: PropTypes.array.isRequired,\r\n        /** Currently active filters, from state */\r\n        filters: PropTypes.object.isRequired,\r\n        /** Function to run on submit when changing the preset */\r\n        onSubmit: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onPresetChange = this.onPresetChange.bind(this);\r\n        this.onPresetNew = this.onPresetNew.bind(this);\r\n        this.onPresetUpdate = this.onPresetUpdate.bind(this);\r\n        this.onPresetDelete = this.onPresetDelete.bind(this);\r\n        this.state = {\r\n            preset: getSelectedPreset(this.props.branch)\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.preset !== getSelectedPreset(this.props.branch))\r\n            this.setState({preset: getSelectedPreset(this.props.branch)})\r\n    }\r\n\r\n    onPresetChange(e) {\r\n        if (e.target.value === -1) {\r\n            this.setState({preset: {}});\r\n            return;\r\n        }\r\n        for (let x = 0; x < this.props.presets.length; x++) {\r\n            if (this.props.presets[x][FiltersPreset.id] === e.target.value) {\r\n                let new_values = getResetValuesFromBranch(this.props.branch);\r\n\r\n                let filters = this.props.presets[x][FiltersPreset.filters];\r\n                if (typeof this.props.presets[x][FiltersPreset.filters] !== 'object')\r\n                    filters = JSON.parse(this.props.presets[x][FiltersPreset.filters]);\r\n\r\n                new_values = setPreset(this.props.branch, this.props.presets[x], new_values, filters);\r\n\r\n                this.setState({preset: this.props.presets[x]}, () => {\r\n                    this.props.onSubmit(e, new_values);\r\n                });\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    onPresetUpdate() {\r\n        if (!isEmpty(this.state.preset))\r\n            updateFilterPreset(this.props.branch, this.state.preset[FiltersPreset.id], this.props.filters);\r\n    }\r\n\r\n    onPresetNew() {\r\n        let preset_name = prompt('Enter the preset name:', 'New Preset');\r\n        if (preset_name)\r\n            saveFilterPreset(this.props.branch, preset_name, this.props.filters)\r\n    }\r\n\r\n    onPresetDelete() {\r\n        if (window.confirm(`Delete ${this.state.preset[FiltersPreset.preset_name]} preset?`))\r\n            deleteFilterPreset(this.props.branch, this.state.preset[FiltersPreset.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Preset-Filters\">\r\n                <Select label=\"Options\" className=\"preset-settings\" value={-1}>\r\n                    <MenuItem style={{display: 'none'}} value={-1}>\r\n                        <FontAwesomeIcon icon={faCog}/>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={1}>\r\n                        <CyberButton title={'Create preset with current filters'} onClick={this.onPresetNew}>\r\n                            <FontAwesomeIcon icon={faPlus}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={2}>\r\n                        <CyberButton title={'Update selected preset with current filters'} onClick={this.onPresetUpdate}>\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={3}>\r\n                        <CyberButton title={'Delete selected preset'} onClick={this.onPresetDelete}>\r\n                            <FontAwesomeIcon icon={faTrash}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                </Select>\r\n                {this.props.presets ? <>\r\n                    <Select\r\n                        id=\"user-filters-preset\"\r\n                        className=\"preset-selector\"\r\n                        label=\"Preset\"\r\n                        value={this.state.preset[FiltersPreset.id] ? this.state.preset[FiltersPreset.id] : -1}\r\n                        onChange={this.onPresetChange}\r\n                    >\r\n                        <MenuItem value={-1}>\r\n                            Select Preset\r\n                        </MenuItem>\r\n                        {this.props.presets.map(preset => (\r\n                            <MenuItem value={preset[FiltersPreset.id]}>\r\n                                {preset[FiltersPreset.preset_name]}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PresetFilters\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport {useTheme, makeStyles} from '@material-ui/core/styles';\r\nimport {VariableSizeList} from 'react-window';\r\nimport {Typography} from '@material-ui/core';\r\nimport {matchSorter} from 'match-sorter'\r\n\r\nconst LISTBOX_PADDING = 8; // px\r\n\r\nfunction renderRow(props) {\r\n    const {data, index, style} = props;\r\n    return React.cloneElement(data[index], {\r\n        style: {\r\n            ...style,\r\n            top: style.top + LISTBOX_PADDING,\r\n        },\r\n    });\r\n}\r\n\r\nconst OuterElementContext = React.createContext({});\r\n\r\nconst OuterElementType = React.forwardRef((props, ref) => {\r\n    const outerProps = React.useContext(OuterElementContext);\r\n    return <div ref={ref} {...props} {...outerProps} />;\r\n});\r\n\r\nfunction useResetCache(data) {\r\n    const ref = React.useRef(null);\r\n    React.useEffect(() => {\r\n        if (ref.current != null) {\r\n            ref.current.resetAfterIndex(0, true);\r\n        }\r\n    }, [data]);\r\n    return ref;\r\n}\r\n\r\n// Adapter for react-window\r\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\r\n    const {children, ...other} = props;\r\n    const itemData = React.Children.toArray(children);\r\n    const theme = useTheme();\r\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), {noSsr: true});\r\n    const itemCount = itemData.length;\r\n    const itemSize = smUp ? 36 : 48;\r\n\r\n    const getChildSize = (child) => {\r\n        if (React.isValidElement(child) && child.type === ListSubheader) {\r\n            return 48;\r\n        }\r\n\r\n        return itemSize;\r\n    };\r\n\r\n    const getHeight = () => {\r\n        if (itemCount > 8) {\r\n            return 8 * itemSize;\r\n        }\r\n        return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\r\n    };\r\n\r\n    const gridRef = useResetCache(itemCount);\r\n\r\n    console.log('item count:', itemCount);\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            <OuterElementContext.Provider value={other}>\r\n                <VariableSizeList\r\n                    itemData={itemData}\r\n                    height={getHeight() + 2 * LISTBOX_PADDING}\r\n                    width=\"100%\"\r\n                    ref={gridRef}\r\n                    outerElementType={OuterElementType}\r\n                    innerElementType=\"ul\"\r\n                    itemSize={(index) => getChildSize(itemData[index])}\r\n                    overscanCount={5}\r\n                    itemCount={itemCount}\r\n                >\r\n                    {renderRow}\r\n                </VariableSizeList>\r\n            </OuterElementContext.Provider>\r\n        </div>\r\n    );\r\n});\r\n\r\nListboxComponent.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\n// function random(length) {\r\n//     const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n//     let result = '';\r\n//\r\n//     for (let i = 0; i < length; i += 1) {\r\n//         result += characters.charAt(Math.floor(Math.random() * characters.length));\r\n//     }\r\n//\r\n//     return result;\r\n// }\r\n\r\nconst useStyles = makeStyles({\r\n    listbox: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 0,\r\n            margin: 0,\r\n        },\r\n    },\r\n});\r\n\r\n// const OPTIONS = Array.from(new Array(10000))\r\n//     .map(() => random(10 + Math.ceil(Math.random() * 20)))\r\n//     .sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\r\n\r\nconst renderGroup = (params) => [\r\n    <ListSubheader key={params.key} component=\"div\">\r\n        {params.group}\r\n    </ListSubheader>,\r\n    params.children,\r\n];\r\n\r\nexport default function Virtualize(props) {\r\n    const {titles} = props;\r\n    const classes = useStyles();\r\n\r\n    const filterOptions = (options, { inputValue }) =>\r\n        matchSorter(options, inputValue);\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"virtualize-demo\"\r\n            style={{width: 300}}\r\n            disableListWrap\r\n            classes={classes}\r\n            ListboxComponent={ListboxComponent}\r\n            filterOptions={filterOptions}\r\n            // renderGroup={renderGroup}\r\n            options={titles}\r\n            // groupBy={(option) => option[0].toUpperCase()}\r\n            renderInput={(params) => <TextField {...params} variant=\"outlined\" label=\"10,000 options\"/>}\r\n            renderOption={(option) => <Typography noWrap>{option}</Typography>}\r\n        />\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown,\r\n    faFilter, faPlus, faSave, faSortAmountDown, faSortAmountDownAlt,\r\n    faSortNumericDown,\r\n    faSortNumericDownAlt,\r\n    faTimes, faTrash,\r\n    faUndoAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport {setCookieShowFilters} from \"../../../actions/cookies\";\r\nimport {filterTitles, getResetValuesFromBranch} from \"../../browse/functions\";\r\nimport {ApiResult, FiltersPreset} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {AnimeFilterNames, FilterSchema, FilterSchemaType} from \"./field_names\";\r\nimport store from \"../../../store\";\r\n\r\nimport '../../../assets/css/filters.css'\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Filter} from \"@material-ui/icons\";\r\nimport CyberFooter from \"../footer/CyberFooter\";\r\nimport {saveAnimeFilterPreset, setSelectedAnimePreset} from \"../../../actions/users\";\r\nimport PresetFilters from \"./PresetFilters\";\r\n// import SearchAutocomplete from \"./SearchAutocomplete\";\r\nimport {setPreset} from \"./functions\";\r\nimport {act} from \"@testing-library/react\";\r\nimport Virtualize from \"./SearchAutocomplete\";\r\nimport {playClickSound} from \"../sounds\";\r\n\r\n\r\nfunction getSliderLabel(values, max, label_name) {\r\n    let value_2 = `${values[1]}`;\r\n    if (values[1] === max)\r\n        value_2 = `${values[1] - 1}+`;\r\n    return `${values[0]} to ${value_2} ${label_name.split('_')[0]}`\r\n}\r\n\r\nfunction checkSliderDefaults(values, min, max) {\r\n    return !(parseInt(values[0]) === min && parseInt(values[1]) === max);\r\n}\r\n\r\nfunction getGenreImgSrc(name, values) {\r\n    const img_name = name.toLowerCase().replaceAll(' ', '_');\r\n    let ext = 'jpg';\r\n    if (values.indexOf(name) >= 0) ext = 'gif';\r\n    return `/images/genre_icons/${img_name}.${ext}`\r\n}\r\n\r\nfunction getOrderIcon(order, active) {\r\n    let ordering = order;\r\n    if (ordering.indexOf('-') === 0 && ordering.replace('-', '') === active)\r\n        return faSortAmountDown;\r\n    return faSortAmountDownAlt\r\n}\r\n\r\nfunction getOrderValue(order, active) {\r\n    return order.replace('-', '') === active;\r\n}\r\n\r\n/**\r\n * Adjusts the height of the filters wrapper based on\r\n * active filters, if no filters are active, the height is set to 0\r\n */\r\nfunction changeHeightOfActiveFiltersWrapperOnChange() {\r\n    let active_filters = document.getElementById('Active-Filters');\r\n    if (active_filters) {\r\n        if (active_filters.childNodes.length > 0) active_filters.parentNode.style.height = 'auto';\r\n        else active_filters.parentNode.style.height = '0';\r\n    }\r\n}\r\n\r\n// noinspection JSIgnoredPromiseFromCall,JSUnresolvedVariable\r\nclass TitlesFilter extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Previous filters from cookies */\r\n        title_filters: PropTypes.object.isRequired,\r\n        /** Selected season, if called from display season page */\r\n        season: PropTypes.object,\r\n        /** User list object {pk: selected filter:} if called from user list page */\r\n        list: PropTypes.object,\r\n        /** Main filters */\r\n        main_filters: PropTypes.array,\r\n        /** Regular filters */\r\n        regular_filters: PropTypes.array,\r\n        /** Wide filters (ex. Genres) */\r\n        wide_filters: PropTypes.array,\r\n        /** Ordering filters */\r\n        order_filters: PropTypes.array,\r\n        /** Preset filters for the user */\r\n        presets: PropTypes.array,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onGenreEnter = this.onGenreEnter.bind(this);\r\n        this.onGenreLeave = this.onGenreLeave.bind(this);\r\n        this.onGenreChange = this.onGenreChange.bind(this);\r\n        this.checkFormValuesFromCookies = this.checkFormValuesFromCookies.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onReset = this.onReset.bind(this);\r\n\r\n        this.state = this.props.title_filters;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (JSON.stringify(prevProps.title_filters) !== JSON.stringify(this.props.title_filters))\r\n            this.setState(this.props.title_filters);\r\n    }\r\n\r\n    /**\r\n     * Update the Formik values with the cookie filter values, because sometimes\r\n     * when filtering from a user list the values don't update correctly.\r\n     * @returns {boolean} True if the values should be updated\r\n     */\r\n    checkFormValuesFromCookies() {\r\n        let filters = Object.assign({}, this.state);\r\n        let cookie_filters = Object.assign({}, this.props.title_filters);\r\n        return JSON.stringify(filters) !== JSON.stringify(cookie_filters);\r\n    }\r\n\r\n    /**\r\n     * When entering a genre div, change the image .jpg to .gif.\r\n     * @param genreFilter {String} name of the genre.\r\n     */\r\n    onGenreEnter(genreFilter) {\r\n        let img = document.getElementById(\"img_\" + genreFilter);\r\n        if (!img.classList.contains('active-genre'))\r\n            img.src = img.src.slice(0, -3) + 'gif';\r\n    }\r\n\r\n    /**\r\n     * When leaving the genre div revert the .gif image back to .jpg.\r\n     * @param genreFilter {String} name of the genre.\r\n     */\r\n    onGenreLeave(genreFilter) {\r\n        let img = document.getElementById(\"img_\" + genreFilter);\r\n        if (!img.classList.contains('active-genre'))\r\n            img.src = img.src.slice(0, -3) + 'jpg';\r\n    }\r\n\r\n    /**\r\n     * When clicking on a genre set it as active by adding a css\r\n     * class, or remove the class if it was already active.\r\n     * @param e {Object} Mouse event.\r\n     */\r\n    onGenreChange(e) {\r\n        if (e.target.checked)\r\n            e.target.nextSibling.firstChild.classList.add(\"active-genre\");\r\n        else\r\n            e.target.nextSibling.firstChild.classList.remove(\"active-genre\");\r\n    };\r\n\r\n    /**\r\n     * Called on submit of the filters, calls the filter\r\n     * title action with the active filters\r\n     * @param e {Object} Mouse event\r\n     * @param preset {Object} Optional, Filter preset, default null\r\n     */\r\n    onSubmit(e, preset = null) {\r\n        e.preventDefault();\r\n        console.log('one order:', this.state);\r\n        if (preset)\r\n            this.setState(preset, () => {\r\n                this.onSubmit(e)\r\n            });\r\n        else filterTitles(this.props.branch, 1, this.state, this.props.season, this.props.list);\r\n    }\r\n\r\n    /**\r\n     * Called on reset of the filters, resets the active\r\n     * filters and ordering to default, and calls the filter title action\r\n     */\r\n    onReset() {\r\n        const reset_values = getResetValuesFromBranch(this.props.branch);\r\n        this.setState(reset_values);\r\n        setPreset(this.props.branch, {});\r\n        filterTitles(this.props.branch, 1, reset_values, this.props.season, this.props.list);\r\n    }\r\n\r\n    render() {\r\n        const uses_presets = this.props.presets !== undefined;\r\n        const field_names = {\r\n            search: 'search',\r\n            ordering: 'ordering',\r\n        };\r\n        changeHeightOfActiveFiltersWrapperOnChange();\r\n\r\n        return (\r\n            <Grid id=\"Filters\" container>\r\n                <Grid item xs={12}>\r\n                    <form className=\"filters-form\" onSubmit={this.onSubmit}>\r\n                        <Grid container>\r\n                            <Grid item xs={12} sm={6} md={4} lg={3} className=\"search-field-container\">\r\n                                {/*<Virtualize titles={this.props.searchable_titles}/>*/}\r\n                                {/*<SearchAutocomplete/>*/}\r\n                                {/*<Autocomplete*/}\r\n                                {/*    options={this.props.searchable_titles}*/}\r\n                                {/*    id=\"controlled-demo\"*/}\r\n                                {/*    value={this.state[field_names.search]}*/}\r\n                                {/*    onChange={(e, new_value) => {*/}\r\n                                {/*                        this.setState({[e.target.name]: new_value});*/}\r\n                                {/*        }}*/}\r\n                                {/*    renderInput={(params) => <TextField {...params}*/}\r\n                                {/*                    label=\"Search\"*/}\r\n                                {/*                    className=\"form-control search-field\"*/}\r\n                                {/*                    name={field_names.search}*/}\r\n                                {/*                    />}*/}\r\n                                {/*  />*/}\r\n                                {/*<Autocomplete*/}\r\n                                {/*    id=\"highlights-demo\"*/}\r\n                                {/*    style={{width: 300}}*/}\r\n                                {/*    options={searchable_titles}*/}\r\n                                {/*    getOptionLabel={(option) => option.title}*/}\r\n                                {/*    renderInput={(params) => (*/}\r\n                                {/*        <TextField {...params}*/}\r\n                                {/*                    label=\"Search\"*/}\r\n                                {/*                    className=\"form-control search-field\"*/}\r\n                                {/*                    value={this.state[field_names.search]}*/}\r\n                                {/*                    name={field_names.search}*/}\r\n                                {/*                    onChange={(e) => {*/}\r\n                                {/*                        this.setState({[e.target.name]: e.target.value});*/}\r\n                                {/*        }}/>*/}\r\n                                {/*    )}*/}\r\n                                {/*    renderOption={(option, {inputValue}) => {*/}\r\n                                {/*        const matches = match(option.title, inputValue);*/}\r\n                                {/*        const parts = parse(option.title, matches);*/}\r\n\r\n                                {/*        return (*/}\r\n                                {/*            <div>*/}\r\n                                {/*                {parts.map((part, index) => (*/}\r\n                                {/*                    <span key={index} style={{fontWeight: part.highlight ? 700 : 400}}>*/}\r\n                                {/*            {part.text}*/}\r\n                                {/*          </span>*/}\r\n                                {/*                ))}*/}\r\n                                {/*            </div>*/}\r\n                                {/*        );*/}\r\n                                {/*    }}*/}\r\n                                {/*/>*/}\r\n                                <TextField\r\n                                    label=\"Search\"\r\n                                    className=\"form-control search-field\"\r\n                                    value={this.state[field_names.search]}\r\n                                    name={field_names.search}\r\n                                    onChange={(e) => {\r\n                                        this.setState({[e.target.name]: e.target.value});\r\n                                    }}/>\r\n                            </Grid>\r\n                            <Grid item xs={0} md={uses_presets ? 3 : 5} lg={uses_presets ? 4 : 6}>\r\n                                <p className=\"total-results\">Results: <span className=\"total-results-span\">\r\n                                {!this.props.titles_loading ?\r\n                                    this.props.filtered_titles[ApiResult.count] : 'Loading..'}</span>\r\n                                </p>\r\n                            </Grid>\r\n                            {uses_presets ? <Grid item xs={12} md={2}>\r\n                                <PresetFilters\r\n                                    branch={this.props.branch}\r\n                                    presets={this.props.presets}\r\n                                    filters={this.state}\r\n                                    onSubmit={this.onSubmit}/>\r\n                            </Grid> : null}\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton variant=\"outlined\" onClick={() => {\r\n                                    store.dispatch(setCookieShowFilters(!this.props.show_filters))\r\n                                }}><FontAwesomeIcon\r\n                                    icon={this.props.show_filters ? faTimes : faArrowDown}/></CyberButton>\r\n                            </Grid>\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton variant=\"outlined\" onClick={this.onReset}>\r\n                                    <FontAwesomeIcon icon={faUndoAlt}/></CyberButton>\r\n                            </Grid>\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton type=\"submit\" variant=\"outlined\">\r\n                                    <FontAwesomeIcon icon={faFilter}/></CyberButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12} className=\"text-center\" style={{height: 0}}>\r\n                                <div id=\"Active-Filters\" className=\"active-filters-wrapper\">\r\n                                    {this.props.main_filters ? this.props.main_filters.map((value, x) => (\r\n                                        this.state[value[FilterSchema.filter_name]] ?\r\n                                            <Chip key={x} className={`chip-${value[FilterSchema.color]}`}\r\n                                                  size=\"small\" label={value[FilterSchema.label]}/> : null\r\n                                    )) : null}\r\n                                    {this.props.regular_filters ? this.props.regular_filters.map((field) => (\r\n                                        field[FilterSchema.type] === FilterSchemaType.standard ?\r\n                                            this.state[field[FilterSchema.filter_name]].map((filter, i) => (\r\n                                                <Chip key={i} className={`chip-${field[FilterSchema.color]}`}\r\n                                                      size=\"small\" label={filter}/>\r\n                                            )) : field[FilterSchema.type] === FilterSchemaType.slider ?\r\n                                            checkSliderDefaults(this.state[field[FilterSchema.filter_name]],\r\n                                                field[FilterSchema.min], field[FilterSchema.max]) ?\r\n                                                <Chip className={`chip-${field[FilterSchema.color]}`} size=\"small\"\r\n                                                      label={getSliderLabel(this.state[field[FilterSchema.filter_name]], field[FilterSchema.max], field[FilterSchema.filter_name])}/>\r\n                                                : null : null\r\n                                    )) : null}\r\n                                    {this.props.wide_filters ? this.props.wide_filters.map((field) => (\r\n                                        this.state[field[FilterSchema.filter_name]].map((filter, i) => (\r\n                                            <Chip key={i} className={`chip-${field[FilterSchema.color]}`}\r\n                                                  size=\"small\" label={filter}/>\r\n                                        ))\r\n                                    )) : null}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <div id=\"filters-collapsable\" className={this.props.show_filters ? 'show-filters' : null}>\r\n                            <Grid container>\r\n                                {this.props.main_filters ?\r\n                                    <Grid item xs={12} md={6} lg={4} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">Main Filters</h6>\r\n                                        {this.props.main_filters.map((value, x) => (\r\n                                            <div key={x} className=\"input-group\">\r\n                                                <input id={value[FilterSchema.filter_name]}\r\n                                                       type=\"checkbox\"\r\n                                                       name={value[FilterSchema.filter_name]}\r\n                                                       hidden=\"hidden\"\r\n                                                       checked={this.state[value[FilterSchema.filter_name]]}\r\n                                                       onChange={(e) => {\r\n                                                           this.setState({\r\n                                                               [e.target.name]: !this.state[value[FilterSchema.filter_name]]\r\n                                                           });\r\n                                                       }}\r\n                                                />\r\n                                                <label htmlFor={value[FilterSchema.filter_name]}\r\n                                                       className={`label-${value[FilterSchema.color]}`}>\r\n                                                    {value[FilterSchema.label]}</label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </Grid> : null}\r\n\r\n                                {this.props.regular_filters ? this.props.regular_filters.map((field, x) => (\r\n                                    <Grid key={x} item xs={12} md={6} lg={4} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">{field[FilterSchema.filter_name].replaceAll('_', ' ')}</h6>\r\n                                        {field[FilterSchema.type] === FilterSchemaType.standard ? field[FilterSchema.content].map((filter, y) => (\r\n                                            <div key={y} className=\"input-group\">\r\n                                                <input\r\n                                                    id={`${field[FilterSchema.filter_name]}_${filter}`}\r\n                                                    type=\"checkbox\"\r\n                                                    name={field[FilterSchema.filter_name]}\r\n                                                    onChange={(e) => {\r\n                                                        if (this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0) {\r\n                                                            let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                            filters.splice(filters.indexOf(filter), 1);\r\n                                                            this.setState({\r\n                                                                [e.target.name]: filters\r\n                                                            });\r\n                                                        } else {\r\n                                                            let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                            filters.push(filter);\r\n                                                            this.setState({\r\n                                                                [e.target.name]: filters\r\n                                                            });\r\n                                                        }\r\n                                                    }}\r\n                                                    checked={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0}\r\n                                                    hidden=\"hidden\"/>\r\n                                                <label\r\n                                                    htmlFor={`${field[FilterSchema.filter_name]}_${filter}`}\r\n                                                    className={`label-${field[FilterSchema.color]}`}>{filter}</label>\r\n                                            </div>\r\n                                        )) : field[FilterSchema.type] === FilterSchemaType.slider ?\r\n                                            <Slider\r\n                                                className=\"slider-group\"\r\n                                                id={field[FilterSchema.filter_name]}\r\n                                                value={this.state[field[FilterSchema.filter_name]]}\r\n                                                onChange={(event, value) => {\r\n                                                    this.setState({\r\n                                                        [field[FilterSchema.filter_name]]: value\r\n                                                    })\r\n                                                }}\r\n                                                max={field[FilterSchema.max]}\r\n                                                min={field[FilterSchema.min]}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                aria-labelledby=\"range-slider\"\r\n                                                marks={field[FilterSchema.marks]}\r\n                                            />\r\n                                            : null}\r\n                                    </Grid>\r\n                                )) : null}\r\n                            </Grid>\r\n\r\n                            {this.props.wide_filters ? <Grid container>\r\n                                {this.props.wide_filters.map((field, x) => (\r\n                                    <Grid key={x} item xs={12} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">{field[FilterSchema.filter_name]}</h6>\r\n                                        {field[FilterSchema.content].map((filter, i) => (\r\n                                            <div key={i} className=\"genre-container\">\r\n                                                <input id={filter} type=\"checkbox\" hidden=\"hidden\"\r\n                                                       name={field[FilterSchema.filter_name]}\r\n                                                       onChange={(e) => {\r\n                                                           if (this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0) {\r\n                                                               let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                               filters.splice(filters.indexOf(filter), 1);\r\n                                                               this.setState({\r\n                                                                   [e.target.name]: filters\r\n                                                               });\r\n                                                           } else {\r\n                                                               let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                               filters.push(filter);\r\n                                                               this.setState({\r\n                                                                   [e.target.name]: filters\r\n                                                               });\r\n                                                           }\r\n                                                       }}\r\n                                                       onClick={this.onGenreChange}\r\n                                                       checked={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0}\r\n                                                />\r\n                                                <label htmlFor={filter}\r\n                                                       onMouseEnter={() => {\r\n                                                           this.onGenreEnter(filter)\r\n                                                       }}\r\n                                                       onMouseLeave={() => {\r\n                                                           this.onGenreLeave(filter)\r\n                                                       }}>\r\n                                                    <img id={`img_${filter}`}\r\n                                                         className={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0 ? 'active-genre' : null}\r\n                                                         src={getGenreImgSrc(filter, this.state[field[FilterSchema.filter_name]])}\r\n                                                         alt=\"\"/>\r\n                                                    <div><p>{filter}</p></div>\r\n                                                </label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid> : null}\r\n                        </div>\r\n\r\n                        {this.props.order_filters ? <Grid container className=\"ordering-container\">\r\n                            <Grid item xs={12}>\r\n                                {this.props.order_filters.map((order, i) => (\r\n                                    <div key={i} className=\"input-group\" onMouseLeave={() => {\r\n                                        let container = document.getElementById(`order_btn_container_${order}`);\r\n                                        container.classList.remove('hovered-order-button-container')\r\n                                    }}>\r\n                                        <label id={`order_label_${order}`}\r\n                                               className={getOrderValue(this.state[field_names.ordering], order) ? 'no-hover-color active-order-label' : 'no-hover-color no-border'}\r\n                                               onMouseEnter={() => {\r\n                                                   let container = document.getElementById(`order_btn_container_${order}`);\r\n                                                   let width = document.getElementById(`order_label_${order}`).offsetWidth;\r\n                                                   container.classList.add('hovered-order-button-container');\r\n                                                   container.setAttribute('style', `margin-left: calc(${width / 2}px - 35px);`)\r\n                                               }}>\r\n                                            {getOrderValue(this.state[field_names.ordering], order) ? <FontAwesomeIcon\r\n                                                icon={getOrderIcon(this.state[field_names.ordering], order)}/> : null}\r\n                                            <span className=\"order-label\">{order.replaceAll('_', ' ')}</span>\r\n                                        </label>\r\n                                        <div id={`order_btn_container_${order}`} className=\"order-buttons-container\">\r\n                                            <div className=\"order-btn\">\r\n                                                <input id={`order_dc_${order}`} type=\"radio\" value={order}\r\n                                                       checked={getOrderValue(this.state[field_names.ordering], order)}\r\n                                                       hidden=\"hidden\" onClick={(e) => {\r\n                                                    playClickSound();\r\n                                                    this.setState({\r\n                                                        [field_names.ordering]: `-${order}`\r\n                                                    }, () => {\r\n                                                        this.onSubmit(e);\r\n                                                    });\r\n                                                }}/>\r\n                                                <label htmlFor={`order_dc_${order}`}>\r\n                                                    <FontAwesomeIcon icon={faSortAmountDown}/>\r\n                                                </label>\r\n                                            </div>\r\n                                            <div className=\"order-btn\">\r\n                                                <input id={`order_ac_${order}`} type=\"radio\" value={order}\r\n                                                       checked={getOrderValue(this.state[field_names.ordering], order)}\r\n                                                       hidden=\"hidden\" onClick={(e) => {\r\n                                                    playClickSound();\r\n                                                    this.setState({\r\n                                                        [field_names.ordering]: e.target.value\r\n                                                    }, () => {\r\n                                                        this.onSubmit(e);\r\n                                                    });\r\n                                                }}/>\r\n                                                <label htmlFor={`order_ac_${order}`}>\r\n                                                    <FontAwesomeIcon icon={faSortAmountDownAlt}/>\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </Grid>\r\n                        </Grid> : null}\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    show_filters: state.cookies.show_filters,\r\n    searchable_titles: state.anime.searchable_titles,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TitlesFilter)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {\r\n    ANIME_AUDIO_CHANNELS, ANIME_GENRES, ANIME_ORDERINGS,\r\n    ANIME_RATING_SHORT,\r\n    ANIME_STATUSES,\r\n    ANIME_TYPES,\r\n    ANIME_VIDEO_QUALITIES,\r\n    BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES, USER_ANIME_ORDERINGS, USER_ANIME_STATUSES, USER_ANIME_STATUSES_ARRAY\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {FilterLabels, AnimeFilterNames, FilterSchemaType} from \"../field_names\";\r\nimport PropTypes from \"prop-types\";\r\nimport {User} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getAnimeFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\n\r\n\r\nclass AnimeFilters extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n        /** User List object, {pk: selected_filter:} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getAnimeFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': AnimeFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n            {'name': AnimeFilterNames.is_downloading, 'label': FilterLabels.is_downloading, 'color': 'default'},\r\n            {'name': AnimeFilterNames.cannot_download, 'label': FilterLabels.cannot_download, 'color': 'danger'},\r\n            {'name': AnimeFilterNames.deleted_by_MAL, 'label': FilterLabels.deleted_by_MAL, 'color': 'danger'},\r\n            {'name': AnimeFilterNames.pending_by_MAL, 'label': FilterLabels.pending_by_MAL, 'color': 'warning'},\r\n        ];\r\n        const episode_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 36,\r\n                label: '36',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const length_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 30,\r\n                label: '30',\r\n            },\r\n            {\r\n                value: 61,\r\n                label: '60+',\r\n            },\r\n        ];\r\n        const initial = new FILTER_ANIME_INITIAL_VALUES();\r\n        const values = initial.VALUES;\r\n        let regular_filters = [\r\n            {'name': AnimeFilterNames.type, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_TYPES},\r\n            {'name': AnimeFilterNames.status, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_STATUSES},\r\n            {'name': AnimeFilterNames.rating_short, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_RATING_SHORT},\r\n            {'name': AnimeFilterNames.episodes_range, 'type': FilterSchemaType.slider, 'marks': episode_marks, 'min': values.episodes_range[0], 'max': values.episodes_range[1], 'color': 'primary', 'content': null},\r\n            {'name': AnimeFilterNames.length_range, 'type': FilterSchemaType.slider, 'marks': length_marks, 'min': values.length_range[0], 'max': values.length_range[1], 'color': 'primary', 'content': null},\r\n            {'name': AnimeFilterNames.video_quality, 'type': FilterSchemaType.standard, 'color': 'secondary', 'content': ANIME_VIDEO_QUALITIES},\r\n            {'name': AnimeFilterNames.audio_channel, 'type': FilterSchemaType.standard, 'color': 'secondary', 'content': ANIME_AUDIO_CHANNELS},\r\n        ];\r\n\r\n        let wide_filters = [\r\n            {'name': AnimeFilterNames.genres, 'type': FilterSchemaType.wide, 'color': 'primary', 'content': ANIME_GENRES},\r\n        ];\r\n\r\n        let orderings = ANIME_ORDERINGS;\r\n        if (!isEmpty(this.props.list)) {\r\n            orderings = orderings.concat(USER_ANIME_ORDERINGS);\r\n        } else {\r\n            if (this.props.user_authenticated)\r\n                regular_filters.push(\r\n                    {'name': AnimeFilterNames.user_exclude, 'type': FilterSchemaType.standard, 'color': 'info', 'content': USER_ANIME_STATUSES_ARRAY},\r\n                );\r\n        }\r\n\r\n        let anime_filters = this.props.anime_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            anime_filters = this.props.anime_season_filters;\r\n        else if (!isEmpty(this.props.list))\r\n            anime_filters = this.props.anime_list_filters;\r\n        \r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_ANIME}\r\n                titles_loading={this.props.anime_loading}\r\n                filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n                filtered_titles={this.props.filtered_anime}\r\n                title_filters={anime_filters}\r\n                season={this.props.season}\r\n                list={this.props.list}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={orderings}\r\n                presets={this.props.anime_filter_presets}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_browse_filters: state.cookies.anime_browse_filters,\r\n    anime_season_filters: state.cookies.anime_season_filters,\r\n    anime_list_filters: state.cookies.anime_list_filters,\r\n    anime_filter_presets: state.users.anime_filter_presets,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    BRANCH_MANGA,\r\n    FILTER_MANGA_INITIAL_VALUES,\r\n    MANGA_GENRES, MANGA_ORDERINGS,\r\n    MANGA_STATUSES,\r\n    MANGA_TYPES, USER_MANGA_STATUSES_ARRAY\r\n} from \"../../../../globals\";\r\nimport {FilterLabels, MangaFilterNames, FilterSchemaType} from \"../field_names\";\r\nimport {getMangaFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\nclass MangaFilters extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n        /** User List object, {pk: selected_filter:} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getMangaFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': MangaFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n            {'name': MangaFilterNames.is_downloading, 'label': FilterLabels.is_downloading, 'color': 'default'},\r\n            {'name': MangaFilterNames.cannot_download, 'label': FilterLabels.cannot_download, 'color': 'danger'},\r\n            {'name': MangaFilterNames.deleted_by_MAL, 'label': FilterLabels.deleted_by_MAL, 'color': 'danger'},\r\n            {'name': MangaFilterNames.pending_by_MAL, 'label': FilterLabels.pending_by_MAL, 'color': 'warning'},\r\n        ];\r\n        const volumes_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 36,\r\n                label: '36',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const chapters_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 30,\r\n                label: '30',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const initial = new FILTER_MANGA_INITIAL_VALUES();\r\n        const values = initial.VALUES;\r\n        let regular_filters = [\r\n            {\r\n                'name': MangaFilterNames.type,\r\n                'type': FilterSchemaType.standard,\r\n                'color': 'primary',\r\n                'content': MANGA_TYPES\r\n            },\r\n            {\r\n                'name': MangaFilterNames.status,\r\n                'type': FilterSchemaType.standard,\r\n                'color': 'primary',\r\n                'content': MANGA_STATUSES\r\n            },\r\n            {\r\n                'name': MangaFilterNames.volumes_range,\r\n                'type': FilterSchemaType.slider,\r\n                'marks': volumes_marks,\r\n                'min': values.volumes_range[0],\r\n                'max': values.volumes_range[1],\r\n                'color': 'primary',\r\n                'content': null\r\n            },\r\n            {\r\n                'name': MangaFilterNames.chapters_range,\r\n                'type': FilterSchemaType.slider,\r\n                'marks': chapters_marks,\r\n                'min': values.chapters_range[0],\r\n                'max': values.chapters_range[1],\r\n                'color': 'primary',\r\n                'content': null\r\n            },\r\n        ];\r\n\r\n        if (this.props.user_authenticated) {\r\n            regular_filters.push(\r\n                {\r\n                    'name': MangaFilterNames.user_exclude,\r\n                    'type': FilterSchemaType.standard,\r\n                    'color': 'info',\r\n                    'content': USER_MANGA_STATUSES_ARRAY\r\n                },\r\n            )\r\n        }\r\n\r\n        let wide_filters = [\r\n            {\r\n                'name': MangaFilterNames.genres,\r\n                'type': FilterSchemaType.wide,\r\n                'color': 'primary',\r\n                'content': MANGA_GENRES\r\n            },\r\n        ];\r\n\r\n        let manga_filters = this.props.manga_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            manga_filters = this.props.manga_season_filters;\r\n        else if (!isEmpty(this.props.list))\r\n            manga_filters = this.props.manga_list_filters;\r\n\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_MANGA}\r\n                titles_loading={this.props.manga_loading}\r\n                filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n                filtered_titles={this.props.filtered_manga}\r\n                title_filters={manga_filters}\r\n                season={this.props.season}\r\n                list={this.props.list}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={MANGA_ORDERINGS}\r\n                presets={this.props.manga_filter_presets}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_browse_filters: state.cookies.manga_browse_filters,\r\n    manga_season_filters: state.cookies.manga_season_filters,\r\n    manga_list_filters: state.cookies.manga_list_filters,\r\n    manga_filter_presets: state.users.manga_filter_presets,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    BRANCH_EROGE,\r\n    EROGE_CENSORSHIPS,\r\n    EROGE_LANGUAGES, EROGE_ORDERINGS,\r\n    EROGE_PLATFORMS, EROGE_TAGS,\r\n    EROGE_TYPES,\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {ErogeFilterNames, FilterLabels, FilterSchemaType} from \"../field_names\";\r\nimport {getErogeFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\n\r\n\r\nclass ErogeFilters extends Component {\r\n    static propTypes = {\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getErogeFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': ErogeFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n        ];\r\n        let regular_filters = [\r\n            {'name': ErogeFilterNames.type, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_TYPES},\r\n            {'name': ErogeFilterNames.platforms, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_PLATFORMS},\r\n            {'name': ErogeFilterNames.censorship, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_CENSORSHIPS},\r\n            {'name': ErogeFilterNames.language, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_LANGUAGES},\r\n        ];\r\n        let wide_filters = [\r\n            {'name': ErogeFilterNames.tags, 'type': FilterSchemaType.wide, 'color': 'primary', 'content': EROGE_TAGS},\r\n        ];\r\n\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_EROGE}\r\n                titles_loading={this.props.eroge_loading}\r\n                filtered_titles_loaded={this.props.filtered_eroge_loaded}\r\n                filtered_titles={this.props.filtered_eroge}\r\n                title_filters={this.props.eroge_browse_filters}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={EROGE_ORDERINGS}\r\n                presets={this.props.eroge_filter_presets}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    filtered_eroge_loaded: state.eroge.filtered_eroge_loaded,\r\n    filtered_eroge: state.eroge.filtered_eroge,\r\n    eroge_browse_filters: state.cookies.eroge_browse_filters,\r\n    eroge_filter_presets: state.users.eroge_filter_presets,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ErogeFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {\r\n    BRANCH_CHARACTERS, CHARACTERS_ORDERINGS,\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\n\r\n\r\nclass CharactersFilters extends Component {\r\n    render() {\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_CHARACTERS}\r\n                titles_loading={this.props.characters_loading}\r\n                filtered_titles_loaded={this.props.filtered_characters_loaded}\r\n                filtered_titles={this.props.filtered_characters}\r\n                title_filters={this.props.characters_filters}\r\n                order_filters={CHARACTERS_ORDERINGS}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    characters_loading: state.characters.characters_loading,\r\n    filtered_characters_loaded: state.characters.filtered_characters_loaded,\r\n    filtered_characters: state.characters.filtered_characters,\r\n    characters_filters: state.cookies.characters_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharactersFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE, PEOPLE_ORDERINGS} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\n\r\n\r\nclass PeopleFilters extends Component {\r\n    render() {\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_PEOPLE}\r\n                titles_loading={this.props.people_loading}\r\n                filtered_titles_loaded={this.props.filtered_people_loaded}\r\n                filtered_titles={this.props.filtered_people}\r\n                title_filters={this.props.people_filters}\r\n                order_filters={PEOPLE_ORDERINGS}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people_loading: state.people.people_loading,\r\n    filtered_people_loaded: state.people.filtered_people_loaded,\r\n    filtered_people: state.people.filtered_people,\r\n    people_filters: state.cookies.people_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PeopleFilters)\r\n","import {\r\n    ANIME_BROWSE_TAB_NAME,\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA,\r\n    BRANCH_PEOPLE,\r\n    BROWSE_ANIME_ITEMS_PER_PAGE,\r\n    BROWSE_CHARACTERS_ITEMS_PER_PAGE, BROWSE_EROGE_ITEMS_PER_PAGE,\r\n    BROWSE_MANGA_ITEMS_PER_PAGE, BROWSE_PEOPLE_ITEMS_PER_PAGE,\r\n    CHARACTERS_BROWSE_TAB_NAME,\r\n    EROGE_BROWSE_TAB_NAME,\r\n    FILTER_ANIME_INITIAL_VALUES,\r\n    FILTER_CHARACTERS_INITIAL_VALUES,\r\n    FILTER_EROGE_INITIAL_VALUES,\r\n    FILTER_MANGA_INITIAL_VALUES,\r\n    MANGA_BROWSE_TAB_NAME,\r\n    PEOPLE_BROWSE_TAB_NAME\r\n} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {filterAnime} from \"../../actions/anime\";\r\nimport {filterManga} from \"../../actions/manga\";\r\nimport {filterCharacters} from \"../../actions/characters\";\r\nimport {filterEroge} from \"../../actions/eroge\";\r\nimport AnimeFilters from \"../layout/filters/anime/AnimeFilters\";\r\nimport React from \"react\";\r\nimport MangaFilters from \"../layout/filters/manga/MangaFilters\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../actions/users\";\r\nimport ErogeFilters from \"../layout/filters/eroge/ErogeFilters\";\r\nimport CharactersFilters from \"../layout/filters/characters/CharactersFilters\";\r\nimport {filterPeople} from \"../../actions/people\";\r\nimport PeopleFilters from \"../layout/filters/people/PeopleFilters\";\r\n\r\n\r\nexport function getTabName(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_BROWSE_TAB_NAME;\r\n        case BRANCH_MANGA:\r\n            return MANGA_BROWSE_TAB_NAME;\r\n        case BRANCH_CHARACTERS:\r\n            return CHARACTERS_BROWSE_TAB_NAME;\r\n        case BRANCH_EROGE:\r\n            return EROGE_BROWSE_TAB_NAME;\r\n        case BRANCH_PEOPLE:\r\n            return PEOPLE_BROWSE_TAB_NAME;\r\n        default:\r\n            return 'Browse'\r\n    }\r\n}\r\n\r\n\r\nexport function getFiltersFromBranch(branch, season, list) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AnimeFilters season={season} list={list}/>;\r\n        case BRANCH_MANGA:\r\n            return <MangaFilters season={season} list={list}/>;\r\n        case BRANCH_CHARACTERS:\r\n            return <CharactersFilters/>;\r\n        case BRANCH_EROGE:\r\n            return <ErogeFilters/>;\r\n        case BRANCH_PEOPLE:\r\n            return <PeopleFilters/>;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getItemsPerPageFromBranch(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return BROWSE_ANIME_ITEMS_PER_PAGE;\r\n        case BRANCH_MANGA:\r\n            return BROWSE_MANGA_ITEMS_PER_PAGE;\r\n        case BRANCH_CHARACTERS:\r\n            return BROWSE_CHARACTERS_ITEMS_PER_PAGE;\r\n        case BRANCH_EROGE:\r\n            return BROWSE_EROGE_ITEMS_PER_PAGE;\r\n        case BRANCH_PEOPLE:\r\n            return BROWSE_PEOPLE_ITEMS_PER_PAGE;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getResetValuesFromBranch(branch) {\r\n    let values;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            values = new FILTER_ANIME_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_MANGA:\r\n            values = new FILTER_MANGA_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_CHARACTERS:\r\n            values = new FILTER_CHARACTERS_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_EROGE:\r\n            values = new FILTER_EROGE_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nexport function filterTitles(branch, page = 1, filters = undefined, season = undefined, list = undefined) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(filterAnime(page, filters, season, list));\r\n            // store.dispatch(getAnimeSearchableTitles());\r\n            store.dispatch(getLoggedInUserAnimeEntryStatuses());\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(filterManga(page, filters, season, list));\r\n            store.dispatch(getLoggedInUserMangaEntryStatuses());\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            store.dispatch(filterCharacters(page, filters));\r\n            return;\r\n        case BRANCH_PEOPLE:\r\n            store.dispatch(filterPeople(page, filters));\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(filterEroge(page, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nimport {ApiResult} from \"../../models\";\r\nimport {filterTitles, getFiltersFromBranch, getItemsPerPageFromBranch, getTabName} from \"./functions\";\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {playClickSound, playExpand3Sound} from \"../layout/sounds\";\r\nimport {getBrowseGridListCols, isEmpty} from \"../functions\";\r\nimport TitleCard from \"../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport GoToPageDialog from \"../layout/pagination/goToPageDialog\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/browse.css'\r\n\r\n\r\nclass Browse extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Redux prop of user_entry_statuses */\r\n        user_entry_statuses: PropTypes.object,\r\n        /** Redux prop of title_filters */\r\n        title_filters: PropTypes.object,\r\n        /** Selected season */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            items_per_page: getItemsPerPageFromBranch(this.props.branch),\r\n            page_dialog_open: false,\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = getTabName(this.props.branch);\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        filterTitles(this.props.branch, 1, this.props.title_filters, this.props.season);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.titles_loading && !this.props.titles_loading) {\r\n            window.scrollTo(0, 0);\r\n            playExpand3Sound();\r\n        }\r\n\r\n        this.updateCurrentPage(prevState);\r\n\r\n        if (this.props.season && prevProps.season.season !== this.props.season.season)\r\n            filterTitles(this.props.branch, 1, this.props.title_filters, this.props.season)\r\n    }\r\n\r\n    updateCurrentPage(prevState) {\r\n        let page = this.state.current_page;\r\n        try {\r\n            page = this.props.filtered_titles[ApiResult.next].split('page=');\r\n            page = parseInt(page[page.length - 1]) - 1;\r\n        } catch (e) {\r\n            page = Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page);\r\n        }\r\n\r\n        if (page && prevState.current_page !== page) {\r\n            this.setState({current_page: page})\r\n        }\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            filterTitles(this.props.branch, page, this.props.title_filters, this.props.season);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Browse-Titles\">\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            {getFiltersFromBranch(this.props.branch, this.props.season)}\r\n                            {this.props.filtered_titles_loaded ? <>\r\n                                <GridList cellHeight={400} cols={this.state.gridlist_cols}\r\n                                          style={{margin: '0 0 10px 0'}}>\r\n                                    {this.props.filtered_titles[ApiResult.results].map((title, i) => (\r\n                                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={this.props.branch}\r\n                                                    title={title}\r\n                                                    user_buttons={true}\r\n                                                    index={i + ((this.state.current_page * this.state.items_per_page) - (this.state.items_per_page - 1))}\r\n                                                    user_status={!isEmpty(this.props.user_entry_statuses) ?\r\n                                                        this.props.user_entry_statuses[`${title['id']}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                                <div className=\"pagination\">\r\n                                    <Pagination\r\n                                        count={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                        color=\"primary\"\r\n                                        siblingCount={3}\r\n                                        page={this.state.current_page}\r\n                                        onChange={(type, page) => {\r\n                                            playClickSound();\r\n                                            if (page !== this.state.current_page)\r\n                                                this.goToPage(page);\r\n                                            else\r\n                                                this.setState({page_dialog_open: true})\r\n                                        }}\r\n                                    />\r\n                                    <GoToPageDialog\r\n                                        open={this.state.page_dialog_open}\r\n                                        current_page={this.state.current_page}\r\n                                        total_pages={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                        goToPage={this.goToPage}\r\n                                        onClose={this.closePageDialog}/>\r\n                                </div>\r\n                            </> : this.props.titles_loading ?\r\n                                <Loading text={`${this.props.branch} Loading`} offset={200}/> : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Browse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport PropTypes from \"prop-types\";\r\nimport store from \"../../../store\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass AnimeBrowse extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        let anime_filters = this.props.anime_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            anime_filters = this.props.anime_season_filters;\r\n        return <Browse\r\n            branch={BRANCH_ANIME}\r\n            titles_loading={this.props.anime_loading}\r\n            filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n            filtered_titles={this.props.filtered_anime}\r\n            title_filters={anime_filters}\r\n            user_entry_statuses={this.props.user_anime_entry_statuses}\r\n            season={this.props.season}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_browse_filters: state.cookies.anime_browse_filters,\r\n    anime_season_filters: state.cookies.anime_season_filters,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeBrowse)\r\n","import LazyHero from \"react-lazy-hero\";\r\nimport React, {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {LOGIN} from \"../../urls\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport Loading from \"../layout/common/Loading\";\r\n\r\n\r\nexport function NonAuthIndexHero() {\r\n    return <LazyHero\r\n        imageSrc={'images/neo-tokyo-1.jpg'}\r\n        minHeight={'100vh'}\r\n        opacity={0}\r\n        transitionDuration={200}\r\n        color={'transparent'}>\r\n        <div className=\"welcome-img-container\">\r\n            <div className=\"title-container\">\r\n                <h5>welcome to</h5>\r\n                <h1>Cyber-Genesis</h1>\r\n            </div>\r\n        </div>\r\n    </LazyHero>\r\n}\r\n\r\n\r\nexport function AuthIndexHero() {\r\n    return <div className=\"logged-out-welcome-container\">\r\n        <video autoPlay={true} muted={true} loop={true} id=\"Index-Video\">\r\n            <source src=\"images/neo-city.mp4\" type=\"video/mp4\"/>\r\n        </video>\r\n\r\n        <div className=\"welcome-img-container\">\r\n            <div className=\"title-container\">\r\n                <h5>welcome to</h5>\r\n                <h1>Cyber-Genesis</h1>\r\n            </div>\r\n        </div>\r\n        <div className=\"home-login-link-container\">\r\n            <Link to={LOGIN} className=\"color-blue\">Login</Link>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {Parallax} from 'react-parallax';\r\n\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {AuthIndexHero, NonAuthIndexHero} from \"./snippets\"\r\n\r\nimport '../../assets/css/home.css';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {ADMIN, HOME, REQUIEM} from \"../../urls\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\nimport {LoadGifs} from \"../layout/common/common\";\r\n\r\n\r\nclass Index extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            img_1_loaded: false,\r\n            img_2_loaded: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber-Space';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    // noinspection FunctionWithMoreThanThreeNegationsJS\r\n    render() {\r\n        // noinspection HtmlUnknownTarget\r\n        return (\r\n            <div id=\"Index\">\r\n                {this.props.user_authenticated ?\r\n                    <>\r\n                        <CyberNavbar/>\r\n                        <NonAuthIndexHero/>\r\n                        <Grid container>\r\n                            <Grid item xs={12} className=\"project-about\">\r\n                                <div className=\"project-about-wrapper\">\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-2-lq.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={this.state.img_1_loaded ? 'fade-in' : ''}\r\n                                    >\r\n                                        <img src={'images/neo-tokyo-2-lq.jpg'} className=\"lazy-loaded-img\"\r\n                                             alt=\"loader-img\"\r\n                                             onLoad={() => {\r\n                                                 this.setState({img_1_loaded: true})\r\n                                             }}/>\r\n                                        <div className=\"img-content-container\">\r\n                                            <img src=\"images/cyber-genesis-logo.png\" alt={'cg-logo'}/>\r\n                                            <div className=\"about-container\">\r\n                                                <span className=\"color-blue\">project:</span>&nbsp;\r\n                                                <h1>Cyber-Genesis</h1>\r\n                                                <p><Link to={HOME}><i>Cyber-Genesis</i></Link> is a platform for Asian\r\n                                                    culture mainly <i>Japanese</i> animated content.</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-3-lq.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={this.state.img_2_loaded ? 'fade-in' : ''}\r\n                                    >\r\n                                        <img src={'images/neo-tokyo-3-lq.jpg'} className=\"lazy-loaded-img\"\r\n                                             alt=\"loader-img\"\r\n                                             onLoad={() => {\r\n                                                 this.setState({img_2_loaded: true})\r\n                                             }}/>\r\n                                        <div className=\"img-content-container text-right\">\r\n                                            <img className=\"cyber-req-logo-top\"\r\n                                                 src=\"images/cyber-requiem-logo-magenta.png\"\r\n                                                 alt={'cg-logo'}/>\r\n                                            <div className=\"about-container\">\r\n                                                <span>project:</span>&nbsp;\r\n                                                <h1>Cyber-Requiem</h1>\r\n                                                <p><Link to={REQUIEM}><i>\r\n                                                    Cyber-Requiem</i></Link> is a system designed to keep <i>\r\n                                                    Cyber-Genesis</i> up to date by crawling the web for relative\r\n                                                    information and downloading multimedia.</p>\r\n                                            </div>\r\n                                            <img className=\"cyber-req-logo-bottom\"\r\n                                                 src=\"images/cyber-requiem-logo-magenta.png\"\r\n                                                 alt={'cg-logo'}/>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-1.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={'fade-in'}\r\n                                    >\r\n                                        <div className=\"img-content-container\">\r\n                                            <img\r\n                                                src=\"images/cyber-administration-logo-cyan.png\"\r\n                                                alt={'ca-logo'}/>\r\n                                            <div className=\"about-container margin-left-20\">\r\n                                                <span>project:</span>&nbsp;\r\n                                                <h1>Cyber-Administration</h1>\r\n                                                <p><a\r\n                                                    href={ADMIN}><i>Cyber-Administration</i></a> is a software\r\n                                                    for user interaction\r\n                                                    with <i>Cyber-Genesis</i> and <i>Cyber-Requiem</i>.\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <CyberFooter margin={false}/>\r\n                    </> :\r\n                    <AuthIndexHero/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Index)\r\n","import Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faCircle, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {User, UserList} from \"../../../models\";\r\nimport {faCalendarAlt} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\nimport {USER_ANIME_STATISTICS} from \"../../../urls\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Doughnut} from \"react-chartjs-2\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\nfunction getData(pie_data) {\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < pie_data.length; x++) {\r\n        stat_data.push(pie_data[x].stat);\r\n        labels.push(pie_data[x].label);\r\n    }\r\n\r\n    return  {\r\n        labels: labels,\r\n        legend: {\r\n            display: false,\r\n        },\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.4)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.4)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.5)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.2)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.4)',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.8)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.8)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.8)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.8)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.8)',\r\n            ],\r\n            borderColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 0.3)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 0.3)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 0.3)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 0.1)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 0.3)',\r\n            ],\r\n            hoverBorderColor: [\r\n                // COLOR_INFO,\r\n                'rgba(21, 255, 255, 1)',\r\n                // COLOR_PRIMARY,\r\n                'rgba(21, 107, 183, 1)',\r\n                // COLOR_WARNING,\r\n                'rgba(208, 156, 0, 1)',\r\n                // COLOR_DANGER,\r\n                'rgba(255, 0, 0, 1)',\r\n                // COLOR_GRAY,\r\n                'rgba(123, 123, 123, 1)',\r\n            ],\r\n            // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n            // hoverBorderColor: '#156bb7',\r\n            borderWidth: 0\r\n        }]\r\n    };\r\n}\r\n\r\n\r\nexport function AnimeSimpleChartStats(props) {\r\n    const {style} = props;\r\n    const user_list = useSelector(state => state.users.user_list);\r\n    if (isEmpty(user_list))\r\n        return null;\r\n    let pie_data = [\r\n        {label: 'Watching', stat: user_list[UserList.anime_watching], color: '', hoverColor: ''},\r\n        {label: 'Completed', stat: user_list[UserList.anime_completed], color: '', hoverColor: ''},\r\n        {label: 'On Hold', stat: user_list[UserList.anime_on_hold], color: '', hoverColor: ''},\r\n        {label: 'Dropped', stat: user_list[UserList.anime_dropped], color: '', hoverColor: ''},\r\n        {label: 'Planned', stat: user_list[UserList.anime_plan_to_watch], color: '', hoverColor: ''},\r\n    ];\r\n    const data = getData(pie_data);\r\n\r\n    return <div style={style} className=\"User-List-Stats-Container\">\r\n        <h2>Anime</h2>\r\n        <div className=\"pie-wrapper\">\r\n            <Doughnut height={100} width={100} data={data} options={{ legend: false}}/>\r\n        </div>\r\n        <div className=\"chip-wrapper\">\r\n            <div className=\"stat-chip\">\r\n                <Chip className=\"border-info color-info\"\r\n                      variant=\"outlined\"\r\n                      label={<>\r\n                          <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>\r\n                          <span>Watching<CountUp end={user_list[UserList.anime_watching]}/></span>\r\n                      </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-primary color-primary\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>\r\n                        <span>Completed<CountUp end={user_list[UserList.anime_completed]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-warning color-warning\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>\r\n                        <span>On Hold<CountUp end={user_list[UserList.anime_on_hold]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-danger color-danger\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>\r\n                        <span>Dropped<CountUp end={user_list[UserList.anime_dropped]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-gray color-gray\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>\r\n                        <span>Planned<CountUp end={user_list[UserList.anime_plan_to_watch]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-white color-white\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>\r\n                        <span>Total<CountUp end={user_list[UserList.anime_total_entries]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            {/*<div className=\"stat-chip\">*/}\r\n            {/*    <CyberLink to={USER_ANIME_STATISTICS(this.props.visited_user[User.id])}>*/}\r\n            {/*        <Button variant=\"outlined\" className=\"btn-info\">Statistics</Button>*/}\r\n            {/*    </CyberLink>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport function MangaSimpleChartStats(props) {\r\n    const {style} = props;\r\n    const user_list = useSelector(state => state.users.user_list);\r\n    if (isEmpty(user_list))\r\n        return null;\r\n    let pie_data = [\r\n        {label: 'Reading', stat: user_list[UserList.manga_reading], color: '', hoverColor: ''},\r\n        {label: 'Completed', stat: user_list[UserList.manga_completed], color: '', hoverColor: ''},\r\n        {label: 'On Hold', stat: user_list[UserList.manga_on_hold], color: '', hoverColor: ''},\r\n        {label: 'Dropped', stat: user_list[UserList.manga_dropped], color: '', hoverColor: ''},\r\n        {label: 'Planned', stat: user_list[UserList.manga_plan_to_read], color: '', hoverColor: ''},\r\n    ];\r\n    const data = getData(pie_data);\r\n\r\n    return <div style={style} className=\"User-List-Stats-Container\">\r\n        <h2>Manga</h2>\r\n        <div className=\"pie-wrapper\">\r\n            <Doughnut height={100} width={100} data={data} options={{ legend: false}}/>\r\n        </div>\r\n        <div className=\"chip-wrapper\">\r\n            <div className=\"stat-chip\">\r\n                <Chip className=\"border-info color-info\"\r\n                      variant=\"outlined\"\r\n                      label={<>\r\n                          <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>\r\n                          <span>Reading<CountUp end={user_list[UserList.manga_reading]}/></span>\r\n                      </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-primary color-primary\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>\r\n                        <span>Completed<CountUp end={user_list[UserList.manga_completed]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-warning color-warning\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>\r\n                        <span>On Hold<CountUp end={user_list[UserList.manga_on_hold]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-danger color-danger\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>\r\n                        <span>Dropped<CountUp end={user_list[UserList.manga_dropped]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-gray color-gray\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>\r\n                        <span>Planned<CountUp end={user_list[UserList.manga_plan_to_read]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            <div className=\"stat-chip\">\r\n                <Chip\r\n                    className=\"border-white color-white\"\r\n                    variant=\"outlined\"\r\n                    label={<>\r\n                        <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>\r\n                        <span>Total<CountUp end={user_list[UserList.manga_total_entries]}/></span>\r\n                    </>}/>\r\n            </div>\r\n            {/*<div className=\"stat-chip\">*/}\r\n            {/*    <CyberLink to={USER_ANIME_STATISTICS(this.props.visited_user[User.id])}>*/}\r\n            {/*        <Button variant=\"outlined\" className=\"btn-info\">Statistics</Button>*/}\r\n            {/*    </CyberLink>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    </div>\r\n}","import {Anime, Character, Manga, Profile, User} from \"../../../models\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_MANGA, BRANCH_PEOPLE} from \"../../../globals\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nfunction getTitlesFromBranch(branch, visited_user) {\r\n    let titles = [];\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            titles = visited_user[User.profile][Profile.favorite_anime];\r\n            break;\r\n        case BRANCH_MANGA:\r\n            titles = visited_user[User.profile][Profile.favorite_manga];\r\n            break;\r\n        case BRANCH_CHARACTERS:\r\n            titles = visited_user[User.profile][Profile.favorite_characters];\r\n            break;\r\n        case BRANCH_PEOPLE:\r\n            titles = visited_user[User.profile][Profile.favorite_people];\r\n            break;\r\n        default:\r\n            return null\r\n    }\r\n    return titles\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {String} props.branch\r\n * @param {Object} props.style\r\n * @param {Number} props.limit\r\n * @param {Boolean} props.mini\r\n * @returns {JSX.Element|null}\r\n * @constructor\r\n */\r\nexport function FavoriteTitles(props) {\r\n    const {branch, style, limit, mini} = props;\r\n    const visited_user = useSelector(state => state.auth.visited_user);\r\n    let parsed = parseInt(limit);\r\n    parsed = isNaN(parsed) ? 100 : parsed;\r\n    if (isEmpty(visited_user))\r\n        return null;\r\n    const titles = getTitlesFromBranch(branch, visited_user);\r\n    return <div style={style} className=\"Quoted-Favorites-Container\">\r\n        {titles.length === 0 ? <p>You haven't added any favorite {branch} yet.</p> : titles.map((title, i) => (\r\n            i < parsed ? <div key={title['id']} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n                <TitleCard branch={branch} title={title} mini={mini}/>\r\n            </div> : null\r\n        ))}\r\n    </div>\r\n}\r\n\r\n// export function FavoriteAnime(props) {\r\n//     const {branch, style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_anime].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Anime yet.</p> : visited_user[User.profile][Profile.favorite_anime].map((title, i) => (\r\n//             i < parsed ? <div key={title[Anime.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_ANIME} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoriteManga(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_manga].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Manga yet.</p> : visited_user[User.profile][Profile.favorite_manga].map((title, i) => (\r\n//             i < parsed ? <div key={title[Manga.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_MANGA} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoriteCharacters(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_characters].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite Characters yet.</p> : visited_user[User.profile][Profile.favorite_characters].map((title, i) => (\r\n//             i < parsed ? <div key={title[Character.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_CHARACTERS} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n\r\n\r\n// export function FavoritePeople(props) {\r\n//     const {style, limit, mini} = props;\r\n//     const visited_user = useSelector(state => state.auth.visited_user);\r\n//     let parsed = parseInt(limit);\r\n//     parsed = isNaN(parsed) ? 100 : parsed;\r\n//     if (isEmpty(visited_user))\r\n//         return null;\r\n//     const total_added = visited_user[User.profile][Profile.favorite_people].length;\r\n//     return <div style={style} className=\"Quoted-Favorites-Container\">\r\n//         {total_added === 0 ? <p>You haven't added any favorite People yet.</p> : visited_user[User.profile][Profile.favorite_people].map((title, i) => (\r\n//             i < parsed ? <div key={title[Character.id]} className={mini ? 'favorites-title-card favorites-title-card-mini' : 'favorites-title-card'}>\r\n//                 <TitleCard branch={BRANCH_PEOPLE} title={title} mini={mini}/>\r\n//             </div> : null\r\n//         ))}\r\n//     </div>\r\n// }\r\n","/*\nCopyright (C) 2011 Patrick Gillespie, http://patorjk.com/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/*\n    Extendible BBCode Parser v1.0.0\n    By Patrick Gillespie (patorjk@gmail.com)\n    Website: http://patorjk.com/\n\n    This module allows you to parse BBCode and to extend to the mark-up language\n    to add in your own tags.\n*/\n\nimport ReactHtmlParser from \"react-html-parser\";\nimport React from \"react\";\nimport {AnimeSimpleChartStats, MangaSimpleChartStats} from \"../../statistics/statistics_snippets\";\nimport {isEmpty} from \"../../../functions\";\nimport {FavoriteTitles} from \"../../statistics/favorites_snippets\";\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_MANGA, BRANCH_PEOPLE} from \"../../../../globals\";\n\nvar XBBCODE = (function() {\n    \"use strict\";\n\n    // -----------------------------------------------------------------------------\n    // Set up private variables\n    // -----------------------------------------------------------------------------\n\n    var me = {},\n        urlPattern = /^(?:https?|file|c):(?:\\/{1,3}|\\\\{1})[-a-zA-Z0-9:;,@#%&()~_?\\+=\\/\\\\\\.]*$/,\n        colorNamePattern = /^(?:aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$/,\n        colorCodePattern = /^#?[a-fA-F0-9]{6}$/,\n        emailPattern = /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/,\n        fontFacePattern = /^([a-z][a-z0-9_]+|\"[a-z][a-z0-9_\\s]+\")$/i,\n        tags,\n        tagList,\n        tagsNoParseList = [],\n        bbRegExp,\n        pbbRegExp,\n        pbbRegExp2,\n        openTags,\n        closeTags;\n\n    /* -----------------------------------------------------------------------------\n     * tags\n     * This object contains a list of tags that your code will be able to understand.\n     * Each tag object has the following properties:\n     *\n     *   openTag - A function that takes in the tag's parameters (if any) and its\n     *             contents, and returns what its HTML open tag should be.\n     *             Example: [color=red]test[/color] would take in \"=red\" as a\n     *             parameter input, and \"test\" as a content input.\n     *             It should be noted that any BBCode inside of \"content\" will have\n     *             been processed by the time it enter the openTag function.\n     *\n     *   closeTag - A function that takes in the tag's parameters (if any) and its\n     *              contents, and returns what its HTML close tag should be.\n     *\n     *   displayContent - Defaults to true. If false, the content for the tag will\n     *                    not be displayed. This is useful for tags like IMG where\n     *                    its contents are actually a parameter input.\n     *\n     *   restrictChildrenTo - A list of BBCode tags which are allowed to be nested\n     *                        within this BBCode tag. If this property is omitted,\n     *                        any BBCode tag may be nested within the tag.\n     *\n     *   restrictParentsTo - A list of BBCode tags which are allowed to be parents of\n     *                       this BBCode tag. If this property is omitted, any BBCode\n     *                       tag may be a parent of the tag.\n     *\n     *   noParse - true or false. If true, none of the content WITHIN this tag will be\n     *             parsed by the XBBCode parser.\n     *\n     *\n     *\n     * LIMITIONS on adding NEW TAGS:\n     *  - Tag names should be alphanumeric (including underscores) and all tags should have an opening tag\n     *    and a closing tag.\n     *    The [*] tag is an exception because it was already a standard\n     *    bbcode tag. Technecially tags don't *have* to be alphanumeric, but since\n     *    regular expressions are used to parse the text, if you use a non-alphanumeric\n     *    tag names, just make sure the tag name gets escaped properly (if needed).\n     * --------------------------------------------------------------------------- */\n\n    tags = {\n        \"b\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-b\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        /*\n            This tag does nothing and is here mostly to be used as a classification for\n            the bbcode input when evaluating parent-child tag relationships\n        */\n        \"bbcode\": {\n            openTag: function(params,content) {\n                return '';\n            },\n            closeTag: function(params,content) {\n                return '';\n            }\n        },\n        \"center\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-center\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"code\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-code\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            },\n            noParse: true\n        },\n        \"color\": {\n            openTag: function(params,content) {\n                params = params || '';\n                \n                var colorCode = (params.substr(1)).toLowerCase() || \"black\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"black\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n                return '<span style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"email\": {\n            openTag: function(params,content) {\n\n                var myEmail;\n\n                if (!params) {\n                    myEmail = content.replace(/<.*?>/g,\"\");\n                } else {\n                    myEmail = params.substr(1);\n                }\n\n                emailPattern.lastIndex = 0;\n                if ( !emailPattern.test( myEmail ) ) {\n                    return '<a>';\n                }\n\n                return '<a href=\"mailto:' + myEmail + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</a>';\n            }\n        },\n        \"face\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var faceCode = params.substr(1) || \"inherit\";\n                fontFacePattern.lastIndex = 0;\n                if ( !fontFacePattern.test( faceCode ) ) {\n                        faceCode = \"inherit\";\n                }\n                return '<span style=\"font-family:' + faceCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n\n        \"font\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var faceCode = params.substr(1) || \"inherit\";\n                fontFacePattern.lastIndex = 0;\n                if ( !fontFacePattern.test( faceCode ) ) {\n                        faceCode = \"inherit\";\n                }\n                return '<span style=\"font-family:' + faceCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"i\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-i\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"img\": {\n            openTag: function(params,content) {\n\n                var myUrl = content;\n\n                urlPattern.lastIndex = 0;\n                if ( !urlPattern.test( myUrl ) ) {\n                    myUrl = \"\";\n                }\n\n                return '<img src=\"' + myUrl + '\" />';\n            },\n            closeTag: function(params,content) {\n                return '';\n            },\n            displayContent: false\n        },\n        \"justify\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-justify\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"large\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var colorCode = params.substr(1) || \"inherit\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"inherit\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n\n                return '<span class=\"xbbcode-size-36\" style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"left\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-left\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"li\": {\n            openTag: function(params,content) {\n                return \"<li>\";\n            },\n            closeTag: function(params,content) {\n                return \"</li>\";\n            },\n            restrictParentsTo: [\"list\",\"ul\",\"ol\"]\n        },\n        \"list\": {\n            openTag: function(params,content) {\n                return '<ul>';\n            },\n            closeTag: function(params,content) {\n                return '</ul>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"noparse\": {\n            openTag: function(params,content) {\n                return '';\n            },\n            closeTag: function(params,content) {\n                return '';\n            },\n            noParse: true\n        },\n        \"ol\": {\n            openTag: function(params,content) {\n                return '<ol>';\n            },\n            closeTag: function(params,content) {\n                return '</ol>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"php\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-code\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            },\n            noParse: true\n        },\n        \"quote\": {\n            openTag: function(params,content) {\n                return '<blockquote class=\"xbbcode-blockquote\">';\n            },\n            closeTag: function(params,content) {\n                return '</blockquote>';\n            }\n        },\n        \"right\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-right\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"s\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-s\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"size\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var mySize = parseInt(params.substr(1),10) || 0;\n                if (mySize < 4 || mySize > 40) {\n                    mySize = 14;\n                }\n\n                return '<span class=\"xbbcode-size-' + mySize + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"small\": {\n            openTag: function(params,content) {\n                params = params || '';\n\n                var colorCode = params.substr(1) || \"inherit\";\n                colorNamePattern.lastIndex = 0;\n                colorCodePattern.lastIndex = 0;\n                if ( !colorNamePattern.test( colorCode ) ) {\n                    if ( !colorCodePattern.test( colorCode ) ) {\n                        colorCode = \"inherit\";\n                    } else {\n                        if (colorCode.substr(0,1) !== \"#\") {\n                            colorCode = \"#\" + colorCode;\n                        }\n                    }\n                }\n\n                return '<span class=\"xbbcode-size-10\" style=\"color:' + colorCode + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n\n        \"sub\": {\n            openTag: function(params,content) {\n                return '<sub>';\n            },\n            closeTag: function(params,content) {\n                return '</sub>';\n            }\n        },\n        \"sup\": {\n            openTag: function(params,content) {\n                return '<sup>';\n            },\n            closeTag: function(params,content) {\n                return '</sup>';\n            }\n        },\n\n        \"table\": {\n            openTag: function(params,content) {\n                return '<table class=\"xbbcode-table\">';\n            },\n            closeTag: function(params,content) {\n                return '</table>';\n            },\n            restrictChildrenTo: [\"tbody\",\"thead\", \"tfoot\", \"tr\"]\n        },\n        \"tbody\": {\n            openTag: function(params,content) {\n                return '<tbody>';\n            },\n            closeTag: function(params,content) {\n                return '</tbody>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"tfoot\": {\n            openTag: function(params,content) {\n                return '<tfoot>';\n            },\n            closeTag: function(params,content) {\n                return '</tfoot>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"thead\": {\n            openTag: function(params,content) {\n                return '<thead class=\"xbbcode-thead\">';\n            },\n            closeTag: function(params,content) {\n                return '</thead>';\n            },\n            restrictChildrenTo: [\"tr\"],\n            restrictParentsTo: [\"table\"]\n        },\n        \"td\": {\n            openTag: function(params,content) {\n                return '<td class=\"xbbcode-td\">';\n            },\n            closeTag: function(params,content) {\n                return '</td>';\n            },\n            restrictParentsTo: [\"tr\"]\n        },\n        \"th\": {\n            openTag: function(params,content) {\n                return '<th class=\"xbbcode-th\">';\n            },\n            closeTag: function(params,content) {\n                return '</th>';\n            },\n            restrictParentsTo: [\"tr\"]\n        },\n        \"tr\": {\n            openTag: function(params,content) {\n                return '<tr class=\"xbbcode-tr\">';\n            },\n            closeTag: function(params,content) {\n                return '</tr>';\n            },\n            restrictChildrenTo: [\"td\",\"th\"],\n            restrictParentsTo: [\"table\",\"tbody\",\"tfoot\",\"thead\"]\n        },\n        \"u\": {\n            openTag: function(params,content) {\n                return '<span class=\"xbbcode-u\">';\n            },\n            closeTag: function(params,content) {\n                return '</span>';\n            }\n        },\n        \"ul\": {\n            openTag: function(params,content) {\n                return '<ul>';\n            },\n            closeTag: function(params,content) {\n                return '</ul>';\n            },\n            restrictChildrenTo: [\"*\", \"li\"]\n        },\n        \"url\": {\n            openTag: function(params,content) {\n\n                var myUrl;\n\n                if (!params) {\n                    myUrl = content.replace(/<.*?>/g,\"\");\n                } else {\n                    myUrl = params.substr(1);\n                }\n\n                urlPattern.lastIndex = 0;\n                if ( !urlPattern.test( myUrl ) ) {\n                    myUrl = \"#\";\n                }\n\n                return '<a href=\"' + myUrl + '\">';\n            },\n            closeTag: function(params,content) {\n                return '</a>';\n            }\n        },\n        /*\n            The [*] tag is special since the user does not define a closing [/*] tag when writing their bbcode.\n            Instead this module parses the code and adds the closing [/*] tag in for them. None of the tags you\n            add will act like this and this tag is an exception to the others.\n        */\n        \"*\": {\n            openTag: function(params,content) {\n                return \"<li>\";\n            },\n            closeTag: function(params,content) {\n                return \"</li>\";\n            },\n            restrictParentsTo: [\"list\",\"ul\",\"ol\"]\n        }\n    };\n\n    // create tag list and lookup fields\n    function initTags() {\n        tagList = [];\n        var prop,\n            ii,\n            len;\n        for (prop in tags) {\n            if (tags.hasOwnProperty(prop)) {\n                if (prop === \"*\") {\n                    tagList.push(\"\\\\\" + prop);\n                } else {\n                    tagList.push(prop);\n                    if ( tags[prop].noParse ) {\n                        tagsNoParseList.push(prop);\n                    }\n                }\n\n                tags[prop].validChildLookup = {};\n                tags[prop].validParentLookup = {};\n                tags[prop].restrictParentsTo = tags[prop].restrictParentsTo || [];\n                tags[prop].restrictChildrenTo = tags[prop].restrictChildrenTo || [];\n\n                len = tags[prop].restrictChildrenTo.length;\n                for (ii = 0; ii < len; ii++) {\n                    tags[prop].validChildLookup[ tags[prop].restrictChildrenTo[ii] ] = true;\n                }\n                len = tags[prop].restrictParentsTo.length;\n                for (ii = 0; ii < len; ii++) {\n                    tags[prop].validParentLookup[ tags[prop].restrictParentsTo[ii] ] = true;\n                }\n            }\n        }\n\n        bbRegExp = new RegExp(\"<bbcl=([0-9]+) (\" + tagList.join(\"|\") + \")([ =][^>]*?)?>((?:.|[\\\\r\\\\n])*?)<bbcl=\\\\1 /\\\\2>\", \"gi\");\n        pbbRegExp = new RegExp(\"\\\\[(\" + tagList.join(\"|\") + \")([ =][^\\\\]]*?)?\\\\]([^\\\\[]*?)\\\\[/\\\\1\\\\]\", \"gi\");\n        pbbRegExp2 = new RegExp(\"\\\\[(\" + tagsNoParseList.join(\"|\") + \")([ =][^\\\\]]*?)?\\\\]([\\\\s\\\\S]*?)\\\\[/\\\\1\\\\]\", \"gi\");\n\n        // create the regex for escaping ['s that aren't apart of tags\n        (function() {\n            var closeTagList = [];\n            for (var ii = 0; ii < tagList.length; ii++) {\n                if ( tagList[ii] !== \"\\\\*\" ) { // the * tag doesn't have an offical closing tag\n                    closeTagList.push ( \"/\" + tagList[ii] );\n                }\n            }\n\n            openTags = new RegExp(\"(\\\\[)((?:\" + tagList.join(\"|\") + \")(?:[ =][^\\\\]]*?)?)(\\\\])\", \"gi\");\n            closeTags = new RegExp(\"(\\\\[)(\" + closeTagList.join(\"|\") + \")(\\\\])\", \"gi\");\n        })();\n\n    }\n    initTags();\n\n    // -----------------------------------------------------------------------------\n    // private functions\n    // -----------------------------------------------------------------------------\n\n    function checkParentChildRestrictions(parentTag, bbcode, bbcodeLevel, tagName, tagParams, tagContents, errQueue) {\n\n        errQueue = errQueue || [];\n        bbcodeLevel++;\n\n        // get a list of all of the child tags to this tag\n        var reTagNames = new RegExp(\"(<bbcl=\" + bbcodeLevel + \" )(\" + tagList.join(\"|\") + \")([ =>])\",\"gi\"),\n            reTagNamesParts = new RegExp(\"(<bbcl=\" + bbcodeLevel + \" )(\" + tagList.join(\"|\") + \")([ =>])\",\"i\"),\n            matchingTags = tagContents.match(reTagNames) || [],\n            cInfo,\n            errStr,\n            ii,\n            childTag,\n            pInfo = tags[parentTag] || {};\n\n        reTagNames.lastIndex = 0;\n\n        if (!matchingTags) {\n            tagContents = \"\";\n        }\n\n        for (ii = 0; ii < matchingTags.length; ii++) {\n            reTagNamesParts.lastIndex = 0;\n            childTag = (matchingTags[ii].match(reTagNamesParts))[2].toLowerCase();\n\n            if ( pInfo && pInfo.restrictChildrenTo && pInfo.restrictChildrenTo.length > 0 ) {\n                if ( !pInfo.validChildLookup[childTag] ) {\n                    errStr = \"The tag \\\"\" + childTag + \"\\\" is not allowed as a child of the tag \\\"\" + parentTag + \"\\\".\";\n                    errQueue.push(errStr);\n                }\n            }\n            cInfo = tags[childTag] || {};\n            if ( cInfo.restrictParentsTo.length > 0 ) {\n                if ( !cInfo.validParentLookup[parentTag] ) {\n                    errStr = \"The tag \\\"\" + parentTag + \"\\\" is not allowed as a parent of the tag \\\"\" + childTag + \"\\\".\";\n                    errQueue.push(errStr);\n                }\n            }\n\n        }\n\n        tagContents = tagContents.replace(bbRegExp, function(matchStr, bbcodeLevel, tagName, tagParams, tagContents ) {\n            errQueue = checkParentChildRestrictions(tagName.toLowerCase(), matchStr, bbcodeLevel, tagName, tagParams, tagContents, errQueue);\n            return matchStr;\n        });\n        return errQueue;\n    }\n\n    /*\n        This function updates or adds a piece of metadata to each tag called \"bbcl\" which\n        indicates how deeply nested a particular tag was in the bbcode. This property is removed\n        from the HTML code tags at the end of the processing.\n    */\n    function updateTagDepths(tagContents) {\n        tagContents = tagContents.replace(/\\<([^\\>][^\\>]*?)\\>/gi, function(matchStr, subMatchStr) {\n            var bbCodeLevel = subMatchStr.match(/^bbcl=([0-9]+) /);\n            if (bbCodeLevel === null) {\n                return \"<bbcl=0 \" + subMatchStr + \">\";\n            } else {\n                return \"<\" + subMatchStr.replace(/^(bbcl=)([0-9]+)/, function(matchStr, m1, m2) {\n                    return m1 + (parseInt(m2, 10) + 1);\n                }) + \">\";\n            }\n        });\n        return tagContents;\n    }\n\n    /*\n        This function removes the metadata added by the updateTagDepths function\n    */\n    function unprocess(tagContent) {\n        return tagContent.replace(/<bbcl=[0-9]+ \\/\\*>/gi,\"\").replace(/<bbcl=[0-9]+ /gi,\"&#91;\").replace(/>/gi,\"&#93;\");\n    }\n\n    var replaceFunct = function(matchStr, bbcodeLevel, tagName, tagParams, tagContents) {\n\n        tagName = tagName.toLowerCase();\n\n        var processedContent = tags[tagName].noParse ? unprocess(tagContents) : tagContents.replace(bbRegExp, replaceFunct),\n            openTag = tags[tagName].openTag(tagParams,processedContent),\n            closeTag = tags[tagName].closeTag(tagParams,processedContent);\n\n        if ( tags[tagName].displayContent === false) {\n            processedContent = \"\";\n        }\n\n        return openTag + processedContent + closeTag;\n    };\n\n    function parse(config) {\n        var output = config.text;\n        output = output.replace(bbRegExp, replaceFunct);\n        return output;\n    }\n\n    /*\n        The star tag [*] is special in that it does not use a closing tag. Since this parser requires that tags to have a closing\n        tag, we must pre-process the input and add in closing tags [/*] for the star tag.\n        We have a little levaridge in that we know the text we're processing wont contain the <> characters (they have been\n        changed into their HTML entity form to prevent XSS and code injection), so we can use those characters as markers to\n        help us define boundaries and figure out where to place the [/*] tags.\n    */\n    function fixStarTag(text) {\n        text = text.replace(/\\[(?!\\*[ =\\]]|list([ =][^\\]]*)?\\]|\\/list[\\]])/ig, \"<\");\n        text = text.replace(/\\[(?=list([ =][^\\]]*)?\\]|\\/list[\\]])/ig, \">\");\n\n        while (text !== (text = text.replace(/>list([ =][^\\]]*)?\\]([^>]*?)(>\\/list])/gi, function(matchStr,contents,endTag) {\n\n            var innerListTxt = matchStr;\n            while (innerListTxt !== (innerListTxt = innerListTxt.replace(/\\[\\*\\]([^\\[]*?)(\\[\\*\\]|>\\/list])/i, function(matchStr,contents,endTag) {\n                if (endTag.toLowerCase() === \">/list]\") {\n                    endTag = \"</*]</list]\";\n                } else {\n                    endTag = \"</*][*]\";\n                }\n                return \"<*]\" + contents + endTag;\n            })));\n\n            innerListTxt = innerListTxt.replace(/>/g, \"<\");\n            return innerListTxt;\n        })));\n\n        // add ['s for our tags back in\n        text = text.replace(/</g, \"[\");\n        return text;\n    }\n\n    function addBbcodeLevels(text) {\n        while ( text !== (text = text.replace(pbbRegExp, function(matchStr, tagName, tagParams, tagContents) {\n            matchStr = matchStr.replace(/\\[/g, \"<\");\n            matchStr = matchStr.replace(/\\]/g, \">\");\n            return updateTagDepths(matchStr);\n        })) );\n        return text;\n    }\n\n    // -----------------------------------------------------------------------------\n    // public functions\n    // -----------------------------------------------------------------------------\n\n    // API, Expose all available tags\n    me.tags = function() {\n        return tags;\n    };\n\n    // API\n    me.addTags = function(newtags) {\n        var tag;\n        for (tag in newtags) {\n            tags[tag] = newtags[tag];\n        }\n        initTags();\n    };\n\n    me.process = function(config) {\n\n        var ret = {html: \"\", error: false},\n            errQueue = [];\n\n        config.text = config.text.replace(/</g, \"&lt;\"); // escape HTML tag brackets\n        config.text = config.text.replace(/>/g, \"&gt;\"); // escape HTML tag brackets\n\n        config.text = config.text.replace(openTags, function(matchStr, openB, contents, closeB) {\n            return \"<\" + contents + \">\";\n        });\n        config.text = config.text.replace(closeTags, function(matchStr, openB, contents, closeB) {\n            return \"<\" + contents + \">\";\n        });\n\n        config.text = config.text.replace(/\\[/g, \"&#91;\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/\\]/g, \"&#93;\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/</g, \"[\"); // escape ['s that aren't apart of tags\n        config.text = config.text.replace(/>/g, \"]\"); // escape ['s that aren't apart of tags\n\n        // process tags that don't have their content parsed\n        while ( config.text !== (config.text = config.text.replace(pbbRegExp2, function(matchStr, tagName, tagParams, tagContents) {\n            tagContents = tagContents.replace(/\\[/g, \"&#91;\");\n            tagContents = tagContents.replace(/\\]/g, \"&#93;\");\n            tagParams = tagParams || \"\";\n            tagContents = tagContents || \"\";\n            return \"[\" + tagName + tagParams + \"]\" + tagContents + \"[/\" + tagName + \"]\";\n        })) );\n\n        config.text = fixStarTag(config.text); // add in closing tags for the [*] tag\n        config.text = addBbcodeLevels(config.text); // add in level metadata\n\n        errQueue = checkParentChildRestrictions(\"bbcode\", config.text, -1, \"\", \"\", config.text);\n\n        ret.html = parse(config);\n\n        if ( ret.html.indexOf(\"[\") !== -1 || ret.html.indexOf(\"]\") !== -1) {\n            errQueue.push(\"Some tags appear to be misaligned.\");\n        }\n\n        if (config.removeMisalignedTags) {\n            ret.html = ret.html.replace(/\\[.*?\\]/g,\"\");\n        }\n        if (config.addInLineBreaks) {\n            ret.html = '<div style=\"white-space:pre-wrap;\">' + ret.html + '</div>';\n        }\n\n\t\tif (!config.escapeHtml) {\n\t\t\tret.html = ret.html.replace(\"&#91;\", \"[\"); // put ['s back in\n        \tret.html = ret.html.replace(\"&#93;\", \"]\"); // put ['s back in\n\t\t}\n\n\t\tret.html = ReactHtmlParser(ret.html);\n        // console.log('parsed.html', ret.html);\n\n        for (let x = 0; x < ret.html.length; x++) {\n            // console.log('props:', ret.html[x]['props']);\n            if (ret.html[x]['props'] && ret.html[x]['props']['children'] && ret.html[x]['props']['children'].length > 0) {\n                for (let y = 0; y < ret.html[x]['props']['children'].length; y++) {\n                    // console.log('children:', ret.html[x]['props']['children'][y]);\n                    if (ret.html[x]['props']['children'][y]['props']) {\n                        let style = ret.html[x]['props']['children'][y]['props']['style'];\n                        let limit = ret.html[x]['props']['children'][y]['props']['limit'];\n                        if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'AnimeSimpleChartStats') {\n                            ret.html[x]['props']['children'][y] = <AnimeSimpleChartStats style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'MangaSimpleChartStats') {\n                            ret.html[x]['props']['children'][y] = <MangaSimpleChartStats style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteAnime') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_ANIME} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteAnimeSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_ANIME} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteManga') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_MANGA} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteMangaSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_MANGA} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteCharacters') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_CHARACTERS} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoriteCharactersSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_CHARACTERS} limit={limit} mini={true} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoritePeople') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_PEOPLE} limit={limit} style={style}/>;\n                        } else if (ret.html[x]['props']['children'][y]['props']['id'] && ret.html[x]['props']['children'][y]['props']['id'] === 'UserFavoritePeopleSmall') {\n                            ret.html[x]['props']['children'][y] = <FavoriteTitles branch={BRANCH_PEOPLE} limit={limit} mini={true} style={style}/>;\n                        }\n                    }\n                }\n            }\n        }\n\n        ret.error = errQueue.length !== 0;\n        ret.errorQueue = errQueue;\n\n        return ret;\n    };\n\n    return me;\n})();\n\nexport default XBBCODE\n\n// for node\n// if (typeof module !== \"undefined\") {\n//     module.exports = XBBCODE;\n// }\n","import '../../../../../node_modules/xbbcode-parser/xbbcode.css'\r\n// import XBBCODE from 'xbbcode-parser'\r\nimport XBBCODE from './xbbcode'\r\nimport React from \"react\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst URL_PATTERN = /^(?:https?|file|c):(?:\\/{1,3}|\\\\{1})[-a-zA-Z0-9:;,@#%&()~_?\\+=\\/\\\\\\.]*$/;\r\n// [dimg]https://i.imgur.com/qg0PysC.jpg[/dimg]\r\n\r\nfunction parseWidthHeightFromParams(params) {\r\n    let width = null;\r\n    let height = null;\r\n    let w_unit = 'px';\r\n    let h_unit = 'px';\r\n    let style = '';\r\n\r\n    if (params && params.indexOf('width=') >= 0) {\r\n        let parse_width = params.split('width=')[1];\r\n        parse_width = parse_width.split('height=')[0];\r\n        if (parse_width.indexOf('%') >= 0)\r\n            if (parse_width)\r\n                w_unit = '%';\r\n        width = parseInt(parse_width);\r\n        if (isNaN(width))\r\n            width = null\r\n    }\r\n    if (params && params.indexOf('height=') >= 0) {\r\n        let parse_height = params.split('height=')[1];\r\n        parse_height = parse_height.split('width=')[0];\r\n        if (parse_height.indexOf('%') >= 0)\r\n            h_unit = '%';\r\n        height = parseInt(parse_height);\r\n        if (isNaN(height))\r\n            height = null\r\n    }\r\n\r\n    if (width)\r\n        style = `width: ${width}${w_unit};`;\r\n    if (height)\r\n        style = `${style} height: ${height}${h_unit};`;\r\n\r\n    return style\r\n}\r\n\r\n\r\nfunction parseLimitFromParams(params) {\r\n    let limit = null;\r\n    if (params && params.indexOf('limit=') >= 0) {\r\n        let parse_limit = params.split('limit=')[1];\r\n        limit = parseInt(parse_limit);\r\n        if (isNaN(limit))\r\n            limit = null\r\n    }\r\n    return limit\r\n}\r\n\r\n\r\nconst img = {\r\n    openTag: function (params, content) {\r\n        let url = content;\r\n        URL_PATTERN.lastIndex = 0;\r\n        if (!URL_PATTERN.test(url))\r\n            url = '';\r\n        const style = parseWidthHeightFromParams(params);\r\n\r\n        if (style.length > 0)\r\n            return `<img style=\"${style}\" src=\"${url}\"/>`;\r\n        return `<img src=\"${url}\"/>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\n\r\nconst paragraph = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n\r\n        if (style.length > 0)\r\n            return `<p style=\"${style}\">`;\r\n        return `<p>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return `</p>`;\r\n    },\r\n};\r\n\r\nconst br = {\r\n    openTag: function (params, content) {\r\n        return `<br/>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst AnimeStats = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n        if (style.length > 0)\r\n            return `<span id=\"AnimeSimpleChartStats\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"AnimeSimpleChartStats\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst MangaStats = {\r\n    openTag: function (params, content) {\r\n        const style = parseWidthHeightFromParams(params);\r\n        if (style.length > 0)\r\n            return `<span id=\"MangaSimpleChartStats\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"MangaSimpleChartStats\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteAnime = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteAnime';\r\n        if (mini)\r\n            component = 'UserFavoriteAnimeSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteManga = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteManga';\r\n        if (mini)\r\n            component = 'UserFavoriteMangaSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\"style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoriteCharacters = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoriteCharacters';\r\n        if (mini)\r\n            component = 'UserFavoriteCharactersSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst FavoritePeople = {\r\n    openTag: function (params, content) {\r\n        let style = parseWidthHeightFromParams(params);\r\n        let limit = parseLimitFromParams(params);\r\n        const center = params && params.indexOf('center=true') >= 0;\r\n        const mini = params && params.indexOf('small=true') >= 0;\r\n        let component = 'UserFavoritePeople';\r\n        if (mini)\r\n            component = 'UserFavoritePeopleSmall';\r\n        if (center)\r\n            style += ' text-align: center;';\r\n        if (style.length > 0)\r\n            return `<span id=\"${component}\" limit=\"${limit}\" style=\"${style}\"> </span>`;\r\n        return `<span id=\"${component}\" limit=\"${limit}\"> </span>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst new_tags = {\r\n    'br': br,\r\n    'p': paragraph,\r\n    'img': img,\r\n    'animestats': AnimeStats,\r\n    'mangastats': MangaStats,\r\n    'favoriteanime': FavoriteAnime,\r\n    'favoritemanga': FavoriteManga,\r\n    'favoritecharacters': FavoriteCharacters,\r\n    'favoritepeople': FavoritePeople,\r\n};\r\n\r\nXBBCODE.addTags(new_tags);\r\n\r\n\r\nexport function cyberBBCodeParser(bbcode_string) {\r\n    try {\r\n        let result = XBBCODE.process({\r\n            text: bbcode_string,\r\n            removeMisalignedTags: false,\r\n            addInLineBreaks: true\r\n        });\r\n\r\n        console.log('resul1t', result);\r\n        return result.html;\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {cyberBBCodeParser} from \"../../settings/bbcode_editor/parser\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\nimport {BBCODE_EDITOR} from \"../../../../urls\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTools} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass AboutTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleEditorButton = this.toggleEditorButton.bind(this);\r\n        this.state = {show_editor_button: false};\r\n    }\r\n\r\n    toggleEditorButton(value) {\r\n        this.setState({show_editor_button: value})\r\n    }\r\n\r\n    render() {\r\n        let background;\r\n        if (this.props.visited_user[User.profile][Profile.about_section_background_style])\r\n            background = JSON.parse(this.props.visited_user[User.profile][Profile.about_section_background_style]);\r\n\r\n        let style = null;\r\n        if (background) {\r\n            style = {\r\n                 backgroundColor: `#${background.background_color['hex']}`,\r\n                 backgroundImage: `url(\"${background.url}\")`,\r\n                 backgroundRepeat: background.repeat,\r\n                 backgroundSize: background.size,\r\n                 backgroundPosition: `${background.position_1} ${background.position_2}`,\r\n            };\r\n            if (background.position_x)\r\n                style.backgroundPositionX = `${background.position_x}px`;\r\n            if (background.position_y)\r\n                style.backgroundPositionY = `${background.position_y}px`;\r\n        }\r\n\r\n        let owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            owner = true;\r\n\r\n        return <div onMouseOver={() => {this.toggleEditorButton(true)}}\r\n                    onMouseEnter={() => {this.toggleEditorButton(true)}}\r\n                    onMouseLeave={() => {this.toggleEditorButton(false)}}\r\n        >\r\n            {owner ? <div className=\"bbcode-editor-button\">\r\n                {this.state.show_editor_button ? <CyberLink to={BBCODE_EDITOR}>\r\n                    <CyberButton title=\"BBCode Editor\" variant=\"contained\" classNames=\"btn-contained-primary\">\r\n                        <FontAwesomeIcon icon={faTools}/>\r\n                    </CyberButton>\r\n                </CyberLink> : null}\r\n            </div> : null}\r\n            <div id=\"BBCode-Editor\" className=\"bbcode-container\" style={style}>\r\n                {cyberBBCodeParser(this.props.visited_user[User.profile][Profile.about_section_bbcode])}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AboutTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Chart from 'chart.js';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nimport {User, UserList} from \"../../../../models\";\r\nimport {CyberLink} from \"../../../layout/common/common\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faStar} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {USER_ANIME_HISTORY} from \"../../../../urls\";\r\nimport {FavoriteTitles} from \"../../statistics/favorites_snippets\";\r\nimport {AnimeSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\n\r\n\r\nfunction getMinsPerDay(date, total_mins) {\r\n    const date1 = new Date(date);\r\n    const date2 = new Date();\r\n    const time_diff = Math.abs(date2 - date1);\r\n    const total_days = Math.ceil(time_diff / (1000 * 60 * 60 * 24));\r\n    return Math.round(total_mins / total_days)\r\n}\r\n\r\n\r\nclass AnimeTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    render() {\r\n        Chart.defaults.global.legend.display = false;\r\n\r\n        let raw = [\r\n            {label: 'Watching', stat: this.props.user_list[UserList.anime_watching], color: '', hoverColor: ''},\r\n            {label: 'Completed', stat: this.props.user_list[UserList.anime_completed], color: '', hoverColor: ''},\r\n            {label: 'On Hold', stat: this.props.user_list[UserList.anime_on_hold], color: '', hoverColor: ''},\r\n            {label: 'Dropped', stat: this.props.user_list[UserList.anime_dropped], color: '', hoverColor: ''},\r\n            {label: 'Planned', stat: this.props.user_list[UserList.anime_plan_to_watch], color: '', hoverColor: ''},\r\n        ];\r\n\r\n        let stat_data = [];\r\n        let labels = [];\r\n        for (let x = 0; x < raw.length; x++) {\r\n            stat_data.push(raw[x].stat);\r\n            labels.push(raw[x].label);\r\n        }\r\n\r\n        let data = {\r\n            labels: labels,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            datasets: [{\r\n                data: stat_data,\r\n                backgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.4)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.4)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.5)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.2)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.4)',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.8)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.8)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.8)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.8)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.3)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.3)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.3)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.3)',\r\n                ],\r\n                hoverBorderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 1)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 1)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 1)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 1)',\r\n                ],\r\n                // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n                // hoverBorderColor: '#156bb7',\r\n                borderWidth: 0\r\n            }]\r\n        };\r\n\r\n\r\n        const line_data = {\r\n            labels: ['1', '2', '3', '4', '5', '6', '7'],\r\n            datasets: [\r\n                {\r\n                    label: 'Episodes',\r\n                    data: [12, 17, 9, 6, 8, 13, 14],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ],\r\n        };\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Grid className=\"User-List-Stats-Container\" container>\r\n                <Grid item xs={5}>\r\n                    <AnimeSimpleChartStats/>\r\n                </Grid>\r\n\r\n                <Grid item xs={4} className=\"pie-container\">\r\n                    <h2>Recent</h2>\r\n                    <div className=\"\">\r\n                        <Line data={line_data} height={220} options={options}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"recent-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStar}/>\r\n                                    <span>{this.props.user_list[UserList.anime_mean_score].toFixed(2)}</span>\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={getMinsPerDay(\r\n                                        this.props.user_list[UserList.anime_started_watching_on],\r\n                                        this.props.user_list[UserList.anime_mins_spent_watching])}/>minutes per day\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={this.props.user_list[UserList.anime_mins_spent_watching]}/>\r\n                                    total minutes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.anime_episodes_watched]}/>\r\n                                episodes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <span>\r\n                                        Started Watching on <span><Moment format={'Do MMM YYYY'}\r\n                                                                          date={this.props.user_list[UserList.anime_started_watching_on]}/></span>\r\n                                    </span>\r\n                                </>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_ANIME_HISTORY(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">History</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"favorites-container\">\r\n                    <h2>Favorites</h2>\r\n                    <FavoriteTitles branch={BRANCH_ANIME}/>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    user_list: state.users.user_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Chart from 'chart.js';\r\nimport {Line, Doughnut} from 'react-chartjs-2';\r\n\r\nimport {Character, Profile, User, UserList} from \"../../../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faCircle, faPause, faPlay, faStar, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {faCalendarAlt} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_MANGA,\r\n    COLOR_DANGER,\r\n    COLOR_GRAY,\r\n    COLOR_INFO,\r\n    COLOR_PRIMARY,\r\n    COLOR_WARNING\r\n} from \"../../../../globals\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {USER_ANIME_HISTORY, USER_ANIME_STATISTICS, USER_MANGA_HISTORY} from \"../../../../urls\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport {MangaSimpleChartStats} from \"../../statistics/statistics_snippets\";\r\n\r\n\r\nclass MangaTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    render() {\r\n        Chart.defaults.global.legend.display = false;\r\n\r\n        let raw = [\r\n            {label: 'Reading', stat: this.props.user_list[UserList.manga_reading], color: '', hoverColor: ''},\r\n            {label: 'Completed', stat: this.props.user_list[UserList.manga_completed], color: '', hoverColor: ''},\r\n            {label: 'On Hold', stat: this.props.user_list[UserList.manga_on_hold], color: '', hoverColor: ''},\r\n            {label: 'Dropped', stat: this.props.user_list[UserList.manga_dropped], color: '', hoverColor: ''},\r\n            {label: 'Planned', stat: this.props.user_list[UserList.manga_plan_to_read], color: '', hoverColor: ''},\r\n        ];\r\n\r\n        let stat_data = [];\r\n        let labels = [];\r\n        for (let x = 0; x < raw.length; x++) {\r\n            stat_data.push(raw[x].stat);\r\n            labels.push(raw[x].label);\r\n        }\r\n\r\n        let data = {\r\n            labels: labels,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            datasets: [{\r\n                data: stat_data,\r\n                backgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.4)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.4)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.5)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.2)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.4)',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.8)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.8)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.8)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.8)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.3)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.3)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.3)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.3)',\r\n                ],\r\n                hoverBorderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 1)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 1)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 1)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 1)',\r\n                ],\r\n                // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n                // hoverBorderColor: '#156bb7',\r\n                borderWidth: 0\r\n            }]\r\n        };\r\n\r\n\r\n        const line_data = {\r\n            labels: ['1', '2', '3', '4', '5', '6', '7'],\r\n            datasets: [\r\n                {\r\n                    label: 'Chapters',\r\n                    data: [12, 17, 9, 6, 8, 13, 14],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ],\r\n        };\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={5}>\r\n                    <MangaSimpleChartStats/>\r\n                </Grid>\r\n                {/*<Grid item xs={5}>*/}\r\n                {/*    <h2>Stats</h2>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={7}>*/}\r\n                {/*    <h2>Recent</h2>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={3} className=\"pie-container\">*/}\r\n                {/*    <div className=\"pie-wrapper\">*/}\r\n                {/*        <Doughnut height={100} width={100} data={data}/>*/}\r\n                {/*    </div>*/}\r\n                {/*</Grid>*/}\r\n                {/*<Grid item xs={2} className=\"User-List-Stats-Container\">*/}\r\n                {/*    <Grid container*/}\r\n                {/*          direction=\"column\"*/}\r\n                {/*          justify=\"center\"*/}\r\n                {/*          alignItems=\"flex-start\"*/}\r\n                {/*          className=\"chip-container\"*/}\r\n                {/*    >*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip className=\"border-info color-info\"*/}\r\n                {/*                  variant=\"outlined\"*/}\r\n                {/*                  label={<>*/}\r\n                {/*                      <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>*/}\r\n                {/*                      <span>Reading*/}\r\n                {/*                          <CountUp end={this.props.user_list[UserList.manga_reading]}/>*/}\r\n                {/*                      </span>*/}\r\n                {/*                  </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-primary color-primary\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>*/}\r\n                {/*                    <span>Completed*/}\r\n                {/*                        <CountUp end={this.props.user_list[UserList.manga_completed]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-warning color-warning\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>*/}\r\n                {/*                    <span>On Hold<CountUp end={this.props.user_list[UserList.manga_on_hold]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-danger color-danger\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>*/}\r\n                {/*                    <span>Dropped<CountUp end={this.props.user_list[UserList.manga_dropped]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-gray color-gray\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>*/}\r\n                {/*                    <span>Planned<CountUp end={this.props.user_list[UserList.manga_plan_to_read]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*        <div className=\"stat-chip\">*/}\r\n                {/*            <Chip*/}\r\n                {/*                className=\"border-white color-white\"*/}\r\n                {/*                variant=\"outlined\"*/}\r\n                {/*                label={<>*/}\r\n                {/*                    <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>*/}\r\n                {/*                    <span>Total<CountUp end={this.props.user_list[UserList.manga_total_entries]}/>*/}\r\n                {/*                    </span>*/}\r\n                {/*                </>}/>*/}\r\n                {/*        </div>*/}\r\n                {/*    </Grid>*/}\r\n                {/*</Grid>*/}\r\n\r\n                <Grid item xs={4} className=\"pie-container\">\r\n                    <h2>Recent</h2>\r\n                    <div className=\"\">\r\n                        <Line data={line_data} height={220} options={options}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"recent-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStar}/>\r\n                                    <span>{this.props.user_list[UserList.manga_mean_score].toFixed(2)}</span>\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={this.props.user_list[UserList.manga_mins_spent_reading]}/>\r\n                                    total minutes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.manga_volumes_read]}/>\r\n                                volumes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.manga_chapters_read]}/>\r\n                                chapters\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <span>\r\n                                        Started Reading on <span><Moment format={'Do MMM YYYY'}\r\n                                                                          date={this.props.user_list[UserList.manga_started_reading_on]}/></span>\r\n                                    </span>\r\n                                </>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_MANGA_HISTORY(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">History</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"favorites-container\">\r\n                    <h2>Favorites</h2>\r\n\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.visited_user[User.profile][Profile.favorite_manga].map((manga, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_MANGA} title={manga}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    user_list: state.users.user_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaTab)\r\n","import React from \"react\";\r\n\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheckCircle} from \"@fortawesome/free-regular-svg-icons\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport BBCode from '@bbob/react/es/Component'\r\nimport reactPreset from '@bbob/preset-react/es'\r\n\r\nimport {isEmpty} from \"../../functions\";\r\nimport {AchievementInfo, AchievementTier, AnimeDataStatistics, UserStatistics} from \"../../../models\";\r\n\r\nconst unknown = 'https://ik.imagekit.io/r0d4cpkoj/Achievements/unknown_g6qPdfP00nE.jpg';\r\n\r\n\r\n/**\r\n *\r\n * @param tiers\r\n * @param achievements_info\r\n * @param user_achievements\r\n * @param user_progress\r\n * @param user_tier_1\r\n * @param user_tier_2\r\n * @param user_tier_3\r\n * @param user_tier_4\r\n * @returns {{user_progress: *, requirement: *, title: *, tier_2: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_1: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_4: {image: *, description: *, threshold: *, title: *, user_completed: *}, tier_3: {image: *, description: *, threshold: *, title: *, user_completed: *}}}\r\n */\r\nfunction parseGenreAchievementFromResult(tiers, achievements_info, user_achievements, user_progress, user_tier_1, user_tier_2, user_tier_3, user_tier_4) {\r\n    return {\r\n        title: achievements_info[AchievementInfo.title],\r\n        requirement: achievements_info?.[AchievementInfo.requirement],\r\n        user_progress: user_progress,\r\n        tier_1: {\r\n            title: achievements_info[AchievementInfo.tier_1][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_1][AchievementTier.description],\r\n            user_completed: user_tier_1,\r\n            image: achievements_info[AchievementInfo.tier_1][AchievementTier.image],\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: achievements_info[AchievementInfo.tier_2][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_2][AchievementTier.description],\r\n            user_completed: user_tier_2,\r\n            image: achievements_info[AchievementInfo.tier_2][AchievementTier.image],\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: achievements_info[AchievementInfo.tier_3][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_3][AchievementTier.description],\r\n            user_completed: user_tier_3,\r\n            image: achievements_info[AchievementInfo.tier_3][AchievementTier.image],\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: achievements_info[AchievementInfo.tier_4][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_4][AchievementTier.description],\r\n            user_completed: user_tier_4,\r\n            image: achievements_info[AchievementInfo.tier_4][AchievementTier.image],\r\n            threshold: tiers[3],\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getUserGenreAchievements(user_achievements, achievement_thresholds) {\r\n    let achievements = [];\r\n    let tiers = [20, 40, 80, 160];\r\n    let achievements_info = {\r\n        title: <CircularProgress/>,\r\n        requirement: '',\r\n        user_progress: 0,\r\n        tier_1: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[3],\r\n        }\r\n    };\r\n\r\n    if (isEmpty(achievement_thresholds)) return;\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_romance_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_romance_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.romance_progress],\r\n        user_achievements[UserStatistics.romance_1], user_achievements[UserStatistics.romance_2],\r\n        user_achievements[UserStatistics.romance_3], user_achievements[UserStatistics.romance_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_pervert_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_pervert_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.pervert_progress],\r\n        user_achievements[UserStatistics.pervert_1], user_achievements[UserStatistics.pervert_2],\r\n        user_achievements[UserStatistics.pervert_3], user_achievements[UserStatistics.pervert_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_classics_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_classics_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.classics_progress],\r\n        user_achievements[UserStatistics.classics_1], user_achievements[UserStatistics.classics_2],\r\n        user_achievements[UserStatistics.classics_3], user_achievements[UserStatistics.classics_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_dementia_psychological_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_dementia_psychological_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.dementia_psychological_progress],\r\n        user_achievements[UserStatistics.dementia_psychological_1], user_achievements[UserStatistics.dementia_psychological_2],\r\n        user_achievements[UserStatistics.dementia_psychological_3], user_achievements[UserStatistics.dementia_psychological_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_horror_thriller_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_horror_thriller_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.horror_thriller_progress],\r\n        user_achievements[UserStatistics.horror_thriller_1], user_achievements[UserStatistics.horror_thriller_2],\r\n        user_achievements[UserStatistics.horror_thriller_3], user_achievements[UserStatistics.horror_thriller_4]\r\n    ));\r\n\r\n    tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_mystery_thresholds].split(',');\r\n    achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_mystery_info]);\r\n    achievements.push(parseGenreAchievementFromResult(\r\n        tiers, achievements_info, user_achievements, user_achievements[UserStatistics.mystery_progress],\r\n        user_achievements[UserStatistics.mystery_1], user_achievements[UserStatistics.mystery_2],\r\n        user_achievements[UserStatistics.mystery_3], user_achievements[UserStatistics.mystery_4]\r\n    ));\r\n\r\n    return achievements;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} achievement\r\n * @param {string} achievement.title\r\n * @param {int} achievement.user_progress\r\n * @param {string} achievement.tier_1.title\r\n * @param {string} achievement.tier_1.description\r\n * @param {string} achievement.tier_1.image\r\n * @param {int} achievement.tier_1.user_completed\r\n * @param {int} achievement.tier_1.threshold\r\n * @param {string} achievement.tier_2.title\r\n * @param {string} achievement.tier_2.description\r\n * @param {string} achievement.tier_2.image\r\n * @param {int} achievement.tier_2.user_completed\r\n * @param {int} achievement.tier_2.threshold\r\n * @param {string} achievement.tier_3.title\r\n * @param {string} achievement.tier_3.description\r\n * @param {string} achievement.tier_3.image\r\n * @param {int} achievement.tier_3.user_completed\r\n * @param {int} achievement.tier_3.threshold\r\n * @param {string} achievement.tier_4.title\r\n * @param {string} achievement.tier_4.description\r\n * @param {string} achievement.tier_4.image\r\n * @param {int} achievement.tier_4.user_completed\r\n * @param {int} achievement.tier_4.threshold\r\n */\r\nexport function getActiveGenreDescription(achievement) {\r\n    if (achievement.tier_4.user_completed)\r\n        return achievement.tier_4.description;\r\n    else if (achievement.tier_3.user_completed)\r\n        return achievement.tier_3.description;\r\n    else if (achievement.tier_2.user_completed)\r\n        return achievement.tier_2.description;\r\n    else if (achievement.tier_1.user_completed)\r\n        return achievement.tier_1.description;\r\n    return '???'\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {string} props.title\r\n * @param {boolean} props.previous_completed\r\n * @param {int} props.tier_number\r\n * @param {boolean} props.user_completed\r\n * @param {int} props.user_progress\r\n * @param {int} props.threshold\r\n * @param {string} props.image\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function GenreAchievementSegment(props) {\r\n    const {title, previous_completed, tier_number, user_completed, user_progress, threshold, image} = props;\r\n    let tier_1_value;\r\n    let tier_1_buffer;\r\n    if (user_completed) {\r\n        tier_1_value = 100;\r\n        tier_1_buffer = 0\r\n    } else if (previous_completed) {\r\n        let progress = user_progress;\r\n        let new_threshold = threshold;\r\n        if (tier_number !== 1) {\r\n            progress = user_progress - (threshold / 2);\r\n            new_threshold = threshold - (threshold / 2);\r\n        }\r\n        tier_1_value = Math.round((progress / new_threshold) * 100);\r\n        tier_1_buffer = 100\r\n    } else {\r\n        tier_1_value = 0;\r\n        tier_1_buffer = 100\r\n    }\r\n    return <Grid item xs={3}>\r\n        <LinearProgress className=\"achievement-progress\" variant=\"buffer\" value={tier_1_value} valueBuffer={tier_1_buffer} />\r\n        <div style={{opacity: !previous_completed && !user_completed || user_completed ? 0 : 0.7}}\r\n             className=\"progress-number\"\r\n        >\r\n            <span>\r\n                {user_completed ? `${threshold}/${threshold}` : `${user_progress}/${threshold}`}\r\n             </span>\r\n        </div>\r\n        <div className={user_completed ? 'achievement-image completed' : 'achievement-image'}>\r\n            <span>{title}</span>\r\n            <img src={user_completed ? image : unknown}/>\r\n            <div className=\"check-icon\"><FontAwesomeIcon icon={faCheckCircle} /></div>\r\n        </div>\r\n    </Grid>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.achievement\r\n * @param {string} props.achievement.title\r\n * @param {string} props.achievement.requirement\r\n * @param {int} props.achievement.user_progress\r\n * @param {string} props.achievement.tier_1.title\r\n * @param {string} props.achievement.tier_1.description\r\n * @param {string} props.achievement.tier_1.image\r\n * @param {int} props.achievement.tier_1.user_completed\r\n * @param {int} props.achievement.tier_1.threshold\r\n * @param {string} props.achievement.tier_2.title\r\n * @param {string} props.achievement.tier_2.description\r\n * @param {string} props.achievement.tier_2.image\r\n * @param {int} props.achievement.tier_2.user_completed\r\n * @param {int} props.achievement.tier_2.threshold\r\n * @param {string} props.achievement.tier_3.title\r\n * @param {string} props.achievement.tier_3.description\r\n * @param {string} props.achievement.tier_3.image\r\n * @param {int} props.achievement.tier_3.user_completed\r\n * @param {int} props.achievement.tier_3.user_completed\r\n * @param {int} props.achievement.tier_3.threshold\r\n * @param {string} props.achievement.tier_4.title\r\n * @param {string} props.achievement.tier_4.description\r\n * @param {string} props.achievement.tier_4.image\r\n * @param {int} props.achievement.tier_4.user_completed\r\n * @param {int} props.achievement.tier_4.threshold\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function GenreAchievement(props) {\r\n    const {achievement} = props;\r\n    const requirement = <BBCode plugins={[reactPreset()]}>\r\n        {achievement.requirement}\r\n    </BBCode>;\r\n    return <Grid item xs={12} className=\"achievement-container\">\r\n        <Tooltip title={requirement}>\r\n            <h5>{achievement.title}</h5>\r\n        </Tooltip>\r\n        <p>{getActiveGenreDescription(achievement)}</p>\r\n        <Grid container className=\"progress-bar\">\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_1.title}\r\n                tier_number={1}\r\n                previous_completed={true}\r\n                user_completed={achievement.tier_1.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_1.threshold}\r\n                image={achievement.tier_1.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_2.title}\r\n                tier_number={2}\r\n                previous_completed={achievement.tier_1.user_completed}\r\n                user_completed={achievement.tier_2.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_2.threshold}\r\n                image={achievement.tier_2.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_3.title}\r\n                tier_number={3}\r\n                previous_completed={achievement.tier_2.user_completed}\r\n                user_completed={achievement.tier_3.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_3.threshold}\r\n                image={achievement.tier_3.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_4.title}\r\n                tier_number={4}\r\n                previous_completed={achievement.tier_3.user_completed}\r\n                user_completed={achievement.tier_4.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_4.threshold}\r\n                image={achievement.tier_4.image}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","/* eslint-disable */\r\nimport React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {User, UserStatistics} from \"../../../../models\";\r\nimport {getAnimeAchievementsThresholds} from \"../../../../actions/anime\";\r\nimport {clearUserAchievements, getUserAchievements} from \"../../../../actions/users\";\r\nimport {GenreAchievement, getUserGenreAchievements} from \"../../achievements/achievements\";\r\n\r\nimport '../../../../assets/css/achievements.css'\r\n\r\n\r\nclass AchievementsTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            user_achievements: {\r\n                the_crusade: false,\r\n                the_crusade_progress: 0.0,\r\n                romance_progress: 0,\r\n                romance_1: false,\r\n                romance_2: false,\r\n                romance_3: false,\r\n                romance_4: false,\r\n                pervert_progress: 0,\r\n                pervert_1: false,\r\n                pervert_2: false,\r\n                pervert_3: false,\r\n                pervert_4: false,\r\n                classics_progress: 0,\r\n                classics_1: false,\r\n                classics_2: false,\r\n                classics_3: false,\r\n                classics_4: false,\r\n            },\r\n            anime_achievement_thresholds: {},\r\n            achievements_loaded: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeAchievementsThresholds();\r\n        this.props.getUserAchievements(this.props.visited_user[User.id]);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearUserAchievements();\r\n    }\r\n\r\n    render() {\r\n        let genre_achievements = getUserGenreAchievements(this.state.user_achievements, this.state.anime_achievement_thresholds);\r\n        if (!this.state.achievements_loaded && !isEmpty(this.props.user_achievements) && !isEmpty(this.props.anime_achievement_thresholds))\r\n            this.setState({\r\n                user_achievements: this.props.user_achievements,\r\n                anime_achievement_thresholds: this.props.anime_achievement_thresholds,\r\n                achievements_loaded: true\r\n            });\r\n\r\n        // genre_achievements = getUserGenreAchievements(this.state.user_achievements, this.state.anime_achievement_thresholds);\r\n\r\n        return (\r\n            <Grid id=\"Achievements\" container>\r\n                <Grid item xs={12}>\r\n                    <h3>Achievements</h3>\r\n                </Grid>\r\n                {this.props.visited_user[User.id] === 15 &&\r\n                    this.props.visited_user[User.id] === this.props.user[User.id] ?\r\n                    <Grid item xs={12} className=\"achievement-container\">\r\n                        <Tooltip title=\"All Anime where the Goddess is present, count towards this achievement.\">\r\n                            <h5>The Crusade</h5>\r\n                        </Tooltip>\r\n                        <p>I am going on pilgrimage, I am going to walk the holy path.</p>\r\n                        <Tooltip title={`${this.state.user_achievements[UserStatistics.the_crusade_progress]}%`}>\r\n                            <LinearProgress className=\"achievement-progress\" variant=\"buffer\" value={this.state.user_achievements[UserStatistics.the_crusade_progress]} valueBuffer={0} />\r\n                        </Tooltip>\r\n                    </Grid> : null}\r\n                {genre_achievements ? genre_achievements.map(achievement => (\r\n                    <GenreAchievement achievement={achievement}/>\r\n                )) : null}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n    anime_loading: state.anime.anime_loading,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    anime_achievement_thresholds: state.anime.anime_achievement_thresholds,\r\n    user_achievements_loading: state.users.user_achievements_loading,\r\n    user_achievements: state.users.user_achievements,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeAchievementsThresholds, getUserAchievements, clearUserAchievements})(AchievementsTab)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBookOpen, faGamepad, faTrophy, faTv, faUser} from \"@fortawesome/free-solid-svg-icons\";\r\nimport AboutTab from \"./AboutTab\";\r\nimport AnimeTab from \"./AnimeTab\";\r\nimport MangaTab from \"./MangaTab\";\r\nimport AchievementsTab from \"./AchievementsTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ProfileTabs(props) {\r\n    const {visited_user} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root profile-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faUser}/> About</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faTv}/> Anime</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faBookOpen}/> Manga</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab disabled={true} label={<p><FontAwesomeIcon className=\"list-icon\" icon={faGamepad}/> Eroge</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    {/*<Tab disabled={true} label={<p><FontAwesomeIcon className=\"list-icon\" icon={faChartLine}/> Statistics</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>*/}\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faTrophy}/> Achievements</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"about-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <AboutTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"anime-tab box-light\" value={value} index={1} dir={theme.direction}>\r\n                    <AnimeTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"manga-tab box-light\" value={value} index={2} dir={theme.direction}>\r\n                    <MangaTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"eroge-tab box-light\" value={value} index={3} dir={theme.direction}>\r\n                    EROGE\r\n                </TabPanel>\r\n                {/*<TabPanel value={value} index={4} dir={theme.direction}>*/}\r\n                {/*    STATISTICS*/}\r\n                {/*</TabPanel>*/}\r\n                <TabPanel value={value} index={4} dir={theme.direction}>\r\n                    <AchievementsTab/>\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCamera} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {User} from \"../../../models\";\r\nimport {updateUserProfileImage} from \"../../../actions/users\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass UploadProfileImageButton extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Classnames for the loader */\r\n        loader_classnames: PropTypes.object.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onUpdateProfile = this.onUpdateProfile.bind(this);\r\n        this.state = {};\r\n    }\r\n\r\n    onUpdateProfile(e) {\r\n        this.props.updateUserProfileImage(e.target.files[0], this.props.user[User.id]);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"upload-img-btn-container\">\r\n                {this.props.uploading_file ? <CircularProgress className={this.props.loader_classnames}/> : <>\r\n                    <input\r\n                        accept=\"image/*\"\r\n                        style={{display: 'none'}}\r\n                        id=\"upload-profile-img\"\r\n                        multiple={false}\r\n                        type=\"file\"\r\n                        onChange={this.onUpdateProfile}\r\n                    />\r\n                    <label htmlFor=\"upload-profile-img\" className=\"upload-img-btn\">\r\n                        <Button variant=\"outlined\" color=\"primary\" component=\"span\"\r\n                                onMouseEnter={playHoverSound} onClick={playClickSound}>\r\n                            <FontAwesomeIcon icon={faCamera}/>\r\n                        </Button>\r\n                    </label>\r\n                </>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    uploading_file: state.users.uploading_file,\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateUserProfileImage})(UploadProfileImageButton)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Moment from \"react-moment\";\r\n\r\nimport {PROFILE_TAB_NAME} from \"../../../globals\";\r\nimport {User, Profile as ProfileModel} from \"../../../models\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport {CyberLink, PreLoadImage} from \"../../layout/common/common\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {\r\n    convertUTCDateToLocalDate, isMoreThanAYear, isTimeLessThanAnHourAgo, isTimeLessThanSixHoursAgo,\r\n    isToday,\r\n    isWithinAMonth,\r\n    isWithinAWeek, isWithinAYear, isWithinSixMonths,\r\n    isYesterday\r\n} from \"../../functions\";\r\nimport {ProfileTabs} from \"./tabs/ProfileTabs\";\r\nimport UploadProfileImageButton from \"../forms/UploadProfileImageButton\";\r\nimport {getUserList, updateUserList} from \"../../../actions/users\";\r\nimport {NOT_FOUND, USER_ANIME_HISTORY, USER_ANIME_LIST, USER_MANGA_HISTORY, USER_MANGA_LIST} from \"../../../urls\";\r\n\r\nimport '../../../assets/css/users.css'\r\n\r\n\r\nfunction getLastLoginLabel(last_login) {\r\n    const last_login_date = convertUTCDateToLocalDate(new Date(Date.parse(last_login)));\r\n    if (isTimeLessThanAnHourAgo(last_login_date))\r\n        return <span className=\"color-green\">Now</span>;\r\n    else if (isTimeLessThanSixHoursAgo(last_login_date))\r\n        return <span className=\"color-success\">Few hours ago</span>;\r\n    else if (isToday(last_login_date))\r\n        return <span className=\"color-success\">Today</span>;\r\n    else if (isYesterday(last_login_date))\r\n        return <span className=\"color-warning\">Yesterday</span>;\r\n    else if (isWithinAWeek(last_login_date))\r\n        return <span className=\"color-warning\">Few days ago</span>;\r\n    else if (isWithinAMonth(last_login_date))\r\n        return <span className=\"color-warning\">Few weeks ago</span>;\r\n    else if (isWithinSixMonths(last_login_date))\r\n        return <span className=\"color-warning\">Few months ago</span>;\r\n    else if (isWithinAYear(last_login_date))\r\n        return <span className=\"color-warning\">More than six months ago</span>;\r\n    else if (isMoreThanAYear(last_login_date))\r\n        return <span className=\"color-danger\">More than a year ago</span>;\r\n    else return <span className=\"color-danger\">A long time ago</span>\r\n}\r\n\r\n\r\nclass Profile extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            img_cover_loaded: false,\r\n            current_id: this.props.match.params.id,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        this.props.getUser(this.props.match.params.id);\r\n        this.props.getUserList(this.props.match.params.id);\r\n        this.props.updateUserList(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {match} = this.props;\r\n\r\n        if (prevState.current_id !== match.params.id) {\r\n            this.setState({current_id: this.props.match.params.id});\r\n            this.props.getUser(this.props.match.params.id);\r\n            this.props.getUserList(this.props.match.params.id);\r\n            this.props.updateUserList(this.props.match.params.id);\r\n\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        document.title = this.props.visited_user_loaded ? this.props.visited_user[User.username] : PROFILE_TAB_NAME;\r\n\r\n        let loaded = this.props.visited_user_loaded;\r\n        if (loaded && parseInt(this.props.match.params.id) !== this.props.visited_user[User.id])\r\n            loaded = false;\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                {loaded ? <Grid id=\"Profile\" container xs={12}>\r\n                    <Grid item xs={12}>\r\n                        <h1>{this.props.visited_user[User.username]}</h1>\r\n                    </Grid>\r\n                    <Grid item xs={2} className=\"side-panel\">\r\n                        <div className=\"side-panel-sticky-helper\"/>\r\n                        <div className=\"side-panel-container\">\r\n                            <div className=\"avatar-image-container\">\r\n                                <PreLoadImage src={this.props.visited_user[User.profile][ProfileModel.profile_image]}\r\n                                              alt={'Avatar'}/>\r\n                                {this.props.user && this.props.user[User.id] === parseInt(this.props.match.params.id) ?\r\n                                    <UploadProfileImageButton loader_classnames=\"upload-img-loader\"/> : null}\r\n                            </div>\r\n                            <List className=\"info-list box-light\">\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Title\"\r\n                                        secondary={this.props.visited_user[User.profile][ProfileModel.title]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Bio\"\r\n                                        secondary={this.props.visited_user[User.profile][ProfileModel.bio]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Email\"\r\n                                        secondary={this.props.visited_user[User.email]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Last Active\"\r\n                                        secondary={getLastLoginLabel(this.props.visited_user[User.last_login])}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Joined\"\r\n                                        secondary={<Moment format={'Do MMM YYYY'} date={this.props.visited_user[User.date_joined]}/>}/>\r\n                                </ListItem>\r\n                            </List>\r\n                            <Divider/>\r\n                            <List className=\"box-light\" component=\"nav\" aria-label=\"main mailbox folders\">\r\n                                <CyberLink to={USER_ANIME_LIST(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Anime List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_ANIME_HISTORY(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Anime History\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_MANGA_LIST(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Manga List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_MANGA_HISTORY(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Manga History\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={NOT_FOUND}>\r\n                                    <ListItem button>\r\n                                        Eroge List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                            </List>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={10} className=\"main-panel\">\r\n                        <ProfileTabs visited_user={this.props.visited_user}/>\r\n                    </Grid>\r\n                </Grid> : this.props.user_loading ? <Loading text={'User Loading'}/> : null}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser, getUserList, updateUserList})(Profile)\r\n","import React, {Component} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile as ProfileModel, User} from \"../../../../models\";\r\nimport {PreLoadImage} from \"../../../layout/common/common\";\r\nimport UploadProfileImageButton from \"../../forms/UploadProfileImageButton\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {EditBioForm} from \"../../forms/shortForms\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\n\r\n\r\nclass UserSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.editBio = this.editBio.bind(this);\r\n        this.finishEditingBio = this.finishEditingBio.bind(this);\r\n        this.state = {\r\n            edit_bio: false\r\n        };\r\n    }\r\n\r\n    editBio() {\r\n        this.setState({edit_bio: true})\r\n    }\r\n\r\n    finishEditingBio() {\r\n        this.setState({edit_bio: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <h1>User Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Personal settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Avatar\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {!this.props.uploading_file ? <PreLoadImage src={this.props.user[User.profile][ProfileModel.profile_image]}\r\n                                                      alt={'Avatar'} className=\"settings-avatar\"/> : null}\r\n                                        <UploadProfileImageButton/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Title\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.profile][ProfileModel.title]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Username\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.username]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Email\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.email]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Bio\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">\r\n                                        <ClickAwayListener onClickAway={this.finishEditingBio}>\r\n                                            <div>\r\n                                                {!this.state.edit_bio ? <div onClick={this.editBio}>\r\n                                                    {this.props.user[User.profile][ProfileModel.bio] ? this.props.user[User.profile][ProfileModel.bio] : 'No bio'}\r\n                                                </div> : null}\r\n                                                {this.state.edit_bio ? (\r\n                                                    <EditBioForm bio={this.props.user[User.profile][ProfileModel.bio]}\r\n                                                                 closeBio={this.finishEditingBio}/>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </ClickAwayListener>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Show adult content\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Switch\r\n                                            checked={true}\r\n                                            color=\"primary\"\r\n                                            name=\"checkedB\"\r\n                                            inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    cookies: state.cookies.sound_effects,\r\n    uploading_file: state.users.uploading_file,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(UserSettings)\r\n","import React, {Component} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faFileUpload, faTools, faVolumeMute, faVolumeUp} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {connect} from \"react-redux\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {setCookieSoundEffects} from \"../../../../actions/cookies\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Profile as ProfileModel, Profile, User} from \"../../../../models\";\r\nimport {muteUnmuteThemeSounds} from \"../../../../actions/users\";\r\nimport {EditAboutMeBBCodeDialog, EditBioForm} from \"../../forms/shortForms\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\nimport {getBrowseGridListCols} from \"../../../functions\";\r\nimport {BBCODE_EDITOR, USER_ANIME_STATISTICS} from \"../../../../urls\";\r\n\r\n\r\nclass ProfileSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.openBBCodeDialog = this.openBBCodeDialog.bind(this);\r\n        this.closeBBCodeDialog = this.closeBBCodeDialog.bind(this);\r\n        this.state = {\r\n            bbcode_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    openBBCodeDialog() {\r\n        this.setState({bbcode_dialog_open: true})\r\n    }\r\n\r\n    closeBBCodeDialog() {\r\n        this.setState({bbcode_dialog_open: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <h1>Profile Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Theme settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Theme\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <FormControl variant=\"filled\">\r\n                                            <InputLabel id=\"select-theme\">Theme</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"select-theme\"\r\n                                                id=\"demo-simple-select-outlined\"\r\n                                                value={'Cyber-Genesis'}\r\n                                                label=\"Theme\"\r\n                                            >\r\n                                                <MenuItem value={'Cyber-Genesis'}>Cyber-Genesis</MenuItem>\r\n                                                <MenuItem value={'Legacy'}>Legacy</MenuItem>\r\n                                                <MenuItem value={'Oceanic Blue'}>Oceanic Blue</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Sounds\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberButton onClick={this.props.muteUnmuteThemeSounds}>\r\n                                            <FontAwesomeIcon icon={this.props.user[User.profile][Profile.theme_sounds] ?\r\n                                                    faVolumeUp : faVolumeMute}/>\r\n                                        </CyberButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Show adult content\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Yes\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>About section</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Edit About Me bbCode\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberLink to={BBCODE_EDITOR}>\r\n                                            <CyberButton title=\"BBCode Editor\" variant=\"outlined\" >\r\n                                                <FontAwesomeIcon icon={faTools}/>\r\n                                            </CyberButton>\r\n                                        </CyberLink>\r\n                                        {/*<CyberButton variant=\"outlined\" onClick={this.openBBCodeDialog}>*/}\r\n                                        {/*    <FontAwesomeIcon icon={faEdit}/>*/}\r\n                                        {/*</CyberButton>*/}\r\n                                        {/*<EditAboutMeBBCodeDialog*/}\r\n                                        {/*    bbcode={this.props.user[User.profile][ProfileModel.about_section_bbcode]}*/}\r\n                                        {/*    open={this.state.bbcode_dialog_open}*/}\r\n                                        {/*    onClose={this.closeBBCodeDialog}/>*/}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Anime stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Manga stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Eroge stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n            </Grid>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    sound_effects: state.cookies.sound_effects,\r\n});\r\n\r\nexport default connect(mapStateToProps, {muteUnmuteThemeSounds})(ProfileSettings)\r\n","import React, { useState } from 'react';\r\n\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport store from \"../../../../store\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {\r\n    updateUserAnimeHistoryPrivacy,\r\n    updateUserAnimeListPrivacy, updateUserMangaHistoryPrivacy,\r\n    updateUserMangaListPrivacy\r\n} from \"../../../../actions/users\";\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserAnimeListPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_anime_list_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserAnimeListPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserAnimeHistoryPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_anime_history_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserAnimeHistoryPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserMangaListPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_manga_list_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserMangaListPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserMangaHistoryPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_manga_history_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserMangaHistoryPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faCheck,\r\n    faCloudDownloadAlt,\r\n    faEdit,\r\n    faFileImport,\r\n    faFileUpload, faQuestion, faTimes,\r\n    faTools,\r\n    faVolumeMute\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n    EditAboutMeBBCodeDialog,\r\n    ImportAnimeListFromMal, ImportMangaListFromMal,\r\n    ScrapeEpisodeHistoryFromMalDialog, ScrapeEpisodeHistoryFromMalForm\r\n} from \"../../forms/shortForms\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {Profile, Profile as ProfileModel, User, UserList} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n    fixUserStartAndFinishDateForAnimeEntries,\r\n    getUserEpisodeHistoryScraperProgress,\r\n    getUserList\r\n} from \"../../../../actions/users\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {\r\n    ToggleUserAnimeHistoryPrivacyForm,\r\n    ToggleUserAnimeListPrivacyForm, ToggleUserMangaHistoryPrivacyForm, ToggleUserMangaListPrivacyForm\r\n} from \"../../forms/list_privacy/listPrivacyForms\";\r\n\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    return (\r\n        <Box position=\"relative\" display=\"inline-flex\">\r\n            <CircularProgress variant=\"determinate\" {...props} />\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Typography variant=\"caption\" component=\"div\" color=\"textPrimary\">{`${props.value}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nclass ListSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.openScrapeHistoryDialog = this.openScrapeHistoryDialog.bind(this);\r\n        this.closeScrapeHistoryDialog = this.closeScrapeHistoryDialog.bind(this);\r\n        this.state = {\r\n            scrape_episode_history_dialog_open: false,\r\n            scraping_info_reading: false,\r\n            update_interval: null,\r\n            scraping_history_info_modal_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getUserList(this.props.user[User.id]);\r\n        this.props.getUserEpisodeHistoryScraperProgress();\r\n        const {getUserEpisodeHistoryScraperProgress} = this.props;\r\n        if (!isEmpty(this.props.user_list) && this.props.user_list[UserList.is_scraping_episode_history_from_mal]) {\r\n            getUserEpisodeHistoryScraperProgress();\r\n            let update_interval = setInterval(function () {\r\n                getUserEpisodeHistoryScraperProgress();\r\n            }, 10000);\r\n            this.setState({scraping_info_reading: true, update_interval: update_interval});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // setTimeout(() => { getUserEpisodeHistoryScraperProgress() }, 1000);\r\n        const {getUserEpisodeHistoryScraperProgress} = this.props;\r\n\r\n        if (!this.state.scraping_info_reading) {\r\n            if (!isEmpty(this.props.user_list) && this.props.user_list[UserList.is_scraping_episode_history_from_mal]) {\r\n                getUserEpisodeHistoryScraperProgress();\r\n                let update_interval = setInterval(function () {\r\n                    getUserEpisodeHistoryScraperProgress();\r\n                }, 10000);\r\n                this.setState({scraping_info_reading: true, update_interval: update_interval});\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.update_interval);\r\n    }\r\n\r\n    openScrapeHistoryDialog() {\r\n        this.setState({scrape_episode_history_dialog_open: true})\r\n    }\r\n\r\n    closeScrapeHistoryDialog() {\r\n        this.setState({scrape_episode_history_dialog_open: false})\r\n    }\r\n\r\n    render() {\r\n        return this.props.user_list_loading || isEmpty(this.props.user_list) ? <CircularProgress/> :\r\n            <Grid container className=\"settings-tab\">\r\n                <Grid item xs={12}>\r\n                    <h1>List Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Anime settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Anime List is {this.props.user[User.profile][Profile.is_anime_list_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserAnimeListPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Anime History is {this.props.user[User.profile][Profile.is_anime_history_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserAnimeHistoryPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Import from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ImportAnimeListFromMal/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Scrape episode history from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {isEmpty(this.props.user_list) || !this.props.user_list[UserList.is_scraping_episode_history_from_mal] ?\r\n                                            this.props.user_list_loading ? <CircularProgress/> :\r\n                                                <CyberButton variant=\"outlined\" onClick={this.openScrapeHistoryDialog}>\r\n                                                    <FontAwesomeIcon icon={faCloudDownloadAlt}/>\r\n                                                </CyberButton>\r\n                                        : <>\r\n                                            <p>{this.props.progress}%</p>\r\n                                            <LinearProgress variant=\"determinate\" value={this.props.progress}/>\r\n                                        </>}\r\n                                        <ScrapeEpisodeHistoryFromMalDialog\r\n                                            open={this.state.scrape_episode_history_dialog_open}\r\n                                            onClose={this.closeScrapeHistoryDialog}/>\r\n                                    </TableCell>\r\n                                    <div className=\"help-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n                                        playClickSound();\r\n                                        this.setState({scraping_history_info_modal_open: true})\r\n                                    }}>\r\n                                        <FontAwesomeIcon icon={faQuestion}/>\r\n                                    </div>\r\n                                    <Dialog\r\n                                        aria-labelledby=\"scrape-episode-history-info-title\"\r\n                                        open={this.state.scraping_history_info_modal_open}\r\n                                        onClose={() => {\r\n                                            this.setState({scraping_history_info_modal_open: false})\r\n                                        }}>\r\n                                        <div id=\"scrape-episode-history-info\">\r\n                                            <DialogTitle id=\"scrape-episode-history-info-title\">Quick\r\n                                                Guide</DialogTitle>\r\n                                            <Typography variant=\"body1\" paragraph={true}>\r\n                                                To scrape your episode history from MAL you first must provide your\r\n                                                authentication cookies of your account on MAL.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\">\r\n                                                To find these cookies go to MAL, log in to your account and open Inspect\r\n                                                Element on your browser:\r\n                                            </Typography>\r\n                                            <ul>\r\n                                                <li>Click on the Application tab</li>\r\n                                                <li>Click on Cookies under the Storage segment on the left</li>\r\n                                                <li>Click on the MAL url under Cookies</li>\r\n                                                <li>In the value column copy the value of MALSESSIONID and MALHLOGSESSID\r\n                                                    and paste them in the form accordingly\r\n                                                </li>\r\n                                            </ul>\r\n                                            <img src=\"images/user_scrape_guide_1.jpg\"/>\r\n                                            <Typography variant=\"body1\">\r\n                                                The scraper will use these cookies only to view your episode history and\r\n                                                scrape it.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\">\r\n                                                When the scraper starts:\r\n                                            </Typography>\r\n                                            <ul>\r\n                                                <li>Don't log out of MAL during the scraping process.</li>\r\n                                                <li>The scraper might last up to few hours depending on your list\r\n                                                    size.\r\n                                                </li>\r\n                                                <li>You will get progress of the scraper when it starts.</li>\r\n                                                <li>When the scraper finishes you can log out of MAL and log in again to\r\n                                                    refresh your cookies. (For your security)\r\n                                                </li>\r\n                                            </ul>\r\n                                            <Typography>\r\n                                                NOTE: Only one user can scrape from MAL at the time, this is to\r\n                                                prevent over-clogging MAL with requests. If someone is already\r\n                                                scraping please wait and try again later.\r\n                                            </Typography>\r\n\r\n                                            <div className=\"close-btn\">\r\n                                                <CyberButton classNames=\"btn-contained-primary\" onClick={() => {\r\n                                                    this.setState({scraping_history_info_modal_open: false})\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faTimes}/>\r\n                                                </CyberButton>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Dialog>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Fix Start Date and Finish Date for your anime list entries\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberButton variant=\"outlined\"\r\n                                                     onClick={() => {\r\n                                                         if (window.confirm('Are you sure?'))\r\n                                                             this.props.fixUserStartAndFinishDateForAnimeEntries()\r\n                                                     }}>\r\n                                            <FontAwesomeIcon icon={faTools}/>\r\n                                        </CyberButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Manga settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Manga List is {this.props.user[User.profile][Profile.is_manga_list_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserMangaListPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Manga History is {this.props.user[User.profile][Profile.is_manga_history_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserMangaHistoryPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Import from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ImportMangaListFromMal/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_list: state.users.user_list,\r\n    user_list_loading: state.users.user_list_loading,\r\n    progress: state.users.user_list[UserList.scraping_episode_history_from_mal_progress],\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getUserList, getUserEpisodeHistoryScraperProgress, fixUserStartAndFinishDateForAnimeEntries\r\n})(ListSettings)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport UserSettings from \"./UserSettings\";\r\nimport ProfileSettings from \"./ProfileSettings\";\r\nimport ListSettings from \"./ListSettings\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function SettingsTabs(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label=\"User\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"Profile\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"List\" {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <UserSettings/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    <ProfileSettings/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={2} dir={theme.direction}>\r\n                    <ListSettings/>\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {SETTINGS_TAB_NAME} from \"../../../globals\";\r\nimport {LOGIN} from \"../../../urls\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport {SettingsTabs} from \"./tabs/SettingsTabs\";\r\n\r\nimport '../../../assets/css/users.css'\r\n\r\n\r\nclass Settings extends Component {\r\n    componentDidMount() {\r\n        document.title = SETTINGS_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.user_authenticated)\r\n            return <Redirect to={LOGIN}/>;\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Settings\">\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <SettingsTabs/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Settings)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport PropTypes from \"prop-types\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass MangaBrowse extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        let manga_filters = this.props.manga_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            manga_filters = this.props.manga_season_filters;\r\n        return <Browse\r\n            branch={BRANCH_MANGA}\r\n            titles_loading={this.props.manga_loading}\r\n            filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n            filtered_titles={this.props.filtered_manga}\r\n            title_filters={manga_filters}\r\n            user_entry_statuses={this.props.user_manga_entry_statuses}\r\n            season={this.props.season}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_browse_filters: state.cookies.manga_browse_filters,\r\n    manga_season_filters: state.cookies.manga_season_filters,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass AnimeDisplay extends Component {\r\n    componentDidMount() {\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_ANIME}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.anime_loading}\r\n            title_loaded={this.props.anime_loaded}\r\n            title={this.props.anime}\r\n            user_title_status={this.props.user_anime_entry}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_loaded: state.anime.anime_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    user_anime_entry: state.users.user_anime_entry,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLoggedInUserAnimeEntryStatuses,\r\n    getLoggedInUserMangaEntryStatuses\r\n})(AnimeDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass MangaDisplay extends Component {\r\n    componentDidMount() {\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_MANGA}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.manga_loading}\r\n            title_loaded={this.props.manga_loaded}\r\n            title={this.props.manga}\r\n            user_title_status={this.props.user_manga_entry}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    manga_loaded: state.manga.manga_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n    user_manga_entry: state.users.user_manga_entry,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLoggedInUserAnimeEntryStatuses,\r\n    getLoggedInUserMangaEntryStatuses\r\n})(MangaDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\n\r\n\r\nclass CharactersBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_CHARACTERS}\r\n            titles_loading={this.props.characters_loading}\r\n            filtered_titles_loaded={this.props.filtered_characters_loaded}\r\n            filtered_titles={this.props.filtered_characters}\r\n            title_filters={this.props.characters_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    characters_loading: state.characters.characters_loading,\r\n    filtered_characters_loaded: state.characters.filtered_characters_loaded,\r\n    filtered_characters: state.characters.filtered_characters,\r\n    characters_filters: state.cookies.characters_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharactersBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass CharacterDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_CHARACTERS}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.characters_loading}\r\n            title_loaded={this.props.characters_loaded}\r\n            title={this.props.character}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    character: state.characters.character,\r\n    characters_loaded: state.characters.characters_loaded,\r\n    characters_loading: state.characters.characters_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharacterDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass ErogeBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_EROGE}\r\n            titles_loading={this.props.eroge_loading}\r\n            filtered_titles_loaded={this.props.filtered_eroge_loaded}\r\n            filtered_titles={this.props.filtered_eroge}\r\n            title_filters={this.props.eroge_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    filtered_eroge_loaded: state.eroge.filtered_eroge_loaded,\r\n    filtered_eroge: state.eroge.filtered_eroge,\r\n    eroge_filters: state.cookies.eroge_browse_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ErogeBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass CharacterDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_EROGE}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.eroge_loading}\r\n            title_loaded={this.props.eroge_loaded}\r\n            title={this.props.eroge}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge: state.eroge.eroge,\r\n    eroge_loaded: state.eroge.eroge_loaded,\r\n    eroge_loading: state.eroge.eroge_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharacterDisplay)\r\n","import {BRANCH_ANIME, BRANCH_MANGA} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {getAnimeData} from \"../../actions/anime\";\r\nimport {getMangaData} from \"../../actions/manga\";\r\nimport {AnimeData, MangaData} from \"../../models\";\r\nimport {ANIME_SEASON_DISPLAY, HOME, MANGA_SEASON_DISPLAY} from \"../../urls\";\r\nimport AnimeBrowse from \"../anime/browse/AnimeBrowse\";\r\nimport React from \"react\";\r\nimport MangaBrowse from \"../manga/browse/MangaBrowse\";\r\nimport {faLeaf, faSeedling, faSnowflake, faSun, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nexport function getSeasonIcon(season) {\r\n    switch (season) {\r\n        case 1:\r\n            return <FontAwesomeIcon icon={faSeedling} className=\"spring\"/>;\r\n        case 2:\r\n            return <FontAwesomeIcon icon={faSun} className=\"summer\"/>;\r\n        case 3:\r\n            return <FontAwesomeIcon icon={faLeaf} className=\"fall\"/>;\r\n        case 4:\r\n            return <FontAwesomeIcon icon={faSnowflake} className=\"winter\"/>;\r\n        default:\r\n            return <FontAwesomeIcon icon={faTimes} className=\"winter\"/>;\r\n    }\r\n}\r\n\r\n\r\nexport function getTitleData(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            // noinspection JSCheckFunctionSignatures\r\n            store.dispatch(getAnimeData());\r\n            return;\r\n        case BRANCH_MANGA:\r\n            // noinspection JSCheckFunctionSignatures\r\n            store.dispatch(getMangaData());\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function browseSeasonTitlesFromBranch(branch, year, season) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AnimeBrowse season={{year: year, season: season}}/>;\r\n        case BRANCH_MANGA:\r\n            return <MangaBrowse season={{year: year, season: season}}/>;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getPrevSeasonUrl(branch, year, season) {\r\n    let prev_year = year;\r\n    let prev_season = season - 1;\r\n    if (prev_season === 0) {\r\n        prev_season = 4;\r\n        prev_year = year - 1\r\n    }\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(prev_year, prev_season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(prev_year, prev_season);\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getNextSeasonUrl(branch, year, season) {\r\n    let next_year = year;\r\n    let next_season = season + 1;\r\n    if (next_season === 5) {\r\n        next_season = 1;\r\n        next_year = year + 1\r\n    }\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(next_year, next_season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(next_year, next_season);\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport function formatData(branch, data) {\r\n    let display_data = {\r\n        total_titles_per_season_json: null,\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            display_data.total_titles_per_season_json = data[AnimeData.total_anime_per_season_json];\r\n            return display_data;\r\n        case BRANCH_MANGA:\r\n            display_data.total_titles_per_season_json = data[MangaData.total_manga_per_season_json];\r\n            return display_data;\r\n        default:\r\n            return display_data;\r\n    }\r\n}\r\n\r\nexport function getSeasonUrl(branch, year, season) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(year, season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(year, season);\r\n        default:\r\n            return HOME;\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\n\r\nimport {SeasonYear} from \"../../models\";\r\nimport {getBrowseGridListCols} from \"../functions\";\r\nimport {CyberLink} from \"../layout/common/common\";\r\nimport Loading from \"../layout/common/Loading\";\r\n\r\nimport '../../assets/css/seasons.css'\r\nimport {formatData, getSeasonUrl, getTitleData} from \"./functions\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\n\r\nclass BrowseSeasons extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        data_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        data_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        data: PropTypes.object.isRequired,\r\n    };\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {gridlist_cols: getBrowseGridListCols()};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.branch} Seasons`;\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n\r\n        getTitleData(this.props.branch);\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    render() {\r\n        const data = this.props.data_loaded ? formatData(this.props.branch, this.props.data) : formatData();\r\n\r\n        console.log('data', this.props.data);\r\n        console.log(data);\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                {this.props.data_loaded ? <Grid id=\"Seasons\" container>\r\n                    <Grid item xs={12}>\r\n                        <GridList cellHeight={280} cols={this.state.gridlist_cols} style={{margin: 0}}>\r\n                            {data.total_titles_per_season_json ?\r\n                                JSON.parse(data.total_titles_per_season_json).reverse().map((year, x) => (\r\n                                    <Grow in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1} className=\"season-card\">\r\n                                            <div className=\"box-light\">\r\n                                                {console.log(year)}\r\n                                                <h1>{year[SeasonYear.year]}</h1>\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSeedling} className=\"spring\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 1)}>Spring</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][0]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSun} className=\"summer\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 2)}>Summer</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][1]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faLeaf} className=\"fall\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 3)}>Fall</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][2]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSnowflake} className=\"winter\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 4)}>Winter</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][3]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <p className=\"total\">Total {year[SeasonYear.seasons][0] + year[SeasonYear.seasons][1] + year[SeasonYear.seasons][2] + year[SeasonYear.seasons][3]}</p>\r\n                                            </div>\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                )) : null}\r\n                        </GridList>\r\n                    </Grid>\r\n                </Grid> : this.props.anime_loading ? <Loading text={'Seasons Loading'}/> : null}\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport BrowseSeasons from \"../../seasons/BrowseSeasons\";\r\n\r\n\r\nclass BrowseAnimeSeasons extends Component {\r\n    render() {\r\n        return <BrowseSeasons\r\n            branch={BRANCH_ANIME}\r\n            data_loading={this.props.anime_loading}\r\n            data_loaded={this.props.anime_data_loaded}\r\n            data={this.props.anime_data}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data: state.anime.anime_data,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseAnimeSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport BrowseSeasons from \"../../seasons/BrowseSeasons\";\r\n\r\n\r\nclass BrowseMangaSeasons extends Component {\r\n    render() {\r\n        return <BrowseSeasons\r\n            branch={BRANCH_MANGA}\r\n            data_loading={this.props.manga_loading}\r\n            data_loaded={this.props.manga_data_loaded}\r\n            data={this.props.manga_data}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_data: state.manga.manga_data,\r\n    manga_data_loaded: state.manga.manga_data_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseMangaSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {NOT_FOUND_404_TAB_NAME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\n\r\n\r\nclass NotFound extends Component {\r\n    componentDidMount() {\r\n        document.title = NOT_FOUND_404_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Not-Found\">\r\n                    <Grid container className=\"container\">\r\n                        <Grid xs={12}>\r\n                            <h1>404</h1>\r\n                            <p>Not found</p>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(NotFound)\r\n","import React, {Component, Fragment} from \"react\";\nimport {withAlert} from \"react-alert\";\nimport {connect} from \"react-redux\";\nimport {Alert} from \"../../../models\";\nimport store from \"../../../store\";\nimport {cleanErrors, clearMessage} from \"../../../actions/messages\";\nimport {isEmpty} from \"../../functions\";\n\n\nexport class Alerts extends Component {\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {error, alert, message} = this.props;\n        if (error.status !== prevProps.error.status) {\n            console.log(error.message);\n            let msg = '';\n            if (!isEmpty(error.message))\n                Object.keys(error.message).forEach(key=>{\n                   msg += `\\n${error.message[key]}`\n                });\n\n            if (error.status !== null || error.message !== null) {\n                alert.error(`${error.status ? `Status: ${error.status}` : ''} ${msg}`, {\n                    onOpen: () => {\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            }\n        }\n\n        if (message !== prevProps.message) {\n            if (this.props.type === Alert.type_success)\n                alert.success(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            else if (this.props.type === Alert.type_info)\n                alert.info(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            else if (this.props.type === Alert.type_error)\n                alert.error(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n        }\n\n    }\n\n    render() {\n        return <Fragment/>;\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: state.errors,\n    message: state.success.message,\n    type: state.success.type\n});\n\nexport default connect(mapStateToProps)(withAlert()(Alerts));\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {getSeasonLabelFromSeasonNumber} from \"../functions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {browseSeasonTitlesFromBranch, getNextSeasonUrl, getPrevSeasonUrl, getSeasonIcon} from \"./functions\";\r\n\r\nimport '../../assets/css/seasons.css'\r\nimport {CyberButton, CyberLink} from \"../layout/common/common\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../urls\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowLeft, faArrowRight, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass DisplaySeason extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            year: parseInt(this.props.match.params.year),\r\n            season_num: parseInt(this.props.match.params.season),\r\n            season_name: getSeasonLabelFromSeasonNumber(parseInt(this.props.match.params.season))\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log('prev prop', prevProps);\r\n        console.log('prev prop', prevProps.match.params);\r\n        console.log('prev', prevState);\r\n        console.log('new', this.props.match.params.season);\r\n        if (prevProps.match.params.season !== this.props.match.params.season) {\r\n            this.setState({\r\n                year: parseInt(this.props.match.params.year),\r\n                season_num: parseInt(this.props.match.params.season),\r\n                season_name: getSeasonLabelFromSeasonNumber(parseInt(this.props.match.params.season))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Seasons\">\r\n                <div className=\"title-segment\">\r\n                    <CyberLink to={getPrevSeasonUrl(this.props.branch, this.state.year, this.state.season_num)}>\r\n                        <CyberButton variant=\"outlined\">\r\n                            <FontAwesomeIcon icon={faArrowLeft}/>\r\n                        </CyberButton>\r\n                    </CyberLink>\r\n                    <h1>\r\n                        {getSeasonIcon(this.state.season_num)} {this.state.season_name} {this.state.year}\r\n                    </h1>\r\n                    <CyberLink to={getNextSeasonUrl(this.props.branch, this.state.year, this.state.season_num)}>\r\n                        <CyberButton variant=\"outlined\">\r\n                            <FontAwesomeIcon icon={faArrowRight}/>\r\n                        </CyberButton>\r\n                    </CyberLink>\r\n                </div>\r\n                {browseSeasonTitlesFromBranch(this.props.branch, this.state.year, this.state.season_num)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(DisplaySeason)\r\n","import {Anime, CDNCoverImages, CoverImages, UserAnimeEntry} from \"../../../../models\";\r\nimport {CYBER_GENESIS_URL, getPriorityLabel, USER_ANIME_STATUSES} from \"../../../../globals\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCalendarAlt, faCheck, faImage, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport {ANIME_DISPLAY} from \"../../../../urls\";\r\nimport AnimeEntryModalForm from \"../../forms/anime/AnimeEntryModalForm\";\r\nimport UpdateAnimeEpisodeButton from \"../../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport {getTitleCoverImage, isEmpty} from \"../../../functions\";\r\n\r\n\r\n// function getCoverImgUrl(entry) {\r\n//     const len_cdn_images = entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images];\r\n//     let img_url;\r\n//     if (len_cdn_images > 0) {\r\n//         let largest = 0;\r\n//         for (let x = 0; x < len_cdn_images; x++) {\r\n//             if (entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images][x][CDNCoverImages.size] > largest) {\r\n//                 largest = entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images][x][CDNCoverImages.size];\r\n//                 img_url = entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images][x][CDNCoverImages.thumbnail_url];\r\n//             }\r\n//         }\r\n//         console.log('url!!!', img_url);\r\n//         return img_url;\r\n//     } else {\r\n//         try {\r\n//             return `${CYBER_GENESIS_URL}${entry[UserAnimeEntry.anime][Anime.anime_cover_images][entry[UserAnimeEntry.anime][Anime.anime_cover_images].length - 1][CoverImages.image]}`\r\n//         } catch (e) {\r\n//             return ''\r\n//         }\r\n//     }\r\n//\r\n// }\r\n\r\n\r\n/**\r\n *\r\n * @param props.selected {String}\r\n * @param props.setSelected {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeListStatusButtons(props) {\r\n    const {selected, setSelected} = props;\r\n\r\n    return <>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton disabled={true}>All</CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.watching ? 'btn-contained-success' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.watching)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPlay}/><span className=\"btn-label\">Watching</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.completed ? 'btn-contained-primary' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.completed)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCheck}/><span className=\"btn-label\">Completed</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.on_hold ? 'btn-contained-warning' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.on_hold)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPause}/><span className=\"btn-label\">On Hold</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.dropped ? 'btn-contained-danger' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.dropped)\r\n                }}>\r\n                <FontAwesomeIcon icon={faStop}/><span className=\"btn-label\">Dropped</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.plan_to_watch ? 'btn-contained-default' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.plan_to_watch)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCalendarAlt}/><span className=\"btn-label\">Planned</span>\r\n            </CyberButton>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeListTableHead(props) {\r\n    const {list_owner} = props;\r\n    return <TableHead>\r\n        <TableRow>\r\n            <TableCell>#</TableCell>\r\n            <TableCell align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n            <TableCell align=\"center\" colSpan={list_owner ? 2 : 1}>Title</TableCell>\r\n            <TableCell align=\"center\">Score</TableCell>\r\n            <TableCell align=\"center\">Progress</TableCell>\r\n            <TableCell align=\"center\">Priority</TableCell>\r\n            <TableCell align=\"center\">Genres</TableCell>\r\n            <TableCell align=\"center\">Type</TableCell>\r\n            <TableCell align=\"center\">Rated</TableCell>\r\n            <TableCell align=\"center\">Started</TableCell>\r\n            <TableCell align=\"center\">Finished</TableCell>\r\n            <TableCell align=\"center\">Added</TableCell>\r\n            {/*<TableCell align=\"center\">Watch</TableCell>*/}\r\n        </TableRow>\r\n    </TableHead>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.index {Number}\r\n * @param props.entry {Object}\r\n * @param props.list_owner {Boolean}\r\n * @param props.list {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeListTableRow(props) {\r\n    const {index, entry, list_owner, list} = props;\r\n    let image_url;\r\n    if (!isEmpty(entry[UserAnimeEntry.anime]))\r\n        image_url = getTitleCoverImage(entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images],\r\n            entry[UserAnimeEntry.anime][Anime.anime_cover_images], true);\r\n\r\n    return entry[UserAnimeEntry.anime] ? <TableRow>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n            {index}\r\n        </TableCell>\r\n        <TableCell className={{width: '70px'}} align=\"center\">\r\n            <CyberLink to={ANIME_DISPLAY(entry[UserAnimeEntry.anime][Anime.id])} classNames=\"cover-img-link\">\r\n                <PreLoadImage src={image_url} alt={`Cover image`}/>\r\n            </CyberLink>\r\n        </TableCell>\r\n        <TableCell>\r\n            <CyberLink classNames=\"title-link\"\r\n                       to={ANIME_DISPLAY(entry[UserAnimeEntry.anime][Anime.id])}>\r\n                {entry[UserAnimeEntry.anime][Anime.title]}\r\n            </CyberLink>\r\n        </TableCell>\r\n        {list_owner ?\r\n            <TableCell>\r\n                <AnimeEntryModalForm\r\n                    id={entry[UserAnimeEntry.anime][Anime.id]}\r\n                    classNames=\"edit-btn\"\r\n                    user_anime_entry={entry}\r\n                    edit={true}\r\n                    list={list}/>\r\n            </TableCell> : null}\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary table-number\" size=\"small\"\r\n                  label={entry[UserAnimeEntry.score]}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserAnimeEntry.watched_episodes]}{' '}\r\n                    / {entry[UserAnimeEntry.anime][Anime.episodes]}\r\n                    {list_owner ?\r\n                        <UpdateAnimeEpisodeButton\r\n                            id={entry[UserAnimeEntry.anime][Anime.id]} entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\" size=\"small\"\r\n                  label={getPriorityLabel(entry[UserAnimeEntry.priority])}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserAnimeEntry.anime][Anime.genres_csv] ?\r\n                entry[UserAnimeEntry.anime][Anime.genres_csv].split(', ')\r\n                    .map(genre => (\r\n                        <Chip className=\"chip-primary genre\" size=\"small\"\r\n                              label={genre}/>\r\n                    )) : null}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\"\r\n                  label={entry[UserAnimeEntry.anime][Anime.type]} size=\"small\"/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\"\r\n                  label={entry[UserAnimeEntry.anime][Anime.rating_short]}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserAnimeEntry.start_date] ? <Moment date={entry[UserAnimeEntry.start_date]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserAnimeEntry.finish_date] ? <Moment date={entry[UserAnimeEntry.finish_date]}\r\n                                                         format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserAnimeEntry.date_added] ? <Moment date={entry[UserAnimeEntry.date_added]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        {/*<TableCell align=\"center\">*/}\r\n        {/*    <CyberButton classNames=\"btn-contained-secondary\"><FontAwesomeIcon*/}\r\n        {/*        icon={faPlay}/></CyberButton>*/}\r\n        {/*</TableCell>*/}\r\n    </TableRow> : null\r\n}","import {CoverImages, Manga, UserMangaEntry} from \"../../../../models\";\r\nimport {CYBER_GENESIS_URL, getPriorityLabel, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBookOpen, faCalendarAlt, faCheck, faImage, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport {ANIME_DISPLAY, MANGA_DISPLAY} from \"../../../../urls\";\r\nimport AnimeEntryModalForm from \"../../forms/anime/AnimeEntryModalForm\";\r\nimport UpdateAnimeEpisodeButton from \"../../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport MangaEntryModalForm from \"../../forms/manga/MangaEntryModalForm\";\r\nimport {UpdateMangaVolumeButton, UpdateMangaChapterButton} from \"../../forms/manga/UpdateMangaVolumeChapterButtons\";\r\n\r\n\r\nfunction getCoverImgUrl(entry) {\r\n    try {\r\n        return `${CYBER_GENESIS_URL}${entry[UserMangaEntry.manga][Manga.manga_cover_images][entry[UserMangaEntry.manga][Manga.manga_cover_images].length - 1][CoverImages.image]}`\r\n    } catch (e) {\r\n        return ''\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param props.selected {String}\r\n * @param props.setSelected {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListStatusButtons(props) {\r\n    const {selected, setSelected} = props;\r\n\r\n    return <>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton disabled={true}>All</CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.reading ? 'btn-contained-success' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.reading)\r\n                }}>\r\n                <FontAwesomeIcon icon={faBookOpen}/><span className=\"btn-label\">Reading</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.completed ? 'btn-contained-primary' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.completed)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCheck}/><span className=\"btn-label\">Completed</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.on_hold ? 'btn-contained-warning' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.on_hold)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPause}/><span className=\"btn-label\">On Hold</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.dropped ? 'btn-contained-danger' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.dropped)\r\n                }}>\r\n                <FontAwesomeIcon icon={faStop}/><span className=\"btn-label\">Dropped</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.plan_to_read ? 'btn-contained-default' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.plan_to_read)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCalendarAlt}/><span className=\"btn-label\">Planned</span>\r\n            </CyberButton>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListTableHead(props) {\r\n    const {list_owner} = props;\r\n    return <TableHead>\r\n        <TableRow>\r\n            <TableCell>#</TableCell>\r\n            <TableCell align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n            <TableCell align=\"center\" colSpan={list_owner ? 2 : 1}>Title</TableCell>\r\n            <TableCell align=\"center\">Score</TableCell>\r\n            <TableCell align=\"center\">Volumes</TableCell>\r\n            <TableCell align=\"center\">Chapters</TableCell>\r\n            <TableCell align=\"center\">Priority</TableCell>\r\n            <TableCell align=\"center\">Genres</TableCell>\r\n            <TableCell align=\"center\">Type</TableCell>\r\n            <TableCell align=\"center\">Started</TableCell>\r\n            <TableCell align=\"center\">Finished</TableCell>\r\n            <TableCell align=\"center\">Added</TableCell>\r\n            {/*<TableCell align=\"center\">Watch</TableCell>*/}\r\n        </TableRow>\r\n    </TableHead>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.index {Number}\r\n * @param props.entry {Object}\r\n * @param props.list_owner {Boolean}\r\n * @param props.list {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListTableRow(props) {\r\n    const {index, entry, list_owner, list} = props;\r\n\r\n    return entry[UserMangaEntry.manga] ? <TableRow>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n            {index}\r\n        </TableCell>\r\n        <TableCell className={{width: '70px'}} align=\"center\">\r\n            <CyberLink to={MANGA_DISPLAY(entry[UserMangaEntry.manga][Manga.id])} classNames=\"cover-img-link\">\r\n                <PreLoadImage src={getCoverImgUrl(entry)} alt={`Cover image`}/>\r\n            </CyberLink>\r\n        </TableCell>\r\n        <TableCell>\r\n            <CyberLink classNames=\"title-link\"\r\n                       to={MANGA_DISPLAY(entry[UserMangaEntry.manga][Manga.id])}>\r\n                {entry[UserMangaEntry.manga][Manga.title]}\r\n            </CyberLink>\r\n        </TableCell>\r\n        {list_owner ?\r\n            <TableCell>\r\n                <MangaEntryModalForm\r\n                    id={entry[UserMangaEntry.manga][Manga.id]}\r\n                    classNames=\"edit-btn\"\r\n                    user_manga_entry={entry}\r\n                    edit={true}\r\n                    list={list}/>\r\n            </TableCell> : null}\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary table-number\" size=\"small\"\r\n                  label={entry[UserMangaEntry.score]}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserMangaEntry.read_volumes]}{' '}\r\n                    / {entry[UserMangaEntry.manga][Manga.volumes]}\r\n                    {list_owner ?\r\n                        <UpdateMangaVolumeButton\r\n                            id={entry[UserMangaEntry.manga][Manga.id]}\r\n                            entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserMangaEntry.read_chapters]}{' '}\r\n                    / {entry[UserMangaEntry.manga][Manga.chapters]}\r\n                    {list_owner ?\r\n                        <UpdateMangaChapterButton\r\n                            id={entry[UserMangaEntry.manga][Manga.id]}\r\n                            entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\" size=\"small\"\r\n                  label={getPriorityLabel(entry[UserMangaEntry.priority])}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.manga][Manga.genres_csv] ?\r\n                entry[UserMangaEntry.manga][Manga.genres_csv].split(', ')\r\n                    .map(genre => (\r\n                        <Chip className=\"chip-primary genre\" size=\"small\"\r\n                              label={genre}/>\r\n                    )) : null}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\"\r\n                  label={entry[UserMangaEntry.manga][Manga.type]} size=\"small\"/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.start_date] ? <Moment date={entry[UserMangaEntry.start_date]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.finish_date] ? <Moment date={entry[UserMangaEntry.finish_date]}\r\n                                                         format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.date_added] ? <Moment date={entry[UserMangaEntry.date_added]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        {/*<TableCell align=\"center\">*/}\r\n        {/*    <CyberButton classNames=\"btn-contained-secondary\"><FontAwesomeIcon*/}\r\n        {/*        icon={faPlay}/></CyberButton>*/}\r\n        {/*</TableCell>*/}\r\n    </TableRow> : null\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/list.css'\r\nimport PropTypes from \"prop-types\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../layout/common/common\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {filterTitles, getFiltersFromBranch} from \"../../browse/functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {Anime, UserAnimeEntry, ApiResult, CoverImages, User} from \"../../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCalendarAlt, faCheck, faImage, faPause, faPlay, faPlus, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Moment from \"react-moment\";\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA,\r\n    CYBER_GENESIS_URL, FILTER_ANIME_INITIAL_VALUES, FILTER_MANGA_INITIAL_VALUES,\r\n    USER_ANIME_STATUSES, USER_MANGA_STATUSES\r\n} from \"../../../globals\";\r\nimport store from \"../../../store\";\r\nimport {cancelAnimeLoading, getAnime} from \"../../../actions/anime\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {ANIME_DISPLAY} from \"../../../urls\";\r\nimport AnimeEntryModalForm from \"../forms/anime/AnimeEntryModalForm\";\r\nimport {updateAnimeEpisode} from \"../../../actions/users\";\r\nimport UpdateAnimeEpisodeButton from \"../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport {getTitle} from \"../../display/functions\";\r\nimport {AnimeListStatusButtons, AnimeListTableHead, AnimeListTableRow} from \"./anime/tableView\";\r\nimport {getManga} from \"../../../actions/manga\";\r\nimport {getCharacter} from \"../../../actions/characters\";\r\nimport {getEroge} from \"../../../actions/eroge\";\r\nimport {MangaListStatusButtons, MangaListTableHead, MangaListTableRow} from \"./manga/tableView\";\r\n\r\n\r\nfunction getInitialSelected(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return USER_ANIME_STATUSES.watching;\r\n        case BRANCH_MANGA:\r\n            return USER_MANGA_STATUSES.reading;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nclass UserList extends Component {\r\n    static propTypes = {\r\n        /** params of the page, to get the user list id */\r\n        params: PropTypes.object.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of list_owner */\r\n        list_owner: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Redux prop of title_filters */\r\n        title_filters: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.setSelected = this.setSelected.bind(this);\r\n        this.state = {\r\n            list_pk: parseInt(this.props.params.id),\r\n            selected: getInitialSelected(this.props.branch),\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.visited_user[User.username]}'s ${this.props.branch} List`;\r\n        window.scrollTo(0, 0);\r\n        filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n            {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.setState({current_page: 1});\r\n            filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n                {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n        }\r\n        if (prevProps.params.id !== this.props.params.id) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({list_pk: parseInt(this.props.params.id)}, () => {\r\n                this.props.getUser(this.state.list_pk);\r\n                filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n                    {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n            });\r\n        }\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)) {\r\n            this.setState({current_page: page});\r\n            filterTitles(this.props.branch, page, this.props.title_filters, null,\r\n                {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.setState({selected: selected})\r\n    }\r\n\r\n    render() {\r\n        const list = {\r\n            user_list_pk: this.state.list_pk,\r\n            user_list_filter: this.state.selected\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"User-List\" container>\r\n                    {this.props.branch === BRANCH_ANIME ?\r\n                        <AnimeListStatusButtons selected={this.state.selected} setSelected={this.setSelected}/>\r\n                        : this.props.branch === BRANCH_MANGA ?\r\n                            <MangaListStatusButtons selected={this.state.selected} setSelected={this.setSelected}/>\r\n                            : null}\r\n\r\n                    {getFiltersFromBranch(this.props.branch, null, list)}\r\n\r\n                    {this.props.filtered_titles_loaded && this.props.visited_user_loaded ?\r\n                        <Grid item xs={12} className=\"list-container\">\r\n                            <TableContainer className=\"list-table\">\r\n                                <Table aria-label=\"user list table\">\r\n                                    {this.props.branch === BRANCH_ANIME ?\r\n                                        <AnimeListTableHead list_owner={this.props.list_owner}/>\r\n                                        : this.props.branch === BRANCH_MANGA ?\r\n                                            <MangaListTableHead list_owner={this.props.list_owner}/> : null}\r\n                                    <TableBody>\r\n                                        {this.props.filtered_titles[ApiResult.results].map((entry, x) => (\r\n                                            this.props.branch === BRANCH_ANIME ?\r\n                                                <AnimeListTableRow\r\n                                                    entry={entry}\r\n                                                    index={x + ((this.state.current_page * 100) - 99)}\r\n                                                    list_owner={this.props.list_owner}\r\n                                                    list={list}\r\n                                                />\r\n                                                : this.props.branch === BRANCH_MANGA ?\r\n                                                <MangaListTableRow\r\n                                                    entry={entry}\r\n                                                    index={x + ((this.state.current_page * 100) - 99)}\r\n                                                    list_owner={this.props.list_owner}\r\n                                                    list={list}\r\n                                                /> : null\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            <div className=\"pagination\">\r\n                                <Pagination\r\n                                    count={Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)}\r\n                                    color=\"primary\"\r\n                                    siblingCount={3}\r\n                                    page={this.state.current_page}\r\n                                    onChange={(type, page) => {\r\n                                        playClickSound();\r\n                                        if (page !== this.state.current_page)\r\n                                            this.goToPage(page);\r\n                                        else\r\n                                            this.setState({page_dialog_open: true})\r\n                                    }}\r\n                                />\r\n                                <GoToPageDialog\r\n                                    open={this.state.page_dialog_open}\r\n                                    current_page={this.state.current_page}\r\n                                    total_pages={Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)}\r\n                                    goToPage={this.goToPage}\r\n                                    onClose={this.closePageDialog}/>\r\n                            </div>\r\n                        </Grid> : this.props.titles_loading ?\r\n                            <Loading text={`${this.props.branch} List Loading`} offset={250}/> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_loading: state.auth.user_loading,\r\n    entry_loading: state.users.entry_loading, // This is here to rerender the small loading on the update episode btn\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(UserList)\r\n","import React from \"react\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\n\r\nimport '../../../assets/css/private_page.css'\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n/**\r\n *\r\n * @param {String} props.username\r\n * @param {String} props.branch\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function PrivatePage(props) {\r\n    const {text} = props;\r\n\r\n    return <>\r\n        <CyberNavbar/>\r\n        <div id=\"Private-Page\">\r\n            <Grid container className=\"container\">\r\n                <Grid xs={12}>\r\n                    <h1>404</h1>\r\n                    <p>{text}</p>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </>\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport UserList from \"../UserList\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {PrivatePage} from \"../PrivateList\";\r\n\r\n\r\nclass AnimeList extends Component {\r\n    componentDidMount() {\r\n        this.props.getUser(parseInt(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n            list_owner || !this.props.visited_user[User.profile][Profile.is_anime_list_private] ?\r\n                <UserList\r\n                    branch={BRANCH_ANIME}\r\n                    params={this.props.match.params}\r\n                    list_owner={list_owner}\r\n                    titles_loading={this.props.anime_loading}\r\n                    filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n                    filtered_titles={this.props.filtered_anime}\r\n                    title_filters={this.props.anime_filters}\r\n                /> : <PrivatePage text={`${this.props.visited_user[User.username]}'s ${BRANCH_ANIME} List is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_filters: state.cookies.anime_list_filters\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(AnimeList)\r\n","import React from 'react'\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\n\r\nexport function getDataScoreDistribution(statistics) {\r\n    let parsed_data = statistics['anime_score_distribution'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]);\r\n        labels.push(parsed_data_keys[x]);\r\n    }\r\n\r\n    stat_data.reverse();\r\n    labels.reverse();\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '# of Anime',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRatedVsTimeSpent(statistics) {\r\n    let parsed_data = statistics['anime_rated_vs_time_spent'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        stat_data.push((parsed_data[parsed_data_keys[x]] / 60).toFixed(2));\r\n        labels.push(parsed_data_keys[x]);\r\n    }\r\n\r\n    stat_data.reverse();\r\n    labels.reverse();\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '# of Hours',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRatedVsEpisodeCount(statistics) {\r\n    let parsed_data = statistics['anime_rated_vs_episode_count'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        if (parsed_data_keys[x] === '101+') continue;\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]['total_anime']);\r\n        labels.push(parsed_data_keys[x]);\r\n        stat_mean_score.push(\r\n            (parsed_data[parsed_data_keys[x]]['total_score'] / parsed_data[parsed_data_keys[x]]['total_anime'])\r\n                .toFixed(2))\r\n    }\r\n\r\n    stat_data.push(parsed_data['101+']['total_anime']);\r\n    labels.push('101+');\r\n    stat_mean_score.push((parsed_data['101+']['total_score'] / parsed_data['101+']['total_anime'])\r\n        .toFixed(2));\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nexport function getTableHistory(statistics) {\r\n    let parsed_data = statistics['anime_completed_history'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n    let months_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    let max = 0;\r\n    let sum = 0;\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        let month_keys = Object.keys(parsed_data[parsed_data_keys[x]]);\r\n        for (let y = 0; y < month_keys.length; y++) {\r\n            sum = parsed_data[parsed_data_keys[x]][month_keys[y]][0] +\r\n                parsed_data[parsed_data_keys[x]][month_keys[y]][1];\r\n            if (max < sum)\r\n                max = sum\r\n        }\r\n    }\r\n\r\n    parsed_data_keys.reverse();\r\n\r\n    return <Table id=\"completed-history-table\" bordered>\r\n        <thead>\r\n        <tr>\r\n            <td>{null}</td>\r\n            {months_labels.map(month => (<td key={month}>{month}</td>))}\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {parsed_data_keys.map(year => (\r\n            <tr key={year}>\r\n                <td>{year}</td>\r\n                {months.map(month => (\r\n                    parsed_data[year][month] ?\r\n                        <td key={month} style={{\r\n                            backgroundColor: \"rgba(54, 162, 235, \" +\r\n                                ((parsed_data[year][month][0] + parsed_data[year][month][1]) / max).toFixed(2)\r\n                                    .toString() + \")\"\r\n                        }}>\r\n                            <span>{parsed_data[year][month][0] + parsed_data[year][month][1]} <Chip className=\"chip-primary\" size=\"small\" label={parsed_data[year][month][0]}/> <Chip className=\"chip-danger\" size=\"small\" label={parsed_data[year][month][1]}/></span>\r\n                        </td> : <td key={month}>{null}</td>\r\n                ))}\r\n            </tr>\r\n        ))}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\n\r\nexport function getDataFavoriteYears(statistics) {\r\n    let parsed_data = statistics['anime_favorite_years'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        labels.push(parsed_data_keys[x]);\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]['total_anime']);\r\n        stat_mean_score.push((parsed_data[parsed_data_keys[x]]['total_score'] /\r\n            parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2));\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nfunction compareByTotal(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['total_anime'];\r\n    const second = a['total_anime'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\n\r\nfunction compareByMean(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['mean_score'];\r\n    const second = a['mean_score'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\n\r\nexport function getDataFavoriteGenres(statistics, order) {\r\n    let parsed_data = statistics['anime_favorite_genres'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        data.push({\r\n            'label': parsed_data_keys[x],\r\n            'total_anime': parsed_data[parsed_data_keys[x]]['total_anime'],\r\n            'mean_score': (parsed_data[parsed_data_keys[x]]['total_score'] /\r\n                parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2),\r\n        })\r\n    }\r\n\r\n    if (order === 'Mean')\r\n        data.sort(compareByMean);\r\n    else\r\n        data.sort(compareByTotal);\r\n\r\n    for (let x = 0; x < data.length; x++) {\r\n        labels.push(data[x]['label']);\r\n        stat_data.push(data[x]['total_anime']);\r\n        stat_mean_score.push(data[x]['mean_score']);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nexport function getDataFavoriteTypes(statistics) {\r\n    let parsed_data = statistics['anime_favorite_types'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        data.push({\r\n            'label': parsed_data_keys[x],\r\n            'total_anime': parsed_data[parsed_data_keys[x]]['total_anime'],\r\n            'mean_score': (parsed_data[parsed_data_keys[x]]['total_score'] /\r\n                parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2),\r\n        })\r\n    }\r\n\r\n    for (let x = 0; x < data.length; x++) {\r\n        labels.push(data[x]['label']);\r\n        stat_data.push(data[x]['total_anime']);\r\n        stat_mean_score.push(data[x]['mean_score']);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nimport {updateAndGetUserAnimeStatistics} from \"../../../actions/users\";\r\nimport {\r\n    getDataFavoriteGenres,\r\n    getDataFavoriteTypes,\r\n    getDataFavoriteYears,\r\n    getDataRatedVsEpisodeCount,\r\n    getDataRatedVsTimeSpent,\r\n    getDataScoreDistribution,\r\n    getTableHistory\r\n} from \"./data_calculations\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {filterTitles} from \"../../browse/functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\n\r\nconst years_calc = 1000 * 60 * 60 * 24 * 30 * 12;\r\n\r\n\r\nclass Statistics extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.getFavoriteGenres = this.getFavoriteGenres.bind(this);\r\n        this.sortFavoriteGenres = this.sortFavoriteGenres.bind(this);\r\n        this.state = {\r\n            favorite_genres_sorted_by: 'Total',\r\n            data_favorite_genres: {},\r\n            data_favorite_genres_options: {maintainAspectRatio: false},\r\n            updated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Statistics';\r\n        window.scrollTo(0, 0);\r\n\r\n        this.props.updateAndGetUserAnimeStatistics(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (!this.state.updated)\r\n            this.getFavoriteGenres(this.state.favorite_genres_sorted_by);\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            window.scrollTo(0, 0);\r\n            this.props.updateAndGetUserAnimeStatistics(this.props.match.params.id);\r\n        }\r\n    }\r\n\r\n    sortFavoriteGenres() {\r\n        if (this.state.favorite_genres_sorted_by === 'Total')\r\n            this.getFavoriteGenres('Mean');\r\n        else\r\n            this.getFavoriteGenres('Total');\r\n    }\r\n\r\n    getFavoriteGenres(order) {\r\n        try {\r\n            let data_and_options = getDataFavoriteGenres(this.props.user_anime_statistics['user_statistics'], order);\r\n            this.setState({\r\n                favorite_genres_sorted_by: order,\r\n                data_favorite_genres: data_and_options[0],\r\n                data_favorite_genres_options: data_and_options[1],\r\n                updated: true\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let data_sources = {};\r\n        let data_rated_vs_time_spent = {};\r\n        let data_rated_vs_episode_count = {};\r\n        let data_rated_vs_episode_count_options = {maintainAspectRatio: false};\r\n        let data_completed_history;\r\n        let data_favorite_years = {};\r\n        let data_favorite_years_options = {maintainAspectRatio: false};\r\n        let data_favorite_types = {};\r\n        let data_favorite_types_options = {maintainAspectRatio: false};\r\n        let completed_percent_from_all_anime = 0;\r\n        let finished_percent_from_all_anime = 0;\r\n        let episodes_percent_from_all_episodes = 0;\r\n        let minutes_percent_from_all_minutes = 0;\r\n        let all_anime_total_hours = 0;\r\n        let mean_score;\r\n        let hours_watching;\r\n        let years_watching;\r\n        let years_until_completion = 0;\r\n\r\n        try {\r\n            data_sources = getDataScoreDistribution(this.props.user_anime_statistics['user_statistics']);\r\n            data_rated_vs_time_spent = getDataRatedVsTimeSpent(this.props.user_anime_statistics['user_statistics']);\r\n            data_completed_history = getTableHistory(this.props.user_anime_statistics['user_statistics']);\r\n            let data_and_options = getDataRatedVsEpisodeCount(this.props.user_anime_statistics['user_statistics']);\r\n            data_rated_vs_episode_count = data_and_options[0];\r\n            data_rated_vs_episode_count_options = data_and_options[1];\r\n            data_and_options = getDataFavoriteYears(this.props.user_anime_statistics['user_statistics']);\r\n            data_favorite_years = data_and_options[0];\r\n            data_favorite_years_options = data_and_options[1];\r\n            data_and_options = getDataFavoriteTypes(this.props.user_anime_statistics['user_statistics']);\r\n            data_favorite_types = data_and_options[0];\r\n            data_favorite_types_options = data_and_options[1];\r\n            // completed_percent_from_all_anime = ((this.props.user_anime_statistics['anime_completed'] /\r\n            //     anime_data_statistics['total_anime']) * 100).toFixed(1);\r\n            // finished_percent_from_all_anime = ((this.props.user_anime_statistics['anime_total_finished'] /\r\n            //     anime_data_statistics['total_anime']) * 100).toFixed(1);\r\n            hours_watching = (this.props.user_anime_statistics['anime_mins_spent_watching'] / 60).toFixed(1);\r\n            mean_score = this.props.user_anime_statistics['anime_mean_score'].toFixed(1);\r\n            // episodes_percent_from_all_episodes = ((this.props.user_anime_statistics['anime_episodes_watched'] /\r\n            //     anime_data_statistics['total_episodes']) * 100).toFixed(1);\r\n            // all_anime_total_hours = (anime_data_statistics['total_minutes'] / 60).toFixed(1);\r\n            minutes_percent_from_all_minutes = ((hours_watching / all_anime_total_hours) * 100).toFixed(1);\r\n\r\n            const date1 = new Date(this.props.user_anime_statistics['anime_started_watching_on']);\r\n            const date2 = new Date();\r\n            const diffTime = Math.abs(date2 - date1);\r\n            years_watching = (diffTime / years_calc).toFixed(1);\r\n            years_until_completion = ((100 / finished_percent_from_all_anime) * years_watching).toFixed(1);\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"Statistics\" container>\r\n                    <Grid item xs={12}>\r\n                        <h1>Statistics</h1>\r\n                    </Grid>\r\n\r\n                    {!this.props.user_statistics_loading ? <>\r\n                        {/*<Grid item xs={12} md={6}>*/}\r\n                        {/*    <table className=\"generic-stats-table\">*/}\r\n                        {/*        <tbody>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_watching']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_completed']} of{' '}*!/*/}\r\n                        {/*            /!*    {anime_data_statistics['total_anime']} ({completed_percent_from_all_anime}%)</p>*!/*/}\r\n                        {/*            /!*</td>*!/*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_on_hold']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_dropped']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td>*/}\r\n                        {/*                <p className=\"color-white\">{this.props.user_anime_statistics['anime_plan_to_watch']}</p>*/}\r\n                        {/*            </td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr className=\"text-right\">*/}\r\n                        {/*            <td><Chip label={'Total Entries'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_total_entries']}</p>*/}\r\n                        {/*            </td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        </tbody>*/}\r\n                        {/*    </table>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={12} md={6}>*/}\r\n                        {/*        <table className=\"generic-stats-table\">*/}\r\n                        {/*            <tbody>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Watching since'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">*/}\r\n                        {/*                    <Moment format=\"DD MMM YYYY\"*/}\r\n                        {/*                            date={this.props.user_anime_statistics['anime_started_watching_on']}/>{' '}*/}\r\n                        {/*                            ({years_watching} years)</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Total Finished'}/></td>*/}\r\n                        {/*                /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_total_finished']} of*!/*/}\r\n                        {/*                /!*    {' '}{anime_data_statistics['total_anime']} (*!/*/}\r\n                        {/*                /!*    {finished_percent_from_all_anime}%)</p></td>*!/*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Finish rate'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{years_until_completion} years until full*/}\r\n                        {/*                    completion</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Mean score'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{mean_score}</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Total episodes'}/></td>*/}\r\n                        {/*                /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_episodes_watched']}*!/*/}\r\n                        {/*                /!*    {' '}of {anime_data_statistics['total_episodes']}{' '}*!/*/}\r\n                        {/*                /!*    ({episodes_percent_from_all_episodes}%)</p></td>*!/*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Total hours'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{hours_watching} of {all_anime_total_hours}{' '}*/}\r\n                        {/*                    ({minutes_percent_from_all_minutes}%)</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            </tbody>*/}\r\n                        {/*        </table>*/}\r\n                        {/*    </Grid>*/}\r\n\r\n                        <Grid item xs={12}>\r\n                            <div className=\"table-container\">\r\n                                <h5 id=\"History\" className=\"text-center\">History</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"History\">*/}\r\n                                {/*    Total number of Anime you have finished in every month. Entries that have unknown*/}\r\n                                {/*    finish date are not taken into account*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <p>\r\n                                    <Chip className=\"chip-default\" size=\"small\" label={'#'}/> Total&nbsp;&nbsp;\r\n                                    <Chip className=\"chip-primary\" size=\"small\" label={'#'}/> Completed&nbsp;&nbsp;\r\n                                    <Chip className=\"chip-danger\" size=\"small\" label={'#'}/> Dropped</p>\r\n                                {data_completed_history}\r\n                            </div>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Score-Distribution\" className=\"text-center\">Score Distribution</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Score-Distribution\">*/}\r\n                                {/*    How many Anime you have scored in each score grade. Every scored entry is taken*/}\r\n                                {/*    into account.*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_sources}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={{maintainAspectRatio: false}}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Rated-Time-Spent\" className=\"text-center\">Rated vs Time spent</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Rated-Time-Spent\">*/}\r\n                                {/*    How much time you have spent watching in all score grades. Every scored entry is*/}\r\n                                {/*    taken into account. Anime with no episodes are not taken into account.*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_rated_vs_time_spent}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={{maintainAspectRatio: false}}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Rated-Episode-Count\" className=\"text-center\">Rated vs Episode count</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Rated-Episode-Count\">*/}\r\n                                {/*    Number of Anime you have completed in various episode formats. Only \"Completed\"*/}\r\n                                {/*    entries are taken, anime with unknown episodes are not taken into account*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_rated_vs_episode_count}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_rated_vs_episode_count_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Types\" className=\"text-center\">Favorite Types</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Types\">*/}\r\n                                {/*    Number of Anime you have in your list from various types. All anime except the ones*/}\r\n                                {/*    in \"Plan to Watch\" are taken into the calculation, entries that are not scored are*/}\r\n                                {/*    not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_favorite_types}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_favorite_types_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Years\" className=\"text-center\">Favorite Years</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Years\">*/}\r\n                                {/*    Number of Anime you have in your list from various years. All anime except the ones*/}\r\n                                {/*    in \"Plan to Watch\" are taken into the calculation, entries that are not scored are*/}\r\n                                {/*    not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_favorite_years}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_favorite_years_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Genres\" className=\"text-center\">Favorite Genres</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Genres\">*/}\r\n                                {/*    Number of Anime you have in your list from various genres. All anime except the*/}\r\n                                {/*    ones in \"Plan to Watch\" are taken into the calculation, entries that are not scored*/}\r\n                                {/*    are not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Button variant=\"outlined\"\r\n                                        onClick={this.sortFavoriteGenres}>{this.state.favorite_genres_sorted_by}</Button>\r\n                                <Bar\r\n                                    data={this.state.data_favorite_genres}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={this.state.data_favorite_genres_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </> : <Loading text={'Statistics Loading'} offset={150}/>}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_statistics: state.users.user_anime_statistics,\r\n    user_statistics_loading: state.users.user_statistics_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateAndGetUserAnimeStatistics})(Statistics)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Moment from 'react-moment'\r\nimport moment from 'moment'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport {getVisitedUserAnimeHistory, getVisitedUserMangaHistory} from '../../../actions/users'\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult, User} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles, getTabName} from \"../../browse/functions\";\r\nimport {getBrowseGridListCols} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\n\r\n\r\nfunction displayHistory(user_history, branch) {\r\n    let lastId = 0;\r\n    let newId = 0;\r\n    let lastMonth = 0;\r\n    let lastDate = 0;\r\n    let lastYear = 0;\r\n    let formatted = [];\r\n    let title;\r\n    let item;\r\n\r\n    try {\r\n        for (let x = 0; x < user_history['results'].length; x++) {\r\n\r\n            let obj = {};\r\n            let nextYear = moment(user_history['results'][x]['timestamp']).date();\r\n            let nextMonth = moment(user_history['results'][x]['timestamp']).month() + 1;\r\n            let nextDate = moment(user_history['results'][x]['timestamp']).date();\r\n\r\n            if (nextYear != lastYear || nextMonth != lastMonth || nextDate != lastDate) {\r\n                lastYear = moment(user_history['results'][x]['timestamp']).date();\r\n                lastMonth = moment(user_history['results'][x]['timestamp']).month() + 1;\r\n                lastDate = moment(user_history['results'][x]['timestamp']).date();\r\n                if (branch === BRANCH_ANIME) {\r\n                    lastId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    title = user_history['results'][x]['anime_list_entry']['anime'];\r\n                    item = user_history['results'][x]['episode'];\r\n                }\r\n                else if (branch === BRANCH_MANGA) {\r\n                    lastId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n                    title = user_history['results'][x]['manga_list_entry']['manga'];\r\n                    item = user_history['results'][x]['chapter'];\r\n                }\r\n                obj = {\r\n                    date: user_history['results'][x]['timestamp'],\r\n                    entries: [\r\n                        {\r\n                            title: title,\r\n                            history: [{\r\n                                item: item,\r\n                                timestamp: user_history['results'][x]['timestamp']\r\n                            }]\r\n                        }\r\n                    ]\r\n                };\r\n                formatted.push(obj)\r\n            } else {\r\n                if (branch === BRANCH_ANIME) {\r\n                    newId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    title = user_history['results'][x]['anime_list_entry']['anime'];\r\n                    item = user_history['results'][x]['episode'];\r\n                }\r\n                else if (branch === BRANCH_MANGA) {\r\n                    newId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n                    title = user_history['results'][x]['manga_list_entry']['manga'];\r\n                    item = user_history['results'][x]['chapter'];\r\n                }\r\n\r\n                if (newId != lastId) {\r\n                    if (branch === BRANCH_ANIME)\r\n                        lastId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    else if (branch === BRANCH_MANGA)\r\n                        lastId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n\r\n                    formatted[formatted.length - 1]['entries'].push({\r\n                        title: title,\r\n                        history: [{\r\n                            item: item,\r\n                            timestamp: user_history['results'][x]['timestamp']\r\n                        }]\r\n                    })\r\n                } else {\r\n                    let last = formatted.length - 1;\r\n                    let lastHistory = formatted[last]['entries'].length - 1;\r\n                    formatted[last]['entries'][lastHistory]['history'].push({\r\n                        item: item,\r\n                        timestamp: user_history['results'][x]['timestamp']\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    } catch (e) {\r\n        return null\r\n    }\r\n\r\n    // noinspection CheckTagEmptyBody\r\n    return formatted.map((date, i) => (\r\n        <li key={i} className=\"timeline-event\">\r\n            <label className=\"timeline-event-icon\"></label>\r\n            <div className=\"timeline-event-copy\">\r\n                <p className=\"timeline-event-thumbnail\">\r\n                    <Moment format=\"Do MMMM YYYY - dddd\" date={date['date']}/></p>\r\n                {date['entries'].map((entry, x) => (\r\n                    <div key={x} className=\"box-light timeline-history-entry\">\r\n                        <div className=\"timeline-history-segment timeline-history-segment-card\">\r\n                            <TitleCard\r\n                                branch={branch}\r\n                                title={entry['title']}\r\n                            />\r\n                        </div>\r\n                        <div className=\"timeline-history-segment timeline-history-segment-episodes\">\r\n                            {entry['history'].map((history, y) => (\r\n                                <p key={y}>{branch === BRANCH_ANIME ? 'Episode ' :\r\n                                    branch === BRANCH_MANGA ? 'Chapter ' : null}\r\n                                    <Chip className=\"chip-info\" size=\"small\" label={history['item']}/> completed\r\n                                    at <Chip className=\"chip-info\" size=\"small\" label={<Moment format=\"HH:mm:ss\"\r\n                                        date={history['timestamp']}/>}/>\r\n                                </p>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </li>\r\n    ))\r\n}\r\n\r\n\r\nclass DisplayUserHistory extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        visited_user_id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.visited_user[User.username]} History`;\r\n        window.scrollTo(0, 0);\r\n\r\n        if (this.props.branch === BRANCH_ANIME) this.props.getVisitedUserAnimeHistory(this.props.visited_user_id);\r\n        else if (this.props.branch === BRANCH_MANGA) this.props.getVisitedUserMangaHistory(this.props.visited_user_id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.current_page !== this.state.current_page)\r\n            window.scrollTo(0, 0);\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        let total;\r\n        if (this.props.branch === BRANCH_ANIME)\r\n            total = Math.ceil(this.props.user_anime_history[ApiResult.count] / 100);\r\n        else if (this.props.branch === BRANCH_MANGA)\r\n            total = Math.ceil(this.props.user_manga_history[ApiResult.count] / 100);\r\n\r\n        if (page > 0 && page <= total) {\r\n            this.setState({current_page: page});\r\n            if (this.props.branch === BRANCH_ANIME)\r\n                this.props.getVisitedUserAnimeHistory(this.props.match.params.id, page);\r\n            else if (this.props.branch === BRANCH_MANGA)\r\n                this.props.getVisitedUserMangaHistory(this.props.match.params.id, page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let history;\r\n\r\n        try {\r\n            if (this.props.branch === BRANCH_ANIME) {\r\n                history = displayHistory(this.props.user_anime_history, this.props.branch);\r\n            }\r\n            else if (this.props.branch === BRANCH_MANGA) {\r\n                history = displayHistory(this.props.user_manga_history, this.props.branch);\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"History-Container\" container>\r\n                    <Grid item xs={12}>\r\n                        <h1>{this.props.branch} History</h1>\r\n                    </Grid>\r\n                    {!this.props.user_info_loading ? <>\r\n                        <Grid item xs={false} lg={1}/>\r\n                        <Grid item xs={12} lg={10}>\r\n                            <ul className=\"timeline\">\r\n                                {history}\r\n                            </ul>\r\n                        </Grid>\r\n                        </>\r\n                        : <Loading text={'History Loading'}/>}\r\n                    {!this.props.user_info_loading ?\r\n                        <div className=\"pagination\">\r\n                            <Pagination\r\n                                count={Math.ceil(this.props.user_anime_history[ApiResult.count] / 100)}\r\n                                color=\"primary\"\r\n                                siblingCount={3}\r\n                                page={this.state.current_page}\r\n                                onChange={(type, page) => {\r\n                                    playClickSound();\r\n                                    if (page !== this.state.current_page)\r\n                                        this.goToPage(page);\r\n                                    else\r\n                                        this.setState({page_dialog_open: true})\r\n                                }}\r\n                            />\r\n                            <GoToPageDialog\r\n                                open={this.state.page_dialog_open}\r\n                                current_page={this.state.current_page}\r\n                                total_pages={Math.ceil(this.props.user_anime_history[ApiResult.count] / 100)}\r\n                                goToPage={this.goToPage}\r\n                                onClose={this.closePageDialog}/>\r\n                        </div> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_anime_history: state.users.user_anime_history,\r\n    user_manga_history: state.users.user_manga_history,\r\n    user_info_loading: state.users.user_info_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser, getVisitedUserAnimeHistory, getVisitedUserMangaHistory})(DisplayUserHistory)","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Moment from 'react-moment'\r\nimport moment from 'moment'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport {getVisitedUserAnimeHistory, getVisitedUserMangaHistory} from '../../../actions/users'\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult, Profile, User} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles, getTabName} from \"../../browse/functions\";\r\nimport {getBrowseGridListCols} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport DisplayUserHistory from \"./DisplayUserHistory\";\r\nimport UserList from \"../user_list/UserList\";\r\nimport {PrivatePage} from \"../user_list/PrivateList\";\r\n\r\n\r\nfunction isHistoryPrivate(branch, visited_user) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return visited_user[User.profile][Profile.is_anime_history_private];\r\n        case BRANCH_MANGA:\r\n            return visited_user[User.profile][Profile.is_manga_history_private];\r\n        default:\r\n            return true\r\n    }\r\n}\r\n\r\n\r\nclass History extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `History`;\r\n        window.scrollTo(0, 0);\r\n\r\n        this.props.getUser(this.props.match.params.id);\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        console.log('this.props.visited_user', this.props.visited_user)\r\n        console.log('this.props.user', this.props.user)\r\n        // console.log('this.props.visited_user[User.id]', this.props.visited_user[User.id])\r\n        // console.log('this.props.user[User.id]', this.props.user[User.id])\r\n        console.log('list_owner', list_owner)\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n            list_owner || !isHistoryPrivate(this.props.branch, this.props.visited_user) ?\r\n                <DisplayUserHistory branch={this.props.branch} visited_user_id={this.props.match.params.id}/> :\r\n                <PrivatePage text={`${this.props.visited_user[User.username]}'s ${this.props.branch} History is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_anime_history: state.users.user_anime_history,\r\n    user_manga_history: state.users.user_manga_history,\r\n    user_info_loading: state.users.user_info_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(History)","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport UserList from \"../UserList\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport {PrivatePage} from \"../PrivateList\";\r\n\r\n\r\nclass MangaList extends Component {\r\n    componentDidMount() {\r\n        this.props.getUser(parseInt(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n        list_owner || !this.props.visited_user[User.profile][Profile.is_manga_list_private] ?\r\n            <UserList\r\n                branch={BRANCH_MANGA}\r\n                params={this.props.match.params}\r\n                list_owner={list_owner}\r\n                titles_loading={this.props.manga_loading}\r\n                filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n                filtered_titles={this.props.filtered_manga}\r\n                title_filters={this.props.manga_filters}\r\n            /> : <PrivatePage text={`${this.props.visited_user[User.username]}'s ${BRANCH_MANGA} List is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_filters: state.cookies.manga_list_filters\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(MangaList)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {getAnimeFranchise} from '../../../actions/anime'\r\n\r\nimport FranchiseTree from \"./FranchiseTree\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport CyberHeader from \"../../layout/navbar/CyberHeader\";\r\nimport {FRANCHISES_TAB_NAME} from \"../../../globals\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {AnimeFranchise} from \"../../../models\";\r\nimport Loading from \"../../layout/common/Loading\";\r\n\r\nimport '../../../assets/css/franchises.css'\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass FranchisesHome extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = FRANCHISES_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getAnimeFranchise(this.props.match.params.id);\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        // document.title = `${current_anime_franchise['title']}`;\r\n        let titles = [];\r\n        let avg_score;\r\n\r\n        // try {\r\n        //     if (current_anime_franchise['anime_franchise'].length > 0)\r\n        //         titles = current_anime_franchise['anime_franchise'];\r\n        //     avg_score = current_anime_franchise['average_score'].toFixed(2)\r\n        // } catch (e) {\r\n        // }\r\n\r\n        return (\r\n            <div id=\"Display-Franchise\">\r\n                <CyberHeader/>\r\n                {!isEmpty(this.props.anime_franchise) ?\r\n                    <FranchiseTree titles={this.props.anime_franchise[AnimeFranchise.anime_franchise]}/>\r\n                : this.props.anime_franchise_loading ? <Loading text={'Franchise Loading'}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise, getLoggedInUserAnimeEntryStatuses})(FranchisesHome)","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Manga, MangaData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport manga from \"../../../../reducers/manga\";\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.recently_added_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', manga_data[MangaData.recently_added_manga])}\r\n\r\n                    {manga_data[MangaData.recently_added_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction RecentlyDownloaded(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.recently_downloaded_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', manga_data[MangaData.recently_added_manga])}\r\n                    {manga_data[MangaData.recently_downloaded_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopUpcoming(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    console.log('mangadata:', manga_data);\r\n    console.log('MangaData.top_upcoming_manga:', manga_data[MangaData.top_upcoming_manga]);\r\n    console.log('manga_data_loaded:', manga_data_loaded);\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Upcoming Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_upcoming_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_upcoming_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScoredMal(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_scored_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_scored_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction MostPopularMal(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.most_popular_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.most_popular_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2010s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_2010s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_2010s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2000s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2000s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_2000s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_2000s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top90s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1990s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_90s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_90s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top80s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1980s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_80s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_80s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top70s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1970s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_70s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_70s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopMangaTabs(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    {/*<Tab label={<p>Recently Downloaded</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>*/}\r\n                    <Tab label={<p>Top Upcoming</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Score</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Most popular</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2010s</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2000s</p>} {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 90s</p>} {...a11yProps(6)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 80s</p>} {...a11yProps(7)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 70s</p>} {...a11yProps(8)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <RecentlyAdded\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                {/*<TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>*/}\r\n                {/*    <RecentlyDownloaded*/}\r\n                {/*        manga_data={manga_data}*/}\r\n                {/*        manga_loading={manga_loading}*/}\r\n                {/*        manga_data_loaded={manga_data_loaded}*/}\r\n                {/*        user_manga_entry_statuses={user_manga_entry_statuses}*/}\r\n                {/*    />*/}\r\n                {/*</TabPanel>*/}\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <TopUpcoming\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopScoredMal\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <MostPopularMal\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <Top2010s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={5} dir={theme.direction}>\r\n                    <Top2000s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={6} dir={theme.direction}>\r\n                    <Top90s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={7} dir={theme.direction}>\r\n                    <Top80s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={8} dir={theme.direction}>\r\n                    <Top70s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty} from \"../../functions\";\r\nimport {MANGA_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Manga, MangaData} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {TopMangaTabs} from \"./tabs/TopMangaTabs\";\r\n\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\nfunction CurrentSeason(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    const current_year = new Date().getFullYear();\r\n    let current_month = new Date().getMonth() + 1;\r\n    let current_season_number = 1;\r\n    if (current_month >= 1 && current_month <= 3) current_season_number = 1;\r\n    else if (current_month >= 4 && current_month <= 6) current_season_number = 2;\r\n    else if (current_month >= 7 && current_month <= 9) current_season_number = 3;\r\n    else if (current_month >= 10 && current_month <= 12) current_season_number = 4;\r\n    const current_season = getSeasonLabelFromSeasonNumber(current_season_number);\r\n\r\n    const season_icon_and_class = getIconAndClassFromSeasonNumber(current_season_number);\r\n    return <Grid xs={12} id=\"Current-Season\">\r\n        <div className=\"current-season-header\">\r\n            <h3>\r\n                Current Season{' '}\r\n                <CyberLink to={MANGA_SEASON_DISPLAY(current_year, current_season_number)}>\r\n                    {current_year} {current_season}\r\n                </CyberLink>{' '}\r\n                <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                 className={season_icon_and_class.className}/>\r\n            </h3>\r\n        </div>\r\n        <div id=\"season-titles-container\" className=\"current-season-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.current_manga_season] ?\r\n                <div className=\"current-season-titles-wrapper\">\r\n                    {manga_data[MangaData.current_manga_season].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"current-season-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\n\r\nclass TopManga extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <CurrentSeason\r\n                manga_data={this.props.manga_data}\r\n                manga_loading={this.props.manga_loading}\r\n                manga_data_loaded={this.props.manga_data_loaded}\r\n                user_manga_entry_statuses={this.props.user_manga_entry_statuses}\r\n            />\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopMangaTabs\r\n                manga_data={this.props.manga_data}\r\n                manga_loading={this.props.manga_loading}\r\n                manga_data_loaded={this.props.manga_data_loaded}\r\n                user_manga_entry_statuses={this.props.user_manga_entry_statuses}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_data: state.manga.manga_data,\r\n    manga_loading: state.manga.manga_loading,\r\n    manga_data_loaded: state.manga.manga_data_loaded,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopManga)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {MANGA_TAB_NAME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport {getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\nimport {getMangaDataForHomePage} from \"../../../actions/manga\";\r\nimport TopManga from \"./TopManga\";\r\n\r\n\r\nclass MangaHome extends Component {\r\n    componentDidMount() {\r\n        document.title = MANGA_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getMangaDataForHomePage();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Manga-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopManga/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {getMangaDataForHomePage, getLoggedInUserMangaEntryStatuses})(MangaHome)\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty, isTimeLessThanAnHourAgo} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, AnimeData, ApiResult, IndustryData} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\n\r\n\r\nclass TopCharacters extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid xs={12} className=\"horizontal-titles\">\r\n                <div className=\"horizontal-titles-header\">\r\n                    <h3>Most Popular Characters</h3>\r\n                </div>\r\n                <div className=\"horizontal-titles-container horizontal-scroll\">\r\n                    {this.props.industry_data_loaded && this.props.industry_data &&\r\n                        this.props.industry_data[IndustryData.most_popular_characters] ?\r\n                        <div className=\"horizontal-titles-wrapper\">\r\n                            {this.props.industry_data[IndustryData.most_popular_characters].map(character => (\r\n                                <TitleCard\r\n                                    containerClassNames=\"horizontal-titles-card-container\"\r\n                                    branch={BRANCH_CHARACTERS}\r\n                                    title={character}\r\n                                    skip_img_preload={true}\r\n                                />\r\n                            ))}\r\n                        </div> : this.props.industry_data_loading ?\r\n                            <Loading text={'Characters Loading'} block={true}/> : null}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <Grid xs={12} className=\"horizontal-titles\">\r\n                <div className=\"horizontal-titles-header\">\r\n                    <h3>Recently Added Characters</h3>\r\n                </div>\r\n                <div className=\"horizontal-titles-container horizontal-scroll\">\r\n                    {this.props.industry_data_loaded && this.props.industry_data &&\r\n                        this.props.industry_data[IndustryData.recently_added_characters] ?\r\n                        <div className=\"horizontal-titles-wrapper\">\r\n                            {this.props.industry_data[IndustryData.recently_added_characters].map(character => (\r\n                                <TitleCard\r\n                                    containerClassNames=\"horizontal-titles-card-container\"\r\n                                    branch={BRANCH_CHARACTERS}\r\n                                    title={character}\r\n                                    skip_img_preload={true}\r\n                                />\r\n                            ))}\r\n                        </div> : this.props.industry_data_loading ?\r\n                            <Loading text={'Characters Loading'} block={true}/> : null}\r\n                </div>\r\n            </Grid>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    industry_data: state.industry.industry_data,\r\n    industry_data_loading: state.industry.industry_data_loading,\r\n    industry_data_loaded: state.industry.industry_data_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopCharacters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {CHARACTERS_TAB_NAME, INDUSTRY_TAB_NAME} from \"../../../globals\";\r\nimport {getCharactersDataForHomePage} from \"../../../actions/characters\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport TopCharacters from \"./TopCharacters\";\r\n\r\nimport '../../../assets/css/characters.css'\r\nimport {getIndustryDataForHomePage} from \"../../../actions/industry\";\r\n\r\n\r\nclass CharactersHome extends Component {\r\n    componentDidMount() {\r\n        document.title = INDUSTRY_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getIndustryDataForHomePage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Characters-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopCharacters/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getIndustryDataForHomePage})(CharactersHome)\r\n","import axios from \"axios\";\r\nimport {GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING} from \"./types\";\r\nimport {API_GET_INDUSTRY_DATA_FOR_HOME_PAGE} from \"./api_urls\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {returnErrors} from \"./messages\";\r\n\r\n\r\n// GET INDUSTRY DATA FOR INDUSTRY HOME PAGE\r\nexport const getIndustryDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: INDUSTRY_DATA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_INDUSTRY_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_INDUSTRY_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {ErogeData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_EROGE} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport TopEroge from \"../TopEroge\";\r\n\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.recently_added_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.recently_added_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScored(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_scored_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_scored_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nexport function MostPopular(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        <div className=\"horizontal-titles-header\">\r\n            <h3>Most Popular Eroge</h3>\r\n        </div>\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.most_popular_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.most_popular_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopWindows(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_windows_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_windows_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopAndroid(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_android_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_android_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction LargestSize(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.largest_size_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.largest_size_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopErogeTabs(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Scored</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Windows</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Android</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Largest</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <RecentlyAdded\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <TopScored\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopWindows\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <TopAndroid\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <LargestSize\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {MostPopular, TopErogeTabs} from \"./tabs/TopErogeTabs\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\n\r\n\r\nclass TopEroge extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <MostPopular\r\n                eroge_data={this.props.eroge_data}\r\n                eroge_loading={this.props.eroge_loading}\r\n                eroge_data_loaded={this.props.eroge_data_loaded}/>\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopErogeTabs\r\n                eroge_data={this.props.eroge_data}\r\n                eroge_loading={this.props.eroge_loading}\r\n                eroge_data_loaded={this.props.eroge_data_loaded}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_data: state.eroge.eroge_data,\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    eroge_data_loaded: state.eroge.eroge_data_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopEroge)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {ANIME_TAB_NAME, EROGE_BROWSE_TAB_NAME, EROGE_TAB_NAME} from \"../../../globals\";\r\nimport {getErogeDataForHomePage} from \"../../../actions/eroge\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport TopEroge from \"./TopEroge\";\r\n\r\n\r\nclass ErogeHome extends Component {\r\n    componentDidMount() {\r\n        document.title = EROGE_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getErogeDataForHomePage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Eroge-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopEroge/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getErogeDataForHomePage})(ErogeHome)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\n\r\n\r\nclass PeopleBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_PEOPLE}\r\n            titles_loading={this.props.people_loading}\r\n            filtered_titles_loaded={this.props.filtered_people_loaded}\r\n            filtered_titles={this.props.filtered_people}\r\n            title_filters={this.props.people_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people_loading: state.people.people_loading,\r\n    filtered_people_loaded: state.people.filtered_people_loaded,\r\n    filtered_people: state.people.filtered_people,\r\n    people_filters: state.cookies.people_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PeopleBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass PersonDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_PEOPLE}\r\n            param_id={this.props.match.params.id}\r\n            title={this.props.person}\r\n            title_loaded={this.props.people_loaded}\r\n            title_loading={this.props.people_loading}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    people_loaded: state.people.people_loaded,\r\n    people_loading: state.people.people_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PersonDisplay)\r\n","export const TEMPLATE_NAME_NONE = 'Select Default';\r\nexport const TEMPLATE_NAME_DEFAULT = 'Default';\r\nexport const TEMPLATE_NAME_MAL = 'MAL';\r\nexport const TEMPLATE_NAME_HIGH_CONTRAST = 'High Contrast';\r\n\r\nexport const TEMPLATE_NONE_BACKGROUND = {\r\n    background_color: {hex: '00000000'},\r\n    url: '',\r\n    repeat: 'no-repeat',\r\n    size: 'contain',\r\n    position_1: 'center',\r\n    position_2: 'center',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\n\r\nexport const TEMPLATE_DEFAULT_BACKGROUND = {\r\n    background_color: {hex: '00000000'},\r\n    url: 'https://ik.imagekit.io/r0d4cpkoj/BBCode_Templates/girl_phone_window_hXW-PC-Nj.jpg',\r\n    repeat: 'no-repeat',\r\n    size: 'cover',\r\n    position_1: 'center',\r\n    position_2: 'bottom',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\n\r\nexport const TEMPLATE_DEFAULT_BBCODE = `\r\n\r\n[animestats width=50%][/animestats][mangastats width=50%][/mangastats]\r\n\r\n\r\n\r\n\r\n[p width=50%][size=25]    Favorite Anime[/size][/p][p width=50%][size=25]    Favorite Manga[/size][/p]\r\n[favoriteanime small=true width=50%][/favoriteanime][favoritemanga small=true  width=50%][/favoritemanga]\r\n\r\n\r\n\r\n[p width=50%][size=25]    Favorite Characters[/size][/p][p width=50%][size=25]\r\n   Favorite People[/size][/p]\r\n[favoritecharacters small=true width=50%][/favoritecharacters][favoritepeople small=true width=50%][/favoritepeople]\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\nexport const TEMPLATE_MAL_BACKGROUND = TEMPLATE_NONE_BACKGROUND;\r\nexport const TEMPLATE_MAL_BBCODE = `\r\n\r\n[animestats width=50%][/animestats][mangastats width=50%][/mangastats]\r\n\r\n\r\n[p width=100%][size=30][center]Favorites[/center][/size][/p]\r\n\r\n[p width=25%][size=25][center]Anime[/center][/size][/p][p width=25%][size=25][center]Manga[/center][/size][/p][p width=25%][size=25][center]Characters[/center][/size][/p][p width=25%][size=25][center]People[/center][/size][/p]\r\n\r\n[favoriteanime small=true width=25% center=true][/favoriteanime][favoritemanga small=true  width=25% center=true][/favoritemanga][favoritecharacters small=true width=25% center=true][/favoritecharacters][favoritepeople small=true width=25% center=true][/favoritepeople]\r\n\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\nexport const TEMPLATE_HIGH_CONTRAST_BACKGROUND = {\r\n    background_color: {hex: '000000'},\r\n    url: '',\r\n    repeat: 'no-repeat',\r\n    size: 'contain',\r\n    position_1: 'center',\r\n    position_2: 'center',\r\n    position_x: null,\r\n    position_y: null,\r\n};\r\nexport const TEMPLATE_HIGH_CONTRAST_BBCODE = `\r\n\r\n\r\n\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''There is nothing. Only warm, primordial blackness. Your conscience ferments in it — no larger than a single grain of malt. You don't have to do anything anymore. Ever. Never ever.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''An inordinate amount of time passes. It is utterly void of struggle. No lives are contained within it.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''The song of death is sweet and endless... But what is this? Somewhere in the sore, bloated *man-meat* around you — a sensation!''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n[center][p width=70%][color=#00ff00][i]''The limbed and headed machine of pain and undignified suffering is firing up again. It wants to walk the desert. Hurting. Longing.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n[center][p width=70%][color=#ff0000][i]''This is a person with a lot of past, but little present. And almost no future.''[/i][/color][/p][/center]\r\n\r\n\r\n\r\n\r\n`;\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport {CyberButton} from \"../../../../layout/common/common\";\r\n\r\nimport '../../../../../assets/css/bbcode_editor.css'\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport {\r\n    TEMPLATE_DEFAULT_BACKGROUND,\r\n    TEMPLATE_DEFAULT_BBCODE,\r\n    TEMPLATE_HIGH_CONTRAST_BACKGROUND,\r\n    TEMPLATE_HIGH_CONTRAST_BBCODE,\r\n    TEMPLATE_MAL_BACKGROUND,\r\n    TEMPLATE_MAL_BBCODE,\r\n    TEMPLATE_NAME_DEFAULT,\r\n    TEMPLATE_NAME_HIGH_CONTRAST,\r\n    TEMPLATE_NAME_MAL,\r\n    TEMPLATE_NAME_NONE\r\n} from \"../templates\";\r\nimport {Profile, User} from \"../../../../../models\";\r\n\r\n\r\n/**\r\n * returns True if the objects are the same\r\n * @param target\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nfunction compareImageObject(target, value) {\r\n    if (target.background_color !== value.background_color)\r\n        return false;\r\n    if (target.position_1 !== value.position_1)\r\n        return false;\r\n    if (target.position_2 !== value.position_2)\r\n        return false;\r\n    if (target.position_x !== value.position_x)\r\n        return false;\r\n    if (target.position_y !== value.position_y)\r\n        return false;\r\n    if (target.repeat !== value.repeat)\r\n        return false;\r\n    if (target.size !== value.size)\r\n        return false;\r\n    return target.url === value.url;\r\n}\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BBCodeEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateSelectedPreset = this.updateSelectedPreset.bind(this);\r\n        this.state = {\r\n            selected_template: TEMPLATE_NAME_NONE\r\n        };\r\n    }\r\n\r\n    updateSelectedPreset(e) {\r\n        this.setState({selected_template: e.target.value});\r\n        const background = JSON.parse(this.props.user[User.profile][Profile.about_section_background_style]);\r\n        const bbcode = this.props.user[User.profile][Profile.about_section_bbcode].replaceAll('\\n', '[br][/br]');\r\n\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!(bbcode !== this.props.bbcode || !compareImageObject(background, this.props.background_image)) || ((bbcode !== this.props.bbcode || !compareImageObject(background, this.props.background_image)) && confirm('You have unsaved changes, changing the template will delete any unsaved changes!'))) {\r\n            switch (e.target.value) {\r\n                case TEMPLATE_NAME_DEFAULT:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_DEFAULT_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_DEFAULT_BACKGROUND, 'all');\r\n                    return;\r\n                case TEMPLATE_NAME_MAL:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_MAL_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_MAL_BACKGROUND, 'all');\r\n                    return;\r\n                case TEMPLATE_NAME_HIGH_CONTRAST:\r\n                    this.props.updateEditor({target: {value: TEMPLATE_HIGH_CONTRAST_BBCODE}});\r\n                    this.props.updateBackgroundImage(TEMPLATE_HIGH_CONTRAST_BACKGROUND, 'all');\r\n                    return;\r\n                default:\r\n                    return\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <div className=\"editor-container box-light\">\r\n                <FormControl variant=\"outlined\" className=\"form-control\">\r\n                    <InputLabel id=\"select-position-2-label\">Template</InputLabel>\r\n                    <Select\r\n                        labelId=\"select-position-2-label\"\r\n                        id=\"select-position-1\"\r\n                        value={this.state.selected_template}\r\n                        onChange={this.updateSelectedPreset}\r\n                        label=\"position\"\r\n                    >\r\n                        <MenuItem value={TEMPLATE_NAME_NONE}><span className=\"color-gray\">Select Template</span></MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_DEFAULT}>Default</MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_MAL}>MAL</MenuItem>\r\n                        <MenuItem value={TEMPLATE_NAME_HIGH_CONTRAST}>High Contrast</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    id=\"BBCode-Editor-Field\"\r\n                    label=\"BBCode Text Editor\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={this.props.bbcode ? this.props.bbcode.replaceAll('[br][/br]', '\\n') : ''}\r\n                    name=\"bbcode-editor\"\r\n                    onChange={this.props.updateEditor}\r\n                />\r\n                <p className=\"color-gray\">Type your bbCode here and see it update in real time.</p>\r\n                <p className=\"color-gray\">Hit the Upload button to update your About Me bbCode.</p>\r\n                <div className=\"submit-btn-container\">\r\n                    <CyberButton classNames={'btn-contained-success'} variant={'contained'} onClick={this.props.submitAboutMe}>\r\n                        Upload\r\n                    </CyberButton>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"available-tags box-light\">\r\n                <h2>Special tags</h2>\r\n                <p><span className=\"tag-color\">[animestats][/animestats]</span> - <span className=\"color-gray\">Displays Anime Stats</span></p>\r\n                <p><span className=\"tag-color\">[mangastats][/mangastats]</span> - <span className=\"color-gray\">Displays Manga Stats</span></p>\r\n                <p><span className=\"color-gray\">Available attributes</span> - <span className=\"tag-color\">width=0-100/0-100%</span></p>\r\n                <br/>\r\n                <p><span className=\"tag-color\">[favoriteanime][/favoriteanime]</span> - <span className=\"color-gray\">Displays Favorite Anime</span></p>\r\n                <p><span className=\"tag-color\">[favoritemanga][/favoritemanga]</span> - <span className=\"color-gray\">Displays Favorite Manga</span></p>\r\n                <p><span className=\"tag-color\">[favoritecharacters][/favoritecharacters]</span> - <span className=\"color-gray\">Displays Favorite Characters</span></p>\r\n                <p><span className=\"tag-color\">[favoritepeople][/favoritepeople]</span> - <span className=\"color-gray\">Displays Favorite People</span></p>\r\n                <p><span className=\"color-gray\">Available attributes</span> - <span className=\"tag-color\">width=0-100/0-100%, center=true/false, small=true <span className=\"color-gray\">(Makes cards small)</span>, limit=0-100 <span className=\"color-gray\">(limits how many cards will show up)</span></span></p>\r\n            </div>\r\n\r\n            <div className=\"available-tags box-light\">\r\n                <h2>Available tags</h2>\r\n                <p><span className=\"tag-color\">[br][/br]</span> - <span className=\"color-gray\">Start in a new line</span></p>\r\n                <p><span className=\"tag-color\">[b]</span>Bold<span className=\"tag-color\">[/b]</span> - <span className=\"color-gray\"><b>Bold</b></span></p>\r\n                <p><span className=\"tag-color\">[i]</span>Italic<span className=\"tag-color\">[/i]</span> - <span className=\"color-gray\"><i>Italic</i></span></p>\r\n                <p><span className=\"tag-color\">[u]</span>Underline<span className=\"tag-color\">[/u]</span> - <span className=\"color-gray\"><u>Underline</u></span></p>\r\n                <p><span className=\"tag-color\">[s]</span>Strikethrough<span className=\"tag-color\">[/s]</span> - <span className=\"color-gray\"><s>Strikethrough</s></span></p>\r\n                <p><span className=\"tag-color\">[color=red]</span>Colored Text<span className=\"tag-color\">[/color]</span> - <span style={{color: 'red'}}>Colored Text</span></p>\r\n                <p><span className=\"tag-color\">[color=#ff0000]</span>Colored Text<span className=\"tag-color\">[/color]</span> - <span style={{color: '#ff0000'}}>Colored Text with HEX</span></p>\r\n                <p><span className=\"tag-color\">[size=30]</span>Bigger text<span className=\"tag-color\">[/size]</span> - <span className=\"color-gray\" style={{fontSize: 30}}>Bigger text</span></p>\r\n                <p><span className=\"tag-color\">[center]</span>Center<span className=\"tag-color\">[/center]</span> - <span className=\"color-gray\">Centers elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[left]</span>Left<span className=\"tag-color\">[/left]</span> - <span className=\"color-gray\">Left aligns elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[right]</span>Right<span className=\"tag-color\">[/right]</span> - <span className=\"color-gray\">Right aligns elements (Text, Image)</span></p>\r\n                <p><span className=\"tag-color\">[quote]</span>quoted text<span className=\"tag-color\">[/quote]</span> - <span className=\"color-gray\">Quoted text</span></p>\r\n                <p><span className=\"tag-color\">[url]</span>https://cyber-genesis.rf.gd<span className=\"tag-color\">[/url]</span> - <a href=\"https://cyber-genesis.rf.gd\">https://cyber-genesis.rf.gd</a></p>\r\n                <p><span className=\"tag-color\">[url=https://cyber-genesis.rf.gd]</span>Name<span className=\"tag-color\">[/url]</span> - <a href=\"https://cyber-genesis.rf.gd\">Name</a></p>\r\n                <p><span className=\"tag-color\">[img]</span>https://i.imgur.com/WGEbacJ.jpg<span className=\"tag-color\">[/img]</span> - <span className=\"color-gray\">Image/Gif</span></p>\r\n                <p><span className=\"tag-color\">[img width=100% height=50]</span>https://i.imgur.com/WGEbacJ.jpg<span className=\"tag-color\">[/img]</span> - <span className=\"color-gray\">Image/Gif resized (in %/px)</span></p>\r\n                <p><span className=\"tag-color\">[list][*]</span>1<span className=\"tag-color\">[*]</span>2<span className=\"tag-color\">[/list]</span> - <span className=\"color-gray\">List of items</span></p>\r\n                <p><span className=\"tag-color\">[table][tr][td]</span>cell<span className=\"tag-color\">[/td][/tr][/table]</span> - <span className=\"color-gray\">Table of items</span></p>\r\n            </div>\r\n        </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BBCodeEditor)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {ColorPicker} from 'material-ui-color';\r\n\r\nimport '../../../../../assets/css/bbcode_editor.css'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport {CyberButton} from \"../../../../layout/common/common\";\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BackgroundEditorTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid contaienr className=\"editor-container box-light\">\r\n                <Grid item xs={12}>\r\n                    <p className=\"color-gray\">Background color</p>\r\n                    <ColorPicker\r\n                        onChange={(e) => {\r\n                            this.props.updateBackgroundImage(e, 'background_color')\r\n                        }}\r\n                        value={this.props.background_image.background_color}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid className=\"background-image-segment\" item xs={12}>\r\n                    <p className=\"color-gray\">Background image</p>\r\n                    <TextField\r\n                        id=\"Background-Image-Field\"\r\n                        label=\"Image URL\"\r\n                        className=\"form-control\"\r\n                        value={this.props.background_image.url}\r\n                        name=\"bbcode-editor\"\r\n                        onChange={(e) => {\r\n                            this.props.updateBackgroundImage(e, 'url')\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n\r\n                <Grid item xs={12}>\r\n                    <p className=\"color-gray\">Image options</p>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-repeat-label\">repeat</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-repeat-label\"\r\n                            id=\"select-repeat\"\r\n                            value={this.props.background_image.repeat}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'repeat')\r\n                            }}\r\n                            label=\"repeat\"\r\n                        >\r\n                            <MenuItem value={'no-repeat'}>no-repeat</MenuItem>\r\n                            <MenuItem value={'repeat'}>repeat</MenuItem>\r\n                            <MenuItem value={'repeat-x'}>repeat-x</MenuItem>\r\n                            <MenuItem value={'repeat-y'}>repeat-y</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-size-label\">size</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-size-label\"\r\n                            id=\"select-size\"\r\n                            value={this.props.background_image.size}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'size')\r\n                            }}\r\n                            label=\"size\"\r\n                        >\r\n                            <MenuItem value={'contain'}>contain</MenuItem>\r\n                            <MenuItem value={'cover'}>cover</MenuItem>\r\n                            <MenuItem value={'auto'}>auto</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-position-1-label\">position</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-position-1-label\"\r\n                            id=\"select-position-1\"\r\n                            value={this.props.background_image.position_1}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_1')\r\n                            }}\r\n                            label=\"position\"\r\n                        >\r\n                            <MenuItem value={'center'}>center</MenuItem>\r\n                            <MenuItem value={'left'}>left</MenuItem>\r\n                            <MenuItem value={'right'}>right</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl variant=\"outlined\" className=\"form-control\">\r\n                        <InputLabel id=\"select-position-2-label\">position</InputLabel>\r\n                        <Select\r\n                            labelId=\"select-position-2-label\"\r\n                            id=\"select-position-1\"\r\n                            value={this.props.background_image.position_2}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_2')\r\n                            }}\r\n                            label=\"position\"\r\n                        >\r\n                            <MenuItem value={'bottom'}>bottom</MenuItem>\r\n                            <MenuItem value={'center'}>center</MenuItem>\r\n                            <MenuItem value={'top'}>top</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl className=\"form-control\" variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"select-position-x-label\">position-x</InputLabel>\r\n                        <OutlinedInput\r\n                            id=\"select-position-x-label\"\r\n                            value={this.props.background_image.position_x}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_x')\r\n                            }}\r\n                            type=\"number\"\r\n                            endAdornment={<InputAdornment position=\"end\">px</InputAdornment>}\r\n                            aria-describedby=\"outlined-weight-helper-text\"\r\n                            inputProps={{\r\n                                'aria-label': 'position-x',\r\n                            }}\r\n                            labelWidth={0}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-container\" item xs={6}>\r\n                    <FormControl className=\"form-control\" variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"select-position-y-label\">position-y</InputLabel>\r\n                        <OutlinedInput\r\n                            id=\"select-position-y-label\"\r\n                            value={this.props.background_image.position_y}\r\n                            onChange={(e) => {\r\n                                this.props.updateBackgroundImage(e, 'position_y')\r\n                            }}\r\n                            type=\"number\"\r\n                            endAdornment={<InputAdornment position=\"end\">px</InputAdornment>}\r\n                            aria-describedby=\"outlined-weight-helper-text\"\r\n                            inputProps={{\r\n                                'aria-label': 'position-y',\r\n                            }}\r\n                            labelWidth={0}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid className=\"form-control-submit\" item xs={12}>\r\n                    <CyberButton variant={'contained'} classNames={'btn-contained-success'}\r\n                                 onClick={this.props.submitAboutMe}\r\n                    >\r\n                        Upload\r\n                    </CyberButton>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BackgroundEditorTab)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../../../../layout/sounds\";\r\nimport BBCodeEditorTab from \"./BBCodeEditorTab\";\r\nimport BackgroundEditorTab from \"./BackgroundEditorTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function BBCodeEditorTabs(props) {\r\n    const {bbcode, background_image, updateEditor, updateBackgroundImage, submitAboutMe} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label=\"bbCode\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"Background\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <BBCodeEditorTab\r\n                        bbcode={bbcode}\r\n                        background_image={background_image}\r\n                        updateEditor={updateEditor}\r\n                        updateBackgroundImage={updateBackgroundImage}\r\n                        submitAboutMe={submitAboutMe}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    <BackgroundEditorTab\r\n                        background_image={background_image}\r\n                        updateBackgroundImage={updateBackgroundImage}\r\n                        submitAboutMe={submitAboutMe}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport CyberNavbar from \"../../../layout/navbar/CyberNavbar\";\r\nimport {cyberBBCodeParser} from \"./parser\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {editUserAboutMeBackground, editUserAboutMeBBCode, getUserList} from \"../../../../actions/users\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport {BBCodeEditorTabs} from \"./tabs/bbCodeTabs\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {TEMPLATE_NONE_BACKGROUND} from \"./templates\";\r\n\r\nimport '../../../../assets/css/bbcode_editor.css'\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BBCodeEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateEditor = this.updateEditor.bind(this);\r\n        this.submitAboutMe = this.submitAboutMe.bind(this);\r\n        this.updateBackgroundImage = this.updateBackgroundImage.bind(this);\r\n\r\n        let background = TEMPLATE_NONE_BACKGROUND;\r\n        if (this.props.user[User.profile][Profile.about_section_background_style])\r\n            background = JSON.parse(this.props.user[User.profile][Profile.about_section_background_style]);\r\n\r\n        this.state = {\r\n            bbcode: this.props.user[User.profile][Profile.about_section_bbcode],\r\n            background_image: background,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'BBCode Editor';\r\n        window.scrollTo(0, 0);\r\n        this.props.getUserList(this.props.user[User.id]);\r\n        this.props.getUser(this.props.user[User.id]);\r\n    }\r\n\r\n    // componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //     if (prevProps.visited_user_loaded === false && this.props.visited_user_loaded)\r\n    //         if (this.props.visited_user[User.profile][Profile.about_section_background_style]) {\r\n    //             const background = JSON.parse(this.props.visited_user[User.profile][Profile.about_section_background_style]);\r\n    //             this.setState({background_image: background})\r\n    //         }\r\n    // }\r\n\r\n    updateEditor(e) {\r\n        this.setState({bbcode: e.target.value});\r\n    }\r\n\r\n    updateBackgroundImage(e, attribute) {\r\n        let bg_img = {};\r\n        Object.assign(bg_img, this.state.background_image);\r\n        if (attribute === 'background_color') bg_img[attribute] = e;\r\n        else if (attribute === 'all') Object.assign(bg_img, e);\r\n        else bg_img[attribute] = e.target.value;\r\n        this.setState({background_image: bg_img})\r\n    }\r\n\r\n    submitAboutMe() {\r\n        const bbcode = this.state.bbcode ? this.state.bbcode.replaceAll('\\n', '[br][/br]') : this.state.bbcode;\r\n        this.props.editUserAboutMeBBCode(bbcode);\r\n        this.props.editUserAboutMeBackground(this.state.background_image)\r\n    }\r\n\r\n    render() {\r\n        const bbcode = this.state.bbcode ? this.state.bbcode.replaceAll('\\n', '[br][/br]') : this.state.bbcode;\r\n        const style = {\r\n             backgroundColor: `#${this.state.background_image.background_color['hex']}`,\r\n             backgroundRepeat: this.state.background_image.repeat,\r\n             backgroundSize: this.state.background_image.size,\r\n             backgroundPosition: `${this.state.background_image.position_1} ${this.state.background_image.position_2}`,\r\n        };\r\n        if (this.state.background_image.url !== '')\r\n            style.backgroundImage = `url(\"${this.state.background_image.url}\")`;\r\n        if (this.state.background_image.position_x)\r\n            style.backgroundPositionX = `${this.state.background_image.position_x}px`;\r\n        if (this.state.background_image.position_y)\r\n            style.backgroundPositionY = `${this.state.background_image.position_y}px`;\r\n\r\n        console.log('style', style);\r\n        console.log('style', style);\r\n\r\n        return (<>\r\n            <CyberNavbar/>\r\n            {this.props.user_loading ? <Loading text={'Loading'}/> :\r\n                <Grid id=\"BBCode-Editor\" container>\r\n                    <Grid item xs={4} className=\"bbcode-editor-segment\">\r\n                        <BBCodeEditorTabs\r\n                            bbcode={bbcode}\r\n                            background_image={this.state.background_image}\r\n                            updateEditor={this.updateEditor}\r\n                            updateBackgroundImage={this.updateBackgroundImage}\r\n                            submitAboutMe={this.submitAboutMe}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={8} className=\"bbcode-editor-segment\">\r\n                        <div id=\"BBCode_Container\" className=\"bbcode-container\" style={style}>\r\n                            {cyberBBCodeParser(bbcode)}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>}\r\n        </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    user_loaded: state.auth.user_loaded,\r\n    // visited_user: state.auth.visited_user,\r\n    // visited_user_loaded: state.auth.visited_user_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    editUserAboutMeBBCode, editUserAboutMeBackground, getUser, getUserList\r\n})(BBCodeEditor)\r\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\n// noinspection ES6CheckImport\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\n\nimport Home from \"./home/Home\";\n\nimport 'fontsource-roboto';\nimport {\n    ANIME_BROWSE,\n    ANIME_FRANCHISES,\n    ANIME_HOME,\n    ANIME_SEASONS,\n    HOME,\n    LOGIN,\n    MANGA_BROWSE,\n    MANGA_FRANCHISES,\n    MANGA_HOME,\n    MANGA_SEASONS,\n    PROFILE,\n    REGISTER,\n    INDEX,\n    NOT_FOUND,\n    ANIME_DISPLAY,\n    MANGA_DISPLAY,\n    CHARACTERS_HOME,\n    CHARACTERS_BROWSE,\n    CHARACTERS_DISPLAY,\n    EROGE_HOME,\n    EROGE_BROWSE,\n    EROGE_DISPLAY,\n    ANIME_SEASON_DISPLAY,\n    SETTINGS,\n    MANGA_SEASON_DISPLAY,\n    USER_ANIME_LIST,\n    USER_MANGA_LIST,\n    USER_EROGE_LIST,\n    USER_ANIME_STATISTICS,\n    USER_ANIME_HISTORY,\n    USER_MANGA_HISTORY,\n    ANIME_FRANCHISE_DISPLAY, PEOPLE_HOME, PEOPLE_BROWSE, PERSON_DISPLAY, USER_ACHIEVEMENTS, BBCODE_EDITOR\n} from \"../urls\";\n\nimport store from '../store'\nimport {authUser} from \"../actions/auth\";\nimport {loadSounds} from \"./layout/sounds\";\nimport AnimeHome from \"./anime/home/AnimeHome\";\nimport Login from \"./auth/Login\";\nimport Register from \"./auth/Register\";\nimport AnimeBrowse from \"./anime/browse/AnimeBrowse\";\nimport Index from \"./index/Index\";\nimport Profile from \"./user/profile/Profile\";\nimport Settings from \"./user/settings/Settings\";\nimport MangaBrowse from \"./manga/browse/MangaBrowse\";\nimport AnimeDisplay from \"./anime/display/AnimeDisplay\";\nimport MangaDisplay from \"./manga/display/MangaDisplay\";\nimport CharactersBrowse from \"./characters/browse/CharactersBrowse\";\nimport CharacterDisplay from \"./characters/display/CharacterDisplay\";\nimport ErogeBrowse from \"./eroge/browse/ErogeBrowse\";\nimport ErogeDisplay from \"./eroge/display/ErogeDisplay\";\nimport BrowseAnimeSeasons from \"./anime/seasons/BrowseAnimeSeasons\";\nimport BrowseMangaSeasons from \"./manga/seasons/BrowseMangaSeasons\";\nimport NotFound from \"./layout/404/404\";\nimport Alerts from \"./layout/alerts/Alerts\";\nimport DisplaySeason from \"./seasons/DisplaySeason\";\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../globals\";\nimport AnimeList from \"./user/user_list/anime/AnimeList\";\nimport Statistics from \"./user/statistics/Statistics\";\nimport History from \"./user/history/History\";\nimport {LoadGifs} from \"./layout/common/common\";\nimport MangaList from \"./user/user_list/manga/MangaList\";\nimport DisplayFranchise from \"./franchises/display/DisplayFranchise\";\nimport Loading from \"./layout/common/Loading\";\nimport MangaHome from \"./manga/home/MangaHome\";\nimport CharactersHome from \"./characters/home/CharactersHome\";\nimport ErogeHome from \"./eroge/home/ErogeHome\";\nimport PeopleBrowse from \"./people/browse/PeopleBrowse\";\nimport PersonDisplay from \"./people/display/PersonDisplay\";\nimport BBCodeEditor from \"./user/settings/bbcode_editor/BBCodeEditor\";\n\n\n// noinspection JSClassNamingConvention,JSCheckFunctionSignatures\nclass App extends Component {\n    componentDidMount() {\n        store.dispatch(authUser());\n        loadSounds();\n    }\n\n    render() {\n        if (this.props.initial_auth)\n            return <Loading text={'Initializing...'}/>;\n        else return (\n            <BrowserRouter>\n                <Alerts/>\n                <LoadGifs/>\n                <Switch>\n                    <Route exact path={INDEX} component={Index}/>\n                    <Route exact path={LOGIN} component={Login}/>\n                    <Route exact path={REGISTER} component={Register}/>\n                    {!this.props.user_authenticated ? <Redirect to={LOGIN}/> : null}\n                    <Route exact path={HOME} component={Home}/>\n\n                    <Route exact path={SETTINGS} component={Settings}/>\n                    <Route exact path={PROFILE()} component={Profile}/>\n                    <Route exact path={USER_ANIME_LIST()} component={AnimeList}/>\n                    <Route exact path={USER_MANGA_LIST()} component={MangaList}/>\n                    <Route exact path={USER_EROGE_LIST()} component={NotFound}/>\n                    <Route exact path={USER_ANIME_STATISTICS()} component={Statistics}/>\n                    <Route path={USER_ANIME_HISTORY()}\n                           render={(props) => <History {...props} branch={BRANCH_ANIME}/>}/>\n                    <Route path={USER_MANGA_HISTORY()}\n                           render={(props) => <History {...props} branch={BRANCH_MANGA}/>}/>\n\n                    <Route exact path={BBCODE_EDITOR} component={BBCodeEditor}/>\n\n                    <Route exact path={ANIME_HOME} component={AnimeHome}/>\n                    <Route exact path={ANIME_BROWSE} component={AnimeBrowse}/>\n                    <Route exact path={ANIME_SEASONS} component={BrowseAnimeSeasons}/>\n                    <Route exact path={ANIME_SEASON_DISPLAY()}\n                           render={(props) => <DisplaySeason {...props} branch={BRANCH_ANIME}/>}/>\n                    <Route exact path={ANIME_FRANCHISES} component={NotFound}/>\n                    <Route exact path={ANIME_FRANCHISE_DISPLAY()} component={DisplayFranchise}/>\n                    <Route exact path={ANIME_DISPLAY()} component={AnimeDisplay}/>\n\n                    <Route exact path={MANGA_HOME} component={MangaHome}/>\n                    <Route exact path={MANGA_BROWSE} component={MangaBrowse}/>\n                    <Route exact path={MANGA_SEASONS} component={BrowseMangaSeasons}/>\n                    <Route exact path={MANGA_SEASON_DISPLAY()}\n                           render={(props) => <DisplaySeason {...props} branch={BRANCH_MANGA}/>}/>\n                    <Route exact path={MANGA_FRANCHISES} component={NotFound}/>\n                    <Route exact path={MANGA_DISPLAY()} component={MangaDisplay}/>\n\n                    <Route exact path={CHARACTERS_HOME} component={CharactersHome}/>\n                    <Route exact path={CHARACTERS_BROWSE} component={CharactersBrowse}/>\n                    <Route exact path={CHARACTERS_DISPLAY()} component={CharacterDisplay}/>\n\n                    {/*<Route exact path={PEOPLE_HOME} component={CharactersHome}/>*/}\n                    <Route exact path={PEOPLE_BROWSE} component={PeopleBrowse}/>\n                    <Route exact path={PERSON_DISPLAY()} component={PersonDisplay}/>\n\n                    <Route exact path={EROGE_HOME} component={ErogeHome}/>\n                    <Route exact path={EROGE_BROWSE} component={ErogeBrowse}/>\n                    <Route exact path={EROGE_DISPLAY()} component={ErogeDisplay}/>\n\n                    <Route exact path={NOT_FOUND} component={NotFound}/>\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    message: state.errors.message,\n    status: state.errors.status,\n    initial_auth: state.auth.initial_auth,\n    user_authenticated: state.auth.user_authenticated,\n});\n\nexport default connect(mapStateToProps, {})(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport reportWebVitals from './reportWebVitals';\n\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport {Provider as AlertProvider} from 'react-alert'\nimport yourRawTheme from './theme.json';\n\nimport {AlertOptions, MyAlertTemplate} from \"./components/layout/alerts/AlertTemplate\";\nimport App from './components/App';\n\nimport './index.css';\nimport './assets/css/cyber-ui.css';\n\nconst theme = createMuiTheme(yourRawTheme);\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <AlertProvider template={MyAlertTemplate} {...AlertOptions}>\n                    <App/>\n                </AlertProvider>\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import Alert from \"@material-ui/lab/Alert\";\r\nimport store from \"../../../store\";\r\nimport {cleanErrors, clearMessage} from \"../../../actions/messages\";\r\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const AlertOptions = {\r\n    timeout: 3000,\r\n    position: 'bottom left'\r\n};\r\n\r\nexport const MyAlertTemplate = ({style, options, message, close}) => (\r\n    <Alert severity={\r\n        options.type === 'error' ? 'error' :\r\n            options.type === 'success' ? 'success' : 'info'}\r\n           className=\"alert\"\r\n           onClose={close}>\r\n        <AlertTitle>{options.type}</AlertTitle>\r\n        <p>{message}</p>\r\n    </Alert>\r\n);"],"sourceRoot":""}