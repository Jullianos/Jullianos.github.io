{"version":3,"sources":["models.js","components/cookies/load_cookies.js","reducers/cookies.js","components/layout/sounds.jsx","reducers/auth.js","reducers/users.js","reducers/errors.js","reducers/success.js","reducers/manga.js","reducers/characters.js","reducers/eroge.js","globals.js","actions/api_urls.js","actions/types.js","reducers/anime.js","reducers/requiem.js","actions/messages.js","components/layout/filters/field_names.js","actions/cookies.js","components/functions.js","actions/auth.js","actions/anime.js","actions/characters.js","reducers/people.js","reducers/industry.js","reducers/index.js","store.js","reportWebVitals.js","urls.js","components/layout/navbar/menus.jsx","components/layout/navbar/CyberHeader.jsx","components/layout/navbar/CyberNavbar.jsx","components/layout/footer/CyberFooter.js","actions/manga.js","actions/eroge.js","actions/users.js","components/layout/common/Loading.js","components/layout/common/common.js","actions/people.js","actions/requiem.js","components/requiem/snippets/snippets.js","components/layout/pagination/goToPageDialog.js","components/requiem/snippets/News.js","components/home/functions.js","components/home/Home.js","components/anime/home/statistics.js","components/anime/home/AnimeStatistics.js","components/user/forms/anime/forms.js","components/user/forms/shortForms.js","components/user/forms/manga/forms.js","components/layout/cards/CardUserEditTitleEntry.js","components/layout/cards/functions.js","components/layout/cards/TitleCard.js","components/anime/seasons/AnimeCurrentSeason.js","components/anime/home/tabs/TopAnimeTabs.js","components/anime/home/TopAnime.js","components/anime/home/AnimeHome.js","components/auth/functions.js","components/auth/LoginForm.js","components/auth/Login.js","components/auth/RegisterForm.js","components/auth/Register.js","components/layout/filters/functions.js","components/layout/filters/PresetFilters.js","components/layout/filters/SearchAutocomplete.js","components/layout/filters/TitlesFilter.js","components/layout/filters/anime/AnimeFilters.js","components/layout/filters/manga/MangaFilters.js","components/layout/filters/eroge/ErogeFilters.js","components/layout/filters/characters/CharactersFilters.js","components/layout/filters/people/PeopleFilters.js","components/browse/functions.js","components/browse/Browse.js","components/anime/browse/AnimeBrowse.js","components/index/snippets.js","components/index/Index.js","components/user/settings/bbcode_editor/parser.js","components/user/profile/tabs/AboutTab.js","components/user/profile/tabs/AnimeTab.js","components/user/profile/tabs/MangaTab.js","components/user/profile/tabs/AchievementsTab.js","components/user/profile/tabs/ProfileTabs.js","components/user/forms/UploadProfileImageButton.js","components/user/profile/Profile.js","components/user/settings/tabs/UserSettings.js","components/user/settings/tabs/ProfileSettings.js","components/user/forms/list_privacy/listPrivacyForms.js","components/user/settings/tabs/ListSettings.js","components/user/settings/tabs/SettingsTabs.js","components/user/settings/Settings.js","components/manga/browse/MangaBrowse.js","components/display/snippets.js","components/display/TabsRoot.js","components/anime/display/tabs/GeneralTab.js","components/manga/display/tabs/GeneralTab.js","components/characters/display/tabs/GeneralTab.js","components/people/display/tabs/GeneralTab.js","components/eroge/display/tabs/GeneralTab.js","components/anime/display/tabs/CharactersTab.js","components/manga/display/tabs/CharactersTab.js","components/manga/display/tabs/RelationsTab.js","components/requiem/forms/DownloadTorrentForm.js","components/requiem/forms/EditAnimeOnServerModalForm.js","components/anime/display/tabs/ServerTab.js","components/user/forms/anime/AnimeEntryModalForm.js","components/user/forms/anime/UpdateAnimeEpisodeButton.js","components/user/forms/anime/AnimeEpisodeHistoryModal.js","components/user/forms/manga/MangaEntryModalForm.js","components/user/forms/manga/UpdateMangaVolumeChapterButtons.js","components/user/forms/manga/MangaVolumeChapterHistoryModal.js","components/anime/display/tabs/RelationsTab.js","components/franchises/display/FranchiseTree.js","components/franchises/display/helpers.js","components/anime/display/tabs/FranchiseTab.js","components/requiem/forms/DownloadTorrentModalForm.js","components/requiem/snippets/DisplayTorrentProgress.js","components/people/display/tabs/VoiceActorRolesTab.js","components/people/display/tabs/AnimeStaffPositionsTab.js","components/people/display/tabs/PublishedMangaTab.js","components/display/functions.js","components/display/Display.js","components/anime/display/AnimeDisplay.js","components/manga/display/MangaDisplay.js","components/characters/browse/CharactersBrowse.js","components/characters/display/CharacterDisplay.js","components/eroge/browse/ErogeBrowse.js","components/eroge/display/ErogeDisplay.js","components/seasons/functions.js","components/seasons/BrowseSeasons.js","components/anime/seasons/BrowseAnimeSeasons.js","components/manga/seasons/BrowseMangaSeasons.js","components/layout/404/404.js","components/layout/alerts/Alerts.js","components/seasons/DisplaySeason.js","components/user/user_list/anime/tableView.js","components/user/user_list/manga/tableView.js","components/user/user_list/UserList.js","components/user/user_list/PrivateList.js","components/user/user_list/anime/AnimeList.js","components/user/statistics/data_calculations.js","components/user/statistics/Statistics.js","components/user/history/DisplayUserHistory.js","components/user/history/History.js","components/user/user_list/manga/MangaList.js","components/franchises/display/DisplayFranchise.js","components/manga/home/tabs/TopMangaTabs.js","components/manga/home/TopManga.js","components/manga/home/MangaHome.js","components/characters/home/TopCharacters.js","components/characters/home/CharactersHome.js","actions/industry.js","components/eroge/home/tabs/TopErogeTabs.js","components/eroge/home/TopEroge.js","components/eroge/home/ErogeHome.js","components/people/browse/PeopleBrowse.js","components/people/display/PersonDisplay.js","components/user/settings/bbcode_editor/BBCodeEditor.js","components/App.js","index.js","components/layout/alerts/AlertTemplate.js"],"names":["Cookie","show_filters","sound_effects","anime_browse_filters","anime_season_filters","anime_list_filters","manga_browse_filters","manga_season_filters","manga_list_filters","characters_filters","people_filters","eroge_browse_filters","Alert","type_success","type_info","type_error","ApiResult","count","next","previous","results","User","id","username","profile","email","is_superuser","date_joined","last_login","first_name","last_name","is_staff","is_active","UserStatistics","the_crusade","the_crusade_progress","romance_progress","romance_1","romance_2","romance_3","romance_4","pervert_progress","pervert_1","pervert_2","pervert_3","pervert_4","classics_progress","classics_1","classics_2","classics_3","classics_4","Profile","avatar","profile_cover","profile_image","title","bio","user","favorite_anime","favorite_manga","favorite_characters","active_theme","theme_sounds","show_adult","about_section_bbcode","is_profile_private","is_anime_list_private","is_anime_history_private","is_manga_list_private","is_manga_history_private","UserList","owner","is_updating","is_scraping_episode_history_from_mal","scraping_episode_history_from_mal_progress","xml_mal_anime_list","anime_watching","anime_completed","anime_on_hold","anime_dropped","anime_plan_to_watch","anime_total_finished","anime_total_entries","anime_mean_score","anime_episodes_watched","anime_mins_spent_watching","anime_started_watching_on","manga_reading","manga_completed","manga_on_hold","manga_dropped","manga_plan_to_read","manga_total_finished","manga_mean_score","manga_total_entries","manga_volumes_read","manga_chapters_read","manga_mins_spent_reading","manga_started_reading_on","UserAnimeEntry","anime","episode_history","watched_episodes","start_date","finish_date","score","status","times_watched","comments","tags","priority","rewatching","rewatching_episode","date_added","date_last_modified","anime_list","UserMangaEntry","manga","volume_history","chapter_history","read_volumes","read_chapters","times_read","rereading","rereading_chapter","rereading_volume","AnimeData","total_anime_per_season_json","current_anime_season","top_scored_anime","top_upcoming_anime","most_popular_anime","top_70s_anime","top_80s_anime","top_90s_anime","top_2000s_anime","top_2010s_anime","recently_added_anime","recently_downloaded_anime","MangaData","total_manga_per_season_json","current_manga_season","top_scored_manga","top_upcoming_manga","most_popular_manga","top_70s_manga","top_80s_manga","top_90s_manga","top_2000s_manga","top_2010s_manga","recently_added_manga","recently_downloaded_manga","IndustryData","most_popular_characters","recently_added_characters","ErogeData","top_scored_eroge","most_popular_eroge","top_windows_eroge","top_android_eroge","largest_size_eroge","recently_added_eroge","SeasonYear","seasons","year","Anime","title_english","title_synonyms","title_japanese","anime_cover_images","anime_cdn_cover_images","anime_on_server","air_end","air_end_known","air_start","air_start_known","aired_string","airing","approved","background","broadcast","cannot_download","deleted_by_MAL","duration","ending_theme","episodes","favorites","franchise","genres_csv","is_downloading","licensor","mal_id","mal_link","members","minutes_per_episode","opening_theme","pending_by_MAL","popularity","premiered","producer","rank","rating","rating_short","scored_by","source","studio","synopsis","total_time_mins","type","uuid_name","anime_roles","main_characters","all_characters","anime_relations","VALID_ANIME_RELATIONS","VALID_ANIME_RELATION_NAMES","ANIME_SHORT_STATUS","label","color","MANGA_SHORT_STATUS","AnimeOnServer","additional_dubs","additional_info","additional_subtitles","arabic_dub","arabic_sub","audio_channel","bulgarian_dub","bulgarian_sub","catalan_dub","catalan_sub","chinese_dub","chinese_sub","czech_dub","czech_sub","danish_dub","danish_sub","downloading","dutch_dub","dutch_sub","english_dub","english_sub","english_subs","extract_subs","finnish_dub","finnish_sub","franchise_folder_name","french_dub","french_sub","german_dub","german_sub","greek_dub","greek_sub","hebrew_dub","hebrew_sub","hungarian_dub","hungarian_sub","incomplete","incomplete_progress","indonesian_dub","indonesian_sub","italian_dub","italian_sub","japanese_dub","japanese_sub","korean_dub","korean_sub","location","main_torrent_info","malay_dub","malay_sub","norwegian_dub","norwegian_sub","persian_dub","persian_sub","polish_dub","polish_sub","portuguese_dub","portuguese_sub","requiem","romanian_dub","romanian_sub","russian_dub","russian_sub","shared_torrent_with","size_on_HDD_GB","slovak_dub","slovak_sub","spanish_dub","spanish_sub","swedish_dub","swedish_sub","thai_dub","thai_sub","torrent_file","torrent_hash","torrent_magnet","turkish_dub","turkish_sub","video_quality","video_resolution","vietnamese_dub","vietnamese_sub","AnimeFranchise","cover_image","total_titles","top_members","total_members","top_score","average_score","total_minutes","total_episodes","anime_franchise","Manga","active_image_name","anidb_image_url","ann_image_url","authors","chapters","genres","image_url","manga_cover_images","manga_cdn_cover_images","manga_on_server","published_string","publishing","related","serialization","volumes","manga_roles","manga_relations","VALID_MANGA_RELATIONS","VALID_MANGA_RELATION_NAMES","Character","character_cover_images","character_cdn_cover_images","character_name","nickname","short_name","description","voice_actors","role","anime_roles_defined","manga_roles_defined","Person","person_cover_images","person_cdn_cover_images","person_name","given_name","family_name","alternative_names","birthday","website","more_info","has_roles","voice_actor_roles","anime_staff_positions","anime_staff_positions_roles","published_manga","published_manga_roles","Eroge","censorship","date_updated","download_url","downloaded","eroge_cover_images","eroge_screenshots","game_location","game_url","language","eroge_name","platforms","rated_by","scraped_from","size","CoverImages","image","CDNCoverImages","thumbnail_url","width","height","FiltersPreset","preset_name","filters","AnimeDataStatistics","anime_data","total_anime","total_anime_deleted_mal","total_anime_pending_mal","total_anime_downloaded","total_anime_downloading","total_downloaded_size","mean_score","total_quality_2160p","total_quality_1080p","total_quality_960p","total_quality_720p","total_quality_576p","total_quality_560p","total_quality_540p","total_quality_528p","total_quality_480p","total_quality_396p","total_quality_360p","total_quality_288p","total_quality_240p","total_original_anime","total_original_anime_mean","total_anime_from_light_novel","total_anime_from_light_novel_mean","total_anime_from_music","total_anime_from_music_mean","total_anime_from_manga","total_anime_from_manga_mean","total_anime_from_other","total_anime_from_other_mean","total_anime_from_visual_novel","total_anime_from_visual_novel_mean","total_anime_from_book","total_anime_from_book_mean","total_anime_from_game","total_anime_from_game_mean","total_anime_from_web_manga","total_anime_from_web_manga_mean","total_anime_from_novel","total_anime_from_novel_mean","total_anime_from_picture_book","total_anime_from_picture_book_mean","total_anime_from_card_game","total_anime_from_card_game_mean","total_anime_from_4_kom_manga","total_anime_from_4_kom_manga_mean","total_anime_from_digital_manga","total_anime_from_digital_manga_mean","total_anime_from_radio","total_anime_from_radio_mean","total_movie","total_music","total_ona","total_ova","total_special","total_tv","total_finished_airing","total_currently_airing","total_not_yet_aired","total_rated_g","total_rated_pgc","total_rated_pg13","total_rated_r","total_rated_r_plus","total_rated_rx","total_rated_none","total_genre_action","total_genre_adventure","total_genre_cars","total_genre_comedy","total_genre_dementia","total_genre_demons","total_genre_drama","total_genre_ecchi","total_genre_fantasy","total_genre_game","total_genre_harem","total_genre_hentai","total_genre_historical","total_genre_horror","total_genre_josei","total_genre_kids","total_genre_magic","total_genre_martial_arts","total_genre_mecha","total_genre_military","total_genre_music","total_genre_mystery","total_genre_parody","total_genre_police","total_genre_psychological","total_genre_romance","total_genre_samurai","total_genre_school","total_genre_sci_fi","total_genre_seinen","total_genre_shoujo","total_genre_shoujo_ai","total_genre_shounen","total_genre_shounen_ai","total_genre_slice_of_life","total_genre_space","total_genre_sports","total_genre_super_power","total_genre_supernatural","total_genre_thriller","total_genre_vampire","total_genre_yaoi","total_genre_yuri","anime_achievement_romance_thresholds","anime_achievement_romance_info","anime_achievement_classics_thresholds","anime_achievement_classics_info","anime_achievement_pervert_thresholds","anime_achievement_pervert_info","AchievementInfo","requirement","tier_1","tier_2","tier_3","tier_4","AchievementTier","FILTER_ANIME_INITIAL_VALUES","VALUES","search","anime_on_server__english_sub","anime_on_server__english_dub","anime_on_server__japanese_dub","anime_on_server__japanese_sub","episodes_range","length_range","user_exclude","ordering","FILTER_MANGA_INITIAL_VALUES","volumes_range","chapters_range","FILTER_CHARACTERS_INITIAL_VALUES","FILTER_PEOPLE_INITIAL_VALUES","FILTER_EROGE_INITIAL_VALUES","loaded_cookies","undefined","Cookies","get","set","new_anime_values","JSON","parse","e","new_manga_values","new_characters_values","new_people_values","new_eroge_values","eroge_filters","loadCookies","initialState","update_anime_filter_state","state","action","page_type","TYPE_BROWSE","value","TYPE_SEASON","TYPE_LIST","update_manga_filter_state","loadSounds","playClickSound","playHoverSound","playExpand3Sound","playExpand2Sound","playExpandSound","v","store","getState","auth","vol","Number","isFinite","Howl","src","volume","play","playErrorSound","playWarningSound","playDeploySound","token","localStorage","getItem","initial_auth","user_loading","user_authenticated","visited_user_loaded","visited_user","all_users","users_loading","all_users_loaded","entry_loading","user_anime_entry","user_anime_entry_loaded","user_manga_entry","user_manga_entry_loaded","uploading_file","user_list","user_list_loading","user_statistics_loading","user_anime_statistics","user_manga_statistics","user_info_loading","user_anime_history","user_manga_history","anime_filter_presets","manga_filter_presets","eroge_filter_presets","selected_anime_preset","selected_manga_preset","selected_eroge_preset","user_anime_entry_statuses","user_manga_entry_statuses","user_achievements_loading","user_achievements","message","manga_loading","manga_loaded","manga_data","manga_data_loaded","filtered_manga","filtered_manga_loaded","characters_loading","character","characters_loaded","filtered_characters","filtered_characters_loaded","eroge_loading","eroge","eroge_loaded","filtered_eroge","filtered_eroge_loaded","eroge_data","eroge_data_statistics","eroge_data_loaded","CYBER_GENESIS_URL","store_reducers","store_reducer_users","store_reducer_cookies","BRANCH_ANIME","BRANCH_MANGA","BRANCH_EROGE","BRANCH_PEOPLE","BRANCH_CHARACTERS","LANGUAGES","ANIME_ORDERINGS","USER_ANIME_ORDERINGS","ANIME_TYPES","ANIME_STATUSES","ANIME_RATING_SHORT","ANIME_VIDEO_QUALITIES","USER_ANIME_STATUSES_ARRAY","USER_MANGA_STATUSES_ARRAY","ANIME_AUDIO_CHANNELS","ANIME_GENRES","sort","USER_ANIME_STATUSES","USER_MANGA_STATUSES","MANGA_ORDERINGS","USER_MANGA_ORDERINGS","MANGA_TYPES","MANGA_STATUSES","MANGA_GENRES","EROGE_ORDERINGS","EROGE_TYPES","EROGE_PLATFORMS","EROGE_CENSORSHIPS","EROGE_LANGUAGES","EROGE_TAGS","CHARACTERS_ORDERINGS","PEOPLE_ORDERINGS","getPriorityLabel","BASE_URL","API_AUTH_USER","API_LOGIN","API_REGISTER","API_LOGOUT","API_GET_ALL_USERS","API_USER_ANIME_FILTERS_PRESET","API_USER_MANGA_FILTERS_PRESET","API_USER_EROGE_FILTERS_PRESET","API_CHANGE_USER_PROFILE_IMAGE","API_IMPORT_MAL_XML_FOR_ANIME_LIST","API_IMPORT_MAL_XML_FOR_MANGA_LIST","API_EDIT_USER_BIO","API_EDIT_USER_ABOUT_ME_BBCODE","API_SCRAPE_EPISODE_HISTORY_FROM_MAL","API_CHANGE_CYBER_SOUND_STATUS","API_USER_ANIME_ENTRY_NOID","API_USER_MANGA_ENTRY_NOID","API_USER_ANIME_ENTRY_STATUSES","API_USER_MANGA_ENTRY_STATUSES","API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS","API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES","API_SET_ANIME_LIST_TO_PRIVATE","API_SET_ANIME_LIST_TO_PUBLIC","API_SET_ANIME_HISTORY_TO_PRIVATE","API_SET_ANIME_HISTORY_TO_PUBLIC","API_SET_MANGA_LIST_TO_PRIVATE","API_SET_MANGA_LIST_TO_PUBLIC","API_SET_MANGA_HISTORY_TO_PRIVATE","API_SET_MANGA_HISTORY_TO_PUBLIC","API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE","API_USER_ANIME_ENTRY","API_USER_MANGA_ENTRY","API_GET_ANIME_DATA","API_GET_ANIME_DATA_FOR_HOME_PAGE","API_GET_ANIME_DATA_WITH_STATISTICS","API_GET_ANIME_ACHIEVEMENT_THRESHOLDS","API_FILTER_ANIME","API_GET_MANGA_DATA","API_GET_MANGA_DATA_FOR_HOME_PAGE","API_FILTER_MANGA","API_FILTER_CHARACTERS","API_FILTER_PEOPLE","API_FILTER_EROGE","API_GET_EROGE_DATA_FOR_HOME_PAGE","API_REQUIEM_GET_STORAGE_INFO","API_ADD_ANIME_TO_SERVER","API_GET_NEWS","API_GET_INDUSTRY_DATA_FOR_HOME_PAGE","SET_ANIME_FILTERS","SET_MANGA_FILTERS","SET_CHARACTERS_FILTERS","SET_PEOPLE_FILTERS","SET_EROGE_FILTERS","SET_COOKIE_SHOW_FILTERS","USER_LOADING","AUTH_USER","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","GET_REQUIEM","REQUIEM_LOADING","GET_REPORTS","REPORTS_LOADING","GET_NEWS","NEWS_LOADING","GET_TORRENT_PROGRESS","GET_ACTIVE_TORRENTS_PROGRESS","CLEAR_ANIME_TORRENT_PROGRESS","GET_STORAGE_INFO","GET_TARGETS","USERS_LOADING","USER_LIST_LOADING","CANCEL_USER_LIST_LOADING","GET_USER","GET_ALL_USERS","USER_ENTRY_LOADING","FINISH_LOADING_USER_ENTRY","GET_USER_ANIME_ENTRY","AUTH_ERROR_CLEAR_USER_INFO","CLEAR_USER_ANIME_ENTRY","GET_USER_MANGA_ENTRY","CLEAR_USER_MANGA_ENTRY","GET_USER_LIST","UPDATE_USER_LIST","USER_STATISTICS_LOADING","UPDATE_USER_ANIME_STATISTICS","UPLOADING_FILE","FINISH_UPLOADING_FILE","UPLOAD_ANIME_LIST_MAL_XML","UPLOAD_MANGA_LIST_MAL_XML","USER_INFO_LOADING","USER_ACHIEVEMENTS_LOADING","CANCEL_USER_ACHIEVEMENTS_LOADING","GET_USER_ACHIEVEMENTS","CLEAR_USER_ACHIEVEMENTS","GET_VISITED_USER_ANIME_HISTORY","GET_VISITED_USER_MANGA_HISTORY","GET_ANIME_FILTER_PRESETS","GET_MANGA_FILTER_PRESETS","GET_EROGE_FILTER_PRESETS","SET_ANIME_PRESET","SET_MANGA_PRESET","SET_EROGE_PRESET","GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES","GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES","UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES","UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES","GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS","GET_PROFILE_PRIVACY_SETTINGS","GET_ANIME_DATA","GET_ANIME_DATA_STATISTICS","GET_ANIME_ACHIEVEMENT_THRESHOLDS","GET_ANIME","GET_ALL_CHARACTERS_FOR_ANIME","GET_RELATIONS_FOR_ANIME","FILTER_ANIME","ANIME_LOADING","CANCEL_ANIME_LOADING","ANIME_FRANCHISE_LOADING","GET_CURRENT_ANIME_FRANCHISE","GET_ANIME_SEARCHABLE_TITLES","GET_MANGA_DATA","GET_MANGA","GET_ALL_CHARACTERS_FOR_MANGA","GET_RELATIONS_FOR_MANGA","FILTER_MANGA","MANGA_LOADING","CANCEL_MANGA_LOADING","GET_CHARACTER","FILTER_CHARACTERS","CHARACTERS_LOADING","CANCEL_CHARACTERS_LOADING","GET_PERSON","GET_VOICE_ACTOR_ROLES_FOR_PERSON","GET_ANIME_STAFF_POSITIONS_FOR_PERSON","GET_PUBLISHED_MANGA_FOR_PERSON","FILTER_PEOPLE","PEOPLE_LOADING","CANCEL_PEOPLE_LOADING","GET_EROGE","GET_EROGE_DATA","FILTER_EROGE","EROGE_LOADING","CANCEL_EROGE_LOADING","CREATE_MESSAGE","CLEAR_MESSAGE","GET_ERRORS","CLEAN_ERRORS","GET_INDUSTRY_DATA","INDUSTRY_DATA_LOADING","searchable_titles","anime_loading","anime_loaded","anime_data_statistics","anime_data_loaded","filtered_anime","filtered_anime_loaded","anime_franchise_loading","requiem_is_loading","targets","reports","news","storage","torrent_progress","active_torrents","createMessage","msg","payload","clearMessage","returnErrors","cleanErrors","AnimeFilterNames","season","user_list_pk","user_list_filter","MangaFilterNames","ErogeFilterNames","CharactersFilterNames","PeopleFilterNames","FilterLabels","FilterSchema","filter_name","content","marks","max","min","FilterSchemaType","standard","component","wide","slider","setCookieAnimeFilters","dispatch","setCookieMangaFilters","hasOwnProperty","Object","prototype","isEmpty","obj","length","key","call","formatContentDateByKnown","date","known_date","str","indexOf","moment","format","getBrowseGridListCols","window","innerWidth","formatBytes","terabyte","gigabyte","toFixed","Math","ceil","getSeasonLabelFromSeasonNumber","getTitleCoverImage","cdn_cover_images","cover_images","thumbnail","img_url","len_cdn_images","len_images","largest","x","REFERENCE","TODAY","clone","startOf","YESTERDAY","subtract","A_WEEK_OLD","A_MONTH_OLD","SIX_MONTHS_OLD","A_YEAR_OLD","TWO_YEARS_OLD","getUser","axios","API_GET_USER","tokenConfig","then","res","data","catch","err","response","authUser","config","headers","getAnime","API_GET_ONE_ANIME","cancelAnimeLoading","getAnimeFranchise","API_GET_ANIME_FRANCHISE","filterAnime","page","list","loading","save_cookie","params","setAnimeFilterParams","setAnimeSeasonParams","replace","setAnimeListParams","join","getCharacter","API_GET_ONE_CHARACTER","filterCharacters","no_loading","setCharactersFilterParams","people_loading","person","people_loaded","people_data","people_data_statistics","people_data_loaded","filtered_people","filtered_people_loaded","industry_data","industry_data_loading","industry_data_statistics","industry_data_loaded","combineReducers","cookies","updated_user","assign","setItem","removeItem","users","current_statuses","isNaN","current_manga_statuses","this_user_list","current_anime_entry","current_manga_entry","errors","success","reports_is_loading","news_is_loading","anime_achievement_thresholds","characters","people","industry","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INDEX","NOT_FOUND","HOME","ADMIN","ADMIN_EDIT_ANIME","ADMIN_EDIT_MANGA","ADMIN_EDIT_CHARACTER","ADMIN_EDIT_EROGE","ADMIN_EDIT_PERSON","LOGIN","REGISTER","SETTINGS","BBCODE_EDITOR","PROFILE","USER_ANIME_LIST","USER_MANGA_LIST","USER_EROGE_LIST","USER_ANIME_STATISTICS","USER_ANIME_HISTORY","USER_MANGA_HISTORY","ANIME_HOME","ANIME_BROWSE","ANIME_SEASONS","ANIME_SEASON_DISPLAY","ANIME_FRANCHISES","ANIME_DISPLAY","ANIME_FRANCHISE_DISPLAY","MANGA_HOME","MANGA_BROWSE","MANGA_SEASONS","MANGA_SEASON_DISPLAY","MANGA_FRANCHISES","MANGA_DISPLAY","CHARACTERS_HOME","CHARACTERS_BROWSE","CHARACTERS_DISPLAY","PEOPLE_BROWSE","PERSON_DISPLAY","EROGE_HOME","EROGE_BROWSE","EROGE_DISPLAY","AnimeMenu","props","show","onLeave","className","style","pointerEvents","onMouseLeave","to","onMouseEnter","onClick","MangaMenu","CharactersMenu","ErogeMenu","AuthMenu","user_id","post","STYLE","top","left","useStyles","makeStyles","theme","root","flexGrow","zIndex","grow","appBar","toolbar","minHeight","marginRight","spacing","fontFamily","fontVariant","userSelect","menuButton","fontSize","menuButtonLink","textDecoration","menuLinks","sectionDesktop","display","breakpoints","up","sectionMobile","MenuAppBar","superuser","classes","React","useState","profileAnchorEl","animeAnchorEl","setAnimeAnchorEl","mobileAnchorEl","setMobileAnchorEl","isAnimeOpen","Boolean","isMobileMenuOpen","desktopAnimeMenu","setDesktopAnimeMenu","desktopMangaMenu","setDesktopMangaMenu","desktopCharactersMenu","setDesktopCharactersMenu","desktopErogeMenu","setDesktopErogeMenu","desktopAuthMenu","setDesktopAuthMenu","handleAnimeClose","handleMobileClose","onDesktopMenuLeave","onDesktopMenuEnter","menuName","animeMobileMenu","renderAnimeMenu","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","onClose","MenuItem","renderMobileMenu","event","currentTarget","Button","aria-label","aria-controls","aria-haspopup","document","addEventListener","navbar","getElementById","scrollY","classList","add","remove","AppBar","position","Toolbar","IconButton","edge","Typography","variant","onMouseOver","href","icon","faUser","CyberNavbar","this","Component","connect","CyberFooter","margin","marginTop","blur","bgImage","bgImageAlt","strength","alt","getManga","API_GET_ONE_MANGA","filterManga","setMangaFilterParams","setMangaSeasonParams","setMangaListParams","getEroge","API_GET_ONE_EROGE","filterEroge","setErogeFilterParams","editUserAboutMeBBCode","bbcode","formData","FormData","append","getUserList","API_GET_USER_LIST","getUserAnimeEntry","addAnimeEntry","entryInfo","body","stringify","updateAnimeEntry","entry_info","put","updateAnimeEpisode","API_USER_ANIME_UPDATE_EPISODE","deleteAnimeEntry","delete","deleteAnimeHistoryEntry","history_id","anime_id","getUserMangaEntry","addMangaEntry","updateMangaEntry","updateMangaVolume","API_USER_MANGA_UPDATE_VOLUME","updateMangaChapter","API_USER_MANGA_UPDATE_CHAPTER","deleteMangaEntry","deleteMangaVolumeChapterHistoryEntry","manga_id","url","API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY","getLoggedInUserAnimeEntryStatuses","getLoggedInUserMangaEntryStatuses","addToFavorites","branch","toLowerCase","API_ADD_TO_FAVORITES","removeFromFavorites","API_REMOVE_FROM_FAVORITES","Loading","text","offset","block","no_text","viewBox","fill","stroke","strokeWidth","points","toUpperCase","CyberButton","classNames","disabled","children","CyberLink","PreLoadImage","loaded","setLoaded","onLoad","LoadGifs","console","log","opacity","map","genre","getPerson","API_GET_ONE_PERSON","filterPeople","setPeopleFilterParams","scrapeUpdateTitleApiUrl","API_REQUIEM_UPDATE_ANIME_MAL","API_REQUIEM_UPDATE_MANGA_MAL","API_REQUIEM_UPDATE_CHARACTER_MAL","API_REQUIEM_UPDATE_PERSON_MAL","API_REQUIEM_UPDATE_EROGE_HENTAIGAMER","scrapeUpdateTitle","getBytesToSize","getTime","sec","hrs","floor","seconds","result","round","getProgress","progress","getSpeed","speed","TorrentProgressInfo","status_icon","torrent","days","parseInt","utc","hours","minutes","eta_str","faArrowDown","faArrowUp","faPause","faSpinner","faBan","faClock","faHdd","faDownload","faUpload","faPuzzlePiece","faUsers","faInfinity","colSpan","LinearProgress","GoToPageDialog","current_page","total_pages","goToPage","GoToPageSchema","Yup","shape","page_number","required","Dialog","aria-labelledby","DialogTitle","initialValues","validationSchema","onSubmit","values","setSubmitting","isSubmitting","touched","handleChange","handleBlur","TextField","name","onChange","onBlur","error","helperText","News","arguments","closePageDialog","bind","page_dialog_open","getNews","setState","news_results","Grid","container","i","item","xs","Pagination","siblingCount","particles_params","Home","updateGridListCols","gridlist_cols","scrollTo","getAllUsers","GridList","cellHeight","cols","GridListTile","ProfileModel","compareByStat","a","b","first","second","comparison","getDataSources","statistics","stat","meanScore","stat_data","mean_score_data","labels","push","datasets","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","borderWidth","maintainAspectRatio","responsive","tooltips","mode","elements","line","scales","yAxes","gridLines","ticks","stepSize","AnimeStatistics","getAnimeDataWithStatistics","data_types","hoverColor","getDataTypes","data_sources","data_sources_options","data_statuses","data_rated","getDataRated","data_genres","getDataGenres","data_qualities","getDataQualities","data_years","parsed_data","parsed_data_keys","keys","element","getDataYears","Divider","xl","md","lg","options","FIELD_NAMES","getUserAnimeEntryFormInitialValues","edit","initial_values","UserAnimeEntryForm","handleClose","utils","DateFnsUtils","setValues","InputLabel","Select","labelId","Checkbox","inputProps","KeyboardButtonProps","multiline","DialogActions","faCheck","confirm","deleteEntry","faTrash","EditBioForm","closeBio","field_names","editUserBio","handleSubmit","onKeyPress","shiftKey","preventDefault","ScrapeEpisodeHistoryFromMalForm","closeForm","MALHLOGSESSID","MALSESSIONID","malhlogsessid","malsessionid","ScrapeEpisodeHistoryFromMalDialog","ImportAnimeListFromMal","uploading","accept","multiple","file","target","files","CircularProgress","htmlFor","faFileUpload","ImportMangaListFromMal","AddAnimeEntryInstantDropButton","Date","faLevelDownAlt","AddMangaEntryInstantDropButton","getUserMangaEntryFormInitialValues","UserMangaEntryForm","getTitleNameFromTitle","QuickUserAnimeEntryForm","QuickUserMangaEntryForm","InstantDropTitleButton","title_id","CardUserEditTitleEntry","getUserTitleEntry","getQuickUserTitleEntryForm","hideUserButtons","user_status","add_button_title","thickness","faEdit","faPlus","DialogContent","getUserStatusChip","UserCardButtons","TitleCard","showUserButtons","cssHideUserButtons","img_loaded","show_user_buttons","css_hide_buttons","prevProps","prevState","snapshot","card_title","end_date","link","chipset_header","chipset_one","chipset_two","chipset_three","chipset_four","faServer","split","trim","formatTitle","class_names","container_class_names","containerClassNames","backgroundImage","skip_img_preload","user_buttons","index","Chip","chip","mini","horizontalScroll","deltaY","scrollLeft","AnimeCurrentSeason","current_year","getFullYear","current_month","getMonth","current_season","current_season_number","season_filter","addHorizontalScrollEventListener","removeEventListener","removeHorizontalScrollEventListener","season_icon_and_class","faSeedling","faSun","faLeaf","faSnowflake","getIconAndClassFromSeasonNumber","toString","RecentlyAdded","RecentlyDownloaded","TopUpcoming","TopScoredMal","MostPopularMal","Top2010s","Top2000s","Top90s","Top80s","Top70s","TabPanel","other","hidden","Box","p","a11yProps","TopAnimeTabs","useTheme","setValue","Tabs","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","CurrentSeason","TopAnime","AnimeHome","getAnimeDataForHomePage","LoginSchema","password","RegisterSchema","password2","test","parent","LoginForm","login","Login","RegisterForm","new_user","register","Register","setPreset","preset","new_values","setSelectedAnimePreset","setSelectedMangaPreset","setSelectedErogePreset","updateFilterPreset","preset_id","updateAnimeFilterPreset","updateMangaFilterPreset","updateErogeFilterPreset","saveFilterPreset","saveAnimeFilterPreset","saveMangaFilterPreset","saveErogeFilterPreset","deleteFilterPreset","deleteMangaFilterPreset","deleteErogeFilterPreset","getSelectedPreset","PresetFilters","onPresetChange","onPresetNew","onPresetUpdate","onPresetDelete","presets","getResetValuesFromBranch","prompt","faCog","faSave","listbox","boxSizing","padding","getSliderLabel","label_name","value_2","getGenreImgSrc","img_name","replaceAll","ext","getOrderIcon","order","active","faSortAmountDown","faSortAmountDownAlt","getOrderValue","TitlesFilter","onGenreEnter","onGenreLeave","onGenreChange","checkFormValuesFromCookies","onReset","title_filters","cookie_filters","genreFilter","img","contains","slice","checked","nextSibling","firstChild","filterTitles","reset_values","uses_presets","active_filters","childNodes","parentNode","changeHeightOfActiveFiltersWrapperOnChange","sm","titles_loading","filtered_titles","faTimes","faUndoAlt","faFilter","main_filters","regular_filters","field","filter","wide_filters","y","splice","Slider","valueLabelDisplay","order_filters","offsetWidth","setAttribute","AnimeFilters","orderings","concat","anime_filters","filtered_titles_loaded","MangaFilters","manga_filters","ErogeFilters","CharactersFilters","PeopleFilters","getFiltersFromBranch","getItemsPerPageFromBranch","Browse","items_per_page","getTabName","updateCurrentPage","Grow","in","timeout","user_entry_statuses","AnimeBrowse","NonAuthIndexHero","imageSrc","transitionDuration","AuthIndexHero","autoPlay","muted","loop","Index","img_1_loaded","img_2_loaded","URL_PATTERN","new_tags","openTag","closeTag","displayContent","w_unit","h_unit","parse_width","parse_height","lastIndex","testingParser","bbcode_string","XBBCODE","process","removeMisalignedTags","addInLineBreaks","html","addTags","AboutTab","has_error","errorInfo","ReactHtmlParser","getMinsPerDay","total_mins","date1","date2","time_diff","abs","total_days","AnimeTab","Chart","defaults","global","legend","raw","justify","alignItems","faPlay","end","faStop","faCalendarAlt","faCircle","beginAtZero","faStar","MangaTab","unknown","getActiveGenreDescription","achievement","user_completed","GenreAchievementSegment","tier_1_value","tier_1_buffer","previous_completed","tier_number","user_progress","threshold","new_threshold","valueBuffer","faCheckCircle","GenreAchievement","plugins","reactPreset","Tooltip","AchievementsTab","achievements_loaded","getAnimeAchievementsThresholds","getUserAchievements","clearUserAchievements","genre_achievements","achievement_thresholds","achievements","tiers","achievements_info","getUserGenreAchievements","API_GET_USER_ACHIEVEMENTS","ProfileTabs","faTv","faBookOpen","faGamepad","faTrophy","UploadProfileImageButton","onUpdateProfile","updateUserProfileImage","loader_classnames","faCamera","getLastLoginLabel","last_login_date","newDate","getTimezoneOffset","getHours","setHours","convertUTCDateToLocalDate","isTimeLessThanAnHourAgo","ONE_HOUR","isTimeLessThanSixHoursAgo","isSame","isYesterday","isAfter","isWithinAWeek","isWithinAMonth","isWithinSixMonths","isWithinAYear","isMoreThanAYear","img_cover_loaded","current_id","match","updateUserList","List","ListItem","ListItemText","primary","secondary","button","API_UPDATE_USER_LIST","UserSettings","editBio","finishEditingBio","edit_bio","TableContainer","Table","TableBody","TableRow","TableCell","align","ClickAwayListener","onClickAway","Switch","ProfileSettings","openBBCodeDialog","closeBBCodeDialog","bbcode_dialog_open","FormControl","muteUnmuteThemeSounds","faVolumeUp","faVolumeMute","faTools","ToggleUserAnimeListPrivacyForm","IsPrivate","setIsPrivate","to_private","api_url","ToggleUserAnimeHistoryPrivacyForm","ToggleUserMangaListPrivacyForm","ToggleUserMangaHistoryPrivacyForm","ListSettings","openScrapeHistoryDialog","closeScrapeHistoryDialog","scrape_episode_history_dialog_open","scraping_info_reading","update_interval","scraping_history_info_modal_open","getUserEpisodeHistoryScraperProgress","setInterval","clearInterval","faCloudDownloadAlt","faQuestion","paragraph","fixUserStartAndFinishDateForAnimeEntries","SettingsTabs","Settings","MangaBrowse","CopyTextToClipboard","setOpen","handleTooltipClose","PopperProps","disablePortal","disableFocusListener","disableHoverListener","disableTouchListener","DisplayTabs","tabs","tab","GeneralTab","DisplayVoiceActors","expand","setExpand","faExpandArrowsAlt","images","original","items","CharactersTab","getAllCharactersForAnime","API_GET_ALL_CHARACTERS_FOR_ANIME","getAllCharactersForManga","API_GET_ALL_CHARACTERS_FOR_MANGA","RelationsTab","getRelationsForManga","relation_name","API_GET_RELATIONS_FOR_MANGA","DownloadTorrentForm","handleAddIdToExtraIds","clearExtraIds","toggleAddExtra","extra","extra_ids","getStorageInfo","disk","magnet","downloadTorrent","setFieldValue","autoComplete","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","faPlusCircle","API_REQUIEM_DOWNLOAD_ANIME_TORRENT","DownloadTorrentModalForm","toggleExpandLanguages","handleClickOpen","expand_languages","languages","forEach","lang","updateAnimeToServer","addAnimeToServer","animeInfo","ServerTab","openAnimeFolder","faFolder","EditAnimeOnServerModalForm","faUserEdit","deleteAnimeServerInfoAndTorrents","endsWith","faMagnet","API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS","API_OPEN_ANIME_FOLDER","AnimeEntryModalForm","UpdateAnimeEpisodeButton","entry","setLoading","AnimeEpisodeHistoryModal","faHistory","DialogContentText","history","DeleteAnimeEpisodeHistoryButton","MangaEntryModalForm","UpdateMangaVolumeButton","UpdateMangaChapterButton","MangaVolumeChapterHistoryModal","DeleteMangaVolumeHistoryButton","DeleteMangaChapterHistoryButton","getRelationsForAnime","API_GET_RELATIONS_FOR_ANIME","TITLES","LOCAL_VALID_ANIME_RELATIONS","FINAL_TREE","compareByAired","now","a_value","b_value","date_a","date_b","compare","getFullAnime","markAnimeAsAdded","isAdded","getChildren","parent_node","z","relation","node","attributes","info","parent_relation","checkChildrenForFixingSequel","sequel_to_find","node_to_return","fixSequelPriority","parent_anime","in_children","sequel_anime","node_to_fix","TreeBuilder","user_statuses","defaultTranslate","translate","setTranslate","containerRef","useCallback","containerElem","getBoundingClientRect","useCenteredTree","nodeSize","foreignObjectProps","ref","pathFunc","renderCustomNodeElement","rd3tProps","nodeDatum","toggleNode","__rd3t","collapsed","faAngleDoubleDown","faAngleDoubleUp","renderForeignObjectNode","orientation","FranchiseTree","titles","setTitles","reverse","root_node","_continue","check","getRootNode","TreeData","missing","FranchiseTab","faSitemap","DisplayTorrentProgress","torrent_progress_reading","getTorrentProgress","setTimeout","torrent_filters","API_REQUIEM_GET_TORRENT_PROGRESS","VoiceActorRolesTab","getVoiceActorRolesForPerson","API_GET_VOICE_ACTOR_ROLES_FOR_PERSON","AnimeStaffPositionsTab","getAnimeStaffPositionsForPerson","positions_roles","API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON","PublishedMangaTab","getPublishedMangaForPerson","API_GET_PUBLISHED_MANGA_FOR_PERSON","UserAnimeEntryStatus","status_classname","UserMangaEntryStatus","getTitle","getUserTitleStatus","getUserTitleStatusSummary","checkFavorites","favoriteTitles","currentTitleId","UserModalForms","in_favorites","isTitleInFavorites","faStarSolid","faPlusSquare","AdminModalForms","faSyncAlt","display_title","title_1","title_2","title_3","info_set","db_info_set","users_info_set","primary_set","primary_set_wide","secondary_set","faInfo","faUserFriends","faCodeBranch","tag","faUserCog","Display","param_id","title_loaded","tabs_margin","marginBottom","user_title_status","title_loading","AnimeDisplay","MangaDisplay","CharactersBrowse","CharacterDisplay","ErogeBrowse","getSeasonIcon","getTitleData","browseSeasonTitlesFromBranch","getPrevSeasonUrl","prev_year","prev_season","getNextSeasonUrl","next_year","next_season","formatData","display_data","total_titles_per_season_json","getSeasonUrl","BrowseSeasons","data_loaded","BrowseAnimeSeasons","data_loading","BrowseMangaSeasons","NotFound","Alerts","alert","onOpen","withAlert","DisplaySeason","season_num","season_name","faArrowLeft","faArrowRight","AnimeListStatusButtons","selected","setSelected","AnimeListTableHead","list_owner","TableHead","faImage","AnimeListTableRow","scope","getCoverImgUrl","MangaListStatusButtons","MangaListTableHead","MangaListTableRow","getInitialSelected","list_pk","PrivatePage","AnimeList","compareByTotal","compareByMean","Statistics","getFavoriteGenres","sortFavoriteGenres","favorite_genres_sorted_by","data_favorite_genres","data_favorite_genres_options","updated","updateAndGetUserAnimeStatistics","data_and_options","stat_mean_score","getDataFavoriteGenres","data_completed_history","hours_watching","data_rated_vs_time_spent","data_rated_vs_episode_count","data_rated_vs_episode_count_options","data_favorite_years","data_favorite_years_options","data_favorite_types","data_favorite_types_options","getDataScoreDistribution","getDataRatedVsTimeSpent","months","sum","month_keys","bordered","month","getTableHistory","getDataRatedVsEpisodeCount","getDataFavoriteYears","getDataFavoriteTypes","API_UPDATE_AND_GET_USER_ANIME_STATISTICS","displayHistory","user_history","lastId","newId","lastMonth","lastDate","lastYear","formatted","nextYear","nextMonth","nextDate","entries","timestamp","last","lastHistory","DisplayUserHistory","getVisitedUserAnimeHistory","visited_user_id","getVisitedUserMangaHistory","total","API_GET_VISITED_USER_ANIME_HISTORY","API_GET_VISITED_USER_MANGA_HISTORY","History","isHistoryPrivate","MangaList","FranchisesHome","TopMangaTabs","TopManga","MangaHome","getMangaDataForHomePage","TopCharacters","CharactersHome","getIndustryDataForHomePage","TopScored","MostPopular","TopWindows","TopAndroid","LargestSize","TopErogeTabs","TopEroge","ErogeHome","getErogeDataForHomePage","PeopleBrowse","PersonDisplay","BBCodeEditor","updateEditor","submitBbCode","App","exact","path","render","DisplayFranchise","ErogeDisplay","createMuiTheme","yourRawTheme","ReactDOM","StrictMode","ThemeProvider","template","close","severity","AlertTitle"],"mappings":"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","file":"static/js/main.194c4a86.chunk.js","sourcesContent":["export class Cookie {\r\n    static show_filters = 'show_filters';\r\n    static sound_effects = 'sound_effects';\r\n    static anime_browse_filters = 'anime_browse_filters';\r\n    static anime_season_filters = 'anime_season_filters';\r\n    static anime_list_filters = 'anime_list_filters';\r\n    static manga_browse_filters = 'manga_browse_filters';\r\n    static manga_season_filters = 'manga_season_filters';\r\n    static manga_list_filters = 'manga_list_filters';\r\n    static characters_filters = 'characters_filters';\r\n    static people_filters = 'people_filters';\r\n    static eroge_browse_filters = 'eroge_browse_filters';\r\n}\r\n\r\nexport class Alert {\r\n    static type_success = 'success';\r\n    static type_info = 'info';\r\n    static type_error = 'error';\r\n}\r\n\r\nexport class ApiResult {\r\n    static count = 'count';\r\n    static next = 'next';\r\n    static previous = 'previous';\r\n    static results = 'results';\r\n}\r\n\r\nexport class User {\r\n    static id = 'id';\r\n    static username = 'username';\r\n    static profile = 'profile';\r\n    static email = 'email';\r\n    static is_superuser = 'is_superuser';\r\n    static date_joined = 'date_joined';\r\n    static last_login = 'last_login';\r\n    static first_name = 'first_name';\r\n    static last_name = 'last_name';\r\n    static is_staff = 'is_staff';\r\n    static is_active = 'is_active';\r\n}\r\n\r\nexport class UserStatistics {\r\n    static the_crusade = 'the_crusade';\r\n    static the_crusade_progress = 'the_crusade_progress';\r\n    static romance_progress = 'romance_progress';\r\n    static romance_1 = 'romance_1';\r\n    static romance_2 = 'romance_2';\r\n    static romance_3 = 'romance_3';\r\n    static romance_4 = 'romance_4';\r\n    static pervert_progress = 'pervert_progress';\r\n    static pervert_1 = 'pervert_1';\r\n    static pervert_2 = 'pervert_2';\r\n    static pervert_3 = 'pervert_3';\r\n    static pervert_4 = 'pervert_4';\r\n    static classics_progress = 'classics_progress';\r\n    static classics_1 = 'classics_1';\r\n    static classics_2 = 'classics_2';\r\n    static classics_3 = 'classics_3';\r\n    static classics_4 = 'classics_4';\r\n}\r\n\r\nexport class Profile {\r\n    static id = 'id';\r\n    static avatar = 'avatar';\r\n    static profile_cover = 'profile_cover';\r\n    static profile_image = 'profile_image';\r\n    static title = 'title';\r\n    static bio = 'bio';\r\n    static user = 'user';\r\n    static favorite_anime = 'favorite_anime';\r\n    static favorite_manga = 'favorite_manga';\r\n    static favorite_characters = 'favorite_characters';\r\n    static active_theme = 'active_theme';\r\n    static theme_sounds = 'theme_sounds';\r\n    static show_adult = 'show_adult';\r\n    static about_section_bbcode = 'about_section_bbcode';\r\n    static is_profile_private = 'is_profile_private';\r\n    static is_anime_list_private = 'is_anime_list_private';\r\n    static is_anime_history_private = 'is_anime_history_private';\r\n    static is_manga_list_private = 'is_manga_list_private';\r\n    static is_manga_history_private = 'is_manga_history_private';\r\n}\r\n\r\nexport class UserList {\r\n    static owner = 'owner';\r\n    static is_updating = 'is_updating';\r\n    static is_scraping_episode_history_from_mal = 'is_scraping_episode_history_from_mal';\r\n    static scraping_episode_history_from_mal_progress = 'scraping_episode_history_from_mal_progress';\r\n    static xml_mal_anime_list = 'xml_mal_anime_list';\r\n    static anime_watching = 'anime_watching';\r\n    static anime_completed = 'anime_completed';\r\n    static anime_on_hold = 'anime_on_hold';\r\n    static anime_dropped = 'anime_dropped';\r\n    static anime_plan_to_watch = 'anime_plan_to_watch';\r\n    static anime_total_finished = 'anime_total_finished';\r\n    static anime_total_entries = 'anime_total_entries';\r\n    static anime_mean_score = 'anime_mean_score';\r\n    static anime_episodes_watched = 'anime_episodes_watched';\r\n    static anime_mins_spent_watching = 'anime_mins_spent_watching';\r\n    static anime_started_watching_on = 'anime_started_watching_on';\r\n    static manga_reading = 'manga_reading';\r\n    static manga_completed = 'manga_completed';\r\n    static manga_on_hold = 'manga_on_hold';\r\n    static manga_dropped = 'manga_dropped';\r\n    static manga_plan_to_read = 'manga_plan_to_read';\r\n    static manga_total_finished = 'manga_total_finished';\r\n    static manga_mean_score = 'manga_mean_score';\r\n    static manga_total_entries = 'manga_total_entries';\r\n    static manga_volumes_read = 'manga_volumes_read';\r\n    static manga_chapters_read = 'manga_chapters_read';\r\n    static manga_mins_spent_reading = 'manga_mins_spent_reading';\r\n    static manga_started_reading_on = 'manga_started_reading_on';\r\n}\r\n\r\nexport class UserAnimeEntry {\r\n    static id = 'id';\r\n    static anime = 'anime';\r\n    static episode_history = 'episode_history';\r\n    static watched_episodes = 'watched_episodes';\r\n    static start_date = 'start_date';\r\n    static finish_date = 'finish_date';\r\n    static score = 'score';\r\n    static status = 'status';\r\n    static times_watched = 'times_watched';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static priority = 'priority';\r\n    static rewatching = 'rewatching';\r\n    static rewatching_episode = 'rewatching_episode';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static anime_list = 'anime_list';\r\n}\r\n\r\nexport class UserMangaEntry {\r\n    static id = 'id';\r\n    static manga = 'manga';\r\n    static start_date = 'start_date';\r\n    static finish_date = 'finish_date';\r\n    static volume_history = 'volume_history';\r\n    static chapter_history = 'chapter_history';\r\n    static read_volumes = 'read_volumes';\r\n    static read_chapters = 'read_chapters';\r\n    static score = 'score';\r\n    static status = 'status';\r\n    static comments = 'comments';\r\n    static tags = 'tags';\r\n    static times_read = 'times_read';\r\n    static priority = 'priority';\r\n    static rereading = 'rereading';\r\n    static rereading_chapter = 'rereading_chapter';\r\n    static rereading_volume = 'rereading_volume';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class AnimeData {\r\n    static total_anime_per_season_json = 'total_anime_per_season_json';\r\n    static current_anime_season = 'current_anime_season';\r\n    static top_scored_anime = 'top_scored_anime';\r\n    static top_upcoming_anime = 'top_upcoming_anime';\r\n    static most_popular_anime = 'most_popular_anime';\r\n    static top_70s_anime = 'top_70s_anime';\r\n    static top_80s_anime = 'top_80s_anime';\r\n    static top_90s_anime = 'top_90s_anime';\r\n    static top_2000s_anime = 'top_2000s_anime';\r\n    static top_2010s_anime = 'top_2010s_anime';\r\n    static recently_added_anime = 'recently_added_anime';\r\n    static recently_downloaded_anime = 'recently_downloaded_anime';\r\n}\r\n\r\nexport class MangaData {\r\n    static total_manga_per_season_json = 'total_manga_per_season_json';\r\n    static current_manga_season = 'current_manga_season';\r\n    static top_scored_manga = 'top_scored_manga';\r\n    static top_upcoming_manga = 'top_upcoming_manga';\r\n    static most_popular_manga = 'most_popular_manga';\r\n    static top_70s_manga = 'top_70s_manga';\r\n    static top_80s_manga = 'top_80s_manga';\r\n    static top_90s_manga = 'top_90s_manga';\r\n    static top_2000s_manga = 'top_2000s_manga';\r\n    static top_2010s_manga = 'top_2010s_manga';\r\n    static recently_added_manga = 'recently_added_manga';\r\n    static recently_downloaded_manga = 'recently_downloaded_manga';\r\n}\r\n\r\nexport class IndustryData {\r\n    static most_popular_characters = 'most_popular_characters';\r\n    static recently_added_characters = 'recently_added_characters';\r\n}\r\n\r\nexport class ErogeData {\r\n    static top_scored_eroge = 'top_scored_eroge';\r\n    static most_popular_eroge = 'most_popular_eroge';\r\n    static top_windows_eroge = 'top_windows_eroge';\r\n    static top_android_eroge = 'top_android_eroge';\r\n    static largest_size_eroge = 'largest_size_eroge';\r\n    static recently_added_eroge = 'recently_added_eroge';\r\n}\r\n\r\nexport class SeasonYear {\r\n    static seasons = 'seasons';\r\n    static year = 'year';\r\n}\r\n\r\nexport class Anime {\r\n    static id = 'id';\r\n    static title = 'title';\r\n    static title_english = 'title_english';\r\n    static title_synonyms = 'title_synonyms';\r\n    static title_japanese = 'title_japanese';\r\n    static anime_cover_images = 'anime_cover_images';\r\n    static anime_cdn_cover_images = 'anime_cdn_cover_images';\r\n    static anime_on_server = 'anime_on_server';\r\n    static air_end = 'air_end';\r\n    static air_end_known = 'air_end_known';\r\n    static air_start = 'air_start';\r\n    static air_start_known = 'air_start_known';\r\n    static aired_string = 'aired_string';\r\n    static airing = 'airing';\r\n    static approved = 'approved';\r\n    static background = 'background';\r\n    static broadcast = 'broadcast';\r\n    static cannot_download = 'cannot_download';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static duration = 'duration';\r\n    static ending_theme = 'ending_theme';\r\n    static episodes = 'episodes';\r\n    static favorites = 'favorites';\r\n    static franchise = 'franchise';\r\n    static genres_csv = 'genres_csv';\r\n    static is_downloading = 'is_downloading';\r\n    static licensor = 'licensor';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static members = 'members';\r\n    static minutes_per_episode = 'minutes_per_episode';\r\n    static opening_theme = 'opening_theme';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static popularity = 'popularity';\r\n    static premiered = 'premiered';\r\n    static producer = 'producer';\r\n    static rank = 'rank';\r\n    static rating = 'rating';\r\n    static rating_short = 'rating_short';\r\n    static score = 'score';\r\n    static scored_by = 'scored_by';\r\n    static source = 'source';\r\n    static status = 'status';\r\n    static studio = 'studio';\r\n    static synopsis = 'synopsis';\r\n    static total_time_mins = 'total_time_mins';\r\n    static type = 'type';\r\n    static uuid_name = 'uuid_name';\r\n    static anime_roles = 'anime_roles';\r\n    static main_characters = 'main_characters';\r\n    static all_characters = 'all_characters';\r\n    static anime_relations = 'anime_relations';\r\n}\r\n\r\nexport const VALID_ANIME_RELATIONS = ['anime_relation_adaptation', 'anime_relation_alternative_setting',\r\n    'anime_relation_alternative_version', 'anime_relation_sequel', 'anime_relation_prequel',\r\n    'anime_relation_side_story', 'anime_relation_spin_off', 'anime_relation_other', 'anime_relation_summary',\r\n    'anime_relation_character', 'anime_relation_parent_story', 'anime_relation_full_story'];\r\nexport const VALID_ANIME_RELATION_NAMES = {\r\n    'anime_relation_adaptation': \"Adaptation\",\r\n    'anime_relation_alternative_setting': \"Alternative Setting\",\r\n    'anime_relation_alternative_version': \"Alternative Version\",\r\n    'anime_relation_sequel': \"Sequel\",\r\n    'anime_relation_prequel': \"Prequel\",\r\n    'anime_relation_side_story': \"Side Story\",\r\n    'anime_relation_spin_off': \"Spin Off\",\r\n    'anime_relation_other': \"Other\",\r\n    'anime_relation_summary': \"Summary\",\r\n    'anime_relation_character': \"Character\",\r\n    'anime_relation_parent_story': \"Parent Story\",\r\n    'anime_relation_full_story': \"Full Story\"\r\n};\r\n\r\nexport const ANIME_SHORT_STATUS = {\r\n    'Finished Airing': {label: 'FA', color: 'primary'},\r\n    'Not yet aired': {label: 'NA', color: 'default'},\r\n    'Currently Airing': {label: 'CA', color: 'success'},\r\n};\r\n\r\nexport const MANGA_SHORT_STATUS = {\r\n    'Finished': {label: 'F', color: 'primary'},\r\n    'Not yet published': {label: 'NP', color: 'default'},\r\n    'Publishing': {label: 'P', color: 'success'},\r\n    'Discontinued': {label: 'D', color: 'danger'},\r\n    'On Hiatus': {label: 'OH', color: 'warning'},\r\n};\r\n\r\nexport class AnimeOnServer {\r\n    static additional_dubs = 'additional_dubs';\r\n    static additional_info = 'additional_info';\r\n    static additional_subtitles = 'additional_subtitles';\r\n    static anime = 'anime';\r\n    static approved = 'approved';\r\n    static arabic_dub = 'arabic_dub';\r\n    static arabic_sub = 'arabic_sub';\r\n    static audio_channel = 'audio_channel';\r\n    static bulgarian_dub = 'bulgarian_dub';\r\n    static bulgarian_sub = 'bulgarian_sub';\r\n    static catalan_dub = 'catalan_dub';\r\n    static catalan_sub = 'catalan_sub';\r\n    static chinese_dub = 'chinese_dub';\r\n    static chinese_sub = 'chinese_sub';\r\n    static czech_dub = 'czech_dub';\r\n    static czech_sub = 'czech_sub';\r\n    static danish_dub = 'danish_dub';\r\n    static danish_sub = 'danish_sub';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static downloading = 'downloading';\r\n    static dutch_dub = 'dutch_dub';\r\n    static dutch_sub = 'dutch_sub';\r\n    static english_dub = 'english_dub';\r\n    static english_sub = 'english_sub';\r\n    static english_subs = 'english_subs';\r\n    static extract_subs = 'extract_subs';\r\n    static finnish_dub = 'finnish_dub';\r\n    static finnish_sub = 'finnish_sub';\r\n    static franchise_folder_name = 'franchise_folder_name';\r\n    static french_dub = 'french_dub';\r\n    static french_sub = 'french_sub';\r\n    static german_dub = 'german_dub';\r\n    static german_sub = 'german_sub';\r\n    static greek_dub = 'greek_dub';\r\n    static greek_sub = 'greek_sub';\r\n    static hebrew_dub = 'hebrew_dub';\r\n    static hebrew_sub = 'hebrew_sub';\r\n    static hungarian_dub = 'hungarian_dub';\r\n    static hungarian_sub = 'hungarian_sub';\r\n    static incomplete = 'incomplete';\r\n    static incomplete_progress = 'incomplete_progress';\r\n    static indonesian_dub = 'indonesian_dub';\r\n    static indonesian_sub = 'indonesian_sub';\r\n    static italian_dub = 'italian_dub';\r\n    static italian_sub = 'italian_sub';\r\n    static japanese_dub = 'japanese_dub';\r\n    static japanese_sub = 'japanese_sub';\r\n    static korean_dub = 'korean_dub';\r\n    static korean_sub = 'korean_sub';\r\n    static location = 'location';\r\n    static main_torrent_info = 'main_torrent_info';\r\n    static malay_dub = 'malay_dub';\r\n    static malay_sub = 'malay_sub';\r\n    static norwegian_dub = 'norwegian_dub';\r\n    static norwegian_sub = 'norwegian_sub';\r\n    static persian_dub = 'persian_dub';\r\n    static persian_sub = 'persian_sub';\r\n    static polish_dub = 'polish_dub';\r\n    static polish_sub = 'polish_sub';\r\n    static portuguese_dub = 'portuguese_dub';\r\n    static portuguese_sub = 'portuguese_sub';\r\n    static requiem = 'requiem';\r\n    static romanian_dub = 'romanian_dub';\r\n    static romanian_sub = 'romanian_sub';\r\n    static russian_dub = 'russian_dub';\r\n    static russian_sub = 'russian_sub';\r\n    static shared_torrent_with = 'shared_torrent_with';\r\n    static size_on_HDD_GB = 'size_on_HDD_GB';\r\n    static slovak_dub = 'slovak_dub';\r\n    static slovak_sub = 'slovak_sub';\r\n    static spanish_dub = 'spanish_dub';\r\n    static spanish_sub = 'spanish_sub';\r\n    static swedish_dub = 'swedish_dub';\r\n    static swedish_sub = 'swedish_sub';\r\n    static thai_dub = 'thai_dub';\r\n    static thai_sub = 'thai_sub';\r\n    static torrent_file = 'torrent_file';\r\n    static torrent_hash = 'torrent_hash';\r\n    static torrent_magnet = 'torrent_magnet';\r\n    static turkish_dub = 'turkish_dub';\r\n    static turkish_sub = 'turkish_sub';\r\n    static video_quality = 'video_quality';\r\n    static video_resolution = 'video_resolution';\r\n    static vietnamese_dub = 'vietnamese_dub';\r\n    static vietnamese_sub = 'vietnamese_sub';\r\n}\r\n\r\nexport class AnimeFranchise {\r\n    static id = 'id';\r\n    static title = 'title';\r\n    static cover_image = 'cover_image';\r\n    static total_titles = 'total_titles';\r\n    static top_members = 'top_members';\r\n    static total_members = 'total_members';\r\n    static top_score = 'top_score';\r\n    static average_score = 'average_score';\r\n    static total_minutes = 'total_minutes';\r\n    static total_episodes = 'total_episodes';\r\n    static anime_franchise = 'anime_franchise';\r\n}\r\n\r\nexport class Manga {\r\n    static active_image_name = 'active_image_name';\r\n    static air_end = 'air_end';\r\n    static air_end_known = 'air_end_known';\r\n    static air_start = 'air_start';\r\n    static air_start_known = 'air_start_known';\r\n    static anidb_image_url = 'anidb_image_url';\r\n    static ann_image_url = 'ann_image_url';\r\n    static approved = 'approved';\r\n    static authors = 'authors';\r\n    static background = 'background';\r\n    static cannot_download = 'cannot_download';\r\n    static chapters = 'chapters';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static favorites = 'favorites';\r\n    static genres = 'genres';\r\n    static genres_csv = 'genres_csv';\r\n    static id = 'id';\r\n    static image_url = 'image_url';\r\n    static is_downloading = 'is_downloading';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static manga_cover_images = 'manga_cover_images';\r\n    static manga_cdn_cover_images = 'manga_cdn_cover_images';\r\n    static manga_on_server = 'manga_on_server';\r\n    static members = 'members';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static popularity = 'popularity';\r\n    static published_string = 'published_string';\r\n    static publishing = 'publishing';\r\n    static rank = 'rank';\r\n    static related = 'related';\r\n    static score = 'score';\r\n    static scored_by = 'scored_by';\r\n    static serialization = 'serialization';\r\n    static status = 'status';\r\n    static synopsis = 'synopsis';\r\n    static title = 'title';\r\n    static title_english = 'title_english';\r\n    static title_japanese = 'title_japanese';\r\n    static title_synonyms = 'title_synonyms';\r\n    static type = 'type';\r\n    static uuid_name = 'uuid_name';\r\n    static volumes = 'volumes';\r\n    static manga_roles = 'manga_roles';\r\n    static main_characters = 'main_characters';\r\n    static all_characters = 'all_characters';\r\n    static manga_relations = 'manga_relations';\r\n}\r\n\r\nexport const VALID_MANGA_RELATIONS = [\r\n    'manga_relation_adaptation',\r\n    'manga_relation_alternative_setting',\r\n    'manga_relation_alternative_version',\r\n    'manga_relation_sequel',\r\n    'manga_relation_prequel',\r\n    'manga_relation_side_story',\r\n    'manga_relation_spin_off',\r\n    'manga_relation_other',\r\n    'manga_relation_summary',\r\n    'manga_relation_character',\r\n    'manga_relation_parent_story',\r\n    'manga_relation_full_story'\r\n];\r\n\r\nexport const VALID_MANGA_RELATION_NAMES = {\r\n    'manga_relation_adaptation': \"Adaptation\",\r\n    'manga_relation_alternative_setting': \"Alternative Setting\",\r\n    'manga_relation_alternative_version': \"Alternative Version\",\r\n    'manga_relation_sequel': \"Sequel\",\r\n    'manga_relation_prequel': \"Prequel\",\r\n    'manga_relation_side_story': \"Side Story\",\r\n    'manga_relation_spin_off': \"Spin Off\",\r\n    'manga_relation_other': \"Other\",\r\n    'manga_relation_summary': \"Summary\",\r\n    'manga_relation_character': \"Character\",\r\n    'manga_relation_parent_story': \"Parent Story\",\r\n    'manga_relation_full_story': \"Full Story\"\r\n};\r\n\r\nexport class Character {\r\n    static id = 'id';\r\n    static character_cover_images = 'character_cover_images';\r\n    static character_cdn_cover_images = 'character_cdn_cover_images';\r\n    static anime_roles = 'anime_roles';\r\n    static manga_roles = 'manga_roles';\r\n    static uuid_name = 'uuid_name';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static approved = 'approved';\r\n    static character_name = 'name';\r\n    static nickname = 'nickname';\r\n    static short_name = 'short_name';\r\n    static image_url = 'image_url';\r\n    static anidb_image_url = 'anidb_image_url';\r\n    static ann_image_url = 'ann_image_url';\r\n    static active_image_name = 'active_image_name';\r\n    static favorites = 'favorites';\r\n    static description = 'description';\r\n    static voice_actors = 'voice_actors';\r\n    static role = 'role';\r\n    static anime_roles_defined = 'anime_roles_defined';\r\n    static manga_roles_defined = 'manga_roles_defined';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class Person {\r\n    static id = 'id';\r\n    static uuid_name = 'uuid_name';\r\n    static mal_id = 'mal_id';\r\n    static mal_link = 'mal_link';\r\n    static approved = 'approved';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static person_cover_images = 'person_cover_images';\r\n    static person_cdn_cover_images = 'person_cdn_cover_images';\r\n    static person_name = 'name';\r\n    static given_name = 'given_name';\r\n    static family_name = 'family_name';\r\n    static alternative_names = 'alternative_names';\r\n    static image_url = 'image_url';\r\n    static birthday = 'birthday';\r\n    static website = 'website';\r\n    static favorites = 'favorites';\r\n    static more_info = 'more_info';\r\n    static has_roles = 'has_roles';\r\n    static voice_actor_roles = 'voice_actor_roles';\r\n    static anime_staff_positions = 'anime_staff_positions';\r\n    static anime_staff_positions_roles = 'anime_staff_positions_roles';\r\n    static published_manga = 'published_manga';\r\n    static published_manga_roles = 'published_manga_roles';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n}\r\n\r\nexport class Eroge {\r\n    static censorship = 'censorship';\r\n    static date_added = 'date_added';\r\n    static date_last_modified = 'date_last_modified';\r\n    static date_updated = 'date_updated';\r\n    static description = 'description';\r\n    static download_url = 'download_url';\r\n    static downloaded = 'downloaded';\r\n    static eroge_cover_images = 'eroge_cover_images';\r\n    static eroge_screenshots = 'eroge_screenshots';\r\n    static game_location = 'game_location';\r\n    static game_url = 'game_url';\r\n    static id = 'id';\r\n    static language = 'language';\r\n    static eroge_name = 'name';\r\n    static platforms = 'platforms';\r\n    static rated_by = 'rated_by';\r\n    static rating = 'rating';\r\n    static scraped_from = 'scraped_from';\r\n    static size = 'size';\r\n    static source = 'source';\r\n    static tags = 'tags';\r\n    static type = 'type';\r\n}\r\n\r\nexport class CoverImages {\r\n    static image = 'image';\r\n}\r\n\r\nexport class CDNCoverImages {\r\n    static image_url = 'image_url';\r\n    static thumbnail_url = 'thumbnail_url';\r\n    static size = 'size';\r\n    static width = 'width';\r\n    static height = 'height';\r\n}\r\n\r\nexport class FiltersPreset {\r\n    static id = 'id';\r\n    static preset_name = 'name';\r\n    static filters = 'filters';\r\n}\r\n\r\nexport class AnimeDataStatistics {\r\n    static anime_data = 'anime_data';\r\n    static total_anime = 'total_anime';\r\n    static total_anime_deleted_mal = 'total_anime_deleted_mal';\r\n    static total_anime_pending_mal = 'total_anime_pending_mal';\r\n    static total_anime_downloaded = 'total_anime_downloaded';\r\n    static total_anime_downloading = 'total_anime_downloading';\r\n    static total_downloaded_size = 'total_downloaded_size';\r\n    static mean_score = 'mean_score';\r\n    static total_episodes = 'total_episodes';\r\n    static total_minutes = 'total_minutes';\r\n    static total_quality_2160p = 'total_quality_2160p';\r\n    static total_quality_1080p = 'total_quality_1080p';\r\n    static total_quality_960p = 'total_quality_960p';\r\n    static total_quality_720p = 'total_quality_720p';\r\n    static total_quality_576p = 'total_quality_576p';\r\n    static total_quality_560p = 'total_quality_560p';\r\n    static total_quality_540p = 'total_quality_540p';\r\n    static total_quality_528p = 'total_quality_528p';\r\n    static total_quality_480p = 'total_quality_480p';\r\n    static total_quality_396p = 'total_quality_396p';\r\n    static total_quality_360p = 'total_quality_360p';\r\n    static total_quality_288p = 'total_quality_288p';\r\n    static total_quality_240p = 'total_quality_240p';\r\n    static total_original_anime = 'total_original_anime';\r\n    static total_original_anime_mean = 'total_original_anime_mean';\r\n    static total_anime_from_light_novel = 'total_anime_from_light_novel';\r\n    static total_anime_from_light_novel_mean = 'total_anime_from_light_novel_mean';\r\n    static total_anime_from_music = 'total_anime_from_music';\r\n    static total_anime_from_music_mean = 'total_anime_from_music_mean';\r\n    static total_anime_from_manga = 'total_anime_from_manga';\r\n    static total_anime_from_manga_mean = 'total_anime_from_manga_mean';\r\n    static total_anime_from_other = 'total_anime_from_other';\r\n    static total_anime_from_other_mean = 'total_anime_from_other_mean';\r\n    static total_anime_from_visual_novel = 'total_anime_from_visual_novel';\r\n    static total_anime_from_visual_novel_mean = 'total_anime_from_visual_novel_mean';\r\n    static total_anime_from_book = 'total_anime_from_book';\r\n    static total_anime_from_book_mean = 'total_anime_from_book_mean';\r\n    static total_anime_from_game = 'total_anime_from_game';\r\n    static total_anime_from_game_mean = 'total_anime_from_game_mean';\r\n    static total_anime_from_web_manga = 'total_anime_from_web_manga';\r\n    static total_anime_from_web_manga_mean = 'total_anime_from_web_manga_mean';\r\n    static total_anime_from_novel = 'total_anime_from_novel';\r\n    static total_anime_from_novel_mean = 'total_anime_from_novel_mean';\r\n    static total_anime_from_picture_book = 'total_anime_from_picture_book';\r\n    static total_anime_from_picture_book_mean = 'total_anime_from_picture_book_mean';\r\n    static total_anime_from_card_game = 'total_anime_from_card_game';\r\n    static total_anime_from_card_game_mean = 'total_anime_from_card_game_mean';\r\n    static total_anime_from_4_kom_manga = 'total_anime_from_4_kom_manga';\r\n    static total_anime_from_4_kom_manga_mean = 'total_anime_from_4_kom_manga_mean';\r\n    static total_anime_from_digital_manga = 'total_anime_from_digital_manga';\r\n    static total_anime_from_digital_manga_mean = 'total_anime_from_digital_manga_mean';\r\n    static total_anime_from_radio = 'total_anime_from_radio';\r\n    static total_anime_from_radio_mean = 'total_anime_from_radio_mean';\r\n    static total_movie = 'total_movie';\r\n    static total_music = 'total_music';\r\n    static total_ona = 'total_ona';\r\n    static total_ova = 'total_ova';\r\n    static total_special = 'total_special';\r\n    static total_tv = 'total_tv';\r\n    static total_finished_airing = 'total_finished_airing';\r\n    static total_currently_airing = 'total_currently_airing';\r\n    static total_not_yet_aired = 'total_not_yet_aired';\r\n    static total_rated_g = 'total_rated_g';\r\n    static total_rated_pgc = 'total_rated_pgc';\r\n    static total_rated_pg13 = 'total_rated_pg13';\r\n    static total_rated_r = 'total_rated_r';\r\n    static total_rated_r_plus = 'total_rated_r_plus';\r\n    static total_rated_rx = 'total_rated_rx';\r\n    static total_rated_none = 'total_rated_none';\r\n    static total_genre_action = 'total_genre_action';\r\n    static total_genre_adventure = 'total_genre_adventure';\r\n    static total_genre_cars = 'total_genre_cars';\r\n    static total_genre_comedy = 'total_genre_comedy';\r\n    static total_genre_dementia = 'total_genre_dementia';\r\n    static total_genre_demons = 'total_genre_demons';\r\n    static total_genre_drama = 'total_genre_drama';\r\n    static total_genre_ecchi = 'total_genre_ecchi';\r\n    static total_genre_fantasy = 'total_genre_fantasy';\r\n    static total_genre_game = 'total_genre_game';\r\n    static total_genre_harem = 'total_genre_harem';\r\n    static total_genre_hentai = 'total_genre_hentai';\r\n    static total_genre_historical = 'total_genre_historical';\r\n    static total_genre_horror = 'total_genre_horror';\r\n    static total_genre_josei = 'total_genre_josei';\r\n    static total_genre_kids = 'total_genre_kids';\r\n    static total_genre_magic = 'total_genre_magic';\r\n    static total_genre_martial_arts = 'total_genre_martial_arts';\r\n    static total_genre_mecha = 'total_genre_mecha';\r\n    static total_genre_military = 'total_genre_military';\r\n    static total_genre_music = 'total_genre_music';\r\n    static total_genre_mystery = 'total_genre_mystery';\r\n    static total_genre_parody = 'total_genre_parody';\r\n    static total_genre_police = 'total_genre_police';\r\n    static total_genre_psychological = 'total_genre_psychological';\r\n    static total_genre_romance = 'total_genre_romance';\r\n    static total_genre_samurai = 'total_genre_samurai';\r\n    static total_genre_school = 'total_genre_school';\r\n    static total_genre_sci_fi = 'total_genre_sci_fi';\r\n    static total_genre_seinen = 'total_genre_seinen';\r\n    static total_genre_shoujo = 'total_genre_shoujo';\r\n    static total_genre_shoujo_ai = 'total_genre_shoujo_ai';\r\n    static total_genre_shounen = 'total_genre_shounen';\r\n    static total_genre_shounen_ai = 'total_genre_shounen_ai';\r\n    static total_genre_slice_of_life = 'total_genre_slice_of_life';\r\n    static total_genre_space = 'total_genre_space';\r\n    static total_genre_sports = 'total_genre_sports';\r\n    static total_genre_super_power = 'total_genre_super_power';\r\n    static total_genre_supernatural = 'total_genre_supernatural';\r\n    static total_genre_thriller = 'total_genre_thriller';\r\n    static total_genre_vampire = 'total_genre_vampire';\r\n    static total_genre_yaoi = 'total_genre_yaoi';\r\n    static total_genre_yuri = 'total_genre_yuri';\r\n    static anime_achievement_romance_thresholds = 'anime_achievement_romance_thresholds';\r\n    static anime_achievement_romance_info = 'anime_achievement_romance_info';\r\n    static anime_achievement_classics_thresholds = 'anime_achievement_classics_thresholds';\r\n    static anime_achievement_classics_info = 'anime_achievement_classics_info';\r\n    static anime_achievement_pervert_thresholds = 'anime_achievement_pervert_thresholds';\r\n    static anime_achievement_pervert_info = 'anime_achievement_pervert_info';\r\n}\r\n\r\nexport class AchievementInfo {\r\n    static title = 'title';\r\n    static requirement = 'requirement';\r\n    static tier_1 = 'tier_1';\r\n    static tier_2 = 'tier_2';\r\n    static tier_3 = 'tier_3';\r\n    static tier_4 = 'tier_4';\r\n}\r\n\r\nexport class AchievementTier {\r\n    static title = 'title';\r\n    static description = 'description';\r\n    static image = 'image';\r\n}\r\n","import Cookies from \"js-cookie\";\r\nimport {Cookie} from \"../../models\";\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_ANIME_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        anime_on_server__english_sub: false,\r\n        anime_on_server__english_dub: false,\r\n        anime_on_server__japanese_dub: false,\r\n        anime_on_server__japanese_sub: false,\r\n        episodes_range: [0, 53],\r\n        length_range: [0, 61],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        rating_short: [],\r\n        video_quality: [],\r\n        audio_channel: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_MANGA_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        volumes_range: [0, 53],\r\n        chapters_range: [0, 53],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_CHARACTERS_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_PEOPLE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_EROGE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        type: [],\r\n        downloaded: '',\r\n        platforms: [],\r\n        language: [],\r\n        censorship: [],\r\n        tags: [],\r\n        ordering: '-date_added',\r\n    };\r\n}\r\n\r\n\r\nexport function loadCookies() {\r\n    let loaded_cookies = {\r\n        anime_browse_filters: {},\r\n        anime_season_filters: {},\r\n        anime_list_filters: {},\r\n        manga_browse_filters: {},\r\n        manga_season_filters: {},\r\n        manga_list_filters: {},\r\n        characters_filters: {},\r\n        people_filters: {},\r\n        eroge_browse_filters: {},\r\n    };\r\n\r\n    if (Cookies.get(Cookie.show_filters) === undefined || Cookies.get(Cookie.show_filters) === 'undefined')\r\n        Cookies.set(Cookie.show_filters, true);\r\n\r\n    const new_anime_values = new FILTER_ANIME_INITIAL_VALUES();\r\n    let anime_browse_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_browse_filters) === undefined || Cookies.get(Cookie.anime_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_browse_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_browse_filters = JSON.parse(Cookies.get(Cookie.anime_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    let anime_season_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_season_filters) === undefined || Cookies.get(Cookie.anime_season_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_season_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_season_filters = JSON.parse(Cookies.get(Cookie.anime_season_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    let anime_list_filters = new_anime_values.VALUES;\r\n    if (Cookies.get(Cookie.anime_list_filters) === undefined || Cookies.get(Cookie.anime_list_filters) === 'undefined')\r\n        Cookies.set(Cookie.anime_list_filters, new_anime_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            anime_list_filters = JSON.parse(Cookies.get(Cookie.anime_list_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.anime_browse_filters = anime_browse_filters;\r\n    loaded_cookies.anime_season_filters = anime_season_filters;\r\n    loaded_cookies.anime_list_filters = anime_list_filters;\r\n\r\n    const new_manga_values = new FILTER_MANGA_INITIAL_VALUES();\r\n    let manga_browse_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_browse_filters) === undefined || Cookies.get(Cookie.manga_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_browse_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_browse_filters = JSON.parse(Cookies.get(Cookie.manga_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    let manga_season_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_season_filters) === undefined || Cookies.get(Cookie.manga_season_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_season_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_season_filters = JSON.parse(Cookies.get(Cookie.manga_season_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    let manga_list_filters = new_manga_values.VALUES;\r\n    if (Cookies.get(Cookie.manga_list_filters) === undefined || Cookies.get(Cookie.manga_list_filters) === 'undefined')\r\n        Cookies.set(Cookie.manga_list_filters, new_manga_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            manga_list_filters = JSON.parse(Cookies.get(Cookie.manga_list_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.manga_browse_filters = manga_browse_filters;\r\n    loaded_cookies.manga_season_filters = manga_season_filters;\r\n    loaded_cookies.manga_list_filters = manga_list_filters;\r\n\r\n    const new_characters_values = new FILTER_CHARACTERS_INITIAL_VALUES();\r\n    let characters_filters = new_characters_values.VALUES;\r\n    if (Cookies.get(Cookie.characters_filters) === undefined || Cookies.get(Cookie.characters_filters) === 'undefined')\r\n        Cookies.set(Cookie.characters_filters, new_characters_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            characters_filters = JSON.parse(Cookies.get(Cookie.characters_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.characters_filters = characters_filters;\r\n\r\n    const new_people_values = new FILTER_PEOPLE_INITIAL_VALUES();\r\n    let people_filters = new_people_values.VALUES;\r\n    if (Cookies.get(Cookie.people_filters) === undefined || Cookies.get(Cookie.people_filters) === 'undefined')\r\n        Cookies.set(Cookie.people_filters, new_people_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            people_filters = JSON.parse(Cookies.get(Cookie.people_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.people_filters = people_filters;\r\n\r\n    const new_eroge_values = new FILTER_EROGE_INITIAL_VALUES();\r\n    let eroge_filters = new_eroge_values.VALUES;\r\n    if (Cookies.get(Cookie.eroge_browse_filters) === undefined || Cookies.get(Cookie.eroge_browse_filters) === 'undefined')\r\n        Cookies.set(Cookie.eroge_browse_filters, new_eroge_values.VALUES);\r\n    else { // noinspection UnusedCatchParameterJS\r\n        try {\r\n            eroge_filters = JSON.parse(Cookies.get(Cookie.eroge_browse_filters));\r\n        } catch (e) {\r\n        }\r\n    }\r\n    loaded_cookies.eroge_browse_filters = eroge_filters;\r\n\r\n    return loaded_cookies\r\n}\r\n","import Cookies from 'js-cookie'\r\n\r\nimport {\r\n    TYPE_BROWSE, TYPE_LIST, TYPE_SEASON\r\n} from \"../globals\";\r\nimport {\r\n    SET_ANIME_FILTERS, SET_CHARACTERS_FILTERS,\r\n    SET_COOKIE_SHOW_FILTERS, SET_EROGE_FILTERS,\r\n    SET_MANGA_FILTERS, SET_PEOPLE_FILTERS\r\n} from \"../actions/types\";\r\nimport {Cookie} from \"../models\";\r\nimport {loadCookies} from \"../components/cookies/load_cookies\";\r\n\r\n\r\nconst loaded_cookies = loadCookies();\r\nconst initialState = {\r\n    show_filters: Cookies.get(Cookie.show_filters) === undefined ? true : Cookies.get(Cookie.show_filters) === 'true',\r\n    anime_browse_filters: loaded_cookies.anime_browse_filters,\r\n    anime_season_filters: loaded_cookies.anime_season_filters,\r\n    anime_list_filters: loaded_cookies.anime_list_filters,\r\n    manga_browse_filters: loaded_cookies.manga_browse_filters,\r\n    manga_season_filters: loaded_cookies.manga_season_filters,\r\n    manga_list_filters: loaded_cookies.manga_list_filters,\r\n    characters_filters: loaded_cookies.characters_filters,\r\n    people_filters: loaded_cookies.people_filters,\r\n    eroge_browse_filters: loaded_cookies.eroge_browse_filters,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_COOKIE_SHOW_FILTERS:\r\n            Cookies.set(Cookie.show_filters, action.value);\r\n            return {\r\n                ...state,\r\n                show_filters: action.value,\r\n            };\r\n        case SET_ANIME_FILTERS:\r\n            return update_anime_filter_state(state, action);\r\n        case SET_MANGA_FILTERS:\r\n            return update_manga_filter_state(state, action);\r\n        case SET_CHARACTERS_FILTERS:\r\n            Cookies.set(Cookie.characters_filters, action.value);\r\n            return {\r\n                ...state,\r\n                characters_filters: action.value,\r\n            };\r\n        case SET_PEOPLE_FILTERS:\r\n            Cookies.set(Cookie.people_filters, action.value);\r\n            return {\r\n                ...state,\r\n                people_filters: action.value,\r\n            };\r\n        case SET_EROGE_FILTERS:\r\n            Cookies.set(Cookie.eroge_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                eroge_browse_filters: action.value,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction update_anime_filter_state(state, action) {\r\n    switch (action.page_type) {\r\n        case TYPE_BROWSE:\r\n            Cookies.set(Cookie.anime_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_browse_filters: action.value,\r\n            };\r\n        case TYPE_SEASON:\r\n            Cookies.set(Cookie.anime_season_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_season_filters: action.value,\r\n            };\r\n        case TYPE_LIST:\r\n            Cookies.set(Cookie.anime_list_filters, action.value);\r\n            return {\r\n                ...state,\r\n                anime_list_filters: action.value,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n                anime_browse_filters: action.value,\r\n            };\r\n    }\r\n}\r\n\r\nfunction update_manga_filter_state(state, action) {\r\n    switch (action.page_type) {\r\n        case TYPE_BROWSE:\r\n            Cookies.set(Cookie.manga_browse_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_browse_filters: action.value,\r\n            };\r\n        case TYPE_SEASON:\r\n            Cookies.set(Cookie.manga_season_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_season_filters: action.value,\r\n            };\r\n        case TYPE_LIST:\r\n            Cookies.set(Cookie.manga_list_filters, action.value);\r\n            return {\r\n                ...state,\r\n                manga_list_filters: action.value,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n                manga_browse_filters: action.value,\r\n            };\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Howl} from 'howler';\r\nimport {Profile, User} from \"../../models\";\r\nimport store from \"../../store\";\r\n\r\n\r\nexport function loadSounds() {\r\n    playClickSound(0);\r\n    playHoverSound(0);\r\n    playExpand3Sound(0);\r\n    playExpand2Sound(0);\r\n    playExpandSound(0);\r\n    playErrorSound(0);\r\n    playWarningSound(0);\r\n    playDeploySound(0);\r\n}\r\n\r\nexport function playWelcomeSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/welcome.ogg'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playClickSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/click.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playDeploySound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/deploy.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playHoverSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/hover.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpandSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpand2Sound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand-2.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playExpand3Sound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 0.05;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/expand-3.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playFadeSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/fade.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playErrorSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/error.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n\r\nexport function playWarningSound(v) {\r\n    try {\r\n        if (!store.getState().auth.user[User.profile][Profile.theme_sounds]) return;\r\n    } catch (e) {\r\n        return\r\n    }\r\n    let vol = 1;\r\n    if (Number.isFinite(v))\r\n        vol = v;\r\n    let sound = new Howl({\r\n        src: ['/sounds/warning.mp3'],\r\n        volume: vol,\r\n    });\r\n\r\n    sound.play(undefined, false);\r\n}\r\n","import {\r\n    AUTH_USER,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    GET_USER, GET_PROFILE_PRIVACY_SETTINGS\r\n} from \"../actions/types\";\r\nimport {playExpand2Sound} from \"../components/layout/sounds\";\r\nimport {Profile, User} from \"../models\";\r\n\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    initial_auth: true,\r\n    user_loading: false,\r\n    user: null,\r\n    user_authenticated: null,\r\n    visited_user_loaded: false,\r\n    visited_user: null,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LOADING:\r\n            return {\r\n                ...state,\r\n                user_loading: true\r\n            };\r\n        case GET_USER:\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                visited_user_loaded: true,\r\n                visited_user: action.payload,\r\n            };\r\n        case AUTH_USER:\r\n            return {\r\n                ...state,\r\n                user_authenticated: true,\r\n                user_loading: false,\r\n                user: action.payload,\r\n                initial_auth: false,\r\n            };\r\n        case GET_PROFILE_PRIVACY_SETTINGS:\r\n            let updated_user = {};\r\n            Object.assign(updated_user, state.user);\r\n            updated_user[User.profile][Profile.is_anime_list_private] = action.payload[Profile.is_anime_list_private];\r\n            updated_user[User.profile][Profile.is_anime_history_private] = action.payload[Profile.is_anime_history_private];\r\n            updated_user[User.profile][Profile.is_manga_list_private] = action.payload[Profile.is_manga_list_private];\r\n            updated_user[User.profile][Profile.is_manga_history_private] = action.payload[Profile.is_manga_history_private];\r\n            return {\r\n                ...state,\r\n                user_loading: false,\r\n                user: updated_user,\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            playExpand2Sound();\r\n            localStorage.setItem('token', action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                user_authenticated: true,\r\n                user_loading: false,\r\n            };\r\n        case AUTH_ERROR:\r\n        case LOGIN_FAIL:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token');\r\n            return {\r\n                ...state,\r\n                token: null,\r\n                user: null,\r\n                user_authenticated: false,\r\n                user_loading: false,\r\n                initial_auth: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    AUTH_ERROR_CLEAR_USER_INFO,\r\n    CANCEL_USER_ACHIEVEMENTS_LOADING,\r\n    CANCEL_USER_LIST_LOADING,\r\n    CLEAR_USER_ACHIEVEMENTS,\r\n    CLEAR_USER_ANIME_ENTRY,\r\n    CLEAR_USER_MANGA_ENTRY,\r\n    FINISH_LOADING_USER_ENTRY,\r\n    FINISH_UPLOADING_FILE,\r\n    GET_ALL_USERS,\r\n    GET_ANIME_FILTER_PRESETS,\r\n    GET_EROGE_FILTER_PRESETS,\r\n    GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    GET_MANGA_FILTER_PRESETS, GET_PROFILE_PRIVACY_SETTINGS,\r\n    GET_USER_ACHIEVEMENTS,\r\n    GET_USER_ANIME_ENTRY,\r\n    GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    GET_USER_LIST, GET_USER_LIST_PRIVACY_SETTINGS,\r\n    GET_USER_MANGA_ENTRY,\r\n    GET_VISITED_USER_ANIME_HISTORY,\r\n    GET_VISITED_USER_MANGA_HISTORY,\r\n    SET_ANIME_PRESET,\r\n    SET_EROGE_PRESET,\r\n    SET_MANGA_PRESET,\r\n    UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    UPDATE_USER_ANIME_STATISTICS,\r\n    UPDATE_USER_LIST,\r\n    UPLOAD_ANIME_LIST_MAL_XML, UPLOAD_MANGA_LIST_MAL_XML,\r\n    UPLOADING_FILE,\r\n    USER_ACHIEVEMENTS_LOADING,\r\n    USER_ENTRY_LOADING,\r\n    USER_INFO_LOADING,\r\n    USER_LIST_LOADING,\r\n    USER_STATISTICS_LOADING,\r\n    USERS_LOADING\r\n} from \"../actions/types\";\r\nimport {Anime, Manga, UserAnimeEntry, UserList, UserMangaEntry} from \"../models\";\r\n\r\n\r\nconst initialState = {\r\n    all_users: [],\r\n    users_loading: false,\r\n    all_users_loaded: false,\r\n\r\n    entry_loading: false,\r\n    user_anime_entry: {},\r\n    user_anime_entry_loaded: false,\r\n    user_manga_entry: {},\r\n    user_manga_entry_loaded: false,\r\n\r\n    uploading_file: false,\r\n\r\n    user_list: {},\r\n    user_list_loading: false,\r\n    user_statistics_loading: false,\r\n    user_anime_statistics: {},\r\n    user_manga_statistics: {},\r\n\r\n    user_info_loading: false,\r\n\r\n    user_anime_history: {},\r\n    user_manga_history: {},\r\n\r\n    anime_filter_presets: [],\r\n    manga_filter_presets: [],\r\n    eroge_filter_presets: [],\r\n    selected_anime_preset: {},\r\n    selected_manga_preset: {},\r\n    selected_eroge_preset: {},\r\n\r\n    user_anime_entry_statuses: {},\r\n    user_manga_entry_statuses: {},\r\n\r\n    user_achievements_loading: false,\r\n    user_achievements: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case USERS_LOADING:\r\n            return {\r\n                ...state,\r\n                users_loading: true,\r\n                all_users_loaded: false\r\n            };\r\n        case USER_LIST_LOADING:\r\n            return {\r\n                ...state,\r\n                user_list_loading: true,\r\n            };\r\n        case CANCEL_USER_LIST_LOADING:\r\n            return {\r\n                ...state,\r\n                user_list_loading: false,\r\n            };\r\n        case GET_ALL_USERS:\r\n            return {\r\n                ...state,\r\n                all_users: action.payload,\r\n                users_loading: false,\r\n                all_users_loaded: true\r\n            };\r\n        case USER_ENTRY_LOADING:\r\n            return {\r\n                ...state,\r\n                entry_loading: true,\r\n                user_anime_entry_loaded: false,\r\n                user_manga_entry_loaded: false\r\n            };\r\n        case USER_STATISTICS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_statistics_loading: true,\r\n            };\r\n        case FINISH_LOADING_USER_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n            };\r\n        case GET_USER_ANIME_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_anime_entry_loaded: true,\r\n                user_anime_entry: action.payload\r\n            };\r\n        case CLEAR_USER_ANIME_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_anime_entry_loaded: false,\r\n                user_anime_entry: {}\r\n            };\r\n        case GET_USER_MANGA_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_manga_entry_loaded: true,\r\n                user_manga_entry: action.payload\r\n            };\r\n        case CLEAR_USER_MANGA_ENTRY:\r\n            return {\r\n                ...state,\r\n                entry_loading: false,\r\n                user_manga_entry_loaded: false,\r\n                user_manga_entry: {}\r\n            };\r\n        case UPDATE_USER_LIST:\r\n        case GET_USER_LIST:\r\n            return {\r\n                ...state,\r\n                user_list: action.payload,\r\n                user_list_loading: false,\r\n            };\r\n        case UPDATE_USER_ANIME_STATISTICS:\r\n            return {\r\n                ...state,\r\n                user_statistics_loading: false,\r\n                user_anime_statistics: action.payload,\r\n            };\r\n        case UPLOADING_FILE:\r\n            return {\r\n                ...state,\r\n                uploading_file: true\r\n            };\r\n        case FINISH_UPLOADING_FILE:\r\n            return {\r\n                ...state,\r\n                uploading_file: false\r\n            };\r\n        case UPLOAD_ANIME_LIST_MAL_XML:\r\n        case UPLOAD_MANGA_LIST_MAL_XML:\r\n            return {\r\n                ...state,\r\n                uploading_file: false\r\n            };\r\n        case USER_INFO_LOADING:\r\n            return {\r\n                ...state,\r\n                user_info_loading: true\r\n            };\r\n        case GET_VISITED_USER_ANIME_HISTORY:\r\n            return {\r\n                ...state,\r\n                user_anime_history: action.payload,\r\n                user_info_loading: false\r\n            };\r\n        case GET_VISITED_USER_MANGA_HISTORY:\r\n            return {\r\n                ...state,\r\n                user_manga_history: action.payload,\r\n                user_info_loading: false\r\n            };\r\n        case GET_ANIME_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                anime_filter_presets: action.payload,\r\n            };\r\n        case GET_MANGA_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                manga_filter_presets: action.payload,\r\n            };\r\n        case GET_EROGE_FILTER_PRESETS:\r\n            return {\r\n                ...state,\r\n                eroge_filter_presets: action.payload,\r\n            };\r\n        case SET_ANIME_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_anime_preset: action.payload,\r\n            };\r\n        case SET_MANGA_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_manga_preset: action.payload,\r\n            };\r\n        case SET_EROGE_PRESET:\r\n            return {\r\n                ...state,\r\n                selected_eroge_preset: action.payload,\r\n            };\r\n        case GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES:\r\n            return {\r\n                ...state,\r\n                user_anime_entry_statuses: action.payload,\r\n            };\r\n        case UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES:\r\n            let current_statuses = {};\r\n            if (typeof action.payload === 'object' && action.payload !== null) {\r\n                Object.assign(current_statuses, state.user_anime_entry_statuses);\r\n                current_statuses[action.payload[UserAnimeEntry.anime][Anime.id]] = action.payload[UserAnimeEntry.status];\r\n            } else if (!isNaN(action.payload)) {\r\n                delete state.user_anime_entry_statuses[action.payload];\r\n                Object.assign(current_statuses, state.user_anime_entry_statuses);\r\n            }\r\n            return {\r\n                ...state,\r\n                user_anime_entry_statuses: current_statuses,\r\n            };\r\n        case GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES:\r\n            return {\r\n                ...state,\r\n                user_manga_entry_statuses: action.payload,\r\n            };\r\n        case UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES:\r\n            let current_manga_statuses = {};\r\n            if (typeof action.payload === 'object' && action.payload !== null) {\r\n                Object.assign(current_manga_statuses, state.user_manga_entry_statuses);\r\n                current_manga_statuses[action.payload[UserMangaEntry.manga][Manga.id]] = action.payload[UserMangaEntry.status];\r\n            } else if (!isNaN(action.payload)) {\r\n                delete state.user_manga_entry_statuses[action.payload];\r\n                Object.assign(current_manga_statuses, state.user_manga_entry_statuses);\r\n            }\r\n            return {\r\n                ...state,\r\n                user_manga_entry_statuses: current_manga_statuses,\r\n            };\r\n        case GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS:\r\n            let this_user_list = state.user_list;\r\n            this_user_list[UserList.scraping_episode_history_from_mal_progress] = action.payload;\r\n            return {\r\n                ...state,\r\n                user_list: this_user_list,\r\n            };\r\n        case USER_ACHIEVEMENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: true\r\n            };\r\n        case CANCEL_USER_ACHIEVEMENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: {}\r\n            };\r\n        case GET_USER_ACHIEVEMENTS:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: action.payload\r\n            };\r\n        case CLEAR_USER_ACHIEVEMENTS:\r\n            return {\r\n                ...state,\r\n                user_achievements_loading: false,\r\n                user_achievements: {}\r\n            };\r\n        case AUTH_ERROR_CLEAR_USER_INFO:\r\n            return {\r\n                ...state,\r\n                current_anime_entry: {},\r\n                current_manga_entry: {},\r\n                user_anime_entry_statuses: {},\r\n                user_manga_entry_statuses: {},\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {GET_ERRORS, CLEAN_ERRORS} from \"../actions/types\";\n\n\nconst initialState = {\n    message: null,\n    status: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                message: action.payload.msg,\n                status: action.payload.status\n            };\n        case CLEAN_ERRORS:\n            return {\n                message: null,\n                status: null\n            };\n        default:\n            return state;\n    }\n}\n","import {CLEAR_MESSAGE, CREATE_MESSAGE} from \"../actions/types\";\n\n\nconst initialState = {\n    message: null,\n    type: null\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case CREATE_MESSAGE:\n            return {\n                message: action.payload.msg,\n                type: action.payload.type\n            };\n        case CLEAR_MESSAGE:\n            return {\n                message: null,\n                type: null\n            };\n        default:\n            return state;\n    }\n}\n","import {\r\n    MANGA_LOADING,\r\n    GET_MANGA,\r\n    CANCEL_MANGA_LOADING,\r\n    FILTER_MANGA,\r\n    GET_MANGA_DATA,\r\n    GET_ALL_CHARACTERS_FOR_MANGA,\r\n    GET_RELATIONS_FOR_MANGA\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Manga} from \"../models\";\r\n\r\nconst initialState = {\r\n    manga_loading: false,\r\n    manga: {},\r\n    manga_loaded: false,\r\n    manga_data: {},\r\n    manga_data_loaded: {},\r\n    filtered_manga: {},\r\n    filtered_manga_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case MANGA_LOADING:\r\n            return {\r\n                ...state,\r\n                manga_loading: true,\r\n                manga_loaded: false,\r\n                manga_data_loaded: false,\r\n                filtered_manga_loaded: false,\r\n            };\r\n        case CANCEL_MANGA_LOADING:\r\n            return {\r\n                ...state,\r\n                manga_loading: false,\r\n                manga_loaded: false,\r\n                manga_data_loaded: false,\r\n                filtered_manga_loaded: false,\r\n            };\r\n        case GET_MANGA_DATA:\r\n            return {\r\n                ...state,\r\n                manga_loading: false,\r\n                manga_data: action.payload,\r\n                manga_data_loaded: true,\r\n            };\r\n        case GET_MANGA:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                manga: action.payload,\r\n                manga_loading: false,\r\n                manga_loaded: true\r\n            };\r\n        case FILTER_MANGA:\r\n            return {\r\n                ...state,\r\n                filtered_manga: action.payload,\r\n                manga_loading: false,\r\n                filtered_manga_loaded: true\r\n            };\r\n        case GET_ALL_CHARACTERS_FOR_MANGA:\r\n            state.manga[Manga.all_characters] = action.payload;\r\n            return {\r\n                ...state,\r\n                manga: state.manga\r\n            };\r\n        case GET_RELATIONS_FOR_MANGA:\r\n            state.manga[Manga.manga_relations] = action.payload;\r\n            return {\r\n                ...state,\r\n                manga: state.manga\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CHARACTERS_LOADING,\r\n    FILTER_CHARACTERS,\r\n    GET_CHARACTER,\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\n\r\nconst initialState = {\r\n    characters_loading: false,\r\n    character: {},\r\n    characters_loaded: false,\r\n\r\n    filtered_characters: {},\r\n    filtered_characters_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case CHARACTERS_LOADING:\r\n            return {\r\n                ...state,\r\n                characters_loading: true,\r\n                characters_loaded: false,\r\n                filtered_characters_loaded: false,\r\n            };\r\n        case CANCEL_CHARACTERS_LOADING:\r\n            return {\r\n                ...state,\r\n                characters_loading: false,\r\n                characters_loaded: false,\r\n                filtered_characters_loaded: false,\r\n            };\r\n        case GET_CHARACTER:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                character: action.payload,\r\n                characters_loading: false,\r\n                characters_loaded: true\r\n            };\r\n        case FILTER_CHARACTERS:\r\n            return {\r\n                ...state,\r\n                filtered_characters: action.payload,\r\n                characters_loading: false,\r\n                filtered_characters_loaded: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    CANCEL_EROGE_LOADING,\r\n    EROGE_LOADING,\r\n    FILTER_EROGE,\r\n    GET_ANIME_DATA,\r\n    GET_EROGE,\r\n    GET_EROGE_DATA\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\n\r\nconst initialState = {\r\n    eroge_loading: false,\r\n    eroge: {},\r\n    eroge_loaded: false,\r\n\r\n    filtered_eroge: {},\r\n    filtered_eroge_loaded: false,\r\n\r\n    eroge_data: {},\r\n    eroge_data_statistics: {},\r\n    eroge_data_loaded: false,\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case EROGE_LOADING:\r\n            return {\r\n                ...state,\r\n                eroge_loading: true,\r\n                eroge_loaded: false,\r\n                filtered_eroge_loaded: false,\r\n            };\r\n        case CANCEL_EROGE_LOADING:\r\n            return {\r\n                ...state,\r\n                eroge_loading: false,\r\n                eroge_loaded: false,\r\n                filtered_eroge_loaded: false,\r\n            };\r\n        case GET_EROGE:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                eroge: action.payload,\r\n                eroge_loading: false,\r\n                eroge_loaded: true\r\n            };\r\n        case FILTER_EROGE:\r\n            return {\r\n                ...state,\r\n                filtered_eroge: action.payload,\r\n                eroge_loading: false,\r\n                filtered_eroge_loaded: true\r\n            };\r\n        case GET_EROGE_DATA:\r\n            return {\r\n                ...state,\r\n                eroge_loading: false,\r\n                eroge_data: action.payload,\r\n                eroge_data_loaded: true,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import cookies from \"./reducers/cookies\";\r\nimport auth from \"./reducers/auth\";\r\nimport users from \"./reducers/users\";\r\nimport errors from \"./reducers/errors\";\r\nimport success from \"./reducers/success\";\r\nimport anime from \"./reducers/anime\";\r\nimport manga from \"./reducers/manga\";\r\nimport characters from \"./reducers/characters\";\r\nimport eroge from \"./reducers/eroge\";\r\n\r\nexport const CYBER_GENESIS_URL = 'http://127.0.0.1:8000';\r\n// export const CYBER_GENESIS_URL = 'https://ca41380b62b5.eu.ngrok.io';\r\n\r\nexport const BROWSE_ANIME_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_MANGA_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_CHARACTERS_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_EROGE_ITEMS_PER_PAGE = 100;\r\nexport const BROWSE_PEOPLE_ITEMS_PER_PAGE = 100;\r\n\r\n\r\nexport const store_reducers = {\r\n    cookies: 'cookies',\r\n    auth: 'auth',\r\n    users: 'users',\r\n    errors: 'errors',\r\n    success: 'success',\r\n    anime: 'anime',\r\n    manga: 'manga',\r\n    characters: 'characters',\r\n    eroge: 'eroge',\r\n};\r\n\r\nexport const store_reducer_users = {\r\n    all_users: 'all_users',\r\n    users_loading: 'users_loading',\r\n    all_users_loaded: 'all_users_loaded',\r\n    entry_loading: 'entry_loading',\r\n    user_anime_entry: 'user_anime_entry',\r\n    user_anime_entry_loaded: 'user_anime_entry_loaded',\r\n    user_manga_entry: 'user_manga_entry',\r\n    user_manga_entry_loaded: 'user_manga_entry_loaded',\r\n    uploading_file: 'uploading_file',\r\n};\r\n\r\nexport const store_reducer_cookies = {\r\n    show_filters: 'show_filters',\r\n    anime_browse_filters: 'anime_browse_filters',\r\n    anime_season_filters: 'anime_season_filters',\r\n    anime_list_filters: 'anime_list_filters',\r\n    manga_browse_filters: 'manga_browse_filters',\r\n    manga_season_filters: 'manga_season_filters',\r\n    manga_list_filters: 'manga_list_filters',\r\n    characters_filters: 'characters_filters',\r\n    eroge_browse_filters: 'eroge_browse_filters',\r\n};\r\n\r\n// Content Branches\r\nexport const BRANCH_ANIME = 'Anime';\r\nexport const BRANCH_MANGA = 'Manga';\r\nexport const BRANCH_EROGE = 'Eroge';\r\nexport const BRANCH_PEOPLE = 'People';\r\nexport const BRANCH_CHARACTERS = 'Characters';\r\n\r\n// Filter Types\r\nexport const TYPE_BROWSE = 'Browse';\r\nexport const TYPE_LIST = 'List';\r\nexport const TYPE_SEASON = 'Season';\r\n\r\n// Tab titles\r\nexport const CYBER_GENESIS_TAB_NAME = 'Cyber Genesis';\r\nexport const PROFILE_TAB_NAME = 'Profile';\r\nexport const ANIME_TAB_NAME = 'Anime';\r\nexport const ANIME_BROWSE_TAB_NAME = 'Browse Anime';\r\nexport const MANGA_BROWSE_TAB_NAME = 'Browse Manga';\r\nexport const EROGE_TAB_NAME = 'Eroge';\r\nexport const EROGE_BROWSE_TAB_NAME = 'Browse Eroge';\r\nexport const PEOPLE_BROWSE_TAB_NAME = 'Browse People';\r\nexport const CHARACTERS_TAB_NAME = 'Characters';\r\nexport const INDUSTRY_TAB_NAME = 'Industry';\r\nexport const CHARACTERS_BROWSE_TAB_NAME = 'Browse Characters';\r\nexport const MANGA_TAB_NAME = 'Manga';\r\nexport const BROWSE_TAB_NAME = 'Browse';\r\nexport const FRANCHISES_TAB_NAME = 'Franchises';\r\nexport const SEASONS_TAB_NAME = 'Seasons';\r\nexport const SETTINGS_TAB_NAME = 'Settings';\r\nexport const NOT_FOUND_404_TAB_NAME = 'Code: 404';\r\nexport const REGISTER_TAB_NAME = 'Register';\r\n\r\n// Colors\r\nexport const COLOR_PRIMARY = '#156BB7';\r\nexport const COLOR_SECONDARY = '#E14ECA';\r\nexport const COLOR_INFO = '#00FFFF';\r\nexport const COLOR_SUCCESS = '#00A057';\r\nexport const COLOR_WARNING = '#D09C00';\r\nexport const COLOR_DANGER = '#FF0000';\r\nexport const COLOR_GRAY = '#7B7B7B';\r\nexport const COLOR_WHITE = '#FFFFFF';\r\n\r\nexport const LANGUAGES = ['Japanese', 'English', 'Russian', 'Portuguese', 'German', 'French', 'Italian', 'Spanish',\r\n    'Chinese', 'Arabic', 'Korean', 'Malay', 'Polish', 'Turkish', 'Swedish', 'Danish', 'Finnish', 'Dutch', 'Norwegian',\r\n    'Bulgarian', 'Greek', 'Hebrew', 'Romanian', 'Thai', 'Vietnamese', 'Czech', 'Slovak', 'Persian', 'Indonesian',\r\n    'Catalan', 'Hungarian'];\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_ANIME_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        anime_on_server__english_sub: false,\r\n        anime_on_server__english_dub: false,\r\n        anime_on_server__japanese_dub: false,\r\n        anime_on_server__japanese_sub: false,\r\n        episodes_range: [0, 53],\r\n        length_range: [0, 61],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        rating_short: [],\r\n        video_quality: [],\r\n        audio_channel: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\nexport const ANIME_ORDERINGS = [\r\n    'members', 'score', 'id', 'type', 'episodes', 'scored_by', 'favorites', 'rating', 'air_start', 'air_end'\r\n];\r\nexport const USER_ANIME_ORDERINGS = [\r\n    'watched_episodes', 'my_score', 'times_watched', 'priority', 'start_date', 'finish_date'\r\n];\r\nexport const ANIME_TYPES = ['TV', 'Movie', 'OVA', 'Special', 'Music', 'ONA'];\r\nexport const ANIME_STATUSES = ['Finished Airing', 'Currently Airing', 'Not yet aired'];\r\nexport const ANIME_RATING_SHORT = ['G', 'PG-C', 'PG-13', 'R', 'R+', 'Rx'];\r\nexport const ANIME_VIDEO_QUALITIES = ['2160p', '1080p', '720p', '580p', '480p', '360p', '240p'];\r\nexport const USER_ANIME_STATUSES_ARRAY = ['Watching', 'Completed', 'On Hold', 'Dropped', 'Plan to Watch'];\r\nexport const USER_MANGA_STATUSES_ARRAY = ['Reading', 'Completed', 'On Hold', 'Dropped', 'Plan to Read'];\r\nexport const ANIME_AUDIO_CHANNELS = ['2.0', '5.1'];\r\nexport const ANIME_GENRES = [\r\n    'Comedy', 'Drama', 'Romance', 'School', 'Slice of Life', 'Adventure', 'Ecchi', 'Fantasy', 'Magic', 'Mystery',\r\n    'Shoujo Ai', 'Action', 'Mecha', 'Military', 'Police', 'Sci-Fi', 'Parody', 'Shounen', 'Super Power', 'Supernatural',\r\n    'Vampire', 'Seinen', 'Shoujo', 'Historical', 'Samurai', 'Harem', 'Psychological', 'Shounen Ai', 'Space', 'Josei',\r\n    'Dementia', 'Thriller', 'Sports', 'Game', 'Music', 'Horror', 'Kids', 'Martial Arts', 'Hentai', 'Demons', 'Cars',\r\n    'Yaoi', 'Yuri'\r\n].sort();\r\nexport const USER_ANIME_STATUSES = {\r\n    watching: 'Watching',\r\n    completed: 'Completed',\r\n    on_hold: 'On Hold',\r\n    dropped: 'Dropped',\r\n    plan_to_watch: 'Plan to Watch',\r\n};\r\nexport const USER_MANGA_STATUSES = {\r\n    reading: 'Reading',\r\n    completed: 'Completed',\r\n    on_hold: 'On Hold',\r\n    dropped: 'Dropped',\r\n    plan_to_read: 'Plan to Read',\r\n};\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_MANGA_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        downloaded: false,\r\n        is_downloading: false,\r\n        cannot_download: false,\r\n        deleted_by_MAL: false,\r\n        pending_by_MAL: false,\r\n        volumes_range: [0, 53],\r\n        chapters_range: [0, 53],\r\n        genres: [],\r\n        type: [],\r\n        status: [],\r\n        user_exclude: [],\r\n        ordering: '-members',\r\n    };\r\n}\r\nexport const MANGA_ORDERINGS = [\r\n    'members', 'score', 'id', 'type', 'volumes', 'chapters', 'scored_by', 'favorites', 'air_start', 'air_end'\r\n];\r\nexport const USER_MANGA_ORDERINGS = [\r\n    'read_volumes', 'read_chapters', 'my_score', 'times_read', 'start_date', 'finish_date'\r\n];\r\nexport const MANGA_TYPES = ['Manga', 'Manhwa', 'Novel', 'Doujinshi', 'One-shot', 'Manhua', 'OEL', 'LightNovel'];\r\nexport const MANGA_STATUSES = ['Publishing', 'Finished', 'Not yet published', 'Discontinued', 'On Hiatus'];\r\nexport const MANGA_GENRES = [\r\n    'Fantasy', 'Sci-Fi', 'Comedy', 'Drama', 'Romance', 'School', 'Slice of Life', 'Josei', 'Hentai', 'Doujinshi',\r\n    'Yaoi', 'Historical', 'Shoujo Ai', 'Shoujo', 'Supernatural', 'Seinen', 'Shounen', 'Shounen Ai', 'Action',\r\n    'Adventure', 'Ecchi', 'Harem', 'Mystery', 'Vampire', 'Gender Bender', 'Magic', 'Military', 'Psychological',\r\n    'Demons', 'Horror', 'Martial Arts', 'Game', 'Thriller', 'Sports', 'Yuri', 'Parody', 'Space', 'Super Power',\r\n    'Mecha', 'Kids', 'Police', 'Samurai', 'Music', 'Dementia', 'Cars'\r\n].sort();\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_EROGE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        type: [],\r\n        downloaded: '',\r\n        platforms: [],\r\n        language: [],\r\n        censorship: [],\r\n        tags: [],\r\n        ordering: '-date_added',\r\n    };\r\n}\r\nexport const EROGE_ORDERINGS = ['rating', 'rated_by', 'size', 'date_added'];\r\nexport const EROGE_TYPES = ['Adventure', 'Visual Novel', 'RPG', 'Puzzle', 'Simulation'];\r\nexport const EROGE_PLATFORMS = ['Android', 'Windows'];\r\nexport const EROGE_CENSORSHIPS = ['Censored', 'Uncensored', 'Mosaic'];\r\nexport const EROGE_LANGUAGES = ['English', 'Japanese'];\r\nexport const EROGE_TAGS = [\r\n    '3D', 'Female Protagonist', 'Animated', 'Futanari', 'Incest', 'Corruption', 'Harem', 'BDSM', 'Big Breasts', 'Milf',\r\n    'Bestiality', 'Romance', 'Pregnancy', 'Male Protagonist', 'Group Sex', 'School', 'NTR', 'Mind Control', 'Femdom',\r\n    'Exhibitionism', 'Yuri', 'Fantasy', 'Blackmail', 'Tentacles', 'Rape', 'Urination', 'Voyeurism', 'Witches',\r\n    'Seduction', 'Peeping', 'Hypnosis', 'Prostitution', 'Gangbang', 'Bukkake', 'Dark Skin', 'Voyeur', 'Netori', 'Touch',\r\n    'Paizuri', 'Footjob', 'Parody', 'Combat', 'Defloration', 'Cunnilingus', 'Masturbation', 'Tiny Breasts', 'Blow Job',\r\n    'Big Boobs', 'Nukige', 'Stripping'\r\n];\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_CHARACTERS_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\nexport const CHARACTERS_ORDERINGS = ['favorites', 'id'];\r\n\r\n\r\n\r\n// noinspection JSClassNamingConvention\r\nexport class FILTER_PEOPLE_INITIAL_VALUES {\r\n    VALUES = {\r\n        search: '',\r\n        ordering: '-favorites',\r\n    };\r\n}\r\nexport const PEOPLE_ORDERINGS = ['favorites', 'id', 'birthday'];\r\n\r\n\r\nexport function getPriorityLabel(priority) {\r\n    switch (priority) {\r\n        case 0:\r\n            return 'Very Low';\r\n        case 1:\r\n            return 'Low';\r\n        case 2:\r\n            return 'Medium';\r\n        case 3:\r\n            return 'High';\r\n        case 4:\r\n            return 'Very High';\r\n        default:\r\n            return 'Very Low'\r\n    }\r\n}\r\n","import {CYBER_GENESIS_URL} from \"../globals\";\r\n\r\nexport const BASE_URL = CYBER_GENESIS_URL;\r\n\r\n\r\n// AUTH\r\nexport const API_AUTH_USER = `${BASE_URL}/api/auth/user`;\r\nexport const API_LOGIN = `${BASE_URL}/api/auth/login`;\r\nexport const API_REGISTER = `${BASE_URL}/api/auth/register`;\r\nexport const API_LOGOUT = `${BASE_URL}/api/auth/logout/`;\r\nexport function API_GET_USER(id) {\r\n    return `${BASE_URL}/api/users-api/${id}/`;\r\n}\r\n\r\n// USERS\r\nexport const API_GET_ALL_USERS = `${BASE_URL}/api/users-api/`;\r\nexport const API_USER_ANIME_FILTERS_PRESET = `${BASE_URL}/api/anime-filter-preset/`;\r\nexport const API_USER_MANGA_FILTERS_PRESET = `${BASE_URL}/api/manga-filter-preset/`;\r\nexport const API_USER_EROGE_FILTERS_PRESET = `${BASE_URL}/api/eroge-filter-preset/`;\r\nexport const API_CHANGE_USER_PROFILE_IMAGE = `${BASE_URL}/api/profile/change_profile_image/`;\r\nexport const API_IMPORT_MAL_XML_FOR_ANIME_LIST = `${BASE_URL}/api/user-list/upload_anime_list_mal_xml_file/`;\r\nexport const API_IMPORT_MAL_XML_FOR_MANGA_LIST = `${BASE_URL}/api/user-list/upload_manga_list_mal_xml_file/`;\r\nexport const API_EDIT_USER_BIO = `${BASE_URL}/api/profile/edit_bio/`;\r\nexport const API_EDIT_USER_ABOUT_ME_BBCODE = `${BASE_URL}/api/profile/edit_about_me_bbcode/`;\r\nexport const API_SCRAPE_EPISODE_HISTORY_FROM_MAL = `${BASE_URL}/api/user-list/scrape_and_update_user_episode_history_from_mal/`;\r\nexport const API_CHANGE_CYBER_SOUND_STATUS = `${BASE_URL}/api/profile/change_cyber_sound_status/`;\r\nexport const API_USER_ANIME_ENTRY_NOID = `${BASE_URL}/api/anime-entry/`;\r\nexport const API_USER_MANGA_ENTRY_NOID = `${BASE_URL}/api/manga-entry/`;\r\nexport const API_USER_ANIME_ENTRY_STATUSES = `${BASE_URL}/api/user-list/user_anime_statuses/`;\r\nexport const API_USER_MANGA_ENTRY_STATUSES = `${BASE_URL}/api/user-list/user_manga_statuses/`;\r\nexport const API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS = `${BASE_URL}/api/user-list/get_user_episode_history_scrape_progress`;\r\nexport const API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES = `${BASE_URL}/api/anime-entry/fix_user_start_and_finished_date`;\r\nexport const API_SET_PROFILE_TO_PRIVATE = `${BASE_URL}/api/profile/set_profile_to_private`;\r\nexport const API_SET_PROFILE_TO_PUBLIC = `${BASE_URL}/api/profile/set_profile_to_public`;\r\nexport const API_SET_ANIME_LIST_TO_PRIVATE = `${BASE_URL}/api/profile/set_anime_list_to_private`;\r\nexport const API_SET_ANIME_LIST_TO_PUBLIC = `${BASE_URL}/api/profile/set_anime_list_to_public`;\r\nexport const API_SET_ANIME_HISTORY_TO_PRIVATE = `${BASE_URL}/api/profile/set_anime_history_to_private`;\r\nexport const API_SET_ANIME_HISTORY_TO_PUBLIC = `${BASE_URL}/api/profile/set_anime_history_to_public`;\r\nexport const API_SET_MANGA_LIST_TO_PRIVATE = `${BASE_URL}/api/profile/set_manga_list_to_private`;\r\nexport const API_SET_MANGA_LIST_TO_PUBLIC = `${BASE_URL}/api/profile/set_manga_list_to_public`;\r\nexport const API_SET_MANGA_HISTORY_TO_PRIVATE = `${BASE_URL}/api/profile/set_manga_history_to_private`;\r\nexport const API_SET_MANGA_HISTORY_TO_PUBLIC = `${BASE_URL}/api/profile/set_manga_history_to_public`;\r\nexport function API_ADD_TO_FAVORITES(branch) {\r\n    return `${BASE_URL}/api/profile/${branch.toLowerCase()}/add_to_favorites/`;\r\n}\r\nexport function API_REMOVE_FROM_FAVORITES(branch) {\r\n    return `${BASE_URL}/api/profile/${branch.toLowerCase()}/remove_from_favorites/`;\r\n}\r\nexport function API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/anime-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/manga-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id) {\r\n    return `${BASE_URL}/api/eroge-filter-preset/${id}/`;\r\n}\r\nexport function API_USER_ANIME_ENTRY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/`;\r\n}\r\nexport function API_USER_ANIME_UPDATE_EPISODE(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/update_anime_episode/`;\r\n}\r\nexport function API_USER_MANGA_UPDATE_VOLUME(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/update_manga_volume/`;\r\n}\r\nexport function API_USER_MANGA_UPDATE_CHAPTER(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/update_manga_chapter/`;\r\n}\r\nexport function API_DELETE_ANIME_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/delete_anime_history_entry/`;\r\n}\r\nexport function API_DELETE_MANGA_VOLUME_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/delete_manga_history_volume_entry/`;\r\n}\r\nexport function API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/delete_manga_history_chapter_entry/`;\r\n}\r\nexport function API_USER_MANGA_ENTRY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/`;\r\n}\r\nexport function API_UPDATE_AND_GET_USER_ANIME_STATISTICS(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/update_anime_statistics/`;\r\n}\r\nexport function API_GET_USER_LIST(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/`;\r\n}\r\nexport function API_UPDATE_USER_LIST(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/update_user_list/`;\r\n}\r\nexport function API_GET_VISITED_USER_ANIME_HISTORY(id) {\r\n    return `${BASE_URL}/api/anime-entry/${id}/get_visited_user_anime_history/`;\r\n}\r\nexport function API_GET_VISITED_USER_MANGA_HISTORY(id) {\r\n    return `${BASE_URL}/api/manga-entry/${id}/get_visited_user_manga_history/`;\r\n}\r\nexport function API_GET_USER_ACHIEVEMENTS(id) {\r\n    return `${BASE_URL}/api/user-list/${id}/get_user_achievements/`;\r\n}\r\n\r\n// ANIME\r\nexport const API_GET_ANIME_DATA = `${BASE_URL}/api/anime-data-api/`;\r\nexport const API_GET_ANIME_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/anime-data-api/anime_home`;\r\nexport const API_GET_ANIME_DATA_WITH_STATISTICS = `${BASE_URL}/api/anime-data-api/statistics/`;\r\nexport const API_GET_ANIME_ACHIEVEMENT_THRESHOLDS = `${BASE_URL}/api/anime-data-api/achievement_thresholds/`;\r\nexport const API_FILTER_ANIME = `${BASE_URL}/api/anime-api/`;\r\nexport const API_GET_ANIME_SEARCHABLE_TITLES = `${BASE_URL}/api/anime-api/searchable_titles/`;\r\nexport function API_GET_ONE_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}`;\r\n}\r\nexport function API_GET_ALL_CHARACTERS_FOR_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/get_all_characters_for_anime`;\r\n}\r\nexport function API_GET_RELATIONS_FOR_ANIME(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/get_relations_for_anime`;\r\n}\r\nexport function API_GET_ANIME_FRANCHISE(id) {\r\n    return `${BASE_URL}/api/anime-api/${id}/franchise`;\r\n}\r\n\r\n// MANGA\r\nexport const API_GET_MANGA_DATA = `${BASE_URL}/api/manga-data-api/`;\r\nexport const API_GET_MANGA_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/manga-data-api/manga_home`;\r\nexport const API_FILTER_MANGA = `${BASE_URL}/api/manga-api/`;\r\nexport function API_GET_ONE_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}`;\r\n}\r\nexport function API_GET_ALL_CHARACTERS_FOR_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}/get_all_characters_for_manga`;\r\n}\r\nexport function API_GET_RELATIONS_FOR_MANGA(id) {\r\n    return `${BASE_URL}/api/manga-api/${id}/get_relations_for_manga`;\r\n}\r\n\r\n// CHARACTERS\r\nexport const API_FILTER_CHARACTERS = `${BASE_URL}/api/characters-api/`;\r\nexport function API_GET_ONE_CHARACTER(id) {\r\n    return `${BASE_URL}/api/characters-api/${id}`;\r\n}\r\n\r\n// PEOPLE\r\nexport const API_FILTER_PEOPLE = `${BASE_URL}/api/people/`;\r\nexport function API_GET_ONE_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}`;\r\n}\r\nexport function API_GET_VOICE_ACTOR_ROLES_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/voice_actor_roles`;\r\n}\r\nexport function API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/anime_staff_positions`;\r\n}\r\nexport function API_GET_PUBLISHED_MANGA_FOR_PERSON(id) {\r\n    return `${BASE_URL}/api/people/${id}/published_manga`;\r\n}\r\n\r\n// EROGE\r\nexport const API_FILTER_EROGE = `${BASE_URL}/api/eroge-api/`;\r\nexport const API_GET_EROGE_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/eroge-data-api/eroge_home`;\r\nexport function API_GET_ONE_EROGE(id) {\r\n    return `${BASE_URL}/api/eroge-api/${id}`;\r\n}\r\n\r\n// REQUIEM\r\nexport const API_REQUIEM_GET_STORAGE_INFO = `${BASE_URL}/api/requiem-api/get_storage_info/`;\r\nexport const API_ADD_ANIME_TO_SERVER = `${BASE_URL}/api/anime-server-api/`;\r\nexport const API_GET_NEWS = `${BASE_URL}/api/news-api/`;\r\nexport function API_UPDATE_ANIME_TO_SERVER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/`;\r\n}\r\nexport function API_OPEN_ANIME_FOLDER(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/open_anime_folder/`;\r\n}\r\nexport function API_OPEN_EROGE_FOLDER(id) {\r\n    return `${BASE_URL}/api/eroge-api/${id}/open_eroge_folder/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_ANIME_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_anime_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_MANGA_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_manga_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_CHARACTER_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_character_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_PERSON_MAL(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_person_mal/`;\r\n}\r\nexport function API_REQUIEM_UPDATE_EROGE_HENTAIGAMER(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/update_eroge_hentaigamer/`;\r\n}\r\nexport function API_REQUIEM_DOWNLOAD_ANIME_TORRENT(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/download_torrent/`;\r\n}\r\nexport function API_REQUIEM_GET_ANIME_TORRENT_PROGRESS(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/get_torrent_progress/`;\r\n}\r\nexport function API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS(id) {\r\n    return `${BASE_URL}/api/anime-server-api/${id}/delete_anime_server_info_and_torrent/`;\r\n}\r\nexport function API_REQUIEM_GET_TORRENT_PROGRESS(id) {\r\n    return `${BASE_URL}/api/requiem-api/${id}/get_torrent_progress/`;\r\n}\r\n\r\n// INDUSTRY\r\nexport const API_GET_INDUSTRY_DATA_FOR_HOME_PAGE = `${BASE_URL}/api/industry-data/industry_home`;\r\n","// COOKIES\r\nimport {API_GET_ANIME_SEARCHABLE_TITLES, API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON} from \"./api_urls\";\r\n\r\nexport const SET_ANIME_FILTERS = 'SET_ANIME_FILTERS';\r\nexport const SET_MANGA_FILTERS = 'SET_MANGA_FILTERS';\r\nexport const SET_CHARACTERS_FILTERS = 'SET_CHARACTERS_FILTERS';\r\nexport const SET_PEOPLE_FILTERS = 'SET_PEOPLE_FILTERS';\r\nexport const SET_EROGE_FILTERS = 'SET_EROGE_FILTERS';\r\nexport const SET_COOKIE_SHOW_FILTERS = 'SET_COOKIE_SHOW_FILTERS';\r\n\r\n\r\nexport const SET_SELECTED_SEASON = 'SET_SELECTED_SEASON';\r\nexport const CLEAR_SELECTED_SEASON = 'CLEAR_SELECTED_SEASON';\r\n\r\n// AUTH\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const AUTH_USER = 'AUTH_USER';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\n\r\n// REQUIEM\r\nexport const GET_REQUIEM = \"GET_REQUIEM\";\r\nexport const REQUIEM_LOADING = \"REQUIEM_LOADING\";\r\nexport const GET_REPORTS = \"GET_REPORTS\";\r\nexport const REPORTS_LOADING = \"REPORTS_LOADING\";\r\nexport const GET_NEWS = \"GET_NEWS\";\r\nexport const NEWS_LOADING = \"NEWS_LOADING\";\r\nexport const DOWNLOAD_TORRENT = \"DOWNLOAD_TORRENT\";\r\nexport const GET_TORRENT_PROGRESS = \"GET_TORRENT_PROGRESS\";\r\nexport const GET_ACTIVE_TORRENTS_PROGRESS = \"GET_ACTIVE_TORRENTS_PROGRESS\";\r\nexport const CLEAR_ANIME_TORRENT_PROGRESS = \"CLEAR_ANIME_TORRENT_PROGRESS\";\r\nexport const GET_STORAGE_INFO = \"GET_STORAGE_INFO\";\r\nexport const GET_TARGETS = \"GET_TARGETS\";\r\n\r\n// USERS\r\nexport const USERS_LOADING = 'USERS_LOADING';\r\nexport const USER_LIST_LOADING = 'USER_LIST_LOADING';\r\nexport const CANCEL_USER_LIST_LOADING = 'CANCEL_USER_LIST_LOADING';\r\nexport const GET_USER = 'GET_USER';\r\nexport const GET_ALL_USERS = 'GET_ALL_USERS';\r\nexport const UPDATE_USER_PROFILE_IMAGE = 'UPDATE_USER_PROFILE_IMAGE';\r\nexport const USER_ENTRY_LOADING = 'USER_ENTRY_LOADING';\r\nexport const FINISH_LOADING_USER_ENTRY = 'FINISH_LOADING_USER_ENTRY';\r\nexport const GET_USER_ANIME_ENTRY = 'GET_USER_ANIME_ENTRY';\r\nexport const AUTH_ERROR_CLEAR_USER_INFO = 'AUTH_ERROR_CLEAR_USER_INFO';\r\nexport const CLEAR_USER_ANIME_ENTRY = 'CLEAR_USER_ANIME_ENTRY';\r\nexport const GET_USER_MANGA_ENTRY = 'GET_USER_MANGA_ENTRY';\r\nexport const CLEAR_USER_MANGA_ENTRY = 'CLEAR_USER_MANGA_ENTRY';\r\nexport const GET_USER_LIST = 'GET_USER_LIST';\r\nexport const UPDATE_USER_LIST = 'UPDATE_USER_LIST';\r\nexport const USER_STATISTICS_LOADING = 'USER_STATISTICS_LOADING';\r\nexport const UPDATE_USER_ANIME_STATISTICS = 'UPDATE_USER_ANIME_STATISTICS';\r\nexport const UPLOADING_FILE = 'UPLOADING_FILE';\r\nexport const FINISH_UPLOADING_FILE = 'FINISH_UPLOADING_FILE';\r\nexport const UPLOAD_ANIME_LIST_MAL_XML = 'UPLOAD_ANIME_LIST_MAL_XML';\r\nexport const UPLOAD_MANGA_LIST_MAL_XML = 'UPLOAD_MANGA_LIST_MAL_XML';\r\nexport const USER_INFO_LOADING = 'USER_INFO_LOADING';\r\nexport const USER_ACHIEVEMENTS_LOADING = 'USER_ACHIEVEMENTS_LOADING';\r\nexport const CANCEL_USER_ACHIEVEMENTS_LOADING = 'CANCEL_USER_ACHIEVEMENTS_LOADING';\r\nexport const GET_USER_ACHIEVEMENTS = 'GET_USER_ACHIEVEMENTS';\r\nexport const CLEAR_USER_ACHIEVEMENTS = 'CLEAR_USER_ACHIEVEMENTS';\r\nexport const GET_VISITED_USER_ANIME_HISTORY = 'GET_VISITED_USER_ANIME_HISTORY';\r\nexport const GET_VISITED_USER_MANGA_HISTORY = 'GET_VISITED_USER_MANGA_HISTORY';\r\nexport const GET_ANIME_FILTER_PRESETS = 'GET_ANIME_FILTER_PRESETS';\r\nexport const GET_MANGA_FILTER_PRESETS = 'GET_MANGA_FILTER_PRESETS';\r\nexport const GET_EROGE_FILTER_PRESETS = 'GET_EROGE_FILTER_PRESETS';\r\nexport const SET_ANIME_PRESET = 'SET_ANIME_PRESET';\r\nexport const SET_MANGA_PRESET = 'SET_MANGA_PRESET';\r\nexport const SET_EROGE_PRESET = 'SET_EROGE_PRESET';\r\nexport const GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES = 'GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES';\r\nexport const GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES = 'GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES';\r\nexport const UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES = 'UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES';\r\nexport const UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES = 'UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES';\r\nexport const GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS = 'GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS';\r\nexport const GET_PROFILE_PRIVACY_SETTINGS = 'GET_PROFILE_PRIVACY_SETTINGS';\r\n\r\n// ANIME\r\nexport const GET_ANIME_DATA = 'GET_ANIME_DATA';\r\nexport const GET_ANIME_DATA_STATISTICS = 'GET_ANIME_DATA_STATISTICS';\r\nexport const GET_ANIME_ACHIEVEMENT_THRESHOLDS = 'GET_ANIME_ACHIEVEMENT_THRESHOLDS';\r\nexport const GET_ANIME = 'GET_ANIME';\r\nexport const GET_ALL_CHARACTERS_FOR_ANIME = 'GET_ALL_CHARACTERS_FOR_ANIME';\r\nexport const GET_RELATIONS_FOR_ANIME = 'GET_RELATIONS_FOR_ANIME';\r\nexport const FILTER_ANIME = 'FILTER_ANIME';\r\nexport const ANIME_LOADING = 'ANIME_LOADING';\r\nexport const CANCEL_ANIME_LOADING = 'CANCEL_ANIME_LOADING';\r\nexport const ANIME_FRANCHISE_LOADING = 'ANIME_FRANCHISE_LOADING';\r\nexport const GET_CURRENT_ANIME_FRANCHISE = 'GET_CURRENT_ANIME_FRANCHISE';\r\nexport const GET_ANIME_SEARCHABLE_TITLES = 'GET_ANIME_SEARCHABLE_TITLES';\r\n\r\n// MANGA\r\nexport const GET_MANGA_DATA = 'GET_MANGA_DATA';\r\nexport const GET_MANGA = 'GET_MANGA';\r\nexport const GET_ALL_CHARACTERS_FOR_MANGA = 'GET_ALL_CHARACTERS_FOR_MANGA';\r\nexport const GET_RELATIONS_FOR_MANGA = 'GET_RELATIONS_FOR_MANGA';\r\nexport const FILTER_MANGA = 'FILTER_MANGA';\r\nexport const MANGA_LOADING = 'MANGA_LOADING';\r\nexport const CANCEL_MANGA_LOADING = 'CANCEL_MANGA_LOADING';\r\n\r\n// CHARACTERS\r\nexport const GET_CHARACTER = 'GET_CHARACTER';\r\nexport const FILTER_CHARACTERS = 'FILTER_CHARACTERS';\r\nexport const CHARACTERS_LOADING = 'CHARACTERS_LOADING';\r\nexport const CANCEL_CHARACTERS_LOADING = 'CANCEL_CHARACTERS_LOADING';\r\n\r\n// PEOPLE\r\nexport const GET_PERSON = 'GET_PERSON';\r\nexport const GET_PEOPLE_DATA = 'GET_PEOPLE_DATA';\r\nexport const GET_VOICE_ACTOR_ROLES_FOR_PERSON = 'GET_VOICE_ACTOR_ROLES_FOR_PERSON';\r\nexport const GET_ANIME_STAFF_POSITIONS_FOR_PERSON = 'GET_ANIME_STAFF_POSITIONS_FOR_PERSON';\r\nexport const GET_PUBLISHED_MANGA_FOR_PERSON = 'GET_PUBLISHED_MANGA_FOR_PERSON';\r\nexport const FILTER_PEOPLE = 'FILTER_PEOPLE';\r\nexport const PEOPLE_LOADING = 'PEOPLE_LOADING';\r\nexport const CANCEL_PEOPLE_LOADING = 'CANCEL_PEOPLE_LOADING';\r\n\r\n// EROGE\r\nexport const GET_EROGE = 'GET_EROGE';\r\nexport const GET_EROGE_DATA = 'GET_EROGE_DATA';\r\nexport const FILTER_EROGE = 'FILTER_EROGE';\r\nexport const EROGE_LOADING = 'EROGE_LOADING';\r\nexport const CANCEL_EROGE_LOADING = 'CANCEL_EROGE_LOADING';\r\n\r\n// ERRORS\r\nexport const CREATE_MESSAGE = 'CREATE_MESSAGE';\r\nexport const CLEAR_MESSAGE = 'CLEAR_MESSAGE';\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAN_ERRORS = 'CLEAN_ERRORS';\r\n\r\n// BRANCHES\r\nexport const SET_BROWSE_BRANCH = 'SET_BROWSE_BRANCH';\r\nexport const SET_DISPLAY_BRANCH = 'SET_DISPLAY_BRANCH';\r\nexport const SET_TITLE_BRANCH = 'SET_TITLE_BRANCH';\r\n\r\n// INDUSTRY\r\nexport const GET_INDUSTRY_DATA = 'GET_INDUSTRY_DATA';\r\nexport const INDUSTRY_DATA_LOADING = 'INDUSTRY_DATA_LOADING';\r\n","import {\r\n    ANIME_LOADING,\r\n    GET_ANIME,\r\n    CANCEL_ANIME_LOADING,\r\n    FILTER_ANIME,\r\n    GET_ANIME_DATA,\r\n    GET_ALL_CHARACTERS_FOR_ANIME,\r\n    GET_RELATIONS_FOR_ANIME,\r\n    GET_CURRENT_ANIME_FRANCHISE,\r\n    ANIME_FRANCHISE_LOADING,\r\n    GET_ANIME_DATA_STATISTICS, GET_ANIME_SEARCHABLE_TITLES, GET_ANIME_ACHIEVEMENT_THRESHOLDS\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Anime} from \"../models\";\r\n\r\nconst initialState = {\r\n    searchable_titles: [],\r\n\r\n    anime_loading: false,\r\n    anime: {},\r\n    anime_loaded: false,\r\n\r\n    anime_data: {},\r\n    anime_data_statistics: {},\r\n    anime_data_loaded: false,\r\n\r\n    filtered_anime: {},\r\n    filtered_anime_loaded: false,\r\n\r\n    anime_franchise_loading: false,\r\n    anime_franchise: {}\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case ANIME_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_loading: true,\r\n                anime_loaded: false,\r\n                anime_data_loaded: false,\r\n                filtered_anime_loaded: false,\r\n            };\r\n        case CANCEL_ANIME_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_loaded: false,\r\n                anime_data_loaded: false,\r\n                filtered_anime_loaded: false,\r\n            };\r\n        case GET_ANIME_SEARCHABLE_TITLES:\r\n            return {\r\n                ...state,\r\n                searchable_titles: action.payload,\r\n            };\r\n        case GET_ANIME_DATA:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_data: action.payload,\r\n                anime_data_loaded: true,\r\n            };\r\n        case GET_ANIME_DATA_STATISTICS:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_data_statistics: action.payload['anime_statistics'],\r\n                anime_data_loaded: true,\r\n            };\r\n        case GET_ANIME_ACHIEVEMENT_THRESHOLDS:\r\n            return {\r\n                ...state,\r\n                anime_loading: false,\r\n                anime_achievement_thresholds: action.payload,\r\n            };\r\n        case GET_ANIME:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                anime: action.payload,\r\n                anime_loading: false,\r\n                anime_loaded: true\r\n            };\r\n        case FILTER_ANIME:\r\n            return {\r\n                ...state,\r\n                filtered_anime: action.payload,\r\n                anime_loading: false,\r\n                filtered_anime_loaded: true\r\n            };\r\n        case GET_ALL_CHARACTERS_FOR_ANIME:\r\n            state.anime[Anime.all_characters] = action.payload;\r\n            return {\r\n                ...state,\r\n                anime: state.anime\r\n            };\r\n        case GET_RELATIONS_FOR_ANIME:\r\n            state.anime[Anime.anime_relations] = action.payload;\r\n            return {\r\n                ...state,\r\n                anime: state.anime\r\n            };\r\n        case ANIME_FRANCHISE_LOADING:\r\n            return {\r\n                ...state,\r\n                anime_franchise_loading: true\r\n            };\r\n        case GET_CURRENT_ANIME_FRANCHISE:\r\n            return {\r\n                ...state,\r\n                anime_franchise: action.payload,\r\n                anime_franchise_loading: false\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {\r\n    GET_REQUIEM,\r\n    REQUIEM_LOADING,\r\n    GET_REPORTS,\r\n    REPORTS_LOADING,\r\n    GET_NEWS,\r\n    NEWS_LOADING,\r\n    GET_TORRENT_PROGRESS,\r\n    GET_ACTIVE_TORRENTS_PROGRESS,\r\n    GET_STORAGE_INFO,\r\n    GET_TARGETS,\r\n    CLEAR_ANIME_TORRENT_PROGRESS\r\n} from '../actions/types'\r\n\r\n\r\nconst initialState = {\r\n    requiem_is_loading: false,\r\n    requiem: {},\r\n\r\n    targets: [],\r\n    reports: {},\r\n    news: {},\r\n    storage: [],\r\n    torrent_progress: [],\r\n    active_torrents: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_REQUIEM:\r\n            return {\r\n                ...state,\r\n                requiem: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_REPORTS:\r\n            return {\r\n                ...state,\r\n                reports: action.payload,\r\n                reports_is_loading: false\r\n            };\r\n        case GET_TARGETS:\r\n            return {\r\n                ...state,\r\n                targets: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_NEWS:\r\n            return {\r\n                ...state,\r\n                news: action.payload,\r\n                news_is_loading: false\r\n            };\r\n        case GET_STORAGE_INFO:\r\n            return {\r\n                ...state,\r\n                storage: action.payload,\r\n                requiem_is_loading: false\r\n            };\r\n        case GET_TORRENT_PROGRESS:\r\n            return {\r\n                ...state,\r\n                torrent_progress: action.payload,\r\n            };\r\n        case GET_ACTIVE_TORRENTS_PROGRESS:\r\n            return {\r\n                ...state,\r\n                active_torrents: action.payload,\r\n            };\r\n        case CLEAR_ANIME_TORRENT_PROGRESS:\r\n            return {\r\n                ...state,\r\n                torrent_progress: [],\r\n            };\r\n        case REQUIEM_LOADING:\r\n            return {\r\n                ...state,\r\n                requiem_is_loading: true\r\n            };\r\n        case REPORTS_LOADING:\r\n            return {\r\n                ...state,\r\n                reports_is_loading: true\r\n            };\r\n        case NEWS_LOADING:\r\n            return {\r\n                ...state,\r\n                news_is_loading: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CREATE_MESSAGE, GET_ERRORS, CLEAN_ERRORS, CLEAR_MESSAGE} from \"./types\";\n\n// CREATE MESSAGE\nexport const createMessage = (msg, type) => {\n    return {\n        type: CREATE_MESSAGE,\n        payload: {msg, type}\n    };\n};\n\n// CLEAR MESSAGE\nexport const clearMessage = () => {\n    return {\n        type: CLEAR_MESSAGE,\n    };\n};\n\n// RETURN ERRORS\nexport const returnErrors = (msg, status) => {\n    return {\n        type: GET_ERRORS,\n        payload: {msg, status}\n    };\n};\n\n// CLEAN ERRORS\nexport const cleanErrors = () => {\n    return {\n        type: CLEAN_ERRORS,\n    };\n};\n","/**\r\n * These filter names must be the same as the field names in the django api function\r\n */\r\nexport class AnimeFilterNames {\r\n    static year = 'year';\r\n    static season = 'season';\r\n    static search = 'search';\r\n    static downloaded = 'downloaded';\r\n    static is_downloading = 'is_downloading';\r\n    static cannot_download = 'cannot_download';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static anime_on_server__english_sub = 'anime_on_server__english_sub';\r\n    static anime_on_server__english_dub = 'anime_on_server__english_dub';\r\n    static anime_on_server__japanese_dub = 'anime_on_server__japanese_dub';\r\n    static anime_on_server__japanese_sub = 'anime_on_server__japanese_sub';\r\n    static type = 'type';\r\n    static status = 'status';\r\n    static rating_short = 'rating_short';\r\n    static genres = 'genres';\r\n    static episodes_range = 'episodes_range';\r\n    static length_range = 'length_range';\r\n    static video_quality = 'video_quality';\r\n    static audio_channel = 'audio_channel';\r\n    static user_exclude = 'user_exclude';\r\n    static ordering = 'ordering';\r\n\r\n    static user_list_pk = 'user_list_pk';\r\n    static user_list_filter = 'user_list_filter';\r\n}\r\n\r\nexport class MangaFilterNames {\r\n    static year = 'year';\r\n    static season = 'season';\r\n    static search = 'search';\r\n    static downloaded = 'downloaded';\r\n    static is_downloading = 'is_downloading';\r\n    static cannot_download = 'cannot_download';\r\n    static deleted_by_MAL = 'deleted_by_MAL';\r\n    static pending_by_MAL = 'pending_by_MAL';\r\n    static volumes_range = 'volumes_range';\r\n    static chapters_range = 'chapters_range';\r\n    static genres = 'genres';\r\n    static type = 'type';\r\n    static status = 'status';\r\n    static user_exclude = 'user_exclude';\r\n    static ordering = 'ordering';\r\n\r\n    static user_list_pk = 'user_list_pk';\r\n    static user_list_filter = 'user_list_filter';\r\n}\r\n\r\nexport class ErogeFilterNames {\r\n    static search = 'search';\r\n    static type = 'type';\r\n    static downloaded = 'downloaded';\r\n    static platforms = 'platforms';\r\n    static language = 'language';\r\n    static censorship = 'censorship';\r\n    static tags = 'tags';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class CharactersFilterNames {\r\n    static search = 'search';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class PeopleFilterNames {\r\n    static search = 'search';\r\n    static ordering = 'ordering';\r\n}\r\n\r\nexport class FilterLabels {\r\n    static downloaded = 'Downloaded';\r\n    static is_downloading = 'Downloading';\r\n    static cannot_download = 'Dead';\r\n    static deleted_by_MAL = 'M-DEL';\r\n    static pending_by_MAL = 'M-PEN';\r\n}\r\n\r\nexport class FilterSchema {\r\n    static filter_name = 'name';\r\n    static label = 'label';\r\n    static color = 'color';\r\n    static content = 'content';\r\n    static marks = 'marks';\r\n    static max = 'max';\r\n    static min = 'min';\r\n    static type = 'type';\r\n}\r\n\r\nexport class FilterSchemaType {\r\n    static standard = 'standard';\r\n    static component = 'component';\r\n    static wide = 'wide';\r\n    static slider = 'slider';\r\n}","import {\r\n    SET_ANIME_FILTERS, SET_CHARACTERS_FILTERS,\r\n    SET_COOKIE_SHOW_FILTERS, SET_EROGE_FILTERS,\r\n    SET_MANGA_FILTERS, SET_PEOPLE_FILTERS\r\n} from \"./types\";\r\n\r\n\r\n// SET COOKIE SHOW FILTERS\r\nexport const setCookieShowFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_COOKIE_SHOW_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE ANIME FILTERS\r\nexport const setCookieAnimeFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_ANIME_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE MANGA FILTERS\r\nexport const setCookieMangaFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_MANGA_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE CHARACTERS FILTERS\r\nexport const setCookieCharactersFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_CHARACTERS_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE CHARACTERS FILTERS\r\nexport const setCookiePeopleFilters = value => dispatch => {\r\n    dispatch({\r\n        type: SET_PEOPLE_FILTERS,\r\n        value: value\r\n    })\r\n};\r\n\r\n\r\n// SET COOKIE EROGE FILTERS\r\nexport const setCookieErogeFilters = (value, type) => dispatch => {\r\n    dispatch({\r\n        type: SET_EROGE_FILTERS,\r\n        value: value,\r\n        page_type: type\r\n    })\r\n};","import Moment from \"react-moment\";\r\nimport React from \"react\";\r\n\r\nimport moment from 'moment'\r\nimport {CYBER_GENESIS_URL} from \"../globals\";\r\nimport {CDNCoverImages, CoverImages} from \"../models\";\r\n\r\n\r\n/**\r\n * Check if an object is empty.\r\n * @param obj {Object} Object to check\r\n * @returns {boolean} True if the object is empty.\r\n */\r\nlet hasOwnProperty = Object.prototype.hasOwnProperty;\r\nexport function isEmpty(obj) {\r\n    if (obj == null) return true;\r\n    if (obj.length > 0) return false;\r\n    if (obj.length === 0) return true;\r\n    if (typeof obj !== \"object\") return true;\r\n    for (let key in obj) {\r\n        if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n /**\r\n  * Formats the date based on the known info about the date, this is used for titles from MAL\r\n  * some titles only have the year of the date, so only the year will be displayed.\r\n  * @param  {String} date          The actual date.\r\n  * @param  {String} known_date    The known date.\r\n  * @param  {Boolean} str          If the return should be string instead.\r\n  * @return {JSX.Element || String}          Moment.js component or string.\r\n  */\r\nexport function formatContentDateByKnown(date, known_date, str = false) {\r\n    if (!known_date)\r\n        return null;\r\n    if (known_date.indexOf('day') >= 0 && known_date.indexOf('month') && known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('Do MMM YYYY');\r\n        return <Moment format=\"Do MMM YYYY\" date={date}/>;\r\n    } else if (known_date.indexOf('month') >= 0 && known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('MMM YYYY');\r\n        return <Moment format=\"MMM YYYY\" date={date}/>\r\n    }\r\n    else if (known_date.indexOf('year')) {\r\n        if (str)\r\n            return moment(date).format('YYYY');\r\n        return <Moment format=\"YYYY\" date={date}/>\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * Get cols number for browse titles cards based on window width.\r\n * @returns {number}\r\n */\r\nexport function getBrowseGridListCols() {\r\n    if (window.innerWidth >= 2800)\r\n        return 9;\r\n    if (window.innerWidth >= 2400)\r\n        return 8;\r\n    else if (window.innerWidth >= 1800)\r\n        return 7;\r\n    else if (window.innerWidth >= 1450)\r\n        return 6;\r\n    else if (window.innerWidth >= 1200)\r\n        return 5;\r\n    else if (window.innerWidth >= 980)\r\n        return 4;\r\n    else if (window.innerWidth >= 720)\r\n        return 3;\r\n    return 2\r\n}\r\n\r\n/**\r\n * Parse number of bytes to human readable format.\r\n * @param size {Number}\r\n * @returns {string}\r\n */\r\nexport function formatBytes(size) {\r\n    const terabyte = 1099511627776;\r\n    const gigabyte = 1073741824;\r\n    const megabyte = 1048576;\r\n\r\n    if (size >= 10995116277760)  // More than 10TB\r\n        return `${(size / terabyte).toFixed(1)}TB`;\r\n    else if (size >= 1099511627776)  // More than 1TB\r\n        return `${(size / terabyte).toFixed(2)}TB`;\r\n    else if (size >= 107374182400) // More than 100GB\r\n        return `${Math.ceil(size / gigabyte)}GB`;\r\n    else if (size >= 10737418240) // More than 10GB\r\n        return `${(size / gigabyte).toFixed(1)}GB`;\r\n    else if (size >= 1073741824) // More than 1GB\r\n        return `${(size / gigabyte).toFixed(2)}GB`;\r\n    else  // Less then 1GB\r\n        return `${Math.ceil(size / megabyte)}MB`;\r\n}\r\n\r\n\r\n/**\r\n * Returns a label representation of the season number sent.\r\n * @param season {Number} Season number.\r\n * @returns {string} Season label.\r\n */\r\nexport function getSeasonLabelFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1:\r\n            return 'Spring';\r\n        case 2:\r\n            return 'Summer';\r\n        case 3:\r\n            return 'Fall';\r\n        case 4:\r\n            return 'Winter';\r\n        default:\r\n            return 'Spring';\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * The program sleeps for the X ms provided.\r\n * @param ms {Number} Milliseconds for the program to sleep\r\n */\r\nexport function sleep(ms) {\r\n    let start = new Date().getTime();\r\n    let end = start;\r\n    while (end < start + ms) end = new Date().getTime();\r\n}\r\n\r\n\r\n/**\r\n * Converts a given date from CEST/UTC to local user time\r\n * @param date {Date} Date to convert\r\n * @returns {Date} returns a calculated Date in local user time\r\n */\r\nexport function convertUTCDateToLocalDate(date) {\r\n    let newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);\r\n\r\n    let offset = date.getTimezoneOffset() / 60;\r\n    let hours = date.getHours();\r\n\r\n    newDate.setHours(hours - offset);\r\n\r\n    return newDate;\r\n}\r\n\r\n\r\n/**\r\n * Get a cover picture for a title, prioritise the CDN image, and prioritise them by size.\r\n * @param {array} cdn_cover_images\r\n * @param {array} cover_images\r\n * @param {boolean} thumbnail: If true, try to return the thumbnail image\r\n * @returns {string}\r\n */\r\nexport function getTitleCoverImage(cdn_cover_images=[], cover_images=[], thumbnail=false) {\r\n    let img_url = `${CYBER_GENESIS_URL}/frontend/static/frontend/images/image-not-found.png`;\r\n    const len_cdn_images = cdn_cover_images.length;\r\n    const len_images = cover_images.length;\r\n\r\n    if (len_cdn_images > 0) {\r\n        if (len_cdn_images > 0) {\r\n            let largest = 0;\r\n            for (let x = 0; x < len_cdn_images; x ++) {\r\n                if (cdn_cover_images[x][CDNCoverImages.size] > largest) {\r\n                    largest = cdn_cover_images[x][CDNCoverImages.size];\r\n                    if (thumbnail)\r\n                        img_url = cdn_cover_images[x][CDNCoverImages.thumbnail_url];\r\n                    else\r\n                        img_url = cdn_cover_images[x][CDNCoverImages.image_url];\r\n                }\r\n            }\r\n        }\r\n    } else if (len_images > 0) {\r\n        if (len_images > 0) {\r\n            if (cover_images[len_images - 1][CoverImages.image][0] === '/')\r\n                img_url = `${CYBER_GENESIS_URL}${cover_images[len_images - 1][CoverImages.image]}`;\r\n            else\r\n                img_url = cover_images[len_images - 1][CoverImages.image];\r\n        }\r\n    }\r\n\r\n    return img_url\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} statuses\r\n * @param {Number} title_id\r\n */\r\nexport function isIdInStatuses(statuses, title_id) {\r\n    return statuses.hasOwnProperty(title_id)\r\n}\r\n\r\n\r\n// /**\r\n//  * Checks if a given date is today\r\n//  * @param date\r\n//  * @returns {boolean}\r\n//  */\r\n// export function isToday(date) {\r\n//   const today = new Date();\r\n//   return date.getDate() === today.getDate() &&\r\n//       date.getMonth() === today.getMonth() &&\r\n//       date.getFullYear() === today.getFullYear()\r\n// }\r\n\r\n\r\nconst REFERENCE = moment();\r\nconst TODAY = REFERENCE.clone().startOf('day');\r\nconst YESTERDAY = REFERENCE.clone().subtract(1, 'days').startOf('day');\r\nconst A_WEEK_OLD = REFERENCE.clone().subtract(7, 'days').startOf('day');\r\nconst A_MONTH_OLD = REFERENCE.clone().subtract(30, 'days').startOf('day');\r\nconst SIX_MONTHS_OLD = REFERENCE.clone().subtract(180, 'days').startOf('day');\r\nconst A_YEAR_OLD = REFERENCE.clone().subtract(1, 'years').startOf('years');\r\nconst TWO_YEARS_OLD = REFERENCE.clone().subtract(2, 'years').startOf('years');\r\n\r\nexport function isTimeLessThanAnHourAgo(last_login) {\r\n    const ONE_HOUR = 60 * 60 * 1000; /* ms */\r\n    return ((new Date) - last_login) < ONE_HOUR;\r\n}\r\n\r\nexport function isTimeLessThanSixHoursAgo(last_login) {\r\n    const ONE_HOUR = 60 * 60 * 1000; /* ms */\r\n    return ((new Date) - last_login) < ONE_HOUR * 6;\r\n}\r\n\r\nexport function isToday(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isSame(TODAY, 'd');\r\n}\r\nexport function isYesterday(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isSame(YESTERDAY, 'd');\r\n}\r\nexport function isWithinAWeek(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_WEEK_OLD);\r\n}\r\nexport function isWithinAMonth(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_MONTH_OLD);\r\n}\r\nexport function isWithinSixMonths(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(SIX_MONTHS_OLD);\r\n}\r\nexport function isWithinAYear(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(A_YEAR_OLD);\r\n}\r\nexport function isMoreThanAYear(date) {\r\n    const moment_date = moment(date);\r\n    return moment_date.isAfter(TWO_YEARS_OLD);\r\n}","import axios from \"axios\";\r\nimport { useAlert  } from 'react-alert'\r\n\r\nimport {\r\n    AUTH_USER,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    GET_USER,\r\n} from \"./types\";\r\nimport {BASE_URL, API_AUTH_USER, API_LOGIN, API_REGISTER, API_LOGOUT, API_GET_USER} from \"./api_urls\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\n\r\n\r\n// GET A SPECIFIC USER\r\nexport const getUser = id => (dispatch, getState) => {\r\n    dispatch({type: USER_LOADING});\r\n    axios\r\n        .get(API_GET_USER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// CHECK TOKEN & LOAD USER (GET LOGGED-IN USER)\r\nexport const authUser = () => (dispatch, getState) => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    axios\r\n        .get(API_AUTH_USER, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: AUTH_USER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n        });\r\n};\r\n\r\n// LOGIN USER\r\nexport const login = (username, password) => dispatch => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // Request Body\r\n    const body = JSON.stringify({username, password});\r\n\r\n    axios\r\n        .post(API_LOGIN, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n            dispatch({\r\n                type: LOGIN_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n// REGISTER USER\r\nexport const register = ({username, password, email}) => dispatch => {\r\n    dispatch({type: USER_LOADING});\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // Request Body\r\n    const body = JSON.stringify({username, email, password});\r\n\r\n    axios\r\n        .post(API_REGISTER, body, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: REGISTER_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n            dispatch({\r\n                type: REGISTER_FAIL\r\n            });\r\n        });\r\n};\r\n\r\n// LOGOUT USER\r\nexport const logout = () => (dispatch, getState) => {\r\n    axios\r\n        .post(API_LOGOUT, null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGOUT_SUCCESS\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// Setup config with token - helper function\r\nexport const tokenConfig = getState => {\r\n    const token = getState().auth.token;\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token)\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    return config;\r\n};\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    GET_ANIME,\r\n    ANIME_LOADING,\r\n    FILTER_ANIME,\r\n    CANCEL_ANIME_LOADING,\r\n    GET_ANIME_DATA,\r\n    GET_ALL_CHARACTERS_FOR_ANIME,\r\n    CHARACTERS_LOADING,\r\n    GET_RELATIONS_FOR_ANIME,\r\n    ANIME_FRANCHISE_LOADING,\r\n    GET_CURRENT_ANIME_FRANCHISE,\r\n    UPDATE_USER_ENTRY_IN_FILTERED_USER_ANIME_ENTRIES,\r\n    GET_ANIME_DATA_STATISTICS,\r\n    GET_ANIME_SEARCHABLE_TITLES, GET_ANIME_ACHIEVEMENT_THRESHOLDS\r\n} from './types'\r\nimport {\r\n    API_FILTER_ANIME,\r\n    API_GET_ALL_CHARACTERS_FOR_ANIME, API_GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n    API_GET_ANIME_DATA,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_ANIME_DATA_WITH_STATISTICS,\r\n    API_GET_ANIME_FRANCHISE,\r\n    API_GET_ANIME_SEARCHABLE_TITLES,\r\n    API_GET_ONE_ANIME,\r\n    API_GET_RELATIONS_FOR_ANIME\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {AnimeFilterNames, MangaFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {setCookieAnimeFilters} from \"./cookies\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {TYPE_BROWSE, TYPE_LIST, TYPE_SEASON, USER_ANIME_ORDERINGS} from \"../globals\";\r\nimport {tokenConfig} from \"./auth\";\r\n\r\n\r\n// GET ANIME DATA\r\nexport const getAnimeData = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ANIME_DATA, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME DATA FOR ANIME HOME PAGE\r\nexport const getAnimeDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME DATA WITH STATISTICS\r\nexport const getAnimeDataWithStatistics = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ANIME_DATA_WITH_STATISTICS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_DATA_STATISTICS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME ACHIEVEMENTS THRESHOLDS\r\nexport const getAnimeAchievementsThresholds = () => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_ACHIEVEMENT_THRESHOLDS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_ACHIEVEMENT_THRESHOLDS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A ONE ANIME\r\nexport const getAnime = id => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    axios\r\n        .get(API_GET_ONE_ANIME(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ALL CHARACTERS FOR ANIME\r\nexport const getAllCharactersForAnime = (id, page) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ALL_CHARACTERS_FOR_ANIME(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_CHARACTERS_FOR_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET RELATIONS FOR ANIME\r\nexport const getRelationsForAnime = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_RELATIONS_FOR_ANIME(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_RELATIONS_FOR_ANIME,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME SPECIFIC FRANCHISE\r\nexport const getAnimeFranchise = (id) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_FRANCHISE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ANIME_FRANCHISE(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CURRENT_ANIME_FRANCHISE,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {})\r\n};\r\n\r\n\r\n// GET ANIME SEARCHABLE TITLES\r\nexport const getAnimeSearchableTitles = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_ANIME_SEARCHABLE_TITLES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_SEARCHABLE_TITLES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {})\r\n};\r\n\r\n\r\n// FILTER ALL ANIME\r\nexport const filterAnime = (page, filters, season, list, loading = true, save_cookie = true) => (dispatch, getState) => {\r\n    if (loading)\r\n        dispatch({type: ANIME_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n    if (season !== undefined && season !== 'undefined' && !isEmpty(season)) {\r\n        config.params = setAnimeSeasonParams(config.params, season);\r\n        page_type = TYPE_SEASON;\r\n    }\r\n    if (list !== undefined && list !== 'undefined' && !isEmpty(list)) {\r\n        config.params = setAnimeListParams(config.params, list);\r\n        page_type = TYPE_LIST;\r\n    } else if (USER_ANIME_ORDERINGS.indexOf(config.params[AnimeFilterNames.ordering].replace('-', '')) > -1)\r\n        config.params[AnimeFilterNames.ordering] = '-members';\r\n\r\n    axios\r\n        .get(API_FILTER_ANIME, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_ANIME,\r\n                payload: res.data\r\n            });\r\n            if (save_cookie && filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieAnimeFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch(cancelAnimeLoading());\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// CANCEL ANIME LOADING\r\nexport const cancelAnimeLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_ANIME_LOADING,\r\n    })\r\n};\r\n\r\n\r\nexport function setAnimeFilterParams(params, filters) {\r\n    if (filters[AnimeFilterNames.search] && typeof filters[AnimeFilterNames.search] == 'string') params[AnimeFilterNames.search] = filters[AnimeFilterNames.search];\r\n    if (filters[AnimeFilterNames.downloaded]) params[AnimeFilterNames.downloaded] = filters[AnimeFilterNames.downloaded];\r\n    if (filters[AnimeFilterNames.is_downloading]) params[AnimeFilterNames.is_downloading] = filters[AnimeFilterNames.is_downloading];\r\n    if (filters[AnimeFilterNames.cannot_download]) params[AnimeFilterNames.cannot_download] = filters[AnimeFilterNames.cannot_download];\r\n    if (filters[AnimeFilterNames.deleted_by_MAL]) params[AnimeFilterNames.deleted_by_MAL] = filters[AnimeFilterNames.deleted_by_MAL];\r\n    if (filters[AnimeFilterNames.pending_by_MAL]) params[AnimeFilterNames.pending_by_MAL] = filters[AnimeFilterNames.pending_by_MAL];\r\n    if (filters[AnimeFilterNames.anime_on_server__english_sub])\r\n        params[AnimeFilterNames.anime_on_server__english_sub] = filters[AnimeFilterNames.anime_on_server__english_sub];\r\n    if (filters[AnimeFilterNames.anime_on_server__english_dub])\r\n        params[AnimeFilterNames.anime_on_server__english_dub] = filters[AnimeFilterNames.anime_on_server__english_dub];\r\n    if (filters[AnimeFilterNames.anime_on_server__japanese_sub])\r\n        params[AnimeFilterNames.anime_on_server__japanese_sub] = filters[AnimeFilterNames.anime_on_server__japanese_sub];\r\n    if (filters[AnimeFilterNames.anime_on_server__japanese_dub])\r\n        params[AnimeFilterNames.anime_on_server__japanese_dub] = filters[AnimeFilterNames.anime_on_server__japanese_dub];\r\n    if (filters[AnimeFilterNames.episodes_range].length > 0) params[AnimeFilterNames.episodes_range] = filters[AnimeFilterNames.episodes_range].join();\r\n    if (filters[AnimeFilterNames.length_range].length > 0) params[AnimeFilterNames.length_range] = filters[AnimeFilterNames.length_range].join();\r\n    if (filters[AnimeFilterNames.genres].length > 0) params[AnimeFilterNames.genres] = filters[AnimeFilterNames.genres].join();\r\n    if (filters[AnimeFilterNames.type].length > 0) params[AnimeFilterNames.type] = filters[AnimeFilterNames.type].join();\r\n    if (filters[AnimeFilterNames.status].length > 0) params[AnimeFilterNames.status] = filters[AnimeFilterNames.status].join();\r\n    if (filters[AnimeFilterNames.rating_short].length > 0) params[AnimeFilterNames.rating_short] = filters[AnimeFilterNames.rating_short].join();\r\n    if (filters[AnimeFilterNames.video_quality].length > 0) params[AnimeFilterNames.video_quality] = filters[AnimeFilterNames.video_quality].join();\r\n    if (filters[AnimeFilterNames.audio_channel].length > 0) params[AnimeFilterNames.audio_channel] = filters[AnimeFilterNames.audio_channel].join();\r\n    if (filters[AnimeFilterNames.user_exclude].length > 0) params[AnimeFilterNames.user_exclude] = filters[AnimeFilterNames.user_exclude].join();\r\n    if (filters[AnimeFilterNames.ordering]) params[AnimeFilterNames.ordering] = filters[AnimeFilterNames.ordering];\r\n    return params\r\n}\r\n\r\nfunction setAnimeSeasonParams(params, season) {\r\n    params[AnimeFilterNames.year] = season[AnimeFilterNames.year];\r\n    params[AnimeFilterNames.season] = season[AnimeFilterNames.season];\r\n    return params\r\n}\r\n\r\nfunction setAnimeListParams(params, list) {\r\n    params[AnimeFilterNames.user_list_filter] = list[AnimeFilterNames.user_list_filter];\r\n    params[AnimeFilterNames.user_list_pk] = list[AnimeFilterNames.user_list_pk];\r\n    if (params[AnimeFilterNames.user_exclude] && params[AnimeFilterNames.user_exclude].length > 0)\r\n        params[AnimeFilterNames.user_exclude] = null;\r\n    return params\r\n}\r\n","import {\r\n    ANIME_LOADING, CANCEL_ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CHARACTERS_LOADING, FILTER_CHARACTERS, GET_ANIME_DATA,\r\n    GET_CHARACTER, GET_CHARACTERS_DATA, GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_CHARACTERS,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_CHARACTERS_DATA_FOR_HOME_PAGE, API_GET_INDUSTRY_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_CHARACTER\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieCharactersFilters} from \"./cookies\";\r\nimport {CharactersFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\n\r\n\r\n// GET A ONE CHARACTER\r\nexport const getCharacter = id => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_CHARACTER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_CHARACTER,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL CHARACTERS\r\nexport const filterCharacters = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setCharactersFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_CHARACTERS, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_CHARACTERS,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieCharactersFilters(filters))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setCharactersFilterParams(params, filters) {\r\n    if (filters[CharactersFilterNames.search] && typeof filters[CharactersFilterNames.search] == 'string')\r\n        params[CharactersFilterNames.search] = filters[CharactersFilterNames.search];\r\n    if (filters[CharactersFilterNames.ordering])\r\n        params[CharactersFilterNames.ordering] = filters[CharactersFilterNames.ordering];\r\n    return params\r\n}\r\n\r\n\r\n// CANCEL CHARACTERS LOADING\r\nexport const cancelCharactersLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_CHARACTERS_LOADING,\r\n    })\r\n};\r\n","import {\r\n    CANCEL_PEOPLE_LOADING,\r\n    FILTER_CHARACTERS,\r\n    FILTER_PEOPLE,\r\n    GET_ALL_CHARACTERS_FOR_ANIME, GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    GET_PERSON, GET_PUBLISHED_MANGA_FOR_PERSON, GET_VOICE_ACTOR_ROLES_FOR_PERSON,\r\n    PEOPLE_LOADING\r\n} from \"../actions/types\";\r\nimport {playExpandSound} from \"../components/layout/sounds\";\r\nimport {Anime, Person} from \"../models\";\r\nimport store from \"../store\";\r\nimport {cancelAnimeLoading} from \"../actions/anime\";\r\nimport {cancelCharactersLoading} from \"../actions/characters\";\r\n\r\nconst initialState = {\r\n    people_loading: false,\r\n    person: {},\r\n    people_loaded: false,\r\n\r\n    people_data: {},\r\n    people_data_statistics: {},\r\n    people_data_loaded: false,\r\n\r\n    filtered_people: {},\r\n    filtered_people_loaded: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case PEOPLE_LOADING:\r\n            return {\r\n                ...state,\r\n                people_loading: true,\r\n                people_loaded: false,\r\n                filtered_people_loaded: false,\r\n            };\r\n        case CANCEL_PEOPLE_LOADING:\r\n            return {\r\n                ...state,\r\n                people_loading: false,\r\n                people_loaded: false,\r\n                filtered_people_loaded: false,\r\n            };\r\n        case GET_PERSON:\r\n            playExpandSound();\r\n            return {\r\n                ...state,\r\n                person: action.payload,\r\n                people_loading: false,\r\n                people_loaded: true\r\n            };\r\n        case GET_VOICE_ACTOR_ROLES_FOR_PERSON:\r\n            state.person[Person.voice_actor_roles] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case GET_ANIME_STAFF_POSITIONS_FOR_PERSON:\r\n            state.person[Person.anime_staff_positions] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case GET_PUBLISHED_MANGA_FOR_PERSON:\r\n            state.person[Person.published_manga] = action.payload;\r\n            return {\r\n                ...state,\r\n                person: state.person\r\n            };\r\n        case FILTER_PEOPLE:\r\n            return {\r\n                ...state,\r\n                filtered_people: action.payload,\r\n                people_loading: false,\r\n                filtered_people_loaded: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    industry_data: {},\r\n    industry_data_loading: {},\r\n    industry_data_statistics: {},\r\n    industry_data_loaded: false,\r\n};\r\n\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case INDUSTRY_DATA_LOADING:\r\n            return {\r\n                ...state,\r\n                industry_data_loading: true,\r\n                industry_data_loaded: false,\r\n            };\r\n        case GET_INDUSTRY_DATA:\r\n            return {\r\n                ...state,\r\n                industry_data_loading: false,\r\n                industry_data: action.payload,\r\n                industry_data_loaded: true,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport anime from './anime'\r\nimport manga from './manga'\r\nimport auth from './auth'\r\nimport errors from './errors'\r\nimport characters from './characters'\r\nimport eroge from './eroge'\r\nimport cookies from './cookies'\r\nimport success from './success'\r\nimport users from './users'\r\nimport requiem from './requiem'\r\nimport people from './people'\r\nimport industry from './industry'\r\n\r\nexport default combineReducers({\r\n    cookies, auth, users, errors, success, requiem, anime, manga, characters, people, eroge, industry\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './reducers'\r\n\r\n\r\nconst initialState = {};\r\n\r\n// const middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CYBER_GENESIS_URL} from \"./globals\";\r\n\r\nexport const INDEX = '/';\r\nexport const NOT_FOUND = '/404';\r\nexport const HOME = '/home';\r\n\r\nexport const REQUIEM = '/requiem';\r\n\r\nexport const ADMIN = `${CYBER_GENESIS_URL}/admin`;\r\nexport function ADMIN_EDIT_ANIME(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/anime/anime/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_ANIME_ON_SERVER(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/anime/animeonserver/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_MANGA(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/manga/manga/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_CHARACTER(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/characters/character/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_EROGE(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/eroge/eroge/${id}/change/`;\r\n}\r\nexport function ADMIN_EDIT_PERSON(id) {\r\n    return `${CYBER_GENESIS_URL}/admin/industry/person/${id}/change/`;\r\n}\r\n\r\nexport const LOGIN = '/login';\r\nexport const REGISTER = '/register';\r\nexport const SETTINGS = '/settings';\r\nexport const BBCODE_EDITOR = '/bbcode-editor';\r\nexport function PROFILE(id) {\r\n    if (id) return `/profile/${id}`;\r\n    return '/profile/:id'\r\n}\r\nexport function USER_ANIME_LIST(id) {\r\n    if (id) return `/anime-list/${id}`;\r\n    return '/anime-list/:id'\r\n}\r\nexport function USER_MANGA_LIST(id) {\r\n    if (id) return `/manga-list/${id}`;\r\n    return '/manga-list/:id'\r\n}\r\nexport function USER_EROGE_LIST(id) {\r\n    if (id) return `/eroge-list/${id}`;\r\n    return '/eroge-list/:id'\r\n}\r\nexport function USER_ANIME_STATISTICS(id) {\r\n    if (id) return `/profile/statistics/${id}`;\r\n    return '/profile/statistics/:id'\r\n}\r\nexport function USER_ANIME_HISTORY(id) {\r\n    if (id) return `/profile/history/anime/${id}`;\r\n    return '/profile/history/anime/:id'\r\n}\r\nexport function USER_MANGA_HISTORY(id) {\r\n    if (id) return `/profile/history/manga/${id}`;\r\n    return '/profile/history/manga/:id'\r\n}\r\n\r\nexport const ANIME_HOME = '/anime';\r\nexport const ANIME_BROWSE = '/anime/browse';\r\nexport const ANIME_SEASONS = '/anime/seasons';\r\nexport function ANIME_SEASON_DISPLAY(year, season) {\r\n    if (year && season >= 0) return `/anime/seasons/${year}/${season}`;\r\n    return '/anime/seasons/:year/:season'\r\n}\r\nexport const ANIME_FRANCHISES = '/anime/franchises';\r\nexport function ANIME_DISPLAY(id) {\r\n    if (id)\r\n        return `/anime/${id}`;\r\n    return '/anime/:id'\r\n}\r\nexport function ANIME_FRANCHISE_DISPLAY(id) {\r\n    if (id)\r\n        return `/anime/franchises/${id}`;\r\n    return '/anime/franchises/:id'\r\n}\r\n\r\nexport const MANGA_HOME = '/manga';\r\nexport const MANGA_BROWSE = '/manga/browse';\r\nexport const MANGA_SEASONS = '/manga/seasons';\r\nexport function MANGA_SEASON_DISPLAY(year, season) {\r\n    if (year && season >= 0) return `/manga/seasons/${year}/${season}`;\r\n    return '/manga/seasons/:year/:season'\r\n}\r\nexport const MANGA_FRANCHISES = '/manga/franchises';\r\nexport function MANGA_DISPLAY(id) {\r\n    if (id) return `/manga/${id}`;\r\n    return '/manga/:id'\r\n}\r\n\r\nexport const CHARACTERS_HOME = '/characters';\r\nexport const CHARACTERS_BROWSE = '/characters/browse';\r\nexport function CHARACTERS_DISPLAY(id) {\r\n    if (id) return `/characters/${id}`;\r\n    return '/characters/:id'\r\n}\r\n\r\nexport const PEOPLE_HOME = '/people';\r\nexport const PEOPLE_BROWSE = '/people/browse';\r\nexport function PERSON_DISPLAY(id) {\r\n    if (id) return `/person/${id}`;\r\n    return '/person/:id'\r\n}\r\n\r\nexport const EROGE_HOME = '/eroge';\r\nexport const EROGE_BROWSE = '/eroge/browse';\r\nexport function EROGE_DISPLAY(id) {\r\n    if (id) return `/eroge/${id}`;\r\n    return '/eroge/:id'\r\n}\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n    ANIME_BROWSE,\r\n    ANIME_FRANCHISES,\r\n    ANIME_HOME,\r\n    ANIME_SEASONS,\r\n    CHARACTERS_BROWSE,\r\n    CHARACTERS_HOME,\r\n    EROGE_BROWSE,\r\n    EROGE_HOME,\r\n    INDEX,\r\n    LOGIN,\r\n    MANGA_BROWSE,\r\n    MANGA_FRANCHISES,\r\n    MANGA_HOME,\r\n    MANGA_SEASONS,\r\n    NOT_FOUND,\r\n    PEOPLE_BROWSE,\r\n    SETTINGS,\r\n    USER_ANIME_LIST,\r\n    USER_ANIME_STATISTICS,\r\n    USER_EROGE_LIST,\r\n    USER_MANGA_LIST\r\n} from \"../../../urls\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport store from \"../../../store\";\r\nimport {logout} from \"../../../actions/auth\";\r\nimport {EROGE_BROWSE_TAB_NAME, NOT_FOUND_404_TAB_NAME} from \"../../../globals\";\r\n\r\n\r\nexport default function AnimeMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={ANIME_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Home</Link>\r\n            <Link to={ANIME_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Browse</Link>\r\n            <Link to={ANIME_SEASONS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Seasons</Link>\r\n            <Link to={ANIME_FRANCHISES} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Franchises</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function MangaMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={MANGA_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Home</Link>\r\n            <Link to={MANGA_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Browse</Link>\r\n            <Link to={MANGA_SEASONS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Seasons</Link>\r\n            <Link to={MANGA_FRANCHISES} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Franchises</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function CharactersMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={CHARACTERS_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Home</Link>\r\n            <Link to={CHARACTERS_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Characters</Link>\r\n            <Link to={PEOPLE_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>People</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function ErogeMenu(props) {\r\n    const {show, onLeave} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu show-dropdown' : 'desktop-menu'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={EROGE_HOME} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Home</Link>\r\n            <Link to={EROGE_BROWSE} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Browse</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function AuthMenu(props) {\r\n    const {show, onLeave, user_id} = props;\r\n\r\n    return (\r\n        <div className={show ? 'desktop-menu desktop-menu-reversed show-dropdown' : 'desktop-menu desktop-menu-reversed'}\r\n             style={{pointerEvents: show ? 'initial' : 'none'}}\r\n             onMouseLeave={onLeave}>\r\n            <Link to={USER_ANIME_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Anime List</Link>\r\n            <Link to={USER_MANGA_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Manga List</Link>\r\n            <Link to={USER_EROGE_LIST(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Eroge List</Link>\r\n            <Link to={USER_ANIME_STATISTICS(user_id)} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Statistics</Link>\r\n            <Link to={SETTINGS} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={playClickSound}>Settings</Link>\r\n            <Link to={LOGIN} className=\"menu-link\" onMouseEnter={playHoverSound} onClick={() => {\r\n                playClickSound();\r\n                store.dispatch(logout());\r\n            }}>Logout</Link>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nimport '../../../assets/css/layout.css'\r\nimport {ADMIN, HOME, INDEX, LOGIN, PROFILE} from \"../../../urls\";\r\nimport AnimeMenu, {AuthMenu, CharactersMenu, ErogeMenu, MangaMenu} from \"./menus\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faUser} from \"@fortawesome/free-solid-svg-icons/faUser\";\r\n\r\nconst STYLE = {top: 25, left: 25};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        zIndex: 900\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        background: 'none',\r\n    },\r\n    toolbar: {\r\n        minHeight: 42,\r\n    },\r\n    title: {\r\n        marginRight: theme.spacing(3),\r\n        fontFamily: 'Quicksand',\r\n        fontVariant: 'small-caps',\r\n        userSelect: \"none\"\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        fontSize: \"medium\",\r\n    },\r\n    menuButtonLink: {\r\n        color: \"inherit\",\r\n        textDecoration: \"none\"\r\n    },\r\n    menuLinks: {\r\n        top: 35,\r\n        left: 25\r\n    },\r\n    sectionDesktop: {\r\n        display: 'none',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'flex',\r\n        },\r\n    },\r\n    sectionMobile: {\r\n        display: 'flex',\r\n        [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function MenuAppBar(props) {\r\n    const {user_authenticated, user_id, username, superuser} = props;\r\n    const classes = useStyles();\r\n    const [profileAnchorEl, setProfileAnchorEl] = React.useState(null);\r\n    const [animeAnchorEl, setAnimeAnchorEl] = React.useState(null);\r\n    const [mobileAnchorEl, setMobileAnchorEl] = React.useState(null);\r\n    const isProfileOpen = Boolean(profileAnchorEl);\r\n    const isAnimeOpen = Boolean(animeAnchorEl);\r\n    const isMobileMenuOpen = Boolean(mobileAnchorEl);\r\n\r\n    const [desktopAnimeMenu, setDesktopAnimeMenu] = React.useState(false);\r\n    const [desktopMangaMenu, setDesktopMangaMenu] = React.useState(false);\r\n    const [desktopCharactersMenu, setDesktopCharactersMenu] = React.useState(false);\r\n    const [desktopErogeMenu, setDesktopErogeMenu] = React.useState(false);\r\n    const [desktopAuthMenu, setDesktopAuthMenu] = React.useState(false);\r\n    const anime = 'anime';\r\n    const manga = 'manga';\r\n    const characters = 'characters';\r\n    const eroge = 'eroge';\r\n    const auth = 'auth';\r\n\r\n    // Handle methods\r\n    const handleProfileMenu = (event) => {\r\n        setProfileAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleAnimeMenu = (event) => {\r\n        setAnimeAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMobileMenu = (event) => {\r\n        setMobileAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    // Close methods\r\n    const handleProfileClose = () => {\r\n        setProfileAnchorEl(null);\r\n    };\r\n\r\n    const handleAnimeClose = () => {\r\n        setAnimeAnchorEl(null);\r\n        handleMobileClose()\r\n    };\r\n\r\n    const handleMobileClose = () => {\r\n        setMobileAnchorEl(null);\r\n    };\r\n\r\n    // Desktop methods\r\n    const onDesktopMenuLeave = () => {\r\n        setDesktopAnimeMenu(false);\r\n        setDesktopMangaMenu(false);\r\n        setDesktopCharactersMenu(false);\r\n        setDesktopErogeMenu(false);\r\n        setDesktopAuthMenu(false);\r\n    };\r\n\r\n    const onDesktopMenuEnter = (menuName) => {\r\n        onDesktopMenuLeave();\r\n        playHoverSound();\r\n        if (menuName === anime) {\r\n            setDesktopAnimeMenu(true);\r\n        } else if (menuName === manga) {\r\n            setDesktopMangaMenu(true)\r\n        } else if (menuName === characters) {\r\n            setDesktopCharactersMenu(true)\r\n        } else if (menuName === eroge) {\r\n            setDesktopErogeMenu(true)\r\n        } else if (menuName === auth) {\r\n            setDesktopAuthMenu(true)\r\n        }\r\n    };\r\n\r\n    const handleScroll = () => {\r\n        let navbar = document.getElementById('Cyber-Navbar');\r\n\r\n        if (window.scrollY > 40) {\r\n            navbar.classList.add('Cyber-Navbar-scrolled');\r\n        } else {\r\n            try {\r\n                navbar.classList.remove('Cyber-Navbar-scrolled');\r\n            } catch (e) {\r\n            }\r\n        }\r\n    };\r\n\r\n    const animeMobileMenu = 'anime-mobile-menu';\r\n    const renderAnimeMenu = (\r\n        <Menu\r\n            id={animeMobileMenu}\r\n            anchorEl={animeAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            transformOrigin={{vertical: 'top', horizontal: 'center'}}\r\n            keepMounted\r\n            open={isAnimeOpen}\r\n            onClose={handleAnimeClose}\r\n            style={STYLE}\r\n        >\r\n            <MenuItem onClick={handleAnimeClose}>Home</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Browse</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Seasons</MenuItem>\r\n            <MenuItem onClick={handleAnimeClose}>Franchises</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileClose}\r\n        >\r\n            <MenuItem onClick={handleAnimeMenu}>\r\n                <Button\r\n                    aria-label=\"anime links\"\r\n                    aria-controls={animeMobileMenu}\r\n                    aria-haspopup=\"true\">\r\n                    Anime\r\n                </Button>\r\n            </MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    document.addEventListener('scroll', handleScroll);\r\n\r\n    return (\r\n        <div id=\"Cyber-Navbar\" className={classes.root} onMouseLeave={onDesktopMenuLeave}>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton edge=\"start\" className={classes.sectionMobile} color=\"inherit\" aria-label=\"menu\"\r\n                                onClick={handleMobileMenu}>\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        <Link to={INDEX} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                              onClick={playClickSound}>Cyber-Genesis</Link>\r\n                    </Typography>\r\n\r\n                    <div className={classes.sectionDesktop + ' desktop'}>\r\n                        <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={HOME} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Home</Link>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(anime)\r\n                        }}>\r\n                            Anime\r\n                            <AnimeMenu show={desktopAnimeMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(manga)\r\n                        }}>\r\n                            Manga\r\n                            <MangaMenu show={desktopMangaMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(characters)\r\n                        }}>\r\n                            Industry\r\n                            <CharactersMenu show={desktopCharactersMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        <span className={classes.menuButton} onMouseEnter={() => {\r\n                            onDesktopMenuEnter(eroge)\r\n                        }}>\r\n                            Eroge\r\n                            <ErogeMenu show={desktopErogeMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n\r\n                        {superuser ? <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <a href={ADMIN} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Admin</a>\r\n                        </span> : null}\r\n                    </div>\r\n\r\n                    <div className={classes.grow}/>\r\n\r\n                    {user_authenticated ? <div className={classes.sectionDesktop + ' desktop'}>\r\n                        <span onMouseEnter={() => {\r\n                            onDesktopMenuEnter(auth)\r\n                        }}>\r\n                            <Link to={PROFILE(user_id)} onMouseOver={playHoverSound} onClick={playClickSound}>\r\n                                {username} <FontAwesomeIcon icon={faUser}/></Link>\r\n                            <AuthMenu user_id={user_id} show={desktopAuthMenu} onLeave={onDesktopMenuLeave}/>\r\n                        </span>\r\n                    </div> : user_authenticated != null ?\r\n                        <span className={classes.menuButton} onMouseEnter={onDesktopMenuLeave}>\r\n                            <Link to={LOGIN} className={classes.menuButtonLink} onMouseOver={playHoverSound}\r\n                                  onClick={playClickSound}>Login</Link>\r\n                        </span> : null}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n            {renderAnimeMenu}\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {User} from \"../../../models\";\r\nimport MenuAppBar from \"./CyberHeader\";\r\n\r\n\r\nclass CyberNavbar extends Component {\r\n    render() {\r\n        return <MenuAppBar user_authenticated={this.props.user_authenticated} user_id={this.props.user_id}\r\n                           username={this.props.username} superuser={this.props.superuser}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    user_id: state.auth.user ? state.auth.user[User.id] : null,\r\n    superuser: state.auth.user ? state.auth.user[User.is_superuser] : false,\r\n    username: state.auth.user ? state.auth.user[User.username] : null\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CyberNavbar)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Parallax} from \"react-parallax\";\r\n\r\nimport '../../../assets/css/layout.css'\r\n\r\n\r\nclass CyberFooter extends Component {\r\n    render() {\r\n        return (\r\n            <div style={this.props.margin === false ? null : {marginTop: '150px'}} id=\"Footer\">\r\n                <Parallax\r\n                    blur={0}\r\n                    bgImage={'/images/object.png'}\r\n                    bgImageAlt=\"footer\"\r\n                    strength={200}>\r\n                    <div className=\"logos-container\">\r\n                        <p className=\"\">Powered by</p>\r\n                        <div className=\"logo-container logo-container-side\">\r\n                            <img src=\"/images/cyber-administration-logo.png\" alt={''}/>\r\n                            <h5 className=\"color-\">Cyber-Admin</h5>\r\n                        </div>\r\n                        <div className=\"logo-container logo-container-main\">\r\n                            <img src=\"/images/cyber-genesis-logo.png\" alt={''}/>\r\n                            <h3 className=\"color-\">Cyber-Genesis</h3>\r\n                        </div>\r\n                        <div className=\"logo-container logo-container-side\">\r\n                            <img src=\"/images/cyber-requiem-logo.png\" alt={''}/>\r\n                            <h5 className=\"color-\">Cyber-Requiem</h5>\r\n                        </div>\r\n                    </div>\r\n                </Parallax>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(CyberFooter)\r\n","import {\r\n    MANGA_LOADING,\r\n    CANCEL_MANGA_LOADING,\r\n    GET_MANGA,\r\n    FILTER_MANGA,\r\n    GET_MANGA_DATA,\r\n    GET_ALL_CHARACTERS_FOR_MANGA,\r\n    GET_RELATIONS_FOR_MANGA, CANCEL_CHARACTERS_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_MANGA,\r\n    API_GET_ALL_CHARACTERS_FOR_MANGA,\r\n    API_GET_MANGA_DATA, API_GET_MANGA_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_MANGA,\r\n    API_GET_RELATIONS_FOR_MANGA\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {MangaFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {setCookieMangaFilters} from \"./cookies\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {TYPE_BROWSE, TYPE_LIST, TYPE_SEASON, USER_MANGA_ORDERINGS} from \"../globals\";\r\n\r\n\r\n// GET MANGA DATA\r\nexport const getMangaData = () => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n    axios\r\n        .get(API_GET_MANGA_DATA, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET MANGA DATA FOR MANGA HOME PAGE\r\nexport const getMangaDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_MANGA_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET A ONE MANGA\r\nexport const getManga = id => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_MANGA(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET ALL CHARACTERS FOR MANGA\r\nexport const getAllCharactersForManga = (id, page) => (dispatch, getState) => {\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ALL_CHARACTERS_FOR_MANGA(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_CHARACTERS_FOR_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET RELATIONS FOR MANGA\r\nexport const getRelationsForManga = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_RELATIONS_FOR_MANGA(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_RELATIONS_FOR_MANGA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL MANGA\r\nexport const filterManga = (page, filters, season, list, loading = true, save_cookie = true) => (dispatch, getState) => {\r\n    if (loading)\r\n        dispatch({type: MANGA_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n    if (season !== undefined && season !== 'undefined' && !isEmpty(season)) {\r\n        config.params = setMangaSeasonParams(config.params, season);\r\n        page_type = TYPE_SEASON;\r\n    }\r\n    if (list !== undefined && list !== 'undefined' && !isEmpty(list)) {\r\n        config.params = setMangaListParams(config.params, list);\r\n        page_type = TYPE_LIST;\r\n    } else if (USER_MANGA_ORDERINGS.indexOf(config.params[MangaFilterNames.ordering].replace('-', '')) > -1)\r\n        config.params[MangaFilterNames.ordering] = '-members';\r\n\r\n    axios\r\n        .get(API_FILTER_MANGA, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_MANGA,\r\n                payload: res.data\r\n            });\r\n            if (save_cookie && filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieMangaFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_MANGA_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setMangaFilterParams(params, filters) {\r\n    if (filters[MangaFilterNames.search] && typeof filters[MangaFilterNames.search] == 'string') params[MangaFilterNames.search] = filters[MangaFilterNames.search];\r\n    if (filters[MangaFilterNames.downloaded]) params[MangaFilterNames.downloaded] = filters[MangaFilterNames.downloaded];\r\n    if (filters[MangaFilterNames.is_downloading]) params[MangaFilterNames.is_downloading] = filters[MangaFilterNames.is_downloading];\r\n    if (filters[MangaFilterNames.cannot_download]) params[MangaFilterNames.cannot_download] = filters[MangaFilterNames.cannot_download];\r\n    if (filters[MangaFilterNames.deleted_by_MAL]) params[MangaFilterNames.deleted_by_MAL] = filters[MangaFilterNames.deleted_by_MAL];\r\n    if (filters[MangaFilterNames.pending_by_MAL]) params[MangaFilterNames.pending_by_MAL] = filters[MangaFilterNames.pending_by_MAL];\r\n    if (filters[MangaFilterNames.volumes_range].length > 0) params[MangaFilterNames.volumes_range] = filters[MangaFilterNames.volumes_range].join();\r\n    if (filters[MangaFilterNames.chapters_range].length > 0) params[MangaFilterNames.chapters_range] = filters[MangaFilterNames.chapters_range].join();\r\n    if (filters[MangaFilterNames.genres].length > 0) params[MangaFilterNames.genres] = filters[MangaFilterNames.genres].join();\r\n    if (filters[MangaFilterNames.type].length > 0) params[MangaFilterNames.type] = filters[MangaFilterNames.type].join();\r\n    if (filters[MangaFilterNames.status].length > 0) params[MangaFilterNames.status] = filters[MangaFilterNames.status].join();\r\n    if (filters[MangaFilterNames.user_exclude].length > 0) params[MangaFilterNames.user_exclude] = filters[MangaFilterNames.user_exclude].join();\r\n    if (filters[MangaFilterNames.ordering]) params[MangaFilterNames.ordering] = filters[MangaFilterNames.ordering];\r\n    return params\r\n}\r\n\r\nexport function setMangaSeasonParams(params, season) {\r\n    params[MangaFilterNames.year] = season[MangaFilterNames.year];\r\n    params[MangaFilterNames.season] = season[MangaFilterNames.season];\r\n    return params\r\n}\r\n\r\nexport function setMangaListParams(params, season) {\r\n    params[MangaFilterNames.user_list_filter] = season[MangaFilterNames.user_list_filter];\r\n    params[MangaFilterNames.user_list_pk] = season[MangaFilterNames.user_list_pk];\r\n    if (params[MangaFilterNames.user_exclude] && params[MangaFilterNames.user_exclude].length > 0)\r\n        params[MangaFilterNames.user_exclude] = null;\r\n    return params\r\n}\r\n\r\n\r\n// CANCEL MANGA LOADING\r\nexport const cancelMangaLoading = () => dispatch => {\r\n    dispatch({\r\n        type: CANCEL_MANGA_LOADING,\r\n    })\r\n};\r\n","import axios from \"axios\";\r\n\r\nimport {\r\n    ANIME_LOADING,\r\n    CANCEL_EROGE_LOADING,\r\n    EROGE_LOADING,\r\n    FILTER_EROGE, GET_ANIME_DATA,\r\n    GET_EROGE, GET_EROGE_DATA\r\n} from \"./types\";\r\nimport {\r\n    API_FILTER_EROGE,\r\n    API_GET_ANIME_DATA_FOR_HOME_PAGE,\r\n    API_GET_EROGE_DATA_FOR_HOME_PAGE,\r\n    API_GET_ONE_EROGE\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieErogeFilters} from \"./cookies\";\r\nimport {ErogeFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {TYPE_BROWSE} from \"../globals\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\n\r\n\r\n// GET A ONE EROGE\r\nexport const getEroge = id => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_ONE_EROGE(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET EROGE DATA FOR EROGE HOME PAGE\r\nexport const getErogeDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_EROGE_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL EROGE\r\nexport const filterEroge = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: EROGE_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    let page_type = TYPE_BROWSE;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_EROGE, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_EROGE,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookieErogeFilters(filters, page_type))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_EROGE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setErogeFilterParams(params, filters) {\r\n    if (filters[ErogeFilterNames.search] && typeof filters[ErogeFilterNames.search] == 'string') params[ErogeFilterNames.search] = filters[ErogeFilterNames.search];\r\n    if (filters[ErogeFilterNames.downloaded]) params[ErogeFilterNames.downloaded] = filters[ErogeFilterNames.downloaded];\r\n    if (filters[ErogeFilterNames.type].length > 0) params[ErogeFilterNames.type] = filters[ErogeFilterNames.type].join();\r\n    if (filters[ErogeFilterNames.platforms].length > 0) params[ErogeFilterNames.platforms] = filters[ErogeFilterNames.platforms].join();\r\n    if (filters[ErogeFilterNames.censorship].length > 0) params[ErogeFilterNames.censorship] = filters[ErogeFilterNames.censorship].join();\r\n    if (filters[ErogeFilterNames.language].length > 0) params[ErogeFilterNames.language] = filters[ErogeFilterNames.language].join();\r\n    if (filters[ErogeFilterNames.tags].length > 0) params[ErogeFilterNames.tags] = filters[ErogeFilterNames.tags].join();\r\n    if (filters[ErogeFilterNames.ordering]) params[ErogeFilterNames.ordering] = filters[ErogeFilterNames.ordering];\r\n    return params\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {store_reducer_cookies, store_reducers, USER_ANIME_STATUSES, USER_MANGA_STATUSES} from \"../globals\";\r\nimport {\r\n    API_CHANGE_USER_PROFILE_IMAGE,\r\n    API_DELETE_ANIME_HISTORY_ENTRY,\r\n    API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY,\r\n    API_DELETE_MANGA_VOLUME_HISTORY_ENTRY,\r\n    API_EDIT_USER_BIO,\r\n    API_GET_ALL_USERS,\r\n    API_GET_USER_LIST,\r\n    API_GET_VISITED_USER_ANIME_HISTORY,\r\n    API_GET_VISITED_USER_MANGA_HISTORY,\r\n    API_IMPORT_MAL_XML_FOR_ANIME_LIST,\r\n    API_UPDATE_AND_GET_USER_ANIME_STATISTICS,\r\n    API_UPDATE_USER_LIST,\r\n    API_USER_ANIME_ENTRY,\r\n    API_USER_ANIME_ENTRY_NOID,\r\n    API_USER_ANIME_ENTRY_STATUSES,\r\n    API_USER_ANIME_UPDATE_EPISODE,\r\n    API_USER_ANIME_FILTERS_PRESET,\r\n    API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_USER_MANGA_ENTRY,\r\n    API_USER_MANGA_ENTRY_NOID,\r\n    API_USER_MANGA_ENTRY_STATUSES,\r\n    API_USER_MANGA_UPDATE_CHAPTER,\r\n    API_USER_MANGA_UPDATE_VOLUME,\r\n    API_USER_MANGA_FILTERS_PRESET,\r\n    API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_CHANGE_CYBER_SOUND_STATUS,\r\n    API_ADD_TO_FAVORITES,\r\n    API_REMOVE_FROM_FAVORITES,\r\n    API_EDIT_USER_ABOUT_ME_BBCODE,\r\n    API_USER_EROGE_FILTERS_PRESET,\r\n    API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE,\r\n    API_SCRAPE_EPISODE_HISTORY_FROM_MAL,\r\n    API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES,\r\n    API_GET_USER_ACHIEVEMENTS,\r\n    API_IMPORT_MAL_XML_FOR_MANGA_LIST,\r\n    API_SET_ANIME_LIST_TO_PRIVATE,\r\n    API_SET_ANIME_LIST_TO_PUBLIC,\r\n    API_SET_ANIME_HISTORY_TO_PRIVATE,\r\n    API_SET_ANIME_HISTORY_TO_PUBLIC,\r\n    API_SET_MANGA_LIST_TO_PRIVATE,\r\n    API_SET_MANGA_LIST_TO_PUBLIC,\r\n    API_SET_MANGA_HISTORY_TO_PRIVATE, API_SET_MANGA_HISTORY_TO_PUBLIC\r\n} from \"./api_urls\";\r\nimport {\r\n    AUTH_USER,\r\n    CANCEL_USER_ACHIEVEMENTS_LOADING,\r\n    CANCEL_USER_LIST_LOADING,\r\n    CLEAR_USER_ACHIEVEMENTS,\r\n    CLEAR_USER_ANIME_ENTRY,\r\n    CLEAR_USER_MANGA_ENTRY,\r\n    FINISH_LOADING_USER_ENTRY,\r\n    FINISH_UPLOADING_FILE,\r\n    GET_ALL_USERS,\r\n    GET_ANIME_FILTER_PRESETS,\r\n    GET_EROGE_FILTER_PRESETS,\r\n    GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    GET_MANGA_FILTER_PRESETS, GET_PROFILE_PRIVACY_SETTINGS,\r\n    GET_USER_ACHIEVEMENTS,\r\n    GET_USER_ANIME_ENTRY,\r\n    GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n    GET_USER_LIST,\r\n    GET_USER_MANGA_ENTRY,\r\n    GET_VISITED_USER_ANIME_HISTORY,\r\n    GET_VISITED_USER_MANGA_HISTORY,\r\n    SET_ANIME_PRESET,\r\n    SET_EROGE_PRESET,\r\n    SET_MANGA_PRESET,\r\n    UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n    UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n    UPDATE_USER_ANIME_STATISTICS,\r\n    UPDATE_USER_LIST,\r\n    UPLOAD_ANIME_LIST_MAL_XML, UPLOAD_MANGA_LIST_MAL_XML,\r\n    UPLOADING_FILE,\r\n    USER_ACHIEVEMENTS_LOADING,\r\n    USER_ENTRY_LOADING,\r\n    USER_INFO_LOADING,\r\n    USER_LIST_LOADING,\r\n    USER_STATISTICS_LOADING\r\n} from \"./types\";\r\nimport store from \"../store\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\nimport {authUser, getUser, tokenConfig} from \"./auth\";\r\nimport {Alert} from \"../models\";\r\nimport {filterAnime, setAnimeFilterParams} from \"./anime\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {filterManga, setMangaFilterParams} from \"./manga\";\r\nimport {setErogeFilterParams} from \"./eroge\";\r\n\r\n\r\n// GET ALL USERS\r\nexport const getAllUsers = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_ALL_USERS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ALL_USERS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET FILTER PRESETS\r\nexport const getAnimeFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_ANIME_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE FILTER PRESET\r\nexport const saveAnimeFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_ANIME_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateAnimeFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setAnimeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteAnimeFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_ANIME_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_ANIME_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET MANGA FILTER PRESETS\r\nexport const getMangaFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_MANGA_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE MANGA FILTER PRESET\r\nexport const saveMangaFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_MANGA_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateMangaFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setMangaFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteMangaFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_MANGA_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_MANGA_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET FILTER PRESETS\r\nexport const getErogeFilterPresets = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_EROGE_FILTERS_PRESET, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// SAVE FILTER PRESET\r\nexport const saveErogeFilterPreset = (name, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    config.params['preset_name'] = name;\r\n\r\n    axios\r\n        .post(API_USER_EROGE_FILTERS_PRESET, null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset saved successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE FILTER PRESET\r\nexport const updateErogeFilterPreset = (id, filters) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setErogeFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .put(API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id), null, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset updated successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DELETE FILTER PRESET\r\nexport const deleteErogeFilterPreset = (id) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const config = {params: {}, headers: {'Content-Type': 'application/json'}};\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .delete(API_USER_EROGE_FILTERS_PRESET_UPDATE_OR_DELETE(id), config)\r\n        .then(res => {\r\n            dispatch(createMessage('Filter preset deleted successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_EROGE_FILTER_PRESETS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPLOAD COVER IMAGE AND UPDATE THE USER\r\nexport const updateUserProfileImage = (file, id) => (dispatch, getState) => {\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_CHANGE_USER_PROFILE_IMAGE, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Profile Image changed successfully!', Alert.type_success));\r\n            dispatch({type: FINISH_UPLOADING_FILE});\r\n            dispatch(getUser(id));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: FINISH_UPLOADING_FILE});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPLOAD XML FILE IN MAL FORMAT TO UPDATE THE ANIME LIST\r\nexport const importMalXmlForAnimeList = file => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    dispatch(createMessage('Importing Anime List..', Alert.type_info));\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_IMPORT_MAL_XML_FOR_ANIME_LIST, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Anime List imported successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: UPLOAD_ANIME_LIST_MAL_XML,\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        });\r\n};\r\n\r\n\r\n// UPLOAD XML FILE IN MAL FORMAT TO UPDATE THE MANGA LIST\r\nexport const importMalXmlForMangaList = file => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    dispatch(createMessage('Importing Manga List..', Alert.type_info));\r\n    dispatch({type: UPLOADING_FILE});\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    axios\r\n        .post(API_IMPORT_MAL_XML_FOR_MANGA_LIST, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Manga List imported successfully!', Alert.type_success));\r\n            dispatch({\r\n                type: UPLOAD_MANGA_LIST_MAL_XML,\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        });\r\n};\r\n\r\n\r\n// SCRAPE USER ANIME EPISODE HISTORY FROM MAL\r\nexport const scrapeEpisodeHistoryFromMal = (malhlogsessid, malsessionid) => (dispatch, getState) => {\r\n    const formData = new FormData();\r\n    console.log('MAL COOKIES:', malhlogsessid, malsessionid);\r\n    formData.append('MALHLOGSESSID', malhlogsessid);\r\n    formData.append('MALSESSIONID', malsessionid);\r\n\r\n    const config = tokenConfig(getState);\r\n\r\n    dispatch({type: USER_LIST_LOADING});\r\n\r\n    axios\r\n        .post(API_SCRAPE_EPISODE_HISTORY_FROM_MAL, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('The scraper has started successfully. This may last up to few hours ' +\r\n                'depending on your list size.', Alert.type_info));\r\n            dispatch({\r\n                type: GET_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_USER_LIST_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// EDIT USER'S BIO\r\nexport const editUserBio = (bio) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('bio', bio);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_BIO, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User bio changed successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// EDIT USER'S ABOUT ME BBCODE\r\nexport const editUserAboutMeBBCode = (bbcode) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    formData.append('bbcode', bbcode);\r\n\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    // If token, add to headers config\r\n    if (token) {\r\n        config.headers['Authorization'] = `Token ${token}`;\r\n    } else {\r\n        dispatch(returnErrors('Auth token not provided!', 0));\r\n    }\r\n\r\n    axios\r\n        .post(API_EDIT_USER_ABOUT_ME_BBCODE, formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('User About me BBCode changed successfully!', Alert.type_info));\r\n            dispatch(authUser());\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// GET USER LISTS\r\nexport const getUserList = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_GET_USER_LIST(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// ANIME USER ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// UPDATE & GET USER ANIME STATISTICS\r\nexport const updateAndGetUserAnimeStatistics = id => (dispatch, getState) => {\r\n    dispatch({type: USER_STATISTICS_LOADING});\r\n    axios\r\n        .get(API_UPDATE_AND_GET_USER_ANIME_STATISTICS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Stats updated!', Alert.type_success));\r\n            dispatch({\r\n                type: UPDATE_USER_ANIME_STATISTICS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            // if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            // else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET USER VISITED USER ANIME HISTORY\r\nexport const getVisitedUserAnimeHistory = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: USER_INFO_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    if (page && page !== 1) config.params = {'page': page};\r\n\r\n    axios\r\n        .get(API_GET_VISITED_USER_ANIME_HISTORY(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_VISITED_USER_ANIME_HISTORY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {});\r\n};\r\n\r\n\r\n// UPDATE USER ANIME STATISTICS\r\nexport const updateUserList = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_UPDATE_USER_LIST(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: UPDATE_USER_LIST,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET_USER_ACHIEVEMENTS\r\nexport const getUserAchievements = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ACHIEVEMENTS_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_USER_ACHIEVEMENTS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ACHIEVEMENTS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_USER_ACHIEVEMENTS_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// CLEAR_USER_ACHIEVEMENTS\r\nexport const clearUserAchievements = () => dispatch => {\r\n    dispatch({\r\n        type: CLEAR_USER_ACHIEVEMENTS,\r\n    })\r\n};\r\n\r\n\r\n// GET USER ANIME ENTRY\r\n/**\r\n * Pass the Anime ID corresponding to the user entry\r\n * @param id {Number} Anime ID\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const getUserAnimeEntry = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .get(API_USER_ANIME_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: CLEAR_USER_ANIME_ENTRY,\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// ADD/CREATE USER ANIME ENTRY\r\nexport const addAnimeEntry = entryInfo => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entryInfo);\r\n\r\n    axios\r\n        .post(API_USER_ANIME_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime added!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// INSTANT DROP AN ANIME\r\nexport const addAnimeEntryInstantDrop = (id) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    const body = JSON.stringify({\r\n        anime: id,\r\n        watched_episodes: 0,\r\n        start_date: new Date(),\r\n        finish_date: new Date(),\r\n        score: 0,\r\n        status: USER_ANIME_STATUSES.dropped,\r\n        times_watched: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rewatching: false,\r\n        rewatching_episode: 0,\r\n    });\r\n\r\n    axios\r\n        .post(API_USER_ANIME_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime dropped!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_ANIME_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE USER ANIME ENTRY\r\nexport const updateAnimeEntry = (id, entry_info, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entry_info);\r\n\r\n    axios\r\n        .put(API_USER_ANIME_ENTRY(id), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Entry updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_ANIME_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE ANIME EPISODE\r\nexport const updateAnimeEpisode = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .post(API_USER_ANIME_UPDATE_EPISODE(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Episode updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_ANIME_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// DELETE USER ANIME ENTRY\r\n/**\r\n *\r\n * @param {Number} id - ID of the anime\r\n * @param {Object} list\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const deleteAnimeEntry = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .delete(API_USER_ANIME_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Anime deleted', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: CLEAR_USER_ANIME_ENTRY,\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.anime_list_filters];\r\n                dispatch(filterAnime(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// DELETE USER ANIME ENTRY HISTORY\r\nexport const deleteAnimeHistoryEntry = (history_id, anime_id) => (dispatch, getState) => {\r\n\r\n    axios\r\n        .delete(API_DELETE_ANIME_HISTORY_ENTRY(history_id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('History entry deleted!', Alert.type_success));\r\n            dispatch(getUserAnimeEntry(anime_id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// MANGA USER ACTIONS //////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// GET USER VISITED USER MANGA HISTORY\r\nexport const getVisitedUserMangaHistory = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: USER_INFO_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    if (page && page !== 1) config.params = {'page': page};\r\n\r\n    axios\r\n        .get(API_GET_VISITED_USER_MANGA_HISTORY(id), config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_VISITED_USER_MANGA_HISTORY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {});\r\n};\r\n\r\n\r\n// GET USER MANGA ENTRY\r\n/**\r\n * Pass the Manga ID corresponding to the user entry\r\n * @param id {Number} Manga ID\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const getUserMangaEntry = id => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    axios\r\n        .get(API_USER_MANGA_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: CLEAR_USER_MANGA_ENTRY,\r\n            });\r\n        });\r\n};\r\n\r\n\r\n// ADD/CREATE USER MANGA ENTRY\r\nexport const addMangaEntry = entryInfo => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entryInfo);\r\n\r\n    axios\r\n        .post(API_USER_MANGA_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga added!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// INSTANT DROP A MANGA\r\nexport const addMangaEntryInstantDrop = (id) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n\r\n    const initial_values = {\r\n        manga: id,\r\n        read_volumes: 0,\r\n        read_chapters: 0,\r\n        start_date: new Date(),\r\n        finish_date: new Date(),\r\n        score: 0,\r\n        status: USER_MANGA_STATUSES.dropped,\r\n        times_read: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rereading: false,\r\n        rereading_volume: 0,\r\n        rereading_chapter: 0,\r\n        errors: false\r\n    };\r\n    const body = JSON.stringify(initial_values);\r\n\r\n    axios\r\n        .post(API_USER_MANGA_ENTRY_NOID, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga dropped!', Alert.type_success));\r\n            dispatch({\r\n                type: GET_USER_MANGA_ENTRY,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE USER MANGA ENTRY\r\nexport const updateMangaEntry = (id, entry_info, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    const body = JSON.stringify(entry_info);\r\n\r\n    axios\r\n        .put(API_USER_MANGA_ENTRY(id), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Entry updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE MANGA VOLUME\r\nexport const updateMangaVolume = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .post(API_USER_MANGA_UPDATE_VOLUME(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Volume updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// UPDATE MANGA CHAPTER\r\nexport const updateMangaChapter = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .post(API_USER_MANGA_UPDATE_CHAPTER(id), null, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Chapter updated!', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: GET_USER_MANGA_ENTRY,\r\n                    payload: res.data\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: FINISH_LOADING_USER_ENTRY,\r\n                });\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n// DELETE USER MANGA ENTRY\r\n/**\r\n *\r\n * @param {Number} id - ID of the Manga\r\n * @param {Object} list\r\n * @returns {function(*, *=): void}\r\n */\r\nexport const deleteMangaEntry = (id, list) => (dispatch, getState) => {\r\n    dispatch({type: USER_ENTRY_LOADING});\r\n    axios\r\n        .delete(API_USER_MANGA_ENTRY(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Manga deleted', Alert.type_success));\r\n            if (isEmpty(list)) {\r\n                dispatch({\r\n                    type: CLEAR_USER_MANGA_ENTRY,\r\n                });\r\n            } else {\r\n                let filters = store.getState()[store_reducers.cookies][store_reducer_cookies.manga_list_filters];\r\n                dispatch(filterManga(1, filters, null, list, false))\r\n            }\r\n            dispatch({\r\n                type: UPDATE_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: id\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\n// DELETE USER MANGA ENTRY HISTORY VOLUME/CHAPTER\r\nexport const deleteMangaVolumeChapterHistoryEntry = (history_id, manga_id, type) => (dispatch, getState) => {\r\n    let url = API_DELETE_MANGA_VOLUME_HISTORY_ENTRY(history_id);\r\n\r\n    if (type === 'chapter')\r\n        url = API_DELETE_MANGA_CHAPTER_HISTORY_ENTRY(history_id);\r\n\r\n    axios\r\n        .delete(url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('History entry deleted!', Alert.type_success));\r\n            dispatch(getUserMangaEntry(manga_id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        });\r\n};\r\n\r\n\r\nexport const setSelectedAnimePreset = (preset) => {\r\n    return {\r\n        type: SET_ANIME_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\nexport const setSelectedMangaPreset = (preset) => {\r\n    return {\r\n        type: SET_MANGA_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\nexport const setSelectedErogePreset = (preset) => {\r\n    return {\r\n        type: SET_EROGE_PRESET,\r\n        payload: preset\r\n    };\r\n};\r\n\r\n\r\n// GET LOGGED IN USER ANIME ENTRY STATUSES\r\nexport const getLoggedInUserAnimeEntryStatuses = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_ANIME_ENTRY_STATUSES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_LOGGED_IN_USER_ANIME_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET LOGGED IN USER ANIME ENTRY STATUSES\r\nexport const getLoggedInUserMangaEntryStatuses = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_USER_MANGA_ENTRY_STATUSES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_LOGGED_IN_USER_MANGA_ENTRY_STATUSES,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// MUTE/UNMUTE USER THEME SOUNDS\r\nexport const muteUnmuteThemeSounds = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_CHANGE_CYBER_SOUND_STATUS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: AUTH_USER,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// ADD TO FAVORITES\r\nexport const addToFavorites = (branch, id) => (dispatch, getState) => {\r\n    let body = {'title_id': id};\r\n\r\n    axios\r\n        .post(API_ADD_TO_FAVORITES(branch), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} added to favorites`, Alert.type_success));\r\n            dispatch(authUser())\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// ADD TO FAVORITES\r\nexport const removeFromFavorites = (branch, id) => (dispatch, getState) => {\r\n    let body = {'title_id': id};\r\n\r\n    axios\r\n        .post(API_REMOVE_FROM_FAVORITES(branch), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} removed from favorites`, Alert.type_success));\r\n            dispatch(authUser())\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// GET USER EPISODE HISTORY SCRAPER PROGRESS\r\nexport const getUserEpisodeHistoryScraperProgress = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_EPISODE_HISTORY_SCRAPER_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FIX USER START AND FINISH DATE FOR ANIME ENTRIES\r\nexport const fixUserStartAndFinishDateForAnimeEntries = () => (dispatch, getState) => {\r\n    axios\r\n        .get(API_FIX_USER_START_FINISHED_DATE_FOR_ANIME_ENTRIES, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Fixing completed.', Alert.type_success))\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER ANIME LIST PRIVACY\r\nexport const updateUserAnimeListPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_ANIME_LIST_TO_PRIVATE : API_SET_ANIME_LIST_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Anime List has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER ANIME HISTORY PRIVACY\r\nexport const updateUserAnimeHistoryPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_ANIME_HISTORY_TO_PRIVATE : API_SET_ANIME_HISTORY_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Anime History has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER MANGA LIST PRIVACY\r\nexport const updateUserMangaListPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_MANGA_LIST_TO_PRIVATE : API_SET_MANGA_LIST_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Manga List has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// UPDATE USER MANGA HISTORY PRIVACY\r\nexport const updateUserMangaHistoryPrivacy = (to_private) => (dispatch, getState) => {\r\n    const api_url = to_private ? API_SET_MANGA_HISTORY_TO_PRIVATE : API_SET_MANGA_HISTORY_TO_PUBLIC;\r\n    const text = to_private ? 'private' : 'public';\r\n    axios\r\n        .get(api_url, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`Manga History has been set to ${text}.`, Alert.type_success));\r\n            dispatch({\r\n                type: GET_PROFILE_PRIVACY_SETTINGS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n","import React, { Component } from 'react';\r\n\r\n// https://bbbootstrap.com/snippets/circle-loader-63353068 BETTER LOADING!!!\r\n\r\nimport '../../../assets/css/layout.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass Loading extends Component {\r\n    static propTypes = {\r\n        /** String that will be displayed below the img */\r\n        text: PropTypes.string,\r\n        /** Removes all text */\r\n        no_text: PropTypes.bool,\r\n        /** Used for width and height for the img in pixels */\r\n        size: PropTypes.number,\r\n        /** Used for calculating the top and bottom offset of the container */\r\n        offset: PropTypes.number,\r\n        /** Applies a css class to the container to remove the relative position */\r\n        block: PropTypes.bool,\r\n    };\r\n\r\n    render() {\r\n        const {text, size, offset, block, no_text} = this.props;\r\n\r\n        return (\r\n            <div className={block ? 'triangle-loader triangle-loader-initial' : 'triangle-loader'}\r\n                 style={offset ? {height: `calc(100vh - ${offset}px)`} : null}>\r\n                <div className=\"triangle-loader-svg\">\r\n                    <svg id=\"triangle\" width={size ? size : '160'} height={size ? size : '160'} viewBox=\"-3 -4 39 39\">\r\n                        <polygon fill=\"transparent\" stroke=\"cyan\" strokeWidth=\"1\" points=\"16,0 32,32 0,32\"/>\r\n                    </svg>\r\n                    {!no_text ? text ? text.toUpperCase() : 'LOADING' : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ANIME_GENRES} from \"../../../globals\";\r\n\r\n/**\r\n * Cyber-Genesis version of the Button component from Material-ui\r\n * @param props.classNames {String}\r\n * @param props.variant {String}\r\n * @param props.component {String}\r\n * @param props.color {String}\r\n * @param props.type {String}\r\n * @param props.disabled {Boolean}\r\n * @param props.title {String}\r\n * @param props.onClick {Function}\r\n * @param props.children {JSX.Element}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CyberButton(props) {\r\n    const {classNames, variant, component, color, type, disabled, title, onClick, children} = props;\r\n    return <Button type={type} component={component} variant={variant} color={color} className={classNames} onMouseEnter={playHoverSound}\r\n                   disabled={disabled} title={title}\r\n                   onClick={() => {\r\n                       playClickSound();\r\n                       if (onClick) onClick()\r\n                   }}>\r\n        {children}\r\n    </Button>\r\n}\r\n\r\n/**\r\n * Cyber-Genesis version of the Link component from Material-ui\r\n * @param props.classNames {Object}\r\n * @param props.to {Object}\r\n * @param props.children {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function CyberLink(props) {\r\n    const {classNames, to, children} = props;\r\n    return <Link to={to} className={classNames} onMouseEnter={playHoverSound} onClick={playClickSound}>\r\n        {children}\r\n    </Link>\r\n}\r\n\r\n/**\r\n *\r\n * @param props.src {string} Src of the image.\r\n * @param props.alt {string} Alt of the image.\r\n * @param props.className {string} Additional classes for the image.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function PreLoadImage(props) {\r\n    const {className, src, alt} = props;\r\n\r\n    const [loaded, setLoaded] = React.useState(false);\r\n\r\n    return <>\r\n        <img src={src}\r\n             className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n             onLoad={() => {setLoaded(true)}}\r\n        />\r\n        <img className={loaded ? className ? `fade-in ${className}` : 'fade-in' : className ? `before-fade-in ${className}` : 'before-fade-in'}\r\n             src={src} alt={alt ? alt : 'Image'}\r\n        />\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function LoadGifs(props) {\r\n    console.log('loading gifs');\r\n    return <div style={{position: 'absolute', opacity: 0, height: 0}}>\r\n        {ANIME_GENRES.map(genre => (\r\n            <img style={{position: 'absolute', opacity: 0, height: 0}} src={`/images/genre_icons/${genre}.gif`}/>\r\n        ))}\r\n    </div>\r\n}","import {\r\n    ANIME_LOADING,\r\n    CANCEL_CHARACTERS_LOADING,\r\n    CANCEL_PEOPLE_LOADING,\r\n    CHARACTERS_LOADING,\r\n    FILTER_CHARACTERS,\r\n    FILTER_PEOPLE,\r\n    GET_ALL_CHARACTERS_FOR_ANIME, GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    GET_PERSON, GET_PUBLISHED_MANGA_FOR_PERSON, GET_VOICE_ACTOR_ROLES_FOR_PERSON, MANGA_LOADING,\r\n    PEOPLE_LOADING\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\nimport {\r\n    API_FILTER_PEOPLE,\r\n    API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n    API_GET_ONE_PERSON, API_GET_PUBLISHED_MANGA_FOR_PERSON,\r\n    API_GET_VOICE_ACTOR_ROLES_FOR_PERSON\r\n} from \"./api_urls\";\r\nimport {returnErrors} from \"./messages\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {isEmpty} from \"../components/functions\";\r\nimport {setCookieCharactersFilters, setCookiePeopleFilters} from \"./cookies\";\r\nimport {CharactersFilterNames, PeopleFilterNames} from \"../components/layout/filters/field_names\";\r\nimport {cancelAnimeLoading} from \"./anime\";\r\nimport {cancelCharactersLoading} from \"./characters\";\r\nimport {cancelMangaLoading} from \"./manga\";\r\nimport {MANGA_ORDERINGS} from \"../globals\";\r\n\r\n\r\n// GET A ONE PERSON\r\nexport const getPerson = id => (dispatch, getState) => {\r\n    dispatch({type: PEOPLE_LOADING});\r\n    axios\r\n        .get(API_GET_ONE_PERSON(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET VOICE ACTOR ROLES (CHARACTERS) FOR PERSON\r\nexport const getVoiceActorRolesForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: CHARACTERS_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_VOICE_ACTOR_ROLES_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelCharactersLoading());\r\n            dispatch({\r\n                type: GET_VOICE_ACTOR_ROLES_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET ANIME STAFF POSITIONS (ANIME) FOR PERSON\r\nexport const getAnimeStaffPositionsForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: ANIME_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_ANIME_STAFF_POSITIONS_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelAnimeLoading());\r\n            dispatch({\r\n                type: GET_ANIME_STAFF_POSITIONS_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// GET PUBLISHED MANGA (MANGA) FOR PERSON\r\nexport const getPublishedMangaForPerson = (id, page) => (dispatch, getState) => {\r\n    dispatch({type: MANGA_LOADING});\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n\r\n    axios\r\n        .get(API_GET_PUBLISHED_MANGA_FOR_PERSON(id), config)\r\n        .then(res => {\r\n            dispatch(cancelMangaLoading());\r\n            dispatch({\r\n                type: GET_PUBLISHED_MANGA_FOR_PERSON,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// FILTER ALL PEOPLE\r\nexport const filterPeople = (page, filters, no_loading) => (dispatch, getState) => {\r\n    dispatch({type: PEOPLE_LOADING});\r\n\r\n    let config = tokenConfig(getState);\r\n    config.params = {};\r\n    if (page && page !== 1) config.params['page'] = page;\r\n    if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n        config.params = setPeopleFilterParams(config.params, filters);\r\n\r\n    axios\r\n        .get(API_FILTER_PEOPLE, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: FILTER_PEOPLE,\r\n                payload: res.data\r\n            });\r\n            if (filters !== undefined && filters !== 'undefined' && !isEmpty(filters))\r\n                dispatch(setCookiePeopleFilters(filters))\r\n        })\r\n        .catch(err => {\r\n            dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\nexport function setPeopleFilterParams(params, filters) {\r\n    if (filters[PeopleFilterNames.search] && typeof filters[PeopleFilterNames.search] == 'string')\r\n        params[PeopleFilterNames.search] = filters[PeopleFilterNames.search];\r\n    if (filters[PeopleFilterNames.ordering])\r\n        params[PeopleFilterNames.ordering] = filters[PeopleFilterNames.ordering];\r\n    return params\r\n}\r\n","import axios from 'axios';\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA, BRANCH_PEOPLE} from \"../globals\";\r\nimport {getAnime} from \"./anime\";\r\nimport {createMessage, returnErrors} from \"./messages\";\r\nimport store from \"../store\";\r\nimport {getUserAnimeEntry, getUserMangaEntry} from \"./users\";\r\nimport {\r\n    API_ADD_ANIME_TO_SERVER, API_GET_NEWS, API_OPEN_ANIME_FOLDER, API_OPEN_EROGE_FOLDER,\r\n    API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS,\r\n    API_REQUIEM_DOWNLOAD_ANIME_TORRENT, API_REQUIEM_GET_STORAGE_INFO, API_REQUIEM_GET_TORRENT_PROGRESS,\r\n    API_REQUIEM_UPDATE_ANIME_MAL,\r\n    API_REQUIEM_UPDATE_CHARACTER_MAL,\r\n    API_REQUIEM_UPDATE_EROGE_HENTAIGAMER,\r\n    API_REQUIEM_UPDATE_MANGA_MAL, API_REQUIEM_UPDATE_PERSON_MAL, API_UPDATE_ANIME_TO_SERVER\r\n} from \"./api_urls\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {Alert, Anime} from \"../models\";\r\nimport {getManga} from \"./manga\";\r\nimport {getCharacter} from \"./characters\";\r\nimport {getEroge} from \"./eroge\";\r\nimport {\r\n    ANIME_LOADING,\r\n    CANCEL_ANIME_LOADING, CANCEL_CHARACTERS_LOADING, CANCEL_EROGE_LOADING,\r\n    CANCEL_MANGA_LOADING, CANCEL_PEOPLE_LOADING,\r\n    CHARACTERS_LOADING, DOWNLOAD_TORRENT,\r\n    EROGE_LOADING, GET_NEWS, GET_STORAGE_INFO, GET_TORRENT_PROGRESS,\r\n    MANGA_LOADING, NEWS_LOADING, PEOPLE_LOADING, REQUIEM_LOADING\r\n} from \"./types\";\r\nimport {getPerson} from \"./people\";\r\n\r\n\r\nfunction scrapeUpdateTitleApiUrl(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return API_REQUIEM_UPDATE_ANIME_MAL(id);\r\n        case BRANCH_MANGA:\r\n            return API_REQUIEM_UPDATE_MANGA_MAL(id);\r\n        case BRANCH_CHARACTERS:\r\n            return API_REQUIEM_UPDATE_CHARACTER_MAL(id);\r\n        case BRANCH_PEOPLE:\r\n            return API_REQUIEM_UPDATE_PERSON_MAL(id);\r\n        case BRANCH_EROGE:\r\n            return API_REQUIEM_UPDATE_EROGE_HENTAIGAMER(id);\r\n        default:\r\n            return ''\r\n    }\r\n}\r\n\r\n\r\n// SCRAPE UPDATE SINGLE TITLE\r\nexport const scrapeUpdateTitle = (id, branch) => (dispatch, getState) => {\r\n    if (branch === BRANCH_ANIME)\r\n        dispatch({type: ANIME_LOADING});\r\n    else if (branch === BRANCH_MANGA)\r\n        dispatch({type: MANGA_LOADING});\r\n    else if (branch === BRANCH_CHARACTERS)\r\n        dispatch({type: CHARACTERS_LOADING});\r\n    else if (branch === BRANCH_EROGE)\r\n        dispatch({type: EROGE_LOADING});\r\n    else if (branch === BRANCH_PEOPLE)\r\n        dispatch({type: PEOPLE_LOADING});\r\n    else return;\r\n\r\n    axios\r\n        .get(scrapeUpdateTitleApiUrl(branch, id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage(`${branch} Scraped & Updated`, Alert.type_success));\r\n            if (branch === BRANCH_ANIME) dispatch(getAnime(id));\r\n            else if (branch === BRANCH_MANGA) dispatch(getManga(id));\r\n            else if (branch === BRANCH_CHARACTERS) dispatch(getCharacter(id));\r\n            else if (branch === BRANCH_EROGE) dispatch(getEroge(id));\r\n            else if (branch === BRANCH_PEOPLE) dispatch(getPerson(id));\r\n        })\r\n        .catch(err => {\r\n            if (branch === BRANCH_ANIME)\r\n                dispatch({type: CANCEL_ANIME_LOADING});\r\n            else if (branch === BRANCH_MANGA)\r\n                dispatch({type: CANCEL_MANGA_LOADING});\r\n            else if (branch === BRANCH_CHARACTERS)\r\n                dispatch({type: CANCEL_CHARACTERS_LOADING});\r\n            else if (branch === BRANCH_EROGE)\r\n                dispatch({type: CANCEL_EROGE_LOADING});\r\n            else if (branch === BRANCH_PEOPLE)\r\n                dispatch({type: CANCEL_PEOPLE_LOADING});\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET STORAGE INFO\r\nexport const getStorageInfo = () => (dispatch, getState) => {\r\n    dispatch({type: REQUIEM_LOADING});\r\n    axios\r\n        .get(API_REQUIEM_GET_STORAGE_INFO, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_STORAGE_INFO,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// DOWNLOAD TORRENT\r\nexport const downloadTorrent = (id, data) => (dispatch, getState) => {\r\n    const token = getState().auth.token;\r\n    const formData = new FormData();\r\n    for (let x = 0; x < data['files'].length; x++) formData.append('file-' + x, data['files'][x]);\r\n    formData.append('disk', data['disk']);\r\n    formData.append('magnet', data['magnet']);\r\n    formData.append('extra_ids', data['extra_ids']);\r\n    formData.append('extract_subs', data['extract_subs']);\r\n    formData.append('additional_info', data['additional_info']);\r\n\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    if (token) config.headers['Authorization'] = `Token ${token}`;\r\n\r\n    axios\r\n        .post(API_REQUIEM_DOWNLOAD_ANIME_TORRENT(id), formData, config)\r\n        .then(res => {\r\n            dispatch(createMessage('Torrent is downloading', Alert.type_success));\r\n            dispatch(getAnime(id));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// DELETE ANIME_SERVE_INFO AND ITS TORRENTS\r\nexport const deleteAnimeServerInfoAndTorrents = (id) => (dispatch, getState) => {\r\n    let config = tokenConfig(getState);\r\n    config['headers']['withCredentials'] = true;\r\n\r\n    axios\r\n        .get(API_REQUIEM_DELETE_ANIME_SERVER_INFO_AND_TORRENTS(id), config)\r\n        .then(res => {\r\n            dispatch(getAnime(id))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET TORRENT PROGRESS INFO\r\nexport const getTorrentProgress = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_REQUIEM_GET_TORRENT_PROGRESS(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_TORRENT_PROGRESS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n        })\r\n};\r\n\r\n\r\n// ADD ANIME TO SERVER\r\nexport const addAnimeToServer = animeInfo => (dispatch, getState) => {\r\n    const body = JSON.stringify(animeInfo);\r\n\r\n    axios\r\n        .post(API_ADD_ANIME_TO_SERVER, body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('The Anime has been added to the server', Alert.type_success));\r\n            dispatch(getAnime(animeInfo['anime']))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// UPDATE ANIME TO SERVER\r\nexport const updateAnimeToServer = animeInfo => (dispatch, getState) => {\r\n    const body = JSON.stringify(animeInfo);\r\n\r\n    axios\r\n        .put(API_UPDATE_ANIME_TO_SERVER(animeInfo['anime']), body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('The Anime Server Info has been updated successfully!', Alert.type_success));\r\n            dispatch(getAnime(animeInfo['anime']))\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// GET NEWS\r\nexport const getNews = (page) => (dispatch, getState) => {\r\n    dispatch({type: NEWS_LOADING});\r\n    let config = tokenConfig(getState);\r\n    if (page) if (page !== 1) config.params = {'page': page};\r\n\r\n\r\n    axios\r\n        .get(API_GET_NEWS, config)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_NEWS,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};\r\n\r\n\r\n// OPEN ANIME FOLDER\r\nexport const openAnimeFolder = id => (dispatch, getState) => {\r\n    axios\r\n        .get(API_OPEN_ANIME_FOLDER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Folder opened', Alert.type_info));\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n\r\n\r\n// OPEN EROGE FOLDER\r\nexport const openErogeFolder = id => (dispatch, getState) => {\r\n\r\n    axios\r\n        .get(API_OPEN_EROGE_FOLDER(id), tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch(createMessage('Folder opened', Alert.type_info));\r\n        })\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n        })\r\n};","import moment from \"moment\";\r\nimport {\r\n    faArrowDown,\r\n    faArrowUp,\r\n    faBan,\r\n    faClock, faDownload, faHdd, faInfinity,\r\n    faPause, faPuzzlePiece,\r\n    faSpinner, faUpload, faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\n\r\nexport function getBytesToSize(size) {\r\n    const terabyte = 1099511627776;\r\n    const gigabyte = 1073741824;\r\n    const megabyte = 1048576;\r\n\r\n    if (size >= 10995116277760)  // More than 10TB\r\n        return `${(size / terabyte).toFixed(1)}TB`;\r\n    else if (size >= 1099511627776)  // More than 1TB\r\n        return `${(size / terabyte).toFixed(2)}TB`;\r\n    else if (size >= 107374182400) // More than 100GB\r\n        return `${Math.ceil(size / gigabyte)}GB`;\r\n    else if (size >= 10737418240) // More than 10GB\r\n        return `${(size / gigabyte).toFixed(1)}GB`;\r\n    else if (size >= 1073741824) // More than 1GB\r\n        return `${(size / gigabyte).toFixed(2)}GB`;\r\n    else  // Less then 1GB\r\n        return `${Math.ceil(size / megabyte)}MB`;\r\n}\r\n\r\n\r\nexport function getTime(sec) {\r\n    let hrs = Math.floor(sec / 3600);\r\n    let min = Math.floor((sec - (hrs * 3600)) / 60);\r\n    let seconds = sec - (hrs * 3600) - (min * 60);\r\n    seconds = Math.round(seconds * 100) / 100;\r\n\r\n    let result = (hrs < 10 ? \"0\" + hrs : hrs);\r\n    result += \":\" + (min < 10 ? \"0\" + min : min);\r\n    result += \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\r\n    return result;\r\n}\r\n\r\n\r\nexport function getProgress(progress) {\r\n    return (progress * 100).toFixed(1);\r\n}\r\n\r\n\r\nexport function getSpeed(speed) {\r\n    if (speed < 1000000) return `${(speed / 1024.0).toFixed(1)}Kb/s`;\r\n    else return `${(speed / (1024 * 1024.0)).toFixed(1)}Mb/s`;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.torrent {Object}\r\n * @param props.filters {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TorrentProgressInfo(props) {\r\n    const {torrent, filters} = props;\r\n    let days = parseInt(moment.utc(torrent['eta'] * 1000).format('DDD')) - 1;\r\n    let hours = parseInt(moment.utc(torrent['eta'] * 1000).format('HH'));\r\n    let minutes = parseInt(moment.utc(torrent['eta'] * 1000).format('mm'));\r\n    let eta_str = '';\r\n    let status_icon;\r\n\r\n    if (days > 0) eta_str += `${days}d `;\r\n    if (hours > 0) eta_str += `${hours}h `;\r\n    if (minutes > 0) eta_str += `${minutes}m`;\r\n\r\n    if (torrent['torrent_status'].indexOf('downloading') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowDown}/>;\r\n    else if (torrent['torrent_status'].indexOf('forcedDL') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowDown}/>;\r\n    else if (torrent['torrent_status'].indexOf('upload') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faArrowUp}/>;\r\n    else if (torrent['torrent_status'].indexOf('pause') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faPause}/>;\r\n    else if (torrent['torrent_status'].indexOf('check') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faSpinner} title=\"Checking\"/>;\r\n    else if (torrent['torrent_status'].indexOf('stall') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faBan} title=\"Stalled\"/>;\r\n    else if (torrent['torrent_status'].indexOf('queued') >= 0)\r\n        status_icon = <FontAwesomeIcon icon={faClock} title=\"Queued\"/>;\r\n    else\r\n        status_icon = <span className=\"margin-left-10\">{torrent['torrent_status']}</span>;\r\n\r\n    return filters['name'] ?\r\n        <tbody className=\"torrent-info-container\">\r\n        <tr>\r\n            <td>\r\n                {torrent['name'].replace('[NotAdded]', '')}\r\n            </td>\r\n            {filters['size'] ? <td>\r\n                <FontAwesomeIcon icon={faHdd}/>\r\n                <span className=\"color-secondary\">{getBytesToSize(torrent['size'])}</span>\r\n            </td> : null}\r\n            <td>\r\n                {status_icon} <span className=\"color-secondary\">{getProgress(torrent['progress'])}%</span>\r\n            </td>\r\n            {filters['dl_speed'] ? <td>\r\n                            <span><FontAwesomeIcon icon={faDownload}/>{' '}\r\n                                <span className={torrent['dl_speed'] > 0 ? 'color-secondary' : null}>\r\n                                {getSpeed(torrent['dl_speed'])}</span></span>\r\n            </td> : null}\r\n            {filters['up_speed'] ? <td>\r\n                            <span><FontAwesomeIcon icon={faUpload}/>{' '}\r\n                                <span className={torrent['up_speed'] > 0 ? 'color-secondary' : null}>\r\n                                {getSpeed(torrent['up_speed'])}</span></span>\r\n            </td> : null}\r\n            {filters['remaining'] ? <td>\r\n                <FontAwesomeIcon icon={faPuzzlePiece} title=\"Remaining\"/>{' '}\r\n                <span className=\"color-secondary\">{getBytesToSize(torrent['amount_left'])}</span>\r\n            </td> : null}\r\n            {filters['seeds'] ? <td>\r\n                <FontAwesomeIcon icon={faUsers} className=\"color-green\"/>{' '}\r\n                <span className=\"color-secondary\">{torrent['num_seeds']}</span>\r\n            </td> : null}\r\n            {filters['leechs'] ? <td>\r\n                <FontAwesomeIcon icon={faUsers} className=\"color-danger\"/>{' '}\r\n                <span className=\"color-secondary\">{torrent['num_leechs']}</span>\r\n            </td> : null}\r\n            {filters['eta'] ? <td>\r\n                <FontAwesomeIcon icon={faClock}/>{' '}\r\n                <span className=\"color-secondary\">{torrent['eta'] < 8640000 ? eta_str :\r\n                    <FontAwesomeIcon icon={faInfinity}/>}</span>\r\n            </td> : null}\r\n        </tr>\r\n        <tr>\r\n            <td className=\"padding-bottom-10\" colSpan=\"20\">\r\n                <LinearProgress variant=\"determinate\" color=\"secondary\" value={getProgress(torrent['progress'])}/>\r\n            </td>\r\n        </tr>\r\n        </tbody> :\r\n        <div className=\"torrent-info-container\">\r\n            <div>\r\n                <p className=\"color-secondary-dark\">\r\n                    {filters['name'] ? <span className=\"torrent-info\">\r\n                    {torrent['name'].replace('[NotAdded]', '')}\r\n                </span> : null}\r\n\r\n                    {filters['size'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faHdd}/>{' '}\r\n                        <span>{getBytesToSize(torrent['size'])}</span>\r\n                </span> : null}\r\n\r\n                    <span className=\"torrent-info\">{status_icon} {getProgress(torrent['progress'])}%</span>\r\n\r\n                    {filters['dl_speed'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faDownload}/>{' '}\r\n                        <span className={torrent['dl_speed'] > 0 ? 'color-secondary' : null}>\r\n                        {getSpeed(torrent['dl_speed'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['up_speed'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUpload}/>{' '}\r\n                        <span className={torrent['up_speed'] > 0 ? 'color-secondary' : null}>\r\n                        {getSpeed(torrent['up_speed'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['remaining'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faPuzzlePiece} title=\"Remaining\"/>{' '}\r\n                        <span>{getBytesToSize(torrent['amount_left'])}</span>\r\n                </span> : null}\r\n\r\n                    {filters['seeds'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUsers} className=\"color-green\"/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['num_seeds']}</span>\r\n                </span> : null}\r\n                    {filters['leechs'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faUsers} className=\"color-danger\"/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['num_leechs']}</span>\r\n                </span> : null}\r\n\r\n                    {filters['eta'] ? <span className=\"torrent-info\">\r\n                        <FontAwesomeIcon icon={faClock}/>{' '}\r\n                        <span className=\"color-secondary\">{torrent['eta'] < 8640000 ? eta_str :\r\n                            <FontAwesomeIcon icon={faInfinity}/>}</span>&nbsp;\r\n                </span> : null}\r\n                </p>\r\n            </div>\r\n            <LinearProgress variant=\"determinate\" color=\"secondary\" value={getProgress(torrent['progress'])}/>\r\n        </div>;\r\n}","import * as Yup from \"yup\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {Form, Formik} from \"formik\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function GoToPageDialog(props) {\r\n    const {open, current_page, total_pages, onClose, goToPage} = props;\r\n\r\n    const GoToPageSchema = Yup.object().shape({\r\n        page_number: Yup.number()\r\n            .min(1, \"Page number must be above 1.\")\r\n            .max(total_pages, `Page number can't exceed the last page ${total_pages}.`)\r\n            .required('Required'),\r\n    });\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"go-to-page-dialog-title\" open={open}>\r\n            <div className=\"go-to-page-dialog\">\r\n                <DialogTitle id=\"go-to-page-dialog-title\">Go to page</DialogTitle>\r\n\r\n                <Formik\r\n                    initialValues={{page_number: current_page}}\r\n                    validationSchema={GoToPageSchema}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        goToPage(values.page_number);\r\n                        onClose();\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({isSubmitting, errors, touched, values, handleChange, handleBlur}) => (\r\n                        <Form className=\"content-container\">\r\n                            <TextField\r\n                                label=\"Page\"\r\n                                type=\"number\"\r\n                                name=\"page_number\"\r\n                                value={values.page_number}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                error={errors.page_number && touched.page_number}\r\n                                helperText={(errors.page_number && touched.page_number) && errors.page_number}/>\r\n                            <CyberButton color=\"primary\" type=\"submit\" variant=\"contained\"\r\n                                         disabled={isSubmitting}>Go</CyberButton>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Moment from 'react-moment'\r\n\r\nimport {getNews} from '../../../actions/requiem'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {getTime} from \"./snippets\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass News extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getNews();\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.news[ApiResult.count] / 5)) {\r\n            this.setState({current_page: page});\r\n            this.props.getNews(page);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {news, news_is_loading} = this.props;\r\n        let news_results = [];\r\n\r\n        try {\r\n            if (news['results'].length > 0) news_results = news['results'];\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <Grid id=\"News-Container\" container>\r\n                {!news_is_loading ?\r\n                    news_results.map((post, i) => (\r\n                        <Grid item xs={12} className=\"report box-light\" key={i}>\r\n                            <h3 className=\"color-blue\">{post['title']}</h3>\r\n                            <p className=\"color-dark-blue indent-1em\">{post['description']}</p>\r\n                            {post['anime_entries'].length > 0 ?\r\n                                <p className=\"color-dark-blue\">Total <span className={post['title']\r\n                                    .indexOf('removed') >= 0 ? 'color-red' : 'color-blue'}>\r\n                                            {post['anime_entries'].length}</span></p>\r\n                                : post['anime_server_entries'].length > 0 ?\r\n                                    <p className=\"color-dark-blue\">Total <span className=\"color-magenta\">\r\n                                                {post['anime_server_entries'].length}</span></p>\r\n                                    : post['manga_entries'].length > 0 ?\r\n                                        <p className=\"color-dark-blue\">Total <span className={post['title']\r\n                                            .indexOf('removed') >= 0 ? 'color-red' : 'color-blue'}>\r\n                                                    {post['manga_entries'].length}</span></p>\r\n                                        : post['manga_server_entries'].length > 0 ?\r\n                                            <p className=\"color-dark-blue\">Total&nbsp;\r\n                                                <span className=\"color-magenta\">\r\n                                                            {post['manga_server_entries'].length}</span></p>\r\n                                            : post['characters_entries'].length > 0 ?\r\n                                                <p className=\"color-dark-blue\">\r\n                                                    Total <span className={post['title']\r\n                                                    .indexOf('removed') >= 0 ? 'color-red'\r\n                                                    : 'color-blue'}>\r\n                                                            {post['characters_entries'].length}</span></p>\r\n                                                : null}\r\n                            {/*{post['anime_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['anime_entries']} branch={BRANCH_TYPE_ANIME}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    server={false}/> : null}*/}\r\n                            {/*{post['anime_server_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['anime_server_entries']}*/}\r\n                            {/*                    branch={BRANCH_TYPE_ANIME} server={true}/> : null}*/}\r\n                            {/*{post['manga_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['manga_entries']} branch={BRANCH_TYPE_MANGA}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    server={false}/> : null}*/}\r\n                            {/*{post['manga_server_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['manga_server_entries']}*/}\r\n                            {/*                    branch={BRANCH_TYPE_MANGA} server={true}/> : null}*/}\r\n                            {/*{post['characters_entries'] ?*/}\r\n                            {/*    <DisplayEntries entries={post['characters_entries']}*/}\r\n                            {/*                    deleted={post['title'].indexOf('removed') >= 0}*/}\r\n                            {/*                    branch={BRANCH_TYPE_CHARACTERS} server={false}/> : null}*/}\r\n                            <div className=\"duration\">\r\n                                <p className=\"color-dark-blue\">\r\n                                    Date: <span className=\"color-white\"><Moment\r\n                                    format=\"DD MMM YYYY HH:mm:ss\"\r\n                                    date={post['datetime_created']}/>\r\n                                        </span>\r\n                                </p>\r\n                                {post['operation_duration_sec'] ?\r\n                                    <p className=\"color-dark-blue margin-left-20\">\r\n                                        Duration: <span className=\"color-white\">\r\n                                                {getTime(post['operation_duration_sec'])}\r\n                                            </span>\r\n                                    </p>\r\n                                    : null}\r\n                            </div>\r\n                        </Grid>))\r\n                    : <Loading text={'News Loading'}/>}\r\n\r\n                {!news_is_loading ? <div className=\"pagination\">\r\n                    <Pagination\r\n                        count={Math.ceil(this.props.news[ApiResult.count] / 5)}\r\n                        color=\"primary\"\r\n                        siblingCount={3}\r\n                        page={this.state.current_page}\r\n                        onChange={(type, page) => {\r\n                            playClickSound();\r\n                            if (page !== this.state.current_page)\r\n                                this.goToPage(page);\r\n                            else\r\n                                this.setState({page_dialog_open: true})\r\n                        }}\r\n                    />\r\n                    <GoToPageDialog\r\n                        open={this.state.page_dialog_open}\r\n                        current_page={this.state.current_page}\r\n                        total_pages={Math.ceil(this.props.news[ApiResult.count] / 5)}\r\n                        goToPage={this.goToPage}\r\n                        onClose={this.closePageDialog}/>\r\n                </div> : null}\r\n\r\n\r\n                     {/*<Pagination page={news} items_per_page={5} getItems={getNews}*/}\r\n                     {/*                            scroll_to={[0, 550]}/> : null}*/}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    news_is_loading: state.requiem.news_is_loading,\r\n    news: state.requiem.news,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getNews})(News)\r\n","export const particles_params = {\r\n    \"particles\": {\r\n        \"number\": {\r\n            \"value\": 100,\r\n            \"density\": {\r\n                \"enable\": true,\r\n                \"value_area\": 263\r\n            }\r\n        },\r\n        \"color\": {\r\n            \"value\": \"#ffffff\"\r\n        },\r\n        \"shape\": {\r\n            \"type\": \"circle\",\r\n            \"stroke\": {\r\n                \"width\": 0,\r\n                \"color\": \"#000000\"\r\n            },\r\n            \"polygon\": {\r\n                \"nb_sides\": 5\r\n            },\r\n            \"image\": {\r\n                \"src\": \"img/github.svg\",\r\n                \"width\": 100,\r\n                \"height\": 100\r\n            }\r\n        },\r\n        \"opacity\": {\r\n            \"value\": 0.3,\r\n            \"random\": false,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 1,\r\n                \"opacity_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"size\": {\r\n            \"value\": 2,\r\n            \"random\": true,\r\n            \"anim\": {\r\n                \"enable\": false,\r\n                \"speed\": 40,\r\n                \"size_min\": 0.1,\r\n                \"sync\": false\r\n            }\r\n        },\r\n        \"line_linked\": {\r\n            \"enable\": true,\r\n            \"distance\": 40,\r\n            \"color\": \"#ffffff\",\r\n            \"opacity\": 0.15,\r\n            \"width\": 1\r\n        },\r\n        \"move\": {\r\n            \"enable\": true,\r\n            \"speed\": 0.2,\r\n            \"direction\": \"none\",\r\n            \"random\": true,\r\n            \"straight\": false,\r\n            \"out_mode\": \"out\",\r\n            \"bounce\": false,\r\n            \"attract\": {\r\n                \"enable\": false,\r\n                \"rotateX\": 600,\r\n                \"rotateY\": 1200\r\n            }\r\n        }\r\n    },\r\n    \"interactivity\": {\r\n        \"detect_on\": \"window\",\r\n        \"events\": {\r\n            \"onhover\": {\r\n                \"enable\": true,\r\n                \"mode\": \"grab\"\r\n            },\r\n            \"onclick\": {\r\n                \"enable\": true,\r\n                \"mode\": \"push\"\r\n            },\r\n            \"resize\": true\r\n        },\r\n        \"modes\": {\r\n            \"grab\": {\r\n                \"distance\": 50,\r\n                \"line_linked\": {\r\n                    \"opacity\": 1\r\n                }\r\n            },\r\n            \"bubble\": {\r\n                \"distance\": 400,\r\n                \"size\": 40,\r\n                \"duration\": 2,\r\n                \"opacity\": 8,\r\n                \"speed\": 3\r\n            },\r\n            \"repulse\": {\r\n                \"distance\": 200,\r\n                \"duration\": 0.4\r\n            },\r\n            \"push\": {\r\n                \"particles_nb\": 4\r\n            },\r\n            \"remove\": {\r\n                \"particles_nb\": 2\r\n            }\r\n        }\r\n    },\r\n    \"retina_detect\": true\r\n};\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Particles from 'react-particles-js';\r\n\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/home.css'\r\nimport {getAllUsers} from \"../../actions/users\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport {Profile as ProfileModel, User} from \"../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../layout/common/common\";\r\nimport {CYBER_GENESIS_URL} from \"../../globals\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport {getBrowseGridListCols} from \"../functions\";\r\nimport {PROFILE} from \"../../urls\";\r\nimport News from \"../requiem/snippets/News\";\r\nimport {particles_params} from \"./functions\";\r\n\r\n\r\nclass Home extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber-Space';\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        this.props.getAllUsers();\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"Home\" container>\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <News/>*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid item xs={12}>\r\n                        <Particles className=\"bg-particles\" params={particles_params}/>\r\n                    </Grid>\r\n\r\n                    {/*<Grid item xs={12}>*/}\r\n                    {/*    <iframe*/}\r\n                    {/*        src=\"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fmijomir.bulgarin%2Fposts%2F467447447764547&width=500&show_text=false&height=281&appId\"*/}\r\n                    {/*        width=\"500\" height=\"281\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameBorder=\"0\"*/}\r\n                    {/*        allowFullScreen=true*/}\r\n                    {/*        allow=\"autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share\"*/}\r\n                    {/*        allowFullScreen=\"true\"></iframe>*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid item xs={12}>\r\n                        <h1>Users</h1>\r\n                    </Grid>\r\n\r\n                    {this.props.all_users_loaded ? <Grid item xs={12}>\r\n                        <GridList cellHeight={400} className=\"user-card-container\" cols={this.state.gridlist_cols}>\r\n                            {this.props.all_users.map((user, x) => (\r\n                                <GridListTile key={x} cols={1}>\r\n                                    <CyberLink classNames=\"user-card\" to={PROFILE(user[User.id])}>\r\n                                        <div className=\"card-text\">\r\n                                            <h2>{user[User.username]}</h2>\r\n                                        </div>\r\n                                        <PreLoadImage\r\n                                            src={`${CYBER_GENESIS_URL}${user[User.profile][ProfileModel.profile_image]}`}\r\n                                            alt={'Avatar'}/>\r\n                                    </CyberLink>\r\n                                </GridListTile>\r\n\r\n                                // <Card className=\"user-card\" variant=\"outlined\">\r\n                                //     <CardContent>\r\n                                //         <Typography gutterBottom>{user[User.username]}</Typography>\r\n                                //         <PreLoadImage\r\n                                //             src={`${CYBER_GENESIS_URL}${user[User.profile][ProfileModel.profile_image]}`}\r\n                                //             alt={'Avatar'}/>\r\n                                //     </CardContent>\r\n                                //     <CardActions>\r\n                                //     </CardActions>\r\n                                // </Card>\r\n                            ))}\r\n                        </GridList>\r\n                    </Grid> : this.props.users_loading ? <Loading/> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    users_loading: state.users.users_loading,\r\n    all_users_loaded: state.users.all_users_loaded,\r\n    all_users: state.users.all_users,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllUsers})(Home)\r\n","function compareByLabel(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = a['label'];\r\n    const second = b['label'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nfunction compareByStat(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['stat'];\r\n    const second = a['stat'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\nexport function getDataTypes(statistics) {\r\n\r\n    let data = [\r\n        {label: 'Movie', stat: statistics['total_movie'], color: '', hoverColor: ''},\r\n        {label: 'Music', stat: statistics['total_music'], color: '', hoverColor: ''},\r\n        {label: 'ONA', stat: statistics['total_ona'], color: '', hoverColor: ''},\r\n        {label: 'OVA', stat: statistics['total_ova'], color: '', hoverColor: ''},\r\n        {label: 'Special', stat: statistics['total_special'], color: '', hoverColor: ''},\r\n        {label: 'TV', stat: statistics['total_tv'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            // borderColor: 'white',\r\n            // hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataSources(statistics) {\r\n    let data = [\r\n        {label: 'Original', stat: statistics['total_original_anime'], meanScore: 0},\r\n        {label: 'Light Novel', stat: statistics['total_anime_from_light_novel'], meanScore: 0},\r\n        {label: 'Music', stat: statistics['total_anime_from_music'], meanScore: 0},\r\n        {label: 'Manga', stat: statistics['total_anime_from_manga'], meanScore: 0},\r\n        {label: 'Other', stat: statistics['total_anime_from_other'], meanScore: 0},\r\n        {label: 'Visual Novel', stat: statistics['total_anime_from_visual_novel'], meanScore: 0},\r\n        {label: 'Book', stat: statistics['total_anime_from_book'], meanScore: 0},\r\n        {label: 'Game', stat: statistics['total_anime_from_game'], meanScore: 0},\r\n        {label: 'Web Manga', stat: statistics['total_anime_from_web_manga'], meanScore: 0},\r\n        {label: 'Novel', stat: statistics['total_anime_from_novel'], meanScore: 0},\r\n        {label: 'Picture Book', stat: statistics['total_anime_from_picture_book'], meanScore: 0},\r\n        {label: 'Card Game', stat: statistics['total_anime_from_card_game'], meanScore: 0},\r\n        {label: '4-Kom Manga', stat: statistics['total_anime_from_4_kom_manga'], meanScore: 0},\r\n        {label: 'Digital Manga', stat: statistics['total_anime_from_digital_manga'], meanScore: 0},\r\n        {label: 'Radio', stat: statistics['total_anime_from_radio'], meanScore: 0},\r\n    ];\r\n    try {\r\n        data = [\r\n            {\r\n                label: 'Original',\r\n                stat: statistics['total_original_anime'],\r\n                meanScore: statistics['total_original_anime_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Light Novel',\r\n                stat: statistics['total_anime_from_light_novel'],\r\n                meanScore: statistics['total_anime_from_light_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Music',\r\n                stat: statistics['total_anime_from_music'],\r\n                meanScore: statistics['total_anime_from_music_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Manga',\r\n                stat: statistics['total_anime_from_manga'],\r\n                meanScore: statistics['total_anime_from_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Other',\r\n                stat: statistics['total_anime_from_other'],\r\n                meanScore: statistics['total_anime_from_other_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Visual Novel',\r\n                stat: statistics['total_anime_from_visual_novel'],\r\n                meanScore: statistics['total_anime_from_visual_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Book',\r\n                stat: statistics['total_anime_from_book'],\r\n                meanScore: statistics['total_anime_from_book_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Game',\r\n                stat: statistics['total_anime_from_game'],\r\n                meanScore: statistics['total_anime_from_game_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Web Manga',\r\n                stat: statistics['total_anime_from_web_manga'],\r\n                meanScore: statistics['total_anime_from_web_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Novel',\r\n                stat: statistics['total_anime_from_novel'],\r\n                meanScore: statistics['total_anime_from_novel_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Picture Book',\r\n                stat: statistics['total_anime_from_picture_book'],\r\n                meanScore: statistics['total_anime_from_picture_book_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Card Game',\r\n                stat: statistics['total_anime_from_card_game'],\r\n                meanScore: statistics['total_anime_from_card_game_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: '4-Kom Manga',\r\n                stat: statistics['total_anime_from_4_kom_manga'],\r\n                meanScore: statistics['total_anime_from_4_kom_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Digital Manga',\r\n                stat: statistics['total_anime_from_digital_manga'],\r\n                meanScore: statistics['total_anime_from_digital_manga_mean'].toFixed(2)\r\n            },\r\n            {\r\n                label: 'Radio',\r\n                stat: statistics['total_anime_from_radio'],\r\n                meanScore: statistics['total_anime_from_radio_mean'].toFixed(2)\r\n            },\r\n        ];\r\n    } catch (e) {\r\n    }\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let mean_score_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n        mean_score_data.push(data[x].meanScore);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: mean_score_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '#',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {\r\n                mode: 'label'\r\n            },\r\n            elements: {\r\n                line: {\r\n                    fill: false\r\n                }\r\n            },\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {\r\n                            display: false\r\n                        },\r\n                        labels: {\r\n                            show: true\r\n                        }\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {\r\n                            display: false\r\n                        },\r\n                        labels: {\r\n                            show: true\r\n                        },\r\n                        ticks: {\r\n                            min: 0,\r\n                            max: 10,\r\n                            stepSize: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}\r\n\r\n\r\nexport function getDataStatuses(statistics) {\r\n\r\n    return {\r\n        labels: [\r\n            'Finished Airing',\r\n            'Not yet Aired',\r\n            'Currently Airing'\r\n        ],\r\n        datasets: [{\r\n            data: [16952, 428, 387],\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56'\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRated(statistics) {\r\n\r\n    let data = [\r\n        {label: 'G', stat: statistics['total_rated_g'], color: '', hoverColor: ''},\r\n        {label: 'PG-C', stat: statistics['total_rated_pgc'], color: '', hoverColor: ''},\r\n        {label: 'PG-13', stat: statistics['total_rated_pg13'], color: '', hoverColor: ''},\r\n        {label: 'R', stat: statistics['total_rated_r'], color: '', hoverColor: ''},\r\n        {label: 'R+', stat: statistics['total_rated_r_plus'], color: '', hoverColor: ''},\r\n        {label: 'Rx', stat: statistics['total_rated_rx'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataQualities(statistics) {\r\n\r\n    let data = [\r\n        {label: '2160p', stat: statistics['total_quality_2160p']},\r\n        {\r\n            label: '1080p',\r\n            stat: (statistics['total_quality_1080p'] + statistics['total_quality_960p']),\r\n        },\r\n        {label: '720p', stat: statistics['total_quality_720p']},\r\n        {\r\n            label: '480p',\r\n            stat: (statistics['total_quality_480p'] + statistics['total_quality_528p'] +\r\n                statistics['total_quality_540p'] + statistics['total_quality_560p'] + statistics['total_quality_576p']),\r\n        },\r\n        {\r\n            label: '360p',\r\n            stat: (statistics['total_quality_360p'] + statistics['total_quality_396p']),\r\n        },\r\n        {\r\n            label: '240p',\r\n            stat: (statistics['total_quality_240p'] + statistics['total_quality_288p']),\r\n        },\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [{\r\n            data: stat_data,\r\n            backgroundColor: [\r\n                '#36A2EB',\r\n                '#FF6384',\r\n                '#FFCE56',\r\n                '#559e83',\r\n                '#ae5a41',\r\n                '#ff94fc',\r\n            ],\r\n            hoverBackgroundColor: [\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n                'rgba(15, 67, 118, 0.3)',\r\n            ],\r\n            borderColor: 'white',\r\n            hoverBorderColor: 'rgba(54, 162, 235,0.2)',\r\n            borderWidth: 0\r\n        }]\r\n    }\r\n}\r\n\r\n\r\nexport function getDataGenres(statistics) {\r\n\r\n    let data = [\r\n        {label: 'Action', stat: statistics['total_genre_action'], color: '', hoverColor: ''},\r\n        {label: 'Adventure', stat: statistics['total_genre_adventure'], color: '', hoverColor: ''},\r\n        {label: 'Cars', stat: statistics['total_genre_cars'], color: '', hoverColor: ''},\r\n        {label: 'Comedy', stat: statistics['total_genre_comedy'], color: '', hoverColor: ''},\r\n        {label: 'Dementia', stat: statistics['total_genre_dementia'], color: '', hoverColor: ''},\r\n        {label: 'Demons', stat: statistics['total_genre_demons'], color: '', hoverColor: ''},\r\n        {label: 'Drama', stat: statistics['total_genre_drama'], color: '', hoverColor: ''},\r\n        {label: 'Ecchi', stat: statistics['total_genre_ecchi'], color: '', hoverColor: ''},\r\n        {label: 'Fantasy', stat: statistics['total_genre_fantasy'], color: '', hoverColor: ''},\r\n        {label: 'Game', stat: statistics['total_genre_game'], color: '', hoverColor: ''},\r\n        {label: 'Harem', stat: statistics['total_genre_harem'], color: '', hoverColor: ''},\r\n        {label: 'Hentai', stat: statistics['total_genre_hentai'], color: '', hoverColor: ''},\r\n        {label: 'Historical', stat: statistics['total_genre_historical'], color: '', hoverColor: ''},\r\n        {label: 'Horror', stat: statistics['total_genre_horror'], color: '', hoverColor: ''},\r\n        {label: 'Josei', stat: statistics['total_genre_josei'], color: '', hoverColor: ''},\r\n        {label: 'Kids', stat: statistics['total_genre_kids'], color: '', hoverColor: ''},\r\n        {label: 'Magic', stat: statistics['total_genre_magic'], color: '', hoverColor: ''},\r\n        {label: 'Martial Arts', stat: statistics['total_genre_martial_arts'], color: '', hoverColor: ''},\r\n        {label: 'Mecha', stat: statistics['total_genre_mecha'], color: '', hoverColor: ''},\r\n        {label: 'Military', stat: statistics['total_genre_military'], color: '', hoverColor: ''},\r\n        {label: 'Music', stat: statistics['total_genre_music'], color: '', hoverColor: ''},\r\n        {label: 'Mystery', stat: statistics['total_genre_mystery'], color: '', hoverColor: ''},\r\n        {label: 'Parody', stat: statistics['total_genre_parody'], color: '', hoverColor: ''},\r\n        {label: 'Police', stat: statistics['total_genre_police'], color: '', hoverColor: ''},\r\n        {label: 'Psychological', stat: statistics['total_genre_psychological'], color: '', hoverColor: ''},\r\n        {label: 'Romance', stat: statistics['total_genre_romance'], color: '', hoverColor: ''},\r\n        {label: 'Samurai', stat: statistics['total_genre_samurai'], color: '', hoverColor: ''},\r\n        {label: 'School', stat: statistics['total_genre_school'], color: '', hoverColor: ''},\r\n        {label: 'Sci-Fi', stat: statistics['total_genre_sci_fi'], color: '', hoverColor: ''},\r\n        {label: 'Seinen', stat: statistics['total_genre_seinen'], color: '', hoverColor: ''},\r\n        {label: 'Shoujo', stat: statistics['total_genre_shoujo'], color: '', hoverColor: ''},\r\n        {label: 'Shoujo Ai', stat: statistics['total_genre_shoujo_ai'], color: '', hoverColor: ''},\r\n        {label: 'Shounen', stat: statistics['total_genre_shounen'], color: '', hoverColor: ''},\r\n        {label: 'Shounen Ai', stat: statistics['total_genre_shounen_ai'], color: '', hoverColor: ''},\r\n        {label: 'Slice of Life', stat: statistics['total_genre_slice_of_life'], color: '', hoverColor: ''},\r\n        {label: 'Space', stat: statistics['total_genre_space'], color: '', hoverColor: ''},\r\n        {label: 'Sports', stat: statistics['total_genre_sports'], color: '', hoverColor: ''},\r\n        {label: 'Super Power', stat: statistics['total_genre_super_power'], color: '', hoverColor: ''},\r\n        {label: 'Supernatural', stat: statistics['total_genre_supernatural'], color: '', hoverColor: ''},\r\n        {label: 'Thriller', stat: statistics['total_genre_thriller'], color: '', hoverColor: ''},\r\n        {label: 'Vampire', stat: statistics['total_genre_vampire'], color: '', hoverColor: ''},\r\n        {label: 'Yaoi', stat: statistics['total_genre_yaoi'], color: '', hoverColor: ''},\r\n        {label: 'Yuri', stat: statistics['total_genre_yuri'], color: '', hoverColor: ''},\r\n    ];\r\n\r\n    data = data.sort(compareByStat);\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '#',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataYears(statistics) {\r\n\r\n    let parsed_data;\r\n    let parsed_data_keys;\r\n    let data = [];\r\n    try {\r\n        parsed_data = JSON.parse(statistics['total_anime_per_year']);\r\n        parsed_data_keys = Object.keys(parsed_data);\r\n        for (let x = 0; x < parsed_data_keys.length; x++) {\r\n            let element = {label: parsed_data_keys[x], stat: parsed_data[parsed_data_keys[x]]};\r\n            data.push(element)\r\n        }\r\n    } catch (e) {\r\n    }\r\n\r\n    let stat_data = [];\r\n    let labels = [];\r\n    for (let x = 0; x < data.length; x++) {\r\n        stat_data.push(data[x].stat);\r\n        labels.push(data[x].label);\r\n    }\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '#',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {Bar, Doughnut} from 'react-chartjs-2';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport {getAnimeDataWithStatistics} from '../../../actions/anime'\r\nimport {\r\n    getDataGenres,\r\n    getDataQualities,\r\n    getDataRated,\r\n    getDataSources,\r\n    getDataStatuses,\r\n    getDataTypes,\r\n    getDataYears\r\n} from \"./statistics\";\r\nimport {AnimeDataStatistics, UserList} from \"../../../models\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport CountUp from \"react-countup\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nclass AnimeStatistics extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeDataWithStatistics();\r\n    }\r\n\r\n    render() {\r\n        let data_types = getDataTypes(this.props.anime_data_statistics);\r\n        let data_sources = getDataSources(this.props.anime_data_statistics)[0];\r\n        let data_sources_options = getDataSources(this.props.anime_data_statistics)[1];\r\n        let data_statuses = getDataStatuses(this.props.anime_data_statistics);\r\n        let data_rated = getDataRated(this.props.anime_data_statistics);\r\n        let data_genres = getDataGenres(this.props.anime_data_statistics);\r\n        let data_qualities = getDataQualities(this.props.anime_data_statistics);\r\n        let data_years = getDataYears(this.props.anime_data_statistics);\r\n\r\n        return (\r\n            <Grid container id=\"Anime-Statistics\">\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <h3>ANIME STATISTICS</h3>\r\n                </Grid>\r\n                <Grid item xl={2}/>\r\n                <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total anime:</td>\r\n                            <td><p>{this.props.anime_data_statistics[AnimeDataStatistics.total_anime]} (\r\n                                {this.props.anime_data_statistics[AnimeDataStatistics.total_anime] +\r\n                                this.props.anime_data_statistics[AnimeDataStatistics.total_anime_pending_mal] +\r\n                                this.props.anime_data_statistics[AnimeDataStatistics.total_anime_deleted_mal]}\r\n                                )</p></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Pending by MAL:</td>\r\n                            <td>\r\n                                <p className=\"color-warning\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_pending_mal]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Deleted by MAL:</td>\r\n                            <td>\r\n                                <p className=\"color-danger\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_deleted_mal]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Mean Score:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.mean_score] ?\r\n                                        this.props.anime_data_statistics[AnimeDataStatistics.mean_score].toFixed(2) : null}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total episodes:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_episodes]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-primary\">Total duration:</td>\r\n                            <td>\r\n                                <p className=\"color-white\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_minutes]}min (\r\n                                    {(this.props.anime_data_statistics[AnimeDataStatistics.total_minutes] / 1440)\r\n                                        .toFixed(2)} days)\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={6} xl={4}>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Downloaded:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_downloaded]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Downloading:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {this.props.anime_data_statistics[AnimeDataStatistics.total_anime_downloading]}\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"color-secondary-dark\">Total size:</td>\r\n                            <td>\r\n                                <p className=\"color-secondary\">\r\n                                    {(this.props.anime_data_statistics[AnimeDataStatistics.total_downloaded_size] / 1024)\r\n                                        .toFixed(1)}TB\r\n                                </p>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Type</h5>\r\n                        <Doughnut height={100} width={100} data={data_types}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Rated</h5>\r\n                        <Doughnut height={100} width={100} data={data_rated}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Quality</h5>\r\n                        <Doughnut height={100} width={100} data={data_qualities}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} lg={3} xl={2}>\r\n                    <div className=\"pie-container\">\r\n                        <h5 className=\"text-center\">Status</h5>\r\n                        <Doughnut height={100} width={100} data={data_statuses}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Sources</h5>\r\n                        <Bar\r\n                            data={data_sources}\r\n                            width={100}\r\n                            height={50}\r\n                            options={data_sources_options}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Genres</h5>\r\n                        <Bar\r\n                            data={data_genres}\r\n                            width={100}\r\n                            height={50}\r\n                            options={{\r\n                                maintainAspectRatio: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <div className=\"bar-container\">\r\n                        <h5 className=\"text-center\">Anime per Year</h5>\r\n                        <Bar\r\n                            data={data_years}\r\n                            width={100}\r\n                            height={50}\r\n                            options={{\r\n                                maintainAspectRatio: false\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data_statistics: state.anime.anime_data_statistics,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeDataWithStatistics})(AnimeStatistics)","import {Form, Formik} from \"formik\";\r\nimport store from \"../../../../store\";\r\nimport {addAnimeEntry, deleteAnimeEntry, updateAnimeEntry} from \"../../../../actions/users\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport 'date-fns';\r\nimport {KeyboardDateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport React from \"react\";\r\nimport {UserAnimeEntry} from \"../../../../models\";\r\nimport {USER_ANIME_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\n\r\nconst FIELD_NAMES = {\r\n    watched_episodes: UserAnimeEntry.watched_episodes,\r\n    start_date: UserAnimeEntry.start_date,\r\n    finish_date: UserAnimeEntry.finish_date,\r\n    score: UserAnimeEntry.score,\r\n    status: UserAnimeEntry.status,\r\n    times_watched: UserAnimeEntry.times_watched,\r\n    comments: UserAnimeEntry.comments,\r\n    tags: UserAnimeEntry.tags,\r\n    priority: UserAnimeEntry.priority,\r\n    rewatching: UserAnimeEntry.rewatching,\r\n    rewatching_episode: UserAnimeEntry.rewatching_episode,\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} anime_id\r\n * @param {Object} user_anime_entry\r\n * @param {boolean} edit - *Optional\r\n * @returns {{comments: string, times_watched: number, rewatching_episode: number, priority: string, tags: string, score: number, watched_episodes: number, rewatching: boolean, finish_date: string, anime: *, errors: boolean, start_date: string, status: string}}\r\n */\r\nexport function getUserAnimeEntryFormInitialValues(anime_id, user_anime_entry, edit = false) {\r\n    let initial_values = {\r\n        anime: anime_id,\r\n        watched_episodes: 0,\r\n        start_date: '',\r\n        finish_date: '',\r\n        score: 0,\r\n        status: USER_ANIME_STATUSES.plan_to_watch,\r\n        times_watched: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rewatching: false,\r\n        rewatching_episode: 0,\r\n        errors: false\r\n    };\r\n\r\n    if (edit && !isEmpty(user_anime_entry))\r\n        initial_values = {\r\n            anime: anime_id,\r\n            watched_episodes: user_anime_entry[UserAnimeEntry.watched_episodes],\r\n            start_date: user_anime_entry[UserAnimeEntry.start_date],\r\n            finish_date: user_anime_entry[UserAnimeEntry.finish_date],\r\n            score: user_anime_entry[UserAnimeEntry.score],\r\n            status: user_anime_entry[UserAnimeEntry.status],\r\n            times_watched: user_anime_entry[UserAnimeEntry.times_watched],\r\n            comments: user_anime_entry[UserAnimeEntry.comments],\r\n            tags: user_anime_entry[UserAnimeEntry.tags],\r\n            priority: user_anime_entry[UserAnimeEntry.priority],\r\n            rewatching: user_anime_entry[UserAnimeEntry.rewatching],\r\n            rewatching_episode: user_anime_entry[UserAnimeEntry.rewatching_episode]\r\n        };\r\n\r\n    return initial_values\r\n}\r\n\r\n\r\nfunction deleteEntry(id, list) {\r\n    if (window.confirm('Are you sure? This will also delete any episode history of this anime.'))\r\n        store.dispatch(deleteAnimeEntry(id, list));\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.initial_values\r\n * @param {boolean} props.edit\r\n * @param {int} props.id\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserAnimeEntryForm(props) {\r\n    const {initial_values, edit, id, list, handleClose} = props;\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}><Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            if (values.start_date === '') values.start_date = null;\r\n            if (values.finish_date === '') values.finish_date = null;\r\n            values[FIELD_NAMES.times_watched] = parseInt(values[FIELD_NAMES.times_watched]);\r\n            if (isNaN(values[FIELD_NAMES.times_watched])) values[FIELD_NAMES.times_watched] = 0;\r\n            values[FIELD_NAMES.watched_episodes] = parseInt(values[FIELD_NAMES.watched_episodes]);\r\n            if (isNaN(values[FIELD_NAMES.watched_episodes])) values[FIELD_NAMES.watched_episodes] = 0;\r\n            values.score = parseInt(values.score);\r\n\r\n            if (edit) store.dispatch(updateAnimeEntry(id, values, list));\r\n            else store.dispatch(addAnimeEntry(values));\r\n\r\n            setSubmitting(false);\r\n        }}>\r\n        {({\r\n              isSubmitting, values, handleChange,\r\n              handleBlur, setValues\r\n          }) => (\r\n            <Form id=\"User-Title-Entry-Form\">\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-status\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-status\"\r\n                            className=\"form-control\"\r\n                            label=\"Status\"\r\n                            value={values[FIELD_NAMES.status]}\r\n                            name={FIELD_NAMES.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"Watching\">Watching</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                            <MenuItem value=\"On Hold\">On Hold</MenuItem>\r\n                            <MenuItem value=\"Dropped\">Dropped</MenuItem>\r\n                            <MenuItem value=\"Plan to Watch\">Plan to Watch</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-value\">Priority</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-value\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.priority]}\r\n                            name={FIELD_NAMES.priority}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"4\">VERY HIGH</MenuItem>\r\n                            <MenuItem value=\"3\">HIGH</MenuItem>\r\n                            <MenuItem value=\"2\">MEDIUM</MenuItem>\r\n                            <MenuItem value=\"1\">LOW</MenuItem>\r\n                            <MenuItem value=\"0\">VERY LOW</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Episode\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.watched_episodes}\r\n                            value={values[FIELD_NAMES.watched_episodes]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4} md={2}>\r\n                        <div className=\"form-group text-right\">\r\n                            <Checkbox\r\n                                value={values[FIELD_NAMES.rewatching]}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                name={FIELD_NAMES.rewatching}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={4}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Rewatch Episode\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rewatching_episode}\r\n                            value={values[FIELD_NAMES.rewatching_episode]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rewatching]}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-score\">Score</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-score\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.score]}\r\n                            name={FIELD_NAMES.score}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"0\">0</MenuItem>\r\n                            <MenuItem value=\"1\">1</MenuItem>\r\n                            <MenuItem value=\"2\">2</MenuItem>\r\n                            <MenuItem value=\"3\">3</MenuItem>\r\n                            <MenuItem value=\"4\">4</MenuItem>\r\n                            <MenuItem value=\"5\">5</MenuItem>\r\n                            <MenuItem value=\"6\">6</MenuItem>\r\n                            <MenuItem value=\"7\">7</MenuItem>\r\n                            <MenuItem value=\"8\">8</MenuItem>\r\n                            <MenuItem value=\"9\">9</MenuItem>\r\n                            <MenuItem value=\"10\">10</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start date\"\r\n                            value={values[FIELD_NAMES.start_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.start_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Times watched\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.times_watched}\r\n                            value={values[FIELD_NAMES.times_watched]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Finish date\"\r\n                            value={values[FIELD_NAMES.finish_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.finish_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Comments\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.comments]}\r\n                            name={FIELD_NAMES.comments}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Tags\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.tags]}\r\n                            name={FIELD_NAMES.tags}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <DialogActions>\r\n                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\" onClick={handleClose}\r\n                                 disabled={isSubmitting}><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                    {edit ? <CyberButton classNames=\"btn-danger\" variant=\"outlined\" onClick={(e) => {\r\n                        deleteEntry(id, list);\r\n                        handleClose()\r\n                    }}><FontAwesomeIcon icon={faTrash}/></CyberButton> : null}\r\n                </DialogActions>\r\n            </Form>\r\n        )}\r\n    </Formik></MuiPickersUtilsProvider>\r\n}\r\n","import React from \"react\";\r\n\r\nimport {Form, Formik} from \"formik\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport BBCodeQuickGuideDialog from \"./snippets/snippets\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faFileUpload, faLevelDownAlt} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport store from \"../../../store\";\r\nimport {\r\n    addAnimeEntryInstantDrop,\r\n    addMangaEntryInstantDrop,\r\n    editUserAboutMeBBCode,\r\n    editUserBio,\r\n    importMalXmlForAnimeList,\r\n    importMalXmlForMangaList,\r\n    scrapeEpisodeHistoryFromMal\r\n} from \"../../../actions/users\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {store_reducer_users, store_reducers} from \"../../../globals\";\r\n\r\n\r\n/**\r\n * Form for editing user's bio\r\n * @param props {Object} user's bio\r\n * @param props.bio {String} user's bio\r\n * @param props.closeBio {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function EditBioForm(props) {\r\n    const {bio, closeBio} = props;\r\n    const field_names = {\r\n        bio: 'bio',\r\n    };\r\n\r\n    const initial_values = {\r\n        bio: bio,\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            store.dispatch(editUserBio(values.bio));\r\n            setSubmitting(false);\r\n            closeBio();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"edit-user-bio-form\">\r\n                <TextField\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                            e.preventDefault();\r\n                            handleSubmit();\r\n                        }\r\n                    }}\r\n                    label=\"Bio\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={values.bio}\r\n                    name={field_names.bio}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={errors.bio && touched.bio}\r\n                    helperText={(errors.bio && touched.bio) && errors.bio}/>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props {Object}\r\n * @param props.bbcode {String}\r\n * @param props.closeForm {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function EditAboutMeBBCodeForm(props) {\r\n    const {bbcode, closeForm} = props;\r\n    const field_names = {\r\n        bbcode: 'bbcode',\r\n    };\r\n\r\n    const initial_values = {\r\n        bbcode: bbcode,\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            values.bbcode = values.bbcode.replaceAll('\\n', '[br]');\r\n            store.dispatch(editUserAboutMeBBCode(values.bbcode));\r\n            setSubmitting(false);\r\n            closeForm();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"edit-user-about-me-bbcode-form\">\r\n                <TextField\r\n                    label=\"BBCode\"\r\n                    className=\"form-control\"\r\n                    multiline\r\n                    value={values.bbcode.replaceAll('[br]', '\\n')}\r\n                    name={field_names.bbcode}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={errors.bbcode && touched.bbcode}\r\n                    helperText={(errors.bbcode && touched.bbcode) && errors.bbcode}\r\n                />\r\n                <div className=\"button-group\">\r\n                    <BBCodeQuickGuideDialog/>\r\n                    <CyberButton classNames=\"btn-contained-primary\" type=\"submit\"><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\nexport function EditAboutMeBBCodeDialog(props) {\r\n    const {open, onClose, bbcode} = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"edit-user-about-me-bbcode-title\" open={open}>\r\n            <div id=\"edit-user-about-me-bbcode\">\r\n                <DialogTitle id=\"edit-user-about-me-bbcode-title\">Edit BBCode</DialogTitle>\r\n                <EditAboutMeBBCodeForm bbcode={bbcode} closeForm={onClose}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props {Object}\r\n * @param props.bbcode {String}\r\n * @param props.closeForm {Function} function to call on submit\r\n * @returns {JSX.Element}\r\n */\r\nexport function ScrapeEpisodeHistoryFromMalForm(props) {\r\n    const {closeForm} = props;\r\n    const field_names = {\r\n        MALHLOGSESSID: 'MALHLOGSESSID',\r\n        MALSESSIONID: 'MALSESSIONID',\r\n    };\r\n\r\n    const initial_values = {\r\n        MALHLOGSESSID: '',\r\n        MALSESSIONID: '',\r\n    };\r\n\r\n    return <Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            store.dispatch(scrapeEpisodeHistoryFromMal(values[field_names.MALHLOGSESSID], values[field_names.MALSESSIONID]));\r\n            setSubmitting(false);\r\n            closeForm();\r\n        }}>\r\n        {({\r\n              errors, touched, values,\r\n              handleChange, handleBlur, handleSubmit\r\n          }) => (\r\n            <Form id=\"scrape-episode-history-from-mal-form\">\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label={field_names.MALHLOGSESSID}\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={values[field_names.MALHLOGSESSID]}\r\n                            name={field_names.MALHLOGSESSID}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.MALHLOGSESSID && touched.MALHLOGSESSID}\r\n                            helperText={(errors.MALHLOGSESSID && touched.MALHLOGSESSID) && errors.MALHLOGSESSID}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label={field_names.MALSESSIONID}\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={values[field_names.MALSESSIONID]}\r\n                            name={field_names.MALSESSIONID}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.MALSESSIONID && touched.MALSESSIONID}\r\n                            helperText={(errors.MALSESSIONID && touched.MALSESSIONID) && errors.MALSESSIONID}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <div className=\"button-group\">\r\n                    <CyberButton classNames=\"btn-contained-primary\" type=\"submit\">\r\n                        <FontAwesomeIcon icon={faCheck}/>\r\n                    </CyberButton>\r\n                </div>\r\n            </Form>\r\n        )}\r\n    </Formik>\r\n}\r\n\r\n\r\nexport function ScrapeEpisodeHistoryFromMalDialog(props) {\r\n    const {open, onClose} = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} aria-labelledby=\"scrape-episode-history-from-mal-title\" open={open}>\r\n            <div id=\"scrape-episode-history-from-mal\">\r\n                <DialogTitle id=\"scrape-episode-history-from-mal-title\">MAL Episode History scraper</DialogTitle>\r\n                <ScrapeEpisodeHistoryFromMalForm closeForm={onClose}/>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * Button for importing xml file from MAL and updating the user's list\r\n * @returns {JSX.Element}\r\n */\r\nexport function ImportAnimeListFromMal(props) {\r\n    const {} = props;\r\n    const uploading = store.getState()[store_reducers.users][store_reducer_users.uploading_file];\r\n\r\n    return <div>\r\n        <input\r\n            accept=\"text/xml\"\r\n            style={{display: 'none'}}\r\n            id=\"import-mal-anime-list-xml\"\r\n            multiple={false}\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n                store.dispatch(importMalXmlForAnimeList(e.target.files[0]))\r\n            }}\r\n        />\r\n        {uploading ? <CircularProgress/> : <label htmlFor=\"import-mal-anime-list-xml\" className=\"upload-img-btn\">\r\n            <Button variant=\"outlined\" color=\"primary\" component=\"span\" onMouseEnter={playHoverSound}\r\n                    onClick={playClickSound}>\r\n                <FontAwesomeIcon icon={faFileUpload}/>\r\n            </Button>\r\n        </label>}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * Button for importing xml file from MAL and updating the user's list\r\n * @returns {JSX.Element}\r\n */\r\nexport function ImportMangaListFromMal(props) {\r\n    const {} = props;\r\n    const uploading = store.getState()[store_reducers.users][store_reducer_users.uploading_file];\r\n\r\n    return <div>\r\n        <input\r\n            accept=\"text/xml\"\r\n            style={{display: 'none'}}\r\n            id=\"import-mal-manga-list-xml\"\r\n            multiple={false}\r\n            type=\"file\"\r\n            onChange={(e) => {\r\n                store.dispatch(importMalXmlForMangaList(e.target.files[0]))\r\n            }}\r\n        />\r\n        {uploading ? <CircularProgress/> : <label htmlFor=\"import-mal-manga-list-xml\" className=\"upload-img-btn\">\r\n            <Button variant=\"outlined\" color=\"primary\" component=\"span\" onMouseEnter={playHoverSound}\r\n                    onClick={playClickSound}>\r\n                <FontAwesomeIcon icon={faFileUpload}/>\r\n            </Button>\r\n        </label>}\r\n    </div>\r\n}\r\n\r\n\r\n/**\r\n * Button for instant dropping an anime\r\n * @param props.anime_id {Number} ID of the anime to be dropped\r\n * @param props.classNames {String} extra classname to pass to the btn\r\n * @param props.variant {String} variant of the MaterialUi btn\r\n * @returns {JSX.Element}\r\n */\r\nexport function AddAnimeEntryInstantDropButton(props) {\r\n    const {anime_id, classNames, variant} = props;\r\n    return <CyberButton variant={variant ? variant : 'outlined'} classNames={classNames} color=\"primary\" title={'Instant Drop'}\r\n                        onClick={() => {\r\n        store.dispatch(addAnimeEntryInstantDrop(anime_id))\r\n    }}>\r\n        <FontAwesomeIcon icon={faLevelDownAlt}/>\r\n    </CyberButton>\r\n}\r\n\r\n\r\n/**\r\n * Button for instant dropping a manga\r\n * @param props.manga_id {Number} ID of the manga to be dropped\r\n * @param props.classNames {String} extra classname to pass to the btn\r\n * @param props.variant {String} variant of the MaterialUi btn\r\n * @returns {JSX.Element}\r\n */\r\nexport function AddMangaEntryInstantDropButton(props) {\r\n    const {manga_id, classNames, variant} = props;\r\n    return <CyberButton variant={variant ? variant : 'outlined'} classNames={classNames} color=\"primary\" title={'Instant Drop'} onClick={() => {\r\n        store.dispatch(addMangaEntryInstantDrop(manga_id))\r\n    }}>\r\n        <FontAwesomeIcon icon={faLevelDownAlt}/>\r\n    </CyberButton>\r\n}\r\n","import React from \"react\";\r\n\r\nimport 'date-fns';\r\nimport {KeyboardDateTimePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {Form, Formik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {faCheck, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\n\r\nimport {USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {UserMangaEntry} from \"../../../../models\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport store from \"../../../../store\";\r\nimport {\r\n    addMangaEntry,\r\n    deleteMangaEntry,\r\n    updateMangaEntry\r\n} from \"../../../../actions/users\";\r\n\r\n\r\nconst FIELD_NAMES = {\r\n    read_volumes: UserMangaEntry.read_volumes,\r\n    read_chapters: UserMangaEntry.read_chapters,\r\n    start_date: UserMangaEntry.start_date,\r\n    finish_date: UserMangaEntry.finish_date,\r\n    score: UserMangaEntry.score,\r\n    status: UserMangaEntry.status,\r\n    times_read: UserMangaEntry.times_read,\r\n    comments: UserMangaEntry.comments,\r\n    tags: UserMangaEntry.tags,\r\n    priority: UserMangaEntry.priority,\r\n    rereading: UserMangaEntry.rereading,\r\n    rereading_volume: UserMangaEntry.rereading_volume,\r\n    rereading_chapter: UserMangaEntry.rereading_chapter,\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param manga_id\r\n * @param user_manga_entry\r\n * @param edit\r\n * @returns {{read_chapters: number, comments: string, priority: string, rereading: boolean, tags: string, score: number, times_read: number, finish_date: string, rereading_chapter: number, read_volumes: number, manga: *, rereading_volume: number, errors: boolean, start_date: string, status: string}}\r\n */\r\nexport function getUserMangaEntryFormInitialValues(manga_id, user_manga_entry, edit = false) {\r\n    let initial_values = {\r\n        manga: manga_id,\r\n        read_volumes: 0,\r\n        read_chapters: 0,\r\n        start_date: '',\r\n        finish_date: '',\r\n        score: 0,\r\n        status: USER_MANGA_STATUSES.plan_to_read,\r\n        times_read: 0,\r\n        comments: '',\r\n        tags: '',\r\n        priority: '0',\r\n        rereading: false,\r\n        rereading_volume: 0,\r\n        rereading_chapter: 0,\r\n        errors: false\r\n    };\r\n\r\n    if (edit && !isEmpty(user_manga_entry))\r\n        initial_values = {\r\n            manga: manga_id,\r\n            read_volumes: user_manga_entry[UserMangaEntry.read_volumes],\r\n            read_chapters: user_manga_entry[UserMangaEntry.read_chapters],\r\n            start_date: user_manga_entry[UserMangaEntry.start_date],\r\n            finish_date: user_manga_entry[UserMangaEntry.finish_date],\r\n            score: user_manga_entry[UserMangaEntry.score],\r\n            status: user_manga_entry[UserMangaEntry.status],\r\n            times_read: user_manga_entry[UserMangaEntry.times_read],\r\n            comments: user_manga_entry[UserMangaEntry.comments],\r\n            tags: user_manga_entry[UserMangaEntry.tags],\r\n            priority: user_manga_entry[UserMangaEntry.priority],\r\n            rereading: user_manga_entry[UserMangaEntry.rereading],\r\n            rereading_volume: user_manga_entry[UserMangaEntry.rereading_volume],\r\n            rereading_chapter: user_manga_entry[UserMangaEntry.rereading_chapter],\r\n        };\r\n\r\n    return initial_values\r\n}\r\n\r\n\r\nfunction deleteEntry(id, list) {\r\n    if (window.confirm('Are you sure? This will also delete any chapter history of this manga.'))\r\n        store.dispatch(deleteMangaEntry(id, list));\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.initial_values\r\n * @param {boolean} props.edit\r\n * @param {int} props.id\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserMangaEntryForm(props) {\r\n    const {initial_values, edit, id, list, handleClose} = props;\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}><Formik\r\n        initialValues={initial_values}\r\n        onSubmit={(values, {setSubmitting}) => {\r\n            if (values.start_date === '') values.start_date = null;\r\n            if (values.finish_date === '') values.finish_date = null;\r\n            values.score = parseInt(values.score);\r\n\r\n            if (edit) store.dispatch(updateMangaEntry(id, values, list));\r\n            else store.dispatch(addMangaEntry(values));\r\n\r\n            setSubmitting(false);\r\n        }}>\r\n        {({\r\n              isSubmitting, values, handleChange,\r\n              handleBlur, setValues\r\n          }) => (\r\n            <Form id=\"User-Title-Entry-Form\">\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-status\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-status\"\r\n                            className=\"form-control\"\r\n                            label=\"Status\"\r\n                            value={values[FIELD_NAMES.status]}\r\n                            name={FIELD_NAMES.status}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"Reading\">Reading</MenuItem>\r\n                            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                            <MenuItem value=\"On Hold\">On Hold</MenuItem>\r\n                            <MenuItem value=\"Dropped\">Dropped</MenuItem>\r\n                            <MenuItem value=\"Plan to Read\">Plan to Read</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-value\">Priority</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-value\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.priority]}\r\n                            name={FIELD_NAMES.priority}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"4\">VERY HIGH</MenuItem>\r\n                            <MenuItem value=\"3\">HIGH</MenuItem>\r\n                            <MenuItem value=\"2\">MEDIUM</MenuItem>\r\n                            <MenuItem value=\"1\">LOW</MenuItem>\r\n                            <MenuItem value=\"0\">VERY LOW</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Volume\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.read_volumes}\r\n                            value={values[FIELD_NAMES.read_volumes]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4} md={2}>\r\n                        <div className=\"form-group text-right\">\r\n                            <Checkbox\r\n                                value={values[FIELD_NAMES.rereading]}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                name={FIELD_NAMES.rereading}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={8} md={4}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Reread Volume\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rereading_volume}\r\n                            value={values[FIELD_NAMES.rereading_volume]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rereading]}/>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Chapter\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.read_chapters}\r\n                            value={values[FIELD_NAMES.read_chapters]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            // className=\"form-control\"\r\n                            label=\"Reread Chapter\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.rereading_chapter}\r\n                            value={values[FIELD_NAMES.rereading_chapter]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            disabled={!values[FIELD_NAMES.rereading]}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <InputLabel id=\"user-score\">Score</InputLabel>\r\n                        <Select\r\n                            labelId=\"user-score\"\r\n                            className=\"form-control\"\r\n                            value={values[FIELD_NAMES.score]}\r\n                            name={FIELD_NAMES.score}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                        >\r\n                            <MenuItem value=\"0\">0</MenuItem>\r\n                            <MenuItem value=\"1\">1</MenuItem>\r\n                            <MenuItem value=\"2\">2</MenuItem>\r\n                            <MenuItem value=\"3\">3</MenuItem>\r\n                            <MenuItem value=\"4\">4</MenuItem>\r\n                            <MenuItem value=\"5\">5</MenuItem>\r\n                            <MenuItem value=\"6\">6</MenuItem>\r\n                            <MenuItem value=\"7\">7</MenuItem>\r\n                            <MenuItem value=\"8\">8</MenuItem>\r\n                            <MenuItem value=\"9\">9</MenuItem>\r\n                            <MenuItem value=\"10\">10</MenuItem>\r\n                        </Select>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start date\"\r\n                            value={values[FIELD_NAMES.start_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.start_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Times watched\"\r\n                            type=\"number\"\r\n                            name={FIELD_NAMES.times_read}\r\n                            value={values[FIELD_NAMES.times_read]}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={6}>\r\n                        <KeyboardDateTimePicker\r\n                            className=\"form-control datetime-control\"\r\n                            variant=\"inline\"\r\n                            format=\"do MMM yyyy HH:mm\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Finish date\"\r\n                            value={values[FIELD_NAMES.finish_date]}\r\n                            onChange={(date) => {\r\n                                values[FIELD_NAMES.finish_date] = date;\r\n                                setValues(values);\r\n                            }}\r\n                            KeyboardButtonProps={{'aria-label': 'change date'}}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container className=\"form-group\">\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Comments\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.comments]}\r\n                            name={FIELD_NAMES.comments}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <TextField\r\n                            className=\"form-control\"\r\n                            label=\"Tags\"\r\n                            multiline\r\n                            value={values[FIELD_NAMES.tags]}\r\n                            name={FIELD_NAMES.tags}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}/>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <DialogActions>\r\n                    <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\" onClick={handleClose}\r\n                                 disabled={isSubmitting}><FontAwesomeIcon icon={faCheck}/></CyberButton>\r\n                    {edit ? <CyberButton classNames=\"btn-danger\" variant=\"outlined\" onClick={(e) => {\r\n                        deleteEntry(id, list);\r\n                        handleClose()\r\n                    }}><FontAwesomeIcon icon={faTrash}/></CyberButton> : null}\r\n                </DialogActions>\r\n            </Form>\r\n        )}\r\n    </Formik></MuiPickersUtilsProvider>\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport {Anime, Manga} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {getUserAnimeEntry, getUserMangaEntry} from \"../../../actions/users\";\r\nimport {getUserAnimeEntryFormInitialValues, UserAnimeEntryForm} from \"../../user/forms/anime/forms\";\r\nimport {AddAnimeEntryInstantDropButton, AddMangaEntryInstantDropButton} from \"../../user/forms/shortForms\";\r\nimport {getUserMangaEntryFormInitialValues, UserMangaEntryForm} from \"../../user/forms/manga/forms\";\r\n\r\n\r\nfunction getTitleNameFromTitle(branch, title) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return title[Anime.title];\r\n        case BRANCH_MANGA:\r\n            return title[Manga.title];\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.anime_id\r\n * @param {Object} props.user_anime_entry\r\n * @param {boolean} props.edit\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction QuickUserAnimeEntryForm(props) {\r\n    const {anime_id, user_anime_entry, edit, handleClose} = props;\r\n    const initial_values = getUserAnimeEntryFormInitialValues(anime_id, user_anime_entry, edit);\r\n    return <UserAnimeEntryForm initial_values={initial_values} id={anime_id} edit={edit} handleClose={handleClose}/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.manga_id\r\n * @param {Object} props.user_manga_entry\r\n * @param {boolean} props.edit\r\n * @param {Object} props.list\r\n * @param {function} props.handleClose\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction QuickUserMangaEntryForm(props) {\r\n    const {manga_id, user_manga_entry, edit, handleClose} = props;\r\n    const initial_values = getUserMangaEntryFormInitialValues(manga_id, user_manga_entry, edit);\r\n    return <UserMangaEntryForm initial_values={initial_values} id={manga_id} edit={edit} handleClose={handleClose}/>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Number} props.title_id\r\n * @param {String} props.branch\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction InstantDropTitleButton(props) {\r\n    const {title_id, branch} = props;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AddAnimeEntryInstantDropButton\r\n                classNames=\"drop-button btn-contained-danger-dh\" variant={'contained'} anime_id={title_id}/>;\r\n        case BRANCH_MANGA:\r\n            return <AddMangaEntryInstantDropButton\r\n                classNames=\"drop-button btn-contained-danger-dh\" variant={'contained'} manga_id={title_id}/>;\r\n        default:\r\n            return null;\r\n    }\r\n\r\n}\r\n\r\n\r\nclass CardUserEditTitleEntry extends Component {\r\n    static propTypes = {\r\n        /** Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Id */\r\n        id: PropTypes.number.isRequired,\r\n        /** Title Object */\r\n        title: PropTypes.object.isRequired,\r\n        /** Status of the user for this title (Completed, Dropped, etc) */\r\n        user_status: PropTypes.string,\r\n        /** Hide the user buttons from the Title Card */\r\n        hideUserButtons: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.getUserTitleEntry = this.getUserTitleEntry.bind(this);\r\n        this.getQuickUserTitleEntryForm = this.getQuickUserTitleEntryForm.bind(this);\r\n        this.state = {open: false};\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({open: false});\r\n        this.props.hideUserButtons();\r\n    };\r\n\r\n    getUserTitleEntry() {\r\n        this.setState({open: true});\r\n        switch (this.props.branch) {\r\n            case BRANCH_ANIME:\r\n                this.props.getUserAnimeEntry(this.props.id);\r\n                return;\r\n            case BRANCH_MANGA:\r\n                this.props.getUserMangaEntry(this.props.id);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    getQuickUserTitleEntryForm(edit) {\r\n        switch (this.props.branch) {\r\n            case BRANCH_ANIME:\r\n                return <QuickUserAnimeEntryForm\r\n                    anime_id={this.props.id}\r\n                    user_anime_entry={this.props.user_anime_entry}\r\n                    edit={edit}\r\n                    handleClose={this.handleClose}\r\n                />;\r\n            case BRANCH_MANGA:\r\n                return <QuickUserMangaEntryForm\r\n                    manga_id={this.props.id}\r\n                    user_manga_entry={this.props.user_manga_entry}\r\n                    edit={edit}\r\n                    handleClose={this.handleClose}\r\n                />;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let edit = !!this.props.user_status;\r\n        const add_button_title = edit ? 'Edit entry' : 'Add to list';\r\n        console.log('branch:', this.props.branch);\r\n\r\n        return (\r\n            <>\r\n                {this.props.entry_loading ?\r\n                    <div className=\"user-buttons-loading\"><CircularProgress thickness={6} size={30}/></div> : <>\r\n                        <CyberButton classNames=\"add-button btn-contained-primary-dh\" color={'primary'}\r\n                                     variant={'contained'} title={add_button_title} onClick={this.getUserTitleEntry}>\r\n                            <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                        </CyberButton>\r\n                        {!edit ? <InstantDropTitleButton branch={this.props.branch} title_id={this.props.id}/> : null}\r\n                    </>}\r\n\r\n                <Dialog open={this.state.open} onClose={this.handleClose}\r\n                        aria-labelledby=\"form-dialog-title\" className=\"user-title-entry-dialog\">\r\n                    {!this.props.entry_loading ?\r\n                        <DialogTitle>\r\n                            {edit ? 'Edit' : 'Add'} {getTitleNameFromTitle(this.props.branch, this.props.title)}\r\n                        </DialogTitle> : null}\r\n                    <DialogContent>\r\n                        {this.props.entry_loading ? <CircularProgress/> : this.getQuickUserTitleEntryForm(edit)}\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_entry: state.users.user_anime_entry,\r\n    user_manga_entry: state.users.user_manga_entry,\r\n    entry_loading: state.users.entry_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUserAnimeEntry, getUserMangaEntry})(CardUserEditTitleEntry)\r\n","import React from \"react\";\r\n\r\nimport {faServer} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA, BRANCH_PEOPLE,\r\n    USER_ANIME_STATUSES,\r\n    USER_MANGA_STATUSES\r\n} from \"../../../globals\";\r\nimport {\r\n    ANIME_DISPLAY,\r\n    CHARACTERS_DISPLAY,\r\n    EROGE_DISPLAY,\r\n    MANGA_DISPLAY,\r\n    PERSON_DISPLAY\r\n} from \"../../../urls\";\r\nimport {\r\n    Anime,\r\n    Character,\r\n    Eroge,\r\n    Manga,\r\n    ANIME_SHORT_STATUS,\r\n    MANGA_SHORT_STATUS,\r\n    Person\r\n} from \"../../../models\";\r\nimport {formatContentDateByKnown} from \"../../functions\";\r\nimport {FilterSchema} from \"../filters/field_names\";\r\nimport CardUserEditTitleEntry from \"./CardUserEditTitleEntry\";\r\n\r\n\r\nfunction getUserStatusChip(user_status) {\r\n    switch (user_status) {\r\n        case USER_ANIME_STATUSES.completed:\r\n            return {label: user_status, color: 'primary'};\r\n        case USER_ANIME_STATUSES.watching:\r\n            return {label: user_status, color: 'success'};\r\n        case USER_MANGA_STATUSES.reading:\r\n            return {label: user_status, color: 'success'};\r\n        case USER_ANIME_STATUSES.on_hold:\r\n            return {label: user_status, color: 'warning'};\r\n        case USER_ANIME_STATUSES.dropped:\r\n            return {label: user_status, color: 'danger'};\r\n        case USER_ANIME_STATUSES.plan_to_watch:\r\n            return {label: user_status, color: 'default'};\r\n        case USER_MANGA_STATUSES.plan_to_read:\r\n            return {label: user_status, color: 'default'};\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.title {String} Title\r\n * @param props.user_status {String} Status of the user for this anime (Completed, Dropped, etc)\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserCardButtons(props) {\r\n    const {branch, id, title, user_status, hideUserButtons} = props;\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <CardUserEditTitleEntry id={id} branch={BRANCH_ANIME} title={title} user_status={user_status}\r\n                                           hideUserButtons={hideUserButtons}/>;\r\n        case BRANCH_MANGA:\r\n            return <CardUserEditTitleEntry id={id} branch={BRANCH_MANGA} title={title} user_status={user_status}\r\n                                           hideUserButtons={hideUserButtons}/>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\nexport function formatTitle(branch, title, user_status) {\r\n    let start_date = '';\r\n    let end_date = '';\r\n    let card_title = {\r\n        id: 0,\r\n        link: '',\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: '',\r\n        chipset_header: [],\r\n        chipset_one: [],\r\n        chipset_two: [],\r\n        chipset_three: [],\r\n        chipset_four: []\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            start_date = formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Anime.air_end], title[Anime.air_end_known], true);\r\n\r\n            card_title.id = title[Anime.id];\r\n            card_title.link = ANIME_DISPLAY(title[Anime.id]);\r\n            card_title.cover_images = title[Anime.anime_cover_images];\r\n            card_title.cdn_cover_images = title[Anime.anime_cdn_cover_images];\r\n            card_title.title = title[Anime.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.label],\r\n                    color: ANIME_SHORT_STATUS[title[Anime.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Anime.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Anime.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Anime.anime_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n            card_title.chipset_one = [\r\n                title[Anime.type],\r\n                title[Anime.episodes] ? `${title[Anime.episodes]}ep` : null,\r\n                title[Anime.minutes_per_episode] ? `${title[Anime.minutes_per_episode]}m` : null,\r\n                title[Anime.rating_short],\r\n            ];\r\n            card_title.chipset_two = title[Anime.genres_csv] ? title[Anime.genres_csv].split(', ') : [];\r\n            card_title.chipset_three = [\r\n                title[Anime.score] ? `MAL: ${title[Anime.score]}` : null\r\n            ];\r\n            card_title.chipset_four = [\r\n                start_date ? `${start_date}${end_date ? ' to ' + end_date : ''}` : null\r\n            ];\r\n            return card_title;\r\n        case BRANCH_MANGA:\r\n            start_date = formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true);\r\n            end_date = formatContentDateByKnown(title[Manga.air_end], title[Manga.air_end_known], true);\r\n            card_title.id = title[Manga.id];\r\n            card_title.link = MANGA_DISPLAY(title[Manga.id]);\r\n            card_title.cover_images = title[Manga.manga_cover_images];\r\n            card_title.cdn_cover_images = title[Manga.manga_cdn_cover_images];\r\n            card_title.title = title[Manga.title];\r\n            try {\r\n                card_title.chipset_header = [{\r\n                    label: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.label],\r\n                    color: MANGA_SHORT_STATUS[title[Manga.status]][FilterSchema.color]\r\n                }];\r\n            } catch (e) {\r\n            }\r\n            if (title[Manga.pending_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-PEN', color: 'warning'});\r\n            if (title[Manga.deleted_by_MAL])\r\n                card_title.chipset_header.push({label: 'M-DEL', color: 'danger'});\r\n            if (title[Manga.manga_on_server])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            if (user_status)\r\n                card_title.chipset_header.push(getUserStatusChip(user_status));\r\n            card_title.chipset_one = [\r\n                title[Manga.type],\r\n                title[Manga.volumes] ? `${title[Manga.volumes]}v` : null,\r\n                title[Manga.chapters] ? `${title[Manga.chapters]}c` : null,\r\n            ];\r\n            card_title.chipset_two = title[Manga.genres_csv] ? title[Manga.genres_csv].split(', ') : [];\r\n            card_title.chipset_three = [\r\n                title[Manga.score] ? `MAL: ${title[Manga.score]}` : null\r\n            ];\r\n            card_title.chipset_four = [\r\n                start_date ? `${start_date}${end_date ? ' to ' + end_date : ''}` : null\r\n            ];\r\n            return card_title;\r\n        case BRANCH_CHARACTERS:\r\n            card_title.id = title[Character.id];\r\n            card_title.link = CHARACTERS_DISPLAY(title[Character.id]);\r\n            card_title.cover_images = title[Character.character_cover_images];\r\n            card_title.cdn_cover_images = title[Character.character_cdn_cover_images];\r\n            card_title.title = title[Character.short_name] ? title[Character.short_name] : title[Character.character_name];\r\n            return card_title;\r\n        case BRANCH_PEOPLE:\r\n            card_title.id = title[Person.id];\r\n            card_title.link = PERSON_DISPLAY(title[Person.id]);\r\n            card_title.cover_images = title[Person.person_cover_images];\r\n            card_title.cdn_cover_images = title[Person.person_cdn_cover_images];\r\n            card_title.title = title[Person.person_name];\r\n            return card_title;\r\n        case BRANCH_EROGE:\r\n            card_title.id = title[Eroge.id];\r\n            card_title.link = EROGE_DISPLAY(title[Eroge.id]);\r\n            card_title.cover_images = title[Eroge.eroge_cover_images];\r\n            card_title.title = title[Eroge.eroge_name].replace('[Android]', '').trim();\r\n            if (title[Eroge.downloaded])\r\n                card_title.chipset_header.push({label: <FontAwesomeIcon icon={faServer}/>, color: 'secondary'});\r\n            card_title.chipset_one = [\r\n                title[Eroge.type],\r\n                title[Eroge.platforms],\r\n            ];\r\n            card_title.chipset_two = title[Eroge.tags] ? title[Eroge.tags].split(', ') : [];\r\n            card_title.chipset_three = [\r\n                title[Eroge.rating] ? `HG ${title[Eroge.rating]}` : null\r\n            ];\r\n            card_title.chipset_four = [\r\n                title[Eroge.language],\r\n                title[Eroge.censorship],\r\n            ];\r\n            return card_title;\r\n        default:\r\n            return card_title\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport {playClickSound, playHoverSound} from \"../sounds\";\r\nimport {formatTitle, UserCardButtons} from \"./functions\";\r\nimport {getTitleCoverImage} from \"../../functions\";\r\n\r\n\r\nclass TitleCard extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Title Object (Anime, Manga, etc.) */\r\n        title: PropTypes.object.isRequired,\r\n        /** Index number for the card */\r\n        index: PropTypes.number,\r\n        /** Status of the user entry for this title (Watching, Reading, Completed, etc.) */\r\n        user_status: PropTypes.string,\r\n        /** If the card should be in a small format (No chipsets, only title) */\r\n        mini: PropTypes.bool,\r\n        /** If the user edit/add buttons for the title should appear */\r\n        user_buttons: PropTypes.bool,\r\n        /** Custom classname for the title card container */\r\n        containerClassNames: PropTypes.string,\r\n        /** Custom classname for the title card */\r\n        classNames: PropTypes.string,\r\n        /** If true it the card will not use state to check if the cover image is\r\n         * loaded, it will directly add the img background to the card */\r\n        skip_img_preload: PropTypes.bool,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.showUserButtons = this.showUserButtons.bind(this);\r\n        this.hideUserButtons = this.hideUserButtons.bind(this);\r\n        this.cssHideUserButtons = this.cssHideUserButtons.bind(this);\r\n        this.state = {\r\n            img_loaded: false,\r\n            show_user_buttons: false,\r\n            css_hide_buttons: false,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log(prevState.css_hide_buttons);\r\n        if (prevState.css_hide_buttons)\r\n            this.setState({css_hide_buttons: false, show_user_buttons: false})\r\n    }\r\n\r\n    showUserButtons() {\r\n        this.setState({show_user_buttons: true, css_hide_buttons: false});\r\n    }\r\n\r\n    hideUserButtons() {\r\n        this.setState({show_user_buttons: false});\r\n    }\r\n\r\n    cssHideUserButtons() {\r\n        this.setState({css_hide_buttons: true});\r\n    }\r\n\r\n    render() {\r\n        const card_title = formatTitle(this.props.branch, this.props.title, this.props.user_status);\r\n        let img_url = getTitleCoverImage(card_title.cdn_cover_images, card_title.cover_images);\r\n        let class_names = '';\r\n        if (this.props.classNames)\r\n            class_names = this.props.classNames;\r\n\r\n        let container_class_names = '';\r\n        if (this.props.containerClassNames)\r\n            container_class_names = this.props.containerClassNames;\r\n\r\n        let backgroundImage = this.state.img_loaded || this.props.skip_img_preload ? `url(\"${img_url}\")` : 'none';\r\n\r\n        return (\r\n            <div className={`title-card-container ${container_class_names}`}\r\n                 onMouseOver={this.showUserButtons}\r\n                 onMouseEnter={this.showUserButtons}\r\n                 onMouseLeave={this.hideUserButtons}\r\n            >\r\n                {this.props.user_buttons && this.state.show_user_buttons ?\r\n                    <div className={this.state.css_hide_buttons ? 'user-buttons user-buttons-hidden' : 'user-buttons'}>\r\n                        <UserCardButtons\r\n                            branch={this.props.branch}\r\n                            id={card_title.id}\r\n                            title={this.props.title}\r\n                            user_status={this.props.user_status}\r\n                            hideUserButtons={this.cssHideUserButtons}\r\n                        />\r\n                    </div> : null}\r\n                <Link to={card_title.link}\r\n                      className={this.state.img_loaded ? `title-card fade-in ${class_names}` : `title-card ${class_names}`}\r\n                      style={{backgroundImage: backgroundImage}}\r\n                      onMouseEnter={playHoverSound} onClick={playClickSound}\r\n                >\r\n                    <img src={img_url} className=\"lazy-loaded-img\" alt=\"loader-img\" loading=\"lazy\"\r\n                         onLoad={() => {\r\n                             this.setState({img_loaded: true})\r\n                         }}/>\r\n                    <div className=\"chip-array\">\r\n                        {this.props.index ? <Chip variant=\"default\" size=\"small\" label={this.props.index}/> : null}\r\n                        {card_title.chipset_header ? card_title.chipset_header.map(chip => (\r\n                            chip ? <Chip variant=\"default\" size=\"small\" className={`chip-${chip['color']}`}\r\n                                         label={chip['label']}/> : null\r\n                        )) : null}\r\n                    </div>\r\n                    <h3>{card_title.title}</h3>\r\n                    {!this.props.mini ? <div className=\"title-card-body\">\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_one.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_two.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_three.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"chip-array\">\r\n                            {card_title.chipset_four.map(chip => (\r\n                                chip ? <Chip variant=\"default\" size=\"small\" label={chip}/> : null\r\n                            ))}\r\n                        </div>\r\n                    </div> : null}\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TitleCard\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\n\r\n\r\nfunction checkForKnownDate(known_date) {\r\n    return known_date.indexOf('day') >= 0 && known_date.indexOf('month') >= 0 && known_date.indexOf('year');\r\n}\r\n\r\nfunction horizontalScroll(e, container) {\r\n    e.preventDefault();\r\n    if (e.deltaY > 0) container.scrollLeft += 100;\r\n    else container.scrollLeft -= 100;\r\n}\r\n\r\nfunction addHorizontalScrollEventListener() {\r\n    const container = document.getElementById('season-titles-container');\r\n    container.addEventListener('wheel', (e) => horizontalScroll(e, container));\r\n}\r\n\r\nfunction removeHorizontalScrollEventListener() {\r\n    const container = document.getElementById('season-titles-container');\r\n    container.removeEventListener('wheel', (e) => horizontalScroll(e, container));\r\n}\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\n\r\nclass AnimeCurrentSeason extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n\r\n        this.state = {\r\n            current_year: new Date().getFullYear(),\r\n            current_month: new Date().getMonth() + 1,\r\n            current_season: '',\r\n            current_season_number: 1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let season;\r\n        if (this.state.current_month >= 1 && this.state.current_month <= 3) season = 1;\r\n        else if (this.state.current_month >= 4 && this.state.current_month <= 6) season = 2;\r\n        else if (this.state.current_month >= 7 && this.state.current_month <= 9) season = 3;\r\n        else if (this.state.current_month >= 10 && this.state.current_month <= 12) season = 4;\r\n\r\n        this.setState({current_season: getSeasonLabelFromSeasonNumber(season), current_season_number: season});\r\n\r\n        const season_filter = {year: this.state.current_year, season: season};\r\n        let filters = new FILTER_ANIME_INITIAL_VALUES();\r\n        filters = filters.VALUES;\r\n        this.props.filterAnime(null, filters, season_filter, null, true, false);\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n\r\n        addHorizontalScrollEventListener()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        removeHorizontalScrollEventListener()\r\n    }\r\n\r\n    render() {\r\n        const season_icon_and_class = getIconAndClassFromSeasonNumber(this.state.current_season_number);\r\n        return (\r\n            <div id=\"Current-Season\">\r\n                <div className=\"current-season-header\">\r\n                    <h3>\r\n                        Current Season{' '}\r\n                        <CyberLink to={ANIME_SEASON_DISPLAY(this.state.current_year, this.state.current_season_number)}>\r\n                            {this.state.current_year} {this.state.current_season}\r\n                        </CyberLink>{' '}\r\n                        <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                         className={season_icon_and_class.className}/>\r\n                    </h3>\r\n                </div>\r\n                <div id=\"season-titles-container\" className=\"current-season-titles-container\">\r\n                    {this.props.filtered_anime_loaded ?\r\n                        <div className=\"current-season-titles-wrapper\">\r\n                            {this.props.filtered_anime[ApiResult.results].map(anime => (\r\n                                checkForKnownDate(anime[Anime.air_start_known]) ? <TitleCard\r\n                                    containerClassNames=\"current-season-card-container\"\r\n                                    branch={BRANCH_ANIME}\r\n                                    title={anime}\r\n                                    user_status={\r\n                                        !isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                            this.props.user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                                /> : null\r\n                            ))}\r\n                        </div> : this.props.anime_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filtered_anime: state.anime.filtered_anime,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {filterAnime, getLoggedInUserAnimeEntryStatuses})(AnimeCurrentSeason)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Anime, AnimeData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.recently_added_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', anime_data[AnimeData.recently_added_anime])}\r\n\r\n                    {anime_data[AnimeData.recently_added_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction RecentlyDownloaded(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.recently_downloaded_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', anime_data[AnimeData.recently_added_anime])}\r\n                    {anime_data[AnimeData.recently_downloaded_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopUpcoming(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Upcoming Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_upcoming_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_upcoming_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScoredMal(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_scored_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_scored_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction MostPopularMal(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.most_popular_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.most_popular_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2010s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_2010s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_2010s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2000s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2000s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_2000s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_2000s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top90s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1990s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_90s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_90s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top80s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1980s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_80s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_80s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top70s(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1970s Anime</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.top_70s_anime] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {anime_data[AnimeData.top_70s_anime].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Anime Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopAnimeTabs(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Recently Downloaded</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Upcoming</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Score</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Most popular</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2010s</p>} {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2000s</p>} {...a11yProps(6)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 90s</p>} {...a11yProps(7)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 80s</p>} {...a11yProps(8)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 70s</p>} {...a11yProps(9)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    {console.log('in tab', anime_data)}\r\n                    <RecentlyAdded\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <RecentlyDownloaded\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopUpcoming\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <TopScoredMal\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <MostPopularMal\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={5} dir={theme.direction}>\r\n                    <Top2010s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={6} dir={theme.direction}>\r\n                    <Top2000s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={7} dir={theme.direction}>\r\n                    <Top90s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={8} dir={theme.direction}>\r\n                    <Top80s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={9} dir={theme.direction}>\r\n                    <Top70s\r\n                        anime_data={anime_data}\r\n                        anime_loading={anime_loading}\r\n                        anime_data_loaded={anime_data_loaded}\r\n                        user_anime_entry_statuses={user_anime_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty, isTimeLessThanAnHourAgo} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, AnimeData, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {TopAnimeTabs} from \"./tabs/TopAnimeTabs\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\nfunction horizontalScroll(e, container) {\r\n    e.preventDefault();\r\n    if (e.deltaY > 0) container.scrollLeft += 100;\r\n    else container.scrollLeft -= 100;\r\n}\r\n\r\nfunction addHorizontalScrollEventListener() {\r\n    const containers = document.getElementsByClassName('horizontal-scroll');\r\n    for (let x = 0; x < containers.length; x++)\r\n        containers[x].addEventListener('wheel', (e) => horizontalScroll(e, containers[x]));\r\n}\r\n\r\nfunction removeHorizontalScrollEventListener() {\r\n    const containers = document.getElementsByClassName('horizontal-scroll');\r\n    for (let x = 0; x < containers.length; x++)\r\n        containers[x].removeEventListener('wheel', (e) => horizontalScroll(e, containers[x]));\r\n}\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\nfunction CurrentSeason(props) {\r\n    const {anime_data, anime_loading, anime_data_loaded, user_anime_entry_statuses} = props;\r\n    const current_year = new Date().getFullYear();\r\n    let current_month = new Date().getMonth() + 1;\r\n    let current_season_number = 1;\r\n    if (current_month >= 1 && current_month <= 3) current_season_number = 1;\r\n    else if (current_month >= 4 && current_month <= 6) current_season_number = 2;\r\n    else if (current_month >= 7 && current_month <= 9) current_season_number = 3;\r\n    else if (current_month >= 10 && current_month <= 12) current_season_number = 4;\r\n    const current_season = getSeasonLabelFromSeasonNumber(current_season_number);\r\n\r\n    const season_icon_and_class = getIconAndClassFromSeasonNumber(current_season_number);\r\n    return <Grid xs={12} id=\"Current-Season\">\r\n        <div className=\"current-season-header\">\r\n            <h3>\r\n                Current Season{' '}\r\n                <CyberLink to={ANIME_SEASON_DISPLAY(current_year, current_season_number)}>\r\n                    {current_year} {current_season}\r\n                </CyberLink>{' '}\r\n                <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                 className={season_icon_and_class.className}/>\r\n            </h3>\r\n        </div>\r\n        <div id=\"season-titles-container\" className=\"current-season-titles-container horizontal-scroll\">\r\n            {anime_data_loaded && anime_data && anime_data[AnimeData.current_anime_season] ?\r\n                <div className=\"current-season-titles-wrapper\">\r\n                    {anime_data[AnimeData.current_anime_season].map(anime => (\r\n                        <TitleCard\r\n                            containerClassNames=\"current-season-card-container\"\r\n                            branch={BRANCH_ANIME}\r\n                            title={anime}\r\n                            user_status={\r\n                                !isEmpty(user_anime_entry_statuses) ?\r\n                                    user_anime_entry_statuses[anime[Anime.id].toString()] : null}\r\n                        />\r\n                    ))}\r\n                </div> : anime_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nclass TopAnime extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     addHorizontalScrollEventListener()\r\n    // }\r\n    //\r\n    // componentWillUnmount() {\r\n    //     removeHorizontalScrollEventListener()\r\n    // }\r\n\r\n    render() {\r\n        return <>\r\n            <CurrentSeason\r\n                anime_data={this.props.anime_data}\r\n                anime_loading={this.props.anime_loading}\r\n                anime_data_loaded={this.props.anime_data_loaded}\r\n                user_anime_entry_statuses={this.props.user_anime_entry_statuses}\r\n            />\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopAnimeTabs\r\n                anime_data={this.props.anime_data}\r\n                anime_loading={this.props.anime_loading}\r\n                anime_data_loaded={this.props.anime_data_loaded}\r\n                user_anime_entry_statuses={this.props.user_anime_entry_statuses}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data: state.anime.anime_data,\r\n    anime_loading: state.anime.anime_loading,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopAnime)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {ANIME_TAB_NAME, BRANCH_ANIME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport AnimeStatistics from \"./AnimeStatistics\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport AnimeCurrentSeason from \"../seasons/AnimeCurrentSeason\";\r\nimport {getAnimeData, getAnimeDataForHomePage} from \"../../../actions/anime\";\r\nimport {Anime, AnimeData, ApiResult} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\n\r\nimport '../../../assets/css/anime.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport TopAnime from \"./TopAnime\";\r\n\r\n\r\nclass AnimeHome extends Component {\r\n    componentDidMount() {\r\n        document.title = ANIME_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getAnimeDataForHomePage();\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Anime-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopAnime/>\r\n                    <Grid xs={12}>\r\n                        <AnimeStatistics/>\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeDataForHomePage, getLoggedInUserAnimeEntryStatuses})(AnimeHome)\r\n","import * as Yup from 'yup';\r\n\r\n\r\nexport const LoginSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required'),\r\n});\r\n\r\nexport const RegisterSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .min(4, 'Too Short!')\r\n        .max(12, 'Too Long!')\r\n        .required('Required!'),\r\n    email: Yup.string()\r\n        .email('Invalid email')\r\n        .required('Required!'),\r\n    password: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!'),\r\n    password2: Yup.string()\r\n        .min(6, 'Too Short!')\r\n        .max(128, 'Too Long!')\r\n        .required('Required!')\r\n        .test('passwords-match', 'Passwords must match!', function (value) {\r\n            return this.parent.password === value;\r\n        }),\r\n});\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Form, Formik} from 'formik';\r\n\r\nimport {LoginSchema} from \"./functions\";\r\nimport {login} from '../../actions/auth'\r\nimport {REGISTER} from \"../../urls\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {playClickSound, playHoverSound, playWarningSound} from \"../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nclass LoginForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            username: 'username',\r\n            password: 'password'\r\n        };\r\n\r\n        const initial_values = {\r\n            username: '',\r\n            password: ''\r\n        };\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={initial_values}\r\n                validationSchema={LoginSchema}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    this.props.login(values.username, values.password);\r\n                    setSubmitting(false);\r\n                }}>\r\n                {({errors, touched, values, handleChange, handleBlur, setSubmitting}) => (\r\n                    !this.props.user_loading ? <Form id=\"Login-Form\">\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            className=\"form-control\"\r\n                            value={values.username}\r\n                            name={field_names.username}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.username && touched.username}\r\n                            helperText={(errors.username && touched.username) && errors.username}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password && touched.password}\r\n                            helperText={(errors.password && touched.password) && errors.password}/>\r\n                        <CyberButton type=\"submit\" onClick={() => {\r\n                            if (errors.password || errors.username)\r\n                                playWarningSound()\r\n                        }}>\r\n                            Login\r\n                        </CyberButton>\r\n                        <p>Don't have an account? <RouterLink to={REGISTER} onClick={playClickSound}\r\n                                                              onMouseOver={playHoverSound}>Register</RouterLink></p>\r\n                    </Form> : <div className=\"loading\"><CircularProgress/></div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(LoginForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {INDEX} from \"../../urls\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nimport '../../assets/css/auth.css';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {img_loaded: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Login';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.user_authenticated)\r\n            return <Redirect to={INDEX}/>;\r\n\r\n        return (\r\n            <div id=\"Login\" className={this.state.img_loaded ? 'fade-in' : ''}>\r\n                <img src={'/static/media/girl-window.1732e4f9.jpg'} className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n                     onLoad={() => {this.setState({img_loaded: true})}} />\r\n                <Grid container>\r\n                    <Grid item xs={3} className=\"form-container box-light\">\r\n                        <h1>Login</h1>\r\n                        <LoginForm/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Login)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link as RouterLink} from 'react-router-dom';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Form, Formik} from 'formik';\r\n\r\nimport {RegisterSchema} from \"./functions\";\r\nimport {register} from '../../actions/auth'\r\nimport {LOGIN} from \"../../urls\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {playClickSound, playHoverSound, playWarningSound} from \"../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n\r\nclass RegisterForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            username: 'username',\r\n            email: 'email',\r\n            password: 'password',\r\n            password2: 'password2'\r\n        };\r\n\r\n        const initial_values = {\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            password2: ''\r\n        };\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={initial_values}\r\n                validationSchema={RegisterSchema}\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    const new_user = {\r\n                        username: values.username,\r\n                        password: values.password,\r\n                        email: values.email\r\n                    };\r\n                    this.props.register(new_user);\r\n                    setSubmitting(false);\r\n                }}>\r\n                {({errors, touched, values, handleChange, handleBlur}) => (\r\n                    !this.props.user_loading ? <Form id=\"Register-Form\">\r\n                        <TextField\r\n                            label=\"Username\"\r\n                            className=\"form-control\"\r\n                            value={values.username}\r\n                            name={field_names.username}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.username && touched.username}\r\n                            helperText={(errors.username && touched.username) && errors.username}/>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            className=\"form-control\"\r\n                            value={values.email}\r\n                            name={field_names.email}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.email && touched.email}\r\n                            helperText={(errors.email && touched.email) && errors.email}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password && touched.password}\r\n                            helperText={(errors.password && touched.password) && errors.password}/>\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            name={field_names.password2}\r\n                            value={values.password2}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={errors.password2 && touched.password2}\r\n                            helperText={(errors.password2 && touched.password2) && errors.password2}/>\r\n                        <CyberButton type=\"submit\" onClick={() => {\r\n                            if (errors.email || errors.username || errors.password || errors.password2)\r\n                                playWarningSound()\r\n                        }}>\r\n                            Register\r\n                        </CyberButton>\r\n                        <p>Already have an account? <RouterLink to={LOGIN} onClick={playClickSound}\r\n                                                              onMouseOver={playHoverSound}>Login</RouterLink></p>\r\n                    </Form> : <div className=\"loading\"><CircularProgress/></div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {register})(RegisterForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {REGISTER_TAB_NAME} from \"../../globals\";\r\nimport {INDEX} from \"../../urls\";\r\nimport RegisterForm from \"./RegisterForm\";\r\n\r\nimport '../../assets/css/auth.css';\r\n\r\n\r\nclass Register extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {img_loaded: false};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = REGISTER_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.user_authenticated)\r\n            return <Redirect to={INDEX}/>;\r\n\r\n        return (\r\n            <div id=\"Register\" className={this.state.img_loaded ? 'fade-in' : ''}>\r\n                <img src={'/static/media/girl-window.1732e4f9.jpg'} className=\"lazy-loaded-img\" alt=\"loader-img\"\r\n                     onLoad={() => {this.setState({img_loaded: true})}} />\r\n                <Grid container>\r\n                    <Grid item xs={3} className=\"form-container box-light\">\r\n                        <h1>Register</h1>\r\n                        <RegisterForm/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Register)\r\n","import {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_EROGE, BRANCH_MANGA} from \"../../../globals\";\r\nimport {AnimeFilterNames, ErogeFilterNames, MangaFilterNames} from \"./field_names\";\r\nimport {\r\n    deleteAnimeFilterPreset, deleteErogeFilterPreset, deleteMangaFilterPreset,\r\n    saveAnimeFilterPreset, saveErogeFilterPreset, saveMangaFilterPreset,\r\n    setSelectedAnimePreset, setSelectedErogePreset,\r\n    setSelectedMangaPreset,\r\n    updateAnimeFilterPreset, updateErogeFilterPreset,\r\n    updateMangaFilterPreset\r\n} from \"../../../actions/users\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nexport function setPreset(branch, preset, new_values, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            if (filters) {\r\n                if (filters[AnimeFilterNames.downloaded] === 'true') new_values[AnimeFilterNames.downloaded] = true;\r\n                if (filters[AnimeFilterNames.is_downloading] === 'true') new_values[AnimeFilterNames.is_downloading] = true;\r\n                if (filters[AnimeFilterNames.cannot_download] === 'true') new_values[AnimeFilterNames.cannot_download] = true;\r\n                if (filters[AnimeFilterNames.deleted_by_MAL] === 'true') new_values[AnimeFilterNames.deleted_by_MAL] = true;\r\n                if (filters[AnimeFilterNames.pending_by_MAL] === 'true') new_values[AnimeFilterNames.pending_by_MAL] = true;\r\n                if (filters[AnimeFilterNames.episodes_range]) new_values[AnimeFilterNames.episodes_range] = filters[AnimeFilterNames.episodes_range].split(',');\r\n                if (filters[AnimeFilterNames.length_range]) new_values[AnimeFilterNames.length_range] = filters[AnimeFilterNames.length_range].split(',');\r\n                if (filters[AnimeFilterNames.genres]) new_values[AnimeFilterNames.genres] = filters[AnimeFilterNames.genres].split(',');\r\n                if (filters[AnimeFilterNames.type]) new_values[AnimeFilterNames.type] = filters[AnimeFilterNames.type].split(',');\r\n                if (filters[AnimeFilterNames.status]) new_values[AnimeFilterNames.status] = filters[AnimeFilterNames.status].split(',');\r\n                if (filters[AnimeFilterNames.rating_short]) new_values[AnimeFilterNames.rating_short] = filters[AnimeFilterNames.rating_short].split(',');\r\n                if (filters[AnimeFilterNames.video_quality]) new_values[AnimeFilterNames.video_quality] = filters[AnimeFilterNames.video_quality].split(',');\r\n                if (filters[AnimeFilterNames.audio_channel]) new_values[AnimeFilterNames.audio_channel] = filters[AnimeFilterNames.audio_channel].split(',');\r\n                if (filters[AnimeFilterNames.user_exclude]) new_values[AnimeFilterNames.user_exclude] = filters[AnimeFilterNames.user_exclude].split(',');\r\n                new_values[AnimeFilterNames.ordering] = filters[AnimeFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedAnimePreset(preset));\r\n            return new_values;\r\n        case BRANCH_MANGA:\r\n            if (filters) {\r\n                if (filters[MangaFilterNames.downloaded] === 'true') new_values[MangaFilterNames.downloaded] = true;\r\n                if (filters[MangaFilterNames.is_downloading] === 'true') new_values[MangaFilterNames.is_downloading] = true;\r\n                if (filters[MangaFilterNames.cannot_download] === 'true') new_values[MangaFilterNames.cannot_download] = true;\r\n                if (filters[MangaFilterNames.deleted_by_MAL] === 'true') new_values[MangaFilterNames.deleted_by_MAL] = true;\r\n                if (filters[MangaFilterNames.pending_by_MAL] === 'true') new_values[MangaFilterNames.pending_by_MAL] = true;\r\n                if (filters[MangaFilterNames.volumes_range]) new_values[MangaFilterNames.volumes_range] = filters[MangaFilterNames.volumes_range].split(',');\r\n                if (filters[MangaFilterNames.chapters_range]) new_values[MangaFilterNames.chapters_range] = filters[MangaFilterNames.chapters_range].split(',');\r\n                if (filters[MangaFilterNames.genres]) new_values[MangaFilterNames.genres] = filters[MangaFilterNames.genres].split(',');\r\n                if (filters[MangaFilterNames.type]) new_values[MangaFilterNames.type] = filters[MangaFilterNames.type].split(',');\r\n                if (filters[MangaFilterNames.status]) new_values[MangaFilterNames.status] = filters[MangaFilterNames.status].split(',');\r\n                if (filters[MangaFilterNames.user_exclude]) new_values[MangaFilterNames.user_exclude] = filters[MangaFilterNames.user_exclude].split(',');\r\n                new_values[MangaFilterNames.ordering] = filters[MangaFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedMangaPreset(preset));\r\n            return new_values;\r\n        case BRANCH_CHARACTERS:\r\n            return new_values;\r\n        case BRANCH_EROGE:\r\n            if (filters) {\r\n                if (filters[ErogeFilterNames.downloaded] === 'true') new_values[ErogeFilterNames.downloaded] = true;\r\n                if (filters[ErogeFilterNames.type]) new_values[ErogeFilterNames.type] = filters[ErogeFilterNames.type].split(',');\r\n                if (filters[ErogeFilterNames.platforms]) new_values[ErogeFilterNames.platforms] = filters[ErogeFilterNames.platforms].split(',');\r\n                if (filters[ErogeFilterNames.censorship]) new_values[ErogeFilterNames.censorship] = filters[ErogeFilterNames.censorship].split(',');\r\n                if (filters[ErogeFilterNames.language]) new_values[ErogeFilterNames.language] = filters[ErogeFilterNames.language].split(',');\r\n                if (filters[ErogeFilterNames.tags]) new_values[ErogeFilterNames.tags] = filters[ErogeFilterNames.tags].split(',');\r\n                new_values[ErogeFilterNames.ordering] = filters[ErogeFilterNames.ordering];\r\n            }\r\n            store.dispatch(setSelectedErogePreset(preset));\r\n            return new_values;\r\n        default:\r\n            return new_values\r\n    }\r\n}\r\n\r\n\r\nexport function updateFilterPreset(branch, preset_id, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(updateAnimeFilterPreset(preset_id, filters));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(updateMangaFilterPreset(preset_id, filters));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(updateErogeFilterPreset(preset_id, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function saveFilterPreset(branch, preset_name, filters) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(saveAnimeFilterPreset(preset_name, filters));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(saveMangaFilterPreset(preset_name, filters));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(saveErogeFilterPreset(preset_name, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function deleteFilterPreset(branch, preset_id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(deleteAnimeFilterPreset(preset_id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(deleteMangaFilterPreset(preset_id));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(deleteErogeFilterPreset(preset_id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getSelectedPreset(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return store.getState().users.selected_anime_preset;\r\n        case BRANCH_MANGA:\r\n            return store.getState().users.selected_manga_preset;\r\n        case BRANCH_CHARACTERS:\r\n            return;\r\n        case BRANCH_EROGE:\r\n            return store.getState().users.selected_eroge_preset;\r\n        default:\r\n            return\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCog, faPlus, faSave, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport {FiltersPreset} from \"../../../models\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {getResetValuesFromBranch} from \"../../browse/functions\";\r\nimport {deleteFilterPreset, getSelectedPreset, saveFilterPreset, setPreset, updateFilterPreset} from \"./functions\";\r\nimport {CyberButton} from \"../common/common\";\r\n\r\n\r\nclass PresetFilters extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Preset filters for the user */\r\n        presets: PropTypes.array.isRequired,\r\n        /** Currently active filters, from state */\r\n        filters: PropTypes.object.isRequired,\r\n        /** Function to run on submit when changing the preset */\r\n        onSubmit: PropTypes.func.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onPresetChange = this.onPresetChange.bind(this);\r\n        this.onPresetNew = this.onPresetNew.bind(this);\r\n        this.onPresetUpdate = this.onPresetUpdate.bind(this);\r\n        this.onPresetDelete = this.onPresetDelete.bind(this);\r\n        this.state = {\r\n            preset: getSelectedPreset(this.props.branch)\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.preset !== getSelectedPreset(this.props.branch))\r\n            this.setState({preset: getSelectedPreset(this.props.branch)})\r\n    }\r\n\r\n    onPresetChange(e) {\r\n        if (e.target.value === -1) {\r\n            this.setState({preset: {}});\r\n            return;\r\n        }\r\n        for (let x = 0; x < this.props.presets.length; x++) {\r\n            if (this.props.presets[x][FiltersPreset.id] === e.target.value) {\r\n                let new_values = getResetValuesFromBranch(this.props.branch);\r\n\r\n                let filters = this.props.presets[x][FiltersPreset.filters];\r\n                if (typeof this.props.presets[x][FiltersPreset.filters] !== 'object')\r\n                    filters = JSON.parse(this.props.presets[x][FiltersPreset.filters]);\r\n\r\n                new_values = setPreset(this.props.branch, this.props.presets[x], new_values, filters);\r\n\r\n                this.setState({preset: this.props.presets[x]}, () => {\r\n                    this.props.onSubmit(e, new_values);\r\n                });\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    onPresetUpdate() {\r\n        if (!isEmpty(this.state.preset))\r\n            updateFilterPreset(this.props.branch, this.state.preset[FiltersPreset.id], this.props.filters);\r\n    }\r\n\r\n    onPresetNew() {\r\n        let preset_name = prompt('Enter the preset name:', 'New Preset');\r\n        if (preset_name)\r\n            saveFilterPreset(this.props.branch, preset_name, this.props.filters)\r\n    }\r\n\r\n    onPresetDelete() {\r\n        if (window.confirm(`Delete ${this.state.preset[FiltersPreset.preset_name]} preset?`))\r\n            deleteFilterPreset(this.props.branch, this.state.preset[FiltersPreset.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Preset-Filters\">\r\n                <Select label=\"Options\" className=\"preset-settings\" value={-1}>\r\n                    <MenuItem style={{display: 'none'}} value={-1}>\r\n                        <FontAwesomeIcon icon={faCog}/>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={1}>\r\n                        <CyberButton title={'Create preset with current filters'} onClick={this.onPresetNew}>\r\n                            <FontAwesomeIcon icon={faPlus}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={2}>\r\n                        <CyberButton title={'Update selected preset with current filters'} onClick={this.onPresetUpdate}>\r\n                            <FontAwesomeIcon icon={faSave}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                    <MenuItem className=\"settings-buttons\" value={3}>\r\n                        <CyberButton title={'Delete selected preset'} onClick={this.onPresetDelete}>\r\n                            <FontAwesomeIcon icon={faTrash}/>\r\n                        </CyberButton>\r\n                    </MenuItem>\r\n                </Select>\r\n                {this.props.presets ? <>\r\n                    <Select\r\n                        id=\"user-filters-preset\"\r\n                        className=\"preset-selector\"\r\n                        label=\"Preset\"\r\n                        value={this.state.preset[FiltersPreset.id] ? this.state.preset[FiltersPreset.id] : -1}\r\n                        onChange={this.onPresetChange}\r\n                    >\r\n                        <MenuItem value={-1}>\r\n                            Select Preset\r\n                        </MenuItem>\r\n                        {this.props.presets.map(preset => (\r\n                            <MenuItem value={preset[FiltersPreset.id]}>\r\n                                {preset[FiltersPreset.preset_name]}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PresetFilters\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport {useTheme, makeStyles} from '@material-ui/core/styles';\r\nimport {VariableSizeList} from 'react-window';\r\nimport {Typography} from '@material-ui/core';\r\nimport {matchSorter} from 'match-sorter'\r\n\r\nconst LISTBOX_PADDING = 8; // px\r\n\r\nfunction renderRow(props) {\r\n    const {data, index, style} = props;\r\n    return React.cloneElement(data[index], {\r\n        style: {\r\n            ...style,\r\n            top: style.top + LISTBOX_PADDING,\r\n        },\r\n    });\r\n}\r\n\r\nconst OuterElementContext = React.createContext({});\r\n\r\nconst OuterElementType = React.forwardRef((props, ref) => {\r\n    const outerProps = React.useContext(OuterElementContext);\r\n    return <div ref={ref} {...props} {...outerProps} />;\r\n});\r\n\r\nfunction useResetCache(data) {\r\n    const ref = React.useRef(null);\r\n    React.useEffect(() => {\r\n        if (ref.current != null) {\r\n            ref.current.resetAfterIndex(0, true);\r\n        }\r\n    }, [data]);\r\n    return ref;\r\n}\r\n\r\n// Adapter for react-window\r\nconst ListboxComponent = React.forwardRef(function ListboxComponent(props, ref) {\r\n    const {children, ...other} = props;\r\n    const itemData = React.Children.toArray(children);\r\n    const theme = useTheme();\r\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), {noSsr: true});\r\n    const itemCount = itemData.length;\r\n    const itemSize = smUp ? 36 : 48;\r\n\r\n    const getChildSize = (child) => {\r\n        if (React.isValidElement(child) && child.type === ListSubheader) {\r\n            return 48;\r\n        }\r\n\r\n        return itemSize;\r\n    };\r\n\r\n    const getHeight = () => {\r\n        if (itemCount > 8) {\r\n            return 8 * itemSize;\r\n        }\r\n        return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\r\n    };\r\n\r\n    const gridRef = useResetCache(itemCount);\r\n\r\n    console.log('item count:', itemCount);\r\n\r\n    return (\r\n        <div ref={ref}>\r\n            <OuterElementContext.Provider value={other}>\r\n                <VariableSizeList\r\n                    itemData={itemData}\r\n                    height={getHeight() + 2 * LISTBOX_PADDING}\r\n                    width=\"100%\"\r\n                    ref={gridRef}\r\n                    outerElementType={OuterElementType}\r\n                    innerElementType=\"ul\"\r\n                    itemSize={(index) => getChildSize(itemData[index])}\r\n                    overscanCount={5}\r\n                    itemCount={itemCount}\r\n                >\r\n                    {renderRow}\r\n                </VariableSizeList>\r\n            </OuterElementContext.Provider>\r\n        </div>\r\n    );\r\n});\r\n\r\nListboxComponent.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n\r\n// function random(length) {\r\n//     const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n//     let result = '';\r\n//\r\n//     for (let i = 0; i < length; i += 1) {\r\n//         result += characters.charAt(Math.floor(Math.random() * characters.length));\r\n//     }\r\n//\r\n//     return result;\r\n// }\r\n\r\nconst useStyles = makeStyles({\r\n    listbox: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 0,\r\n            margin: 0,\r\n        },\r\n    },\r\n});\r\n\r\n// const OPTIONS = Array.from(new Array(10000))\r\n//     .map(() => random(10 + Math.ceil(Math.random() * 20)))\r\n//     .sort((a, b) => a.toUpperCase().localeCompare(b.toUpperCase()));\r\n\r\nconst renderGroup = (params) => [\r\n    <ListSubheader key={params.key} component=\"div\">\r\n        {params.group}\r\n    </ListSubheader>,\r\n    params.children,\r\n];\r\n\r\nexport default function Virtualize(props) {\r\n    const {titles} = props;\r\n    const classes = useStyles();\r\n\r\n    const filterOptions = (options, { inputValue }) =>\r\n        matchSorter(options, inputValue);\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"virtualize-demo\"\r\n            style={{width: 300}}\r\n            disableListWrap\r\n            classes={classes}\r\n            ListboxComponent={ListboxComponent}\r\n            filterOptions={filterOptions}\r\n            // renderGroup={renderGroup}\r\n            options={titles}\r\n            // groupBy={(option) => option[0].toUpperCase()}\r\n            renderInput={(params) => <TextField {...params} variant=\"outlined\" label=\"10,000 options\"/>}\r\n            renderOption={(option) => <Typography noWrap>{option}</Typography>}\r\n        />\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown,\r\n    faFilter, faPlus, faSave, faSortAmountDown, faSortAmountDownAlt,\r\n    faSortNumericDown,\r\n    faSortNumericDownAlt,\r\n    faTimes, faTrash,\r\n    faUndoAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport {setCookieShowFilters} from \"../../../actions/cookies\";\r\nimport {filterTitles, getResetValuesFromBranch} from \"../../browse/functions\";\r\nimport {ApiResult, FiltersPreset} from \"../../../models\";\r\nimport {CyberButton} from \"../common/common\";\r\nimport {AnimeFilterNames, FilterSchema, FilterSchemaType} from \"./field_names\";\r\nimport store from \"../../../store\";\r\n\r\nimport '../../../assets/css/filters.css'\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Filter} from \"@material-ui/icons\";\r\nimport CyberFooter from \"../footer/CyberFooter\";\r\nimport {saveAnimeFilterPreset, setSelectedAnimePreset} from \"../../../actions/users\";\r\nimport PresetFilters from \"./PresetFilters\";\r\n// import SearchAutocomplete from \"./SearchAutocomplete\";\r\nimport {setPreset} from \"./functions\";\r\nimport {act} from \"@testing-library/react\";\r\nimport Virtualize from \"./SearchAutocomplete\";\r\nimport {playClickSound} from \"../sounds\";\r\n\r\n\r\nfunction getSliderLabel(values, max, label_name) {\r\n    let value_2 = `${values[1]}`;\r\n    if (values[1] === max)\r\n        value_2 = `${values[1] - 1}+`;\r\n    return `${values[0]} to ${value_2} ${label_name.split('_')[0]}`\r\n}\r\n\r\nfunction checkSliderDefaults(values, min, max) {\r\n    return !(parseInt(values[0]) === min && parseInt(values[1]) === max);\r\n}\r\n\r\nfunction getGenreImgSrc(name, values) {\r\n    const img_name = name.toLowerCase().replaceAll(' ', '_');\r\n    let ext = 'jpg';\r\n    if (values.indexOf(name) >= 0) ext = 'gif';\r\n    return `/images/genre_icons/${img_name}.${ext}`\r\n}\r\n\r\nfunction getOrderIcon(order, active) {\r\n    let ordering = order;\r\n    if (ordering.indexOf('-') === 0 && ordering.replace('-', '') === active)\r\n        return faSortAmountDown;\r\n    return faSortAmountDownAlt\r\n}\r\n\r\nfunction getOrderValue(order, active) {\r\n    return order.replace('-', '') === active;\r\n}\r\n\r\n/**\r\n * Adjusts the height of the filters wrapper based on\r\n * active filters, if no filters are active, the height is set to 0\r\n */\r\nfunction changeHeightOfActiveFiltersWrapperOnChange() {\r\n    let active_filters = document.getElementById('Active-Filters');\r\n    if (active_filters) {\r\n        if (active_filters.childNodes.length > 0) active_filters.parentNode.style.height = 'auto';\r\n        else active_filters.parentNode.style.height = '0';\r\n    }\r\n}\r\n\r\n// noinspection JSIgnoredPromiseFromCall,JSUnresolvedVariable\r\nclass TitlesFilter extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Previous filters from cookies */\r\n        title_filters: PropTypes.object.isRequired,\r\n        /** Selected season, if called from display season page */\r\n        season: PropTypes.object,\r\n        /** User list object {pk: selected filter:} if called from user list page */\r\n        list: PropTypes.object,\r\n        /** Main filters */\r\n        main_filters: PropTypes.array,\r\n        /** Regular filters */\r\n        regular_filters: PropTypes.array,\r\n        /** Wide filters (ex. Genres) */\r\n        wide_filters: PropTypes.array,\r\n        /** Ordering filters */\r\n        order_filters: PropTypes.array,\r\n        /** Preset filters for the user */\r\n        presets: PropTypes.array,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onGenreEnter = this.onGenreEnter.bind(this);\r\n        this.onGenreLeave = this.onGenreLeave.bind(this);\r\n        this.onGenreChange = this.onGenreChange.bind(this);\r\n        this.checkFormValuesFromCookies = this.checkFormValuesFromCookies.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onReset = this.onReset.bind(this);\r\n\r\n        this.state = this.props.title_filters;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (JSON.stringify(prevProps.title_filters) !== JSON.stringify(this.props.title_filters))\r\n            this.setState(this.props.title_filters);\r\n    }\r\n\r\n    /**\r\n     * Update the Formik values with the cookie filter values, because sometimes\r\n     * when filtering from a user list the values don't update correctly.\r\n     * @returns {boolean} True if the values should be updated\r\n     */\r\n    checkFormValuesFromCookies() {\r\n        let filters = Object.assign({}, this.state);\r\n        let cookie_filters = Object.assign({}, this.props.title_filters);\r\n        return JSON.stringify(filters) !== JSON.stringify(cookie_filters);\r\n    }\r\n\r\n    /**\r\n     * When entering a genre div, change the image .jpg to .gif.\r\n     * @param genreFilter {String} name of the genre.\r\n     */\r\n    onGenreEnter(genreFilter) {\r\n        let img = document.getElementById(\"img_\" + genreFilter);\r\n        if (!img.classList.contains('active-genre'))\r\n            img.src = img.src.slice(0, -3) + 'gif';\r\n    }\r\n\r\n    /**\r\n     * When leaving the genre div revert the .gif image back to .jpg.\r\n     * @param genreFilter {String} name of the genre.\r\n     */\r\n    onGenreLeave(genreFilter) {\r\n        let img = document.getElementById(\"img_\" + genreFilter);\r\n        if (!img.classList.contains('active-genre'))\r\n            img.src = img.src.slice(0, -3) + 'jpg';\r\n    }\r\n\r\n    /**\r\n     * When clicking on a genre set it as active by adding a css\r\n     * class, or remove the class if it was already active.\r\n     * @param e {Object} Mouse event.\r\n     */\r\n    onGenreChange(e) {\r\n        if (e.target.checked)\r\n            e.target.nextSibling.firstChild.classList.add(\"active-genre\");\r\n        else\r\n            e.target.nextSibling.firstChild.classList.remove(\"active-genre\");\r\n    };\r\n\r\n    /**\r\n     * Called on submit of the filters, calls the filter\r\n     * title action with the active filters\r\n     * @param e {Object} Mouse event\r\n     * @param preset {Object} Optional, Filter preset, default null\r\n     */\r\n    onSubmit(e, preset = null) {\r\n        e.preventDefault();\r\n        console.log('one order:', this.state);\r\n        if (preset)\r\n            this.setState(preset, () => {\r\n                this.onSubmit(e)\r\n            });\r\n        else filterTitles(this.props.branch, 1, this.state, this.props.season, this.props.list);\r\n    }\r\n\r\n    /**\r\n     * Called on reset of the filters, resets the active\r\n     * filters and ordering to default, and calls the filter title action\r\n     */\r\n    onReset() {\r\n        const reset_values = getResetValuesFromBranch(this.props.branch);\r\n        this.setState(reset_values);\r\n        setPreset(this.props.branch, {});\r\n        filterTitles(this.props.branch, 1, reset_values, this.props.season, this.props.list);\r\n    }\r\n\r\n    render() {\r\n        const uses_presets = this.props.presets !== undefined;\r\n        const field_names = {\r\n            search: 'search',\r\n            ordering: 'ordering',\r\n        };\r\n        changeHeightOfActiveFiltersWrapperOnChange();\r\n\r\n        return (\r\n            <Grid id=\"Filters\" container>\r\n                <Grid item xs={12}>\r\n                    <form className=\"filters-form\" onSubmit={this.onSubmit}>\r\n                        <Grid container>\r\n                            <Grid item xs={12} sm={6} md={4} lg={3} className=\"search-field-container\">\r\n                                {/*<Virtualize titles={this.props.searchable_titles}/>*/}\r\n                                {/*<SearchAutocomplete/>*/}\r\n                                {/*<Autocomplete*/}\r\n                                {/*    options={this.props.searchable_titles}*/}\r\n                                {/*    id=\"controlled-demo\"*/}\r\n                                {/*    value={this.state[field_names.search]}*/}\r\n                                {/*    onChange={(e, new_value) => {*/}\r\n                                {/*                        this.setState({[e.target.name]: new_value});*/}\r\n                                {/*        }}*/}\r\n                                {/*    renderInput={(params) => <TextField {...params}*/}\r\n                                {/*                    label=\"Search\"*/}\r\n                                {/*                    className=\"form-control search-field\"*/}\r\n                                {/*                    name={field_names.search}*/}\r\n                                {/*                    />}*/}\r\n                                {/*  />*/}\r\n                                {/*<Autocomplete*/}\r\n                                {/*    id=\"highlights-demo\"*/}\r\n                                {/*    style={{width: 300}}*/}\r\n                                {/*    options={searchable_titles}*/}\r\n                                {/*    getOptionLabel={(option) => option.title}*/}\r\n                                {/*    renderInput={(params) => (*/}\r\n                                {/*        <TextField {...params}*/}\r\n                                {/*                    label=\"Search\"*/}\r\n                                {/*                    className=\"form-control search-field\"*/}\r\n                                {/*                    value={this.state[field_names.search]}*/}\r\n                                {/*                    name={field_names.search}*/}\r\n                                {/*                    onChange={(e) => {*/}\r\n                                {/*                        this.setState({[e.target.name]: e.target.value});*/}\r\n                                {/*        }}/>*/}\r\n                                {/*    )}*/}\r\n                                {/*    renderOption={(option, {inputValue}) => {*/}\r\n                                {/*        const matches = match(option.title, inputValue);*/}\r\n                                {/*        const parts = parse(option.title, matches);*/}\r\n\r\n                                {/*        return (*/}\r\n                                {/*            <div>*/}\r\n                                {/*                {parts.map((part, index) => (*/}\r\n                                {/*                    <span key={index} style={{fontWeight: part.highlight ? 700 : 400}}>*/}\r\n                                {/*            {part.text}*/}\r\n                                {/*          </span>*/}\r\n                                {/*                ))}*/}\r\n                                {/*            </div>*/}\r\n                                {/*        );*/}\r\n                                {/*    }}*/}\r\n                                {/*/>*/}\r\n                                <TextField\r\n                                    label=\"Search\"\r\n                                    className=\"form-control search-field\"\r\n                                    value={this.state[field_names.search]}\r\n                                    name={field_names.search}\r\n                                    onChange={(e) => {\r\n                                        this.setState({[e.target.name]: e.target.value});\r\n                                    }}/>\r\n                            </Grid>\r\n                            <Grid item xs={0} md={uses_presets ? 3 : 5} lg={uses_presets ? 4 : 6}>\r\n                                <p className=\"total-results\">Results: <span className=\"total-results-span\">\r\n                                {!this.props.titles_loading ?\r\n                                    this.props.filtered_titles[ApiResult.count] : 'Loading..'}</span>\r\n                                </p>\r\n                            </Grid>\r\n                            {uses_presets ? <Grid item xs={12} md={2}>\r\n                                <PresetFilters\r\n                                    branch={this.props.branch}\r\n                                    presets={this.props.presets}\r\n                                    filters={this.state}\r\n                                    onSubmit={this.onSubmit}/>\r\n                            </Grid> : null}\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton variant=\"outlined\" onClick={() => {\r\n                                    store.dispatch(setCookieShowFilters(!this.props.show_filters))\r\n                                }}><FontAwesomeIcon\r\n                                    icon={this.props.show_filters ? faTimes : faArrowDown}/></CyberButton>\r\n                            </Grid>\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton variant=\"outlined\" onClick={this.onReset}>\r\n                                    <FontAwesomeIcon icon={faUndoAlt}/></CyberButton>\r\n                            </Grid>\r\n                            <Grid item xs={4} md={1} className=\"filter-buttons\">\r\n                                <CyberButton type=\"submit\" variant=\"outlined\">\r\n                                    <FontAwesomeIcon icon={faFilter}/></CyberButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12} className=\"text-center\" style={{height: 0}}>\r\n                                <div id=\"Active-Filters\" className=\"active-filters-wrapper\">\r\n                                    {this.props.main_filters ? this.props.main_filters.map((value, x) => (\r\n                                        this.state[value[FilterSchema.filter_name]] ?\r\n                                            <Chip key={x} className={`chip-${value[FilterSchema.color]}`}\r\n                                                  size=\"small\" label={value[FilterSchema.label]}/> : null\r\n                                    )) : null}\r\n                                    {this.props.regular_filters ? this.props.regular_filters.map((field) => (\r\n                                        field[FilterSchema.type] === FilterSchemaType.standard ?\r\n                                            this.state[field[FilterSchema.filter_name]].map((filter, i) => (\r\n                                                <Chip key={i} className={`chip-${field[FilterSchema.color]}`}\r\n                                                      size=\"small\" label={filter}/>\r\n                                            )) : field[FilterSchema.type] === FilterSchemaType.slider ?\r\n                                            checkSliderDefaults(this.state[field[FilterSchema.filter_name]],\r\n                                                field[FilterSchema.min], field[FilterSchema.max]) ?\r\n                                                <Chip className={`chip-${field[FilterSchema.color]}`} size=\"small\"\r\n                                                      label={getSliderLabel(this.state[field[FilterSchema.filter_name]], field[FilterSchema.max], field[FilterSchema.filter_name])}/>\r\n                                                : null : null\r\n                                    )) : null}\r\n                                    {this.props.wide_filters ? this.props.wide_filters.map((field) => (\r\n                                        this.state[field[FilterSchema.filter_name]].map((filter, i) => (\r\n                                            <Chip key={i} className={`chip-${field[FilterSchema.color]}`}\r\n                                                  size=\"small\" label={filter}/>\r\n                                        ))\r\n                                    )) : null}\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <div id=\"filters-collapsable\" className={this.props.show_filters ? 'show-filters' : null}>\r\n                            <Grid container>\r\n                                {this.props.main_filters ?\r\n                                    <Grid item xs={12} md={6} lg={4} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">Main Filters</h6>\r\n                                        {this.props.main_filters.map((value, x) => (\r\n                                            <div key={x} className=\"input-group\">\r\n                                                <input id={value[FilterSchema.filter_name]}\r\n                                                       type=\"checkbox\"\r\n                                                       name={value[FilterSchema.filter_name]}\r\n                                                       hidden=\"hidden\"\r\n                                                       checked={this.state[value[FilterSchema.filter_name]]}\r\n                                                       onChange={(e) => {\r\n                                                           this.setState({\r\n                                                               [e.target.name]: !this.state[value[FilterSchema.filter_name]]\r\n                                                           });\r\n                                                       }}\r\n                                                />\r\n                                                <label htmlFor={value[FilterSchema.filter_name]}\r\n                                                       className={`label-${value[FilterSchema.color]}`}>\r\n                                                    {value[FilterSchema.label]}</label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </Grid> : null}\r\n\r\n                                {this.props.regular_filters ? this.props.regular_filters.map((field, x) => (\r\n                                    <Grid key={x} item xs={12} md={6} lg={4} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">{field[FilterSchema.filter_name].replaceAll('_', ' ')}</h6>\r\n                                        {field[FilterSchema.type] === FilterSchemaType.standard ? field[FilterSchema.content].map((filter, y) => (\r\n                                            <div key={y} className=\"input-group\">\r\n                                                <input\r\n                                                    id={`${field[FilterSchema.filter_name]}_${filter}`}\r\n                                                    type=\"checkbox\"\r\n                                                    name={field[FilterSchema.filter_name]}\r\n                                                    onChange={(e) => {\r\n                                                        if (this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0) {\r\n                                                            let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                            filters.splice(filters.indexOf(filter), 1);\r\n                                                            this.setState({\r\n                                                                [e.target.name]: filters\r\n                                                            });\r\n                                                        } else {\r\n                                                            let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                            filters.push(filter);\r\n                                                            this.setState({\r\n                                                                [e.target.name]: filters\r\n                                                            });\r\n                                                        }\r\n                                                    }}\r\n                                                    checked={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0}\r\n                                                    hidden=\"hidden\"/>\r\n                                                <label\r\n                                                    htmlFor={`${field[FilterSchema.filter_name]}_${filter}`}\r\n                                                    className={`label-${field[FilterSchema.color]}`}>{filter}</label>\r\n                                            </div>\r\n                                        )) : field[FilterSchema.type] === FilterSchemaType.slider ?\r\n                                            <Slider\r\n                                                className=\"slider-group\"\r\n                                                id={field[FilterSchema.filter_name]}\r\n                                                value={this.state[field[FilterSchema.filter_name]]}\r\n                                                onChange={(event, value) => {\r\n                                                    this.setState({\r\n                                                        [field[FilterSchema.filter_name]]: value\r\n                                                    })\r\n                                                }}\r\n                                                max={field[FilterSchema.max]}\r\n                                                min={field[FilterSchema.min]}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                aria-labelledby=\"range-slider\"\r\n                                                marks={field[FilterSchema.marks]}\r\n                                            />\r\n                                            : null}\r\n                                    </Grid>\r\n                                )) : null}\r\n                            </Grid>\r\n\r\n                            {this.props.wide_filters ? <Grid container>\r\n                                {this.props.wide_filters.map((field, x) => (\r\n                                    <Grid key={x} item xs={12} className=\"filter-group\">\r\n                                        <h6 className=\"filter-title\">{field[FilterSchema.filter_name]}</h6>\r\n                                        {field[FilterSchema.content].map((filter, i) => (\r\n                                            <div key={i} className=\"genre-container\">\r\n                                                <input id={filter} type=\"checkbox\" hidden=\"hidden\"\r\n                                                       name={field[FilterSchema.filter_name]}\r\n                                                       onChange={(e) => {\r\n                                                           if (this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0) {\r\n                                                               let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                               filters.splice(filters.indexOf(filter), 1);\r\n                                                               this.setState({\r\n                                                                   [e.target.name]: filters\r\n                                                               });\r\n                                                           } else {\r\n                                                               let filters = this.state[field[FilterSchema.filter_name]];\r\n                                                               filters.push(filter);\r\n                                                               this.setState({\r\n                                                                   [e.target.name]: filters\r\n                                                               });\r\n                                                           }\r\n                                                       }}\r\n                                                       onClick={this.onGenreChange}\r\n                                                       checked={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0}\r\n                                                />\r\n                                                <label htmlFor={filter}\r\n                                                       onMouseEnter={() => {\r\n                                                           this.onGenreEnter(filter)\r\n                                                       }}\r\n                                                       onMouseLeave={() => {\r\n                                                           this.onGenreLeave(filter)\r\n                                                       }}>\r\n                                                    <img id={`img_${filter}`}\r\n                                                         className={this.state[field[FilterSchema.filter_name]].indexOf(filter) >= 0 ? 'active-genre' : null}\r\n                                                         src={getGenreImgSrc(filter, this.state[field[FilterSchema.filter_name]])}\r\n                                                         alt=\"\"/>\r\n                                                    <div><p>{filter}</p></div>\r\n                                                </label>\r\n                                            </div>\r\n                                        ))}\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid> : null}\r\n                        </div>\r\n\r\n                        {this.props.order_filters ? <Grid container className=\"ordering-container\">\r\n                            <Grid item xs={12}>\r\n                                {this.props.order_filters.map((order, i) => (\r\n                                    <div key={i} className=\"input-group\" onMouseLeave={() => {\r\n                                        let container = document.getElementById(`order_btn_container_${order}`);\r\n                                        container.classList.remove('hovered-order-button-container')\r\n                                    }}>\r\n                                        <label id={`order_label_${order}`}\r\n                                               className={getOrderValue(this.state[field_names.ordering], order) ? 'no-hover-color active-order-label' : 'no-hover-color no-border'}\r\n                                               onMouseEnter={() => {\r\n                                                   let container = document.getElementById(`order_btn_container_${order}`);\r\n                                                   let width = document.getElementById(`order_label_${order}`).offsetWidth;\r\n                                                   container.classList.add('hovered-order-button-container');\r\n                                                   container.setAttribute('style', `margin-left: calc(${width / 2}px - 35px);`)\r\n                                               }}>\r\n                                            {getOrderValue(this.state[field_names.ordering], order) ? <FontAwesomeIcon\r\n                                                icon={getOrderIcon(this.state[field_names.ordering], order)}/> : null}\r\n                                            <span className=\"order-label\">{order.replaceAll('_', ' ')}</span>\r\n                                        </label>\r\n                                        <div id={`order_btn_container_${order}`} className=\"order-buttons-container\">\r\n                                            <div className=\"order-btn\">\r\n                                                <input id={`order_dc_${order}`} type=\"radio\" value={order}\r\n                                                       checked={getOrderValue(this.state[field_names.ordering], order)}\r\n                                                       hidden=\"hidden\" onClick={(e) => {\r\n                                                    playClickSound();\r\n                                                    this.setState({\r\n                                                        [field_names.ordering]: `-${order}`\r\n                                                    }, () => {\r\n                                                        this.onSubmit(e);\r\n                                                    });\r\n                                                }}/>\r\n                                                <label htmlFor={`order_dc_${order}`}>\r\n                                                    <FontAwesomeIcon icon={faSortAmountDown}/>\r\n                                                </label>\r\n                                            </div>\r\n                                            <div className=\"order-btn\">\r\n                                                <input id={`order_ac_${order}`} type=\"radio\" value={order}\r\n                                                       checked={getOrderValue(this.state[field_names.ordering], order)}\r\n                                                       hidden=\"hidden\" onClick={(e) => {\r\n                                                    playClickSound();\r\n                                                    this.setState({\r\n                                                        [field_names.ordering]: e.target.value\r\n                                                    }, () => {\r\n                                                        this.onSubmit(e);\r\n                                                    });\r\n                                                }}/>\r\n                                                <label htmlFor={`order_ac_${order}`}>\r\n                                                    <FontAwesomeIcon icon={faSortAmountDownAlt}/>\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </Grid>\r\n                        </Grid> : null}\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    show_filters: state.cookies.show_filters,\r\n    searchable_titles: state.anime.searchable_titles,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TitlesFilter)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {\r\n    ANIME_AUDIO_CHANNELS, ANIME_GENRES, ANIME_ORDERINGS,\r\n    ANIME_RATING_SHORT,\r\n    ANIME_STATUSES,\r\n    ANIME_TYPES,\r\n    ANIME_VIDEO_QUALITIES,\r\n    BRANCH_ANIME, FILTER_ANIME_INITIAL_VALUES, USER_ANIME_ORDERINGS, USER_ANIME_STATUSES, USER_ANIME_STATUSES_ARRAY\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {FilterLabels, AnimeFilterNames, FilterSchemaType} from \"../field_names\";\r\nimport PropTypes from \"prop-types\";\r\nimport {User} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getAnimeFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\n\r\n\r\nclass AnimeFilters extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n        /** User List object, {pk: selected_filter:} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getAnimeFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': AnimeFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n            {'name': AnimeFilterNames.is_downloading, 'label': FilterLabels.is_downloading, 'color': 'default'},\r\n            {'name': AnimeFilterNames.cannot_download, 'label': FilterLabels.cannot_download, 'color': 'danger'},\r\n            {'name': AnimeFilterNames.deleted_by_MAL, 'label': FilterLabels.deleted_by_MAL, 'color': 'danger'},\r\n            {'name': AnimeFilterNames.pending_by_MAL, 'label': FilterLabels.pending_by_MAL, 'color': 'warning'},\r\n        ];\r\n        const episode_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 36,\r\n                label: '36',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const length_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 30,\r\n                label: '30',\r\n            },\r\n            {\r\n                value: 61,\r\n                label: '60+',\r\n            },\r\n        ];\r\n        const initial = new FILTER_ANIME_INITIAL_VALUES();\r\n        const values = initial.VALUES;\r\n        let regular_filters = [\r\n            {'name': AnimeFilterNames.type, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_TYPES},\r\n            {'name': AnimeFilterNames.status, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_STATUSES},\r\n            {'name': AnimeFilterNames.rating_short, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': ANIME_RATING_SHORT},\r\n            {'name': AnimeFilterNames.episodes_range, 'type': FilterSchemaType.slider, 'marks': episode_marks, 'min': values.episodes_range[0], 'max': values.episodes_range[1], 'color': 'primary', 'content': null},\r\n            {'name': AnimeFilterNames.length_range, 'type': FilterSchemaType.slider, 'marks': length_marks, 'min': values.length_range[0], 'max': values.length_range[1], 'color': 'primary', 'content': null},\r\n            {'name': AnimeFilterNames.video_quality, 'type': FilterSchemaType.standard, 'color': 'secondary', 'content': ANIME_VIDEO_QUALITIES},\r\n            {'name': AnimeFilterNames.audio_channel, 'type': FilterSchemaType.standard, 'color': 'secondary', 'content': ANIME_AUDIO_CHANNELS},\r\n        ];\r\n\r\n        let wide_filters = [\r\n            {'name': AnimeFilterNames.genres, 'type': FilterSchemaType.wide, 'color': 'primary', 'content': ANIME_GENRES},\r\n        ];\r\n\r\n        let orderings = ANIME_ORDERINGS;\r\n        if (!isEmpty(this.props.list)) {\r\n            orderings = orderings.concat(USER_ANIME_ORDERINGS);\r\n        } else {\r\n            if (this.props.user_authenticated)\r\n                regular_filters.push(\r\n                    {'name': AnimeFilterNames.user_exclude, 'type': FilterSchemaType.standard, 'color': 'info', 'content': USER_ANIME_STATUSES_ARRAY},\r\n                );\r\n        }\r\n\r\n        let anime_filters = this.props.anime_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            anime_filters = this.props.anime_season_filters;\r\n        else if (!isEmpty(this.props.list))\r\n            anime_filters = this.props.anime_list_filters;\r\n        \r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_ANIME}\r\n                titles_loading={this.props.anime_loading}\r\n                filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n                filtered_titles={this.props.filtered_anime}\r\n                title_filters={anime_filters}\r\n                season={this.props.season}\r\n                list={this.props.list}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={orderings}\r\n                presets={this.props.anime_filter_presets}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_browse_filters: state.cookies.anime_browse_filters,\r\n    anime_season_filters: state.cookies.anime_season_filters,\r\n    anime_list_filters: state.cookies.anime_list_filters,\r\n    anime_filter_presets: state.users.anime_filter_presets,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    BRANCH_MANGA,\r\n    FILTER_MANGA_INITIAL_VALUES,\r\n    MANGA_GENRES, MANGA_ORDERINGS,\r\n    MANGA_STATUSES,\r\n    MANGA_TYPES, USER_MANGA_STATUSES_ARRAY\r\n} from \"../../../../globals\";\r\nimport {FilterLabels, MangaFilterNames, FilterSchemaType} from \"../field_names\";\r\nimport {getMangaFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\nclass MangaFilters extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n        /** User List object, {pk: selected_filter:} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getMangaFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': MangaFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n            {'name': MangaFilterNames.is_downloading, 'label': FilterLabels.is_downloading, 'color': 'default'},\r\n            {'name': MangaFilterNames.cannot_download, 'label': FilterLabels.cannot_download, 'color': 'danger'},\r\n            {'name': MangaFilterNames.deleted_by_MAL, 'label': FilterLabels.deleted_by_MAL, 'color': 'danger'},\r\n            {'name': MangaFilterNames.pending_by_MAL, 'label': FilterLabels.pending_by_MAL, 'color': 'warning'},\r\n        ];\r\n        const volumes_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 36,\r\n                label: '36',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const chapters_marks = [\r\n            {\r\n                value: 1,\r\n                label: '1',\r\n            },\r\n            {\r\n                value: 12,\r\n                label: '12',\r\n            },\r\n            {\r\n                value: 24,\r\n                label: '24',\r\n            },\r\n            {\r\n                value: 30,\r\n                label: '30',\r\n            },\r\n            {\r\n                value: 53,\r\n                label: '52+',\r\n            },\r\n        ];\r\n        const initial = new FILTER_MANGA_INITIAL_VALUES();\r\n        const values = initial.VALUES;\r\n        let regular_filters = [\r\n            {\r\n                'name': MangaFilterNames.type,\r\n                'type': FilterSchemaType.standard,\r\n                'color': 'primary',\r\n                'content': MANGA_TYPES\r\n            },\r\n            {\r\n                'name': MangaFilterNames.status,\r\n                'type': FilterSchemaType.standard,\r\n                'color': 'primary',\r\n                'content': MANGA_STATUSES\r\n            },\r\n            {\r\n                'name': MangaFilterNames.volumes_range,\r\n                'type': FilterSchemaType.slider,\r\n                'marks': volumes_marks,\r\n                'min': values.volumes_range[0],\r\n                'max': values.volumes_range[1],\r\n                'color': 'primary',\r\n                'content': null\r\n            },\r\n            {\r\n                'name': MangaFilterNames.chapters_range,\r\n                'type': FilterSchemaType.slider,\r\n                'marks': chapters_marks,\r\n                'min': values.chapters_range[0],\r\n                'max': values.chapters_range[1],\r\n                'color': 'primary',\r\n                'content': null\r\n            },\r\n        ];\r\n\r\n        if (this.props.user_authenticated) {\r\n            regular_filters.push(\r\n                {\r\n                    'name': MangaFilterNames.user_exclude,\r\n                    'type': FilterSchemaType.standard,\r\n                    'color': 'info',\r\n                    'content': USER_MANGA_STATUSES_ARRAY\r\n                },\r\n            )\r\n        }\r\n\r\n        let wide_filters = [\r\n            {\r\n                'name': MangaFilterNames.genres,\r\n                'type': FilterSchemaType.wide,\r\n                'color': 'primary',\r\n                'content': MANGA_GENRES\r\n            },\r\n        ];\r\n\r\n        let manga_filters = this.props.manga_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            manga_filters = this.props.manga_season_filters;\r\n        else if (!isEmpty(this.props.list))\r\n            manga_filters = this.props.manga_list_filters;\r\n\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_MANGA}\r\n                titles_loading={this.props.manga_loading}\r\n                filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n                filtered_titles={this.props.filtered_manga}\r\n                title_filters={manga_filters}\r\n                season={this.props.season}\r\n                list={this.props.list}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={MANGA_ORDERINGS}\r\n                presets={this.props.manga_filter_presets}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_browse_filters: state.cookies.manga_browse_filters,\r\n    manga_season_filters: state.cookies.manga_season_filters,\r\n    manga_list_filters: state.cookies.manga_list_filters,\r\n    manga_filter_presets: state.users.manga_filter_presets,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {\r\n    BRANCH_EROGE,\r\n    EROGE_CENSORSHIPS,\r\n    EROGE_LANGUAGES, EROGE_ORDERINGS,\r\n    EROGE_PLATFORMS, EROGE_TAGS,\r\n    EROGE_TYPES,\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\nimport {ErogeFilterNames, FilterLabels, FilterSchemaType} from \"../field_names\";\r\nimport {getErogeFilterPresets} from \"../../../../actions/users\";\r\nimport store from \"../../../../store\";\r\n\r\n\r\nclass ErogeFilters extends Component {\r\n    static propTypes = {\r\n    };\r\n\r\n    componentDidMount() {\r\n        store.dispatch(getErogeFilterPresets())\r\n    }\r\n\r\n    render() {\r\n        const main_filters = [\r\n            {'name': ErogeFilterNames.downloaded, 'label': FilterLabels.downloaded, 'color': 'secondary'},\r\n        ];\r\n        let regular_filters = [\r\n            {'name': ErogeFilterNames.type, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_TYPES},\r\n            {'name': ErogeFilterNames.platforms, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_PLATFORMS},\r\n            {'name': ErogeFilterNames.censorship, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_CENSORSHIPS},\r\n            {'name': ErogeFilterNames.language, 'type': FilterSchemaType.standard, 'color': 'primary', 'content': EROGE_LANGUAGES},\r\n        ];\r\n        let wide_filters = [\r\n            {'name': ErogeFilterNames.tags, 'type': FilterSchemaType.wide, 'color': 'primary', 'content': EROGE_TAGS},\r\n        ];\r\n\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_EROGE}\r\n                titles_loading={this.props.eroge_loading}\r\n                filtered_titles_loaded={this.props.filtered_eroge_loaded}\r\n                filtered_titles={this.props.filtered_eroge}\r\n                title_filters={this.props.eroge_browse_filters}\r\n                main_filters={main_filters}\r\n                regular_filters={regular_filters}\r\n                wide_filters={wide_filters}\r\n                order_filters={EROGE_ORDERINGS}\r\n                presets={this.props.eroge_filter_presets}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    filtered_eroge_loaded: state.eroge.filtered_eroge_loaded,\r\n    filtered_eroge: state.eroge.filtered_eroge,\r\n    eroge_browse_filters: state.cookies.eroge_browse_filters,\r\n    eroge_filter_presets: state.users.eroge_filter_presets,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ErogeFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {\r\n    BRANCH_CHARACTERS, CHARACTERS_ORDERINGS,\r\n} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\n\r\n\r\nclass CharactersFilters extends Component {\r\n    render() {\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_CHARACTERS}\r\n                titles_loading={this.props.characters_loading}\r\n                filtered_titles_loaded={this.props.filtered_characters_loaded}\r\n                filtered_titles={this.props.filtered_characters}\r\n                title_filters={this.props.characters_filters}\r\n                order_filters={CHARACTERS_ORDERINGS}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    characters_loading: state.characters.characters_loading,\r\n    filtered_characters_loaded: state.characters.filtered_characters_loaded,\r\n    filtered_characters: state.characters.filtered_characters,\r\n    characters_filters: state.cookies.characters_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharactersFilters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE, PEOPLE_ORDERINGS} from \"../../../../globals\";\r\nimport TitlesFilter from \"../TitlesFilter\";\r\n\r\n\r\nclass PeopleFilters extends Component {\r\n    render() {\r\n        return (\r\n            <TitlesFilter\r\n                branch={BRANCH_PEOPLE}\r\n                titles_loading={this.props.people_loading}\r\n                filtered_titles_loaded={this.props.filtered_people_loaded}\r\n                filtered_titles={this.props.filtered_people}\r\n                title_filters={this.props.people_filters}\r\n                order_filters={PEOPLE_ORDERINGS}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people_loading: state.people.people_loading,\r\n    filtered_people_loaded: state.people.filtered_people_loaded,\r\n    filtered_people: state.people.filtered_people,\r\n    people_filters: state.cookies.people_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PeopleFilters)\r\n","import {\r\n    ANIME_BROWSE_TAB_NAME,\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA,\r\n    BRANCH_PEOPLE,\r\n    BROWSE_ANIME_ITEMS_PER_PAGE,\r\n    BROWSE_CHARACTERS_ITEMS_PER_PAGE, BROWSE_EROGE_ITEMS_PER_PAGE,\r\n    BROWSE_MANGA_ITEMS_PER_PAGE, BROWSE_PEOPLE_ITEMS_PER_PAGE,\r\n    CHARACTERS_BROWSE_TAB_NAME,\r\n    EROGE_BROWSE_TAB_NAME,\r\n    FILTER_ANIME_INITIAL_VALUES,\r\n    FILTER_CHARACTERS_INITIAL_VALUES,\r\n    FILTER_EROGE_INITIAL_VALUES,\r\n    FILTER_MANGA_INITIAL_VALUES,\r\n    MANGA_BROWSE_TAB_NAME,\r\n    PEOPLE_BROWSE_TAB_NAME\r\n} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {filterAnime} from \"../../actions/anime\";\r\nimport {filterManga} from \"../../actions/manga\";\r\nimport {filterCharacters} from \"../../actions/characters\";\r\nimport {filterEroge} from \"../../actions/eroge\";\r\nimport AnimeFilters from \"../layout/filters/anime/AnimeFilters\";\r\nimport React from \"react\";\r\nimport MangaFilters from \"../layout/filters/manga/MangaFilters\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../actions/users\";\r\nimport ErogeFilters from \"../layout/filters/eroge/ErogeFilters\";\r\nimport CharactersFilters from \"../layout/filters/characters/CharactersFilters\";\r\nimport {filterPeople} from \"../../actions/people\";\r\nimport PeopleFilters from \"../layout/filters/people/PeopleFilters\";\r\n\r\n\r\nexport function getTabName(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_BROWSE_TAB_NAME;\r\n        case BRANCH_MANGA:\r\n            return MANGA_BROWSE_TAB_NAME;\r\n        case BRANCH_CHARACTERS:\r\n            return CHARACTERS_BROWSE_TAB_NAME;\r\n        case BRANCH_EROGE:\r\n            return EROGE_BROWSE_TAB_NAME;\r\n        case BRANCH_PEOPLE:\r\n            return PEOPLE_BROWSE_TAB_NAME;\r\n        default:\r\n            return 'Browse'\r\n    }\r\n}\r\n\r\n\r\nexport function getFiltersFromBranch(branch, season, list) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AnimeFilters season={season} list={list}/>;\r\n        case BRANCH_MANGA:\r\n            return <MangaFilters season={season} list={list}/>;\r\n        case BRANCH_CHARACTERS:\r\n            return <CharactersFilters/>;\r\n        case BRANCH_EROGE:\r\n            return <ErogeFilters/>;\r\n        case BRANCH_PEOPLE:\r\n            return <PeopleFilters/>;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getItemsPerPageFromBranch(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return BROWSE_ANIME_ITEMS_PER_PAGE;\r\n        case BRANCH_MANGA:\r\n            return BROWSE_MANGA_ITEMS_PER_PAGE;\r\n        case BRANCH_CHARACTERS:\r\n            return BROWSE_CHARACTERS_ITEMS_PER_PAGE;\r\n        case BRANCH_EROGE:\r\n            return BROWSE_EROGE_ITEMS_PER_PAGE;\r\n        case BRANCH_PEOPLE:\r\n            return BROWSE_PEOPLE_ITEMS_PER_PAGE;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nexport function getResetValuesFromBranch(branch) {\r\n    let values;\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            values = new FILTER_ANIME_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_MANGA:\r\n            values = new FILTER_MANGA_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_CHARACTERS:\r\n            values = new FILTER_CHARACTERS_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        case BRANCH_EROGE:\r\n            values = new FILTER_EROGE_INITIAL_VALUES();\r\n            return values.VALUES;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nexport function filterTitles(branch, page = 1, filters = undefined, season = undefined, list = undefined) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(filterAnime(page, filters, season, list));\r\n            // store.dispatch(getAnimeSearchableTitles());\r\n            store.dispatch(getLoggedInUserAnimeEntryStatuses());\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(filterManga(page, filters, season, list));\r\n            store.dispatch(getLoggedInUserMangaEntryStatuses());\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            store.dispatch(filterCharacters(page, filters));\r\n            return;\r\n        case BRANCH_PEOPLE:\r\n            store.dispatch(filterPeople(page, filters));\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(filterEroge(page, filters));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nimport {ApiResult} from \"../../models\";\r\nimport {filterTitles, getFiltersFromBranch, getItemsPerPageFromBranch, getTabName} from \"./functions\";\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {playClickSound, playExpand3Sound} from \"../layout/sounds\";\r\nimport {getBrowseGridListCols, isEmpty} from \"../functions\";\r\nimport TitleCard from \"../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport GoToPageDialog from \"../layout/pagination/goToPageDialog\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/browse.css'\r\n\r\n\r\nclass Browse extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Redux prop of user_entry_statuses */\r\n        user_entry_statuses: PropTypes.object,\r\n        /** Redux prop of title_filters */\r\n        title_filters: PropTypes.object,\r\n        /** Selected season */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            items_per_page: getItemsPerPageFromBranch(this.props.branch),\r\n            page_dialog_open: false,\r\n            gridlist_cols: getBrowseGridListCols(),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = getTabName(this.props.branch);\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n        filterTitles(this.props.branch, 1, this.props.title_filters, this.props.season);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.titles_loading && !this.props.titles_loading) {\r\n            window.scrollTo(0, 0);\r\n            playExpand3Sound();\r\n        }\r\n\r\n        this.updateCurrentPage(prevState);\r\n\r\n        if (this.props.season && prevProps.season.season !== this.props.season.season)\r\n            filterTitles(this.props.branch, 1, this.props.title_filters, this.props.season)\r\n    }\r\n\r\n    updateCurrentPage(prevState) {\r\n        let page = this.state.current_page;\r\n        try {\r\n            page = this.props.filtered_titles[ApiResult.next].split('page=');\r\n            page = parseInt(page[page.length - 1]) - 1;\r\n        } catch (e) {\r\n            page = Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page);\r\n        }\r\n\r\n        if (page && prevState.current_page !== page) {\r\n            this.setState({current_page: page})\r\n        }\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            filterTitles(this.props.branch, page, this.props.title_filters, this.props.season);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Browse-Titles\">\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            {getFiltersFromBranch(this.props.branch, this.props.season)}\r\n                            {this.props.filtered_titles_loaded ? <>\r\n                                <GridList cellHeight={400} cols={this.state.gridlist_cols}\r\n                                          style={{margin: '0 0 10px 0'}}>\r\n                                    {this.props.filtered_titles[ApiResult.results].map((title, i) => (\r\n                                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={this.props.branch}\r\n                                                    title={title}\r\n                                                    user_buttons={true}\r\n                                                    index={i + ((this.state.current_page * this.state.items_per_page) - (this.state.items_per_page - 1))}\r\n                                                    user_status={!isEmpty(this.props.user_entry_statuses) ?\r\n                                                        this.props.user_entry_statuses[`${title['id']}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                                <div className=\"pagination\">\r\n                                    <Pagination\r\n                                        count={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                        color=\"primary\"\r\n                                        siblingCount={3}\r\n                                        page={this.state.current_page}\r\n                                        onChange={(type, page) => {\r\n                                            playClickSound();\r\n                                            if (page !== this.state.current_page)\r\n                                                this.goToPage(page);\r\n                                            else\r\n                                                this.setState({page_dialog_open: true})\r\n                                        }}\r\n                                    />\r\n                                    <GoToPageDialog\r\n                                        open={this.state.page_dialog_open}\r\n                                        current_page={this.state.current_page}\r\n                                        total_pages={Math.ceil(this.props.filtered_titles[ApiResult.count] / this.state.items_per_page)}\r\n                                        goToPage={this.goToPage}\r\n                                        onClose={this.closePageDialog}/>\r\n                                </div>\r\n                            </> : this.props.titles_loading ?\r\n                                <Loading text={`${this.props.branch} Loading`} offset={200}/> : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Browse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport PropTypes from \"prop-types\";\r\nimport store from \"../../../store\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass AnimeBrowse extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        let anime_filters = this.props.anime_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            anime_filters = this.props.anime_season_filters;\r\n        return <Browse\r\n            branch={BRANCH_ANIME}\r\n            titles_loading={this.props.anime_loading}\r\n            filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n            filtered_titles={this.props.filtered_anime}\r\n            title_filters={anime_filters}\r\n            user_entry_statuses={this.props.user_anime_entry_statuses}\r\n            season={this.props.season}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_browse_filters: state.cookies.anime_browse_filters,\r\n    anime_season_filters: state.cookies.anime_season_filters,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeBrowse)\r\n","import LazyHero from \"react-lazy-hero\";\r\nimport React, {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {LOGIN} from \"../../urls\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport Loading from \"../layout/common/Loading\";\r\n\r\n\r\nexport function NonAuthIndexHero() {\r\n    return <LazyHero\r\n        imageSrc={'images/neo-tokyo-1.jpg'}\r\n        minHeight={'100vh'}\r\n        opacity={0}\r\n        transitionDuration={200}\r\n        color={'transparent'}>\r\n        <div className=\"welcome-img-container\">\r\n            <div className=\"title-container\">\r\n                <h5>welcome to</h5>\r\n                <h1>Cyber-Genesis</h1>\r\n            </div>\r\n            <img src=\"images/neo-tokyo-1.jpg\" alt=\"Neo-Tokyo\"/>\r\n        </div>\r\n    </LazyHero>\r\n}\r\n\r\n\r\nexport function AuthIndexHero() {\r\n    return <LazyHero\r\n        imageSrc={'images/neo-city-static.jpg'}\r\n        minHeight={'100vh'}\r\n        opacity={0}\r\n        transitionDuration={200}\r\n        color={'transparent'}>\r\n        <div className=\"welcome-img-container\">\r\n            <div className=\"title-container\">\r\n                <h5>welcome to</h5>\r\n                <h1>Cyber-Genesis</h1>\r\n            </div>\r\n\r\n            <video autoPlay={true} muted={true} loop={true} id=\"Index-Video\">\r\n                <source src=\"images/neo-city.mp4\" type=\"video/mp4\"/>\r\n                Your browser does not support HTML5 video.\r\n            </video>\r\n        </div>\r\n        <div className=\"home-login-link-container\">\r\n            <Link to={LOGIN} className=\"color-blue\">Login</Link>\r\n        </div>\r\n    </LazyHero>\r\n}\r\n\r\n\r\nexport function InitialLoading() {\r\n    return <div id=\"Initial-Loading\">\r\n        <div className=\"loading-container\">\r\n            <Loading text={'Initializing...'}/>\r\n            {/*<CircularProgress className=\"loading\" thickness={1.8}/>*/}\r\n            {/*<Typography variant=\"body1\" className=\"text\">Initializing...</Typography>*/}\r\n        </div>\r\n    </div>\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {Parallax} from 'react-parallax';\r\n\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {AuthIndexHero, NonAuthIndexHero} from \"./snippets\"\r\n\r\nimport '../../assets/css/home.css';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {ADMIN, HOME, REQUIEM} from \"../../urls\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\nimport {LoadGifs} from \"../layout/common/common\";\r\n\r\n\r\nclass Index extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            img_1_loaded: false,\r\n            img_2_loaded: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Cyber-Space';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    // noinspection FunctionWithMoreThanThreeNegationsJS\r\n    render() {\r\n        // noinspection HtmlUnknownTarget\r\n        return (\r\n            <div id=\"Index\">\r\n                {this.props.user_authenticated ?\r\n                    <>\r\n                        <CyberNavbar/>\r\n                        <NonAuthIndexHero/>\r\n                        <Grid container>\r\n                            <Grid item xs={12} className=\"project-about\">\r\n                                <div className=\"project-about-wrapper\">\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-2-lq.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={this.state.img_1_loaded ? 'fade-in' : ''}\r\n                                    >\r\n                                        <img src={'images/neo-tokyo-2-lq.jpg'} className=\"lazy-loaded-img\"\r\n                                             alt=\"loader-img\"\r\n                                             onLoad={() => {\r\n                                                 this.setState({img_1_loaded: true})\r\n                                             }}/>\r\n                                        <div className=\"img-content-container\">\r\n                                            <img src=\"images/cyber-genesis-logo.png\" alt={'cg-logo'}/>\r\n                                            <div className=\"about-container\">\r\n                                                <span className=\"color-blue\">project:</span>&nbsp;\r\n                                                <h1>Cyber-Genesis</h1>\r\n                                                <p><Link to={HOME}><i>Cyber-Genesis</i></Link> is a platform for Asian\r\n                                                    culture mainly <i>Japanese</i> animated content.</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-3-lq.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={this.state.img_2_loaded ? 'fade-in' : ''}\r\n                                    >\r\n                                        <img src={'images/neo-tokyo-3-lq.jpg'} className=\"lazy-loaded-img\"\r\n                                             alt=\"loader-img\"\r\n                                             onLoad={() => {\r\n                                                 this.setState({img_2_loaded: true})\r\n                                             }}/>\r\n                                        <div className=\"img-content-container text-right\">\r\n                                            <img className=\"cyber-req-logo-top\"\r\n                                                 src=\"images/cyber-requiem-logo-magenta.png\"\r\n                                                 alt={'cg-logo'}/>\r\n                                            <div className=\"about-container\">\r\n                                                <span>project:</span>&nbsp;\r\n                                                <h1>Cyber-Requiem</h1>\r\n                                                <p><Link to={REQUIEM}><i>\r\n                                                    Cyber-Requiem</i></Link> is a system designed to keep <i>\r\n                                                    Cyber-Genesis</i> up to date by crawling the web for relative\r\n                                                    information and downloading multimedia.</p>\r\n                                            </div>\r\n                                            <img className=\"cyber-req-logo-bottom\"\r\n                                                 src=\"images/cyber-requiem-logo-magenta.png\"\r\n                                                 alt={'cg-logo'}/>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                    <Parallax\r\n                                        blur={0}\r\n                                        bgImage={'images/neo-tokyo-1.jpg'}\r\n                                        bgImageAlt=\"the cat\"\r\n                                        strength={300}\r\n                                        className={'fade-in'}\r\n                                    >\r\n                                        <div className=\"img-content-container\">\r\n                                            <img\r\n                                                src=\"images/cyber-administration-logo-cyan.png\"\r\n                                                alt={'ca-logo'}/>\r\n                                            <div className=\"about-container margin-left-20\">\r\n                                                <span>project:</span>&nbsp;\r\n                                                <h1>Cyber-Administration</h1>\r\n                                                <p><a\r\n                                                    href={ADMIN}><i>Cyber-Administration</i></a> is a software\r\n                                                    for user interaction\r\n                                                    with <i>Cyber-Genesis</i> and <i>Cyber-Requiem</i>.\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Parallax>\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <CyberFooter margin={false}/>\r\n                    </> :\r\n                    <AuthIndexHero/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n    user_loading: state.auth.user_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Index)\r\n","import '../../../../../node_modules/xbbcode-parser/xbbcode.css'\r\nimport XBBCODE from 'xbbcode-parser'\r\n\r\nconst URL_PATTERN = /^(?:https?|file|c):(?:\\/{1,3}|\\\\{1})[-a-zA-Z0-9:;,@#%&()~_?\\+=\\/\\\\\\.]*$/;\r\n// [dimg]https://i.imgur.com/qg0PysC.jpg[/dimg]\r\n\r\n\r\nconst img = {\r\n    openTag: function (params, content) {\r\n        let width = null;\r\n        let height = null;\r\n        let w_unit = 'px';\r\n        let h_unit = 'px';\r\n        let url = content;\r\n        let style = '';\r\n\r\n        if (params && params.indexOf('width=') >= 0) {\r\n            let parse_width = params.split('width=')[1];\r\n            parse_width = parse_width.split('height=')[0];\r\n            if (parse_width.indexOf('%') >= 0)\r\n                if (parse_width)\r\n                    w_unit = '%';\r\n            width = parseInt(parse_width);\r\n            if (isNaN(width))\r\n                width = null\r\n        }\r\n        if (params && params.indexOf('height=') >= 0) {\r\n            let parse_height = params.split('height=')[1];\r\n            parse_height = parse_height.split('width=')[0];\r\n            if (parse_height.indexOf('%') >= 0)\r\n                h_unit = '%';\r\n            height = parseInt(parse_height);\r\n            if (isNaN(height))\r\n                height = null\r\n        }\r\n\r\n        URL_PATTERN.lastIndex = 0;\r\n        if (!URL_PATTERN.test(url))\r\n            url = '';\r\n\r\n        if (width)\r\n            style = `width: ${width}${w_unit};`;\r\n        if (height)\r\n            style = `${style} height: ${height}${h_unit};`;\r\n\r\n        if (style.length > 0)\r\n            return `<img style=\"${style}\" src=\"${url}\"/>`;\r\n        return `<img src=\"${url}\"/>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst br = {\r\n    openTag: function (params, content) {\r\n        return `<br/>`;\r\n    },\r\n    closeTag: function (params, content) {\r\n        return '';\r\n    },\r\n    displayContent: false\r\n};\r\n\r\nconst new_tags = {\r\n    'br': br,\r\n    'img': img\r\n};\r\n\r\nXBBCODE.addTags(new_tags);\r\n\r\n\r\nexport function testingParser(bbcode_string) {\r\n    try {\r\n        let result = XBBCODE.process({\r\n            text: bbcode_string,\r\n            removeMisalignedTags: false,\r\n            addInLineBreaks: true\r\n        });\r\n\r\n        return result.html;\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {testingParser} from \"../../settings/bbcode_editor/parser\";\r\n\r\n\r\nclass AboutTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {has_error: false};\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({has_error: true})\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log('loaded', this.props.visited_user[User.profile][Profile.about_section_bbcode]);\r\n        return (\r\n            <div id=\"BBCode_Container\" className=\"bbcode-container\">\r\n                {ReactHtmlParser(testingParser(this.props.visited_user[User.profile][Profile.about_section_bbcode]))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AboutTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Chart from 'chart.js';\r\nimport {Line, Doughnut} from 'react-chartjs-2';\r\n\r\nimport {Anime, Character, Profile, User, UserList} from \"../../../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faCircle, faPause, faPlay, faStar, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {faCalendarAlt} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {BRANCH_ANIME, COLOR_DANGER, COLOR_GRAY, COLOR_INFO, COLOR_PRIMARY, COLOR_WARNING} from \"../../../../globals\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {USER_ANIME_HISTORY, USER_ANIME_STATISTICS} from \"../../../../urls\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nfunction getMinsPerDay(date, total_mins) {\r\n    const date1 = new Date(date);\r\n    const date2 = new Date();\r\n    const time_diff = Math.abs(date2 - date1);\r\n    const total_days = Math.ceil(time_diff / (1000 * 60 * 60 * 24));\r\n    return Math.round(total_mins / total_days)\r\n}\r\n\r\n\r\nclass AnimeTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        Chart.defaults.global.legend.display = false;\r\n\r\n        let raw = [\r\n            {label: 'Watching', stat: this.props.user_list[UserList.anime_watching], color: '', hoverColor: ''},\r\n            {label: 'Completed', stat: this.props.user_list[UserList.anime_completed], color: '', hoverColor: ''},\r\n            {label: 'On Hold', stat: this.props.user_list[UserList.anime_on_hold], color: '', hoverColor: ''},\r\n            {label: 'Dropped', stat: this.props.user_list[UserList.anime_dropped], color: '', hoverColor: ''},\r\n            {label: 'Planned', stat: this.props.user_list[UserList.anime_plan_to_watch], color: '', hoverColor: ''},\r\n        ];\r\n\r\n        let stat_data = [];\r\n        let labels = [];\r\n        for (let x = 0; x < raw.length; x++) {\r\n            stat_data.push(raw[x].stat);\r\n            labels.push(raw[x].label);\r\n        }\r\n\r\n        let data = {\r\n            labels: labels,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            datasets: [{\r\n                data: stat_data,\r\n                backgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.4)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.4)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.5)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.2)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.4)',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.8)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.8)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.8)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.8)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.3)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.3)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.3)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.3)',\r\n                ],\r\n                hoverBorderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 1)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 1)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 1)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 1)',\r\n                ],\r\n                // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n                // hoverBorderColor: '#156bb7',\r\n                borderWidth: 0\r\n            }]\r\n        };\r\n\r\n\r\n        const line_data = {\r\n            labels: ['1', '2', '3', '4', '5', '6', '7'],\r\n            datasets: [\r\n                {\r\n                    label: 'Episodes',\r\n                    data: [12, 17, 9, 6, 8, 13, 14],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ],\r\n        };\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={5}>\r\n                    <h2>Stats</h2>\r\n                </Grid>\r\n                <Grid item xs={7}>\r\n                    <h2>Recent</h2>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"pie-container\">\r\n                    <div className=\"pie-wrapper\">\r\n                        <Doughnut height={100} width={100} data={data}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={2} className=\"stats-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip className=\"border-info color-info\"\r\n                                  variant=\"outlined\"\r\n                                  label={<>\r\n                                      <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>\r\n                                      <span>Watching\r\n                                          <CountUp end={this.props.user_list[UserList.anime_watching]}/>\r\n                                      </span>\r\n                                  </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>\r\n                                    <span>Completed\r\n                                        <CountUp end={this.props.user_list[UserList.anime_completed]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-warning color-warning\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>\r\n                                    <span>On Hold<CountUp end={this.props.user_list[UserList.anime_on_hold]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-danger color-danger\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>\r\n                                    <span>Dropped<CountUp end={this.props.user_list[UserList.anime_dropped]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-gray color-gray\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>\r\n                                    <span>Planned<CountUp end={this.props.user_list[UserList.anime_plan_to_watch]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-white color-white\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>\r\n                                    <span>Total<CountUp end={this.props.user_list[UserList.anime_total_entries]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_ANIME_STATISTICS(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">Statistics</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={4} className=\"pie-container\">\r\n                    <div className=\"\">\r\n                        <Line data={line_data} height={220} options={options}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"recent-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStar}/>\r\n                                    <span>{this.props.user_list[UserList.anime_mean_score].toFixed(2)}</span>\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={getMinsPerDay(\r\n                                        this.props.user_list[UserList.anime_started_watching_on],\r\n                                        this.props.user_list[UserList.anime_mins_spent_watching])}/>minutes per day\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={this.props.user_list[UserList.anime_mins_spent_watching]}/>\r\n                                    total minutes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.anime_episodes_watched]}/>\r\n                                episodes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <span>\r\n                                        Started Watching on <span><Moment format={'Do MMM YYYY'}\r\n                                                                          date={this.props.user_list[UserList.anime_started_watching_on]}/></span>\r\n                                    </span>\r\n                                </>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_ANIME_HISTORY(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">History</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"favorites-container\">\r\n                    <h2>Favorites</h2>\r\n\r\n                    {/*<Grid container className=\"quoted-favorites-container\">*/}\r\n                    {/*    {this.props.visited_user[User.profile][Profile.favorite_anime].map((anime, i) => (*/}\r\n                    {/*        <>*/}\r\n                    {/*        <Grid item xs={1}>*/}\r\n                    {/*            <Typography variant=\"h4\" className=\"favorites-number\">{i}</Typography>*/}\r\n                    {/*        </Grid>*/}\r\n                    {/*        <Grid item xs={3}>*/}\r\n                    {/*            <div className=\"favorites-title-card\">*/}\r\n                    {/*                <TitleCard branch={BRANCH_ANIME} title={anime}/>*/}\r\n                    {/*            </div>*/}\r\n                    {/*        </Grid>*/}\r\n                    {/*        <Grid item xs={8}>*/}\r\n                    {/*            <div className=\"favorites-quote\">*/}\r\n                    {/*                <Typography variant=\"body1\">Quote here - Hakira</Typography>*/}\r\n                    {/*            </div>*/}\r\n                    {/*        </Grid>*/}\r\n                    {/*        </>*/}\r\n                    {/*    ))}*/}\r\n                    {/*</Grid>*/}\r\n\r\n                    <Grid container className=\"quoted-favorites-container\">\r\n                        {this.props.visited_user[User.profile][Profile.favorite_anime].map((anime, i) => (\r\n                            <Grid key={anime[Anime.id]} item xs={12} sm={12} md={6} lg={3} xl={2}>\r\n                                <div className=\"favorites-title-card\">\r\n                                    <TitleCard branch={BRANCH_ANIME} title={anime}/>\r\n                                </div>\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n\r\n                    {/*<GridList cellHeight={300} cols={5} style={{margin: 0}}>*/}\r\n                    {/*    {this.props.visited_user[User.profile][Profile.favorite_anime].map((anime, i) => (*/}\r\n                    {/*        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>*/}\r\n                    {/*            <GridListTile cols={1}>*/}\r\n                    {/*                <TitleCard branch={BRANCH_ANIME} title={anime}/>*/}\r\n                    {/*            </GridListTile>*/}\r\n                    {/*        </Grow>*/}\r\n                    {/*    ))}*/}\r\n                    {/*</GridList>*/}\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    user_list: state.users.user_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AnimeTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Chart from 'chart.js';\r\nimport {Line, Doughnut} from 'react-chartjs-2';\r\n\r\nimport {Character, Profile, User, UserList} from \"../../../../models\";\r\nimport {CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faCircle, faPause, faPlay, faStar, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CountUp from \"react-countup\";\r\nimport {faCalendarAlt} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_MANGA,\r\n    COLOR_DANGER,\r\n    COLOR_GRAY,\r\n    COLOR_INFO,\r\n    COLOR_PRIMARY,\r\n    COLOR_WARNING\r\n} from \"../../../../globals\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {USER_ANIME_HISTORY, USER_ANIME_STATISTICS, USER_MANGA_HISTORY} from \"../../../../urls\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\n\r\nclass MangaTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    render() {\r\n        Chart.defaults.global.legend.display = false;\r\n\r\n        let raw = [\r\n            {label: 'Reading', stat: this.props.user_list[UserList.manga_reading], color: '', hoverColor: ''},\r\n            {label: 'Completed', stat: this.props.user_list[UserList.manga_completed], color: '', hoverColor: ''},\r\n            {label: 'On Hold', stat: this.props.user_list[UserList.manga_on_hold], color: '', hoverColor: ''},\r\n            {label: 'Dropped', stat: this.props.user_list[UserList.manga_dropped], color: '', hoverColor: ''},\r\n            {label: 'Planned', stat: this.props.user_list[UserList.manga_plan_to_read], color: '', hoverColor: ''},\r\n        ];\r\n\r\n        let stat_data = [];\r\n        let labels = [];\r\n        for (let x = 0; x < raw.length; x++) {\r\n            stat_data.push(raw[x].stat);\r\n            labels.push(raw[x].label);\r\n        }\r\n\r\n        let data = {\r\n            labels: labels,\r\n            legend: {\r\n                display: false,\r\n            },\r\n            datasets: [{\r\n                data: stat_data,\r\n                backgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.4)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.4)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.5)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.2)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.4)',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.8)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.8)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.8)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.8)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 0.3)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 0.3)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 0.3)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 0.1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 0.3)',\r\n                ],\r\n                hoverBorderColor: [\r\n                    // COLOR_INFO,\r\n                    'rgba(21, 255, 255, 1)',\r\n                    // COLOR_PRIMARY,\r\n                    'rgba(21, 107, 183, 1)',\r\n                    // COLOR_WARNING,\r\n                    'rgba(208, 156, 0, 1)',\r\n                    // COLOR_DANGER,\r\n                    'rgba(255, 0, 0, 1)',\r\n                    // COLOR_GRAY,\r\n                    'rgba(123, 123, 123, 1)',\r\n                ],\r\n                // borderColor: 'rgba(255, 255, 255, 0.9)',\r\n                // hoverBorderColor: '#156bb7',\r\n                borderWidth: 0\r\n            }]\r\n        };\r\n\r\n\r\n        const line_data = {\r\n            labels: ['1', '2', '3', '4', '5', '6', '7'],\r\n            datasets: [\r\n                {\r\n                    label: 'Chapters',\r\n                    data: [12, 17, 9, 6, 8, 13, 14],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                },\r\n            ],\r\n        };\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={5}>\r\n                    <h2>Stats</h2>\r\n                </Grid>\r\n                <Grid item xs={7}>\r\n                    <h2>Recent</h2>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"pie-container\">\r\n                    <div className=\"pie-wrapper\">\r\n                        <Doughnut height={100} width={100} data={data}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={2} className=\"stats-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip className=\"border-info color-info\"\r\n                                  variant=\"outlined\"\r\n                                  label={<>\r\n                                      <FontAwesomeIcon className=\"list-icon\" icon={faPlay}/>\r\n                                      <span>Reading\r\n                                          <CountUp end={this.props.user_list[UserList.manga_reading]}/>\r\n                                      </span>\r\n                                  </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faCheck}/>\r\n                                    <span>Completed\r\n                                        <CountUp end={this.props.user_list[UserList.manga_completed]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-warning color-warning\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faPause}/>\r\n                                    <span>On Hold<CountUp end={this.props.user_list[UserList.manga_on_hold]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-danger color-danger\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStop}/>\r\n                                    <span>Dropped<CountUp end={this.props.user_list[UserList.manga_dropped]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-gray color-gray\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faCalendarAlt}/>\r\n                                    <span>Planned<CountUp end={this.props.user_list[UserList.manga_plan_to_read]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-white color-white\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faCircle}/>\r\n                                    <span>Total<CountUp end={this.props.user_list[UserList.manga_total_entries]}/>\r\n                                    </span>\r\n                                </>}/>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={4} className=\"pie-container\">\r\n                    <div className=\"\">\r\n                        <Line data={line_data} height={220} options={options}/>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={3} className=\"recent-container\">\r\n                    <Grid container\r\n                          direction=\"column\"\r\n                          justify=\"center\"\r\n                          alignItems=\"flex-start\"\r\n                          className=\"chip-container\"\r\n                    >\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <FontAwesomeIcon className=\"list-icon\" icon={faStar}/>\r\n                                    <span>{this.props.user_list[UserList.manga_mean_score].toFixed(2)}</span>\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span>\r\n                                    <CountUp end={this.props.user_list[UserList.manga_mins_spent_reading]}/>\r\n                                    total minutes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.manga_volumes_read]}/>\r\n                                volumes\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<><span><CountUp\r\n                                    end={this.props.user_list[UserList.manga_chapters_read]}/>\r\n                                chapters\r\n                                </span></>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <Chip\r\n                                className=\"border-primary color-primary\"\r\n                                variant=\"outlined\"\r\n                                label={<>\r\n                                    <span>\r\n                                        Started Reading on <span><Moment format={'Do MMM YYYY'}\r\n                                                                          date={this.props.user_list[UserList.manga_started_reading_on]}/></span>\r\n                                    </span>\r\n                                </>}\r\n                            />\r\n                        </div>\r\n                        <div className=\"stat-chip\">\r\n                            <CyberLink to={USER_MANGA_HISTORY(this.props.visited_user[User.id])}>\r\n                                <Button variant=\"outlined\" className=\"btn-info\">History</Button>\r\n                            </CyberLink>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"favorites-container\">\r\n                    <h2>Favorites</h2>\r\n\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.visited_user[User.profile][Profile.favorite_manga].map((manga, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_MANGA} title={manga}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    user_list: state.users.user_list,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaTab)\r\n","/* eslint-disable */\r\nimport React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nimport '../../../../assets/css/achievements.css'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheckCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {getAnimeAchievementsThresholds} from \"../../../../actions/anime\";\r\nimport {clearUserAchievements, getUserAchievements} from \"../../../../actions/users\";\r\nimport {AchievementInfo, AchievementTier, AnimeDataStatistics, User, UserStatistics} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport BBCode from '@bbob/react/es/Component'\r\nimport reactPreset from '@bbob/preset-react/es'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst unknown = 'https://ik.imagekit.io/r0d4cpkoj/Achievements/unknown_g6qPdfP00nE.jpg';\r\n\r\n\r\nfunction getUserGenreAchievements(user_achievements, achievement_thresholds) {\r\n    let achievements = [];\r\n    let tiers = [20, 40, 80, 160];\r\n    let achievements_info = {\r\n        title: <CircularProgress/>,\r\n        requirement: '',\r\n        user_progress: 0,\r\n        tier_1: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: '',\r\n            description: '',\r\n            user_completed: 0,\r\n            image: unknown,\r\n            threshold: tiers[3],\r\n        }\r\n    };\r\n\r\n    if (!isEmpty(achievement_thresholds)) {\r\n        tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_romance_thresholds].split(',');\r\n        achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_romance_info])\r\n    }\r\n    achievements.push({\r\n        title: achievements_info?.[AchievementInfo.title],\r\n        requirement: achievements_info?.[AchievementInfo.requirement],\r\n        user_progress: user_achievements[UserStatistics.romance_progress],\r\n        tier_1: {\r\n            title: achievements_info?.[AchievementInfo.tier_1]?.[AchievementTier.title],\r\n            description: achievements_info?.[AchievementInfo.tier_1]?.[AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.romance_1],\r\n            image: achievements_info?.[AchievementInfo.tier_1]?.[AchievementTier.image],\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: achievements_info?.[AchievementInfo.tier_2]?.[AchievementTier.title],\r\n            description: achievements_info?.[AchievementInfo.tier_2]?.[AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.romance_2],\r\n            image: achievements_info?.[AchievementInfo.tier_2]?.[AchievementTier.image],\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: achievements_info?.[AchievementInfo.tier_3]?.[AchievementTier.title],\r\n            description: achievements_info?.[AchievementInfo.tier_3]?.[AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.romance_3],\r\n            image: achievements_info?.[AchievementInfo.tier_3]?.[AchievementTier.image],\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: achievements_info?.[AchievementInfo.tier_4]?.[AchievementTier.title],\r\n            description: achievements_info?.[AchievementInfo.tier_4]?.[AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.romance_4],\r\n            image: achievements_info?.[AchievementInfo.tier_4]?.[AchievementTier.image],\r\n            threshold: tiers[3],\r\n        }\r\n    });\r\n\r\n    if (!isEmpty(achievement_thresholds)) {\r\n        tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_pervert_thresholds].split(',');\r\n        achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_pervert_info])\r\n    }\r\n    achievements.push({\r\n        title: achievements_info[AchievementInfo.title],\r\n        requirement: achievements_info?.[AchievementInfo.requirement],\r\n        user_progress: user_achievements[UserStatistics.pervert_progress],\r\n        tier_1: {\r\n            title: achievements_info[AchievementInfo.tier_1][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_1][AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.pervert_1],\r\n            image: achievements_info[AchievementInfo.tier_1][AchievementTier.image],\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: achievements_info[AchievementInfo.tier_2][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_2][AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.pervert_2],\r\n            image: achievements_info[AchievementInfo.tier_2][AchievementTier.image],\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: achievements_info[AchievementInfo.tier_3][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_3][AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.pervert_3],\r\n            image: achievements_info[AchievementInfo.tier_3][AchievementTier.image],\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: achievements_info[AchievementInfo.tier_4][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_4][AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.pervert_4],\r\n            image: achievements_info[AchievementInfo.tier_4][AchievementTier.image],\r\n            threshold: tiers[3],\r\n        }\r\n    });\r\n\r\n    if (!isEmpty(achievement_thresholds)) {\r\n        tiers = achievement_thresholds[AnimeDataStatistics.anime_achievement_classics_thresholds].split(',');\r\n        achievements_info = JSON.parse(achievement_thresholds[AnimeDataStatistics.anime_achievement_classics_info])\r\n    }\r\n    achievements.push({\r\n        title: achievements_info[AchievementInfo.title],\r\n        requirement: achievements_info?.[AchievementInfo.requirement],\r\n        user_progress: user_achievements[UserStatistics.classics_progress],\r\n        tier_1: {\r\n            title: achievements_info[AchievementInfo.tier_1][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_1][AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.classics_1],\r\n            image: achievements_info[AchievementInfo.tier_1][AchievementTier.image],\r\n            threshold: tiers[0],\r\n        },\r\n        tier_2: {\r\n            title: achievements_info[AchievementInfo.tier_2][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_2][AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.classics_2],\r\n            image: achievements_info[AchievementInfo.tier_2][AchievementTier.image],\r\n            threshold: tiers[1],\r\n        },\r\n        tier_3: {\r\n            title: achievements_info[AchievementInfo.tier_3][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_3][AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.classics_3],\r\n            image: achievements_info[AchievementInfo.tier_3][AchievementTier.image],\r\n            threshold: tiers[2],\r\n        },\r\n        tier_4: {\r\n            title: achievements_info[AchievementInfo.tier_4][AchievementTier.title],\r\n            description: achievements_info[AchievementInfo.tier_4][AchievementTier.description],\r\n            user_completed: user_achievements[UserStatistics.classics_4],\r\n            image: achievements_info[AchievementInfo.tier_4][AchievementTier.image],\r\n            threshold: tiers[3],\r\n        }\r\n    });\r\n\r\n    return achievements;\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} achievement\r\n * @param {string} achievement.title\r\n * @param {int} achievement.user_progress\r\n * @param {string} achievement.tier_1.title\r\n * @param {string} achievement.tier_1.description\r\n * @param {string} achievement.tier_1.image\r\n * @param {int} achievement.tier_1.user_completed\r\n * @param {int} achievement.tier_1.threshold\r\n * @param {string} achievement.tier_2.title\r\n * @param {string} achievement.tier_2.description\r\n * @param {string} achievement.tier_2.image\r\n * @param {int} achievement.tier_2.user_completed\r\n * @param {int} achievement.tier_2.threshold\r\n * @param {string} achievement.tier_3.title\r\n * @param {string} achievement.tier_3.description\r\n * @param {string} achievement.tier_3.image\r\n * @param {int} achievement.tier_3.user_completed\r\n * @param {int} achievement.tier_3.threshold\r\n * @param {string} achievement.tier_4.title\r\n * @param {string} achievement.tier_4.description\r\n * @param {string} achievement.tier_4.image\r\n * @param {int} achievement.tier_4.user_completed\r\n * @param {int} achievement.tier_4.threshold\r\n */\r\nfunction getActiveGenreDescription(achievement) {\r\n    if (achievement.tier_4.user_completed)\r\n        return achievement.tier_4.description;\r\n    else if (achievement.tier_3.user_completed)\r\n        return achievement.tier_3.description;\r\n    else if (achievement.tier_2.user_completed)\r\n        return achievement.tier_2.description;\r\n    else if (achievement.tier_1.user_completed)\r\n        return achievement.tier_1.description;\r\n    return '???'\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {string} props.title\r\n * @param {boolean} props.previous_completed\r\n * @param {int} props.tier_number\r\n * @param {boolean} props.user_completed\r\n * @param {int} props.user_progress\r\n * @param {int} props.threshold\r\n * @param {string} props.image\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction GenreAchievementSegment(props) {\r\n    const {title, previous_completed, tier_number, user_completed, user_progress, threshold, image} = props;\r\n    let tier_1_value;\r\n    let tier_1_buffer;\r\n    if (user_completed) {\r\n        tier_1_value = 100;\r\n        tier_1_buffer = 0\r\n    } else if (previous_completed) {\r\n        let progress = user_progress;\r\n        let new_threshold = threshold;\r\n        if (tier_number !== 1) {\r\n            progress = user_progress - (threshold / 2);\r\n            new_threshold = threshold - (threshold / 2);\r\n        }\r\n        tier_1_value = Math.round((progress / new_threshold) * 100);\r\n        tier_1_buffer = 100\r\n    } else {\r\n        tier_1_value = 0;\r\n        tier_1_buffer = 100\r\n    }\r\n    return <Grid item xs={3}>\r\n        <LinearProgress className=\"achievement-progress\" variant=\"buffer\" value={tier_1_value} valueBuffer={tier_1_buffer} />\r\n        <div style={{opacity: !previous_completed && !user_completed || user_completed ? 0 : 0.7}}\r\n             className=\"progress-number\"\r\n        >\r\n            <span>\r\n                {user_completed ? `${threshold}/${threshold}` : `${user_progress}/${threshold}`}\r\n             </span>\r\n        </div>\r\n        <div className={user_completed ? 'achievement-image completed' : 'achievement-image'}>\r\n            <span>{title}</span>\r\n            <img src={user_completed ? image : unknown}/>\r\n            <div className=\"check-icon\"><FontAwesomeIcon icon={faCheckCircle} /></div>\r\n        </div>\r\n    </Grid>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} props.achievement\r\n * @param {string} props.achievement.title\r\n * @param {string} props.achievement.requirement\r\n * @param {int} props.achievement.user_progress\r\n * @param {string} props.achievement.tier_1.title\r\n * @param {string} props.achievement.tier_1.description\r\n * @param {string} props.achievement.tier_1.image\r\n * @param {int} props.achievement.tier_1.user_completed\r\n * @param {int} props.achievement.tier_1.threshold\r\n * @param {string} props.achievement.tier_2.title\r\n * @param {string} props.achievement.tier_2.description\r\n * @param {string} props.achievement.tier_2.image\r\n * @param {int} props.achievement.tier_2.user_completed\r\n * @param {int} props.achievement.tier_2.threshold\r\n * @param {string} props.achievement.tier_3.title\r\n * @param {string} props.achievement.tier_3.description\r\n * @param {string} props.achievement.tier_3.image\r\n * @param {int} props.achievement.tier_3.user_completed\r\n * @param {int} props.achievement.tier_3.user_completed\r\n * @param {int} props.achievement.tier_3.threshold\r\n * @param {string} props.achievement.tier_4.title\r\n * @param {string} props.achievement.tier_4.description\r\n * @param {string} props.achievement.tier_4.image\r\n * @param {int} props.achievement.tier_4.user_completed\r\n * @param {int} props.achievement.tier_4.threshold\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction GenreAchievement(props) {\r\n    const {achievement} = props;\r\n    const requirement = <BBCode plugins={[reactPreset()]}>\r\n        {achievement.requirement}\r\n    </BBCode>;\r\n    return <Grid item xs={12} className=\"achievement-container\">\r\n        <Tooltip title={requirement}>\r\n            <h5>{achievement.title}</h5>\r\n        </Tooltip>\r\n        <p>{getActiveGenreDescription(achievement)}</p>\r\n        <Grid container className=\"progress-bar\">\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_1.title}\r\n                tier_number={1}\r\n                previous_completed={true}\r\n                user_completed={achievement.tier_1.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_1.threshold}\r\n                image={achievement.tier_1.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_2.title}\r\n                tier_number={2}\r\n                previous_completed={achievement.tier_1.user_completed}\r\n                user_completed={achievement.tier_2.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_2.threshold}\r\n                image={achievement.tier_2.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_3.title}\r\n                tier_number={3}\r\n                previous_completed={achievement.tier_2.user_completed}\r\n                user_completed={achievement.tier_3.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_3.threshold}\r\n                image={achievement.tier_3.image}\r\n            />\r\n            <GenreAchievementSegment\r\n                title={achievement.tier_4.title}\r\n                tier_number={4}\r\n                previous_completed={achievement.tier_3.user_completed}\r\n                user_completed={achievement.tier_4.user_completed}\r\n                user_progress={achievement.user_progress}\r\n                threshold={achievement.tier_4.threshold}\r\n                image={achievement.tier_4.image}\r\n            />\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\nclass AchievementsTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            user_achievements: {\r\n                the_crusade: false,\r\n                the_crusade_progress: 0.0,\r\n                romance_progress: 0,\r\n                romance_1: false,\r\n                romance_2: false,\r\n                romance_3: false,\r\n                romance_4: false,\r\n                pervert_progress: 0,\r\n                pervert_1: false,\r\n                pervert_2: false,\r\n                pervert_3: false,\r\n                pervert_4: false,\r\n                classics_progress: 0,\r\n                classics_1: false,\r\n                classics_2: false,\r\n                classics_3: false,\r\n                classics_4: false,\r\n            },\r\n            anime_achievement_thresholds: {},\r\n            achievements_loaded: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getAnimeAchievementsThresholds();\r\n        this.props.getUserAchievements(this.props.visited_user[User.id]);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearUserAchievements();\r\n    }\r\n\r\n    render() {\r\n        let genre_achievements = getUserGenreAchievements(this.state.user_achievements, this.state.anime_achievement_thresholds);\r\n        if (!this.state.achievements_loaded && !isEmpty(this.props.user_achievements) && !isEmpty(this.props.anime_achievement_thresholds))\r\n            this.setState({\r\n                user_achievements: this.props.user_achievements,\r\n                anime_achievement_thresholds: this.props.anime_achievement_thresholds,\r\n                achievements_loaded: true\r\n            });\r\n\r\n        // genre_achievements = getUserGenreAchievements(this.state.user_achievements, this.state.anime_achievement_thresholds);\r\n\r\n        return (\r\n            <Grid id=\"Achievements\" container>\r\n                <Grid item xs={12}>\r\n                    <h3>Achievements</h3>\r\n                </Grid>\r\n                {this.props.visited_user[User.id] === 15 &&\r\n                    this.props.visited_user[User.id] === this.props.user[User.id] ?\r\n                    <Grid item xs={12} className=\"achievement-container\">\r\n                        <Tooltip title=\"All Anime where the Goddess is present, count towards this achievement.\">\r\n                            <h5>The Crusade</h5>\r\n                        </Tooltip>\r\n                        <p>I am going on pilgrimage, I am going to walk the holy path.</p>\r\n                        <Tooltip title={`${this.state.user_achievements[UserStatistics.the_crusade_progress]}%`}>\r\n                            <LinearProgress className=\"achievement-progress\" variant=\"buffer\" value={this.state.user_achievements[UserStatistics.the_crusade_progress]} valueBuffer={0} />\r\n                        </Tooltip>\r\n                    </Grid> : null}\r\n                {genre_achievements ? genre_achievements.map(achievement => (\r\n                    <GenreAchievement achievement={achievement}/>\r\n                )) : null}\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n    anime_loading: state.anime.anime_loading,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    anime_achievement_thresholds: state.anime.anime_achievement_thresholds,\r\n    user_achievements_loading: state.users.user_achievements_loading,\r\n    user_achievements: state.users.user_achievements,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeAchievementsThresholds, getUserAchievements, clearUserAchievements})(AchievementsTab)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBookOpen, faGamepad, faTrophy, faTv, faUser} from \"@fortawesome/free-solid-svg-icons\";\r\nimport AboutTab from \"./AboutTab\";\r\nimport AnimeTab from \"./AnimeTab\";\r\nimport MangaTab from \"./MangaTab\";\r\nimport AchievementsTab from \"./AchievementsTab\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ProfileTabs(props) {\r\n    const {visited_user} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root profile-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faUser}/> About</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faTv}/> Anime</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faBookOpen}/> Manga</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab disabled={true} label={<p><FontAwesomeIcon className=\"list-icon\" icon={faGamepad}/> Eroge</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    {/*<Tab disabled={true} label={<p><FontAwesomeIcon className=\"list-icon\" icon={faChartLine}/> Statistics</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>*/}\r\n                    <Tab label={<p><FontAwesomeIcon className=\"list-icon\" icon={faTrophy}/> Achievements</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"about-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <AboutTab/>\r\n                </TabPanel>\r\n                <TabPanel className=\"anime-tab box-light\" value={value} index={1} dir={theme.direction}>\r\n                    <AnimeTab/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={2} dir={theme.direction}>\r\n                    <MangaTab/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={3} dir={theme.direction}>\r\n                    EROGE\r\n                </TabPanel>\r\n                {/*<TabPanel value={value} index={4} dir={theme.direction}>*/}\r\n                {/*    STATISTICS*/}\r\n                {/*</TabPanel>*/}\r\n                <TabPanel value={value} index={4} dir={theme.direction}>\r\n                    <AchievementsTab/>\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCamera} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {User} from \"../../../models\";\r\nimport {updateUserProfileImage} from \"../../../actions/users\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nclass UploadProfileImageButton extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Classnames for the loader */\r\n        loader_classnames: PropTypes.object.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onUpdateProfile = this.onUpdateProfile.bind(this);\r\n        this.state = {};\r\n    }\r\n\r\n    onUpdateProfile(e) {\r\n        this.props.updateUserProfileImage(e.target.files[0], this.props.user[User.id]);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"upload-img-btn-container\">\r\n                {this.props.uploading_file ? <CircularProgress className={this.props.loader_classnames}/> : <>\r\n                    <input\r\n                        accept=\"image/*\"\r\n                        style={{display: 'none'}}\r\n                        id=\"upload-profile-img\"\r\n                        multiple={false}\r\n                        type=\"file\"\r\n                        onChange={this.onUpdateProfile}\r\n                    />\r\n                    <label htmlFor=\"upload-profile-img\" className=\"upload-img-btn\">\r\n                        <Button variant=\"outlined\" color=\"primary\" component=\"span\"\r\n                                onMouseEnter={playHoverSound} onClick={playClickSound}>\r\n                            <FontAwesomeIcon icon={faCamera}/>\r\n                        </Button>\r\n                    </label>\r\n                </>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    uploading_file: state.users.uploading_file,\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateUserProfileImage})(UploadProfileImageButton)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {PROFILE_TAB_NAME} from \"../../../globals\";\r\nimport {User, Profile as ProfileModel} from \"../../../models\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../layout/common/common\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {ProfileTabs} from \"./tabs/ProfileTabs\";\r\nimport UploadProfileImageButton from \"../forms/UploadProfileImageButton\";\r\nimport {getUserList, updateUserList} from \"../../../actions/users\";\r\nimport {NOT_FOUND, USER_ANIME_HISTORY, USER_ANIME_LIST, USER_MANGA_HISTORY, USER_MANGA_LIST} from \"../../../urls\";\r\nimport Moment from \"react-moment\";\r\nimport {\r\n    convertUTCDateToLocalDate, isMoreThanAYear, isTimeLessThanAnHourAgo, isTimeLessThanSixHoursAgo,\r\n    isToday,\r\n    isWithinAMonth,\r\n    isWithinAWeek, isWithinAYear, isWithinSixMonths,\r\n    isYesterday\r\n} from \"../../functions\";\r\n\r\nfunction getLastLoginLabel(last_login) {\r\n    const last_login_date = convertUTCDateToLocalDate(new Date(Date.parse(last_login)));\r\n    if (isTimeLessThanAnHourAgo(last_login_date))\r\n        return <span className=\"color-green\">Now</span>;\r\n    else if (isTimeLessThanSixHoursAgo(last_login_date))\r\n        return <span className=\"color-success\">Few hours ago</span>;\r\n    else if (isToday(last_login_date))\r\n        return <span className=\"color-success\">Today</span>;\r\n    else if (isYesterday(last_login_date))\r\n        return <span className=\"color-warning\">Yesterday</span>;\r\n    else if (isWithinAWeek(last_login_date))\r\n        return <span className=\"color-warning\">Few days ago</span>;\r\n    else if (isWithinAMonth(last_login_date))\r\n        return <span className=\"color-warning\">Few weeks ago</span>;\r\n    else if (isWithinSixMonths(last_login_date))\r\n        return <span className=\"color-warning\">Few months ago</span>;\r\n    else if (isWithinAYear(last_login_date))\r\n        return <span className=\"color-warning\">More than six months ago</span>;\r\n    else if (isMoreThanAYear(last_login_date))\r\n        return <span className=\"color-danger\">More than a year ago</span>;\r\n    else return <span className=\"color-danger\">A long time ago</span>\r\n}\r\n\r\n\r\nclass Profile extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            img_cover_loaded: false,\r\n            current_id: this.props.match.params.id,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        this.props.getUser(this.props.match.params.id);\r\n        this.props.getUserList(this.props.match.params.id);\r\n        this.props.updateUserList(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {match} = this.props;\r\n\r\n        if (prevState.current_id !== match.params.id) {\r\n            this.setState({current_id: this.props.match.params.id});\r\n            this.props.getUser(this.props.match.params.id);\r\n            this.props.getUserList(this.props.match.params.id);\r\n            this.props.updateUserList(this.props.match.params.id);\r\n\r\n            window.scrollTo(0, 0);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        document.title = this.props.visited_user_loaded ? this.props.visited_user[User.username] : PROFILE_TAB_NAME;\r\n\r\n        let loaded = this.props.visited_user_loaded;\r\n        if (loaded && parseInt(this.props.match.params.id) !== this.props.visited_user[User.id])\r\n            loaded = false;\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                {loaded ? <Grid id=\"Profile\" container xs={12}>\r\n                    <Grid item xs={12}>\r\n                        <h1>{this.props.visited_user[User.username]}</h1>\r\n                    </Grid>\r\n                    <Grid item xs={2} className=\"side-panel\">\r\n                        <div className=\"side-panel-sticky-helper\"/>\r\n                        <div className=\"side-panel-container\">\r\n                            <div className=\"avatar-image-container\">\r\n                                <PreLoadImage src={this.props.visited_user[User.profile][ProfileModel.profile_image]}\r\n                                              alt={'Avatar'}/>\r\n                                {this.props.user && this.props.user[User.id] === parseInt(this.props.match.params.id) ?\r\n                                    <UploadProfileImageButton loader_classnames=\"upload-img-loader\"/> : null}\r\n                            </div>\r\n                            <List className=\"info-list box-light\">\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Title\"\r\n                                        secondary={this.props.visited_user[User.profile][ProfileModel.title]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Bio\"\r\n                                        secondary={this.props.visited_user[User.profile][ProfileModel.bio]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Email\"\r\n                                        secondary={this.props.visited_user[User.email]}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Last Active\"\r\n                                        secondary={getLastLoginLabel(this.props.visited_user[User.last_login])}/>\r\n                                </ListItem>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary=\"Joined\"\r\n                                        secondary={<Moment format={'Do MMM YYYY'} date={this.props.visited_user[User.date_joined]}/>}/>\r\n                                </ListItem>\r\n                            </List>\r\n                            <Divider/>\r\n                            <List className=\"box-light\" component=\"nav\" aria-label=\"main mailbox folders\">\r\n                                <CyberLink to={USER_ANIME_LIST(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Anime List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_ANIME_HISTORY(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Anime History\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_MANGA_LIST(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Manga List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={USER_MANGA_HISTORY(this.props.visited_user[User.id])}>\r\n                                    <ListItem button>\r\n                                        Manga History\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                                <CyberLink to={NOT_FOUND}>\r\n                                    <ListItem button>\r\n                                        Eroge List\r\n                                    </ListItem>\r\n                                </CyberLink>\r\n                            </List>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={10} className=\"main-panel\">\r\n                        <ProfileTabs visited_user={this.props.visited_user}/>\r\n                    </Grid>\r\n                </Grid> : this.props.user_loading ? <Loading text={'User Loading'}/> : null}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser, getUserList, updateUserList})(Profile)\r\n","import React, {Component} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {connect} from \"react-redux\";\r\nimport {Profile as ProfileModel, User} from \"../../../../models\";\r\nimport {PreLoadImage} from \"../../../layout/common/common\";\r\nimport UploadProfileImageButton from \"../../forms/UploadProfileImageButton\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {EditBioForm} from \"../../forms/shortForms\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\n\r\n\r\nclass UserSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.editBio = this.editBio.bind(this);\r\n        this.finishEditingBio = this.finishEditingBio.bind(this);\r\n        this.state = {\r\n            edit_bio: false\r\n        };\r\n    }\r\n\r\n    editBio() {\r\n        this.setState({edit_bio: true})\r\n    }\r\n\r\n    finishEditingBio() {\r\n        this.setState({edit_bio: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <h1>User Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Personal settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Avatar\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {!this.props.uploading_file ? <PreLoadImage src={this.props.user[User.profile][ProfileModel.profile_image]}\r\n                                                      alt={'Avatar'} className=\"settings-avatar\"/> : null}\r\n                                        <UploadProfileImageButton/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Title\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.profile][ProfileModel.title]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Username\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.username]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Email\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {this.props.user[User.email]}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Bio\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">\r\n                                        <ClickAwayListener onClickAway={this.finishEditingBio}>\r\n                                            <div>\r\n                                                {!this.state.edit_bio ? <div onClick={this.editBio}>\r\n                                                    {this.props.user[User.profile][ProfileModel.bio] ? this.props.user[User.profile][ProfileModel.bio] : 'No bio'}\r\n                                                </div> : null}\r\n                                                {this.state.edit_bio ? (\r\n                                                    <EditBioForm bio={this.props.user[User.profile][ProfileModel.bio]}\r\n                                                                 closeBio={this.finishEditingBio}/>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </ClickAwayListener>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Show adult content\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Switch\r\n                                            checked={true}\r\n                                            color=\"primary\"\r\n                                            name=\"checkedB\"\r\n                                            inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    cookies: state.cookies.sound_effects,\r\n    uploading_file: state.users.uploading_file,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(UserSettings)\r\n","import React, {Component} from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faFileUpload, faTools, faVolumeMute, faVolumeUp} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {connect} from \"react-redux\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {setCookieSoundEffects} from \"../../../../actions/cookies\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Profile as ProfileModel, Profile, User} from \"../../../../models\";\r\nimport {muteUnmuteThemeSounds} from \"../../../../actions/users\";\r\nimport {EditAboutMeBBCodeDialog, EditBioForm} from \"../../forms/shortForms\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\nimport {getBrowseGridListCols} from \"../../../functions\";\r\nimport {BBCODE_EDITOR, USER_ANIME_STATISTICS} from \"../../../../urls\";\r\n\r\n\r\nclass ProfileSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.openBBCodeDialog = this.openBBCodeDialog.bind(this);\r\n        this.closeBBCodeDialog = this.closeBBCodeDialog.bind(this);\r\n        this.state = {\r\n            bbcode_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    openBBCodeDialog() {\r\n        this.setState({bbcode_dialog_open: true})\r\n    }\r\n\r\n    closeBBCodeDialog() {\r\n        this.setState({bbcode_dialog_open: false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <h1>Profile Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Theme settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Theme\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <FormControl variant=\"filled\">\r\n                                            <InputLabel id=\"select-theme\">Theme</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"select-theme\"\r\n                                                id=\"demo-simple-select-outlined\"\r\n                                                value={'Cyber-Genesis'}\r\n                                                label=\"Theme\"\r\n                                            >\r\n                                                <MenuItem value={'Cyber-Genesis'}>Cyber-Genesis</MenuItem>\r\n                                                <MenuItem value={'Legacy'}>Legacy</MenuItem>\r\n                                                <MenuItem value={'Oceanic Blue'}>Oceanic Blue</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Sounds\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberButton onClick={this.props.muteUnmuteThemeSounds}>\r\n                                            <FontAwesomeIcon icon={this.props.user[User.profile][Profile.theme_sounds] ?\r\n                                                    faVolumeUp : faVolumeMute}/>\r\n                                        </CyberButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Show adult content\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        Yes\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>About section</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Edit About Me bbCode\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberLink to={BBCODE_EDITOR}>\r\n                                            <CyberButton title=\"BBCode Editor\" variant=\"outlined\" >\r\n                                                <FontAwesomeIcon icon={faTools}/>\r\n                                            </CyberButton>\r\n                                        </CyberLink>\r\n                                        {/*<CyberButton variant=\"outlined\" onClick={this.openBBCodeDialog}>*/}\r\n                                        {/*    <FontAwesomeIcon icon={faEdit}/>*/}\r\n                                        {/*</CyberButton>*/}\r\n                                        {/*<EditAboutMeBBCodeDialog*/}\r\n                                        {/*    bbcode={this.props.user[User.profile][ProfileModel.about_section_bbcode]}*/}\r\n                                        {/*    open={this.state.bbcode_dialog_open}*/}\r\n                                        {/*    onClose={this.closeBBCodeDialog}/>*/}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Anime stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Manga stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Display Eroge stats summary\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        No\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n            </Grid>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    sound_effects: state.cookies.sound_effects,\r\n});\r\n\r\nexport default connect(mapStateToProps, {muteUnmuteThemeSounds})(ProfileSettings)\r\n","import React, { useState } from 'react';\r\n\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport store from \"../../../../store\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {\r\n    updateUserAnimeHistoryPrivacy,\r\n    updateUserAnimeListPrivacy, updateUserMangaHistoryPrivacy,\r\n    updateUserMangaListPrivacy\r\n} from \"../../../../actions/users\";\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserAnimeListPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_anime_list_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserAnimeListPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserAnimeHistoryPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_anime_history_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserAnimeHistoryPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserMangaListPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_manga_list_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserMangaListPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} props.user\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function ToggleUserMangaHistoryPrivacyForm(props) {\r\n    const {user} = props;\r\n    const [IsPrivate, setIsPrivate] = useState(user[User.profile][Profile.is_manga_history_private]);\r\n\r\n    return <Switch\r\n        checked={IsPrivate}\r\n        onChange={() => {\r\n            setIsPrivate(!IsPrivate);\r\n            store.dispatch(updateUserMangaHistoryPrivacy(!IsPrivate));\r\n        }}\r\n        color=\"primary\"\r\n        name=\"checkedB\"\r\n        inputProps={{'aria-label': 'primary checkbox'}}\r\n    />\r\n}\r\n\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faCheck,\r\n    faCloudDownloadAlt,\r\n    faEdit,\r\n    faFileImport,\r\n    faFileUpload, faQuestion, faTimes,\r\n    faTools,\r\n    faVolumeMute\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n    EditAboutMeBBCodeDialog,\r\n    ImportAnimeListFromMal, ImportMangaListFromMal,\r\n    ScrapeEpisodeHistoryFromMalDialog, ScrapeEpisodeHistoryFromMalForm\r\n} from \"../../forms/shortForms\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {Profile, Profile as ProfileModel, User, UserList} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n    fixUserStartAndFinishDateForAnimeEntries,\r\n    getUserEpisodeHistoryScraperProgress,\r\n    getUserList\r\n} from \"../../../../actions/users\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport {\r\n    ToggleUserAnimeHistoryPrivacyForm,\r\n    ToggleUserAnimeListPrivacyForm, ToggleUserMangaHistoryPrivacyForm, ToggleUserMangaListPrivacyForm\r\n} from \"../../forms/list_privacy/listPrivacyForms\";\r\n\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    return (\r\n        <Box position=\"relative\" display=\"inline-flex\">\r\n            <CircularProgress variant=\"determinate\" {...props} />\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Typography variant=\"caption\" component=\"div\" color=\"textPrimary\">{`${props.value}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nclass ListSettings extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.openScrapeHistoryDialog = this.openScrapeHistoryDialog.bind(this);\r\n        this.closeScrapeHistoryDialog = this.closeScrapeHistoryDialog.bind(this);\r\n        this.state = {\r\n            scrape_episode_history_dialog_open: false,\r\n            scraping_info_reading: false,\r\n            update_interval: null,\r\n            scraping_history_info_modal_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getUserList(this.props.user[User.id]);\r\n        this.props.getUserEpisodeHistoryScraperProgress();\r\n        const {getUserEpisodeHistoryScraperProgress} = this.props;\r\n        if (!isEmpty(this.props.user_list) && this.props.user_list[UserList.is_scraping_episode_history_from_mal]) {\r\n            getUserEpisodeHistoryScraperProgress();\r\n            let update_interval = setInterval(function () {\r\n                getUserEpisodeHistoryScraperProgress();\r\n            }, 10000);\r\n            this.setState({scraping_info_reading: true, update_interval: update_interval});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // setTimeout(() => { getUserEpisodeHistoryScraperProgress() }, 1000);\r\n        const {getUserEpisodeHistoryScraperProgress} = this.props;\r\n\r\n        if (!this.state.scraping_info_reading) {\r\n            if (!isEmpty(this.props.user_list) && this.props.user_list[UserList.is_scraping_episode_history_from_mal]) {\r\n                getUserEpisodeHistoryScraperProgress();\r\n                let update_interval = setInterval(function () {\r\n                    getUserEpisodeHistoryScraperProgress();\r\n                }, 10000);\r\n                this.setState({scraping_info_reading: true, update_interval: update_interval});\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.update_interval);\r\n    }\r\n\r\n    openScrapeHistoryDialog() {\r\n        this.setState({scrape_episode_history_dialog_open: true})\r\n    }\r\n\r\n    closeScrapeHistoryDialog() {\r\n        this.setState({scrape_episode_history_dialog_open: false})\r\n    }\r\n\r\n    render() {\r\n        return this.props.user_list_loading || isEmpty(this.props.user_list) ? <CircularProgress/> :\r\n            <Grid container className=\"settings-tab\">\r\n                <Grid item xs={12}>\r\n                    <h1>List Settings</h1>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Anime settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Anime List is {this.props.user[User.profile][Profile.is_anime_list_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserAnimeListPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Anime History is {this.props.user[User.profile][Profile.is_anime_history_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserAnimeHistoryPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Import from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ImportAnimeListFromMal/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Scrape episode history from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {isEmpty(this.props.user_list) || !this.props.user_list[UserList.is_scraping_episode_history_from_mal] ?\r\n                                            this.props.user_list_loading ? <CircularProgress/> :\r\n                                                <CyberButton variant=\"outlined\" onClick={this.openScrapeHistoryDialog}>\r\n                                                    <FontAwesomeIcon icon={faCloudDownloadAlt}/>\r\n                                                </CyberButton>\r\n                                        : <>\r\n                                            <p>{this.props.progress}%</p>\r\n                                            <LinearProgress variant=\"determinate\" value={this.props.progress}/>\r\n                                        </>}\r\n                                        <ScrapeEpisodeHistoryFromMalDialog\r\n                                            open={this.state.scrape_episode_history_dialog_open}\r\n                                            onClose={this.closeScrapeHistoryDialog}/>\r\n                                    </TableCell>\r\n                                    <div className=\"help-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n                                        playClickSound();\r\n                                        this.setState({scraping_history_info_modal_open: true})\r\n                                    }}>\r\n                                        <FontAwesomeIcon icon={faQuestion}/>\r\n                                    </div>\r\n                                    <Dialog\r\n                                        aria-labelledby=\"scrape-episode-history-info-title\"\r\n                                        open={this.state.scraping_history_info_modal_open}\r\n                                        onClose={() => {\r\n                                            this.setState({scraping_history_info_modal_open: false})\r\n                                        }}>\r\n                                        <div id=\"scrape-episode-history-info\">\r\n                                            <DialogTitle id=\"scrape-episode-history-info-title\">Quick\r\n                                                Guide</DialogTitle>\r\n                                            <Typography variant=\"body1\" paragraph={true}>\r\n                                                To scrape your episode history from MAL you first must provide your\r\n                                                authentication cookies of your account on MAL.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\">\r\n                                                To find these cookies go to MAL, log in to your account and open Inspect\r\n                                                Element on your browser:\r\n                                            </Typography>\r\n                                            <ul>\r\n                                                <li>Click on the Application tab</li>\r\n                                                <li>Click on Cookies under the Storage segment on the left</li>\r\n                                                <li>Click on the MAL url under Cookies</li>\r\n                                                <li>In the value column copy the value of MALSESSIONID and MALHLOGSESSID\r\n                                                    and paste them in the form accordingly\r\n                                                </li>\r\n                                            </ul>\r\n                                            <img src=\"images/user_scrape_guide_1.jpg\"/>\r\n                                            <Typography variant=\"body1\">\r\n                                                The scraper will use these cookies only to view your episode history and\r\n                                                scrape it.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body1\">\r\n                                                When the scraper starts:\r\n                                            </Typography>\r\n                                            <ul>\r\n                                                <li>Don't log out of MAL during the scraping process.</li>\r\n                                                <li>The scraper might last up to few hours depending on your list\r\n                                                    size.\r\n                                                </li>\r\n                                                <li>You will get progress of the scraper when it starts.</li>\r\n                                                <li>When the scraper finishes you can log out of MAL and log in again to\r\n                                                    refresh your cookies. (For your security)\r\n                                                </li>\r\n                                            </ul>\r\n                                            <Typography>\r\n                                                NOTE: Only one user can scrape from MAL at the time, this is to\r\n                                                prevent over-clogging MAL with requests. If someone is already\r\n                                                scraping please wait and try again later.\r\n                                            </Typography>\r\n\r\n                                            <div className=\"close-btn\">\r\n                                                <CyberButton classNames=\"btn-contained-primary\" onClick={() => {\r\n                                                    this.setState({scraping_history_info_modal_open: false})\r\n                                                }}>\r\n                                                    <FontAwesomeIcon icon={faTimes}/>\r\n                                                </CyberButton>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Dialog>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Fix Start Date and Finish Date for your anime list entries\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <CyberButton variant=\"outlined\"\r\n                                                     onClick={() => {\r\n                                                         if (window.confirm('Are you sure?'))\r\n                                                             this.props.fixUserStartAndFinishDateForAnimeEntries()\r\n                                                     }}>\r\n                                            <FontAwesomeIcon icon={faTools}/>\r\n                                        </CyberButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={6}/>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={11}>\r\n                    <h2>Manga settings</h2>\r\n                </Grid>\r\n\r\n                <Grid item xs={1}/>\r\n                <Grid item xs={5}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\" className=\"box-light\">\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Manga List is {this.props.user[User.profile][Profile.is_manga_list_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserMangaListPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Your Manga History is {this.props.user[User.profile][Profile.is_manga_history_private] ? 'Private' : 'Public'}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ToggleUserMangaHistoryPrivacyForm user={this.props.user}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        Import from MAL\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <ImportMangaListFromMal/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_list: state.users.user_list,\r\n    user_list_loading: state.users.user_list_loading,\r\n    progress: state.users.user_list[UserList.scraping_episode_history_from_mal_progress],\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getUserList, getUserEpisodeHistoryScraperProgress, fixUserStartAndFinishDateForAnimeEntries\r\n})(ListSettings)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport UserSettings from \"./UserSettings\";\r\nimport ProfileSettings from \"./ProfileSettings\";\r\nimport ListSettings from \"./ListSettings\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function SettingsTabs(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" color=\"primary\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label=\"User\" {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"Profile\" {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label=\"List\" {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel value={value} index={0} dir={theme.direction}>\r\n                    <UserSettings/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1} dir={theme.direction}>\r\n                    <ProfileSettings/>\r\n                </TabPanel>\r\n                <TabPanel value={value} index={2} dir={theme.direction}>\r\n                    <ListSettings/>\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {SETTINGS_TAB_NAME} from \"../../../globals\";\r\nimport {LOGIN} from \"../../../urls\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport {SettingsTabs} from \"./tabs/SettingsTabs\";\r\n\r\nimport '../../../assets/css/users.css'\r\n\r\n\r\nclass Settings extends Component {\r\n    componentDidMount() {\r\n        document.title = SETTINGS_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.user_authenticated)\r\n            return <Redirect to={LOGIN}/>;\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Settings\">\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <SettingsTabs/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_authenticated: state.auth.user_authenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(Settings)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport PropTypes from \"prop-types\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass MangaBrowse extends Component {\r\n    static propTypes = {\r\n        /** Season object {year: season:} */\r\n        season: PropTypes.object,\r\n    };\r\n\r\n    render() {\r\n        let manga_filters = this.props.manga_browse_filters;\r\n        if (!isEmpty(this.props.season))\r\n            manga_filters = this.props.manga_season_filters;\r\n        return <Browse\r\n            branch={BRANCH_MANGA}\r\n            titles_loading={this.props.manga_loading}\r\n            filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n            filtered_titles={this.props.filtered_manga}\r\n            title_filters={manga_filters}\r\n            user_entry_statuses={this.props.user_manga_entry_statuses}\r\n            season={this.props.season}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_browse_filters: state.cookies.manga_browse_filters,\r\n    manga_season_filters: state.cookies.manga_season_filters,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(MangaBrowse)\r\n","import React from 'react';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport {CopyToClipboard} from \"react-copy-to-clipboard/lib/Component\";\r\n\r\n\r\nexport function CopyTextToClipboard(props) {\r\n    const {text} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleTooltipClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleTooltipOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"copy-to-clipboard-text\">\r\n            <ClickAwayListener onClickAway={handleTooltipClose}>\r\n                <Tooltip\r\n                    PopperProps={{disablePortal: true,}}\r\n                    onClose={handleTooltipClose}\r\n                    open={open}\r\n                    disableFocusListener\r\n                    disableHoverListener\r\n                    disableTouchListener\r\n                    title=\"Copied!\"\r\n                >\r\n                    <CopyToClipboard text={text}>\r\n                        <span onClick={handleTooltipOpen}>{text}</span>\r\n                    </CopyToClipboard>\r\n                </Tooltip>\r\n            </ClickAwayListener>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {playClickSound, playHoverSound} from \"../layout/sounds\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Material UI tabs. Supply it with tab information to render the tabs.\r\n * @param props.tabs {Object} Array of tab information.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DisplayTabs(props) {\r\n    const {tabs} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root'}>\r\n            <AppBar position=\"static\" className=\"cyber-tabs\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"secondary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    {tabs.map((tab, x) => (\r\n                        <Tab disabled={tab.disabled} label={tab.label} {...a11yProps(x)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    ))}\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                {tabs.map((tab, x) => (\r\n                    <TabPanel value={value} index={x} dir={theme.direction} className=\"box-light\">\r\n                        {tab.tab}\r\n                    </TabPanel>\r\n                ))}\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsis</h2>\r\n                    <p>{this.props.anime[Anime.synopsis]}</p>\r\n                    {this.props.anime[Anime.background] ?\r\n                        <>\r\n                            <h2>Background</h2>\r\n                            <p>{this.props.anime[Anime.background]}</p>\r\n                        </> : null}\r\n                    <h2>OST</h2>\r\n                    <p><span>Openings:</span> {this.props.anime[Anime.opening_theme]}</p>\r\n                    <p><span>Endings:</span> {this.props.anime[Anime.ending_theme]}</p>\r\n\r\n                    <h2>Main Characters</h2>\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.anime[Anime.main_characters].map((character, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Manga} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsis</h2>\r\n                    <p>{this.props.manga[Manga.synopsis]}</p>\r\n                    {this.props.manga[Manga.background] ?\r\n                        <>\r\n                            <h2>Background</h2>\r\n                            <p>{this.props.manga[Manga.background]}</p>\r\n                        </> : null}\r\n                    <h2>Main Characters</h2>\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.manga[Manga.main_characters].map((character, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Character} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, BRANCH_MANGA} from \"../../../../globals\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {faExpandArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nfunction DisplayVoiceActors(props) {\r\n    const {voice_actors} = props;\r\n    const [expand, setExpand] = useState(false);\r\n    return <>\r\n        <h2>Voice Actors{' '}\r\n            <CyberButton component=\"span\" onClick={() => {setExpand(!expand)}}>\r\n                <FontAwesomeIcon icon={faExpandArrowsAlt}/>\r\n            </CyberButton>\r\n        </h2>\r\n        {expand ? <pre>{voice_actors}</pre> : <p>{voice_actors}</p>}\r\n    </>\r\n}\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>Description</h2>\r\n                    <p>{this.props.character[Character.description]}</p>\r\n                    <DisplayVoiceActors voice_actors={this.props.character[Character.voice_actors]}/>\r\n\r\n                    {this.props.character[Character.anime_roles] &&\r\n                    this.props.character[Character.anime_roles].length > 0 ? <h2>Animeography</h2> : null}\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.character[Character.anime_roles].map((anime, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_ANIME} title={anime}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n                <div className=\"general-description\">\r\n                    {this.props.character[Character.manga_roles] &&\r\n                    this.props.character[Character.manga_roles].length > 0 ? <h2>Mangaography</h2> : null}\r\n                </div>\r\n                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                    {this.props.character[Character.manga_roles].map((manga, i) => (\r\n                        <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                            <GridListTile cols={1}>\r\n                                <TitleCard branch={BRANCH_MANGA} title={manga}/>\r\n                            </GridListTile>\r\n                        </Grow>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    character: state.characters.character,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component, useState} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport reactPreset from \"@bbob/preset-react\";\r\nimport BBCode from \"@bbob/react/lib/Component\";\r\n\r\nimport {Anime, ApiResult, Character, Person, Profile, User} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/people.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"general-description\">\r\n                    <h2>More Info</h2>\r\n                    <BBCode plugins={[reactPreset()]}>\r\n                        {this.props.person[Person.more_info]}\r\n                    </BBCode>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ImageGallery from 'react-image-gallery';\r\n\r\nimport {CYBER_GENESIS_URL} from \"../../../../globals\";\r\nimport {CoverImages, Eroge} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport '../../../../../node_modules/react-image-gallery/styles/css/image-gallery.css'\r\n\r\n\r\nclass GeneralTab extends Component {\r\n    render() {\r\n        let images = [];\r\n        if (this.props.eroge[Eroge.eroge_screenshots])\r\n            for (let i = 0; i < this.props.eroge[Eroge.eroge_screenshots].length; i++)\r\n                images.push({\r\n                    original: `${CYBER_GENESIS_URL}${this.props.eroge[Eroge.eroge_screenshots][i][CoverImages.image]}`,\r\n                    thumbnail: `${CYBER_GENESIS_URL}${this.props.eroge[Eroge.eroge_screenshots][i][CoverImages.image]}`\r\n                });\r\n\r\n        return (\r\n            <div className=\"general-tab\">\r\n                <div className=\"general-description\">\r\n                    <h2>Synopsys</h2>\r\n                    <p>{this.props.eroge[Eroge.description]}</p>\r\n\r\n                    <h2>Screenshots</h2>\r\n                    <Grid container>\r\n                        <Grid item xs={2}/>\r\n                        <Grid item xs={8} className=\"image-gallery\">\r\n                            <ImageGallery items={images}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge: state.eroge.eroge,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(GeneralTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult} from \"../../../../models\";\r\nimport {getAllCharactersForAnime} from \"../../../../actions/anime\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass CharactersTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.anime[Anime.all_characters] || this.props.all_characters[ApiResult.previous])\r\n            this.props.getAllCharactersForAnime(this.props.anime[Anime.id])\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.all_characters[ApiResult.count] / 50)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAllCharactersForAnime(this.props.anime[Anime.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"characters-tab\">\r\n                {this.props.all_characters ? <>\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.all_characters[ApiResult.results].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    all_characters: state.anime.anime[Anime.all_characters],\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllCharactersForAnime})(CharactersTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, ApiResult, Manga} from \"../../../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport {getAllCharactersForManga} from \"../../../../actions/manga\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\n\r\nclass CharactersTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.manga[Manga.all_characters] || this.props.all_characters[ApiResult.previous])\r\n            this.props.getAllCharactersForManga(this.props.manga[Manga.id])\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.all_characters[ApiResult.count] / 50)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAllCharactersForManga(this.props.manga[Manga.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"characters-tab\">\r\n                {this.props.all_characters ? <>\r\n                    <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                        {this.props.all_characters[ApiResult.results].map((character, i) => (\r\n                            <Grow key={i} in {...({timeout: 200 + (i * 50)})}>\r\n                                <GridListTile cols={1}>\r\n                                    <TitleCard branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </GridListTile>\r\n                            </Grow>\r\n                        ))}\r\n                    </GridList>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.all_characters[ApiResult.count] / 50)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    all_characters: state.manga.manga[Manga.all_characters],\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAllCharactersForManga})(CharactersTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {Anime, Manga, VALID_MANGA_RELATION_NAMES, VALID_MANGA_RELATIONS} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getRelationsForManga} from \"../../../../actions/manga\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass RelationsTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.manga_relations))\r\n            this.props.getRelationsForManga(this.props.manga[Manga.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"relations-tab\">\r\n                {!isEmpty(this.props.manga_relations) ? <>\r\n                    {this.props.manga_relations['manga_relation_adaptation'].length > 0 ?\r\n                        <div>\r\n                            <h2 className=\"relation-name\">Adaptation</h2>\r\n                            <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                {this.props.manga_relations['manga_relation_adaptation'].map((anime, x) => (\r\n                                    <Grow key={x} in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1}>\r\n                                            <TitleCard\r\n                                                branch={BRANCH_ANIME}\r\n                                                title={anime}\r\n                                                user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                    this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                            />\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                ))}\r\n                            </GridList>\r\n                        </div> : null}\r\n\r\n                    {VALID_MANGA_RELATIONS.map((relation_name, i) => (\r\n                        relation_name !== 'manga_relation_adaptation' ?\r\n                            <div key={i}>\r\n                                {this.props.manga_relations[relation_name].length > 0 ?\r\n                                    <h2 className=\"relation-name\">{VALID_MANGA_RELATION_NAMES[relation_name]}</h2> : null}\r\n\r\n                                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                    {this.props.manga_relations[relation_name].map((manga, y) => (\r\n                                        <Grow key={y} in {...({timeout: 200 + (y * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={BRANCH_MANGA}\r\n                                                    title={manga}\r\n                                                    user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                                            this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                            </div> : null))}\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    manga_relations: state.manga.manga[Manga.manga_relations],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRelationsForManga})(RelationsTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Field, Form, Formik} from 'formik';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport {downloadTorrent, getStorageInfo} from \"../../../actions/requiem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {Anime, AnimeFranchise} from \"../../../models\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {faCheck, faPlus, faPlusCircle, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\nimport '../../../assets/css/requiem.css'\r\nimport {getAnimeFranchise} from \"../../../actions/anime\";\r\nimport {playClickSound, playHoverSound} from \"../../layout/sounds\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\n\r\nclass DownloadTorrentForm extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleAddIdToExtraIds = this.handleAddIdToExtraIds.bind(this);\r\n        this.clearExtraIds = this.clearExtraIds.bind(this);\r\n        this.toggleAddExtra = this.toggleAddExtra.bind(this);\r\n        this.state = {extra: false, extra_ids: []}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getStorageInfo();\r\n        if (isEmpty(this.props.anime_franchise))\r\n            this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    toggleAddExtra() {\r\n        playClickSound();\r\n        this.setState({extra: !this.state.extra, extra_ids: []})\r\n    }\r\n\r\n    clearExtraIds() {\r\n        playClickSound();\r\n        this.setState({extra_ids: []})\r\n    }\r\n\r\n    handleAddIdToExtraIds(id) {\r\n        let extra_ids = this.state.extra_ids;\r\n        const index = extra_ids.indexOf(id);\r\n\r\n        if (index > -1) extra_ids.splice(index, 1);\r\n        else extra_ids.push(id);\r\n\r\n        this.setState({extra_ids: extra_ids});\r\n    }\r\n\r\n    render() {\r\n        const field_names = {\r\n            disk: 'disk',\r\n            files: 'files',\r\n            extract_subs: 'extract_subs',\r\n            magnet: 'magnet',\r\n            extra_ids: 'extra_ids',\r\n            additional_info: 'additional_info',\r\n        };\r\n\r\n        let initial_values = {\r\n            anime: this.props.anime[Anime.id],\r\n            disk: 'L',\r\n            files: '',\r\n            extract_subs: false,\r\n            magnet: '',\r\n            extra_ids: '',\r\n            additional_info: '',\r\n        };\r\n\r\n        return (\r\n            <div id=\"Download-Anime-Torrent-Form\" className=\"modal-container modal-container-requiem\">\r\n                <Formik\r\n                    initialValues={initial_values}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        values.extra_ids = this.state.extra_ids.join(', ');\r\n                        console.log(values);\r\n                        this.props.downloadTorrent(this.props.anime[Anime.id], values);\r\n                        setSubmitting(false);\r\n                    }}>\r\n                    {({\r\n                          isSubmitting, values, handleChange,\r\n                          handleBlur, setValues, setFieldValue\r\n                      }) => (\r\n                        <Form className=\"content-container\">\r\n                            {/*<Grid container>*/}\r\n                            {/*    {storage.map((disk, i) => (*/}\r\n                            {/*        <Grid item xs={12} md={4}>*/}\r\n                            {/*            <StorageDiskInfo key={i} disk={disk}/>*/}\r\n                            {/*        </Grid>*/}\r\n                            {/*    ))}*/}\r\n                            {/*</Grid>*/}\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={4}>\r\n                                    <InputLabel id=\"disk\">Disk</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"disk\"\r\n                                        className=\"form-control\"\r\n                                        color=\"secondary\"\r\n                                        value={values[field_names.disk]}\r\n                                        name={field_names.disk}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    >\r\n                                        <MenuItem value=\"F\">F</MenuItem>\r\n                                        <MenuItem value=\"G\">G</MenuItem>\r\n                                        <MenuItem value=\"H\">H</MenuItem>\r\n                                        <MenuItem value=\"I\">I</MenuItem>\r\n                                        <MenuItem value=\"J\">J</MenuItem>\r\n                                        <MenuItem value=\"K\">K</MenuItem>\r\n                                        <MenuItem value=\"L\">L</MenuItem>\r\n                                        <MenuItem value=\"M\">M</MenuItem>\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={8} className=\"extract-subs-container\">\r\n                                    <label>Extract Subs</label>\r\n                                    <Checkbox\r\n                                        value={values[field_names.extract_subs]}\r\n                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                        name={field_names.extract_subs}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Magnet\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.magnet}\r\n                                        value={values[field_names.magnet]}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group torrent-form-group\">\r\n                                <Grid item xs={2} className=\"torrent-label-container\">\r\n                                    <label>Torrent</label>\r\n                                </Grid>\r\n                                <Grid item xs={9}>\r\n                                    <Dropzone onDrop={acceptedFiles => setFieldValue(field_names.files, acceptedFiles)}>\r\n                                        {({getRootProps, getInputProps, isDragActive}) => (\r\n                                            <section className={isDragActive ? 'dropzone dropzone-active' : 'dropzone'}>\r\n                                                <div className=\"\" {...getRootProps()}>\r\n                                                    <input {...getInputProps()} />\r\n                                                    {isDragActive ?\r\n                                                        <p className=\"hovered\">\r\n                                                            Drop the torrent here ...</p> :\r\n                                                        <p>\r\n                                                            Drag and drop the torrent files here, or click to select\r\n                                                            from explorer</p>\r\n                                                    }\r\n                                                </div>\r\n                                            </section>\r\n                                        )}\r\n                                    </Dropzone>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    {values[field_names.files] ? values[field_names.files].map((file, x) => (\r\n                                        <p key={x} className=\"text-center color-magenta\">> {file['name']}</p>\r\n                                    )) : null}\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={1} className=\"extra-buttons-containers\">\r\n                                    <span id=\"extra-btn\" className={this.state.extra ? 'selected' : ''}\r\n                                          onClick={this.toggleAddExtra} onMouseEnter={playHoverSound}>\r\n                                        <FontAwesomeIcon icon={this.state.extra ? faCheck : faPlus}/>\r\n                                    </span>\r\n                                </Grid>\r\n                                <Grid item xs={10}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Extras\"\r\n                                        color=\"secondary\"\r\n                                        autoComplete={false}\r\n                                        name={field_names.extra_ids}\r\n                                        value={this.state.extra_ids.join(', ')}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                                <Grid item xs={1} className=\"extra-buttons-containers\">\r\n                                    <span id=\"trash-btn\" onClick={this.clearExtraIds} onMouseEnter={playHoverSound}>\r\n                                        <FontAwesomeIcon icon={faTrash}/>\r\n                                    </span>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                {this.state.extra ? <Grid item xs={12}>\r\n                                    {!this.props.anime_franchise_loading ?\r\n                                        <GridList cellHeight={200} cols={4}>\r\n                                            {this.props.anime_franchise[AnimeFranchise.anime_franchise].map((anime, x) => (\r\n                                                !anime[Anime.anime_on_server] && anime[Anime.id] !== this.props.anime[Anime.id] ?\r\n                                                    <GridListTile\r\n                                                        cols={1}\r\n                                                        className={this.state.extra_ids.indexOf(anime[Anime.id]) >= 0 ?\r\n                                                            'add-franchises-container added-franchise' :\r\n                                                            'add-franchises-container'}>\r\n                                                    <span className=\"add-to-extra-ids-btn\" title={anime[Anime.id]}\r\n                                                          onClick={() => {\r\n                                                              playClickSound();\r\n                                                              this.handleAddIdToExtraIds(anime[Anime.id])\r\n                                                          }}><FontAwesomeIcon icon={faPlusCircle}/></span>\r\n                                                        <TitleCard\r\n                                                            branch={BRANCH_ANIME}\r\n                                                            title={anime}\r\n                                                            mini={true}/>\r\n                                                    </GridListTile> : null))}\r\n                                        </GridList>\r\n                                        : <Loading text={'Franchise loading'}/>}\r\n                                </Grid> : null}\r\n                            </Grid>\r\n                            <Grid container className=\"form-group\">\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        className=\"form-control\"\r\n                                        label=\"Additional Info\"\r\n                                        color=\"secondary\"\r\n                                        multiline\r\n                                        value={values[field_names.additional_info]}\r\n                                        name={field_names.additional_info}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <div className=\"submit-container\">\r\n                                <CyberButton variant=\"outlined\" type=\"submit\" onClick={this.props.handleClose}\r\n                                             disabled={isSubmitting}>\r\n                                    Submit\r\n                                </CyberButton>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    storage: state.requiem.storage,\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {downloadTorrent, getStorageInfo, getAnimeFranchise})(DownloadTorrentForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faDownload, faEdit, faExpandArrowsAlt, faPlus, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport DownloadTorrentForm from \"./DownloadTorrentForm\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {Anime, AnimeOnServer, UserAnimeEntry} from \"../../../models\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {LANGUAGES} from \"../../../globals\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {addAnimeToServer, updateAnimeToServer} from \"../../../actions/requiem\";\r\n\r\n\r\nclass DownloadTorrentModalForm extends Component {\r\n    static propTypes = {\r\n        /** classNames */\r\n        classNames: PropTypes.string,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.toggleExpandLanguages = this.toggleExpandLanguages.bind(this);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n            expand_languages: false,\r\n        };\r\n    }\r\n\r\n    toggleExpandLanguages() {\r\n        this.setState({expand_languages: !this.state.expand_languages})\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        const edit = !!this.props.anime[Anime.anime_on_server];\r\n        const languages = this.state.expand_languages ? LANGUAGES : [LANGUAGES[0], LANGUAGES[1]];\r\n        const field_names = {\r\n            anime: 'anime',\r\n            location: 'location',\r\n            size_on_HDD_GB: 'size_on_HDD_GB',\r\n            additional_info: 'additional_info',\r\n            audio_channel: 'audio_channel',\r\n            video_quality: 'video_quality',\r\n            incomplete: 'incomplete',\r\n            incomplete_progress: 'incomplete_progress',\r\n        };\r\n\r\n        let initial_values = {\r\n            anime: this.props.anime[Anime.id],\r\n            location: '',\r\n            size_on_HDD_GB: 0.00,\r\n            additional_info: '',\r\n            audio_channel: '2.0',\r\n            video_quality: '1080p',\r\n            incomplete: false,\r\n            incomplete_progress: 0,\r\n        };\r\n\r\n        LANGUAGES.forEach((language) => {\r\n            const lang = language.toLowerCase();\r\n            initial_values[lang + '_dub'] = false;\r\n            initial_values[lang + '_sub'] = false;\r\n        });\r\n\r\n        if (edit) {\r\n            initial_values = {\r\n                anime: this.props.anime[Anime.id],\r\n                location: this.props.anime[Anime.anime_on_server][AnimeOnServer.location],\r\n                size_on_HDD_GB: this.props.anime[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB],\r\n                additional_info: this.props.anime[Anime.anime_on_server][AnimeOnServer.additional_info],\r\n                audio_channel: this.props.anime[Anime.anime_on_server][AnimeOnServer.audio_channel],\r\n                video_quality: this.props.anime[Anime.anime_on_server][AnimeOnServer.video_quality],\r\n                incomplete: this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete],\r\n                incomplete_progress: this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete_progress],\r\n            };\r\n            LANGUAGES.forEach((language) => {\r\n                const lang = language.toLowerCase();\r\n                initial_values[lang + '_dub'] = this.props.anime[Anime.anime_on_server][`${lang}_dub`];\r\n                initial_values[lang + '_sub'] = this.props.anime[Anime.anime_on_server][`${lang}_sub`];\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div id=\"Edit-Anime-On-Server-Modal\" className={this.props.classNames}>\r\n                <CyberButton classNames=\"btn-contained-secondary\" onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"edit-anime-on-server-dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{edit ? 'Edit' : 'Add'} anime to server</DialogTitle>\r\n                    <DialogContent>\r\n                        <Formik\r\n                            initialValues={initial_values}\r\n                            onSubmit={(values, {setSubmitting}) => {\r\n                                console.log('values', values);\r\n\r\n                                if (edit) this.props.updateAnimeToServer(values);\r\n                                else this.props.addAnimeToServer(values);\r\n\r\n                                setSubmitting(false);\r\n                            }}>\r\n                            {({\r\n                                  isSubmitting, values, handleChange,\r\n                                  handleBlur\r\n                              }) => (\r\n                                <Form id=\"Edit-Anime-On-Server-Form\">\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Location\"\r\n                                                color=\"secondary\"\r\n                                                autoComplete={false}\r\n                                                name={field_names.location}\r\n                                                value={values[field_names.location]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={2}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Size\"\r\n                                                color=\"secondary\"\r\n                                                type=\"number\"\r\n                                                name={field_names.size_on_HDD_GB}\r\n                                                value={values[field_names.size_on_HDD_GB]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                        <Grid item xs={5}>\r\n                                            <InputLabel id=\"video-quality\" className=\"input-label\">Video\r\n                                                Quality</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"video-quality\"\r\n                                                className=\"form-control\"\r\n                                                color=\"secondary\"\r\n                                                value={values[field_names.video_quality]}\r\n                                                name={field_names.video_quality}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            >\r\n                                                <MenuItem value=\"2160p\">2160p</MenuItem>\r\n                                                <MenuItem value=\"1080p\">1080p</MenuItem>\r\n                                                <MenuItem value=\"720p\">720p</MenuItem>\r\n                                                <MenuItem value=\"580p\">580p</MenuItem>\r\n                                                <MenuItem value=\"480p\">480p</MenuItem>\r\n                                                <MenuItem value=\"360p\">360p</MenuItem>\r\n                                                <MenuItem value=\"240p\">240p</MenuItem>\r\n                                            </Select>\r\n                                        </Grid>\r\n                                        <Grid item xs={5}>\r\n                                            <InputLabel id=\"audio-quality\" className=\"input-label\">Audio\r\n                                                Channel</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"audio-quality\"\r\n                                                className=\"form-control\"\r\n                                                color=\"secondary\"\r\n                                                value={values[field_names.audio_channel]}\r\n                                                name={field_names.audio_channel}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            >\r\n                                                <MenuItem value=\"2.0\">2.0</MenuItem>\r\n                                                <MenuItem value=\"5.1\">5.1</MenuItem>\r\n                                            </Select>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={6}>\r\n                                            <label>Incomplete</label>\r\n                                            <Checkbox\r\n                                                value={values[field_names.incomplete]}\r\n                                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                name={field_names.incomplete}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <TextField\r\n                                                className=\"form-control\"\r\n                                                label=\"Incomplete Progress\"\r\n                                                color=\"secondary\"\r\n                                                type=\"number\"\r\n                                                disabled={!values[field_names.incomplete]}\r\n                                                name={field_names.incomplete_progress}\r\n                                                value={values[field_names.incomplete_progress]}\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <label>Dubs</label>\r\n                                            <CyberButton classNames=\"expand-btn\" onClick={this.toggleExpandLanguages}>\r\n                                                <FontAwesomeIcon icon={faExpandArrowsAlt}/>\r\n                                            </CyberButton>\r\n                                        </Grid>\r\n                                        {languages.map((language, x) => (\r\n                                            <Grid item xs={3}>\r\n                                                <div className=\"language-box\" key={x}>\r\n                                                    <Checkbox\r\n                                                        value={values[language.toLowerCase() + '_dub']}\r\n                                                        checked={values[language.toLowerCase() + '_dub']}\r\n                                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                        name={language.toLowerCase() + '_dub'}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                    />\r\n                                                    <label>{language}</label>\r\n                                                </div>\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <label>Subs</label>\r\n                                        </Grid>\r\n                                        {languages.map((language, x) => (\r\n                                            <Grid item xs={3}>\r\n                                                <div className=\"language-box\" key={x}>\r\n                                                    <Checkbox\r\n                                                        value={values[language.toLowerCase() + '_sub']}\r\n                                                        checked={values[language.toLowerCase() + '_sub']}\r\n                                                        inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                        name={language.toLowerCase() + '_sub'}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                    />\r\n                                                    <label>{language}</label>\r\n                                                </div>\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n\r\n                                    <Grid container className=\"form-group\">\r\n                                        <Grid item xs={12}>\r\n                                            <CyberButton classNames=\"btn-success\" variant=\"outlined\" type=\"submit\"\r\n                                                         onClick={this.handleClose} disabled={isSubmitting}>\r\n                                                <FontAwesomeIcon icon={faCheck}/>\r\n                                            </CyberButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime\r\n});\r\n\r\nexport default connect(mapStateToProps, {addAnimeToServer, updateAnimeToServer})(DownloadTorrentModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport {Anime, AnimeOnServer, User} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {faFolder, faMagnet, faTrash, faUserEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {deleteAnimeServerInfoAndTorrents, openAnimeFolder} from \"../../../../actions/requiem\";\r\nimport {ADMIN_EDIT_ANIME_ON_SERVER} from \"../../../../urls\";\r\nimport EditAnimeOnServerModalForm from \"../../../requiem/forms/EditAnimeOnServerModalForm\";\r\n\r\n\r\nclass ServerTab extends Component {\r\n    static propTypes = {};\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {show: true};\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"server-tab\">\r\n                {this.props.user && this.props.user[User.is_superuser] ? <div className=\"btn-group\">\r\n                    <CyberButton classNames=\"btn-contained-secondary\" onClick={() => {\r\n                         this.props.openAnimeFolder(this.props.anime[Anime.id]);\r\n                     }}><FontAwesomeIcon icon={faFolder}/></CyberButton>\r\n                    <EditAnimeOnServerModalForm classNames=\"edit-btn\"/>\r\n                    <a href={ADMIN_EDIT_ANIME_ON_SERVER(this.props.anime[Anime.id])} className=\"margin-left-10\">\r\n                        <CyberButton classNames=\"btn-contained-secondary\" component=\"span\">\r\n                            <FontAwesomeIcon icon={faUserEdit}/>\r\n                        </CyberButton>\r\n                    </a>\r\n                    <CyberButton classNames=\"btn-contained-danger\" onClick={() => {\r\n                         if (window.confirm(\"Are you sure?\")) this.props.deleteAnimeServerInfoAndTorrents(this.props.anime[Anime.id]);\r\n                     }}>\r\n                        <FontAwesomeIcon icon={faTrash}/>\r\n                    </CyberButton>\r\n                </div> : null}\r\n\r\n                <TableContainer>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>Status</TableCell>\r\n                                <TableCell>\r\n                                    {this.props.anime[Anime.anime_on_server][AnimeOnServer.approved] ?\r\n                                        <span className=\"color-green\">Approved</span> :\r\n                                        <span className=\"color-danger\">Pending</span>}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Location</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.location]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Size</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB]}GB</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Video</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.video_quality]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Audio</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.audio_channel]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Dubs</TableCell>\r\n                                <TableCell className=\"lang-chipset\">\r\n                                    {Object.keys(AnimeOnServer).map(key => (\r\n                                        key.endsWith('_dub') ?\r\n                                            this.props.anime[Anime.anime_on_server][key] ?\r\n                                                <Chip variant=\"outlined\" label={key.replace('_dub', '')}/> : null : null\r\n                                    ))}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Subs</TableCell>\r\n                                <TableCell className=\"lang-chipset\">\r\n                                    {Object.keys(AnimeOnServer).map(key => (\r\n                                        key.endsWith('_sub') ?\r\n                                            this.props.anime[Anime.anime_on_server][key] ?\r\n                                                <Chip variant=\"outlined\" label={key.replace('_sub', '')}/> : null : null\r\n                                    ))}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Additional Info</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.additional_info]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Extract Subs</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.extract_subs] ? 'Yes' : 'No'}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Incomplete</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.incomplete] ? 'Yes' : 'No'}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Hash</TableCell>\r\n                                <TableCell>{this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_hash]}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Magnet</TableCell>\r\n                                <TableCell>\r\n                                    {this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_magnet] ?\r\n                                        <CyberButton classNames=\"btn-secondary\" variant=\"outlined\" onClick={() => {\r\n                                            window.open(this.props.anime[Anime.anime_on_server][AnimeOnServer.torrent_magnet]);\r\n                                        }}>\r\n                                            <FontAwesomeIcon icon={faMagnet}/>\r\n                                        </CyberButton> : null}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Downloaded on</TableCell>\r\n                                <TableCell><Moment\r\n                                    date={this.props.anime[Anime.anime_on_server][AnimeOnServer.date_added]}\r\n                                    format={'Do MMM YYYY'}/></TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>Last Modified</TableCell>\r\n                                <TableCell><Moment\r\n                                    date={this.props.anime[Anime.anime_on_server][AnimeOnServer.date_last_modified]}\r\n                                    format={'Do MMM YYYY'}/></TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps, {deleteAnimeServerInfoAndTorrents, openAnimeFolder})(ServerTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {addAnimeEntry, deleteAnimeEntry, updateAnimeEntry} from \"../../../../actions/users\";\r\nimport {getUserAnimeEntryFormInitialValues, UserAnimeEntryForm} from \"./forms\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\nimport '../../../../assets/css/forms.css';\r\n\r\n\r\nclass AnimeEntryModalForm extends Component {\r\n    static propTypes = {\r\n        /** Classnames for the open dialog btn */\r\n        classNames: PropTypes.object,\r\n        /** Title of the Anime */\r\n        title: PropTypes.string,\r\n        /** ID of the Anime */\r\n        id: PropTypes.number.isRequired,\r\n        /** User entry of the anime */\r\n        user_anime_entry: PropTypes.object,\r\n        /** If the entry is being edited */\r\n        edit: PropTypes.bool,\r\n        /** User list info for filtering on update entry\r\n         * {user_list_pk: list_pk, user_list_filter: selected_filter} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let edit = true;\r\n        if (this.props.edit === undefined) {\r\n            if (isEmpty(this.props.user_anime_entry))\r\n                edit = false;\r\n        } else edit = this.props.edit;\r\n\r\n        const initial_values = getUserAnimeEntryFormInitialValues(this.props.id, this.props.user_anime_entry, edit);\r\n\r\n        return (\r\n                <div id=\"User-Title-Entry\">\r\n                    <CyberButton classNames={this.props.classNames} variant=\"outlined\" color=\"primary\"\r\n                                 onClick={this.handleClickOpen}>\r\n                        <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                    </CyberButton>\r\n                    <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                            className=\"user-title-entry-dialog\">\r\n                        {edit ? <DialogTitle id=\"form-dialog-title\">Edit {this.props.title}</DialogTitle>\r\n                            : <DialogTitle id=\"form-dialog-title\">Add {this.props.title}</DialogTitle>}\r\n                        <DialogContent>\r\n                            <UserAnimeEntryForm initial_values={initial_values} edit={edit} id={this.props.id}\r\n                                                list={this.props.list} handleClose={this.handleClose}/>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateAnimeEntry, addAnimeEntry, deleteAnimeEntry})(AnimeEntryModalForm)\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport store from \"../../../../store\";\r\nimport {updateAnimeEpisode} from \"../../../../actions/users\";\r\nimport {Anime, UserAnimeEntry} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/users.css'\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {isEmpty} from \"../../../functions\";\r\n\r\n\r\n/**\r\n * Increase episode number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the anime to update\r\n * @param props.entry {Object} The user anime entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function UpdateAnimeEpisodeButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserAnimeEntry.watched_episodes] === entry[UserAnimeEntry.anime][Anime.episodes])\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserAnimeEntry.watched_episodes] !== entry[UserAnimeEntry.anime][Anime.episodes])\r\n                    store.dispatch(updateAnimeEpisode(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHistory, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Anime, User, UserAnimeEntry} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Moment from \"react-moment\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport store from \"../../../../store\";\r\nimport {deleteAnimeHistoryEntry} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.entry {Object} Anime entry of the user\r\n * @param props.title {String} Title of the Anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function AnimeEpisodeHistoryModal(props) {\r\n    const {entry, title} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"History-Modal\">\r\n            <CyberButton disabled={isEmpty(entry) || entry[UserAnimeEntry.episode_history].length === 0}\r\n                         variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <FontAwesomeIcon icon={faHistory}/>\r\n            </CyberButton>\r\n            {!isEmpty(entry) && entry[UserAnimeEntry.episode_history].length > 0 ?\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" id=\"History-Modal-Dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"header-title\">\r\n                            History\r\n                        </DialogContentText>\r\n                        {entry[UserAnimeEntry.episode_history].map(history => (\r\n                            <p>Episode <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['episode']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteAnimeEpisodeHistoryButton\r\n                                    history_id={history['id']}\r\n                                    anime_id={entry[UserAnimeEntry.anime][Anime.id]}/>\r\n                            </p>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <CyberButton onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                            Close\r\n                        </CyberButton>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.anime_id {Number} ID of the anime\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteAnimeEpisodeHistoryButton(props) {\r\n    const {history_id, anime_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteAnimeHistoryEntry(history_id, anime_id));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {faEdit, faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {updateMangaEntry, addMangaEntry, deleteMangaEntry} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getUserMangaEntryFormInitialValues, UserMangaEntryForm} from \"./forms\";\r\n\r\nimport '../../../../assets/css/forms.css';\r\n\r\n\r\nclass MangaEntryModalForm extends Component {\r\n    static propTypes = {\r\n        /** Classnames for the open dialog btn */\r\n        classNames: PropTypes.object,\r\n        /** Title of the Manga */\r\n        title: PropTypes.string,\r\n        /** ID of the Manga */\r\n        id: PropTypes.number.isRequired,\r\n        /** User entry of the manga */\r\n        user_manga_entry: PropTypes.object,\r\n        /** If the entry is being edited */\r\n        edit: PropTypes.bool,\r\n        /** User list info for filtering on update entry\r\n         * {user_list_pk: list_pk, user_list_filter: selected_filter} */\r\n        list: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        let edit = true;\r\n        if (this.props.edit === undefined) {\r\n            if (isEmpty(this.props.user_manga_entry))\r\n                edit = false;\r\n        } else edit = this.props.edit;\r\n\r\n        const initial_values = getUserMangaEntryFormInitialValues(this.props.id, this.props.user_manga_entry, edit);\r\n\r\n        return (\r\n            <div id=\"User-Title-Entry\">\r\n                <CyberButton classNames={this.props.classNames} variant=\"outlined\" color=\"primary\"\r\n                             onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={edit ? faEdit : faPlus}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"user-title-entry-dialog\">\r\n                    {edit ? <DialogTitle id=\"form-dialog-title\">Edit {this.props.title}</DialogTitle>\r\n                        : <DialogTitle id=\"form-dialog-title\">Add {this.props.title}</DialogTitle>}\r\n                    <DialogContent>\r\n                        <UserMangaEntryForm initial_values={initial_values} edit={edit} id={this.props.id}\r\n                                            list={this.props.list} handleClose={this.handleClose}/>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateMangaEntry, addMangaEntry, deleteMangaEntry})(MangaEntryModalForm)\r\n","import React, {useState} from \"react\";\r\n\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport store from \"../../../../store\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport {updateMangaChapter, updateMangaVolume} from \"../../../../actions/users\";\r\nimport {Manga, UserMangaEntry} from \"../../../../models\";\r\n\r\nimport '../../../../assets/css/users.css'\r\n\r\n\r\n/**\r\n * Increase volume number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the manga to update\r\n * @param props.entry {Object} The user manga entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UpdateMangaVolumeButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserMangaEntry.read_volumes] === entry[UserMangaEntry.manga][Manga.volumes] &&\r\n        entry[UserMangaEntry.manga][Manga.volumes] !== 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserMangaEntry.read_volumes] !== entry[UserMangaEntry.manga][Manga.volumes] ||\r\n                    entry[UserMangaEntry.manga][Manga.volumes] === 0)\r\n                    store.dispatch(updateMangaVolume(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n\r\n\r\n/**\r\n * Increase volume number button.\r\n * @param props.classNames {String} Classnames for the button\r\n * @param props.id {Number} ID of the manga to update\r\n * @param props.entry {Object} The user manga entry\r\n * @param props.list {Object} List object of {user_list_pk: user_list_filter:} if its called from an anime list\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UpdateMangaChapterButton(props) {\r\n    const {classNames, id, entry, list} = props;\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    if (!store.getState().users.entry_loading && loading)\r\n        setLoading(false);\r\n\r\n    if (entry[UserMangaEntry.read_chapters] === entry[UserMangaEntry.manga][Manga.chapters] &&\r\n        entry[UserMangaEntry.manga][Manga.chapters] !== 0)\r\n        return null;\r\n    return !loading ?\r\n        <span\r\n            className=\"update-anime-episode-btn\"\r\n            onMouseEnter={playHoverSound}\r\n            onClick={() => {\r\n                playClickSound();\r\n                setLoading(true);\r\n                if (entry[UserMangaEntry.read_chapters] !== entry[UserMangaEntry.manga][Manga.chapters] ||\r\n                    entry[UserMangaEntry.manga][Manga.chapters] === 0)\r\n                    store.dispatch(updateMangaChapter(id, list))\r\n            }}\r\n        >\r\n            <FontAwesomeIcon icon={faPlus}/>\r\n        </span> : <span className=\"update-anime-episode-btn\"><CircularProgress thickness={6}/></span>\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHistory, faTrash} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Anime, Manga, User, UserAnimeEntry, UserMangaEntry} from \"../../../../models\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Moment from \"react-moment\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport store from \"../../../../store\";\r\nimport {deleteAnimeHistoryEntry, deleteMangaVolumeChapterHistoryEntry} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n *\r\n * @param props.entry {Object} Manga entry of the user\r\n * @param props.title {String} Title of the Manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport default function MangaVolumeChapterHistoryModal(props) {\r\n    const {entry, title} = props;\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div id=\"History-Modal\">\r\n            <CyberButton disabled={isEmpty(entry) ||\r\n            (entry[UserMangaEntry.volume_history].length === 0 && entry[UserMangaEntry.chapter_history].length === 0)}\r\n                         variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                <FontAwesomeIcon icon={faHistory}/>\r\n            </CyberButton>\r\n            {!isEmpty(entry) && entry[UserMangaEntry.volume_history].length > 0 ?\r\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" id=\"History-Modal-Dialog\">\r\n                    <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText className=\"header-title\">\r\n                            Volume History\r\n                        </DialogContentText>\r\n                        {entry[UserMangaEntry.volume_history].map(history => (\r\n                            <p>Volume <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['volume']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteMangaVolumeHistoryButton\r\n                                    history_id={history['id']}\r\n                                    manga_id={entry[UserMangaEntry.manga][Manga.id]}/>\r\n                            </p>\r\n                        ))}\r\n                        <DialogContentText className=\"header-title\">\r\n                            Chapter History\r\n                        </DialogContentText>\r\n                        {entry[UserMangaEntry.chapter_history].map(history => (\r\n                            <p>Chapter <Chip className=\"chip-primary\" size=\"small\"\r\n                                             label={history['chapter']}/> completed on <Chip className=\"chip-primary\"\r\n                                                                                             size=\"small\" label={<Moment\r\n                                date={history['timestamp']} format={'Do MMM YYYY HH:mm:ss'}/>}/>\r\n                                <DeleteMangaChapterHistoryButton\r\n                                    history_id={history['id']}\r\n                                    manga_id={entry[UserMangaEntry.manga][Manga.id]}/>\r\n                            </p>\r\n                        ))}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <CyberButton onClick={handleClose} variant=\"contained\" color=\"primary\">\r\n                            Close\r\n                        </CyberButton>\r\n                    </DialogActions>\r\n                </Dialog> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.manga_id {Number} ID of the manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteMangaVolumeHistoryButton(props) {\r\n    const {history_id, manga_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteMangaVolumeChapterHistoryEntry(history_id, manga_id, 'volume'));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.history_id {Number} ID of the history object\r\n * @param props.anime_id {Number} ID of the manga\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function DeleteMangaChapterHistoryButton(props) {\r\n    const {history_id, manga_id} = props;\r\n\r\n    return (\r\n        <span className=\"delete-btn\" onMouseEnter={playHoverSound} onClick={() => {\r\n            playClickSound();\r\n            if (window.confirm('Are you sure?'))\r\n                store.dispatch(deleteMangaVolumeChapterHistoryEntry(history_id, manga_id, 'chapter'));\r\n        }}>\r\n            <FontAwesomeIcon icon={faTrash}/>\r\n        </span>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nimport {Anime, Manga, VALID_ANIME_RELATION_NAMES, VALID_ANIME_RELATIONS} from \"../../../../models\";\r\nimport {getRelationsForAnime} from \"../../../../actions/anime\";\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\n\r\nimport '../../../../assets/css/anime.css'\r\n\r\n\r\nclass RelationsTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.anime_relations))\r\n            this.props.getRelationsForAnime(this.props.anime[Anime.id])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"relations-tab\">\r\n                {!isEmpty(this.props.anime_relations) ? <>\r\n                    {this.props.anime_relations['anime_relation_adaptation'].length > 0 ?\r\n                        <div>\r\n                            <h2 className=\"relation-name\">Adaptation</h2>\r\n                            <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                {this.props.anime_relations['anime_relation_adaptation'].map((manga, x) => (\r\n                                    <Grow key={x} in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1}>\r\n                                            <TitleCard\r\n                                                branch={BRANCH_MANGA}\r\n                                                title={manga}\r\n                                                user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                                        this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                            />\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                ))}\r\n                            </GridList>\r\n                        </div> : null}\r\n\r\n                    {VALID_ANIME_RELATIONS.map((relation_name, i) => (\r\n                        relation_name !== 'anime_relation_adaptation' ?\r\n                            <div key={i}>\r\n                                {this.props.anime_relations[relation_name].length > 0 ?\r\n                                    <h2 className=\"relation-name\">{VALID_ANIME_RELATION_NAMES[relation_name]}</h2> : null}\r\n\r\n                                <GridList cellHeight={300} cols={5} style={{margin: 0}}>\r\n                                    {this.props.anime_relations[relation_name].map((anime, y) => (\r\n                                        <Grow key={y} in {...({timeout: 200 + (y * 50)})}>\r\n                                            <GridListTile cols={1}>\r\n                                                <TitleCard\r\n                                                    branch={BRANCH_ANIME}\r\n                                                    title={anime}\r\n                                                    user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                        this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                                />\r\n                                            </GridListTile>\r\n                                        </Grow>\r\n                                    ))}\r\n                                </GridList>\r\n                            </div> : null))}\r\n                </> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_relations: state.anime.anime[Anime.anime_relations],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getRelationsForAnime})(RelationsTab)\r\n","import React, {Component} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\nimport Tree from 'react-d3-tree';\r\n\r\nimport {\r\n    BRANCH_ANIME\r\n\r\n} from \"../../../globals\";\r\n\r\nimport {VALID_ANIME_RELATION_NAMES, VALID_ANIME_RELATIONS} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport {useCenteredTree} from \"./helpers\";\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faAngleDoubleDown, faAngleDoubleUp} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nlet TITLES = [];\r\nlet LOCAL_VALID_ANIME_RELATIONS = VALID_ANIME_RELATIONS;\r\nlet b = LOCAL_VALID_ANIME_RELATIONS[1];\r\nLOCAL_VALID_ANIME_RELATIONS[1] = LOCAL_VALID_ANIME_RELATIONS[3];\r\nLOCAL_VALID_ANIME_RELATIONS[3] = b;\r\nlet FINAL_TREE = [];\r\n\r\n\r\nfunction setTitles(titles) {\r\n    TITLES = titles;\r\n}\r\n\r\nfunction compareByAired(a, b) {\r\n    let now = new Date();\r\n    let a_value = false;\r\n    let b_value = false;\r\n    if (a['air_start']) {\r\n        let date_a = new Date(a['air_start']);\r\n        a_value = Math.abs(now - date_a);\r\n    }\r\n    if (a['air_start']) {\r\n        let date_b = new Date(b['air_start']);\r\n        b_value = Math.abs(now - date_b);\r\n    }\r\n    return compare(a_value, b_value);\r\n}\r\n\r\nfunction compare(first, second) {\r\n    if (!first) return -1;\r\n    if (!second) return 1;\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison\r\n}\r\n\r\nfunction getFullAnime(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            return TITLES[x];\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction markAnimeAsAdded(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            TITLES[x]['ADDED'] = true;\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n\r\nfunction isAdded(id) {\r\n    for (let x = 0; x < TITLES.length; x++) {\r\n        if (TITLES[x]['id'] === id) {\r\n            return TITLES[x]['ADDED'];\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getChildren(parent_node) {\r\n    markAnimeAsAdded(parent_node['attributes']['info']['id']);\r\n\r\n    // console.log(parent_node);\r\n    if (!parent_node['name']) return;\r\n\r\n    for (let z = 0; z < LOCAL_VALID_ANIME_RELATIONS.length; z++) {\r\n        if (LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_prequel' || LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_adaptation') continue;\r\n        let relation = parent_node['attributes']['info']['anime_relations'][LOCAL_VALID_ANIME_RELATIONS[z]];\r\n        for (let x = 0; x < relation.length; x++) {\r\n            let anime = getFullAnime(relation[x]['id']);\r\n            if (!anime || anime['ADDED'] === true) continue;\r\n            if (anime['anime_relations']['anime_relation_prequel'].length > 0) {\r\n                for (let y = 0; y < anime['anime_relations']['anime_relation_prequel'].length; y++) {\r\n                    if (!isAdded(anime['anime_relations']['anime_relation_prequel'][y]['id'])) {\r\n                        console.log(anime['anime_relations']['anime_relation_prequel'][y]);\r\n                    }\r\n                }\r\n            }\r\n            markAnimeAsAdded(relation[x]['id']);\r\n            let node = {\r\n                name: anime['title'],\r\n                attributes: {\r\n                    info: anime,\r\n                    parent_relation: VALID_ANIME_RELATION_NAMES[LOCAL_VALID_ANIME_RELATIONS[z]]\r\n                },\r\n                children: []\r\n            };\r\n\r\n            parent_node.children.push(node)\r\n        }\r\n    }\r\n\r\n    if (parent_node['children'].length > 0) {\r\n        for (let x = 0; x < parent_node['children'].length; x++) {\r\n            getChildren(parent_node['children'][x])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction checkChildrenForFixingSequel(parent_node, sequel_to_find) {\r\n    if (!parent_node) return;\r\n    for (let x = 0; x < parent_node['children'].length; x++) {\r\n        if (parent_node['children'][x]['attributes']['info']['id'] === sequel_to_find['id']) {\r\n            let node_to_return = parent_node['children'][x];\r\n            const index = parent_node['children'].indexOf(parent_node['children'][x]);\r\n            if (index > -1) {\r\n                parent_node['children'].splice(index, 1);\r\n            }\r\n            return node_to_return;\r\n        }\r\n        let node_to_return = checkChildrenForFixingSequel(parent_node['children'][x], sequel_to_find);\r\n        if (node_to_return) return node_to_return;\r\n    }\r\n}\r\n\r\n\r\nfunction fixSequelPriority(parent_node) {\r\n    let parent_anime = getFullAnime(parent_node['attributes']['info']['id']);\r\n\r\n    if (parent_anime['anime_relations']['anime_relation_sequel'].length > 0 &&\r\n        parent_anime['anime_relations']['anime_relation_full_story'].length <= 0) {\r\n        let in_children = false;\r\n        let sequel_to_find;\r\n        for (let x = 0; x < parent_anime['anime_relations']['anime_relation_sequel'].length; x++) {\r\n            let sequel_anime = getFullAnime(parent_anime['anime_relations']['anime_relation_sequel'][x]['id']);\r\n\r\n            for (let y = 0; y < parent_node['children'].length; y++) {\r\n                let anime = getFullAnime(parent_node['children'][y]['attributes']['info']['id']);\r\n                if (sequel_anime['id'] === anime['id']) {\r\n                    in_children = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (sequel_anime['anime_relations']) {\r\n                if (sequel_anime['anime_relations']['anime_relation_prequel'].length > 1 && parent_anime['type'] != 'TV') {\r\n                    in_children = true;\r\n                }\r\n            }\r\n            sequel_to_find = sequel_anime;\r\n        }\r\n\r\n        if (!in_children) {\r\n            // NOW FIND IT IN THE TREE AND CUT IT FROM THERE AND PASTE IT AS ITS SEQUEL IN HIS CHILDREN\r\n            let root_node = FINAL_TREE[0];\r\n            let node_to_fix = checkChildrenForFixingSequel(root_node, sequel_to_find);\r\n            if (node_to_fix) {\r\n                node_to_fix['attributes']['parent_relation'] = 'Sequel';\r\n                parent_node['children'].push(node_to_fix);\r\n            }\r\n        }\r\n    }\r\n    if (parent_node['children'].length > 0) {\r\n        for (let x = 0; x < parent_node['children'].length; x++) {\r\n            fixSequelPriority(parent_node['children'][x])\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getRootNode(titles) {\r\n    // First find the root title\r\n    // Root is valid if it doesnt have (Parent Story,\r\n    // Full Story, or Other that is a TV or Movie and current title is not TV)\r\n    let root;\r\n    let root_node;\r\n\r\n    for (let x = 0; x < titles.length; x++) {\r\n        let _continue = false;\r\n        if (titles[x]['anime_relations']['anime_relation_full_story'].length > 0)\r\n            continue;\r\n        else if (titles[x]['anime_relations']['anime_relation_parent_story'].length > 0)\r\n            continue;\r\n        else if (titles[x]['anime_relations']['anime_relation_prequel'].length > 0)\r\n            continue;\r\n        else if (titles[x]['type'] !== 'TV' && titles[x]['anime_relations']['anime_relation_other'].length > 0 && titles[x]['anime_relations']['anime_relation_sequel'].length <= 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_other'].length; y++) {\r\n                if (titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'TV' ||\r\n                    titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'Movie' ||\r\n                    titles[x]['anime_relations']['anime_relation_other'][y]['type'] === 'OVA') {\r\n                    _continue = true;\r\n                    break\r\n                }\r\n            }\r\n            if (_continue) continue;\r\n        }\r\n        if (titles[x]['type'] !== 'TV' && titles[x]['anime_relations']['anime_relation_spin_off'].length > 0) {\r\n            let check = true;\r\n            for (let z = 0; z < LOCAL_VALID_ANIME_RELATIONS.length; z++) {\r\n                if (LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_spin_off' || LOCAL_VALID_ANIME_RELATIONS[z] === 'anime_relation_adaptation') continue;\r\n                if (titles[x]['anime_relations'][LOCAL_VALID_ANIME_RELATIONS[z]].length > 0) {\r\n                    check = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (check) {\r\n                for (let y = 0; y < titles[x]['anime_relations']['anime_relation_spin_off'].length; y++) {\r\n                    if (titles[x]['anime_relations']['anime_relation_spin_off'][y]['type'] === 'TV') {\r\n                        _continue = true;\r\n                        break\r\n                    }\r\n                }\r\n                if (_continue) continue;\r\n            }\r\n        }\r\n        if (titles[x]['type'] === 'TV' && titles[x]['anime_relations']['anime_relation_alternative_setting'].length > 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_alternative_setting'].length; y++) {\r\n                let anime = getFullAnime(titles[x]['anime_relations']['anime_relation_alternative_setting'][y]['id']);\r\n                if (anime) {\r\n                    if (anime['anime_relations']['anime_relation_prequel'].length > 0) {\r\n                        _continue = true;\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n            if (_continue) continue;\r\n        }\r\n        if (titles[x]['type'] === 'Movie' && titles[x]['anime_relations']['anime_relation_alternative_version'].length > 0) {\r\n            for (let y = 0; y < titles[x]['anime_relations']['anime_relation_alternative_version'].length; y++) {\r\n                if (titles[x]['anime_relations']['anime_relation_alternative_version'][y]['type'] === 'TV') {\r\n                    _continue = true;\r\n                    break\r\n                }\r\n            }\r\n            if (_continue) continue\r\n        }\r\n\r\n        root = titles[x];\r\n        root_node = {\r\n            name: root['title'],\r\n            attributes: {\r\n                info: root,\r\n                parent_relation: null\r\n            },\r\n            children: []\r\n        };\r\n        return root_node;\r\n    }\r\n    return false\r\n}\r\n\r\nconst renderForeignObjectNode = ({nodeDatum, toggleNode, foreignObjectProps, user_statuses}) => (\r\n    <g>\r\n        {/* `foreignObject` requires width & height to be explicitly set. */}\r\n        <foreignObject {...foreignObjectProps} className=\"foreign-object\">\r\n            {console.log('statuses', user_statuses)}\r\n            <div style={{width: \"50%\"}}>\r\n                <p className=\"card-relation-name\">{nodeDatum['attributes']['parent_relation']}</p>\r\n                <div className=\"card-wrapper\">\r\n                    <TitleCard\r\n                        classNames=\"franchise-card\"\r\n                        branch={BRANCH_ANIME}\r\n                        title={nodeDatum['attributes']['info']}\r\n                        user_status={user_statuses[nodeDatum['attributes']['info']['id'].toString()]}\r\n                    />\r\n                </div>\r\n                {nodeDatum.children.length > 0 && (\r\n                    <CyberButton classNames=\"btn-contained-primary\" style={{width: \"100%\"}} onClick={toggleNode}>\r\n                        <FontAwesomeIcon icon={nodeDatum.__rd3t.collapsed ? faAngleDoubleDown : faAngleDoubleUp}/>\r\n                    </CyberButton>\r\n                )}\r\n            </div>\r\n        </foreignObject>\r\n    </g>\r\n);\r\n\r\nfunction TreeBuilder(props) {\r\n    const {data, user_statuses} = props;\r\n    const [translate, containerRef] = useCenteredTree();\r\n    const nodeSize = {x: 600, y: 600};\r\n    const foreignObjectProps = {width: nodeSize.x, height: nodeSize.y, x: -150, y: -250};\r\n    console.log('in tree builder', user_statuses);\r\n    return (\r\n        <div style={{width: \"100%\", height: \"100vh\"}} ref={containerRef}>\r\n            <Tree\r\n                data={data}\r\n                translate={translate}\r\n                nodeSize={nodeSize}\r\n                pathFunc={'step'}\r\n                renderCustomNodeElement={(rd3tProps) =>\r\n                    renderForeignObjectNode({...rd3tProps, user_statuses, foreignObjectProps})\r\n                }\r\n                orientation=\"vertical\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nclass FranchiseTree extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {titles, user_anime_entry_statuses, mini} = this.props;\r\n\r\n        // let translate = {x: innerWidth / 2, y: innerHeight / 3};\r\n        let node_size = {x: 294, y: 500};\r\n        let foreign_object_wrapper = {x: -132, y: -230};\r\n        let svgSquare = {\r\n            shape: 'rect',\r\n            shapeProps: {\r\n                width: 265,\r\n                height: 450,\r\n                x: -125,\r\n                y: -230,\r\n            }\r\n        };\r\n\r\n        // console.log(mini);\r\n\r\n        if (mini) {\r\n            svgSquare.shapeProps = {\r\n                width: 120,\r\n                height: 200,\r\n                x: -80,\r\n                y: -100,\r\n            };\r\n            foreign_object_wrapper = {x: -75, y: -120};\r\n            node_size = {x: 184, y: 300};\r\n            // translate.y = innerHeight / 4;\r\n        }\r\n\r\n        for (let x = 0; x < titles.length; x++) {\r\n            titles[x]['ADDED'] = false\r\n        }\r\n\r\n        setTitles(titles);\r\n        titles.sort(compareByAired).reverse();\r\n\r\n        let root_node = getRootNode(titles);\r\n\r\n        FINAL_TREE = [\r\n            root_node\r\n        ];\r\n\r\n        if (root_node) {\r\n            getChildren(root_node);\r\n            FINAL_TREE = [\r\n                root_node\r\n            ];\r\n            try {\r\n                fixSequelPriority(root_node);\r\n            } catch (e) {\r\n            }\r\n            FINAL_TREE = [\r\n                root_node\r\n            ];\r\n            // fixSequelPriority(root_node);\r\n\r\n            // let missing = false;\r\n            // for (let x = 0; x < titles.length; x++) {\r\n            //     if (!titles[x]['ADDED']) {\r\n            //         missing = true;\r\n            //     }\r\n            // }\r\n\r\n            // if (missing) {\r\n            //     getMissingChildren(root_node);\r\n            // }\r\n\r\n            // let missing = true;\r\n            // while (missing) {\r\n            //     missing = false;\r\n            //     for (let x = 0; x < titles.length; x++) {\r\n            //         if (!titles[x]['ADDED']) {\r\n            //             missing = true;\r\n            //         }\r\n            //     }\r\n            //     fixMissingTitles(root_node, titles)\r\n            // }\r\n        }\r\n\r\n        let TreeData = FINAL_TREE;\r\n        let missing = 0;\r\n        for (let x = 0; x < titles.length; x++) {\r\n            if (!titles[x]['ADDED']) {\r\n                console.log(titles[x]['id']);\r\n                missing += 1;\r\n            }\r\n        }\r\n\r\n        if (root_node) {\r\n            return (\r\n                <div id=\"Franchise-Tree\">\r\n                    <div style={{position: 'absolute'}}>{missing}</div>\r\n                    {/*<div className=\"card-size-btn-container\"><Button color={'primary'} onClick={this.toggleCard}>X</Button></div>*/}\r\n                    <TreeBuilder data={TreeData} user_statuses={this.props.user_anime_entry_statuses}/>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <p className=\"color-blue\">Could not generate franchise</p>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    // mini: state.anime.display_franchise_mini,\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(FranchiseTree)\r\n","import { useCallback, useState } from \"react\";\r\n\r\n\r\nexport const useCenteredTree = (defaultTranslate = { x: 0, y: 0 }) => {\r\n  const [translate, setTranslate] = useState(defaultTranslate);\r\n  const containerRef = useCallback((containerElem) => {\r\n    if (containerElem !== null) {\r\n      const { width, height } = containerElem.getBoundingClientRect();\r\n      setTranslate({ x: width / 2, y: height / 2 });\r\n    }\r\n  }, []);\r\n  return [translate, containerRef];\r\n};","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {Anime, AnimeFranchise} from \"../../../../models\";\r\nimport {getAnimeFranchise} from \"../../../../actions/anime\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport FranchiseTree from \"../../../franchises/display/FranchiseTree\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {ANIME_FRANCHISE_DISPLAY} from \"../../../../urls\";\r\nimport {CyberButton, CyberLink} from \"../../../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSitemap} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass FranchiseTab extends Component {\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (isEmpty(this.props.anime_franchise))\r\n            this.props.getAnimeFranchise(this.props.anime[Anime.franchise])\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Display-Franchise\" className=\"franchise-tab\">\r\n                <CyberLink to={ANIME_FRANCHISE_DISPLAY(this.props.anime[Anime.franchise])}><CyberButton variant=\"outlined\"><FontAwesomeIcon icon={faSitemap}/></CyberButton></CyberLink>\r\n                {!isEmpty(this.props.anime_franchise) ?\r\n                    <FranchiseTree titles={this.props.anime_franchise[AnimeFranchise.anime_franchise]}/>\r\n                    : this.props.anime_franchise_loading ? <Loading text={'Franchise Loading'}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise})(FranchiseTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faDownload} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {CyberButton} from \"../../layout/common/common\";\r\nimport DownloadTorrentForm from \"./DownloadTorrentForm\";\r\n\r\n\r\nclass DownloadTorrentModalForm extends Component {\r\n    static propTypes = {\r\n        /** classNames */\r\n        classNames: PropTypes.string,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClickOpen = this.handleClickOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.state = {\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    handleClickOpen() {\r\n        this.setState({open: true})\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Download-Anime-Torrent-Modal\" className={this.props.classNames}>\r\n                <CyberButton classNames=\"btn-contained-secondary\" onClick={this.handleClickOpen}>\r\n                    <FontAwesomeIcon icon={faDownload}/>\r\n                </CyberButton>\r\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\"\r\n                        className=\"download-torrent-dialog\">\r\n                        <DialogTitle id=\"form-dialog-title\">Download torrent</DialogTitle>\r\n                        <DialogContent>\r\n                            <DownloadTorrentForm handleClose={this.handleClose}/>\r\n                        </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(DownloadTorrentModalForm)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {Anime, AnimeOnServer} from \"../../../models\";\r\nimport moment from \"moment\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faArrowDown,\r\n    faArrowUp,\r\n    faBan,\r\n    faClock,\r\n    faDownload,\r\n    faHdd,\r\n    faPause, faPuzzlePiece,\r\n    faSpinner, faUpload, faUsers\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {getBytesToSize, getProgress, getSpeed, TorrentProgressInfo} from \"./snippets\";\r\nimport PropTypes from \"prop-types\";\r\nimport {getTorrentProgress} from \"../../../actions/requiem\";\r\nimport {sleep} from \"../../functions\";\r\nimport store from \"../../../store\";\r\n\r\n\r\nclass DisplayTorrentProgress extends Component {\r\n    static propTypes = {\r\n        /** ID of the title to get torrent progress for */\r\n        id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            torrent_progress_reading: false,\r\n            update_interval: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getTorrentProgress(this.props.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {id, getTorrentProgress} = this.props;\r\n        setTimeout(() => { getTorrentProgress(id) }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const torrent_filters = {\r\n            'name': false, 'size': true, 'dl_speed': true, 'up_speed': true, 'remaining': true,\r\n            'seeds': true, 'leechs': true, 'eta': true\r\n        };\r\n\r\n        return this.props.torrent_progress && this.props.torrent_progress.length > 0 ?\r\n            this.props.torrent_progress.map(torrent => (\r\n                <TorrentProgressInfo torrent={torrent} filters={torrent_filters}/>\r\n            )) : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    torrent_progress: state.requiem.torrent_progress\r\n});\r\n\r\nexport default connect(mapStateToProps, {getTorrentProgress})(DisplayTorrentProgress)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Character, Person} from \"../../../../models\";\r\nimport {getVoiceActorRolesForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {isEmpty} from \"../../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../../actions/users\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 20;\r\n\r\n\r\nclass VoiceActorRolesTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.voice_actor_roles] || this.props.voice_actor_roles[ApiResult.previous])\r\n            this.props.getVoiceActorRolesForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_anime_entry_statuses))\r\n            this.props.getLoggedInUserAnimeEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getVoiceActorRolesForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"person-voice-actor-roles-tab person-tab\">\r\n                {this.props.voice_actor_roles ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.voice_actor_roles[ApiResult.results].map((character, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    {character[Character.anime_roles].map((anime, x) => (\r\n                                        <TitleCard\r\n                                            key={x} branch={BRANCH_ANIME} title={anime}\r\n                                            containerClassNames=\"character-role-wrapper-card-container\"\r\n                                            user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                                this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                        />\r\n                                    ))}\r\n                                </td>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        branch={BRANCH_CHARACTERS} title={character}/>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    {/*</GridList>*/}\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.voice_actor_roles[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.characters_loading ? <Loading text={'Characters loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    voice_actor_roles: state.people.person[Person.voice_actor_roles],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    characters_loading: state.characters.characters_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getVoiceActorRolesForPerson, getLoggedInUserAnimeEntryStatuses\r\n})(VoiceActorRolesTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Character, Person} from \"../../../../models\";\r\nimport {getAnimeStaffPositionsForPerson, getVoiceActorRolesForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 50;\r\n\r\n\r\nclass AnimeStaffPositionsTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.anime_staff_positions] || this.props.anime_staff_positions[ApiResult.previous])\r\n            this.props.getAnimeStaffPositionsForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_anime_entry_statuses))\r\n            this.props.getLoggedInUserAnimeEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getAnimeStaffPositionsForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const positions_roles = JSON.parse(this.props.person[Person.anime_staff_positions_roles]);\r\n        return (\r\n            <div className=\"person-tab\">\r\n                {this.props.anime_staff_positions ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.anime_staff_positions[ApiResult.results].map((anime, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        key={i} branch={BRANCH_ANIME} title={anime}\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        user_status={!isEmpty(this.props.user_anime_entry_statuses) ?\r\n                                            this.props.user_anime_entry_statuses[`${anime[Anime.id]}`] : null}\r\n                                    />\r\n                                </td>\r\n                                <td><p className=\"role\">{positions_roles[anime[Anime.id]]}</p></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.anime_staff_positions[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.anime_loading ? <Loading text={'Anime loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    anime_staff_positions: state.people.person[Person.anime_staff_positions],\r\n    user_anime_entry_statuses: state.users.user_anime_entry_statuses,\r\n    anime_loading: state.anime.anime_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getAnimeStaffPositionsForPerson, getLoggedInUserAnimeEntryStatuses\r\n})(AnimeStaffPositionsTab)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport {Anime, ApiResult, Manga, Person} from \"../../../../models\";\r\nimport {getPublishedMangaForPerson} from \"../../../../actions/people\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../../layout/sounds\";\r\nimport GoToPageDialog from \"../../../layout/pagination/goToPageDialog\";\r\n\r\nimport '../../../../assets/css/people.css'\r\nimport {getLoggedInUserMangaEntryStatuses} from \"../../../../actions/users\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\n\r\nconst ITEMS_PER_PAGE = 50;\r\n\r\n\r\nclass PublishedMangaTab extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.person[Person.published_manga] || this.props.published_manga[ApiResult.previous])\r\n            this.props.getPublishedMangaForPerson(this.props.person[Person.id]);\r\n        if (isEmpty(this.props.user_manga_entry_statuses))\r\n            this.props.getLoggedInUserMangaEntryStatuses()\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({current_page: page});\r\n            this.props.getPublishedMangaForPerson(this.props.person[Person.id], page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const manga_roles = JSON.parse(this.props.person[Person.published_manga_roles]);\r\n        return (\r\n            <div className=\"person-tab\">\r\n                {this.props.published_manga ? <>\r\n                    <table>\r\n                        <tbody>\r\n                        {this.props.published_manga[ApiResult.results].map((manga, i) => (\r\n                            <tr key={i}>\r\n                                <td>\r\n                                    <TitleCard\r\n                                        key={i} branch={BRANCH_MANGA} title={manga}\r\n                                        containerClassNames=\"character-role-wrapper-card-container\"\r\n                                        user_status={!isEmpty(this.props.user_manga_entry_statuses) ?\r\n                                            this.props.user_manga_entry_statuses[`${manga[Manga.id]}`] : null}\r\n                                    />\r\n                                </td>\r\n                                <td><p className=\"role\">{manga_roles[manga[Manga.id]]}</p></td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"pagination\">\r\n                        <Pagination\r\n                            count={Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            color=\"primary\"\r\n                            siblingCount={3}\r\n                            page={this.state.current_page}\r\n                            onChange={(type, page) => {\r\n                                playClickSound();\r\n                                if (page !== this.state.current_page)\r\n                                    this.goToPage(page);\r\n                                else\r\n                                    this.setState({page_dialog_open: true})\r\n                            }}\r\n                        />\r\n                        <GoToPageDialog\r\n                            open={this.state.page_dialog_open}\r\n                            current_page={this.state.current_page}\r\n                            total_pages={Math.ceil(this.props.published_manga[ApiResult.count] / ITEMS_PER_PAGE)}\r\n                            goToPage={this.goToPage}\r\n                            onClose={this.closePageDialog}/>\r\n                    </div>\r\n                </> : this.props.manga_loading ? <Loading text={'Manga loading'} block={true}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    published_manga: state.people.person[Person.published_manga],\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses,\r\n    manga_loading: state.manga.manga_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getPublishedMangaForPerson, getLoggedInUserMangaEntryStatuses\r\n})(PublishedMangaTab)\r\n","import {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA, BRANCH_PEOPLE,\r\n    store_reducer_users,\r\n    store_reducers, USER_ANIME_STATUSES, USER_MANGA_STATUSES\r\n} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {getAnime} from \"../../actions/anime\";\r\nimport {getManga} from \"../../actions/manga\";\r\nimport {formatBytes, formatContentDateByKnown, isEmpty} from \"../functions\";\r\nimport {\r\n    Anime,\r\n    AnimeOnServer,\r\n    Character,\r\n    Eroge,\r\n    Manga, Person,\r\n    Profile,\r\n    User,\r\n    UserAnimeEntry,\r\n    UserMangaEntry\r\n} from \"../../models\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons/faPlay\";\r\nimport React from \"react\";\r\nimport GeneralTab from \"../anime/display/tabs/GeneralTab\";\r\nimport MangaGeneralTab from \"../manga/display/tabs/GeneralTab\";\r\nimport CharactersGeneralTab from \"../characters/display/tabs/GeneralTab\";\r\nimport PeopleGeneralTab from \"../people/display/tabs/GeneralTab\";\r\nimport ErogeGeneralTab from \"../eroge/display/tabs/GeneralTab\";\r\nimport CharactersTab from \"../anime/display/tabs/CharactersTab\";\r\nimport MangaCharactersTab from \"../manga/display/tabs/CharactersTab\";\r\nimport MangaRelationsTab from \"../manga/display/tabs/RelationsTab\";\r\nimport ServerTab from \"../anime/display/tabs/ServerTab\";\r\nimport {\r\n    faBookOpen,\r\n    faCodeBranch,\r\n    faDownload, faEdit,\r\n    faHistory,\r\n    faInfo, faLevelDownAlt, faMinusSquare,\r\n    faServer,\r\n    faSitemap, faSyncAlt, faUserCog,\r\n    faUserFriends\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {getCharacter} from \"../../actions/characters\";\r\nimport {getEroge} from \"../../actions/eroge\";\r\nimport Moment from \"react-moment\";\r\nimport {\r\n    addToFavorites,\r\n    getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses,\r\n    getUserAnimeEntry,\r\n    getUserMangaEntry,\r\n    removeFromFavorites\r\n} from \"../../actions/users\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AnimeEntryModalForm from \"../user/forms/anime/AnimeEntryModalForm\";\r\nimport {faPlus, faPlusSquare, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\nimport UpdateAnimeEpisodeButton from \"../user/forms/anime/UpdateAnimeEpisodeButton\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport AnimeEpisodeHistoryModal from \"../user/forms/anime/AnimeEpisodeHistoryModal\";\r\nimport MangaEntryModalForm from \"../user/forms/manga/MangaEntryModalForm\";\r\nimport {\r\n    UpdateMangaVolumeButton,\r\n    UpdateMangaChapterButton\r\n} from \"../user/forms/manga/UpdateMangaVolumeChapterButtons\";\r\nimport MangaVolumeChapterHistoryModal from \"../user/forms/manga/MangaVolumeChapterHistoryModal\";\r\nimport RelationsTab from \"../anime/display/tabs/RelationsTab\";\r\nimport {faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {element} from \"prop-types\";\r\nimport {\r\n    ADMIN_EDIT_ANIME,\r\n    ADMIN_EDIT_CHARACTER,\r\n    ADMIN_EDIT_EROGE,\r\n    ADMIN_EDIT_MANGA, ADMIN_EDIT_PERSON,\r\n    ANIME_FRANCHISE_DISPLAY\r\n} from \"../../urls\";\r\nimport FranchiseTab from \"../anime/display/tabs/FranchiseTab\";\r\nimport {getTorrentProgress, scrapeUpdateTitle} from \"../../actions/requiem\";\r\nimport DownloadTorrentModalForm from \"../requiem/forms/DownloadTorrentModalForm\";\r\nimport {TorrentProgressInfo} from \"../requiem/snippets/snippets\";\r\nimport DisplayTorrentProgress from \"../requiem/snippets/DisplayTorrentProgress\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport EditAnimeOnServerModalForm from \"../requiem/forms/EditAnimeOnServerModalForm\";\r\nimport {AddAnimeEntryInstantDropButton, AddMangaEntryInstantDropButton} from \"../user/forms/shortForms\";\r\nimport {getPerson} from \"../../actions/people\";\r\nimport VoiceActorRolesTab from \"../people/display/tabs/VoiceActorRolesTab\";\r\nimport AnimeStaffPositionsTab from \"../people/display/tabs/AnimeStaffPositionsTab\";\r\nimport PublishedMangaTab from \"../people/display/tabs/PublishedMangaTab\";\r\n\r\n\r\nexport function UserAnimeEntryStatus(props) {\r\n    const {classNames, entry} = props;\r\n    let status_classname = 'chip-primary';\r\n\r\n    switch (entry[UserAnimeEntry.status]) {\r\n        case USER_ANIME_STATUSES.watching:\r\n            status_classname = 'chip-success';\r\n            break;\r\n        case USER_ANIME_STATUSES.on_hold:\r\n            status_classname = 'chip-warning';\r\n            break;\r\n        case USER_ANIME_STATUSES.dropped:\r\n            status_classname = 'chip-danger';\r\n            break;\r\n        case USER_ANIME_STATUSES.plan_to_watch:\r\n            status_classname = 'chip-default';\r\n            break;\r\n    }\r\n\r\n    return <Grid container className=\"summery-container box-light\">\r\n        <Grid item xs={2}>\r\n            <p>My Status</p>\r\n            <p><Chip className={status_classname} label={entry[UserAnimeEntry.status]}/></p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Progress</p>\r\n            <p>{entry[UserAnimeEntry.watched_episodes]}\r\n                {entry[UserAnimeEntry.status] !== USER_ANIME_STATUSES.completed ?\r\n                    <UpdateAnimeEpisodeButton id={entry[UserAnimeEntry.anime][UserAnimeEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Score</p>\r\n            <p>{entry[UserAnimeEntry.score] === 0 ?\r\n                <span className=\"color-gray\">0</span> : entry[UserAnimeEntry.score]}</p>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n            <p>Started Watching</p>\r\n            <p>{entry[UserAnimeEntry.start_date] ?\r\n                <Moment date={entry[UserAnimeEntry.start_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n            <p>Finished Watching</p>\r\n            <p>{entry[UserAnimeEntry.finish_date] ?\r\n                <Moment date={entry[UserAnimeEntry.finish_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport function UserMangaEntryStatus(props) {\r\n    const {classNames, entry} = props;\r\n    let status_classname = 'chip-primary';\r\n\r\n    switch (entry[UserAnimeEntry.status]) {\r\n        case USER_MANGA_STATUSES.reading:\r\n            status_classname = 'chip-success';\r\n            break;\r\n        case USER_MANGA_STATUSES.on_hold:\r\n            status_classname = 'chip-warning';\r\n            break;\r\n        case USER_MANGA_STATUSES.dropped:\r\n            status_classname = 'chip-danger';\r\n            break;\r\n        case USER_MANGA_STATUSES.plan_to_read:\r\n            status_classname = 'chip-default';\r\n            break;\r\n    }\r\n\r\n    return <Grid container className=\"summery-container box-light\">\r\n        <Grid item xs={2}>\r\n            <p>My Status</p>\r\n            <p><Chip className={status_classname} label={entry[UserMangaEntry.status]}/></p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Volumes</p>\r\n            <p>{entry[UserMangaEntry.read_volumes]}\r\n                {entry[UserMangaEntry.status] !== USER_MANGA_STATUSES.completed ?\r\n                    <UpdateMangaVolumeButton id={entry[UserMangaEntry.manga][UserMangaEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Chapters</p>\r\n            <p>{entry[UserMangaEntry.read_chapters]}\r\n                {entry[UserMangaEntry.status] !== USER_MANGA_STATUSES.completed ?\r\n                    <UpdateMangaChapterButton id={entry[UserMangaEntry.manga][UserMangaEntry.id]} entry={entry}/>\r\n                    : null}\r\n            </p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>My Score</p>\r\n            <p>{entry[UserMangaEntry.score] === 0 ?\r\n                <span className=\"color-gray\">0</span> : entry[UserMangaEntry.score]}</p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>Started Reading</p>\r\n            <p>{entry[UserMangaEntry.start_date] ?\r\n                <Moment date={entry[UserMangaEntry.start_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n            <p>Finished Reading</p>\r\n            <p>{entry[UserMangaEntry.finish_date] ?\r\n                <Moment date={entry[UserMangaEntry.finish_date]} format={'Do MMM YYYY | HH:mm:ss'}/> :\r\n                <span className=\"color-gray\">None</span>}</p>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\nexport function getTitle(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(getAnime(id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(getManga(id));\r\n            return;\r\n        case BRANCH_CHARACTERS:\r\n            store.dispatch(getCharacter(id));\r\n            return;\r\n        case BRANCH_EROGE:\r\n            store.dispatch(getEroge(id));\r\n            return;\r\n        case BRANCH_PEOPLE:\r\n            store.dispatch(getPerson(id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getUserTitleStatus(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            store.dispatch(getUserAnimeEntry(id));\r\n            return;\r\n        case BRANCH_MANGA:\r\n            store.dispatch(getUserMangaEntry(id));\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport function getUserTitleStatusSummary(branch, entry) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <UserAnimeEntryStatus entry={entry}/>;\r\n        case BRANCH_MANGA:\r\n            return <UserMangaEntryStatus entry={entry}/>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\nfunction checkFavorites(favoriteTitles, currentTitleId) {\r\n    if (favoriteTitles.length <= 0) return false;\r\n    else\r\n        for (let x = 0; x < favoriteTitles.length; x++) {\r\n            console.log(favoriteTitles[x]['id'], currentTitleId);\r\n            if (favoriteTitles[x]['id'] === currentTitleId) return true;\r\n        }\r\n    return false\r\n}\r\n\r\nexport function isTitleInFavorites(branch, id) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            let favorite_anime = store.getState().auth.user[User.profile][Profile.favorite_anime];\r\n            return checkFavorites(favorite_anime, parseInt(id));\r\n        case BRANCH_MANGA:\r\n            let favorite_manga = store.getState().auth.user[User.profile][Profile.favorite_manga];\r\n            return checkFavorites(favorite_manga, parseInt(id));\r\n        case BRANCH_CHARACTERS:\r\n            let favorite_characters = store.getState().auth.user[User.profile][Profile.favorite_characters];\r\n            console.log(favorite_characters);\r\n            return checkFavorites(favorite_characters, parseInt(id));\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.entry {Object} Entry of the user\r\n * @param props.title {String} Title\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function UserModalForms(props) {\r\n    const {branch, id, entry, title} = props;\r\n    const in_favorites = isTitleInFavorites(branch, id);\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <>\r\n                <AnimeEntryModalForm\r\n                    id={id} title={title}\r\n                    user_anime_entry={entry}/>\r\n                {isEmpty(entry) ? <AddAnimeEntryInstantDropButton anime_id={parseInt(id)}/> : null}\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n                <CyberButton disabled={true} variant=\"outlined\" color=\"primary\">\r\n                    <FontAwesomeIcon icon={faPlusSquare}/>\r\n                </CyberButton>\r\n                <AnimeEpisodeHistoryModal title={title} entry={entry}/>\r\n            </>;\r\n        case BRANCH_MANGA:\r\n            return <>\r\n                <MangaEntryModalForm\r\n                    id={id} title={title}\r\n                    user_manga_entry={entry}/>\r\n                {isEmpty(entry) ? <AddMangaEntryInstantDropButton manga_id={parseInt(id)}/> : null}\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n                <CyberButton disabled={true} variant=\"outlined\" color=\"primary\">\r\n                    <FontAwesomeIcon icon={faPlusSquare}/>\r\n                </CyberButton>\r\n                <MangaVolumeChapterHistoryModal title={title} entry={entry}/>\r\n            </>;\r\n        case BRANCH_CHARACTERS:\r\n            return <>\r\n                <CyberButton variant=\"outlined\" color=\"primary\" onClick={() => {\r\n                    if (in_favorites)\r\n                        store.dispatch(removeFromFavorites(branch, parseInt(id)));\r\n                    else store.dispatch(addToFavorites(branch, parseInt(id)));\r\n                }}>\r\n                    <FontAwesomeIcon icon={in_favorites ? faStarSolid : faStar}/>\r\n                </CyberButton>\r\n            </>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.branch {String} Title Branch\r\n * @param props.id {Number} Title ID\r\n * @param props.entry {Object} Entry of the user\r\n * @param props.title {String} Title\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AdminModalForms(props) {\r\n    const {branch, id, entry, title} = props;\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <>\r\n                <a href={ADMIN_EDIT_ANIME(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n                {isEmpty(title[Anime.anime_on_server]) ? <>\r\n                    <DownloadTorrentModalForm classNames=\"download-torrent-btn\"/>\r\n                    <EditAnimeOnServerModalForm classNames=\"download-torrent-btn\"/>\r\n                    </>\r\n                    : null}\r\n            </>;\r\n        case BRANCH_MANGA:\r\n            return <>\r\n                <a href={ADMIN_EDIT_MANGA(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_CHARACTERS:\r\n            return <>\r\n                <a href={ADMIN_EDIT_CHARACTER(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_EROGE:\r\n            return <>\r\n                <a href={ADMIN_EDIT_EROGE(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        case BRANCH_PEOPLE:\r\n            return <>\r\n                <a href={ADMIN_EDIT_PERSON(id)}><CyberButton classNames=\"btn-contained-primary\" title={'Admin Edit'}>\r\n                    <FontAwesomeIcon icon={faEdit}/>\r\n                </CyberButton></a>\r\n                <CyberButton classNames=\"btn-contained-secondary\" title={'Update Scrape'} onClick={() => {\r\n                    store.dispatch(scrapeUpdateTitle(id, branch));\r\n                }}>\r\n                    <FontAwesomeIcon icon={faSyncAlt}/>\r\n                </CyberButton>\r\n            </>;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function formatTitle(branch, title, superuser) {\r\n    let display_title = {\r\n        id: 0,\r\n        cover_images: [],\r\n        cdn_cover_images: [],\r\n        title: null,\r\n        title_1: null,\r\n        title_2: null,\r\n        title_3: null,\r\n        info_set: null,\r\n        db_info_set: null,\r\n        users_info_set: null,\r\n        primary_set: null,\r\n        primary_set_wide: null,\r\n        secondary_set: null,\r\n        tabs: null\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            display_title.id = title[Anime.id];\r\n            display_title.cover_images = title[Anime.anime_cover_images] ? title[Anime.anime_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Anime.anime_cdn_cover_images] ? title[Anime.anime_cdn_cover_images] : [];\r\n            display_title.title = title[Anime.title];\r\n            display_title.title_1 = {label: 'English', title: title[Anime.title_english]};\r\n            display_title.title_2 = {label: 'Synonyms', title: title[Anime.title_synonyms]};\r\n            display_title.title_3 = {label: 'Japanese', title: title[Anime.title_japanese]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Anime.mal_link]}>MAL</a>},\r\n                {label: 'Aired', info: title[Anime.aired_string]},\r\n                {label: 'Premiered', info: title[Anime.premiered]},\r\n                {label: 'Broadcast', info: title[Anime.broadcast]},\r\n                {label: 'Producer', info: title[Anime.producer]},\r\n                {label: 'Licensor', info: title[Anime.licensor]},\r\n                {label: 'Studio', info: title[Anime.studio]},\r\n                {label: 'Source', info: title[Anime.source]},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Anime.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Anime.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Anime.score]},\r\n                {label: 'Scored by', info: title[Anime.scored_by]},\r\n                {label: 'Rank', info: title[Anime.rank]},\r\n                {label: 'Popularity', info: title[Anime.popularity]},\r\n                {label: 'Members', info: title[Anime.members]},\r\n                {label: 'Favorites', info: title[Anime.favorites]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Status', info: title[Anime.status]},\r\n                {label: 'Type', info: title[Anime.type]},\r\n                {label: 'Episodes', info: title[Anime.episodes] ? title[Anime.episodes] : '?'},\r\n                {\r\n                    label: 'Duration',\r\n                    info: title[Anime.minutes_per_episode] ? `${title[Anime.minutes_per_episode]}m per ep` : '?'\r\n                },\r\n                {label: 'Rating', info: title[Anime.rating_short]},\r\n                {\r\n                    label: 'Aired',\r\n                    info: formatContentDateByKnown(title[Anime.air_start], title[Anime.air_start_known], true)\r\n                },\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <GeneralTab/>\r\n                },\r\n                {\r\n                    disabled: title[Anime.main_characters].length === 0,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Characters</p>,\r\n                    tab: <CharactersTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.anime_relations],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faCodeBranch}/> Relations</p>,\r\n                    tab: <RelationsTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Anime.franchise],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faSitemap}/> Franchise</p>,\r\n                    tab: <FranchiseTab/>\r\n                },\r\n            ];\r\n\r\n            if (display_title.primary_set && title[Anime.genres_csv]) {\r\n                const genres = title[Anime.genres_csv].split(', ');\r\n                let info = [];\r\n                genres.forEach(genre => {\r\n                    info.push(<span className=\"genre-spacing\">{genre}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Genres', info: info},\r\n                ];\r\n            }\r\n            if (title[Anime.anime_on_server]) {\r\n                if (title[Anime.anime_on_server][AnimeOnServer.downloading]) {\r\n                    if (superuser)\r\n                        display_title.secondary_set = [{\r\n                            label: null, info: <DisplayTorrentProgress id={title[Anime.id]}/>\r\n                        }];\r\n                    else\r\n                        display_title.secondary_set = [{\r\n                            label: 'Currently Downloading', info: <CircularProgress color=\"secondary\"/>\r\n                        }];\r\n                } else\r\n                    display_title.secondary_set = [\r\n                        {label: 'Size', info: `${title[Anime.anime_on_server][AnimeOnServer.size_on_HDD_GB]}GB`},\r\n                        {label: 'Quality', info: title[Anime.anime_on_server][AnimeOnServer.video_quality]},\r\n                        {label: 'Channel', info: title[Anime.anime_on_server][AnimeOnServer.audio_channel]},\r\n                        {\r\n                            label: 'Japanese Dub',\r\n                            info: title[Anime.anime_on_server][AnimeOnServer.japanese_dub] ? 'Yes' : 'No'\r\n                        },\r\n                        {\r\n                            label: 'English  Sub',\r\n                            info: title[Anime.anime_on_server][AnimeOnServer.english_sub] ? 'Yes' : 'No'\r\n                        },\r\n                        {\r\n                            label: null,\r\n                            info: <CyberButton variant=\"outlined\" color=\"secondary\"><FontAwesomeIcon\r\n                                icon={faPlay}/></CyberButton>\r\n                        },\r\n                    ];\r\n                    display_title.tabs.push({\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon color-secondary\"><FontAwesomeIcon icon={faServer}/> Server</p>,\r\n                    tab: <ServerTab/>\r\n                });\r\n            }\r\n            return display_title;\r\n        case BRANCH_MANGA:\r\n            display_title.id = title[Manga.id];\r\n            display_title.cover_images = title[Manga.manga_cover_images];\r\n            display_title.cdn_cover_images = title[Manga.manga_cdn_cover_images] ? title[Manga.manga_cdn_cover_images] : [];\r\n            display_title.title = title[Manga.title];\r\n            display_title.title_1 = {label: 'English', title: title[Manga.title_english]};\r\n            display_title.title_2 = {label: 'Synonyms', title: title[Manga.title_synonyms]};\r\n            display_title.title_3 = {label: 'Japanese', title: title[Manga.title_japanese]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Manga.mal_link]}>MAL</a>},\r\n                {label: 'Published', info: title[Manga.published_string]},\r\n                {label: 'Authors', info: title[Manga.authors]},\r\n                {label: 'Serialization', info: title[Manga.serialization]},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Manga.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Manga.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Manga.score]},\r\n                {label: 'Scored by', info: title[Manga.scored_by]},\r\n                {label: 'Rank', info: title[Manga.rank]},\r\n                {label: 'Popularity', info: title[Manga.popularity]},\r\n                {label: 'Members', info: title[Manga.members]},\r\n                {label: 'Favorites', info: title[Manga.favorites]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Status', info: title[Manga.status]},\r\n                {label: 'Type', info: title[Manga.type]},\r\n                {label: 'Volumes', info: title[Manga.volumes] ? title[Manga.volumes] : '?'},\r\n                {label: 'Chapters', info: title[Manga.chapters] ? title[Manga.chapters] : '?'},\r\n                {\r\n                    label: 'Published',\r\n                    info: formatContentDateByKnown(title[Manga.air_start], title[Manga.air_start_known], true)\r\n                },\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <MangaGeneralTab/>\r\n                },\r\n                {\r\n                    disabled: title[Manga.main_characters].length === 0,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Characters</p>,\r\n                    tab: <MangaCharactersTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Manga.manga_relations],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faCodeBranch}/> Relations</p>,\r\n                    tab: <MangaRelationsTab/>\r\n                },\r\n            ];\r\n            if (display_title.primary_set && title[Manga.genres_csv]) {\r\n                const genres = title[Manga.genres_csv].split(', ');\r\n                let info = [];\r\n                genres.forEach(genre => {\r\n                    info.push(<span className=\"genre-spacing\">{genre}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Genres', info: info},\r\n                ];\r\n            }\r\n            return display_title;\r\n        case BRANCH_CHARACTERS:\r\n            display_title.id = title[Character.id];\r\n            display_title.cover_images = title[Character.character_cover_images] ? title[Character.character_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Character.character_cdn_cover_images] ? title[Character.character_cdn_cover_images] : [];\r\n            display_title.title = title[Character.short_name] ? title[Character.short_name] : title[Character.character_name];\r\n            display_title.title_1 = {label: 'Full Name', title: title[Character.character_name]};\r\n            display_title.title_2 = {label: 'Nickname', title: title[Character.nickname]};\r\n            display_title.title_3 = {label: 'Name', title: title[Character.short_name]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Character.mal_link]}>MAL</a>},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Character.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Character.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Favorites', info: title[Character.favorites]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <CharactersGeneralTab/>\r\n                },\r\n            ];\r\n            return display_title;\r\n        case BRANCH_EROGE:\r\n            display_title.id = title[Eroge.id];\r\n            if (title[Eroge.eroge_cover_images])\r\n                display_title.cover_images = title[Eroge.eroge_cover_images];\r\n            display_title.title = title[Eroge.eroge_name];\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Eroge.game_url]}>HG</a>},\r\n                {\r\n                    label: 'External download',\r\n                    info: <a href={title[Eroge.game_url]}><FontAwesomeIcon icon={faDownload}/></a>\r\n                },\r\n            ];\r\n            display_title.db_info_set = [\r\n                {label: 'Last Modified', info: <Moment date={title[Eroge.date_last_modified]} format={'Do MMM YYYY'}/>},\r\n                {label: 'Added on', info: <Moment date={title[Eroge.date_added]} format={'Do MMM YYYY'}/>},\r\n                {label: 'Last Updated', info: <Moment date={title[Eroge.date_updated]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Score', info: title[Eroge.rating]},\r\n                {label: 'Scored by', info: title[Eroge.rated_by]},\r\n            ];\r\n            display_title.primary_set = [\r\n                {label: 'Size', info: formatBytes(title[Eroge.size])},\r\n                {label: 'Type', info: title[Eroge.type]},\r\n                {label: 'Censorship', info: title[Eroge.censorship]},\r\n                {label: 'Language', info: title[Eroge.language]},\r\n                {label: 'Platforms', info: title[Eroge.platforms]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <ErogeGeneralTab/>\r\n                },\r\n            ];\r\n            if (display_title.primary_set && title[Eroge.tags]) {\r\n                const tags = title[Eroge.tags].split(', ');\r\n                let info = [];\r\n                tags.forEach(tag => {\r\n                    info.push(<span className=\"genre-spacing\">{tag}</span>)\r\n                });\r\n                display_title.primary_set_wide = [\r\n                    {label: 'Tags', info: info},\r\n                ];\r\n            }\r\n            return display_title;\r\n        case BRANCH_PEOPLE:\r\n            display_title.id = title[Person.id];\r\n            display_title.cover_images = title[Person.person_cover_images] ? title[Person.person_cover_images] : [];\r\n            display_title.cdn_cover_images = title[Person.person_cdn_cover_images] ? title[Person.person_cdn_cover_images] : [];\r\n            display_title.title = title[Person.person_name];\r\n            display_title.title_1 = {label: 'Family Name', title: title[Person.family_name]};\r\n            display_title.title_2 = {label: 'Given Name', title: title[Person.given_name]};\r\n            display_title.title_3 = {label: 'Other Names', title: title[Person.alternative_names]};\r\n            display_title.info_set = [\r\n                {label: 'Sources', info: <a href={title[Person.mal_link]}>MAL</a>},\r\n                {label: 'Birthday', info: title[Person.birthday] ?\r\n                        <Moment date={title[Person.birthday]} format={'Do MMM YYYY'}/> :\r\n                        <span className=\"color-gray\">---</span>},\r\n            ];\r\n            display_title.db_info_set = [\r\n                {\r\n                    label: 'Last Modified',\r\n                    info: <Moment date={title[Person.date_last_modified]} format={'Do MMM YYYY'}/>\r\n                },\r\n                {label: 'Added on', info: <Moment date={title[Person.date_added]} format={'Do MMM YYYY'}/>},\r\n            ];\r\n            display_title.users_info_set = [\r\n                {label: 'Favorites', info: title[Person.favorites]},\r\n            ];\r\n            display_title.tabs = [\r\n                {\r\n                    disabled: false,\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faInfo}/> General</p>,\r\n                    tab: <PeopleGeneralTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.has_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserFriends}/> Character Roles</p>,\r\n                    tab: <VoiceActorRolesTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.anime_staff_positions_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faUserCog}/> Anime Staff</p>,\r\n                    tab: <AnimeStaffPositionsTab/>\r\n                },\r\n                {\r\n                    disabled: !title[Person.published_manga_roles],\r\n                    label: <p className=\"list-icon\"><FontAwesomeIcon icon={faBookOpen}/> Published Manga</p>,\r\n                    tab: <PublishedMangaTab/>\r\n                },\r\n            ];\r\n            return display_title;\r\n        default:\r\n            return display_title\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {faEdit, faMinusSquare, faStar} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay} from \"@fortawesome/free-solid-svg-icons/faPlay\";\r\n\r\nimport {ANIME_TAB_NAME, CYBER_GENESIS_TAB_NAME, CYBER_GENESIS_URL} from \"../../globals\";\r\nimport {NOT_FOUND} from \"../../urls\";\r\nimport {Anime, AnimeOnServer, CDNCoverImages, CoverImages, User, UserAnimeEntry} from \"../../models\";\r\nimport {playClickSound, playHoverSound} from \"../layout/sounds\";\r\nimport {formatContentDateByKnown, getTitleCoverImage, isEmpty} from \"../functions\";\r\nimport {getAnime} from '../../actions/anime'\r\nimport {CopyTextToClipboard} from \"./snippets\";\r\nimport {CyberButton} from \"../layout/common/common\";\r\nimport {DisplayTabs} from \"./TabsRoot\";\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport {PreLoadImage} from \"../layout/common/common\";\r\nimport Loading from \"../layout/common/Loading\";\r\nimport {\r\n    AdminModalForms,\r\n    formatTitle,\r\n    getTitle,\r\n    getUserModalForms,\r\n    getUserTitleStatus,\r\n    getUserTitleStatusSummary, UserModalForms\r\n} from \"./functions\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\nimport '../../assets/css/display.css'\r\nimport {faDownload, faPlus, faPlusSquare, faStar as faStarSolid} from \"@fortawesome/free-solid-svg-icons\";\r\nimport AnimeEntryModalForm from \"../user/forms/anime/AnimeEntryModalForm\";\r\nimport {getUserAnimeEntry} from \"../../actions/users\";\r\n\r\n\r\nclass Display extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** ID of the title */\r\n        param_id: PropTypes.number.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        title_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        title_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        title: PropTypes.object.isRequired,\r\n        /** Redux prop of user_title_status */\r\n        user_title_status: PropTypes.object,\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        getTitle(this.props.branch, this.props.param_id);\r\n        if (this.props.user_authenticated)\r\n            getUserTitleStatus(this.props.branch, this.props.param_id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.user_authenticated !== this.props.user_authenticated)\r\n            getUserTitleStatus(this.props.branch, this.props.param_id);\r\n        if (prevProps.param_id !== this.props.param_id) {\r\n            window.scrollTo(0, 0);\r\n            getTitle(this.props.branch, this.props.param_id);\r\n            getUserTitleStatus(this.props.branch, this.props.param_id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const superuser = this.props.user && this.props.user[User.is_superuser];\r\n        const display_title = this.props.title_loaded ?\r\n            formatTitle(this.props.branch, this.props.title, superuser) : formatTitle();\r\n        const img_url = getTitleCoverImage(display_title.cdn_cover_images, display_title.cover_images);\r\n        const tabs_margin = !!(display_title.primary_set || display_title.primary_set_wide ||\r\n            display_title.secondary_set);\r\n        document.title = display_title.title ? display_title.title : CYBER_GENESIS_TAB_NAME;\r\n\r\n        if (this.props.status && this.props.status === 404)\r\n            return <Redirect to={NOT_FOUND}/>;\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Display\">\r\n                    {this.props.title_loaded ? <Grid container style={{marginBottom: 100}}>\r\n                        <Grid item xs={12} className=\"title-container\">\r\n                            <h1><CopyTextToClipboard text={display_title.title}/></h1>\r\n                            {superuser ? <AdminModalForms\r\n                                id={this.props.param_id}\r\n                                branch={this.props.branch}\r\n                                title={this.props.title}/> : null}\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <div className=\"details-container\">\r\n                                <div className=\"img-container\">\r\n                                    <PreLoadImage src={img_url} alt={`${this.props.branch} cover image`}/>\r\n                                </div>\r\n                                {this.props.user_authenticated ? <div className=\"user-buttons-container\">\r\n                                    <UserModalForms branch={this.props.branch} id={this.props.param_id} title={display_title.title} entry={this.props.user_title_status}/>\r\n                                    </div> : null}\r\n                                <div className=\"info-container box-light\">\r\n                                    <h2>Alternative Titles</h2>\r\n                                    <table>\r\n                                        <tbody>\r\n                                        {display_title.title_1 ? <tr>\r\n                                            <td>{display_title.title_1.label}</td>\r\n                                            <td><CopyTextToClipboard text={display_title.title_1.title}/></td>\r\n                                        </tr> : null}\r\n                                        {display_title.title_2 ? <tr>\r\n                                            <td>{display_title.title_2.label}</td>\r\n                                            <td><CopyTextToClipboard text={display_title.title_2.title}/></td>\r\n                                        </tr> : null}\r\n                                        {display_title.title_3 ? <tr>\r\n                                            <td>{display_title.title_3.label}</td>\r\n                                            <td><CopyTextToClipboard text={display_title.title_3.title}/></td>\r\n                                        </tr> : null}\r\n                                        </tbody>\r\n                                    </table>\r\n                                    <h2>Information</h2>\r\n                                    <h4>{this.props.branch} Information</h4>\r\n                                    {display_title.info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                    <h4>Database Information</h4>\r\n                                    {display_title.db_info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.db_info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                    <h4>Users Information</h4>\r\n                                    {display_title.users_info_set ? <table>\r\n                                        <tbody>\r\n                                        {display_title.users_info_set.map(item => (\r\n                                            <tr>\r\n                                                <td>{item.label}</td>\r\n                                                <td>{item.info}</td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        </tbody>\r\n                                    </table> : null}\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={9} className=\"main-container\">\r\n                            {this.props.user_authenticated && !isEmpty(this.props.user_title_status) ?\r\n                                getUserTitleStatusSummary(this.props.branch, this.props.user_title_status) : null}\r\n                            {display_title.primary_set ? <Grid container className=\"summery-container box-light\">\r\n                                {display_title.primary_set.map(item => (\r\n                                    <Grid item xs={2}>\r\n                                        <p>{item.label}</p>\r\n                                        <p>{item.info}</p>\r\n                                    </Grid>\r\n                                ))}\r\n                                {display_title.primary_set_wide ? display_title.primary_set_wide.map(item => (\r\n                                    <Grid item xs={12} className=\"genres-container\">\r\n                                        <p>{item.label}</p>\r\n                                        <p>{item.info}</p>\r\n                                    </Grid>\r\n                                )) : null}\r\n                            </Grid> : null}\r\n                            {display_title.secondary_set ?\r\n                                <Grid container className=\"summery-container box-light color-secondary\">\r\n                                    {display_title.secondary_set.map(item => (\r\n                                        <Grid item xs={Math.floor(12 / display_title.secondary_set.length)}>\r\n                                            <p>{item.label}</p>\r\n                                            <p>{item.info}</p>\r\n                                        </Grid>\r\n                                    ))}\r\n                                </Grid> : null}\r\n\r\n                            {display_title.tabs ? <Grid container className=\"tabs-container\"\r\n                                                        style={{marginTop: tabs_margin ? 15 : 0}}>\r\n                                <DisplayTabs tabs={display_title.tabs}/>\r\n                            </Grid> : null}\r\n                        </Grid>\r\n                    </Grid> : this.props.title_loading ?\r\n                        <Loading text={`${this.props.branch} Loading`} offset={100}/> : null}\r\n                </div>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    status: state.errors.status,\r\n    user_authenticated: state.auth.user_authenticated,\r\n\r\n    /**\r\n     * @user: state.auth.user is here for checking if the logged in user is admin and to update the component\r\n     * when adding/removing title from favorites etc.\r\n     * @torrent_progress: is here for re-rendering the component on change\r\n     */\r\n    user: state.auth.user,\r\n    // torrent_progress: state.requiem.torrent_progress\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnime})(Display)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass AnimeDisplay extends Component {\r\n    componentDidMount() {\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_ANIME}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.anime_loading}\r\n            title_loaded={this.props.anime_loaded}\r\n            title={this.props.anime}\r\n            user_title_status={this.props.user_anime_entry}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime: state.anime.anime,\r\n    anime_loaded: state.anime.anime_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    user_anime_entry: state.users.user_anime_entry,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLoggedInUserAnimeEntryStatuses,\r\n    getLoggedInUserMangaEntryStatuses\r\n})(AnimeDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\nimport {getLoggedInUserAnimeEntryStatuses, getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass MangaDisplay extends Component {\r\n    componentDidMount() {\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_MANGA}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.manga_loading}\r\n            title_loaded={this.props.manga_loaded}\r\n            title={this.props.manga}\r\n            user_title_status={this.props.user_manga_entry}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga: state.manga.manga,\r\n    manga_loaded: state.manga.manga_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n    user_manga_entry: state.users.user_manga_entry,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLoggedInUserAnimeEntryStatuses,\r\n    getLoggedInUserMangaEntryStatuses\r\n})(MangaDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\n\r\n\r\nclass CharactersBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_CHARACTERS}\r\n            titles_loading={this.props.characters_loading}\r\n            filtered_titles_loaded={this.props.filtered_characters_loaded}\r\n            filtered_titles={this.props.filtered_characters}\r\n            title_filters={this.props.characters_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    characters_loading: state.characters.characters_loading,\r\n    filtered_characters_loaded: state.characters.filtered_characters_loaded,\r\n    filtered_characters: state.characters.filtered_characters,\r\n    characters_filters: state.cookies.characters_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharactersBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_CHARACTERS} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass CharacterDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_CHARACTERS}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.characters_loading}\r\n            title_loaded={this.props.characters_loaded}\r\n            title={this.props.character}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    character: state.characters.character,\r\n    characters_loaded: state.characters.characters_loaded,\r\n    characters_loading: state.characters.characters_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharacterDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\nimport {isEmpty} from \"../../functions\";\r\n\r\n\r\nclass ErogeBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_EROGE}\r\n            titles_loading={this.props.eroge_loading}\r\n            filtered_titles_loaded={this.props.filtered_eroge_loaded}\r\n            filtered_titles={this.props.filtered_eroge}\r\n            title_filters={this.props.eroge_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    filtered_eroge_loaded: state.eroge.filtered_eroge_loaded,\r\n    filtered_eroge: state.eroge.filtered_eroge,\r\n    eroge_filters: state.cookies.eroge_browse_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ErogeBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_EROGE} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass CharacterDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_EROGE}\r\n            param_id={this.props.match.params.id}\r\n            title_loading={this.props.eroge_loading}\r\n            title_loaded={this.props.eroge_loaded}\r\n            title={this.props.eroge}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge: state.eroge.eroge,\r\n    eroge_loaded: state.eroge.eroge_loaded,\r\n    eroge_loading: state.eroge.eroge_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(CharacterDisplay)\r\n","import {BRANCH_ANIME, BRANCH_MANGA} from \"../../globals\";\r\nimport store from \"../../store\";\r\nimport {getAnimeData} from \"../../actions/anime\";\r\nimport {getMangaData} from \"../../actions/manga\";\r\nimport {AnimeData, MangaData} from \"../../models\";\r\nimport {ANIME_SEASON_DISPLAY, HOME, MANGA_SEASON_DISPLAY} from \"../../urls\";\r\nimport AnimeBrowse from \"../anime/browse/AnimeBrowse\";\r\nimport React from \"react\";\r\nimport MangaBrowse from \"../manga/browse/MangaBrowse\";\r\nimport {faLeaf, faSeedling, faSnowflake, faSun, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nexport function getSeasonIcon(season) {\r\n    switch (season) {\r\n        case 1:\r\n            return <FontAwesomeIcon icon={faSeedling} className=\"spring\"/>;\r\n        case 2:\r\n            return <FontAwesomeIcon icon={faSun} className=\"summer\"/>;\r\n        case 3:\r\n            return <FontAwesomeIcon icon={faLeaf} className=\"fall\"/>;\r\n        case 4:\r\n            return <FontAwesomeIcon icon={faSnowflake} className=\"winter\"/>;\r\n        default:\r\n            return <FontAwesomeIcon icon={faTimes} className=\"winter\"/>;\r\n    }\r\n}\r\n\r\n\r\nexport function getTitleData(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            // noinspection JSCheckFunctionSignatures\r\n            store.dispatch(getAnimeData());\r\n            return;\r\n        case BRANCH_MANGA:\r\n            // noinspection JSCheckFunctionSignatures\r\n            store.dispatch(getMangaData());\r\n            return;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function browseSeasonTitlesFromBranch(branch, year, season) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return <AnimeBrowse season={{year: year, season: season}}/>;\r\n        case BRANCH_MANGA:\r\n            return <MangaBrowse season={{year: year, season: season}}/>;\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getPrevSeasonUrl(branch, year, season) {\r\n    let prev_year = year;\r\n    let prev_season = season - 1;\r\n    if (prev_season === 0) {\r\n        prev_season = 4;\r\n        prev_year = year - 1\r\n    }\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(prev_year, prev_season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(prev_year, prev_season);\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\n\r\nexport function getNextSeasonUrl(branch, year, season) {\r\n    let next_year = year;\r\n    let next_season = season + 1;\r\n    if (next_season === 5) {\r\n        next_season = 1;\r\n        next_year = year + 1\r\n    }\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(next_year, next_season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(next_year, next_season);\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport function formatData(branch, data) {\r\n    let display_data = {\r\n        total_titles_per_season_json: null,\r\n    };\r\n\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            display_data.total_titles_per_season_json = data[AnimeData.total_anime_per_season_json];\r\n            return display_data;\r\n        case BRANCH_MANGA:\r\n            display_data.total_titles_per_season_json = data[MangaData.total_manga_per_season_json];\r\n            return display_data;\r\n        default:\r\n            return display_data;\r\n    }\r\n}\r\n\r\nexport function getSeasonUrl(branch, year, season) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return ANIME_SEASON_DISPLAY(year, season);\r\n        case BRANCH_MANGA:\r\n            return MANGA_SEASON_DISPLAY(year, season);\r\n        default:\r\n            return HOME;\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CyberNavbar from \"../layout/navbar/CyberNavbar\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\n\r\nimport {SeasonYear} from \"../../models\";\r\nimport {getBrowseGridListCols} from \"../functions\";\r\nimport {CyberLink} from \"../layout/common/common\";\r\nimport Loading from \"../layout/common/Loading\";\r\n\r\nimport '../../assets/css/seasons.css'\r\nimport {formatData, getSeasonUrl, getTitleData} from \"./functions\";\r\nimport CyberFooter from \"../layout/footer/CyberFooter\";\r\n\r\n\r\nclass BrowseSeasons extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        data_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        data_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        data: PropTypes.object.isRequired,\r\n    };\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updateGridListCols = this.updateGridListCols.bind(this);\r\n        this.state = {gridlist_cols: getBrowseGridListCols()};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.branch} Seasons`;\r\n        window.scrollTo(0, 0);\r\n        window.addEventListener('resize', this.updateGridListCols);\r\n\r\n        getTitleData(this.props.branch);\r\n    }\r\n\r\n    updateGridListCols() {\r\n        if (this.state.gridlist_cols !== getBrowseGridListCols())\r\n            this.setState({gridlist_cols: getBrowseGridListCols()})\r\n    }\r\n\r\n    render() {\r\n        const data = this.props.data_loaded ? formatData(this.props.branch, this.props.data) : formatData();\r\n\r\n        console.log('data', this.props.data);\r\n        console.log(data);\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                {this.props.data_loaded ? <Grid id=\"Seasons\" container>\r\n                    <Grid item xs={12}>\r\n                        <GridList cellHeight={280} cols={this.state.gridlist_cols} style={{margin: 0}}>\r\n                            {data.total_titles_per_season_json ?\r\n                                JSON.parse(data.total_titles_per_season_json).reverse().map((year, x) => (\r\n                                    <Grow in {...({timeout: 200 + (x * 50)})}>\r\n                                        <GridListTile cols={1} className=\"season-card\">\r\n                                            <div className=\"box-light\">\r\n                                                {console.log(year)}\r\n                                                <h1>{year[SeasonYear.year]}</h1>\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSeedling} className=\"spring\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 1)}>Spring</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][0]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSun} className=\"summer\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 2)}>Summer</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][1]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faLeaf} className=\"fall\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 3)}>Fall</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][2]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <Grid container>\r\n                                                    <Grid item xs={7} className=\"label\">\r\n                                                        <FontAwesomeIcon icon={faSnowflake} className=\"winter\"/>\r\n                                                        <CyberLink to={getSeasonUrl(this.props.branch, year[SeasonYear.year], 4)}>Winter</CyberLink>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={5} className=\"chip\">\r\n                                                        <Chip size=\"small\" variant=\"outlined\"\r\n                                                              label={year[SeasonYear.seasons][3]}/>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n\r\n                                                <p className=\"total\">Total {year[SeasonYear.seasons][0] + year[SeasonYear.seasons][1] + year[SeasonYear.seasons][2] + year[SeasonYear.seasons][3]}</p>\r\n                                            </div>\r\n                                        </GridListTile>\r\n                                    </Grow>\r\n                                )) : null}\r\n                        </GridList>\r\n                    </Grid>\r\n                </Grid> : this.props.anime_loading ? <Loading text={'Seasons Loading'}/> : null}\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../globals\";\r\nimport BrowseSeasons from \"../../seasons/BrowseSeasons\";\r\n\r\n\r\nclass BrowseAnimeSeasons extends Component {\r\n    render() {\r\n        return <BrowseSeasons\r\n            branch={BRANCH_ANIME}\r\n            data_loading={this.props.anime_loading}\r\n            data_loaded={this.props.anime_data_loaded}\r\n            data={this.props.anime_data}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_data: state.anime.anime_data,\r\n    anime_data_loaded: state.anime.anime_data_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseAnimeSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport BrowseSeasons from \"../../seasons/BrowseSeasons\";\r\n\r\n\r\nclass BrowseMangaSeasons extends Component {\r\n    render() {\r\n        return <BrowseSeasons\r\n            branch={BRANCH_MANGA}\r\n            data_loading={this.props.manga_loading}\r\n            data_loaded={this.props.manga_data_loaded}\r\n            data={this.props.manga_data}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_data: state.manga.manga_data,\r\n    manga_data_loaded: state.manga.manga_data_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(BrowseMangaSeasons)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {NOT_FOUND_404_TAB_NAME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\n\r\n\r\nclass NotFound extends Component {\r\n    componentDidMount() {\r\n        document.title = NOT_FOUND_404_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <div id=\"Not-Found\">\r\n                    <Grid container className=\"container\">\r\n                        <Grid xs={12}>\r\n                            <h1>404</h1>\r\n                            <p>Not found</p>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(NotFound)\r\n","import React, {Component, Fragment} from \"react\";\nimport {withAlert} from \"react-alert\";\nimport {connect} from \"react-redux\";\nimport {Alert} from \"../../../models\";\nimport store from \"../../../store\";\nimport {cleanErrors, clearMessage} from \"../../../actions/messages\";\nimport {isEmpty} from \"../../functions\";\n\n\nexport class Alerts extends Component {\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {error, alert, message} = this.props;\n        if (error.status !== prevProps.error.status) {\n            console.log(error.message);\n            let msg = '';\n            if (!isEmpty(error.message))\n                Object.keys(error.message).forEach(key=>{\n                   msg += `\\n${error.message[key]}`\n                });\n\n            if (error.status !== null || error.message !== null) {\n                alert.error(`${error.status ? `Status: ${error.status}` : ''} ${msg}`, {\n                    onOpen: () => {\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            }\n        }\n\n        if (message !== prevProps.message) {\n            if (this.props.type === Alert.type_success)\n                alert.success(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            else if (this.props.type === Alert.type_info)\n                alert.info(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n            else if (this.props.type === Alert.type_error)\n                alert.error(message, {\n                    onOpen: () => {\n                        store.dispatch(clearMessage());\n                        store.dispatch(cleanErrors());\n                    }\n                });\n        }\n\n    }\n\n    render() {\n        return <Fragment/>;\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: state.errors,\n    message: state.success.message,\n    type: state.success.type\n});\n\nexport default connect(mapStateToProps)(withAlert()(Alerts));\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {getSeasonLabelFromSeasonNumber} from \"../functions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {browseSeasonTitlesFromBranch, getNextSeasonUrl, getPrevSeasonUrl, getSeasonIcon} from \"./functions\";\r\n\r\nimport '../../assets/css/seasons.css'\r\nimport {CyberButton, CyberLink} from \"../layout/common/common\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../urls\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faArrowLeft, faArrowRight, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass DisplaySeason extends Component {\r\n    static propTypes = {\r\n        /** Content Branch */\r\n        branch: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            year: parseInt(this.props.match.params.year),\r\n            season_num: parseInt(this.props.match.params.season),\r\n            season_name: getSeasonLabelFromSeasonNumber(parseInt(this.props.match.params.season))\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log('prev prop', prevProps);\r\n        console.log('prev prop', prevProps.match.params);\r\n        console.log('prev', prevState);\r\n        console.log('new', this.props.match.params.season);\r\n        if (prevProps.match.params.season !== this.props.match.params.season) {\r\n            this.setState({\r\n                year: parseInt(this.props.match.params.year),\r\n                season_num: parseInt(this.props.match.params.season),\r\n                season_name: getSeasonLabelFromSeasonNumber(parseInt(this.props.match.params.season))\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Seasons\">\r\n                <div className=\"title-segment\">\r\n                    <CyberLink to={getPrevSeasonUrl(this.props.branch, this.state.year, this.state.season_num)}>\r\n                        <CyberButton variant=\"outlined\">\r\n                            <FontAwesomeIcon icon={faArrowLeft}/>\r\n                        </CyberButton>\r\n                    </CyberLink>\r\n                    <h1>\r\n                        {getSeasonIcon(this.state.season_num)} {this.state.season_name} {this.state.year}\r\n                    </h1>\r\n                    <CyberLink to={getNextSeasonUrl(this.props.branch, this.state.year, this.state.season_num)}>\r\n                        <CyberButton variant=\"outlined\">\r\n                            <FontAwesomeIcon icon={faArrowRight}/>\r\n                        </CyberButton>\r\n                    </CyberLink>\r\n                </div>\r\n                {browseSeasonTitlesFromBranch(this.props.branch, this.state.year, this.state.season_num)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {})(DisplaySeason)\r\n","import {Anime, CDNCoverImages, CoverImages, UserAnimeEntry} from \"../../../../models\";\r\nimport {CYBER_GENESIS_URL, getPriorityLabel, USER_ANIME_STATUSES} from \"../../../../globals\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCalendarAlt, faCheck, faImage, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport {ANIME_DISPLAY} from \"../../../../urls\";\r\nimport AnimeEntryModalForm from \"../../forms/anime/AnimeEntryModalForm\";\r\nimport UpdateAnimeEpisodeButton from \"../../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport {getTitleCoverImage, isEmpty} from \"../../../functions\";\r\n\r\n\r\n// function getCoverImgUrl(entry) {\r\n//     const len_cdn_images = entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images];\r\n//     let img_url;\r\n//     if (len_cdn_images > 0) {\r\n//         let largest = 0;\r\n//         for (let x = 0; x < len_cdn_images; x++) {\r\n//             if (entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images][x][CDNCoverImages.size] > largest) {\r\n//                 largest = entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images][x][CDNCoverImages.size];\r\n//                 img_url = entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images][x][CDNCoverImages.thumbnail_url];\r\n//             }\r\n//         }\r\n//         console.log('url!!!', img_url);\r\n//         return img_url;\r\n//     } else {\r\n//         try {\r\n//             return `${CYBER_GENESIS_URL}${entry[UserAnimeEntry.anime][Anime.anime_cover_images][entry[UserAnimeEntry.anime][Anime.anime_cover_images].length - 1][CoverImages.image]}`\r\n//         } catch (e) {\r\n//             return ''\r\n//         }\r\n//     }\r\n//\r\n// }\r\n\r\n\r\n/**\r\n *\r\n * @param props.selected {String}\r\n * @param props.setSelected {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeListStatusButtons(props) {\r\n    const {selected, setSelected} = props;\r\n\r\n    return <>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton disabled={true}>All</CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.watching ? 'btn-contained-success' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.watching)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPlay}/><span className=\"btn-label\">Watching</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.completed ? 'btn-contained-primary' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.completed)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCheck}/><span className=\"btn-label\">Completed</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.on_hold ? 'btn-contained-warning' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.on_hold)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPause}/><span className=\"btn-label\">On Hold</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.dropped ? 'btn-contained-danger' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.dropped)\r\n                }}>\r\n                <FontAwesomeIcon icon={faStop}/><span className=\"btn-label\">Dropped</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_ANIME_STATUSES.plan_to_watch ? 'btn-contained-default' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_ANIME_STATUSES.plan_to_watch)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCalendarAlt}/><span className=\"btn-label\">Planned</span>\r\n            </CyberButton>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeListTableHead(props) {\r\n    const {list_owner} = props;\r\n    return <TableHead>\r\n        <TableRow>\r\n            <TableCell>#</TableCell>\r\n            <TableCell align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n            <TableCell align=\"center\" colSpan={list_owner ? 2 : 1}>Title</TableCell>\r\n            <TableCell align=\"center\">Score</TableCell>\r\n            <TableCell align=\"center\">Progress</TableCell>\r\n            <TableCell align=\"center\">Priority</TableCell>\r\n            <TableCell align=\"center\">Genres</TableCell>\r\n            <TableCell align=\"center\">Type</TableCell>\r\n            <TableCell align=\"center\">Rated</TableCell>\r\n            <TableCell align=\"center\">Started</TableCell>\r\n            <TableCell align=\"center\">Finished</TableCell>\r\n            <TableCell align=\"center\">Added</TableCell>\r\n            {/*<TableCell align=\"center\">Watch</TableCell>*/}\r\n        </TableRow>\r\n    </TableHead>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.index {Number}\r\n * @param props.entry {Object}\r\n * @param props.list_owner {Boolean}\r\n * @param props.list {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function AnimeListTableRow(props) {\r\n    const {index, entry, list_owner, list} = props;\r\n    let image_url;\r\n    if (!isEmpty(entry[UserAnimeEntry.anime]))\r\n        image_url = getTitleCoverImage(entry[UserAnimeEntry.anime][Anime.anime_cdn_cover_images],\r\n            entry[UserAnimeEntry.anime][Anime.anime_cover_images], true);\r\n\r\n    return entry[UserAnimeEntry.anime] ? <TableRow>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n            {index}\r\n        </TableCell>\r\n        <TableCell className={{width: '70px'}} align=\"center\">\r\n            <CyberLink to={ANIME_DISPLAY(entry[UserAnimeEntry.anime][Anime.id])} classNames=\"cover-img-link\">\r\n                <PreLoadImage src={image_url} alt={`Cover image`}/>\r\n            </CyberLink>\r\n        </TableCell>\r\n        <TableCell>\r\n            <CyberLink classNames=\"title-link\"\r\n                       to={ANIME_DISPLAY(entry[UserAnimeEntry.anime][Anime.id])}>\r\n                {entry[UserAnimeEntry.anime][Anime.title]}\r\n            </CyberLink>\r\n        </TableCell>\r\n        {list_owner ?\r\n            <TableCell>\r\n                <AnimeEntryModalForm\r\n                    id={entry[UserAnimeEntry.anime][Anime.id]}\r\n                    classNames=\"edit-btn\"\r\n                    user_anime_entry={entry}\r\n                    edit={true}\r\n                    list={list}/>\r\n            </TableCell> : null}\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary table-number\" size=\"small\"\r\n                  label={entry[UserAnimeEntry.score]}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserAnimeEntry.watched_episodes]}{' '}\r\n                    / {entry[UserAnimeEntry.anime][Anime.episodes]}\r\n                    {list_owner ?\r\n                        <UpdateAnimeEpisodeButton\r\n                            id={entry[UserAnimeEntry.anime][Anime.id]} entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\" size=\"small\"\r\n                  label={getPriorityLabel(entry[UserAnimeEntry.priority])}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserAnimeEntry.anime][Anime.genres_csv] ?\r\n                entry[UserAnimeEntry.anime][Anime.genres_csv].split(', ')\r\n                    .map(genre => (\r\n                        <Chip className=\"chip-primary genre\" size=\"small\"\r\n                              label={genre}/>\r\n                    )) : null}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\"\r\n                  label={entry[UserAnimeEntry.anime][Anime.type]} size=\"small\"/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\"\r\n                  label={entry[UserAnimeEntry.anime][Anime.rating_short]}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserAnimeEntry.start_date] ? <Moment date={entry[UserAnimeEntry.start_date]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserAnimeEntry.finish_date] ? <Moment date={entry[UserAnimeEntry.finish_date]}\r\n                                                         format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserAnimeEntry.date_added] ? <Moment date={entry[UserAnimeEntry.date_added]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        {/*<TableCell align=\"center\">*/}\r\n        {/*    <CyberButton classNames=\"btn-contained-secondary\"><FontAwesomeIcon*/}\r\n        {/*        icon={faPlay}/></CyberButton>*/}\r\n        {/*</TableCell>*/}\r\n    </TableRow> : null\r\n}","import {CoverImages, Manga, UserMangaEntry} from \"../../../../models\";\r\nimport {CYBER_GENESIS_URL, getPriorityLabel, USER_MANGA_STATUSES} from \"../../../../globals\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport React from \"react\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faBookOpen, faCalendarAlt, faCheck, faImage, faPause, faPlay, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../../layout/common/common\";\r\nimport {ANIME_DISPLAY, MANGA_DISPLAY} from \"../../../../urls\";\r\nimport AnimeEntryModalForm from \"../../forms/anime/AnimeEntryModalForm\";\r\nimport UpdateAnimeEpisodeButton from \"../../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport MangaEntryModalForm from \"../../forms/manga/MangaEntryModalForm\";\r\nimport {UpdateMangaVolumeButton, UpdateMangaChapterButton} from \"../../forms/manga/UpdateMangaVolumeChapterButtons\";\r\n\r\n\r\nfunction getCoverImgUrl(entry) {\r\n    try {\r\n        return `${CYBER_GENESIS_URL}${entry[UserMangaEntry.manga][Manga.manga_cover_images][entry[UserMangaEntry.manga][Manga.manga_cover_images].length - 1][CoverImages.image]}`\r\n    } catch (e) {\r\n        return ''\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param props.selected {String}\r\n * @param props.setSelected {Function}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListStatusButtons(props) {\r\n    const {selected, setSelected} = props;\r\n\r\n    return <>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton disabled={true}>All</CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.reading ? 'btn-contained-success' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.reading)\r\n                }}>\r\n                <FontAwesomeIcon icon={faBookOpen}/><span className=\"btn-label\">Reading</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.completed ? 'btn-contained-primary' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.completed)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCheck}/><span className=\"btn-label\">Completed</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.on_hold ? 'btn-contained-warning' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.on_hold)\r\n                }}>\r\n                <FontAwesomeIcon icon={faPause}/><span className=\"btn-label\">On Hold</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.dropped ? 'btn-contained-danger' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.dropped)\r\n                }}>\r\n                <FontAwesomeIcon icon={faStop}/><span className=\"btn-label\">Dropped</span>\r\n            </CyberButton>\r\n        </Grid>\r\n        <Grid item xs={6} sm={4} md={2} className=\"status-buttons\">\r\n            <CyberButton\r\n                classNames={selected === USER_MANGA_STATUSES.plan_to_read ? 'btn-contained-default' : ''}\r\n                onClick={() => {\r\n                    setSelected(USER_MANGA_STATUSES.plan_to_read)\r\n                }}>\r\n                <FontAwesomeIcon icon={faCalendarAlt}/><span className=\"btn-label\">Planned</span>\r\n            </CyberButton>\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n/**\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListTableHead(props) {\r\n    const {list_owner} = props;\r\n    return <TableHead>\r\n        <TableRow>\r\n            <TableCell>#</TableCell>\r\n            <TableCell align=\"center\"><FontAwesomeIcon icon={faImage}/></TableCell>\r\n            <TableCell align=\"center\" colSpan={list_owner ? 2 : 1}>Title</TableCell>\r\n            <TableCell align=\"center\">Score</TableCell>\r\n            <TableCell align=\"center\">Volumes</TableCell>\r\n            <TableCell align=\"center\">Chapters</TableCell>\r\n            <TableCell align=\"center\">Priority</TableCell>\r\n            <TableCell align=\"center\">Genres</TableCell>\r\n            <TableCell align=\"center\">Type</TableCell>\r\n            <TableCell align=\"center\">Started</TableCell>\r\n            <TableCell align=\"center\">Finished</TableCell>\r\n            <TableCell align=\"center\">Added</TableCell>\r\n            {/*<TableCell align=\"center\">Watch</TableCell>*/}\r\n        </TableRow>\r\n    </TableHead>\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param props.index {Number}\r\n * @param props.entry {Object}\r\n * @param props.list_owner {Boolean}\r\n * @param props.list {Object}\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function MangaListTableRow(props) {\r\n    const {index, entry, list_owner, list} = props;\r\n\r\n    return entry[UserMangaEntry.manga] ? <TableRow>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n            {index}\r\n        </TableCell>\r\n        <TableCell className={{width: '70px'}} align=\"center\">\r\n            <CyberLink to={MANGA_DISPLAY(entry[UserMangaEntry.manga][Manga.id])} classNames=\"cover-img-link\">\r\n                <PreLoadImage src={getCoverImgUrl(entry)} alt={`Cover image`}/>\r\n            </CyberLink>\r\n        </TableCell>\r\n        <TableCell>\r\n            <CyberLink classNames=\"title-link\"\r\n                       to={MANGA_DISPLAY(entry[UserMangaEntry.manga][Manga.id])}>\r\n                {entry[UserMangaEntry.manga][Manga.title]}\r\n            </CyberLink>\r\n        </TableCell>\r\n        {list_owner ?\r\n            <TableCell>\r\n                <MangaEntryModalForm\r\n                    id={entry[UserMangaEntry.manga][Manga.id]}\r\n                    classNames=\"edit-btn\"\r\n                    user_manga_entry={entry}\r\n                    edit={true}\r\n                    list={list}/>\r\n            </TableCell> : null}\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary table-number\" size=\"small\"\r\n                  label={entry[UserMangaEntry.score]}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserMangaEntry.read_volumes]}{' '}\r\n                    / {entry[UserMangaEntry.manga][Manga.volumes]}\r\n                    {list_owner ?\r\n                        <UpdateMangaVolumeButton\r\n                            id={entry[UserMangaEntry.manga][Manga.id]}\r\n                            entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <p>\r\n                <span className=\"chip-primary table-number\">\r\n                {entry[UserMangaEntry.read_chapters]}{' '}\r\n                    / {entry[UserMangaEntry.manga][Manga.chapters]}\r\n                    {list_owner ?\r\n                        <UpdateMangaChapterButton\r\n                            id={entry[UserMangaEntry.manga][Manga.id]}\r\n                            entry={entry}\r\n                            list={list}/> : null}\r\n                </span>\r\n            </p>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\" size=\"small\"\r\n                  label={getPriorityLabel(entry[UserMangaEntry.priority])}/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.manga][Manga.genres_csv] ?\r\n                entry[UserMangaEntry.manga][Manga.genres_csv].split(', ')\r\n                    .map(genre => (\r\n                        <Chip className=\"chip-primary genre\" size=\"small\"\r\n                              label={genre}/>\r\n                    )) : null}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            <Chip className=\"chip-primary\"\r\n                  label={entry[UserMangaEntry.manga][Manga.type]} size=\"small\"/>\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.start_date] ? <Moment date={entry[UserMangaEntry.start_date]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.finish_date] ? <Moment date={entry[UserMangaEntry.finish_date]}\r\n                                                         format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        <TableCell align=\"center\">\r\n            {entry[UserMangaEntry.date_added] ? <Moment date={entry[UserMangaEntry.date_added]}\r\n                                                        format={'Do MMM YYYY'}/> : 'None'}\r\n        </TableCell>\r\n        {/*<TableCell align=\"center\">*/}\r\n        {/*    <CyberButton classNames=\"btn-contained-secondary\"><FontAwesomeIcon*/}\r\n        {/*        icon={faPlay}/></CyberButton>*/}\r\n        {/*</TableCell>*/}\r\n    </TableRow> : null\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/list.css'\r\nimport PropTypes from \"prop-types\";\r\nimport {CyberButton, CyberLink, PreLoadImage} from \"../../layout/common/common\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport {filterTitles, getFiltersFromBranch} from \"../../browse/functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {Anime, UserAnimeEntry, ApiResult, CoverImages, User} from \"../../../models\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCalendarAlt, faCheck, faImage, faPause, faPlay, faPlus, faStop} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Moment from \"react-moment\";\r\nimport {\r\n    BRANCH_ANIME,\r\n    BRANCH_CHARACTERS,\r\n    BRANCH_EROGE,\r\n    BRANCH_MANGA,\r\n    CYBER_GENESIS_URL, FILTER_ANIME_INITIAL_VALUES, FILTER_MANGA_INITIAL_VALUES,\r\n    USER_ANIME_STATUSES, USER_MANGA_STATUSES\r\n} from \"../../../globals\";\r\nimport store from \"../../../store\";\r\nimport {cancelAnimeLoading, getAnime} from \"../../../actions/anime\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {ANIME_DISPLAY} from \"../../../urls\";\r\nimport AnimeEntryModalForm from \"../forms/anime/AnimeEntryModalForm\";\r\nimport {updateAnimeEpisode} from \"../../../actions/users\";\r\nimport UpdateAnimeEpisodeButton from \"../forms/anime/UpdateAnimeEpisodeButton\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport {getTitle} from \"../../display/functions\";\r\nimport {AnimeListStatusButtons, AnimeListTableHead, AnimeListTableRow} from \"./anime/tableView\";\r\nimport {getManga} from \"../../../actions/manga\";\r\nimport {getCharacter} from \"../../../actions/characters\";\r\nimport {getEroge} from \"../../../actions/eroge\";\r\nimport {MangaListStatusButtons, MangaListTableHead, MangaListTableRow} from \"./manga/tableView\";\r\n\r\n\r\nfunction getInitialSelected(branch) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return USER_ANIME_STATUSES.watching;\r\n        case BRANCH_MANGA:\r\n            return USER_MANGA_STATUSES.reading;\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\n\r\nclass UserList extends Component {\r\n    static propTypes = {\r\n        /** params of the page, to get the user list id */\r\n        params: PropTypes.object.isRequired,\r\n        /** Redux prop of titles_loading */\r\n        titles_loading: PropTypes.bool.isRequired,\r\n        /** Redux prop of list_owner */\r\n        list_owner: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles_loaded */\r\n        filtered_titles_loaded: PropTypes.bool.isRequired,\r\n        /** Redux prop of filtered_titles */\r\n        filtered_titles: PropTypes.object.isRequired,\r\n        /** Redux prop of title_filters */\r\n        title_filters: PropTypes.object,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.setSelected = this.setSelected.bind(this);\r\n        this.state = {\r\n            list_pk: parseInt(this.props.params.id),\r\n            selected: getInitialSelected(this.props.branch),\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.visited_user[User.username]}'s ${this.props.branch} List`;\r\n        window.scrollTo(0, 0);\r\n        filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n            {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.selected !== this.state.selected) {\r\n            this.setState({current_page: 1});\r\n            filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n                {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n        }\r\n        if (prevProps.params.id !== this.props.params.id) {\r\n            window.scrollTo(0, 0);\r\n            this.setState({list_pk: parseInt(this.props.params.id)}, () => {\r\n                this.props.getUser(this.state.list_pk);\r\n                filterTitles(this.props.branch, 1, this.props.title_filters, null,\r\n                    {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n            });\r\n        }\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        if (page > 0 && page <= Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)) {\r\n            this.setState({current_page: page});\r\n            filterTitles(this.props.branch, page, this.props.title_filters, null,\r\n                {user_list_pk: this.state.list_pk, user_list_filter: this.state.selected});\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.setState({selected: selected})\r\n    }\r\n\r\n    render() {\r\n        const list = {\r\n            user_list_pk: this.state.list_pk,\r\n            user_list_filter: this.state.selected\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"User-List\" container>\r\n                    {this.props.branch === BRANCH_ANIME ?\r\n                        <AnimeListStatusButtons selected={this.state.selected} setSelected={this.setSelected}/>\r\n                        : this.props.branch === BRANCH_MANGA ?\r\n                            <MangaListStatusButtons selected={this.state.selected} setSelected={this.setSelected}/>\r\n                            : null}\r\n\r\n                    {getFiltersFromBranch(this.props.branch, null, list)}\r\n\r\n                    {this.props.filtered_titles_loaded && this.props.visited_user_loaded ?\r\n                        <Grid item xs={12} className=\"list-container\">\r\n                            <TableContainer className=\"list-table\">\r\n                                <Table aria-label=\"user list table\">\r\n                                    {this.props.branch === BRANCH_ANIME ?\r\n                                        <AnimeListTableHead list_owner={this.props.list_owner}/>\r\n                                        : this.props.branch === BRANCH_MANGA ?\r\n                                            <MangaListTableHead list_owner={this.props.list_owner}/> : null}\r\n                                    <TableBody>\r\n                                        {this.props.filtered_titles[ApiResult.results].map((entry, x) => (\r\n                                            this.props.branch === BRANCH_ANIME ?\r\n                                                <AnimeListTableRow\r\n                                                    entry={entry}\r\n                                                    index={x + ((this.state.current_page * 100) - 99)}\r\n                                                    list_owner={this.props.list_owner}\r\n                                                    list={list}\r\n                                                />\r\n                                                : this.props.branch === BRANCH_MANGA ?\r\n                                                <MangaListTableRow\r\n                                                    entry={entry}\r\n                                                    index={x + ((this.state.current_page * 100) - 99)}\r\n                                                    list_owner={this.props.list_owner}\r\n                                                    list={list}\r\n                                                /> : null\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            <div className=\"pagination\">\r\n                                <Pagination\r\n                                    count={Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)}\r\n                                    color=\"primary\"\r\n                                    siblingCount={3}\r\n                                    page={this.state.current_page}\r\n                                    onChange={(type, page) => {\r\n                                        playClickSound();\r\n                                        if (page !== this.state.current_page)\r\n                                            this.goToPage(page);\r\n                                        else\r\n                                            this.setState({page_dialog_open: true})\r\n                                    }}\r\n                                />\r\n                                <GoToPageDialog\r\n                                    open={this.state.page_dialog_open}\r\n                                    current_page={this.state.current_page}\r\n                                    total_pages={Math.ceil(this.props.filtered_titles[ApiResult.count] / 100)}\r\n                                    goToPage={this.goToPage}\r\n                                    onClose={this.closePageDialog}/>\r\n                            </div>\r\n                        </Grid> : this.props.titles_loading ?\r\n                            <Loading text={`${this.props.branch} List Loading`} offset={250}/> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_loading: state.auth.user_loading,\r\n    entry_loading: state.users.entry_loading, // This is here to rerender the small loading on the update episode btn\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(UserList)\r\n","import React from \"react\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\n\r\nimport '../../../assets/css/private_page.css'\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n/**\r\n *\r\n * @param {String} props.username\r\n * @param {String} props.branch\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function PrivatePage(props) {\r\n    const {text} = props;\r\n\r\n    return <>\r\n        <CyberNavbar/>\r\n        <div id=\"Private-Page\">\r\n            <Grid container className=\"container\">\r\n                <Grid xs={12}>\r\n                    <h1>404</h1>\r\n                    <p>{text}</p>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    </>\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_ANIME} from \"../../../../globals\";\r\nimport UserList from \"../UserList\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {PrivatePage} from \"../PrivateList\";\r\n\r\n\r\nclass AnimeList extends Component {\r\n    componentDidMount() {\r\n        this.props.getUser(parseInt(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n            list_owner || !this.props.visited_user[User.profile][Profile.is_anime_list_private] ?\r\n                <UserList\r\n                    branch={BRANCH_ANIME}\r\n                    params={this.props.match.params}\r\n                    list_owner={list_owner}\r\n                    titles_loading={this.props.anime_loading}\r\n                    filtered_titles_loaded={this.props.filtered_anime_loaded}\r\n                    filtered_titles={this.props.filtered_anime}\r\n                    title_filters={this.props.anime_filters}\r\n                /> : <PrivatePage text={`${this.props.visited_user[User.username]}'s ${BRANCH_ANIME} List is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    anime_loading: state.anime.anime_loading,\r\n    filtered_anime_loaded: state.anime.filtered_anime_loaded,\r\n    filtered_anime: state.anime.filtered_anime,\r\n    anime_filters: state.cookies.anime_list_filters\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(AnimeList)\r\n","import React from 'react'\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\n\r\nexport function getDataScoreDistribution(statistics) {\r\n    let parsed_data = statistics['anime_score_distribution'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]);\r\n        labels.push(parsed_data_keys[x]);\r\n    }\r\n\r\n    stat_data.reverse();\r\n    labels.reverse();\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '# of Anime',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRatedVsTimeSpent(statistics) {\r\n    let parsed_data = statistics['anime_rated_vs_time_spent'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        stat_data.push((parsed_data[parsed_data_keys[x]] / 60).toFixed(2));\r\n        labels.push(parsed_data_keys[x]);\r\n    }\r\n\r\n    stat_data.reverse();\r\n    labels.reverse();\r\n\r\n    return {\r\n        labels: labels,\r\n        datasets: [\r\n            {\r\n                label: '# of Hours',\r\n                backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                borderColor: 'rgba(54, 162, 235,1)',\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                data: stat_data\r\n            }\r\n        ]\r\n    };\r\n}\r\n\r\n\r\nexport function getDataRatedVsEpisodeCount(statistics) {\r\n    let parsed_data = statistics['anime_rated_vs_episode_count'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        if (parsed_data_keys[x] === '101+') continue;\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]['total_anime']);\r\n        labels.push(parsed_data_keys[x]);\r\n        stat_mean_score.push(\r\n            (parsed_data[parsed_data_keys[x]]['total_score'] / parsed_data[parsed_data_keys[x]]['total_anime'])\r\n                .toFixed(2))\r\n    }\r\n\r\n    stat_data.push(parsed_data['101+']['total_anime']);\r\n    labels.push('101+');\r\n    stat_mean_score.push((parsed_data['101+']['total_score'] / parsed_data['101+']['total_anime'])\r\n        .toFixed(2));\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nexport function getTableHistory(statistics) {\r\n    let parsed_data = statistics['anime_completed_history'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n    let months_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    let max = 0;\r\n    let sum = 0;\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        let month_keys = Object.keys(parsed_data[parsed_data_keys[x]]);\r\n        for (let y = 0; y < month_keys.length; y++) {\r\n            sum = parsed_data[parsed_data_keys[x]][month_keys[y]][0] +\r\n                parsed_data[parsed_data_keys[x]][month_keys[y]][1];\r\n            if (max < sum)\r\n                max = sum\r\n        }\r\n    }\r\n\r\n    parsed_data_keys.reverse();\r\n\r\n    return <Table id=\"completed-history-table\" bordered>\r\n        <thead>\r\n        <tr>\r\n            <td>{null}</td>\r\n            {months_labels.map(month => (<td key={month}>{month}</td>))}\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {parsed_data_keys.map(year => (\r\n            <tr key={year}>\r\n                <td>{year}</td>\r\n                {months.map(month => (\r\n                    parsed_data[year][month] ?\r\n                        <td key={month} style={{\r\n                            backgroundColor: \"rgba(54, 162, 235, \" +\r\n                                ((parsed_data[year][month][0] + parsed_data[year][month][1]) / max).toFixed(2)\r\n                                    .toString() + \")\"\r\n                        }}>\r\n                            <span>{parsed_data[year][month][0] + parsed_data[year][month][1]} <Chip className=\"chip-primary\" size=\"small\" label={parsed_data[year][month][0]}/> <Chip className=\"chip-danger\" size=\"small\" label={parsed_data[year][month][1]}/></span>\r\n                        </td> : <td key={month}>{null}</td>\r\n                ))}\r\n            </tr>\r\n        ))}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\n\r\nexport function getDataFavoriteYears(statistics) {\r\n    let parsed_data = statistics['anime_favorite_years'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        labels.push(parsed_data_keys[x]);\r\n        stat_data.push(parsed_data[parsed_data_keys[x]]['total_anime']);\r\n        stat_mean_score.push((parsed_data[parsed_data_keys[x]]['total_score'] /\r\n            parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2));\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nfunction compareByTotal(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['total_anime'];\r\n    const second = a['total_anime'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\n\r\nfunction compareByMean(a, b) {\r\n    // Compares the two values of stat and returns 1 or -1\r\n    const first = b['mean_score'];\r\n    const second = a['mean_score'];\r\n\r\n    let comparison = 0;\r\n    if (first > second) {\r\n        comparison = 1;\r\n    } else if (first < second) {\r\n        comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n\r\n\r\nexport function getDataFavoriteGenres(statistics, order) {\r\n    let parsed_data = statistics['anime_favorite_genres'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        data.push({\r\n            'label': parsed_data_keys[x],\r\n            'total_anime': parsed_data[parsed_data_keys[x]]['total_anime'],\r\n            'mean_score': (parsed_data[parsed_data_keys[x]]['total_score'] /\r\n                parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2),\r\n        })\r\n    }\r\n\r\n    if (order === 'Mean')\r\n        data.sort(compareByMean);\r\n    else\r\n        data.sort(compareByTotal);\r\n\r\n    for (let x = 0; x < data.length; x++) {\r\n        labels.push(data[x]['label']);\r\n        stat_data.push(data[x]['total_anime']);\r\n        stat_mean_score.push(data[x]['mean_score']);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n\r\n\r\nexport function getDataFavoriteTypes(statistics) {\r\n    let parsed_data = statistics['anime_favorite_types'];\r\n    let parsed_data_keys = Object.keys(parsed_data);\r\n    let stat_data = [];\r\n    let stat_mean_score = [];\r\n    let labels = [];\r\n    let data = [];\r\n\r\n    for (let x = 0; x < parsed_data_keys.length; x++) {\r\n        data.push({\r\n            'label': parsed_data_keys[x],\r\n            'total_anime': parsed_data[parsed_data_keys[x]]['total_anime'],\r\n            'mean_score': (parsed_data[parsed_data_keys[x]]['total_score'] /\r\n                parsed_data[parsed_data_keys[x]]['total_scored']).toFixed(2),\r\n        })\r\n    }\r\n\r\n    for (let x = 0; x < data.length; x++) {\r\n        labels.push(data[x]['label']);\r\n        stat_data.push(data[x]['total_anime']);\r\n        stat_mean_score.push(data[x]['mean_score']);\r\n    }\r\n\r\n    return [\r\n        {\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    type: 'line',\r\n                    label: 'Mean Score',\r\n                    data: stat_mean_score,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(235,53,45,0.2)',\r\n                    borderColor: 'rgb(235,53,45)',\r\n                    hoverBackgroundColor: 'rgba(235,53,45,0.4)',\r\n                    hoverBorderColor: 'rgba(235,53,45,1)',\r\n                    pointHoverBackgroundColor: '#ff0000',\r\n                    pointHoverBorderColor: '#ff0000',\r\n                    yAxisID: 'y-axis-2'\r\n                },\r\n                {\r\n                    label: '# of Anime',\r\n                    data: stat_data,\r\n                    fill: false,\r\n                    backgroundColor: 'rgba(54, 162, 235,0.2)',\r\n                    borderColor: 'rgba(54, 162, 235,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(54, 162, 235,0.4)',\r\n                    hoverBorderColor: 'rgba(54, 162, 235,1)',\r\n                    yAxisID: 'y-axis-1'\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            tooltips: {mode: 'label'},\r\n            elements: {line: {fill: false}},\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'left',\r\n                        id: 'y-axis-1',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true}\r\n                    },\r\n                    {\r\n                        type: 'linear',\r\n                        display: true,\r\n                        position: 'right',\r\n                        id: 'y-axis-2',\r\n                        gridLines: {display: false},\r\n                        labels: {show: true},\r\n                        ticks: {min: 0, max: 10, stepSize: 1}\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ];\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Moment from \"react-moment\";\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\nimport {updateAndGetUserAnimeStatistics} from \"../../../actions/users\";\r\nimport {\r\n    getDataFavoriteGenres,\r\n    getDataFavoriteTypes,\r\n    getDataFavoriteYears,\r\n    getDataRatedVsEpisodeCount,\r\n    getDataRatedVsTimeSpent,\r\n    getDataScoreDistribution,\r\n    getTableHistory\r\n} from \"./data_calculations\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {filterTitles} from \"../../browse/functions\";\r\nimport Loading from \"../../layout/common/Loading\";\r\n\r\nconst years_calc = 1000 * 60 * 60 * 24 * 30 * 12;\r\n\r\n\r\nclass Statistics extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.getFavoriteGenres = this.getFavoriteGenres.bind(this);\r\n        this.sortFavoriteGenres = this.sortFavoriteGenres.bind(this);\r\n        this.state = {\r\n            favorite_genres_sorted_by: 'Total',\r\n            data_favorite_genres: {},\r\n            data_favorite_genres_options: {maintainAspectRatio: false},\r\n            updated: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Statistics';\r\n        window.scrollTo(0, 0);\r\n\r\n        this.props.updateAndGetUserAnimeStatistics(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (!this.state.updated)\r\n            this.getFavoriteGenres(this.state.favorite_genres_sorted_by);\r\n        if (prevProps.match.params.id !== this.props.match.params.id) {\r\n            window.scrollTo(0, 0);\r\n            this.props.updateAndGetUserAnimeStatistics(this.props.match.params.id);\r\n        }\r\n    }\r\n\r\n    sortFavoriteGenres() {\r\n        if (this.state.favorite_genres_sorted_by === 'Total')\r\n            this.getFavoriteGenres('Mean');\r\n        else\r\n            this.getFavoriteGenres('Total');\r\n    }\r\n\r\n    getFavoriteGenres(order) {\r\n        try {\r\n            let data_and_options = getDataFavoriteGenres(this.props.user_anime_statistics['user_statistics'], order);\r\n            this.setState({\r\n                favorite_genres_sorted_by: order,\r\n                data_favorite_genres: data_and_options[0],\r\n                data_favorite_genres_options: data_and_options[1],\r\n                updated: true\r\n            })\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let data_sources = {};\r\n        let data_rated_vs_time_spent = {};\r\n        let data_rated_vs_episode_count = {};\r\n        let data_rated_vs_episode_count_options = {maintainAspectRatio: false};\r\n        let data_completed_history;\r\n        let data_favorite_years = {};\r\n        let data_favorite_years_options = {maintainAspectRatio: false};\r\n        let data_favorite_types = {};\r\n        let data_favorite_types_options = {maintainAspectRatio: false};\r\n        let completed_percent_from_all_anime = 0;\r\n        let finished_percent_from_all_anime = 0;\r\n        let episodes_percent_from_all_episodes = 0;\r\n        let minutes_percent_from_all_minutes = 0;\r\n        let all_anime_total_hours = 0;\r\n        let mean_score;\r\n        let hours_watching;\r\n        let years_watching;\r\n        let years_until_completion = 0;\r\n\r\n        try {\r\n            data_sources = getDataScoreDistribution(this.props.user_anime_statistics['user_statistics']);\r\n            data_rated_vs_time_spent = getDataRatedVsTimeSpent(this.props.user_anime_statistics['user_statistics']);\r\n            data_completed_history = getTableHistory(this.props.user_anime_statistics['user_statistics']);\r\n            let data_and_options = getDataRatedVsEpisodeCount(this.props.user_anime_statistics['user_statistics']);\r\n            data_rated_vs_episode_count = data_and_options[0];\r\n            data_rated_vs_episode_count_options = data_and_options[1];\r\n            data_and_options = getDataFavoriteYears(this.props.user_anime_statistics['user_statistics']);\r\n            data_favorite_years = data_and_options[0];\r\n            data_favorite_years_options = data_and_options[1];\r\n            data_and_options = getDataFavoriteTypes(this.props.user_anime_statistics['user_statistics']);\r\n            data_favorite_types = data_and_options[0];\r\n            data_favorite_types_options = data_and_options[1];\r\n            // completed_percent_from_all_anime = ((this.props.user_anime_statistics['anime_completed'] /\r\n            //     anime_data_statistics['total_anime']) * 100).toFixed(1);\r\n            // finished_percent_from_all_anime = ((this.props.user_anime_statistics['anime_total_finished'] /\r\n            //     anime_data_statistics['total_anime']) * 100).toFixed(1);\r\n            hours_watching = (this.props.user_anime_statistics['anime_mins_spent_watching'] / 60).toFixed(1);\r\n            mean_score = this.props.user_anime_statistics['anime_mean_score'].toFixed(1);\r\n            // episodes_percent_from_all_episodes = ((this.props.user_anime_statistics['anime_episodes_watched'] /\r\n            //     anime_data_statistics['total_episodes']) * 100).toFixed(1);\r\n            // all_anime_total_hours = (anime_data_statistics['total_minutes'] / 60).toFixed(1);\r\n            minutes_percent_from_all_minutes = ((hours_watching / all_anime_total_hours) * 100).toFixed(1);\r\n\r\n            const date1 = new Date(this.props.user_anime_statistics['anime_started_watching_on']);\r\n            const date2 = new Date();\r\n            const diffTime = Math.abs(date2 - date1);\r\n            years_watching = (diffTime / years_calc).toFixed(1);\r\n            years_until_completion = ((100 / finished_percent_from_all_anime) * years_watching).toFixed(1);\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"Statistics\" container>\r\n                    <Grid item xs={12}>\r\n                        <h1>Statistics</h1>\r\n                    </Grid>\r\n\r\n                    {!this.props.user_statistics_loading ? <>\r\n                        {/*<Grid item xs={12} md={6}>*/}\r\n                        {/*    <table className=\"generic-stats-table\">*/}\r\n                        {/*        <tbody>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_watching']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_completed']} of{' '}*!/*/}\r\n                        {/*            /!*    {anime_data_statistics['total_anime']} ({completed_percent_from_all_anime}%)</p>*!/*/}\r\n                        {/*            /!*</td>*!/*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_on_hold']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_dropped']}</p></td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr>*/}\r\n                        {/*            <td className=\"text-right\"><Chip label={'Watching'}/></td>*/}\r\n                        {/*            <td>*/}\r\n                        {/*                <p className=\"color-white\">{this.props.user_anime_statistics['anime_plan_to_watch']}</p>*/}\r\n                        {/*            </td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        <tr className=\"text-right\">*/}\r\n                        {/*            <td><Chip label={'Total Entries'}/></td>*/}\r\n                        {/*            <td><p className=\"color-white\">{this.props.user_anime_statistics['anime_total_entries']}</p>*/}\r\n                        {/*            </td>*/}\r\n                        {/*        </tr>*/}\r\n                        {/*        </tbody>*/}\r\n                        {/*    </table>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={12} md={6}>*/}\r\n                        {/*        <table className=\"generic-stats-table\">*/}\r\n                        {/*            <tbody>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Watching since'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">*/}\r\n                        {/*                    <Moment format=\"DD MMM YYYY\"*/}\r\n                        {/*                            date={this.props.user_anime_statistics['anime_started_watching_on']}/>{' '}*/}\r\n                        {/*                            ({years_watching} years)</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Total Finished'}/></td>*/}\r\n                        {/*                /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_total_finished']} of*!/*/}\r\n                        {/*                /!*    {' '}{anime_data_statistics['total_anime']} (*!/*/}\r\n                        {/*                /!*    {finished_percent_from_all_anime}%)</p></td>*!/*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr className=\"text-right\">*/}\r\n                        {/*                <td><Chip label={'Finish rate'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{years_until_completion} years until full*/}\r\n                        {/*                    completion</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Mean score'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{mean_score}</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Total episodes'}/></td>*/}\r\n                        {/*                /!*<td><p className=\"color-white\">{this.props.user_anime_statistics['anime_episodes_watched']}*!/*/}\r\n                        {/*                /!*    {' '}of {anime_data_statistics['total_episodes']}{' '}*!/*/}\r\n                        {/*                /!*    ({episodes_percent_from_all_episodes}%)</p></td>*!/*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            <tr>*/}\r\n                        {/*                <td className=\"text-right\"><Chip label={'Total hours'}/></td>*/}\r\n                        {/*                <td><p className=\"color-white\">{hours_watching} of {all_anime_total_hours}{' '}*/}\r\n                        {/*                    ({minutes_percent_from_all_minutes}%)</p></td>*/}\r\n                        {/*            </tr>*/}\r\n                        {/*            </tbody>*/}\r\n                        {/*        </table>*/}\r\n                        {/*    </Grid>*/}\r\n\r\n                        <Grid item xs={12}>\r\n                            <div className=\"table-container\">\r\n                                <h5 id=\"History\" className=\"text-center\">History</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"History\">*/}\r\n                                {/*    Total number of Anime you have finished in every month. Entries that have unknown*/}\r\n                                {/*    finish date are not taken into account*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <p>\r\n                                    <Chip className=\"chip-default\" size=\"small\" label={'#'}/> Total&nbsp;&nbsp;\r\n                                    <Chip className=\"chip-primary\" size=\"small\" label={'#'}/> Completed&nbsp;&nbsp;\r\n                                    <Chip className=\"chip-danger\" size=\"small\" label={'#'}/> Dropped</p>\r\n                                {data_completed_history}\r\n                            </div>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Score-Distribution\" className=\"text-center\">Score Distribution</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Score-Distribution\">*/}\r\n                                {/*    How many Anime you have scored in each score grade. Every scored entry is taken*/}\r\n                                {/*    into account.*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_sources}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={{maintainAspectRatio: false}}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Rated-Time-Spent\" className=\"text-center\">Rated vs Time spent</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Rated-Time-Spent\">*/}\r\n                                {/*    How much time you have spent watching in all score grades. Every scored entry is*/}\r\n                                {/*    taken into account. Anime with no episodes are not taken into account.*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_rated_vs_time_spent}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={{maintainAspectRatio: false}}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Rated-Episode-Count\" className=\"text-center\">Rated vs Episode count</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Rated-Episode-Count\">*/}\r\n                                {/*    Number of Anime you have completed in various episode formats. Only \"Completed\"*/}\r\n                                {/*    entries are taken, anime with unknown episodes are not taken into account*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_rated_vs_episode_count}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_rated_vs_episode_count_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Types\" className=\"text-center\">Favorite Types</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Types\">*/}\r\n                                {/*    Number of Anime you have in your list from various types. All anime except the ones*/}\r\n                                {/*    in \"Plan to Watch\" are taken into the calculation, entries that are not scored are*/}\r\n                                {/*    not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_favorite_types}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_favorite_types_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Years\" className=\"text-center\">Favorite Years</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Years\">*/}\r\n                                {/*    Number of Anime you have in your list from various years. All anime except the ones*/}\r\n                                {/*    in \"Plan to Watch\" are taken into the calculation, entries that are not scored are*/}\r\n                                {/*    not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Bar\r\n                                    data={data_favorite_years}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={data_favorite_years_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div className=\"bar-container\">\r\n                                <h5 id=\"Favorite-Genres\" className=\"text-center\">Favorite Genres</h5>\r\n                                {/*<UncontrolledTooltip placement=\"top\" target=\"Favorite-Genres\">*/}\r\n                                {/*    Number of Anime you have in your list from various genres. All anime except the*/}\r\n                                {/*    ones in \"Plan to Watch\" are taken into the calculation, entries that are not scored*/}\r\n                                {/*    are not taken into account for the mean score*/}\r\n                                {/*</UncontrolledTooltip>*/}\r\n                                <Button variant=\"outlined\"\r\n                                        onClick={this.sortFavoriteGenres}>{this.state.favorite_genres_sorted_by}</Button>\r\n                                <Bar\r\n                                    data={this.state.data_favorite_genres}\r\n                                    width={100}\r\n                                    height={50}\r\n                                    options={this.state.data_favorite_genres_options}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </> : <Loading text={'Statistics Loading'} offset={150}/>}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_anime_statistics: state.users.user_anime_statistics,\r\n    user_statistics_loading: state.users.user_statistics_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {updateAndGetUserAnimeStatistics})(Statistics)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Moment from 'react-moment'\r\nimport moment from 'moment'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport {getVisitedUserAnimeHistory, getVisitedUserMangaHistory} from '../../../actions/users'\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult, User} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles, getTabName} from \"../../browse/functions\";\r\nimport {getBrowseGridListCols} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\n\r\n\r\nfunction displayHistory(user_history, branch) {\r\n    let lastId = 0;\r\n    let newId = 0;\r\n    let lastMonth = 0;\r\n    let lastDate = 0;\r\n    let lastYear = 0;\r\n    let formatted = [];\r\n    let title;\r\n    let item;\r\n\r\n    try {\r\n        for (let x = 0; x < user_history['results'].length; x++) {\r\n\r\n            let obj = {};\r\n            let nextYear = moment(user_history['results'][x]['timestamp']).date();\r\n            let nextMonth = moment(user_history['results'][x]['timestamp']).month() + 1;\r\n            let nextDate = moment(user_history['results'][x]['timestamp']).date();\r\n\r\n            if (nextYear != lastYear || nextMonth != lastMonth || nextDate != lastDate) {\r\n                lastYear = moment(user_history['results'][x]['timestamp']).date();\r\n                lastMonth = moment(user_history['results'][x]['timestamp']).month() + 1;\r\n                lastDate = moment(user_history['results'][x]['timestamp']).date();\r\n                if (branch === BRANCH_ANIME) {\r\n                    lastId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    title = user_history['results'][x]['anime_list_entry']['anime'];\r\n                    item = user_history['results'][x]['episode'];\r\n                }\r\n                else if (branch === BRANCH_MANGA) {\r\n                    lastId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n                    title = user_history['results'][x]['manga_list_entry']['manga'];\r\n                    item = user_history['results'][x]['chapter'];\r\n                }\r\n                obj = {\r\n                    date: user_history['results'][x]['timestamp'],\r\n                    entries: [\r\n                        {\r\n                            title: title,\r\n                            history: [{\r\n                                item: item,\r\n                                timestamp: user_history['results'][x]['timestamp']\r\n                            }]\r\n                        }\r\n                    ]\r\n                };\r\n                formatted.push(obj)\r\n            } else {\r\n                if (branch === BRANCH_ANIME) {\r\n                    newId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    title = user_history['results'][x]['anime_list_entry']['anime'];\r\n                    item = user_history['results'][x]['episode'];\r\n                }\r\n                else if (branch === BRANCH_MANGA) {\r\n                    newId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n                    title = user_history['results'][x]['manga_list_entry']['manga'];\r\n                    item = user_history['results'][x]['chapter'];\r\n                }\r\n\r\n                if (newId != lastId) {\r\n                    if (branch === BRANCH_ANIME)\r\n                        lastId = user_history['results'][x]['anime_list_entry']['anime']['id'];\r\n                    else if (branch === BRANCH_MANGA)\r\n                        lastId = user_history['results'][x]['manga_list_entry']['manga']['id'];\r\n\r\n                    formatted[formatted.length - 1]['entries'].push({\r\n                        title: title,\r\n                        history: [{\r\n                            item: item,\r\n                            timestamp: user_history['results'][x]['timestamp']\r\n                        }]\r\n                    })\r\n                } else {\r\n                    let last = formatted.length - 1;\r\n                    let lastHistory = formatted[last]['entries'].length - 1;\r\n                    formatted[last]['entries'][lastHistory]['history'].push({\r\n                        item: item,\r\n                        timestamp: user_history['results'][x]['timestamp']\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    } catch (e) {\r\n        return null\r\n    }\r\n\r\n    // noinspection CheckTagEmptyBody\r\n    return formatted.map((date, i) => (\r\n        <li key={i} className=\"timeline-event\">\r\n            <label className=\"timeline-event-icon\"></label>\r\n            <div className=\"timeline-event-copy\">\r\n                <p className=\"timeline-event-thumbnail\">\r\n                    <Moment format=\"Do MMMM YYYY - dddd\" date={date['date']}/></p>\r\n                {date['entries'].map((entry, x) => (\r\n                    <div key={x} className=\"box-light timeline-history-entry\">\r\n                        <div className=\"timeline-history-segment timeline-history-segment-card\">\r\n                            <TitleCard\r\n                                branch={branch}\r\n                                title={entry['title']}\r\n                            />\r\n                        </div>\r\n                        <div className=\"timeline-history-segment timeline-history-segment-episodes\">\r\n                            {entry['history'].map((history, y) => (\r\n                                <p key={y}>{branch === BRANCH_ANIME ? 'Episode ' :\r\n                                    branch === BRANCH_MANGA ? 'Chapter ' : null}\r\n                                    <Chip className=\"chip-info\" size=\"small\" label={history['item']}/> completed\r\n                                    at <Chip className=\"chip-info\" size=\"small\" label={<Moment format=\"HH:mm:ss\"\r\n                                        date={history['timestamp']}/>}/>\r\n                                </p>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </li>\r\n    ))\r\n}\r\n\r\n\r\nclass DisplayUserHistory extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        visited_user_id: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.closePageDialog = this.closePageDialog.bind(this);\r\n        this.goToPage = this.goToPage.bind(this);\r\n        this.state = {\r\n            current_page: 1,\r\n            page_dialog_open: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `${this.props.visited_user[User.username]} History`;\r\n        window.scrollTo(0, 0);\r\n\r\n        if (this.props.branch === BRANCH_ANIME) this.props.getVisitedUserAnimeHistory(this.props.visited_user_id);\r\n        else if (this.props.branch === BRANCH_MANGA) this.props.getVisitedUserMangaHistory(this.props.visited_user_id)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.current_page !== this.state.current_page)\r\n            window.scrollTo(0, 0);\r\n    }\r\n\r\n    closePageDialog() {\r\n        this.setState({page_dialog_open: false})\r\n    }\r\n\r\n    goToPage(page) {\r\n        let total;\r\n        if (this.props.branch === BRANCH_ANIME)\r\n            total = Math.ceil(this.props.user_anime_history[ApiResult.count] / 100);\r\n        else if (this.props.branch === BRANCH_MANGA)\r\n            total = Math.ceil(this.props.user_manga_history[ApiResult.count] / 100);\r\n\r\n        if (page > 0 && page <= total) {\r\n            this.setState({current_page: page});\r\n            if (this.props.branch === BRANCH_ANIME)\r\n                this.props.getVisitedUserAnimeHistory(this.props.match.params.id, page);\r\n            else if (this.props.branch === BRANCH_MANGA)\r\n                this.props.getVisitedUserMangaHistory(this.props.match.params.id, page)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let history;\r\n\r\n        try {\r\n            if (this.props.branch === BRANCH_ANIME) {\r\n                history = displayHistory(this.props.user_anime_history, this.props.branch);\r\n            }\r\n            else if (this.props.branch === BRANCH_MANGA) {\r\n                history = displayHistory(this.props.user_manga_history, this.props.branch);\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <CyberNavbar/>\r\n                <Grid id=\"History-Container\" container>\r\n                    <Grid item xs={12}>\r\n                        <h1>{this.props.branch} History</h1>\r\n                    </Grid>\r\n                    {!this.props.user_info_loading ? <>\r\n                        <Grid item xs={false} lg={1}/>\r\n                        <Grid item xs={12} lg={10}>\r\n                            <ul className=\"timeline\">\r\n                                {history}\r\n                            </ul>\r\n                        </Grid>\r\n                        </>\r\n                        : <Loading text={'History Loading'}/>}\r\n                    {!this.props.user_info_loading ?\r\n                        <div className=\"pagination\">\r\n                            <Pagination\r\n                                count={Math.ceil(this.props.user_anime_history[ApiResult.count] / 100)}\r\n                                color=\"primary\"\r\n                                siblingCount={3}\r\n                                page={this.state.current_page}\r\n                                onChange={(type, page) => {\r\n                                    playClickSound();\r\n                                    if (page !== this.state.current_page)\r\n                                        this.goToPage(page);\r\n                                    else\r\n                                        this.setState({page_dialog_open: true})\r\n                                }}\r\n                            />\r\n                            <GoToPageDialog\r\n                                open={this.state.page_dialog_open}\r\n                                current_page={this.state.current_page}\r\n                                total_pages={Math.ceil(this.props.user_anime_history[ApiResult.count] / 100)}\r\n                                goToPage={this.goToPage}\r\n                                onClose={this.closePageDialog}/>\r\n                        </div> : null}\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_anime_history: state.users.user_anime_history,\r\n    user_manga_history: state.users.user_manga_history,\r\n    user_info_loading: state.users.user_info_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser, getVisitedUserAnimeHistory, getVisitedUserMangaHistory})(DisplayUserHistory)","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Moment from 'react-moment'\r\nimport moment from 'moment'\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport {getVisitedUserAnimeHistory, getVisitedUserMangaHistory} from '../../../actions/users'\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\n\r\nimport '../../../assets/css/users.css'\r\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../../../globals\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport {ApiResult, Profile, User} from \"../../../models\";\r\nimport {playClickSound} from \"../../layout/sounds\";\r\nimport GoToPageDialog from \"../../layout/pagination/goToPageDialog\";\r\nimport {filterTitles, getTabName} from \"../../browse/functions\";\r\nimport {getBrowseGridListCols} from \"../../functions\";\r\nimport {getUser} from \"../../../actions/auth\";\r\nimport DisplayUserHistory from \"./DisplayUserHistory\";\r\nimport UserList from \"../user_list/UserList\";\r\nimport {PrivatePage} from \"../user_list/PrivateList\";\r\n\r\n\r\nfunction isHistoryPrivate(branch, visited_user) {\r\n    switch (branch) {\r\n        case BRANCH_ANIME:\r\n            return visited_user[User.profile][Profile.is_anime_history_private];\r\n        case BRANCH_MANGA:\r\n            return visited_user[User.profile][Profile.is_manga_history_private];\r\n        default:\r\n            return true\r\n    }\r\n}\r\n\r\n\r\nclass History extends Component {\r\n    static propTypes = {\r\n        /** Branch of component. (Anime, Manga, Eroge..) */\r\n        branch: PropTypes.string.isRequired,\r\n    };\r\n\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `History`;\r\n        window.scrollTo(0, 0);\r\n\r\n        this.props.getUser(this.props.match.params.id);\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n            list_owner || !isHistoryPrivate(this.props.branch, this.props.visited_user) ?\r\n                <DisplayUserHistory branch={this.props.branch} visited_user_id={this.props.match.params.id}/> :\r\n                <PrivatePage text={`${this.props.visited_user[User.username]}'s ${this.props.branch} History is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    user_anime_history: state.users.user_anime_history,\r\n    user_manga_history: state.users.user_manga_history,\r\n    user_info_loading: state.users.user_info_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(History)","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport UserList from \"../UserList\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {getUser} from \"../../../../actions/auth\";\r\nimport {PrivatePage} from \"../PrivateList\";\r\n\r\n\r\nclass MangaList extends Component {\r\n    componentDidMount() {\r\n        this.props.getUser(parseInt(this.props.match.params.id));\r\n    }\r\n\r\n    render() {\r\n        let list_owner = false;\r\n        if (this.props.visited_user && this.props.user && this.props.visited_user[User.id] === this.props.user[User.id])\r\n            list_owner = true;\r\n\r\n        return this.props.user_loading ? <Loading/> : this.props.visited_user_loaded ?\r\n        list_owner || !this.props.visited_user[User.profile][Profile.is_manga_list_private] ?\r\n            <UserList\r\n                branch={BRANCH_MANGA}\r\n                params={this.props.match.params}\r\n                list_owner={list_owner}\r\n                titles_loading={this.props.manga_loading}\r\n                filtered_titles_loaded={this.props.filtered_manga_loaded}\r\n                filtered_titles={this.props.filtered_manga}\r\n                title_filters={this.props.manga_filters}\r\n            /> : <PrivatePage text={`${this.props.visited_user[User.username]}'s ${BRANCH_MANGA} List is private.`}/> : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n    user_loading: state.auth.user_loading,\r\n    visited_user: state.auth.visited_user,\r\n    visited_user_loaded: state.auth.visited_user_loaded,\r\n    manga_loading: state.manga.manga_loading,\r\n    filtered_manga_loaded: state.manga.filtered_manga_loaded,\r\n    filtered_manga: state.manga.filtered_manga,\r\n    manga_filters: state.cookies.manga_list_filters\r\n});\r\n\r\nexport default connect(mapStateToProps, {getUser})(MangaList)\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {getAnimeFranchise} from '../../../actions/anime'\r\n\r\nimport FranchiseTree from \"./FranchiseTree\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport CyberHeader from \"../../layout/navbar/CyberHeader\";\r\nimport {FRANCHISES_TAB_NAME} from \"../../../globals\";\r\nimport {isEmpty} from \"../../functions\";\r\nimport {AnimeFranchise} from \"../../../models\";\r\nimport Loading from \"../../layout/common/Loading\";\r\n\r\nimport '../../../assets/css/franchises.css'\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\n\r\n\r\nclass FranchisesHome extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = FRANCHISES_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getAnimeFranchise(this.props.match.params.id);\r\n        this.props.getLoggedInUserAnimeEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        // document.title = `${current_anime_franchise['title']}`;\r\n        let titles = [];\r\n        let avg_score;\r\n\r\n        // try {\r\n        //     if (current_anime_franchise['anime_franchise'].length > 0)\r\n        //         titles = current_anime_franchise['anime_franchise'];\r\n        //     avg_score = current_anime_franchise['average_score'].toFixed(2)\r\n        // } catch (e) {\r\n        // }\r\n\r\n        return (\r\n            <div id=\"Display-Franchise\">\r\n                <CyberHeader/>\r\n                {!isEmpty(this.props.anime_franchise) ?\r\n                    <FranchiseTree titles={this.props.anime_franchise[AnimeFranchise.anime_franchise]}/>\r\n                : this.props.anime_franchise_loading ? <Loading text={'Franchise Loading'}/> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    anime_franchise_loading: state.anime.anime_franchise_loading,\r\n    anime_franchise: state.anime.anime_franchise,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getAnimeFranchise, getLoggedInUserAnimeEntryStatuses})(FranchisesHome)","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Manga, MangaData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_MANGA} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport manga from \"../../../../reducers/manga\";\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.recently_added_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', manga_data[MangaData.recently_added_manga])}\r\n\r\n                    {manga_data[MangaData.recently_added_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction RecentlyDownloaded(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.recently_downloaded_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {console.log('renders tab rendering: ', manga_data[MangaData.recently_added_manga])}\r\n                    {manga_data[MangaData.recently_downloaded_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopUpcoming(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    console.log('mangadata:', manga_data);\r\n    console.log('MangaData.top_upcoming_manga:', manga_data[MangaData.top_upcoming_manga]);\r\n    console.log('manga_data_loaded:', manga_data_loaded);\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Upcoming Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_upcoming_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_upcoming_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScoredMal(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_scored_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_scored_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction MostPopularMal(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.most_popular_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.most_popular_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2010s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_2010s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_2010s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top2000s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2000s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_2000s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_2000s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top90s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1990s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_90s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_90s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top80s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1980s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_80s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_80s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction Top70s(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 1970s Manga</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.top_70s_manga] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {manga_data[MangaData.top_70s_manga].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Manga Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopMangaTabs(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    {/*<Tab label={<p>Recently Downloaded</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>*/}\r\n                    <Tab label={<p>Top Upcoming</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Score</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Most popular</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2010s</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 2000s</p>} {...a11yProps(5)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 90s</p>} {...a11yProps(6)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 80s</p>} {...a11yProps(7)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top 70s</p>} {...a11yProps(8)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <RecentlyAdded\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                {/*<TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>*/}\r\n                {/*    <RecentlyDownloaded*/}\r\n                {/*        manga_data={manga_data}*/}\r\n                {/*        manga_loading={manga_loading}*/}\r\n                {/*        manga_data_loaded={manga_data_loaded}*/}\r\n                {/*        user_manga_entry_statuses={user_manga_entry_statuses}*/}\r\n                {/*    />*/}\r\n                {/*</TabPanel>*/}\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <TopUpcoming\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopScoredMal\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <MostPopularMal\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <Top2010s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={5} dir={theme.direction}>\r\n                    <Top2000s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={6} dir={theme.direction}>\r\n                    <Top90s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={7} dir={theme.direction}>\r\n                    <Top80s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={8} dir={theme.direction}>\r\n                    <Top70s\r\n                        manga_data={manga_data}\r\n                        manga_loading={manga_loading}\r\n                        manga_data_loaded={manga_data_loaded}\r\n                        user_manga_entry_statuses={user_manga_entry_statuses}\r\n                    />\r\n                </TabPanel>\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSnowflake} from \"@fortawesome/free-solid-svg-icons/faSnowflake\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {BRANCH_MANGA} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty} from \"../../functions\";\r\nimport {MANGA_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Manga, MangaData} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\nimport {TopMangaTabs} from \"./tabs/TopMangaTabs\";\r\n\r\n\r\nfunction getIconAndClassFromSeasonNumber(season) {\r\n    switch (season) {\r\n        case 1: return {icon: faSeedling, className: 'spring'};\r\n        case 2: return {icon: faSun, className: 'summer'};\r\n        case 3: return {icon: faLeaf, className: 'fall'};\r\n        case 4: return {icon: faSnowflake, className: 'winter'};\r\n        default: return {icon: faSeedling, className: 'spring'};\r\n    }\r\n}\r\n\r\nfunction CurrentSeason(props) {\r\n    const {manga_data, manga_loading, manga_data_loaded, user_manga_entry_statuses} = props;\r\n    const current_year = new Date().getFullYear();\r\n    let current_month = new Date().getMonth() + 1;\r\n    let current_season_number = 1;\r\n    if (current_month >= 1 && current_month <= 3) current_season_number = 1;\r\n    else if (current_month >= 4 && current_month <= 6) current_season_number = 2;\r\n    else if (current_month >= 7 && current_month <= 9) current_season_number = 3;\r\n    else if (current_month >= 10 && current_month <= 12) current_season_number = 4;\r\n    const current_season = getSeasonLabelFromSeasonNumber(current_season_number);\r\n\r\n    const season_icon_and_class = getIconAndClassFromSeasonNumber(current_season_number);\r\n    return <Grid xs={12} id=\"Current-Season\">\r\n        <div className=\"current-season-header\">\r\n            <h3>\r\n                Current Season{' '}\r\n                <CyberLink to={MANGA_SEASON_DISPLAY(current_year, current_season_number)}>\r\n                    {current_year} {current_season}\r\n                </CyberLink>{' '}\r\n                <FontAwesomeIcon icon={season_icon_and_class.icon}\r\n                                 className={season_icon_and_class.className}/>\r\n            </h3>\r\n        </div>\r\n        <div id=\"season-titles-container\" className=\"current-season-titles-container horizontal-scroll\">\r\n            {manga_data_loaded && manga_data && manga_data[MangaData.current_manga_season] ?\r\n                <div className=\"current-season-titles-wrapper\">\r\n                    {manga_data[MangaData.current_manga_season].map(manga => (\r\n                        <TitleCard\r\n                            containerClassNames=\"current-season-card-container\"\r\n                            branch={BRANCH_MANGA}\r\n                            title={manga}\r\n                            user_status={\r\n                                !isEmpty(user_manga_entry_statuses) ?\r\n                                    user_manga_entry_statuses[manga[Manga.id].toString()] : null}\r\n                        />\r\n                    ))}\r\n                </div> : manga_loading ? <Loading text={'Season Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\n\r\nclass TopManga extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <CurrentSeason\r\n                manga_data={this.props.manga_data}\r\n                manga_loading={this.props.manga_loading}\r\n                manga_data_loaded={this.props.manga_data_loaded}\r\n                user_manga_entry_statuses={this.props.user_manga_entry_statuses}\r\n            />\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopMangaTabs\r\n                manga_data={this.props.manga_data}\r\n                manga_loading={this.props.manga_loading}\r\n                manga_data_loaded={this.props.manga_data_loaded}\r\n                user_manga_entry_statuses={this.props.user_manga_entry_statuses}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    manga_data: state.manga.manga_data,\r\n    manga_loading: state.manga.manga_loading,\r\n    manga_data_loaded: state.manga.manga_data_loaded,\r\n    user_manga_entry_statuses: state.users.user_manga_entry_statuses\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopManga)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {MANGA_TAB_NAME} from \"../../../globals\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport {getLoggedInUserMangaEntryStatuses} from \"../../../actions/users\";\r\nimport {getMangaDataForHomePage} from \"../../../actions/manga\";\r\nimport TopManga from \"./TopManga\";\r\n\r\n\r\nclass MangaHome extends Component {\r\n    componentDidMount() {\r\n        document.title = MANGA_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getMangaDataForHomePage();\r\n        this.props.getLoggedInUserMangaEntryStatuses();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Manga-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopManga/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nexport default connect(mapStateToProps, {getMangaDataForHomePage, getLoggedInUserMangaEntryStatuses})(MangaHome)\r\n","import React, {Component} from 'react'\r\nimport PropTypes, {func} from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {faLeaf, faSeedling, faSun} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {BRANCH_ANIME, BRANCH_CHARACTERS, FILTER_ANIME_INITIAL_VALUES} from \"../../../globals\";\r\nimport {getSeasonLabelFromSeasonNumber, isEmpty, isTimeLessThanAnHourAgo} from \"../../functions\";\r\nimport {getLoggedInUserAnimeEntryStatuses} from \"../../../actions/users\";\r\nimport {ANIME_SEASON_DISPLAY} from \"../../../urls\";\r\nimport {Anime, AnimeData, ApiResult, IndustryData} from \"../../../models\";\r\nimport TitleCard from \"../../layout/cards/TitleCard\";\r\nimport Loading from \"../../layout/common/Loading\";\r\nimport {filterAnime} from \"../../../actions/anime\";\r\nimport {CyberLink} from \"../../layout/common/common\";\r\n\r\nimport '../../../assets/css/home.css'\r\n\r\n\r\nclass TopCharacters extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <Grid xs={12} className=\"horizontal-titles\">\r\n                <div className=\"horizontal-titles-header\">\r\n                    <h3>Most Popular Characters</h3>\r\n                </div>\r\n                <div className=\"horizontal-titles-container horizontal-scroll\">\r\n                    {this.props.industry_data_loaded && this.props.industry_data &&\r\n                        this.props.industry_data[IndustryData.most_popular_characters] ?\r\n                        <div className=\"horizontal-titles-wrapper\">\r\n                            {this.props.industry_data[IndustryData.most_popular_characters].map(character => (\r\n                                <TitleCard\r\n                                    containerClassNames=\"horizontal-titles-card-container\"\r\n                                    branch={BRANCH_CHARACTERS}\r\n                                    title={character}\r\n                                    skip_img_preload={true}\r\n                                />\r\n                            ))}\r\n                        </div> : this.props.industry_data_loading ?\r\n                            <Loading text={'Characters Loading'} block={true}/> : null}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <Grid xs={12} className=\"horizontal-titles\">\r\n                <div className=\"horizontal-titles-header\">\r\n                    <h3>Recently Added Characters</h3>\r\n                </div>\r\n                <div className=\"horizontal-titles-container horizontal-scroll\">\r\n                    {this.props.industry_data_loaded && this.props.industry_data &&\r\n                        this.props.industry_data[IndustryData.recently_added_characters] ?\r\n                        <div className=\"horizontal-titles-wrapper\">\r\n                            {this.props.industry_data[IndustryData.recently_added_characters].map(character => (\r\n                                <TitleCard\r\n                                    containerClassNames=\"horizontal-titles-card-container\"\r\n                                    branch={BRANCH_CHARACTERS}\r\n                                    title={character}\r\n                                    skip_img_preload={true}\r\n                                />\r\n                            ))}\r\n                        </div> : this.props.industry_data_loading ?\r\n                            <Loading text={'Characters Loading'} block={true}/> : null}\r\n                </div>\r\n            </Grid>\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    industry_data: state.industry.industry_data,\r\n    industry_data_loading: state.industry.industry_data_loading,\r\n    industry_data_loaded: state.industry.industry_data_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopCharacters)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {CHARACTERS_TAB_NAME, INDUSTRY_TAB_NAME} from \"../../../globals\";\r\nimport {getCharactersDataForHomePage} from \"../../../actions/characters\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport TopCharacters from \"./TopCharacters\";\r\n\r\nimport '../../../assets/css/characters.css'\r\nimport {getIndustryDataForHomePage} from \"../../../actions/industry\";\r\n\r\n\r\nclass CharactersHome extends Component {\r\n    componentDidMount() {\r\n        document.title = INDUSTRY_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getIndustryDataForHomePage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Characters-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopCharacters/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getIndustryDataForHomePage})(CharactersHome)\r\n","import axios from \"axios\";\r\nimport {GET_INDUSTRY_DATA, INDUSTRY_DATA_LOADING} from \"./types\";\r\nimport {API_GET_INDUSTRY_DATA_FOR_HOME_PAGE} from \"./api_urls\";\r\nimport {tokenConfig} from \"./auth\";\r\nimport {returnErrors} from \"./messages\";\r\n\r\n\r\n// GET INDUSTRY DATA FOR INDUSTRY HOME PAGE\r\nexport const getIndustryDataForHomePage = () => (dispatch, getState) => {\r\n    dispatch({type: INDUSTRY_DATA_LOADING});\r\n\r\n    axios\r\n        .get(API_GET_INDUSTRY_DATA_FOR_HOME_PAGE, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_INDUSTRY_DATA,\r\n                payload: res.data\r\n            })\r\n        })\r\n        .catch(err => {\r\n            if (err.response) dispatch(returnErrors(err.response.data, err.response.status));\r\n            else dispatch(returnErrors(err, 0));\r\n        })\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport {playClickSound, playHoverSound} from \"../../../layout/sounds\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {ErogeData} from \"../../../../models\";\r\nimport TitleCard from \"../../../layout/cards/TitleCard\";\r\nimport {BRANCH_EROGE} from \"../../../../globals\";\r\nimport {isEmpty} from \"../../../functions\";\r\nimport Loading from \"../../../layout/common/Loading\";\r\nimport TopEroge from \"../TopEroge\";\r\n\r\n\r\n\r\nfunction RecentlyAdded(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Added</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.recently_added_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.recently_added_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopScored(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Recently Downloaded</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_scored_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_scored_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nexport function MostPopular(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        <div className=\"horizontal-titles-header\">\r\n            <h3>Most Popular Eroge</h3>\r\n        </div>\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.most_popular_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.most_popular_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopWindows(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top Score on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_windows_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_windows_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction TopAndroid(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Most popular on MAL</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.top_android_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.top_android_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\nfunction LargestSize(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    return <Grid xs={12} className=\"horizontal-titles\">\r\n        {/*<div className=\"horizontal-titles-header\">*/}\r\n        {/*    <h3>Top 2010s</h3>*/}\r\n        {/*</div>*/}\r\n        <div className=\"horizontal-titles-container horizontal-scroll\">\r\n            {eroge_data_loaded && eroge_data && eroge_data[ErogeData.largest_size_eroge] ?\r\n                <div className=\"horizontal-titles-wrapper\">\r\n                    {eroge_data[ErogeData.largest_size_eroge].map(eroge => (\r\n                        <TitleCard\r\n                            containerClassNames=\"horizontal-titles-card-container\"\r\n                            branch={BRANCH_EROGE}\r\n                            title={eroge}\r\n                            skip_img_preload={true}\r\n                        />\r\n                    ))}\r\n                </div> : eroge_loading ? <Loading text={'Eroge Loading'} block={true}/> : null}\r\n        </div>\r\n    </Grid>;\r\n}\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\n/**\r\n * Tabs for the visited user\r\n * @param props.visited_user {Object} Visited user object\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nexport function TopErogeTabs(props) {\r\n    const {eroge_data, eroge_loading, eroge_data_loaded} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleChangeIndex = (index) => {\r\n        setValue(index);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root + ' tabs-root top-titles-tabs'}>\r\n            <AppBar position=\"static\" className=\"app-bar\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"default\"\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={<p>Recently Added</p>} {...a11yProps(0)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Scored</p>} {...a11yProps(1)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Windows</p>} {...a11yProps(2)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Top Android</p>} {...a11yProps(3)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                    <Tab label={<p>Largest</p>} {...a11yProps(4)} onClick={playClickSound} onMouseEnter={playHoverSound}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <SwipeableViews\r\n                axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                index={value}\r\n                onChangeIndex={handleChangeIndex}\r\n            >\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={0} dir={theme.direction}>\r\n                    <RecentlyAdded\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={1} dir={theme.direction}>\r\n                    <TopScored\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={2} dir={theme.direction}>\r\n                    <TopWindows\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={3} dir={theme.direction}>\r\n                    <TopAndroid\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel className=\"top-titles-tab\" value={value} index={4} dir={theme.direction}>\r\n                    <LargestSize\r\n                        eroge_data={eroge_data}\r\n                        eroge_loading={eroge_loading}\r\n                        eroge_data_loaded={eroge_data_loaded}\r\n                    />\r\n                </TabPanel>\r\n\r\n            </SwipeableViews>\r\n        </div>\r\n    );\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport {MostPopular, TopErogeTabs} from \"./tabs/TopErogeTabs\";\r\n\r\nimport '../../../assets/css/home.css'\r\nimport '../../../assets/css/seasons.css'\r\n\r\n\r\nclass TopEroge extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <MostPopular\r\n                eroge_data={this.props.eroge_data}\r\n                eroge_loading={this.props.eroge_loading}\r\n                eroge_data_loaded={this.props.eroge_data_loaded}/>\r\n            <Grid item xs={12}>\r\n                <Divider variant=\"middle\" className=\"charts-divider\"/>\r\n            </Grid>\r\n            <TopErogeTabs\r\n                eroge_data={this.props.eroge_data}\r\n                eroge_loading={this.props.eroge_loading}\r\n                eroge_data_loaded={this.props.eroge_data_loaded}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    eroge_data: state.eroge.eroge_data,\r\n    eroge_loading: state.eroge.eroge_loading,\r\n    eroge_data_loaded: state.eroge.eroge_data_loaded,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(TopEroge)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {ANIME_TAB_NAME, EROGE_BROWSE_TAB_NAME, EROGE_TAB_NAME} from \"../../../globals\";\r\nimport {getErogeDataForHomePage} from \"../../../actions/eroge\";\r\nimport CyberNavbar from \"../../layout/navbar/CyberNavbar\";\r\nimport CyberFooter from \"../../layout/footer/CyberFooter\";\r\nimport TopEroge from \"./TopEroge\";\r\n\r\n\r\nclass ErogeHome extends Component {\r\n    componentDidMount() {\r\n        document.title = EROGE_TAB_NAME;\r\n        window.scrollTo(0, 0);\r\n        this.props.getErogeDataForHomePage();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Eroge-Home\" className=\"title-home-page\">\r\n                <CyberNavbar/>\r\n                <Grid container>\r\n                    <TopEroge/>\r\n                    <Grid xs={12}>\r\n                        {/*<AnimeStatistics/>*/}\r\n                    </Grid>\r\n                </Grid>\r\n                <CyberFooter/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n});\r\n\r\nexport default connect(mapStateToProps, {getErogeDataForHomePage})(ErogeHome)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE} from \"../../../globals\";\r\nimport Browse from \"../../browse/Browse\";\r\n\r\n\r\nclass PeopleBrowse extends Component {\r\n    render() {\r\n        return <Browse\r\n            branch={BRANCH_PEOPLE}\r\n            titles_loading={this.props.people_loading}\r\n            filtered_titles_loaded={this.props.filtered_people_loaded}\r\n            filtered_titles={this.props.filtered_people}\r\n            title_filters={this.props.people_filters}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    people_loading: state.people.people_loading,\r\n    filtered_people_loaded: state.people.filtered_people_loaded,\r\n    filtered_people: state.people.filtered_people,\r\n    people_filters: state.cookies.people_filters,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PeopleBrowse)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {BRANCH_PEOPLE} from \"../../../globals\";\r\nimport Display from \"../../display/Display\";\r\n\r\n\r\nclass PersonDisplay extends Component {\r\n    render() {\r\n        return <Display\r\n            branch={BRANCH_PEOPLE}\r\n            param_id={this.props.match.params.id}\r\n            title={this.props.person}\r\n            title_loaded={this.props.people_loaded}\r\n            title_loading={this.props.people_loading}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    person: state.people.person,\r\n    people_loaded: state.people.people_loaded,\r\n    people_loading: state.people.people_loading,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(PersonDisplay)\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ReactHtmlParser, {} from 'react-html-parser';\r\n\r\nimport CyberFooter from \"../../../layout/footer/CyberFooter\";\r\nimport CyberNavbar from \"../../../layout/navbar/CyberNavbar\";\r\n\r\nimport '../../../../assets/css/bbcode_editor.css'\r\nimport {CyberButton} from \"../../../layout/common/common\";\r\nimport {testingParser} from \"./parser\";\r\nimport {Profile, User} from \"../../../../models\";\r\nimport {editUserAboutMeBBCode} from \"../../../../actions/users\";\r\n\r\n\r\n/**\r\n * Custom attribute for bbCode [img] tag, users can set width in '%' for dynamic width of images,\r\n * this function checks for that attribute and applies it to actual img html tag.\r\n */\r\nclass BBCodeEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateEditor = this.updateEditor.bind(this);\r\n        this.submitBbCode = this.submitBbCode.bind(this);\r\n        this.state = {\r\n            bbcode: this.props.user[User.profile][Profile.about_section_bbcode]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'BBCode Editor';\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    updateEditor(e) {\r\n        this.setState({bbcode: e.target.value});\r\n    }\r\n\r\n    submitBbCode() {\r\n        this.props.editUserAboutMeBBCode(this.state.bbcode)\r\n    }\r\n\r\n    render() {\r\n        const bbcode = this.state.bbcode ? this.state.bbcode.replaceAll('\\n', '[br][/br]') : this.state.bbcode;\r\n\r\n        return (<>\r\n            <CyberNavbar/>\r\n            <Grid id=\"BBCode-Editor\" container>\r\n                <Grid item xs={4}>\r\n                    <div className=\"editor-container box-light\">\r\n                        <CyberButton variant={'contained'} color={'primary'} onClick={this.submitBbCode}>\r\n                            Upload\r\n                        </CyberButton>\r\n                        <TextField\r\n                            id=\"BBCode-Editor-Field\"\r\n                            label=\"BBCode Text Editor\"\r\n                            className=\"form-control\"\r\n                            multiline\r\n                            value={this.state.bbcode}\r\n                            name=\"bbcode-editor\"\r\n                            onChange={this.updateEditor}\r\n                        />\r\n                        <p className=\"color-gray\">Type your bbCode here and see it update in real time.</p>\r\n                        <p className=\"color-gray\">Hit the Upload button to update your About Me bbCode.</p>\r\n                    </div>\r\n\r\n                    <div className=\"available-tags box-light\">\r\n                        <h2>Available tags</h2>\r\n                        <p><span className=\"tag-color\">[br][/br]</span> - <span className=\"color-gray\">Start in a new line</span></p>\r\n                        <p><span className=\"tag-color\">[b]</span>Bold<span className=\"tag-color\">[/b]</span> - <span className=\"color-gray\"><b>Bold</b></span></p>\r\n                        <p><span className=\"tag-color\">[i]</span>Italic<span className=\"tag-color\">[/i]</span> - <span className=\"color-gray\"><i>Italic</i></span></p>\r\n                        <p><span className=\"tag-color\">[u]</span>Underline<span className=\"tag-color\">[/u]</span> - <span className=\"color-gray\"><u>Underline</u></span></p>\r\n                        <p><span className=\"tag-color\">[s]</span>Strikethrough<span className=\"tag-color\">[/s]</span> - <span className=\"color-gray\"><s>Strikethrough</s></span></p>\r\n                        <p><span className=\"tag-color\">[color=red]</span>Colored Text<span className=\"tag-color\">[/color]</span> - <span style={{color: 'red'}}>Colored Text</span></p>\r\n                        <p><span className=\"tag-color\">[color=#ff0000]</span>Colored Text<span className=\"tag-color\">[/color]</span> - <span style={{color: '#ff0000'}}>Colored Text with HEX</span></p>\r\n                        <p><span className=\"tag-color\">[size=30]</span>Bigger text<span className=\"tag-color\">[/size]</span> - <span className=\"color-gray\" style={{fontSize: 30}}>Bigger text</span></p>\r\n                        <p><span className=\"tag-color\">[center]</span>Center<span className=\"tag-color\">[/center]</span> - <span className=\"color-gray\">Centers elements (Text, Image)</span></p>\r\n                        <p><span className=\"tag-color\">[left]</span>Left<span className=\"tag-color\">[/left]</span> - <span className=\"color-gray\">Left aligns elements (Text, Image)</span></p>\r\n                        <p><span className=\"tag-color\">[right]</span>Right<span className=\"tag-color\">[/right]</span> - <span className=\"color-gray\">Right aligns elements (Text, Image)</span></p>\r\n                        <p><span className=\"tag-color\">[quote]</span>quoted text<span className=\"tag-color\">[/quote]</span> - <span className=\"color-gray\">Quoted text</span></p>\r\n                        <p><span className=\"tag-color\">[url]</span>https://cyber-genesis.rf.gd<span className=\"tag-color\">[/url]</span> - <a href=\"https://cyber-genesis.rf.gd\">https://cyber-genesis.rf.gd</a></p>\r\n                        <p><span className=\"tag-color\">[url=https://cyber-genesis.rf.gd]</span>Name<span className=\"tag-color\">[/url]</span> - <a href=\"https://cyber-genesis.rf.gd\">Name</a></p>\r\n                        <p><span className=\"tag-color\">[img]</span>https://i.imgur.com/WGEbacJ.jpg<span className=\"tag-color\">[/img]</span> - <span className=\"color-gray\">Image/Gif</span></p>\r\n                        <p><span className=\"tag-color\">[img width=100% height=50]</span>https://i.imgur.com/WGEbacJ.jpg<span className=\"tag-color\">[/img]</span> - <span className=\"color-gray\">Image/Gif resized (in %/px)</span></p>\r\n                        <p><span className=\"tag-color\">[list][*]</span>1<span className=\"tag-color\">[*]</span>2<span className=\"tag-color\">[/list]</span> - <span className=\"color-gray\">List of items</span></p>\r\n                        <p><span className=\"tag-color\">[table][tr][td]</span>cell<span className=\"tag-color\">[/td][/tr][/table]</span> - <span className=\"color-gray\">Table of items</span></p>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <div id=\"BBCode_Container\" className=\"bbcode-container\">\r\n                        {ReactHtmlParser(testingParser(bbcode))}\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <CyberFooter/>\r\n        </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {editUserAboutMeBBCode})(BBCodeEditor)\r\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\n// noinspection ES6CheckImport\nimport {BrowserRouter, Redirect, Route, Switch} from \"react-router-dom\";\n\nimport Home from \"./home/Home\";\n\nimport 'fontsource-roboto';\nimport {\n    ANIME_BROWSE,\n    ANIME_FRANCHISES,\n    ANIME_HOME,\n    ANIME_SEASONS,\n    HOME,\n    LOGIN,\n    MANGA_BROWSE,\n    MANGA_FRANCHISES,\n    MANGA_HOME,\n    MANGA_SEASONS,\n    PROFILE,\n    REGISTER,\n    INDEX,\n    NOT_FOUND,\n    ANIME_DISPLAY,\n    MANGA_DISPLAY,\n    CHARACTERS_HOME,\n    CHARACTERS_BROWSE,\n    CHARACTERS_DISPLAY,\n    EROGE_HOME,\n    EROGE_BROWSE,\n    EROGE_DISPLAY,\n    ANIME_SEASON_DISPLAY,\n    SETTINGS,\n    MANGA_SEASON_DISPLAY,\n    USER_ANIME_LIST,\n    USER_MANGA_LIST,\n    USER_EROGE_LIST,\n    USER_ANIME_STATISTICS,\n    USER_ANIME_HISTORY,\n    USER_MANGA_HISTORY,\n    ANIME_FRANCHISE_DISPLAY, PEOPLE_HOME, PEOPLE_BROWSE, PERSON_DISPLAY, USER_ACHIEVEMENTS, BBCODE_EDITOR\n} from \"../urls\";\n\nimport store from '../store'\nimport {authUser} from \"../actions/auth\";\nimport {loadSounds} from \"./layout/sounds\";\nimport AnimeHome from \"./anime/home/AnimeHome\";\nimport Login from \"./auth/Login\";\nimport Register from \"./auth/Register\";\nimport AnimeBrowse from \"./anime/browse/AnimeBrowse\";\nimport Index from \"./index/Index\";\nimport Profile from \"./user/profile/Profile\";\nimport Settings from \"./user/settings/Settings\";\nimport MangaBrowse from \"./manga/browse/MangaBrowse\";\nimport AnimeDisplay from \"./anime/display/AnimeDisplay\";\nimport MangaDisplay from \"./manga/display/MangaDisplay\";\nimport CharactersBrowse from \"./characters/browse/CharactersBrowse\";\nimport CharacterDisplay from \"./characters/display/CharacterDisplay\";\nimport ErogeBrowse from \"./eroge/browse/ErogeBrowse\";\nimport ErogeDisplay from \"./eroge/display/ErogeDisplay\";\nimport BrowseAnimeSeasons from \"./anime/seasons/BrowseAnimeSeasons\";\nimport BrowseMangaSeasons from \"./manga/seasons/BrowseMangaSeasons\";\nimport NotFound from \"./layout/404/404\";\nimport Alerts from \"./layout/alerts/Alerts\";\nimport DisplaySeason from \"./seasons/DisplaySeason\";\nimport {BRANCH_ANIME, BRANCH_MANGA} from \"../globals\";\nimport AnimeList from \"./user/user_list/anime/AnimeList\";\nimport Statistics from \"./user/statistics/Statistics\";\nimport History from \"./user/history/History\";\nimport {LoadGifs} from \"./layout/common/common\";\nimport MangaList from \"./user/user_list/manga/MangaList\";\nimport DisplayFranchise from \"./franchises/display/DisplayFranchise\";\nimport Loading from \"./layout/common/Loading\";\nimport MangaHome from \"./manga/home/MangaHome\";\nimport CharactersHome from \"./characters/home/CharactersHome\";\nimport ErogeHome from \"./eroge/home/ErogeHome\";\nimport PeopleBrowse from \"./people/browse/PeopleBrowse\";\nimport PersonDisplay from \"./people/display/PersonDisplay\";\nimport BBCodeEditor from \"./user/settings/bbcode_editor/BBCodeEditor\";\n\n\n// noinspection JSClassNamingConvention,JSCheckFunctionSignatures\nclass App extends Component {\n    componentDidMount() {\n        store.dispatch(authUser());\n        loadSounds();\n    }\n\n    render() {\n        if (this.props.initial_auth)\n            return <Loading text={'Initializing...'}/>;\n        else return (\n            <BrowserRouter>\n                <Alerts/>\n                <LoadGifs/>\n                <Switch>\n                    <Route exact path={INDEX} component={Index}/>\n                    <Route exact path={LOGIN} component={Login}/>\n                    <Route exact path={REGISTER} component={Register}/>\n                    {!this.props.user_authenticated ? <Redirect to={LOGIN}/> : null}\n                    <Route exact path={HOME} component={Home}/>\n\n                    <Route exact path={SETTINGS} component={Settings}/>\n                    <Route exact path={PROFILE()} component={Profile}/>\n                    <Route exact path={USER_ANIME_LIST()} component={AnimeList}/>\n                    <Route exact path={USER_MANGA_LIST()} component={MangaList}/>\n                    <Route exact path={USER_EROGE_LIST()} component={NotFound}/>\n                    <Route exact path={USER_ANIME_STATISTICS()} component={Statistics}/>\n                    <Route path={USER_ANIME_HISTORY()}\n                           render={(props) => <History {...props} branch={BRANCH_ANIME}/>}/>\n                    <Route path={USER_MANGA_HISTORY()}\n                           render={(props) => <History {...props} branch={BRANCH_MANGA}/>}/>\n\n                    <Route exact path={BBCODE_EDITOR} component={BBCodeEditor}/>\n\n                    <Route exact path={ANIME_HOME} component={AnimeHome}/>\n                    <Route exact path={ANIME_BROWSE} component={AnimeBrowse}/>\n                    <Route exact path={ANIME_SEASONS} component={BrowseAnimeSeasons}/>\n                    <Route exact path={ANIME_SEASON_DISPLAY()}\n                           render={(props) => <DisplaySeason {...props} branch={BRANCH_ANIME}/>}/>\n                    <Route exact path={ANIME_FRANCHISES} component={NotFound}/>\n                    <Route exact path={ANIME_FRANCHISE_DISPLAY()} component={DisplayFranchise}/>\n                    <Route exact path={ANIME_DISPLAY()} component={AnimeDisplay}/>\n\n                    <Route exact path={MANGA_HOME} component={MangaHome}/>\n                    <Route exact path={MANGA_BROWSE} component={MangaBrowse}/>\n                    <Route exact path={MANGA_SEASONS} component={BrowseMangaSeasons}/>\n                    <Route exact path={MANGA_SEASON_DISPLAY()}\n                           render={(props) => <DisplaySeason {...props} branch={BRANCH_MANGA}/>}/>\n                    <Route exact path={MANGA_FRANCHISES} component={NotFound}/>\n                    <Route exact path={MANGA_DISPLAY()} component={MangaDisplay}/>\n\n                    <Route exact path={CHARACTERS_HOME} component={CharactersHome}/>\n                    <Route exact path={CHARACTERS_BROWSE} component={CharactersBrowse}/>\n                    <Route exact path={CHARACTERS_DISPLAY()} component={CharacterDisplay}/>\n\n                    {/*<Route exact path={PEOPLE_HOME} component={CharactersHome}/>*/}\n                    <Route exact path={PEOPLE_BROWSE} component={PeopleBrowse}/>\n                    <Route exact path={PERSON_DISPLAY()} component={PersonDisplay}/>\n\n                    <Route exact path={EROGE_HOME} component={ErogeHome}/>\n                    <Route exact path={EROGE_BROWSE} component={ErogeBrowse}/>\n                    <Route exact path={EROGE_DISPLAY()} component={ErogeDisplay}/>\n\n                    <Route exact path={NOT_FOUND} component={NotFound}/>\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    message: state.errors.message,\n    status: state.errors.status,\n    initial_auth: state.auth.initial_auth,\n    user_authenticated: state.auth.user_authenticated,\n});\n\nexport default connect(mapStateToProps, {})(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from './store'\nimport reportWebVitals from './reportWebVitals';\n\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\nimport {Provider as AlertProvider} from 'react-alert'\nimport yourRawTheme from './theme.json';\n\nimport {AlertOptions, MyAlertTemplate} from \"./components/layout/alerts/AlertTemplate\";\nimport App from './components/App';\n\nimport './index.css';\nimport './assets/css/cyber-ui.css';\n\nconst theme = createMuiTheme(yourRawTheme);\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <AlertProvider template={MyAlertTemplate} {...AlertOptions}>\n                    <App/>\n                </AlertProvider>\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import Alert from \"@material-ui/lab/Alert\";\r\nimport store from \"../../../store\";\r\nimport {cleanErrors, clearMessage} from \"../../../actions/messages\";\r\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const AlertOptions = {\r\n    timeout: 3000,\r\n    position: 'bottom left'\r\n};\r\n\r\nexport const MyAlertTemplate = ({style, options, message, close}) => (\r\n    <Alert severity={\r\n        options.type === 'error' ? 'error' :\r\n            options.type === 'success' ? 'success' : 'info'}\r\n           className=\"alert\"\r\n           onClose={close}>\r\n        <AlertTitle>{options.type}</AlertTitle>\r\n        <p>{message}</p>\r\n    </Alert>\r\n);"],"sourceRoot":""}